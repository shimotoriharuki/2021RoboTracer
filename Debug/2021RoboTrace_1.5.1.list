
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019520  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be4  080196e0  080196e0  000296e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a2c4  0801a2c4  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a2c4  0801a2c4  0002a2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a2cc  0801a2cc  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a2cc  0801a2cc  0002a2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a2d4  0801a2d4  0002a2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a2d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00046ad8  200001e0  0801a4b4  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20046cb8  0801a4b4  00036cb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ae4d  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007be5  00000000  00000000  0006b059  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002318  00000000  00000000  00072c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002048  00000000  00000000  00074f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354a8  00000000  00000000  00076fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000264e8  00000000  00000000  000ac448  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110f80  00000000  00000000  000d2930  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e38b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a690  00000000  00000000  001e392c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080196c8 	.word	0x080196c8

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	080196c8 	.word	0x080196c8

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a f818 	bl	800b00c <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200447ac 	.word	0x200447ac

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a f800 	bl	800b00c <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200447ac 	.word	0x200447ac

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 fea1 	bl	800ad68 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fc08 	bl	800983c <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fc02 	bl	800983c <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fbfc 	bl	800983c <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fbf6 	bl	800983c <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fbf0 	bl	800983c <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fbea 	bl	800983c <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fbe4 	bl	800983c <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fbde 	bl	800983c <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fbd8 	bl	800983c <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fbd2 	bl	800983c <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fbc6 	bl	800983c <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fbc0 	bl	800983c <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 fea1 	bl	8016e70 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d fcd0 	bl	800eb9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d fccc 	bl	800eb9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d fcc8 	bl	800eb9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d fcc4 	bl	800eb9c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20044898 	.word	0x20044898
 8001248:	20044800 	.word	0x20044800
 800124c:	20044920 	.word	0x20044920

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20044898 	.word	0x20044898
 800137c:	20044920 	.word	0x20044920
 8001380:	20044800 	.word	0x20044800

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20044898 	.word	0x20044898
 80013c4:	20044800 	.word	0x20044800
 80013c8:	20044920 	.word	0x20044920

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d fc84 	bl	800ed3c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d fc80 	bl	800ed3c <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20044a00 	.word	0x20044a00
 8001458:	200446e4 	.word	0x200446e4
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	ee07 3a90 	vmov	s15, r3
}
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f9d8 	bl	8001b58 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80017a8:	f000 f9ec 	bl	8001b84 <fopen_folder_and_file>

	return ret;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <user_fclose+0x1c>)
 80017c4:	f012 f814 	bl	80137f0 <f_close>

	return ret;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200435f0 	.word	0x200435f0

080017d8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
 80017f0:	e030      	b.n	8001854 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feba 	bl	8000578 <__aeabi_f2d>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	e9cd 3400 	strd	r3, r4, [sp]
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <sd_write_float+0x94>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <sd_write_float+0x98>)
 8001812:	f014 fbe1 	bl	8015fd8 <sniprintf>

		if(state == ADD_WRITE){
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <sd_write_float+0x9c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <sd_write_float+0x9c>)
 8001824:	f012 f858 	bl	80138d8 <f_lseek>
 8001828:	e003      	b.n	8001832 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800182a:	2100      	movs	r1, #0
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <sd_write_float+0x9c>)
 800182e:	f012 f853 	bl	80138d8 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <sd_write_float+0x98>)
 8001834:	f7fe fce4 	bl	8000200 <strlen>
 8001838:	4602      	mov	r2, r0
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <sd_write_float+0xa0>)
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <sd_write_float+0x98>)
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <sd_write_float+0x9c>)
 8001840:	f011 fdc1 	bl	80133c6 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001844:	f000 f9b8 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184c:	b29b      	uxth	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	81fb      	strh	r3, [r7, #14]
 8001854:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbc8      	blt.n	80017f2 <sd_write_float+0x1a>
	}
	return ret;
 8001860:	7b7b      	ldrb	r3, [r7, #13]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	080196e0 	.word	0x080196e0
 8001870:	20043560 	.word	0x20043560
 8001874:	200435f0 	.word	0x200435f0
 8001878:	200435e0 	.word	0x200435e0

0800187c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f960 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d108      	bne.n	80018b2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80018a0:	4822      	ldr	r0, [pc, #136]	; (800192c <sd_write_array_float+0xb0>)
 80018a2:	f011 ffcf 	bl	8013844 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80018a6:	4822      	ldr	r0, [pc, #136]	; (8001930 <sd_write_array_float+0xb4>)
 80018a8:	f012 fa3a 	bl	8013d20 <f_unlink>
		f_chdir("..");
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <sd_write_array_float+0xb8>)
 80018ae:	f011 ffc9 	bl	8013844 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80018b2:	f000 f967 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80018b6:	2300      	movs	r3, #0
 80018b8:	82fb      	strh	r3, [r7, #22]
 80018ba:	e028      	b.n	800190e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80018bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe55 	bl	8000578 <__aeabi_f2d>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	e9cd 3400 	strd	r3, r4, [sp]
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <sd_write_array_float+0xbc>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <sd_write_array_float+0xc0>)
 80018dc:	f014 fb7c 	bl	8015fd8 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <sd_write_array_float+0xc4>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4816      	ldr	r0, [pc, #88]	; (8001940 <sd_write_array_float+0xc4>)
 80018e8:	f011 fff6 	bl	80138d8 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <sd_write_array_float+0xc0>)
 80018ee:	f7fe fc87 	bl	8000200 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <sd_write_array_float+0xc8>)
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <sd_write_array_float+0xc0>)
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <sd_write_array_float+0xc4>)
 80018fa:	f011 fd64 	bl	80133c6 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018fe:	f000 f95b 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001902:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
 800190e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbd0      	blt.n	80018bc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <sd_write_array_float+0xc4>)
 800191c:	f011 ff68 	bl	80137f0 <f_close>

	return ret;
 8001920:	7d7b      	ldrb	r3, [r7, #21]
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	20043460 	.word	0x20043460
 8001930:	20042320 	.word	0x20042320
 8001934:	080196fc 	.word	0x080196fc
 8001938:	080196e0 	.word	0x080196e0
 800193c:	20043560 	.word	0x20043560
 8001940:	200435f0 	.word	0x200435f0
 8001944:	200435e0 	.word	0x200435e0

08001948 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f8f8 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001968:	f000 f90c 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800196c:	e019      	b.n	80019a2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800196e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4913      	ldr	r1, [pc, #76]	; (80019c8 <sd_read_array_float+0x80>)
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <sd_read_array_float+0x84>)
 800197e:	f014 fb7f 	bl	8016080 <siscanf>
		i++;
 8001982:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001986:	b29b      	uxth	r3, r3
 8001988:	3301      	adds	r3, #1
 800198a:	b29b      	uxth	r3, r3
 800198c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800198e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	db03      	blt.n	80019a2 <sd_read_array_float+0x5a>
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3b01      	subs	r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <sd_read_array_float+0x88>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <sd_read_array_float+0x84>)
 80019a8:	f012 fb98 	bl	80140dc <f_gets>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1dd      	bne.n	800196e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019b2:	f000 f901 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <sd_read_array_float+0x88>)
 80019b8:	f011 ff1a 	bl	80137f0 <f_close>

	return ret;
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	080196ec 	.word	0x080196ec
 80019cc:	20043560 	.word	0x20043560
 80019d0:	200435f0 	.word	0x200435f0

080019d4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f8b2 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019f4:	f000 f8c6 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019f8:	e019      	b.n	8001a2e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4913      	ldr	r1, [pc, #76]	; (8001a54 <sd_read_array_double+0x80>)
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <sd_read_array_double+0x84>)
 8001a0a:	f014 fb39 	bl	8016080 <siscanf>
		i++;
 8001a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	db03      	blt.n	8001a2e <sd_read_array_double+0x5a>
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <sd_read_array_double+0x88>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4809      	ldr	r0, [pc, #36]	; (8001a58 <sd_read_array_double+0x84>)
 8001a34:	f012 fb52 	bl	80140dc <f_gets>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1dd      	bne.n	80019fa <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a3e:	f000 f8bb 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <sd_read_array_double+0x88>)
 8001a44:	f011 fed4 	bl	80137f0 <f_close>

	return ret;
 8001a48:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	080196f8 	.word	0x080196f8
 8001a58:	20043560 	.word	0x20043560
 8001a5c:	200435f0 	.word	0x200435f0

08001a60 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int16_t *data, char state){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f86e 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001a7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d108      	bne.n	8001a96 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001a84:	481f      	ldr	r0, [pc, #124]	; (8001b04 <sd_write_array_int+0xa4>)
 8001a86:	f011 fedd 	bl	8013844 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001a8a:	481f      	ldr	r0, [pc, #124]	; (8001b08 <sd_write_array_int+0xa8>)
 8001a8c:	f012 f948 	bl	8013d20 <f_unlink>
		f_chdir("..");
 8001a90:	481e      	ldr	r0, [pc, #120]	; (8001b0c <sd_write_array_int+0xac>)
 8001a92:	f011 fed7 	bl	8013844 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001a96:	f000 f875 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	82fb      	strh	r3, [r7, #22]
 8001a9e:	e022      	b.n	8001ae6 <sd_write_array_int+0x86>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001aa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <sd_write_array_int+0xb0>)
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	4818      	ldr	r0, [pc, #96]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ab4:	f014 fa90 	bl	8015fd8 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <sd_write_array_int+0xb8>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4816      	ldr	r0, [pc, #88]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ac0:	f011 ff0a 	bl	80138d8 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001ac4:	4813      	ldr	r0, [pc, #76]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ac6:	f7fe fb9b 	bl	8000200 <strlen>
 8001aca:	4602      	mov	r2, r0
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <sd_write_array_int+0xbc>)
 8001ace:	4911      	ldr	r1, [pc, #68]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ad0:	4811      	ldr	r0, [pc, #68]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ad2:	f011 fc78 	bl	80133c6 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001ad6:	f000 f86f 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001ada:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	82fb      	strh	r3, [r7, #22]
 8001ae6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbd6      	blt.n	8001aa0 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <sd_write_array_int+0xb8>)
 8001af4:	f011 fe7c 	bl	80137f0 <f_close>

	return ret;
 8001af8:	7d7b      	ldrb	r3, [r7, #21]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20043460 	.word	0x20043460
 8001b08:	20042320 	.word	0x20042320
 8001b0c:	080196fc 	.word	0x080196fc
 8001b10:	08019700 	.word	0x08019700
 8001b14:	20043560 	.word	0x20043560
 8001b18:	200435f0 	.word	0x200435f0
 8001b1c:	200435e0 	.word	0x200435e0

08001b20 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4908      	ldr	r1, [pc, #32]	; (8001b50 <sd_mount+0x30>)
 8001b2e:	4809      	ldr	r0, [pc, #36]	; (8001b54 <sd_mount+0x34>)
 8001b30:	f011 f8d6 	bl	8012ce0 <f_mount>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <sd_mount+0x20>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	e001      	b.n	8001b44 <sd_mount+0x24>
	else ret = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001b44:	79fb      	ldrb	r3, [r7, #7]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	08019708 	.word	0x08019708
 8001b54:	20042420 	.word	0x20042420

08001b58 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <create_path+0x24>)
 8001b66:	f014 fab7 	bl	80160d8 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <create_path+0x28>)
 8001b6e:	f014 fab3 	bl	80160d8 <strcpy>

}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20043460 	.word	0x20043460
 8001b80:	20042320 	.word	0x20042320

08001b84 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b8a:	f012 f98b 	bl	8013ea4 <f_mkdir>

	f_chdir(dirpath);
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b90:	f011 fe58 	bl	8013844 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001b94:	2213      	movs	r2, #19
 8001b96:	4905      	ldr	r1, [pc, #20]	; (8001bac <fopen_folder_and_file+0x28>)
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <fopen_folder_and_file+0x2c>)
 8001b9a:	f011 f8e7 	bl	8012d6c <f_open>

	f_chdir("..");
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <fopen_folder_and_file+0x30>)
 8001ba0:	f011 fe50 	bl	8013844 <f_chdir>


}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20043460 	.word	0x20043460
 8001bac:	20042320 	.word	0x20042320
 8001bb0:	200435f0 	.word	0x200435f0
 8001bb4:	080196fc 	.word	0x080196fc

08001bb8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	e007      	b.n	8001bd4 <bufclear+0x1c>
		buffer[i] = '\0';
 8001bc4:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <bufclear+0x30>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8001bd8:	ddf4      	ble.n	8001bc4 <bufclear+0xc>
	}
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20043560 	.word	0x20043560

08001bec <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c06:	480e      	ldr	r0, [pc, #56]	; (8001c40 <read_byte+0x54>)
 8001c08:	f009 f8ae 	bl	800ad68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c0c:	f107 010f 	add.w	r1, r7, #15
 8001c10:	2364      	movs	r3, #100	; 0x64
 8001c12:	2201      	movs	r2, #1
 8001c14:	480b      	ldr	r0, [pc, #44]	; (8001c44 <read_byte+0x58>)
 8001c16:	f00c fa57 	bl	800e0c8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001c1a:	f107 010e 	add.w	r1, r7, #14
 8001c1e:	2364      	movs	r3, #100	; 0x64
 8001c20:	2201      	movs	r2, #1
 8001c22:	4808      	ldr	r0, [pc, #32]	; (8001c44 <read_byte+0x58>)
 8001c24:	f00c fb84 	bl	800e330 <HAL_SPI_Receive>
	CS_SET;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2e:	4804      	ldr	r0, [pc, #16]	; (8001c40 <read_byte+0x54>)
 8001c30:	f009 f89a 	bl	800ad68 <HAL_GPIO_WritePin>

	return val;
 8001c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020400 	.word	0x40020400
 8001c44:	2004468c 	.word	0x2004468c

08001c48 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <write_byte+0x54>)
 8001c6a:	f009 f87d 	bl	800ad68 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c6e:	f107 010f 	add.w	r1, r7, #15
 8001c72:	2364      	movs	r3, #100	; 0x64
 8001c74:	2201      	movs	r2, #1
 8001c76:	480a      	ldr	r0, [pc, #40]	; (8001ca0 <write_byte+0x58>)
 8001c78:	f00c fa26 	bl	800e0c8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001c7c:	1db9      	adds	r1, r7, #6
 8001c7e:	2364      	movs	r3, #100	; 0x64
 8001c80:	2201      	movs	r2, #1
 8001c82:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <write_byte+0x58>)
 8001c84:	f00c fa20 	bl	800e0c8 <HAL_SPI_Transmit>
	CS_SET;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8e:	4803      	ldr	r0, [pc, #12]	; (8001c9c <write_byte+0x54>)
 8001c90:	f009 f86a 	bl	800ad68 <HAL_GPIO_WritePin>
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	2004468c 	.word	0x2004468c

08001ca4 <IMU_init>:

uint16_t IMU_init() {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff ff9c 	bl	8001bec <read_byte>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001cb8:	797b      	ldrb	r3, [r7, #5]
 8001cba:	2be0      	cmp	r3, #224	; 0xe0
 8001cbc:	d119      	bne.n	8001cf2 <IMU_init+0x4e>
		ret = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2006      	movs	r0, #6
 8001cc6:	f7ff ffbf 	bl	8001c48 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001cca:	2110      	movs	r1, #16
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f7ff ffbb 	bl	8001c48 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	207f      	movs	r0, #127	; 0x7f
 8001cd6:	f7ff ffb7 	bl	8001c48 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001cda:	2106      	movs	r1, #6
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff ffb3 	bl	8001c48 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001ce2:	2106      	movs	r1, #6
 8001ce4:	2014      	movs	r0, #20
 8001ce6:	f7ff ffaf 	bl	8001c48 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001cea:	2100      	movs	r1, #0
 8001cec:	207f      	movs	r0, #127	; 0x7f
 8001cee:	f7ff ffab 	bl	8001c48 <write_byte>
	}
	return ret;
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <read_gyro_data>:

void read_gyro_data() {
 8001cfc:	b598      	push	{r3, r4, r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001d00:	2033      	movs	r0, #51	; 0x33
 8001d02:	f7ff ff73 	bl	8001bec <read_byte>
 8001d06:	4603      	mov	r3, r0
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21c      	sxth	r4, r3
 8001d0c:	2034      	movs	r0, #52	; 0x34
 8001d0e:	f7ff ff6d 	bl	8001bec <read_byte>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4323      	orrs	r3, r4
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <read_gyro_data+0x64>)
 8001d1c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001d1e:	2035      	movs	r0, #53	; 0x35
 8001d20:	f7ff ff64 	bl	8001bec <read_byte>
 8001d24:	4603      	mov	r3, r0
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	b21c      	sxth	r4, r3
 8001d2a:	2036      	movs	r0, #54	; 0x36
 8001d2c:	f7ff ff5e 	bl	8001bec <read_byte>
 8001d30:	4603      	mov	r3, r0
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	4323      	orrs	r3, r4
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <read_gyro_data+0x68>)
 8001d3a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001d3c:	2037      	movs	r0, #55	; 0x37
 8001d3e:	f7ff ff55 	bl	8001bec <read_byte>
 8001d42:	4603      	mov	r3, r0
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b21c      	sxth	r4, r3
 8001d48:	2038      	movs	r0, #56	; 0x38
 8001d4a:	f7ff ff4f 	bl	8001bec <read_byte>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	4323      	orrs	r3, r4
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <read_gyro_data+0x6c>)
 8001d58:	801a      	strh	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	bd98      	pop	{r3, r4, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20044628 	.word	0x20044628
 8001d64:	20044626 	.word	0x20044626
 8001d68:	20044620 	.word	0x20044620

08001d6c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	805a      	strh	r2, [r3, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	809a      	strh	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	80da      	strh	r2, [r3, #6]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	811a      	strh	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	815a      	strh	r2, [r3, #10]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
{

}
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001db8:	f7ff ff74 	bl	8001ca4 <IMU_init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001dc0:	f7ff f96e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff f97a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001dcc:	4809      	ldr	r0, [pc, #36]	; (8001df4 <_ZN3IMU4initEv+0x44>)
 8001dce:	f7ff f9a1 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff f973 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <_ZN3IMU4initEv+0x48>)
 8001de0:	f7ff f998 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001de8:	f007 fd28 	bl	800983c <HAL_Delay>

}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	0801970c 	.word	0x0801970c
 8001df8:	08019718 	.word	0x08019718
 8001dfc:	00000000 	.word	0x00000000

08001e00 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001e08:	f7ff ff78 	bl	8001cfc <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001e0c:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <_ZN3IMU12updateValuesEv+0xa0>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	b21a      	sxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001e16:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <_ZN3IMU12updateValuesEv+0xa4>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	b21a      	sxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001e20:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb8f 	bl	8000554 <__aeabi_i2d>
 8001e36:	a316      	add	r3, pc, #88	; (adr r3, 8001e90 <_ZN3IMU12updateValuesEv+0x90>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fbf4 	bl	8000628 <__aeabi_dmul>
 8001e40:	4603      	mov	r3, r0
 8001e42:	460c      	mov	r4, r1
 8001e44:	4625      	mov	r5, r4
 8001e46:	461c      	mov	r4, r3
 8001e48:	4b18      	ldr	r3, [pc, #96]	; (8001eac <_ZN3IMU12updateValuesEv+0xac>)
 8001e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb80 	bl	8000554 <__aeabi_i2d>
 8001e54:	a310      	add	r3, pc, #64	; (adr r3, 8001e98 <_ZN3IMU12updateValuesEv+0x98>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fbe5 	bl	8000628 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4620      	mov	r0, r4
 8001e64:	4629      	mov	r1, r5
 8001e66:	f7fe fa29 	bl	80002bc <__adddf3>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460c      	mov	r4, r1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4621      	mov	r1, r4
 8001e72:	f7fe fe89 	bl	8000b88 <__aeabi_d2iz>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <_ZN3IMU12updateValuesEv+0xac>)
 8001e86:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e90:	eb851eb8 	.word	0xeb851eb8
 8001e94:	3f9eb851 	.word	0x3f9eb851
 8001e98:	70a3d70a 	.word	0x70a3d70a
 8001e9c:	3fef0a3d 	.word	0x3fef0a3d
 8001ea0:	20044628 	.word	0x20044628
 8001ea4:	20044626 	.word	0x20044626
 8001ea8:	20044620 	.word	0x20044620
 8001eac:	20000210 	.word	0x20000210

08001eb0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ecc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed0:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f7fe fb4f 	bl	8000578 <__aeabi_f2d>
 8001eda:	a316      	add	r3, pc, #88	; (adr r3, 8001f34 <_ZN3IMU8getOmegaEv+0x84>)
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	f7fe fccc 	bl	800087c <__aeabi_ddiv>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4614      	mov	r4, r2
 8001eea:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001eee:	a313      	add	r3, pc, #76	; (adr r3, 8001f3c <_ZN3IMU8getOmegaEv+0x8c>)
 8001ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	f7fe fb96 	bl	8000628 <__aeabi_dmul>
 8001efc:	4603      	mov	r3, r0
 8001efe:	460c      	mov	r4, r1
 8001f00:	4618      	mov	r0, r3
 8001f02:	4621      	mov	r1, r4
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <_ZN3IMU8getOmegaEv+0x80>)
 8001f0a:	f7fe fcb7 	bl	800087c <__aeabi_ddiv>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	460c      	mov	r4, r1
 8001f12:	4618      	mov	r0, r3
 8001f14:	4621      	mov	r1, r4
 8001f16:	f7fe fe7f 	bl	8000c18 <__aeabi_d2f>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	ee07 3a90 	vmov	s15, r3
}
 8001f20:	eeb0 0a67 	vmov.f32	s0, s15
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bdb0      	pop	{r4, r5, r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	f3af 8000 	nop.w
 8001f30:	40668000 	.word	0x40668000
 8001f34:	66666666 	.word	0x66666666
 8001f38:	40306666 	.word	0x40306666
 8001f3c:	54411744 	.word	0x54411744
 8001f40:	400921fb 	.word	0x400921fb

08001f44 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f46:	b08b      	sub	sp, #44	; 0x2c
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001f4c:	466b      	mov	r3, sp
 8001f4e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001f50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f54:	f007 fc72 	bl	800983c <HAL_Delay>
	lcd_clear();
 8001f58:	f7ff f8a2 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f7ff f8ae 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001f64:	4840      	ldr	r0, [pc, #256]	; (8002068 <_ZN3IMU11calibrationEv+0x124>)
 8001f66:	f7ff f8d5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7ff f8a7 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001f72:	483e      	ldr	r0, [pc, #248]	; (800206c <_ZN3IMU11calibrationEv+0x128>)
 8001f74:	f7ff f8ce 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001f78:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f7c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001f7e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f82:	1e5d      	subs	r5, r3, #1
 8001f84:	61bd      	str	r5, [r7, #24]
 8001f86:	462b      	mov	r3, r5
 8001f88:	3301      	adds	r3, #1
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	f04f 0400 	mov.w	r4, #0
 8001f98:	0154      	lsls	r4, r2, #5
 8001f9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f9e:	014b      	lsls	r3, r1, #5
 8001fa0:	462b      	mov	r3, r5
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	f04f 0400 	mov.w	r4, #0
 8001fb2:	0154      	lsls	r4, r2, #5
 8001fb4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fb8:	014b      	lsls	r3, r1, #5
 8001fba:	462b      	mov	r3, r5
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	3303      	adds	r3, #3
 8001fc2:	3307      	adds	r3, #7
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	ebad 0d03 	sub.w	sp, sp, r3
 8001fcc:	466b      	mov	r3, sp
 8001fce:	3303      	adds	r3, #3
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	83fb      	strh	r3, [r7, #30]
 8001fda:	8bfa      	ldrh	r2, [r7, #30]
 8001fdc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	da13      	bge.n	800200c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001fea:	8bfb      	ldrh	r3, [r7, #30]
 8001fec:	ee07 2a90 	vmov	s15, r2
 8001ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001ffe:	2002      	movs	r0, #2
 8002000:	f007 fc1c 	bl	800983c <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8002004:	8bfb      	ldrh	r3, [r7, #30]
 8002006:	3301      	adds	r3, #1
 8002008:	83fb      	strh	r3, [r7, #30]
 800200a:	e7e6      	b.n	8001fda <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	462b      	mov	r3, r5
 8002014:	3301      	adds	r3, #1
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	429a      	cmp	r2, r3
 8002022:	d00e      	beq.n	8002042 <_ZN3IMU11calibrationEv+0xfe>
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	60fb      	str	r3, [r7, #12]
		sum += v;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	edd3 7a00 	vldr	s15, [r3]
 800202e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002036:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	3304      	adds	r3, #4
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
 8002040:	e7ec      	b.n	800201c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8002042:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800204e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	edc3 7a03 	vstr	s15, [r3, #12]
 800205c:	46b5      	mov	sp, r6
}
 800205e:	bf00      	nop
 8002060:	372c      	adds	r7, #44	; 0x2c
 8002062:	46bd      	mov	sp, r7
 8002064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002066:	bf00      	nop
 8002068:	0801971c 	.word	0x0801971c
 800206c:	08019728 	.word	0x08019728

08002070 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af02      	add	r7, sp, #8
 8002076:	4603      	mov	r3, r0
 8002078:	460a      	mov	r2, r1
 800207a:	71fb      	strb	r3, [r7, #7]
 800207c:	4613      	mov	r3, r2
 800207e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8002080:	79bb      	ldrb	r3, [r7, #6]
 8002082:	b299      	uxth	r1, r3
 8002084:	1dfa      	adds	r2, r7, #7
 8002086:	2364      	movs	r3, #100	; 0x64
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2301      	movs	r3, #1
 800208c:	480c      	ldr	r0, [pc, #48]	; (80020c0 <INA260_read+0x50>)
 800208e:	f008 ffbd 	bl	800b00c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8002092:	79bb      	ldrb	r3, [r7, #6]
 8002094:	b299      	uxth	r1, r3
 8002096:	f107 020c 	add.w	r2, r7, #12
 800209a:	2364      	movs	r3, #100	; 0x64
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2302      	movs	r3, #2
 80020a0:	4807      	ldr	r0, [pc, #28]	; (80020c0 <INA260_read+0x50>)
 80020a2:	f009 f8b1 	bl	800b208 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 80020a6:	7b3b      	ldrb	r3, [r7, #12]
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	b21a      	sxth	r2, r3
 80020ac:	7b7b      	ldrb	r3, [r7, #13]
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	4313      	orrs	r3, r2
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	81fb      	strh	r3, [r7, #14]
	return val;
 80020b6:	89fb      	ldrh	r3, [r7, #14]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20044840 	.word	0x20044840

080020c4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	4604      	mov	r4, r0
 80020cc:	4608      	mov	r0, r1
 80020ce:	4611      	mov	r1, r2
 80020d0:	461a      	mov	r2, r3
 80020d2:	4623      	mov	r3, r4
 80020d4:	71fb      	strb	r3, [r7, #7]
 80020d6:	4603      	mov	r3, r0
 80020d8:	71bb      	strb	r3, [r7, #6]
 80020da:	460b      	mov	r3, r1
 80020dc:	717b      	strb	r3, [r7, #5]
 80020de:	4613      	mov	r3, r2
 80020e0:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	733b      	strb	r3, [r7, #12]
 80020e6:	79bb      	ldrb	r3, [r7, #6]
 80020e8:	737b      	strb	r3, [r7, #13]
 80020ea:	797b      	ldrb	r3, [r7, #5]
 80020ec:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 80020ee:	793b      	ldrb	r3, [r7, #4]
 80020f0:	b299      	uxth	r1, r3
 80020f2:	f107 020c 	add.w	r2, r7, #12
 80020f6:	2364      	movs	r3, #100	; 0x64
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2303      	movs	r3, #3
 80020fc:	4803      	ldr	r0, [pc, #12]	; (800210c <INA260_write+0x48>)
 80020fe:	f008 ff85 	bl	800b00c <HAL_I2C_Master_Transmit>
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bd90      	pop	{r4, r7, pc}
 800210a:	bf00      	nop
 800210c:	20044840 	.word	0x20044840

08002110 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
 800211a:	460b      	mov	r3, r1
 800211c:	71bb      	strb	r3, [r7, #6]
 800211e:	4613      	mov	r3, r2
 8002120:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002122:	797b      	ldrb	r3, [r7, #5]
 8002124:	79ba      	ldrb	r2, [r7, #6]
 8002126:	79f9      	ldrb	r1, [r7, #7]
 8002128:	2000      	movs	r0, #0
 800212a:	f7ff ffcb 	bl	80020c4 <INA260_write>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	461a      	mov	r2, r3
 8002144:	21df      	movs	r1, #223	; 0xdf
 8002146:	2000      	movs	r0, #0
 8002148:	f7ff ffe2 	bl	8002110 <setConfig>
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
{

}
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800217c:	482a      	ldr	r0, [pc, #168]	; (8002228 <_ZN8JoyStick8getValueEv+0xbc>)
 800217e:	f008 fddb 	bl	800ad38 <HAL_GPIO_ReadPin>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <_ZN8JoyStick8getValueEv+0x2e>
 8002192:	89fb      	ldrh	r3, [r7, #14]
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 800219a:	2101      	movs	r1, #1
 800219c:	4823      	ldr	r0, [pc, #140]	; (800222c <_ZN8JoyStick8getValueEv+0xc0>)
 800219e:	f008 fdcb 	bl	800ad38 <HAL_GPIO_ReadPin>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <_ZN8JoyStick8getValueEv+0x4e>
 80021b2:	89fb      	ldrh	r3, [r7, #14]
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80021ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021be:	481a      	ldr	r0, [pc, #104]	; (8002228 <_ZN8JoyStick8getValueEv+0xbc>)
 80021c0:	f008 fdba 	bl	800ad38 <HAL_GPIO_ReadPin>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf0c      	ite	eq
 80021ca:	2301      	moveq	r3, #1
 80021cc:	2300      	movne	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <_ZN8JoyStick8getValueEv+0x70>
 80021d4:	89fb      	ldrh	r3, [r7, #14]
 80021d6:	f043 0304 	orr.w	r3, r3, #4
 80021da:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80021dc:	2104      	movs	r1, #4
 80021de:	4814      	ldr	r0, [pc, #80]	; (8002230 <_ZN8JoyStick8getValueEv+0xc4>)
 80021e0:	f008 fdaa 	bl	800ad38 <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <_ZN8JoyStick8getValueEv+0x90>
 80021f4:	89fb      	ldrh	r3, [r7, #14]
 80021f6:	f043 0308 	orr.w	r3, r3, #8
 80021fa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 80021fc:	2180      	movs	r1, #128	; 0x80
 80021fe:	480a      	ldr	r0, [pc, #40]	; (8002228 <_ZN8JoyStick8getValueEv+0xbc>)
 8002200:	f008 fd9a 	bl	800ad38 <HAL_GPIO_ReadPin>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <_ZN8JoyStick8getValueEv+0xb0>
 8002214:	89fb      	ldrh	r3, [r7, #14]
 8002216:	f043 0310 	orr.w	r3, r3, #16
 800221a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800221c:	89fb      	ldrh	r3, [r7, #14]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	40020c00 	.word	0x40020c00
 8002230:	40020400 	.word	0x40020400

08002234 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	2b52      	cmp	r3, #82	; 0x52
 8002244:	d112      	bne.n	800226c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002246:	2200      	movs	r2, #0
 8002248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800224c:	4856      	ldr	r0, [pc, #344]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800224e:	f008 fd8b 	bl	800ad68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002252:	2201      	movs	r2, #1
 8002254:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002258:	4853      	ldr	r0, [pc, #332]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800225a:	f008 fd85 	bl	800ad68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800225e:	2201      	movs	r2, #1
 8002260:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002264:	4850      	ldr	r0, [pc, #320]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002266:	f008 fd7f 	bl	800ad68 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800226a:	e098      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	2b47      	cmp	r3, #71	; 0x47
 8002270:	d112      	bne.n	8002298 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002272:	2201      	movs	r2, #1
 8002274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002278:	484b      	ldr	r0, [pc, #300]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800227a:	f008 fd75 	bl	800ad68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002284:	4848      	ldr	r0, [pc, #288]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002286:	f008 fd6f 	bl	800ad68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800228a:	2201      	movs	r2, #1
 800228c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002290:	4845      	ldr	r0, [pc, #276]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002292:	f008 fd69 	bl	800ad68 <HAL_GPIO_WritePin>
}
 8002296:	e082      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	2b42      	cmp	r3, #66	; 0x42
 800229c:	d112      	bne.n	80022c4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800229e:	2201      	movs	r2, #1
 80022a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a4:	4840      	ldr	r0, [pc, #256]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022a6:	f008 fd5f 	bl	800ad68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b0:	483d      	ldr	r0, [pc, #244]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022b2:	f008 fd59 	bl	800ad68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022bc:	483a      	ldr	r0, [pc, #232]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022be:	f008 fd53 	bl	800ad68 <HAL_GPIO_WritePin>
}
 80022c2:	e06c      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	2b43      	cmp	r3, #67	; 0x43
 80022c8:	d112      	bne.n	80022f0 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022d0:	4835      	ldr	r0, [pc, #212]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022d2:	f008 fd49 	bl	800ad68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022dc:	4832      	ldr	r0, [pc, #200]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022de:	f008 fd43 	bl	800ad68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022e2:	2200      	movs	r2, #0
 80022e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022e8:	482f      	ldr	r0, [pc, #188]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022ea:	f008 fd3d 	bl	800ad68 <HAL_GPIO_WritePin>
}
 80022ee:	e056      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	2b4d      	cmp	r3, #77	; 0x4d
 80022f4:	d112      	bne.n	800231c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022fc:	482a      	ldr	r0, [pc, #168]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022fe:	f008 fd33 	bl	800ad68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002302:	2201      	movs	r2, #1
 8002304:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002308:	4827      	ldr	r0, [pc, #156]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800230a:	f008 fd2d 	bl	800ad68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800230e:	2200      	movs	r2, #0
 8002310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002314:	4824      	ldr	r0, [pc, #144]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002316:	f008 fd27 	bl	800ad68 <HAL_GPIO_WritePin>
}
 800231a:	e040      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	2b59      	cmp	r3, #89	; 0x59
 8002320:	d112      	bne.n	8002348 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002322:	2200      	movs	r2, #0
 8002324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002328:	481f      	ldr	r0, [pc, #124]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800232a:	f008 fd1d 	bl	800ad68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002334:	481c      	ldr	r0, [pc, #112]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002336:	f008 fd17 	bl	800ad68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800233a:	2201      	movs	r2, #1
 800233c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002340:	4819      	ldr	r0, [pc, #100]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002342:	f008 fd11 	bl	800ad68 <HAL_GPIO_WritePin>
}
 8002346:	e02a      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	2b57      	cmp	r3, #87	; 0x57
 800234c:	d112      	bne.n	8002374 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002354:	4814      	ldr	r0, [pc, #80]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002356:	f008 fd07 	bl	800ad68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800235a:	2200      	movs	r2, #0
 800235c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002360:	4811      	ldr	r0, [pc, #68]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002362:	f008 fd01 	bl	800ad68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002366:	2200      	movs	r2, #0
 8002368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800236c:	480e      	ldr	r0, [pc, #56]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800236e:	f008 fcfb 	bl	800ad68 <HAL_GPIO_WritePin>
}
 8002372:	e014      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	2b7e      	cmp	r3, #126	; 0x7e
 8002378:	d111      	bne.n	800239e <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800237a:	2201      	movs	r2, #1
 800237c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002380:	4809      	ldr	r0, [pc, #36]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002382:	f008 fcf1 	bl	800ad68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002386:	2201      	movs	r2, #1
 8002388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800238c:	4806      	ldr	r0, [pc, #24]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800238e:	f008 fceb 	bl	800ad68 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002392:	2201      	movs	r2, #1
 8002394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800239a:	f008 fce5 	bl	800ad68 <HAL_GPIO_WritePin>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40020000 	.word	0x40020000

080023ac <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	70fb      	strb	r3, [r7, #3]
 80023b8:	4613      	mov	r3, r2
 80023ba:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80023bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d106      	bne.n	80023d2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80023c4:	2201      	movs	r2, #1
 80023c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ca:	4813      	ldr	r0, [pc, #76]	; (8002418 <_ZN3LED2LREaa+0x6c>)
 80023cc:	f008 fccc 	bl	800ad68 <HAL_GPIO_WritePin>
 80023d0:	e009      	b.n	80023e6 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80023d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80023da:	2200      	movs	r2, #0
 80023dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023e0:	480d      	ldr	r0, [pc, #52]	; (8002418 <_ZN3LED2LREaa+0x6c>)
 80023e2:	f008 fcc1 	bl	800ad68 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80023e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d106      	bne.n	80023fc <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80023ee:	2201      	movs	r2, #1
 80023f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023f4:	4808      	ldr	r0, [pc, #32]	; (8002418 <_ZN3LED2LREaa+0x6c>)
 80023f6:	f008 fcb7 	bl	800ad68 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80023fa:	e009      	b.n	8002410 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80023fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002404:	2200      	movs	r2, #0
 8002406:	f44f 7100 	mov.w	r1, #512	; 0x200
 800240a:	4803      	ldr	r0, [pc, #12]	; (8002418 <_ZN3LED2LREaa+0x6c>)
 800240c:	f008 fcac 	bl	800ad68 <HAL_GPIO_WritePin>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40020000 	.word	0x40020000

0800241c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800241c:	b580      	push	{r7, lr}
 800241e:	b092      	sub	sp, #72	; 0x48
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fe92 	bl	8002154 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	637b      	str	r3, [r7, #52]	; 0x34
 8002434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002436:	647b      	str	r3, [r7, #68]	; 0x44
 8002438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243a:	331c      	adds	r3, #28
 800243c:	633b      	str	r3, [r7, #48]	; 0x30
 800243e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002442:	429a      	cmp	r2, r3
 8002444:	d008      	beq.n	8002458 <_ZN10LineSensorC1Ev+0x3c>
 8002446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244c:	2200      	movs	r2, #0
 800244e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002452:	3302      	adds	r3, #2
 8002454:	647b      	str	r3, [r7, #68]	; 0x44
 8002456:	e7f2      	b.n	800243e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002462:	643b      	str	r3, [r7, #64]	; 0x40
 8002464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002466:	3338      	adds	r3, #56	; 0x38
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	429a      	cmp	r2, r3
 8002470:	d009      	beq.n	8002486 <_ZN10LineSensorC1Ev+0x6a>
 8002472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002474:	623b      	str	r3, [r7, #32]
		s = 0;
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800247e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002480:	3304      	adds	r3, #4
 8002482:	643b      	str	r3, [r7, #64]	; 0x40
 8002484:	e7f1      	b.n	800246a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3338      	adds	r3, #56	; 0x38
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	429a      	cmp	r2, r3
 800249e:	d009      	beq.n	80024b4 <_ZN10LineSensorC1Ev+0x98>
 80024a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a2:	617b      	str	r3, [r7, #20]
		m = 0;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80024ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ae:	3304      	adds	r3, #4
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b2:	e7f1      	b.n	8002498 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	63bb      	str	r3, [r7, #56]	; 0x38
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	3338      	adds	r3, #56	; 0x38
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d009      	beq.n	80024e2 <_ZN10LineSensorC1Ev+0xc6>
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024d8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80024da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024dc:	3304      	adds	r3, #4
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e0:	e7f1      	b.n	80024c6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4618      	mov	r0, r3
 80024e6:	3748      	adds	r7, #72	; 0x48
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	220e      	movs	r2, #14
 80024f8:	4619      	mov	r1, r3
 80024fa:	4803      	ldr	r0, [pc, #12]	; (8002508 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80024fc:	f007 fa04 	bl	8009908 <HAL_ADC_Start_DMA>
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20044764 	.word	0x20044764

0800250c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b0d      	cmp	r3, #13
 800251c:	dc2f      	bgt.n	800257e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3392      	adds	r3, #146	; 0x92
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	3304      	adds	r3, #4
 800252a:	ed93 7a00 	vldr	s14, [r3]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	33a0      	adds	r3, #160	; 0xa0
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	3304      	adds	r3, #4
 800254a:	edd3 7a00 	vldr	s15, [r3]
 800254e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	4619      	mov	r1, r3
 8002558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	1a5b      	subs	r3, r3, r1
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	68f9      	ldr	r1, [r7, #12]
 8002568:	440b      	add	r3, r1
 800256a:	3306      	adds	r3, #6
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	3304      	adds	r3, #4
 8002572:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3301      	adds	r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	e7cc      	b.n	8002518 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	3301      	adds	r3, #1
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002588:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b09      	cmp	r3, #9
 8002590:	d902      	bls.n	8002598 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002592:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]


}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	20000250 	.word	0x20000250

080025a8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b08e      	sub	sp, #56	; 0x38
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80025b0:	2300      	movs	r3, #0
 80025b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025ba:	2b0d      	cmp	r3, #13
 80025bc:	f200 80b8 	bhi.w	8002730 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80025c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025ca:	2b09      	cmp	r3, #9
 80025cc:	d81c      	bhi.n	8002608 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80025ce:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80025d2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80025d6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4423      	add	r3, r4
 80025e6:	3306      	adds	r3, #6
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4403      	add	r3, r0
 80025ec:	3304      	adds	r3, #4
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	008b      	lsls	r3, r1, #2
 80025f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025f6:	440b      	add	r3, r1
 80025f8:	3b30      	subs	r3, #48	; 0x30
 80025fa:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80025fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002600:	3301      	adds	r3, #1
 8002602:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002606:	e7de      	b.n	80025c6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002608:	2300      	movs	r3, #0
 800260a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800260e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002612:	2b09      	cmp	r3, #9
 8002614:	d84d      	bhi.n	80026b2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002616:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800261a:	3301      	adds	r3, #1
 800261c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002620:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002624:	2b09      	cmp	r3, #9
 8002626:	d83e      	bhi.n	80026a6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002628:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002632:	4413      	add	r3, r2
 8002634:	3b30      	subs	r3, #48	; 0x30
 8002636:	ed93 7a00 	vldr	s14, [r3]
 800263a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002644:	4413      	add	r3, r2
 8002646:	3b30      	subs	r3, #48	; 0x30
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002654:	d521      	bpl.n	800269a <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002656:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002660:	4413      	add	r3, r2
 8002662:	3b30      	subs	r3, #48	; 0x30
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002668:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800266c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002670:	0092      	lsls	r2, r2, #2
 8002672:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002676:	440a      	add	r2, r1
 8002678:	3a30      	subs	r2, #48	; 0x30
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002682:	440b      	add	r3, r1
 8002684:	3b30      	subs	r3, #48	; 0x30
 8002686:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002688:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002692:	4413      	add	r3, r2
 8002694:	3b30      	subs	r3, #48	; 0x30
 8002696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002698:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800269a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800269e:	3301      	adds	r3, #1
 80026a0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80026a4:	e7bc      	b.n	8002620 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80026a6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80026aa:	3301      	adds	r3, #1
 80026ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80026b0:	e7ad      	b.n	800260e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd ff5f 	bl	8000578 <__aeabi_f2d>
 80026ba:	a357      	add	r3, pc, #348	; (adr r3, 8002818 <_ZN10LineSensor18updateSensorValuesEv+0x270>)
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	f7fd ffb2 	bl	8000628 <__aeabi_dmul>
 80026c4:	4603      	mov	r3, r0
 80026c6:	460c      	mov	r4, r1
 80026c8:	4625      	mov	r5, r4
 80026ca:	461c      	mov	r4, r3
 80026cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026d0:	4a41      	ldr	r2, [pc, #260]	; (80027d8 <_ZN10LineSensor18updateSensorValuesEv+0x230>)
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd ff4d 	bl	8000578 <__aeabi_f2d>
 80026de:	a33c      	add	r3, pc, #240	; (adr r3, 80027d0 <_ZN10LineSensor18updateSensorValuesEv+0x228>)
 80026e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e4:	f7fd ffa0 	bl	8000628 <__aeabi_dmul>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4620      	mov	r0, r4
 80026ee:	4629      	mov	r1, r5
 80026f0:	f7fd fde4 	bl	80002bc <__adddf3>
 80026f4:	4603      	mov	r3, r0
 80026f6:	460c      	mov	r4, r1
 80026f8:	461a      	mov	r2, r3
 80026fa:	4623      	mov	r3, r4
 80026fc:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	f7fe fa88 	bl	8000c18 <__aeabi_d2f>
 8002708:	4601      	mov	r1, r0
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 8002716:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	492e      	ldr	r1, [pc, #184]	; (80027d8 <_ZN10LineSensor18updateSensorValuesEv+0x230>)
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002724:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002728:	3301      	adds	r3, #1
 800272a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800272e:	e742      	b.n	80025b6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002736:	4a29      	ldr	r2, [pc, #164]	; (80027dc <_ZN10LineSensor18updateSensorValuesEv+0x234>)
 8002738:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002740:	4a27      	ldr	r2, [pc, #156]	; (80027e0 <_ZN10LineSensor18updateSensorValuesEv+0x238>)
 8002742:	6013      	str	r3, [r2, #0]

	mon_sens0 = sensor[0];
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800274a:	4a26      	ldr	r2, [pc, #152]	; (80027e4 <_ZN10LineSensor18updateSensorValuesEv+0x23c>)
 800274c:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor[1];
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002754:	4a24      	ldr	r2, [pc, #144]	; (80027e8 <_ZN10LineSensor18updateSensorValuesEv+0x240>)
 8002756:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor[2];
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800275e:	4a23      	ldr	r2, [pc, #140]	; (80027ec <_ZN10LineSensor18updateSensorValuesEv+0x244>)
 8002760:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor[3];
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8002768:	4a21      	ldr	r2, [pc, #132]	; (80027f0 <_ZN10LineSensor18updateSensorValuesEv+0x248>)
 800276a:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor[4];
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8002772:	4a20      	ldr	r2, [pc, #128]	; (80027f4 <_ZN10LineSensor18updateSensorValuesEv+0x24c>)
 8002774:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor[5];
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800277c:	4a1e      	ldr	r2, [pc, #120]	; (80027f8 <_ZN10LineSensor18updateSensorValuesEv+0x250>)
 800277e:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor[6];
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8002786:	4a1d      	ldr	r2, [pc, #116]	; (80027fc <_ZN10LineSensor18updateSensorValuesEv+0x254>)
 8002788:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor[7];
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 8002790:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <_ZN10LineSensor18updateSensorValuesEv+0x258>)
 8002792:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor[8];
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800279a:	4a1a      	ldr	r2, [pc, #104]	; (8002804 <_ZN10LineSensor18updateSensorValuesEv+0x25c>)
 800279c:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor[9];
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 80027a4:	4a18      	ldr	r2, [pc, #96]	; (8002808 <_ZN10LineSensor18updateSensorValuesEv+0x260>)
 80027a6:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor[10];
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80027ae:	4a17      	ldr	r2, [pc, #92]	; (800280c <_ZN10LineSensor18updateSensorValuesEv+0x264>)
 80027b0:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor[11];
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80027b8:	4a15      	ldr	r2, [pc, #84]	; (8002810 <_ZN10LineSensor18updateSensorValuesEv+0x268>)
 80027ba:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor[12];
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80027c2:	4a14      	ldr	r2, [pc, #80]	; (8002814 <_ZN10LineSensor18updateSensorValuesEv+0x26c>)
 80027c4:	6013      	str	r3, [r2, #0]
}
 80027c6:	bf00      	nop
 80027c8:	3738      	adds	r7, #56	; 0x38
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bdb0      	pop	{r4, r5, r7, pc}
 80027ce:	bf00      	nop
 80027d0:	66666666 	.word	0x66666666
 80027d4:	3fee6666 	.word	0x3fee6666
 80027d8:	20000254 	.word	0x20000254
 80027dc:	20000214 	.word	0x20000214
 80027e0:	20000218 	.word	0x20000218
 80027e4:	2000021c 	.word	0x2000021c
 80027e8:	20000220 	.word	0x20000220
 80027ec:	20000224 	.word	0x20000224
 80027f0:	20000228 	.word	0x20000228
 80027f4:	2000022c 	.word	0x2000022c
 80027f8:	20000230 	.word	0x20000230
 80027fc:	20000234 	.word	0x20000234
 8002800:	20000238 	.word	0x20000238
 8002804:	2000023c 	.word	0x2000023c
 8002808:	20000240 	.word	0x20000240
 800280c:	20000244 	.word	0x20000244
 8002810:	20000248 	.word	0x20000248
 8002814:	2000024c 	.word	0x2000024c
 8002818:	9999999a 	.word	0x9999999a
 800281c:	3fa99999 	.word	0x3fa99999

08002820 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b0a0      	sub	sp, #128	; 0x80
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002828:	2064      	movs	r0, #100	; 0x64
 800282a:	f007 f807 	bl	800983c <HAL_Delay>

	lcd_clear();
 800282e:	f7fe fc37 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002832:	2100      	movs	r1, #0
 8002834:	2000      	movs	r0, #0
 8002836:	f7fe fc43 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800283a:	4886      	ldr	r0, [pc, #536]	; (8002a54 <_ZN10LineSensor11calibrationEv+0x234>)
 800283c:	f7fe fc6a 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002840:	2101      	movs	r1, #1
 8002842:	2000      	movs	r0, #0
 8002844:	f7fe fc3c 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8002848:	4883      	ldr	r0, [pc, #524]	; (8002a58 <_ZN10LineSensor11calibrationEv+0x238>)
 800284a:	f7fe fc63 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800284e:	2300      	movs	r3, #0
 8002850:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002854:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002858:	2b0d      	cmp	r3, #13
 800285a:	d823      	bhi.n	80028a4 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 800285c:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002860:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	32b0      	adds	r2, #176	; 0xb0
 8002868:	0092      	lsls	r2, r2, #2
 800286a:	440a      	add	r2, r1
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002874:	440b      	add	r3, r1
 8002876:	3b40      	subs	r3, #64	; 0x40
 8002878:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800287a:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800287e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	32b0      	adds	r2, #176	; 0xb0
 8002886:	0092      	lsls	r2, r2, #2
 8002888:	440a      	add	r2, r1
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002892:	440b      	add	r3, r1
 8002894:	3b78      	subs	r3, #120	; 0x78
 8002896:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002898:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800289c:	3301      	adds	r3, #1
 800289e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80028a2:	e7d7      	b.n	8002854 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fc5e 	bl	800216c <_ZN8JoyStick8getValueEv>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	bf14      	ite	ne
 80028b6:	2301      	movne	r3, #1
 80028b8:	2300      	moveq	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d079      	beq.n	80029b4 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80028c6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ca:	2b0d      	cmp	r3, #13
 80028cc:	d850      	bhi.n	8002970 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80028ce:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028d8:	4413      	add	r3, r2
 80028da:	3b40      	subs	r3, #64	; 0x40
 80028dc:	ed93 7a00 	vldr	s14, [r3]
 80028e0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	33b0      	adds	r3, #176	; 0xb0
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f8:	d50f      	bpl.n	800291a <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80028fa:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028fe:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	32b0      	adds	r2, #176	; 0xb0
 8002906:	0092      	lsls	r2, r2, #2
 8002908:	440a      	add	r2, r1
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002912:	440b      	add	r3, r1
 8002914:	3b40      	subs	r3, #64	; 0x40
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e024      	b.n	8002964 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800291a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002924:	4413      	add	r3, r2
 8002926:	3b78      	subs	r3, #120	; 0x78
 8002928:	ed93 7a00 	vldr	s14, [r3]
 800292c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	33b0      	adds	r3, #176	; 0xb0
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	edd3 7a00 	vldr	s15, [r3]
 800293c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002944:	dd0e      	ble.n	8002964 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 8002946:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800294a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	32b0      	adds	r2, #176	; 0xb0
 8002952:	0092      	lsls	r2, r2, #2
 8002954:	440a      	add	r2, r1
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800295e:	440b      	add	r3, r1
 8002960:	3b78      	subs	r3, #120	; 0x78
 8002962:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002964:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002968:	3301      	adds	r3, #1
 800296a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800296e:	e7aa      	b.n	80028c6 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002976:	4618      	mov	r0, r3
 8002978:	f002 fdd0 	bl	800551c <_ZN12RotarySwitch8getValueEv>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	bf0c      	ite	eq
 8002982:	2301      	moveq	r3, #1
 8002984:	2300      	movne	r3, #0
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d009      	beq.n	80029a0 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002992:	2201      	movs	r2, #1
 8002994:	f04f 31ff 	mov.w	r1, #4294967295
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fd07 	bl	80023ac <_ZN3LED2LREaa>
 800299e:	e781      	b.n	80028a4 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80029a6:	2200      	movs	r2, #0
 80029a8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fcfd 	bl	80023ac <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80029b2:	e777      	b.n	80028a4 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029b4:	2300      	movs	r3, #0
 80029b6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80029ba:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029be:	2b0d      	cmp	r3, #13
 80029c0:	d826      	bhi.n	8002a10 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80029c2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80029cc:	4413      	add	r3, r2
 80029ce:	3b40      	subs	r3, #64	; 0x40
 80029d0:	ed93 7a00 	vldr	s14, [r3]
 80029d4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80029de:	4413      	add	r3, r2
 80029e0:	3b78      	subs	r3, #120	; 0x78
 80029e2:	edd3 7a00 	vldr	s15, [r3]
 80029e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029ea:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029ee:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002a5c <_ZN10LineSensor11calibrationEv+0x23c>
 80029f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	3392      	adds	r3, #146	; 0x92
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	3304      	adds	r3, #4
 8002a00:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002a04:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002a0e:	e7d4      	b.n	80029ba <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002a10:	2300      	movs	r3, #0
 8002a12:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002a16:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a1a:	2b0d      	cmp	r3, #13
 8002a1c:	d815      	bhi.n	8002a4a <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002a1e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002a22:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a26:	0092      	lsls	r2, r2, #2
 8002a28:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002a2c:	440a      	add	r2, r1
 8002a2e:	3a78      	subs	r2, #120	; 0x78
 8002a30:	6812      	ldr	r2, [r2, #0]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	33a0      	adds	r3, #160	; 0xa0
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002a3e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002a42:	3301      	adds	r3, #1
 8002a44:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002a48:	e7e5      	b.n	8002a16 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 8002a4a:	bf00      	nop
 8002a4c:	3780      	adds	r7, #128	; 0x80
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	08019734 	.word	0x08019734
 8002a58:	08019740 	.word	0x08019740
 8002a5c:	447a0000 	.word	0x447a0000

08002a60 <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	81bb      	strh	r3, [r7, #12]
 8002a70:	89bb      	ldrh	r3, [r7, #12]
 8002a72:	2b0a      	cmp	r3, #10
 8002a74:	d814      	bhi.n	8002aa0 <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 8002a76:	89bb      	ldrh	r3, [r7, #12]
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	33b0      	adds	r3, #176	; 0xb0
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	edd3 7a00 	vldr	s15, [r3]
 8002a84:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002af4 <_ZN10LineSensor13emergencyStopEv+0x94>
 8002a88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a90:	db02      	blt.n	8002a98 <_ZN10LineSensor13emergencyStopEv+0x38>
 8002a92:	89fb      	ldrh	r3, [r7, #14]
 8002a94:	3301      	adds	r3, #1
 8002a96:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002a98:	89bb      	ldrh	r3, [r7, #12]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	81bb      	strh	r3, [r7, #12]
 8002a9e:	e7e7      	b.n	8002a70 <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002aa0:	89fb      	ldrh	r3, [r7, #14]
 8002aa2:	2b07      	cmp	r3, #7
 8002aa4:	d906      	bls.n	8002ab4 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 8002aa6:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002aa8:	881b      	ldrh	r3, [r3, #0]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002ab0:	801a      	strh	r2, [r3, #0]
 8002ab2:	e002      	b.n	8002aba <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 8002ab4:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002aba:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	2b63      	cmp	r3, #99	; 0x63
 8002ac0:	d903      	bls.n	8002aca <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	e002      	b.n	8002ad0 <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 8002aca:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	f242 720f 	movw	r2, #9999	; 0x270f
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d903      	bls.n	8002ae4 <_ZN10LineSensor13emergencyStopEv+0x84>
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002ade:	f242 7210 	movw	r2, #10000	; 0x2710
 8002ae2:	801a      	strh	r2, [r3, #0]

	return flag;
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]

}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3714      	adds	r7, #20
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	44098000 	.word	0x44098000
 8002af8:	2000028c 	.word	0x2000028c
 8002afc:	2000028e 	.word	0x2000028e

08002b00 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b0e:	eef0 7ae7 	vabs.f32	s15, s15
 8002b12:	eeb0 0a67 	vmov.f32	s0, s15
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	629a      	str	r2, [r3, #40]	; 0x28
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	631a      	str	r2, [r3, #48]	; 0x30
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	639a      	str	r2, [r3, #56]	; 0x38
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002baa:	3344      	adds	r3, #68	; 0x44
 8002bac:	2200      	movs	r2, #0
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002bb6:	3346      	adds	r3, #70	; 0x46
 8002bb8:	2200      	movs	r2, #0
 8002bba:	801a      	strh	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002bc2:	3348      	adds	r3, #72	; 0x48
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	801a      	strh	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bce:	337c      	adds	r3, #124	; 0x7c
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	801a      	strh	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bda:	337e      	adds	r3, #126	; 0x7e
 8002bdc:	2200      	movs	r2, #0
 8002bde:	801a      	strh	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002be6:	3380      	adds	r3, #128	; 0x80
 8002be8:	2200      	movs	r2, #0
 8002bea:	801a      	strh	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bf2:	3382      	adds	r3, #130	; 0x82
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bfe:	3383      	adds	r3, #131	; 0x83
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002c0a:	3384      	adds	r3, #132	; 0x84
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002c16:	3388      	adds	r3, #136	; 0x88
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002c24:	338c      	adds	r3, #140	; 0x8c
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002c32:	3390      	adds	r3, #144	; 0x90
 8002c34:	f04f 0200 	mov.w	r2, #0
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002c40:	3394      	adds	r3, #148	; 0x94
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002c4e:	3398      	adds	r3, #152	; 0x98
 8002c50:	2200      	movs	r2, #0
 8002c52:	801a      	strh	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002c5a:	339a      	adds	r3, #154	; 0x9a
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a3a      	ldr	r2, [r7, #32]
 8002c76:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7c:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c82:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c88:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c8e:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c94:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c96:	2300      	movs	r3, #0
 8002c98:	82fb      	strh	r3, [r7, #22]
 8002c9a:	8afb      	ldrh	r3, [r7, #22]
 8002c9c:	f241 726f 	movw	r2, #5999	; 0x176f
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d80d      	bhi.n	8002cc0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a0>
		velocity_table_[i] = 0;
 8002ca4:	8afb      	ldrh	r3, [r7, #22]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002cb8:	8afb      	ldrh	r3, [r7, #22]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	82fb      	strh	r3, [r7, #22]
 8002cbe:	e7ec      	b.n	8002c9a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x17a>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	82bb      	strh	r3, [r7, #20]
 8002cc4:	8abb      	ldrh	r3, [r7, #20]
 8002cc6:	2b63      	cmp	r3, #99	; 0x63
 8002cc8:	d80e      	bhi.n	8002ce8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1c8>
		crossline_distance_[i] = 0;
 8002cca:	8abb      	ldrh	r3, [r7, #20]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002cd2:	3312      	adds	r3, #18
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3304      	adds	r3, #4
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002ce0:	8abb      	ldrh	r3, [r7, #20]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	82bb      	strh	r3, [r7, #20]
 8002ce6:	e7ed      	b.n	8002cc4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a4>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002ce8:	2300      	movs	r3, #0
 8002cea:	827b      	strh	r3, [r7, #18]
 8002cec:	8a7b      	ldrh	r3, [r7, #18]
 8002cee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cf2:	d20e      	bcs.n	8002d12 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f2>
		sideline_distance_[i] = 0;
 8002cf4:	8a7b      	ldrh	r3, [r7, #18]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002cfc:	3336      	adds	r3, #54	; 0x36
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	3304      	adds	r3, #4
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002d0a:	8a7b      	ldrh	r3, [r7, #18]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	827b      	strh	r3, [r7, #18]
 8002d10:	e7ec      	b.n	8002cec <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1cc>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002d12:	2300      	movs	r3, #0
 8002d14:	823b      	strh	r3, [r7, #16]
 8002d16:	8a3b      	ldrh	r3, [r7, #16]
 8002d18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d1c:	d20e      	bcs.n	8002d3c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x21c>
		all_sideline_distance_[i] = 0;
 8002d1e:	8a3b      	ldrh	r3, [r7, #16]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8002d26:	332a      	adds	r3, #42	; 0x2a
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002d34:	8a3b      	ldrh	r3, [r7, #16]
 8002d36:	3301      	adds	r3, #1
 8002d38:	823b      	strh	r3, [r7, #16]
 8002d3a:	e7ec      	b.n	8002d16 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f6>
	}
}
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	0000      	movs	r0, r0
 8002d4c:	0000      	movs	r0, r0
	...

08002d50 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002d50:	b5b0      	push	{r4, r5, r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	static float pre_diff;

	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002d68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002d74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002d80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002d8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002da4:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002db8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002dc4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002dd0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002ddc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002de8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002df4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002df8:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002dfc:	edc7 7a03 	vstr	s15, [r7, #12]

	/*
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
	*/
	mon_diff = diff;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <_ZN9LineTrace9calcErrorEv+0x128>)
 8002e04:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd fbb5 	bl	8000578 <__aeabi_f2d>
 8002e0e:	a316      	add	r3, pc, #88	; (adr r3, 8002e68 <_ZN9LineTrace9calcErrorEv+0x118>)
 8002e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e14:	f7fd fc08 	bl	8000628 <__aeabi_dmul>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	460c      	mov	r4, r1
 8002e1c:	4625      	mov	r5, r4
 8002e1e:	461c      	mov	r4, r3
 8002e20:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <_ZN9LineTrace9calcErrorEv+0x12c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd fba7 	bl	8000578 <__aeabi_f2d>
 8002e2a:	a311      	add	r3, pc, #68	; (adr r3, 8002e70 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e30:	f7fd fbfa 	bl	8000628 <__aeabi_dmul>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	4620      	mov	r0, r4
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	f7fd fa3e 	bl	80002bc <__adddf3>
 8002e40:	4603      	mov	r3, r0
 8002e42:	460c      	mov	r4, r1
 8002e44:	4618      	mov	r0, r3
 8002e46:	4621      	mov	r1, r4
 8002e48:	f7fd fee6 	bl	8000c18 <__aeabi_d2f>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	60fb      	str	r3, [r7, #12]
	//mon_diff_lpf = diff;

	pre_diff = diff;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <_ZN9LineTrace9calcErrorEv+0x12c>)
 8002e54:	6013      	str	r3, [r2, #0]

	return diff;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	ee07 3a90 	vmov	s15, r3

}
 8002e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bdb0      	pop	{r4, r5, r7, pc}
 8002e66:	bf00      	nop
 8002e68:	47ae147b 	.word	0x47ae147b
 8002e6c:	3fb47ae1 	.word	0x3fb47ae1
 8002e70:	d70a3d71 	.word	0xd70a3d71
 8002e74:	3fed70a3 	.word	0x3fed70a3
 8002e78:	20000290 	.word	0x20000290
 8002e7c:	200002b0 	.word	0x200002b0

08002e80 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002e80:	b5b0      	push	{r4, r5, r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff ff61 	bl	8002d50 <_ZN9LineTrace9calcErrorEv>
 8002e8e:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d007      	beq.n	8002eac <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002e9c:	4b3c      	ldr	r3, [pc, #240]	; (8002f90 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	}

	p = kp_ * diff;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002eb2:	ed97 7a05 	vldr	s14, [r7, #20]
 8002eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eba:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002ec4:	4b33      	ldr	r3, [pc, #204]	; (8002f94 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002ec6:	edd3 7a00 	vldr	s15, [r3]
 8002eca:	edd7 6a05 	vldr	s13, [r7, #20]
 8002ece:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ed6:	ee17 0a90 	vmov	r0, s15
 8002eda:	f7fd fb4d 	bl	8000578 <__aeabi_f2d>
 8002ede:	a32a      	add	r3, pc, #168	; (adr r3, 8002f88 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee4:	f7fd fcca 	bl	800087c <__aeabi_ddiv>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	460c      	mov	r4, r1
 8002eec:	4618      	mov	r0, r3
 8002eee:	4621      	mov	r1, r4
 8002ef0:	f7fd fe92 	bl	8000c18 <__aeabi_d2f>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002ef8:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fb3b 	bl	8000578 <__aeabi_f2d>
 8002f02:	4604      	mov	r4, r0
 8002f04:	460d      	mov	r5, r1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002f0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f14:	ee17 0a90 	vmov	r0, s15
 8002f18:	f7fd fb2e 	bl	8000578 <__aeabi_f2d>
 8002f1c:	a31a      	add	r3, pc, #104	; (adr r3, 8002f88 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f22:	f7fd fb81 	bl	8000628 <__aeabi_dmul>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	f7fd f9c5 	bl	80002bc <__adddf3>
 8002f32:	4603      	mov	r3, r0
 8002f34:	460c      	mov	r4, r1
 8002f36:	4618      	mov	r0, r3
 8002f38:	4621      	mov	r1, r4
 8002f3a:	f7fd fe6d 	bl	8000c18 <__aeabi_d2f>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002f42:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002f44:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f48:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f50:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002f52:	edd3 7a00 	vldr	s15, [r3]
 8002f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5a:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8002f68:	edd7 0a02 	vldr	s1, [r7, #8]
 8002f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f70:	4610      	mov	r0, r2
 8002f72:	f002 fe71 	bl	8005c58 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002f76:	4a07      	ldr	r2, [pc, #28]	; (8002f94 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	6013      	str	r3, [r2, #0]

}
 8002f7c:	bf00      	nop
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bdb0      	pop	{r4, r5, r7, pc}
 8002f84:	f3af 8000 	nop.w
 8002f88:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f8c:	3f50624d 	.word	0x3f50624d
 8002f90:	200002b8 	.word	0x200002b8
 8002f94:	200002b4 	.word	0x200002b4

08002f98 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fe fbbb 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f002 f976 	bl	80052a0 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f001 fe8c 	bl	8004cd6 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f001 feed 	bl	8004dba <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	695a      	ldr	r2, [r3, #20]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003002:	337c      	adds	r3, #124	; 0x7c
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	461c      	mov	r4, r3
 8003008:	4610      	mov	r0, r2
 800300a:	f7fe fb6b 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800300e:	eef0 7a40 	vmov.f32	s15, s0
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8003018:	3312      	adds	r3, #18
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	3304      	adds	r3, #4
 8003020:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800302a:	337c      	adds	r3, #124	; 0x7c
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	3301      	adds	r3, #1
 8003030:	b29a      	uxth	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003038:	337c      	adds	r3, #124	; 0x7c
 800303a:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003042:	337c      	adds	r3, #124	; 0x7c
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	2b63      	cmp	r3, #99	; 0x63
 8003048:	d905      	bls.n	8003056 <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003050:	337c      	adds	r3, #124	; 0x7c
 8003052:	2263      	movs	r2, #99	; 0x63
 8003054:	801a      	strh	r2, [r3, #0]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	bd90      	pop	{r4, r7, pc}

0800305e <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 800305e:	b590      	push	{r4, r7, lr}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003070:	337e      	adds	r3, #126	; 0x7e
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	461c      	mov	r4, r3
 8003076:	4610      	mov	r0, r2
 8003078:	f7fe fb34 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800307c:	eef0 7a40 	vmov.f32	s15, s0
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8003086:	3336      	adds	r3, #54	; 0x36
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	3304      	adds	r3, #4
 800308e:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003098:	337e      	adds	r3, #126	; 0x7e
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80030a6:	337e      	adds	r3, #126	; 0x7e
 80030a8:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80030b0:	337e      	adds	r3, #126	; 0x7e
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030b8:	d306      	bcc.n	80030c8 <_ZN9LineTrace21storeSideLineDistanceEv+0x6a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80030c0:	337e      	adds	r3, #126	; 0x7e
 80030c2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80030c6:	801a      	strh	r2, [r3, #0]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd90      	pop	{r4, r7, pc}

080030d0 <_ZN9LineTrace9storeLogsEv>:

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}

void LineTrace::storeLogs()
{
 80030d0:	b590      	push	{r4, r7, lr}
 80030d2:	ed2d 8b02 	vpush	{d8}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d046      	beq.n	8003174 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030ec:	3348      	adds	r3, #72	; 0x48
 80030ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d11c      	bne.n	8003130 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	69dc      	ldr	r4, [r3, #28]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe fae1 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003104:	eeb0 8a40 	vmov.f32	s16, s0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	4618      	mov	r0, r3
 800310e:	f002 f8b6 	bl	800527e <_ZN8Odometry8getThetaEv>
 8003112:	ec53 2b10 	vmov	r2, r3, d0
 8003116:	4610      	mov	r0, r2
 8003118:	4619      	mov	r1, r3
 800311a:	f7fd fd7d 	bl	8000c18 <__aeabi_d2f>
 800311e:	4603      	mov	r3, r0
 8003120:	ee00 3a90 	vmov	s1, r3
 8003124:	eeb0 0a48 	vmov.f32	s0, s16
 8003128:	4620      	mov	r0, r4
 800312a:	f001 fc75 	bl	8004a18 <_ZN6Logger21storeDistanceAndThetaEff>
 800312e:	e01b      	b.n	8003168 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69dc      	ldr	r4, [r3, #28]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	4618      	mov	r0, r3
 800313a:	f002 fe15 	bl	8005d68 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 800313e:	eeb0 8a40 	vmov.f32	s16, s0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	4618      	mov	r0, r3
 8003148:	f002 f899 	bl	800527e <_ZN8Odometry8getThetaEv>
 800314c:	ec53 2b10 	vmov	r2, r3, d0
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	f7fd fd60 	bl	8000c18 <__aeabi_d2f>
 8003158:	4603      	mov	r3, r0
 800315a:	ee00 3a90 	vmov	s1, r3
 800315e:	eeb0 0a48 	vmov.f32	s0, s16
 8003162:	4620      	mov	r0, r4
 8003164:	f001 fc9b 	bl	8004a9e <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 8003168:	4b05      	ldr	r3, [pc, #20]	; (8003180 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	3301      	adds	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003172:	801a      	strh	r2, [r3, #0]
	}
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	ecbd 8b02 	vpop	{d8}
 800317e:	bd90      	pop	{r4, r7, pc}
 8003180:	20000294 	.word	0x20000294

08003184 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6959      	ldr	r1, [r3, #20]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003196:	337c      	adds	r3, #124	; 0x7c
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80031a0:	3312      	adds	r3, #18
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	3304      	adds	r3, #4
 80031a8:	edd3 7a00 	vldr	s15, [r3]
 80031ac:	eeb0 0a67 	vmov.f32	s0, s15
 80031b0:	4608      	mov	r0, r1
 80031b2:	f7fe faa6 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80031bc:	337c      	adds	r3, #124	; 0x7c
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	3301      	adds	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80031ca:	337c      	adds	r3, #124	; 0x7c
 80031cc:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80031d4:	337c      	adds	r3, #124	; 0x7c
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	2b63      	cmp	r3, #99	; 0x63
 80031da:	d905      	bls.n	80031e8 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x64>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80031e2:	337c      	adds	r3, #124	; 0x7c
 80031e4:	2263      	movs	r2, #99	; 0x63
 80031e6:	801a      	strh	r2, [r3, #0]

}
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80031f8:	2300      	movs	r3, #0
 80031fa:	82fb      	strh	r3, [r7, #22]
 80031fc:	8afb      	ldrh	r3, [r7, #22]
 80031fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003202:	d239      	bcs.n	8003278 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
		float temp_sideline_distance = sideline_distance_[i];
 8003204:	8afb      	ldrh	r3, [r7, #22]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 800320c:	3336      	adds	r3, #54	; 0x36
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	3304      	adds	r3, #4
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	4618      	mov	r0, r3
 800321e:	f7fe fa61 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003222:	eeb0 7a40 	vmov.f32	s14, s0
 8003226:	edd7 7a04 	vldr	s15, [r7, #16]
 800322a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800322e:	eeb0 0a67 	vmov.f32	s0, s15
 8003232:	f7ff fc65 	bl	8002b00 <_ZSt3absf>
 8003236:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 800323a:	edd7 7a03 	vldr	s15, [r7, #12]
 800323e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80032a0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb0>
 8003242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324a:	d811      	bhi.n	8003270 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x80>
			encoder_->setTotalDistance(sideline_distance_[i]);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6959      	ldr	r1, [r3, #20]
 8003250:	8afb      	ldrh	r3, [r7, #22]
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003258:	3336      	adds	r3, #54	; 0x36
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	3304      	adds	r3, #4
 8003260:	edd3 7a00 	vldr	s15, [r3]
 8003264:	eeb0 0a67 	vmov.f32	s0, s15
 8003268:	4608      	mov	r0, r1
 800326a:	f7fe fa4a 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
			break;
 800326e:	e003      	b.n	8003278 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003270:	8afb      	ldrh	r3, [r7, #22]
 8003272:	3301      	adds	r3, #1
 8003274:	82fb      	strh	r3, [r7, #22]
 8003276:	e7c1      	b.n	80031fc <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800327e:	337e      	adds	r3, #126	; 0x7e
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003286:	d306      	bcc.n	8003296 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa6>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800328e:	337e      	adds	r3, #126	; 0x7e
 8003290:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003294:	801a      	strh	r2, [r3, #0]

}
 8003296:	bf00      	nop
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	42a00000 	.word	0x42a00000

080032a4 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80032b6:	3348      	adds	r3, #72	; 0x48
 80032b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d143      	bne.n	8003348 <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 80032c0:	edd7 7a00 	vldr	s15, [r7]
 80032c4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80033e0 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 80032c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d0:	d504      	bpl.n	80032dc <_ZN9LineTrace15radius2VelocityEf+0x38>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	e076      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 800) velocity = 1.7;
 80032dc:	edd7 7a00 	vldr	s15, [r7]
 80032e0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80033e4 <_ZN9LineTrace15radius2VelocityEf+0x140>
 80032e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ec:	d502      	bpl.n	80032f4 <_ZN9LineTrace15radius2VelocityEf+0x50>
 80032ee:	4b3e      	ldr	r3, [pc, #248]	; (80033e8 <_ZN9LineTrace15radius2VelocityEf+0x144>)
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	e06a      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1000) velocity = 2.0;
 80032f4:	edd7 7a00 	vldr	s15, [r7]
 80032f8:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80033ec <_ZN9LineTrace15radius2VelocityEf+0x148>
 80032fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003304:	d503      	bpl.n	800330e <_ZN9LineTrace15radius2VelocityEf+0x6a>
 8003306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	e05d      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.3;
 800330e:	edd7 7a00 	vldr	s15, [r7]
 8003312:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80033f0 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8003316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800331a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331e:	d502      	bpl.n	8003326 <_ZN9LineTrace15radius2VelocityEf+0x82>
 8003320:	4b34      	ldr	r3, [pc, #208]	; (80033f4 <_ZN9LineTrace15radius2VelocityEf+0x150>)
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	e051      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8003326:	edd7 7a00 	vldr	s15, [r7]
 800332a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80033f8 <_ZN9LineTrace15radius2VelocityEf+0x154>
 800332e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003336:	d502      	bpl.n	800333e <_ZN9LineTrace15radius2VelocityEf+0x9a>
 8003338:	4b30      	ldr	r3, [pc, #192]	; (80033fc <_ZN9LineTrace15radius2VelocityEf+0x158>)
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	e045      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity_;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	e040      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0x126>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800334e:	3348      	adds	r3, #72	; 0x48
 8003350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d136      	bne.n	80033c6 <_ZN9LineTrace15radius2VelocityEf+0x122>
		if(radius < 300) velocity = min_velocity2_;
 8003358:	edd7 7a00 	vldr	s15, [r7]
 800335c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80033e0 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8003360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003368:	d504      	bpl.n	8003374 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	e02a      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.1;
 8003374:	edd7 7a00 	vldr	s15, [r7]
 8003378:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80033f0 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 800337c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003384:	d502      	bpl.n	800338c <_ZN9LineTrace15radius2VelocityEf+0xe8>
 8003386:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	e01e      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 800338c:	edd7 7a00 	vldr	s15, [r7]
 8003390:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80033f8 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8003394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339c:	d502      	bpl.n	80033a4 <_ZN9LineTrace15radius2VelocityEf+0x100>
 800339e:	4b17      	ldr	r3, [pc, #92]	; (80033fc <_ZN9LineTrace15radius2VelocityEf+0x158>)
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	e012      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2500) velocity = 3.0;
 80033a4:	edd7 7a00 	vldr	s15, [r7]
 80033a8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003404 <_ZN9LineTrace15radius2VelocityEf+0x160>
 80033ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b4:	d502      	bpl.n	80033bc <_ZN9LineTrace15radius2VelocityEf+0x118>
 80033b6:	4b14      	ldr	r3, [pc, #80]	; (8003408 <_ZN9LineTrace15radius2VelocityEf+0x164>)
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	e006      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity2_;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	e001      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0x126>
	}
	else velocity = 1.3;
 80033c6:	4b11      	ldr	r3, [pc, #68]	; (800340c <_ZN9LineTrace15radius2VelocityEf+0x168>)
 80033c8:	60fb      	str	r3, [r7, #12]

	return velocity;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	ee07 3a90 	vmov	s15, r3
}
 80033d0:	eeb0 0a67 	vmov.f32	s0, s15
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	43960000 	.word	0x43960000
 80033e4:	44480000 	.word	0x44480000
 80033e8:	3fd9999a 	.word	0x3fd9999a
 80033ec:	447a0000 	.word	0x447a0000
 80033f0:	44bb8000 	.word	0x44bb8000
 80033f4:	40133333 	.word	0x40133333
 80033f8:	44fa0000 	.word	0x44fa0000
 80033fc:	40200000 	.word	0x40200000
 8003400:	40066666 	.word	0x40066666
 8003404:	451c4000 	.word	0x451c4000
 8003408:	40400000 	.word	0x40400000
 800340c:	3fa66666 	.word	0x3fa66666

08003410 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003410:	b5b0      	push	{r4, r5, r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	ed87 0a02 	vstr	s0, [r7, #8]
 800341c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800341e:	f241 736f 	movw	r3, #5999	; 0x176f
 8003422:	83fb      	strh	r3, [r7, #30]
 8003424:	8bfb      	ldrh	r3, [r7, #30]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 808d 	beq.w	8003546 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 800342c:	8bfb      	ldrh	r3, [r7, #30]
 800342e:	3b01      	subs	r3, #1
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	3304      	adds	r3, #4
 800343c:	ed93 7a00 	vldr	s14, [r3]
 8003440:	8bfb      	ldrh	r3, [r7, #30]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	3304      	adds	r3, #4
 800344e:	edd3 7a00 	vldr	s15, [r3]
 8003452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003456:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800345a:	edd7 7a06 	vldr	s15, [r7, #24]
 800345e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003466:	dd6a      	ble.n	800353e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003468:	8bfb      	ldrh	r3, [r7, #30]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	4413      	add	r3, r2
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd f880 	bl	8000578 <__aeabi_f2d>
 8003478:	a335      	add	r3, pc, #212	; (adr r3, 8003550 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800347a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347e:	f7fd f8d3 	bl	8000628 <__aeabi_dmul>
 8003482:	4603      	mov	r3, r0
 8003484:	460c      	mov	r4, r1
 8003486:	4625      	mov	r5, r4
 8003488:	461c      	mov	r4, r3
 800348a:	69b8      	ldr	r0, [r7, #24]
 800348c:	f7fd f874 	bl	8000578 <__aeabi_f2d>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4620      	mov	r0, r4
 8003496:	4629      	mov	r1, r5
 8003498:	f7fd f9f0 	bl	800087c <__aeabi_ddiv>
 800349c:	4603      	mov	r3, r0
 800349e:	460c      	mov	r4, r1
 80034a0:	4618      	mov	r0, r3
 80034a2:	4621      	mov	r1, r4
 80034a4:	f7fd fbb8 	bl	8000c18 <__aeabi_d2f>
 80034a8:	4603      	mov	r3, r0
 80034aa:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80034ac:	edd7 6a06 	vldr	s13, [r7, #24]
 80034b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80034b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034b8:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80034bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80034c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80034c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034cc:	dd37      	ble.n	800353e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80034ce:	8bfb      	ldrh	r3, [r7, #30]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	3304      	adds	r3, #4
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd f84a 	bl	8000578 <__aeabi_f2d>
 80034e4:	4604      	mov	r4, r0
 80034e6:	460d      	mov	r5, r1
 80034e8:	8bfb      	ldrh	r3, [r7, #30]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	ed93 7a00 	vldr	s14, [r3]
 80034f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80034f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fc:	ee17 0a90 	vmov	r0, s15
 8003500:	f7fd f83a 	bl	8000578 <__aeabi_f2d>
 8003504:	a312      	add	r3, pc, #72	; (adr r3, 8003550 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	f7fd f88d 	bl	8000628 <__aeabi_dmul>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4620      	mov	r0, r4
 8003514:	4629      	mov	r1, r5
 8003516:	f7fc fed1 	bl	80002bc <__adddf3>
 800351a:	4603      	mov	r3, r0
 800351c:	460c      	mov	r4, r1
 800351e:	4619      	mov	r1, r3
 8003520:	4622      	mov	r2, r4
 8003522:	8bfb      	ldrh	r3, [r7, #30]
 8003524:	1e5c      	subs	r4, r3, #1
 8003526:	4608      	mov	r0, r1
 8003528:	4611      	mov	r1, r2
 800352a:	f7fd fb75 	bl	8000c18 <__aeabi_d2f>
 800352e:	4601      	mov	r1, r0
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800353e:	8bfb      	ldrh	r3, [r7, #30]
 8003540:	3b01      	subs	r3, #1
 8003542:	83fb      	strh	r3, [r7, #30]
 8003544:	e76e      	b.n	8003424 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 8003546:	bf00      	nop
 8003548:	3720      	adds	r7, #32
 800354a:	46bd      	mov	sp, r7
 800354c:	bdb0      	pop	{r4, r5, r7, pc}
 800354e:	bf00      	nop
 8003550:	d2f1a9fc 	.word	0xd2f1a9fc
 8003554:	3f50624d 	.word	0x3f50624d

08003558 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	ed87 0a02 	vstr	s0, [r7, #8]
 8003564:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003566:	2300      	movs	r3, #0
 8003568:	83fb      	strh	r3, [r7, #30]
 800356a:	8bfb      	ldrh	r3, [r7, #30]
 800356c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003570:	4293      	cmp	r3, r2
 8003572:	f200 808d 	bhi.w	8003690 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 8003576:	8bfb      	ldrh	r3, [r7, #30]
 8003578:	3301      	adds	r3, #1
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	3304      	adds	r3, #4
 8003586:	ed93 7a00 	vldr	s14, [r3]
 800358a:	8bfb      	ldrh	r3, [r7, #30]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	3304      	adds	r3, #4
 8003598:	edd3 7a00 	vldr	s15, [r3]
 800359c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035a0:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80035a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80035a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b0:	dd6a      	ble.n	8003688 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 80035b2:	8bfb      	ldrh	r3, [r7, #30]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fc ffdb 	bl	8000578 <__aeabi_f2d>
 80035c2:	a335      	add	r3, pc, #212	; (adr r3, 8003698 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	f7fd f82e 	bl	8000628 <__aeabi_dmul>
 80035cc:	4603      	mov	r3, r0
 80035ce:	460c      	mov	r4, r1
 80035d0:	4625      	mov	r5, r4
 80035d2:	461c      	mov	r4, r3
 80035d4:	69b8      	ldr	r0, [r7, #24]
 80035d6:	f7fc ffcf 	bl	8000578 <__aeabi_f2d>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4620      	mov	r0, r4
 80035e0:	4629      	mov	r1, r5
 80035e2:	f7fd f94b 	bl	800087c <__aeabi_ddiv>
 80035e6:	4603      	mov	r3, r0
 80035e8:	460c      	mov	r4, r1
 80035ea:	4618      	mov	r0, r3
 80035ec:	4621      	mov	r1, r4
 80035ee:	f7fd fb13 	bl	8000c18 <__aeabi_d2f>
 80035f2:	4603      	mov	r3, r0
 80035f4:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80035f6:	edd7 6a06 	vldr	s13, [r7, #24]
 80035fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80035fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003602:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003606:	ed97 7a04 	vldr	s14, [r7, #16]
 800360a:	edd7 7a02 	vldr	s15, [r7, #8]
 800360e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003616:	dd37      	ble.n	8003688 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003618:	8bfb      	ldrh	r3, [r7, #30]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	3304      	adds	r3, #4
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7fc ffa5 	bl	8000578 <__aeabi_f2d>
 800362e:	4604      	mov	r4, r0
 8003630:	460d      	mov	r5, r1
 8003632:	8bfb      	ldrh	r3, [r7, #30]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	ed93 7a00 	vldr	s14, [r3]
 800363e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003646:	ee17 0a90 	vmov	r0, s15
 800364a:	f7fc ff95 	bl	8000578 <__aeabi_f2d>
 800364e:	a312      	add	r3, pc, #72	; (adr r3, 8003698 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	f7fc ffe8 	bl	8000628 <__aeabi_dmul>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4620      	mov	r0, r4
 800365e:	4629      	mov	r1, r5
 8003660:	f7fc fe2c 	bl	80002bc <__adddf3>
 8003664:	4603      	mov	r3, r0
 8003666:	460c      	mov	r4, r1
 8003668:	4619      	mov	r1, r3
 800366a:	4622      	mov	r2, r4
 800366c:	8bfb      	ldrh	r3, [r7, #30]
 800366e:	1c5c      	adds	r4, r3, #1
 8003670:	4608      	mov	r0, r1
 8003672:	4611      	mov	r1, r2
 8003674:	f7fd fad0 	bl	8000c18 <__aeabi_d2f>
 8003678:	4601      	mov	r1, r0
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	3304      	adds	r3, #4
 8003686:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003688:	8bfb      	ldrh	r3, [r7, #30]
 800368a:	3301      	adds	r3, #1
 800368c:	83fb      	strh	r3, [r7, #30]
 800368e:	e76c      	b.n	800356a <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003690:	bf00      	nop
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bdb0      	pop	{r4, r5, r7, pc}
 8003698:	d2f1a9fc 	.word	0xd2f1a9fc
 800369c:	3f50624d 	.word	0x3f50624d

080036a0 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fe f845 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036b8:	3344      	adds	r3, #68	; 0x44
 80036ba:	2201      	movs	r2, #1
 80036bc:	701a      	strb	r2, [r3, #0]
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036d4:	3344      	adds	r3, #68	; 0x44
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036e0:	3346      	adds	r3, #70	; 0x46
 80036e2:	2200      	movs	r2, #0
 80036e4:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800370e:	3344      	adds	r3, #68	; 0x44
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8081 	beq.w	800381a <_ZN9LineTrace20updateTargetVelocityEv+0x11a>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	4618      	mov	r0, r3
 800371e:	f7fd ffe1 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003722:	eeb0 7a40 	vmov.f32	s14, s0
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800372c:	edd3 7a00 	vldr	s15, [r3]
 8003730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003738:	bfac      	ite	ge
 800373a:	2301      	movge	r3, #1
 800373c:	2300      	movlt	r3, #0
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d023      	beq.n	800378c <_ZN9LineTrace20updateTargetVelocityEv+0x8c>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800374a:	ed93 7a00 	vldr	s14, [r3]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003754:	3346      	adds	r3, #70	; 0x46
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	3330      	adds	r3, #48	; 0x30
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	edd3 7a00 	vldr	s15, [r3]
 8003764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800376e:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003778:	3346      	adds	r3, #70	; 0x46
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	3301      	adds	r3, #1
 800377e:	b29a      	uxth	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003786:	3346      	adds	r3, #70	; 0x46
 8003788:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 800378a:	e7c5      	b.n	8003718 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003792:	3346      	adds	r3, #70	; 0x46
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	f241 726f 	movw	r2, #5999	; 0x176f
 800379a:	4293      	cmp	r3, r2
 800379c:	d906      	bls.n	80037ac <_ZN9LineTrace20updateTargetVelocityEv+0xac>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037a4:	3346      	adds	r3, #70	; 0x46
 80037a6:	f241 726f 	movw	r2, #5999	; 0x176f
 80037aa:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <_ZN9LineTrace20updateTargetVelocityEv+0x124>)
 80037b6:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fd ff91 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80037c2:	eef0 7a40 	vmov.f32	s15, s0
 80037c6:	4b18      	ldr	r3, [pc, #96]	; (8003828 <_ZN9LineTrace20updateTargetVelocityEv+0x128>)
 80037c8:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037d2:	3346      	adds	r3, #70	; 0x46
 80037d4:	881a      	ldrh	r2, [r3, #0]
 80037d6:	4b15      	ldr	r3, [pc, #84]	; (800382c <_ZN9LineTrace20updateTargetVelocityEv+0x12c>)
 80037d8:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037e0:	3346      	adds	r3, #70	; 0x46
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	3304      	adds	r3, #4
 80037f0:	edd3 7a00 	vldr	s15, [r3]
 80037f4:	eeb0 0a67 	vmov.f32	s0, s15
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fa88 	bl	8003d0e <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003804:	3346      	adds	r3, #70	; 0x46
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	3304      	adds	r3, #4
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a06      	ldr	r2, [pc, #24]	; (8003830 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 8003818:	6013      	str	r3, [r2, #0]

	}
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	200002a0 	.word	0x200002a0
 8003828:	200002a4 	.word	0x200002a4
 800382c:	200002a8 	.word	0x200002a8
 8003830:	200002ac 	.word	0x200002ac

08003834 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003840:	2300      	movs	r3, #0
 8003842:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	4618      	mov	r0, r3
 800384a:	f7fd ff3c 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 800384e:	eeb0 7a40 	vmov.f32	s14, s0
 8003852:	edd7 7a00 	vldr	s15, [r7]
 8003856:	eef4 7ac7 	vcmpe.f32	s15, s14
 800385a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385e:	bf94      	ite	ls
 8003860:	2301      	movls	r3, #1
 8003862:	2300      	movhi	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 800386e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8003890:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800389c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038a0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80038a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038a8:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80038bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80038c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038cc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80038d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038d4:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 80038d8:	4a40      	ldr	r2, [pc, #256]	; (80039dc <_ZN9LineTrace11isCrossLineEv+0x164>)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 80038de:	4a40      	ldr	r2, [pc, #256]	; (80039e0 <_ZN9LineTrace11isCrossLineEv+0x168>)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 80038e4:	4b3f      	ldr	r3, [pc, #252]	; (80039e4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	f083 0301 	eor.w	r3, r3, #1
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d044      	beq.n	800397c <_ZN9LineTrace11isCrossLineEv+0x104>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 80038f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80038f6:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80039e8 <_ZN9LineTrace11isCrossLineEv+0x170>
 80038fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003902:	d50f      	bpl.n	8003924 <_ZN9LineTrace11isCrossLineEv+0xac>
 8003904:	edd7 7a02 	vldr	s15, [r7, #8]
 8003908:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80039e8 <_ZN9LineTrace11isCrossLineEv+0x170>
 800390c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003914:	d506      	bpl.n	8003924 <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8003916:	4b35      	ldr	r3, [pc, #212]	; (80039ec <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	3301      	adds	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	4b33      	ldr	r3, [pc, #204]	; (80039ec <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003920:	801a      	strh	r2, [r3, #0]
 8003922:	e002      	b.n	800392a <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8003924:	4b31      	ldr	r3, [pc, #196]	; (80039ec <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003926:	2200      	movs	r2, #0
 8003928:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 800392a:	4b30      	ldr	r3, [pc, #192]	; (80039ec <_ZN9LineTrace11isCrossLineEv+0x174>)
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d94d      	bls.n	80039ce <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = true;
 8003932:	4b2f      	ldr	r3, [pc, #188]	; (80039f0 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8003934:	2201      	movs	r2, #1
 8003936:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8003938:	4b2a      	ldr	r3, [pc, #168]	; (80039e4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 800393a:	2201      	movs	r2, #1
 800393c:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 800393e:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003940:	2200      	movs	r2, #0
 8003942:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800394a:	3384      	adds	r3, #132	; 0x84
 800394c:	2201      	movs	r2, #1
 800394e:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003956:	3348      	adds	r3, #72	; 0x48
 8003958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d103      	bne.n	8003968 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff fb45 	bl	8002ff0 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8003966:	e032      	b.n	80039ce <_ZN9LineTrace11isCrossLineEv+0x156>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7ff fc0b 	bl	8003184 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003974:	3398      	adds	r3, #152	; 0x98
 8003976:	2200      	movs	r2, #0
 8003978:	801a      	strh	r2, [r3, #0]
 800397a:	e028      	b.n	80039ce <_ZN9LineTrace11isCrossLineEv+0x156>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 800397c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003980:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80039f4 <_ZN9LineTrace11isCrossLineEv+0x17c>
 8003984:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398c:	dd0f      	ble.n	80039ae <_ZN9LineTrace11isCrossLineEv+0x136>
 800398e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003992:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80039f4 <_ZN9LineTrace11isCrossLineEv+0x17c>
 8003996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800399a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399e:	dd06      	ble.n	80039ae <_ZN9LineTrace11isCrossLineEv+0x136>
			cnt++;
 80039a0:	4b12      	ldr	r3, [pc, #72]	; (80039ec <_ZN9LineTrace11isCrossLineEv+0x174>)
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	3301      	adds	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	4b10      	ldr	r3, [pc, #64]	; (80039ec <_ZN9LineTrace11isCrossLineEv+0x174>)
 80039aa:	801a      	strh	r2, [r3, #0]
 80039ac:	e002      	b.n	80039b4 <_ZN9LineTrace11isCrossLineEv+0x13c>
		}
		else{
			cnt = 0;
 80039ae:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <_ZN9LineTrace11isCrossLineEv+0x174>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 80039b4:	4b0d      	ldr	r3, [pc, #52]	; (80039ec <_ZN9LineTrace11isCrossLineEv+0x174>)
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	2b09      	cmp	r3, #9
 80039ba:	d908      	bls.n	80039ce <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = false;
 80039bc:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80039c8:	4b08      	ldr	r3, [pc, #32]	; (80039ec <_ZN9LineTrace11isCrossLineEv+0x174>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 80039ce:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000298 	.word	0x20000298
 80039e0:	2000029c 	.word	0x2000029c
 80039e4:	200002bf 	.word	0x200002bf
 80039e8:	44160000 	.word	0x44160000
 80039ec:	200002bc 	.word	0x200002bc
 80039f0:	200002be 	.word	0x200002be
 80039f4:	43fa0000 	.word	0x43fa0000

080039f8 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b087      	sub	sp, #28
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003a00:	2300      	movs	r3, #0
 8003a02:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fd fe5c 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003a0e:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 fc31 	bl	800527e <_ZN8Odometry8getThetaEv>
 8003a1c:	ec54 3b10 	vmov	r3, r4, d0
 8003a20:	4618      	mov	r0, r3
 8003a22:	4621      	mov	r1, r4
 8003a24:	f7fd f8f8 	bl	8000c18 <__aeabi_d2f>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003a2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a30:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a38:	d101      	bne.n	8003a3e <_ZN9LineTrace8isStableEv+0x46>
 8003a3a:	4b23      	ldr	r3, [pc, #140]	; (8003ac8 <_ZN9LineTrace8isStableEv+0xd0>)
 8003a3c:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003a3e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a42:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a4a:	eeb0 0a66 	vmov.f32	s0, s13
 8003a4e:	f7ff f857 	bl	8002b00 <_ZSt3absf>
 8003a52:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003a56:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a5a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003acc <_ZN9LineTrace8isStableEv+0xd4>
 8003a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a66:	db01      	blt.n	8003a6c <_ZN9LineTrace8isStableEv+0x74>
 8003a68:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <_ZN9LineTrace8isStableEv+0xd8>)
 8003a6a:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a72:	3384      	adds	r3, #132	; 0x84
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d008      	beq.n	8003a8c <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003a7a:	4b16      	ldr	r3, [pc, #88]	; (8003ad4 <_ZN9LineTrace8isStableEv+0xdc>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a86:	3384      	adds	r3, #132	; 0x84
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003a8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a90:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003ad8 <_ZN9LineTrace8isStableEv+0xe0>
 8003a94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9c:	db06      	blt.n	8003aac <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	; (8003ad4 <_ZN9LineTrace8isStableEv+0xdc>)
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <_ZN9LineTrace8isStableEv+0xdc>)
 8003aa8:	801a      	strh	r2, [r3, #0]
 8003aaa:	e002      	b.n	8003ab2 <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003aac:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <_ZN9LineTrace8isStableEv+0xdc>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 8003ab2:	4b08      	ldr	r3, [pc, #32]	; (8003ad4 <_ZN9LineTrace8isStableEv+0xdc>)
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	2b16      	cmp	r3, #22
 8003ab8:	d901      	bls.n	8003abe <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003aba:	2301      	movs	r3, #1
 8003abc:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd90      	pop	{r4, r7, pc}
 8003ac8:	3727c5ac 	.word	0x3727c5ac
 8003acc:	459c4000 	.word	0x459c4000
 8003ad0:	459c4000 	.word	0x459c4000
 8003ad4:	200002c0 	.word	0x200002c0
 8003ad8:	44fa0000 	.word	0x44fa0000

08003adc <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08e      	sub	sp, #56	; 0x38
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003ae4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ae8:	2201      	movs	r2, #1
 8003aea:	4951      	ldr	r1, [pc, #324]	; (8003c30 <_ZN9LineTrace4initEv+0x154>)
 8003aec:	4851      	ldr	r0, [pc, #324]	; (8003c34 <_ZN9LineTrace4initEv+0x158>)
 8003aee:	f7fd ff2b 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003af2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003af6:	2201      	movs	r2, #1
 8003af8:	494f      	ldr	r1, [pc, #316]	; (8003c38 <_ZN9LineTrace4initEv+0x15c>)
 8003afa:	484e      	ldr	r0, [pc, #312]	; (8003c34 <_ZN9LineTrace4initEv+0x158>)
 8003afc:	f7fd ff24 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b04:	2201      	movs	r2, #1
 8003b06:	494d      	ldr	r1, [pc, #308]	; (8003c3c <_ZN9LineTrace4initEv+0x160>)
 8003b08:	484a      	ldr	r0, [pc, #296]	; (8003c34 <_ZN9LineTrace4initEv+0x158>)
 8003b0a:	f7fd ff1d 	bl	8001948 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003b0e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003b12:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003b16:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003b1a:	eeb0 1a66 	vmov.f32	s2, s13
 8003b1e:	eef0 0a47 	vmov.f32	s1, s14
 8003b22:	eeb0 0a67 	vmov.f32	s0, s15
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f89c 	bl	8003c64 <_ZN9LineTrace7setGainEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003b2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b30:	2201      	movs	r2, #1
 8003b32:	4943      	ldr	r1, [pc, #268]	; (8003c40 <_ZN9LineTrace4initEv+0x164>)
 8003b34:	483f      	ldr	r0, [pc, #252]	; (8003c34 <_ZN9LineTrace4initEv+0x158>)
 8003b36:	f7fd ff07 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b3e:	2201      	movs	r2, #1
 8003b40:	4940      	ldr	r1, [pc, #256]	; (8003c44 <_ZN9LineTrace4initEv+0x168>)
 8003b42:	483c      	ldr	r0, [pc, #240]	; (8003c34 <_ZN9LineTrace4initEv+0x158>)
 8003b44:	f7fd ff00 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003b48:	f107 0320 	add.w	r3, r7, #32
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	493e      	ldr	r1, [pc, #248]	; (8003c48 <_ZN9LineTrace4initEv+0x16c>)
 8003b50:	4838      	ldr	r0, [pc, #224]	; (8003c34 <_ZN9LineTrace4initEv+0x158>)
 8003b52:	f7fd fef9 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003b56:	f107 031c 	add.w	r3, r7, #28
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	493b      	ldr	r1, [pc, #236]	; (8003c4c <_ZN9LineTrace4initEv+0x170>)
 8003b5e:	4835      	ldr	r0, [pc, #212]	; (8003c34 <_ZN9LineTrace4initEv+0x158>)
 8003b60:	f7fd fef2 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003b64:	f107 0318 	add.w	r3, r7, #24
 8003b68:	2201      	movs	r2, #1
 8003b6a:	4939      	ldr	r1, [pc, #228]	; (8003c50 <_ZN9LineTrace4initEv+0x174>)
 8003b6c:	4831      	ldr	r0, [pc, #196]	; (8003c34 <_ZN9LineTrace4initEv+0x158>)
 8003b6e:	f7fd feeb 	bl	8001948 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003b72:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003b76:	eeb0 0a67 	vmov.f32	s0, s15
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f8c7 	bl	8003d0e <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003b80:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b84:	eeb0 0a67 	vmov.f32	s0, s15
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f8d0 	bl	8003d2e <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003b8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b92:	eeb0 0a67 	vmov.f32	s0, s15
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f8d9 	bl	8003d4e <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003b9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f8e2 	bl	8003d6e <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003baa:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bae:	eeb0 0a67 	vmov.f32	s0, s15
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f8eb 	bl	8003d8e <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003bb8:	f107 0314 	add.w	r3, r7, #20
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	4925      	ldr	r1, [pc, #148]	; (8003c54 <_ZN9LineTrace4initEv+0x178>)
 8003bc0:	481c      	ldr	r0, [pc, #112]	; (8003c34 <_ZN9LineTrace4initEv+0x158>)
 8003bc2:	f7fd fec1 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003bc6:	f107 0310 	add.w	r3, r7, #16
 8003bca:	2201      	movs	r2, #1
 8003bcc:	4922      	ldr	r1, [pc, #136]	; (8003c58 <_ZN9LineTrace4initEv+0x17c>)
 8003bce:	4819      	ldr	r0, [pc, #100]	; (8003c34 <_ZN9LineTrace4initEv+0x158>)
 8003bd0:	f7fd feba 	bl	8001948 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003bd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bd8:	ed97 7a04 	vldr	s14, [r7, #16]
 8003bdc:	eef0 0a47 	vmov.f32	s1, s14
 8003be0:	eeb0 0a67 	vmov.f32	s0, s15
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f932 	bl	8003e4e <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003bea:	f04f 0300 	mov.w	r3, #0
 8003bee:	60fb      	str	r3, [r7, #12]
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003bf6:	f107 030c 	add.w	r3, r7, #12
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	4917      	ldr	r1, [pc, #92]	; (8003c5c <_ZN9LineTrace4initEv+0x180>)
 8003bfe:	480d      	ldr	r0, [pc, #52]	; (8003c34 <_ZN9LineTrace4initEv+0x158>)
 8003c00:	f7fd fea2 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003c04:	f107 0308 	add.w	r3, r7, #8
 8003c08:	2201      	movs	r2, #1
 8003c0a:	4915      	ldr	r1, [pc, #84]	; (8003c60 <_ZN9LineTrace4initEv+0x184>)
 8003c0c:	4809      	ldr	r0, [pc, #36]	; (8003c34 <_ZN9LineTrace4initEv+0x158>)
 8003c0e:	f7fd fe9b 	bl	8001948 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003c12:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c16:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c1a:	eef0 0a47 	vmov.f32	s1, s14
 8003c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f92d 	bl	8003e82 <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003c28:	bf00      	nop
 8003c2a:	3738      	adds	r7, #56	; 0x38
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	08019780 	.word	0x08019780
 8003c34:	08019788 	.word	0x08019788
 8003c38:	08019790 	.word	0x08019790
 8003c3c:	08019798 	.word	0x08019798
 8003c40:	080197a0 	.word	0x080197a0
 8003c44:	080197ac 	.word	0x080197ac
 8003c48:	080197b8 	.word	0x080197b8
 8003c4c:	080197c4 	.word	0x080197c4
 8003c50:	080197d0 	.word	0x080197d0
 8003c54:	080197dc 	.word	0x080197dc
 8003c58:	080197e4 	.word	0x080197e4
 8003c5c:	080197ec 	.word	0x080197ec
 8003c60:	080197f8 	.word	0x080197f8

08003c64 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c70:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c74:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c8a:	bf00      	nop
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
	return kp_;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca2:	ee07 3a90 	vmov	s15, r3
}
 8003ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
	return ki_;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	ee07 3a90 	vmov	s15, r3
}
 8003cc4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
	return kd_;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	ee07 3a90 	vmov	s15, r3
}
 8003ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
 8003d76:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
 8003d96:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dbc:	ee07 3a90 	vmov	s15, r3
}
 8003dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ddc:	ee07 3a90 	vmov	s15, r3
}
 8003de0:	eeb0 0a67 	vmov.f32	s0, s15
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dfc:	ee07 3a90 	vmov	s15, r3
}
 8003e00:	eeb0 0a67 	vmov.f32	s0, s15
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e1c:	ee07 3a90 	vmov	s15, r3
}
 8003e20:	eeb0 0a67 	vmov.f32	s0, s15
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003e3c:	ee07 3a90 	vmov	s15, r3
}
 8003e40:	eeb0 0a67 	vmov.f32	s0, s15
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b085      	sub	sp, #20
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e5a:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e64:	3388      	adds	r3, #136	; 0x88
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e70:	338c      	adds	r3, #140	; 0x8c
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	601a      	str	r2, [r3, #0]
}
 8003e76:	bf00      	nop
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b085      	sub	sp, #20
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e8e:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e98:	3390      	adds	r3, #144	; 0x90
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ea4:	3394      	adds	r3, #148	; 0x94
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	601a      	str	r2, [r3, #0]
}
 8003eaa:	bf00      	nop
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ec4:	3388      	adds	r3, #136	; 0x88
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	ee07 3a90 	vmov	s15, r3
}
 8003ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ee8:	3394      	adds	r3, #148	; 0x94
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	ee07 3a90 	vmov	s15, r3
}
 8003ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f0c:	3390      	adds	r3, #144	; 0x90
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	ee07 3a90 	vmov	s15, r3
}
 8003f14:	eeb0 0a67 	vmov.f32	s0, s15
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f30:	338c      	adds	r3, #140	; 0x8c
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	ee07 3a90 	vmov	s15, r3
}
 8003f38:	eeb0 0a67 	vmov.f32	s0, s15
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
	...

08003f48 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003f48:	b590      	push	{r4, r7, lr}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 8116 	beq.w	8004188 <_ZN9LineTrace4flipEv+0x240>
		// ---- line following processing -----//
		pidTrace();
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7fe ff8f 	bl	8002e80 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();


		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff fbcc 	bl	8003700 <_ZN9LineTrace20updateTargetVelocityEv>


		// ----- Processing at regular distances -----//
		if(isTargetDistance(10) == true){
 8003f68:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff fc61 	bl	8003834 <_ZN9LineTrace16isTargetDistanceEf>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d040      	beq.n	8003ffa <_ZN9LineTrace4flipEv+0xb2>
			// ---- Store Logs ------//
			storeLogs();
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff f8a9 	bl	80030d0 <_ZN9LineTrace9storeLogsEv>
			logger_->storeLog(imu_->getOmega());
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69dc      	ldr	r4, [r3, #28]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fd ff92 	bl	8001eb0 <_ZN3IMU8getOmegaEv>
 8003f8c:	eef0 7a40 	vmov.f32	s15, s0
 8003f90:	eeb0 0a67 	vmov.f32	s0, s15
 8003f94:	4620      	mov	r0, r4
 8003f96:	f000 fc5d 	bl	8004854 <_ZN6Logger8storeLogEf>
			logger_->storeLog2(target_omega_);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69da      	ldr	r2, [r3, #28]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8003fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8003fa8:	4610      	mov	r0, r2
 8003faa:	f000 fc8a 	bl	80048c2 <_ZN6Logger9storeLog2Ef>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7ff fd22 	bl	80039f8 <_ZN9LineTrace8isStableEv>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00c      	beq.n	8003fd4 <_ZN9LineTrace4flipEv+0x8c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 fc1a 	bl	80057f8 <_ZN10SideSensor10getStatusLEv>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f083 0301 	eor.w	r3, r3, #1
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <_ZN9LineTrace4flipEv+0x8c>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <_ZN9LineTrace4flipEv+0x8e>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d005      	beq.n	8003fe6 <_ZN9LineTrace4flipEv+0x9e>
				stable_flag_ = true;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fe0:	3383      	adds	r3, #131	; 0x83
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd fb98 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f001 f953 	bl	80052a0 <_ZN8Odometry13clearPotitionEv>
		}

		// ------- Store side line distance or correction distance------//
		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004000:	3383      	adds	r3, #131	; 0x83
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d009      	beq.n	800401c <_ZN9LineTrace4flipEv+0xd4>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	4618      	mov	r0, r3
 800400e:	f001 fbf3 	bl	80057f8 <_ZN10SideSensor10getStatusLEv>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <_ZN9LineTrace4flipEv+0xd4>
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <_ZN9LineTrace4flipEv+0xd6>
 800401c:	2300      	movs	r3, #0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d020      	beq.n	8004064 <_ZN9LineTrace4flipEv+0x11c>
			if(mode_selector_ == FIRST_RUNNING){
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004028:	3348      	adds	r3, #72	; 0x48
 800402a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <_ZN9LineTrace4flipEv+0xf2>
				storeSideLineDistance();
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff f813 	bl	800305e <_ZN9LineTrace21storeSideLineDistanceEv>
 8004038:	e008      	b.n	800404c <_ZN9LineTrace4flipEv+0x104>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7ff f8d8 	bl	80031f0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004046:	3398      	adds	r3, #152	; 0x98
 8004048:	2200      	movs	r2, #0
 800404a:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004052:	3383      	adds	r3, #131	; 0x83
 8004054:	2200      	movs	r2, #0
 8004056:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800405e:	3384      	adds	r3, #132	; 0x84
 8004060:	2201      	movs	r2, #1
 8004062:	701a      	strb	r2, [r3, #0]
		}

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff fc07 	bl	8003878 <_ZN9LineTrace11isCrossLineEv>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d009      	beq.n	8004084 <_ZN9LineTrace4flipEv+0x13c>
			side_sensor_->enableIgnore();
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	4618      	mov	r0, r3
 8004076:	f001 fbe7 	bl	8005848 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	4618      	mov	r0, r3
 8004080:	f7fd fb79 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	4618      	mov	r0, r3
 800408a:	f001 fbf7 	bl	800587c <_ZN10SideSensor13getIgnoreFlagEv>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00f      	beq.n	80040b4 <_ZN9LineTrace4flipEv+0x16c>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	4618      	mov	r0, r3
 800409a:	f7fd fb5d 	bl	8001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 800409e:	eeb0 7a40 	vmov.f32	s14, s0
 80040a2:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8004190 <_ZN9LineTrace4flipEv+0x248>
 80040a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ae:	db01      	blt.n	80040b4 <_ZN9LineTrace4flipEv+0x16c>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <_ZN9LineTrace4flipEv+0x16e>
 80040b4:	2300      	movs	r3, #0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d004      	beq.n	80040c4 <_ZN9LineTrace4flipEv+0x17c>
			side_sensor_->disableIgnore();
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	4618      	mov	r0, r3
 80040c0:	f001 fbcf 	bl	8005862 <_ZN10SideSensor13disableIgnoreEv>
		}


		if(stable_flag_ == true) led_.LR(-1, 1);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040ca:	3383      	adds	r3, #131	; 0x83
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <_ZN9LineTrace4flipEv+0x19c>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	330c      	adds	r3, #12
 80040d6:	2201      	movs	r2, #1
 80040d8:	f04f 31ff 	mov.w	r1, #4294967295
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fe f965 	bl	80023ac <_ZN3LED2LREaa>
 80040e2:	e007      	b.n	80040f4 <_ZN9LineTrace4flipEv+0x1ac>
		else led_.LR(-1, 0);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	330c      	adds	r3, #12
 80040e8:	2200      	movs	r2, #0
 80040ea:	f04f 31ff 	mov.w	r1, #4294967295
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe f95c 	bl	80023ac <_ZN3LED2LREaa>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe fcb1 	bl	8002a60 <_ZN10LineSensor13emergencyStopEv>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00d      	beq.n	8004120 <_ZN9LineTrace4flipEv+0x1d8>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	eddf 0a22 	vldr	s1, [pc, #136]	; 8004194 <_ZN9LineTrace4flipEv+0x24c>
 800410c:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8004194 <_ZN9LineTrace4flipEv+0x24c>
 8004110:	4618      	mov	r0, r3
 8004112:	f001 fda1 	bl	8005c58 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	4618      	mov	r0, r3
 800411c:	f7fd f932 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004126:	3398      	adds	r3, #152	; 0x98
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	3301      	adds	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004134:	3398      	adds	r3, #152	; 0x98
 8004136:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800413e:	3398      	adds	r3, #152	; 0x98
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	f242 720f 	movw	r2, #9999	; 0x270f
 8004146:	4293      	cmp	r3, r2
 8004148:	d906      	bls.n	8004158 <_ZN9LineTrace4flipEv+0x210>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004150:	3398      	adds	r3, #152	; 0x98
 8004152:	f242 7210 	movw	r2, #10000	; 0x2710
 8004156:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800415e:	3398      	adds	r3, #152	; 0x98
 8004160:	881b      	ldrh	r3, [r3, #0]
 8004162:	2b50      	cmp	r3, #80	; 0x50
 8004164:	d808      	bhi.n	8004178 <_ZN9LineTrace4flipEv+0x230>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	330c      	adds	r3, #12
 800416a:	2201      	movs	r2, #1
 800416c:	f04f 31ff 	mov.w	r1, #4294967295
 8004170:	4618      	mov	r0, r3
 8004172:	f7fe f91b 	bl	80023ac <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8004176:	e007      	b.n	8004188 <_ZN9LineTrace4flipEv+0x240>
		else led_.LR(-1, 0);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	330c      	adds	r3, #12
 800417c:	2200      	movs	r2, #0
 800417e:	f04f 31ff 	mov.w	r1, #4294967295
 8004182:	4618      	mov	r0, r3
 8004184:	f7fe f912 	bl	80023ac <_ZN3LED2LREaa>
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bd90      	pop	{r4, r7, pc}
 8004190:	43480000 	.word	0x43480000
 8004194:	00000000 	.word	0x00000000

08004198 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041aa:	3348      	adds	r3, #72	; 0x48
 80041ac:	887a      	ldrh	r2, [r7, #2]
 80041ae:	801a      	strh	r2, [r3, #0]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	i_reset_flag_ = true;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	velocity_ctrl_->start();
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	4618      	mov	r0, r3
 80041da:	f001 fd96 	bl	8005d0a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f001 fb20 	bl	8005828 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80041ee:	337c      	adds	r3, #124	; 0x7c
 80041f0:	2200      	movs	r2, #0
 80041f2:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80041fa:	337e      	adds	r3, #126	; 0x7e
 80041fc:	2200      	movs	r2, #0
 80041fe:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004206:	3380      	adds	r3, #128	; 0x80
 8004208:	2200      	movs	r2, #0
 800420a:	801a      	strh	r2, [r3, #0]
}
 800420c:	bf00      	nop
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 800421c:	2300      	movs	r3, #0
 800421e:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004220:	2300      	movs	r3, #0
 8004222:	737b      	strb	r3, [r7, #13]
	start();
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff ffc9 	bl	80041bc <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800422a:	7b7b      	ldrb	r3, [r7, #13]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d15b      	bne.n	80042e8 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8004230:	89fb      	ldrh	r3, [r7, #14]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <_ZN9LineTrace7runningEv+0x28>
 8004236:	2b0a      	cmp	r3, #10
 8004238:	d030      	beq.n	800429c <_ZN9LineTrace7runningEv+0x88>
 800423a:	e054      	b.n	80042e6 <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	4618      	mov	r0, r3
 8004242:	f001 fae5 	bl	8005810 <_ZN10SideSensor16getWhiteLineCntREv>
 8004246:	4603      	mov	r3, r0
 8004248:	2b01      	cmp	r3, #1
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d044      	beq.n	80042e0 <_ZN9LineTrace7runningEv+0xcc>
				loggerStart();
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fe fe9e 	bl	8002f98 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004262:	3348      	adds	r3, #72	; 0x48
 8004264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff fa17 	bl	80036a0 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	4618      	mov	r0, r3
 8004278:	f7fd fa7d 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	4618      	mov	r0, r3
 8004282:	f7fd fa5b 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	330c      	adds	r3, #12
 800428a:	f04f 32ff 	mov.w	r2, #4294967295
 800428e:	2100      	movs	r1, #0
 8004290:	4618      	mov	r0, r3
 8004292:	f7fe f88b 	bl	80023ac <_ZN3LED2LREaa>
				stage = 10;
 8004296:	230a      	movs	r3, #10
 8004298:	81fb      	strh	r3, [r7, #14]
			}

			break;
 800429a:	e021      	b.n	80042e0 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f001 fab5 	bl	8005810 <_ZN10SideSensor16getWhiteLineCntREv>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	bf0c      	ite	eq
 80042ac:	2301      	moveq	r3, #1
 80042ae:	2300      	movne	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d016      	beq.n	80042e4 <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fe fe89 	bl	8002fce <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff fa02 	bl	80036c6 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80042c2:	2064      	movs	r0, #100	; 0x64
 80042c4:	f005 faba 	bl	800983c <HAL_Delay>

				setTargetVelocity(0);
 80042c8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80042f8 <_ZN9LineTrace7runningEv+0xe4>
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff fd1e 	bl	8003d0e <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80042d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042d6:	f005 fab1 	bl	800983c <HAL_Delay>

				goal_flag = true;
 80042da:	2301      	movs	r3, #1
 80042dc:	737b      	strb	r3, [r7, #13]

			}

			break;
 80042de:	e001      	b.n	80042e4 <_ZN9LineTrace7runningEv+0xd0>
			break;
 80042e0:	bf00      	nop
 80042e2:	e7a2      	b.n	800422a <_ZN9LineTrace7runningEv+0x16>
			break;
 80042e4:	bf00      	nop
	while(goal_flag == false){
 80042e6:	e7a0      	b.n	800422a <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f807 	bl	80042fc <_ZN9LineTrace4stopEv>
}
 80042ee:	bf00      	nop
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	00000000 	.word	0x00000000

080042fc <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af02      	add	r7, sp, #8
 8004302:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	velocity_ctrl_->stop();
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4618      	mov	r0, r3
 8004312:	f001 fd0d 	bl	8005d30 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	330c      	adds	r3, #12
 800431a:	2201      	movs	r2, #1
 800431c:	f04f 31ff 	mov.w	r1, #4294967295
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe f843 	bl	80023ac <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800432c:	3348      	adds	r3, #72	; 0x48
 800432e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d107      	bne.n	8004346 <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69d8      	ldr	r0, [r3, #28]
 800433a:	4b23      	ldr	r3, [pc, #140]	; (80043c8 <_ZN9LineTrace4stopEv+0xcc>)
 800433c:	4a23      	ldr	r2, [pc, #140]	; (80043cc <_ZN9LineTrace4stopEv+0xd0>)
 800433e:	4924      	ldr	r1, [pc, #144]	; (80043d0 <_ZN9LineTrace4stopEv+0xd4>)
 8004340:	f000 fc62 	bl	8004c08 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8004344:	e006      	b.n	8004354 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69d8      	ldr	r0, [r3, #28]
 800434a:	4b22      	ldr	r3, [pc, #136]	; (80043d4 <_ZN9LineTrace4stopEv+0xd8>)
 800434c:	4a22      	ldr	r2, [pc, #136]	; (80043d8 <_ZN9LineTrace4stopEv+0xdc>)
 800434e:	4920      	ldr	r1, [pc, #128]	; (80043d0 <_ZN9LineTrace4stopEv+0xd4>)
 8004350:	f000 fc7d 	bl	8004c4e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800435a:	334c      	adds	r3, #76	; 0x4c
 800435c:	2200      	movs	r2, #0
 800435e:	9200      	str	r2, [sp, #0]
 8004360:	2264      	movs	r2, #100	; 0x64
 8004362:	491e      	ldr	r1, [pc, #120]	; (80043dc <_ZN9LineTrace4stopEv+0xe0>)
 8004364:	481a      	ldr	r0, [pc, #104]	; (80043d0 <_ZN9LineTrace4stopEv+0xd4>)
 8004366:	f7fd fa89 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004370:	33dc      	adds	r3, #220	; 0xdc
 8004372:	2200      	movs	r2, #0
 8004374:	9200      	str	r2, [sp, #0]
 8004376:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800437a:	4919      	ldr	r1, [pc, #100]	; (80043e0 <_ZN9LineTrace4stopEv+0xe4>)
 800437c:	4814      	ldr	r0, [pc, #80]	; (80043d0 <_ZN9LineTrace4stopEv+0xd4>)
 800437e:	f7fd fa7d 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f503 4345 	add.w	r3, r3, #50432	; 0xc500
 8004388:	33ac      	adds	r3, #172	; 0xac
 800438a:	2200      	movs	r2, #0
 800438c:	9200      	str	r2, [sp, #0]
 800438e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004392:	4914      	ldr	r1, [pc, #80]	; (80043e4 <_ZN9LineTrace4stopEv+0xe8>)
 8004394:	480e      	ldr	r0, [pc, #56]	; (80043d0 <_ZN9LineTrace4stopEv+0xd4>)
 8004396:	f7fd fa71 	bl	800187c <sd_write_array_float>

	led_.LR(-1, 0);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	330c      	adds	r3, #12
 800439e:	2200      	movs	r2, #0
 80043a0:	f04f 31ff 	mov.w	r1, #4294967295
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fe f801 	bl	80023ac <_ZN3LED2LREaa>

	logger_->resetIdx();
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fcdd 	bl	8004d6e <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fc8c 	bl	8004cd6 <_ZN6Logger10resetLogs2Ev>
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	08019804 	.word	0x08019804
 80043cc:	08019810 	.word	0x08019810
 80043d0:	08019820 	.word	0x08019820
 80043d4:	0801982c 	.word	0x0801982c
 80043d8:	08019838 	.word	0x08019838
 80043dc:	08019848 	.word	0x08019848
 80043e0:	08019858 	.word	0x08019858
 80043e4:	08019864 	.word	0x08019864

080043e8 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 80043e8:	b590      	push	{r4, r7, lr}
 80043ea:	b08b      	sub	sp, #44	; 0x2c
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fb95 	bl	8004b24 <_ZN6Logger23getDistanceArrayPointerEv>
 80043fa:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fb9d 	bl	8004b40 <_ZN6Logger20getThetaArrayPointerEv>
 8004406:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004408:	2300      	movs	r3, #0
 800440a:	837b      	strh	r3, [r7, #26]
 800440c:	8b7b      	ldrh	r3, [r7, #26]
 800440e:	f241 726f 	movw	r2, #5999	; 0x176f
 8004412:	4293      	cmp	r3, r2
 8004414:	d84a      	bhi.n	80044ac <_ZN9LineTrace20createVelocityTabeleEv+0xc4>
		temp_distance = p_distance[i];
 8004416:	8b7b      	ldrh	r3, [r7, #26]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4413      	add	r3, r2
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004422:	8b7b      	ldrh	r3, [r7, #26]
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4413      	add	r3, r2
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 800442e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004432:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443a:	d101      	bne.n	8004440 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 800443c:	4b4c      	ldr	r3, [pc, #304]	; (8004570 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 800443e:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8004440:	ed97 7a02 	vldr	s14, [r7, #8]
 8004444:	edd7 7a07 	vldr	s15, [r7, #28]
 8004448:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800444c:	eeb0 0a66 	vmov.f32	s0, s13
 8004450:	f7fe fb56 	bl	8002b00 <_ZSt3absf>
 8004454:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8004458:	edd7 7a05 	vldr	s15, [r7, #20]
 800445c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004574 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8004460:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004468:	db01      	blt.n	800446e <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 800446a:	4b43      	ldr	r3, [pc, #268]	; (8004578 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 800446c:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 800446e:	8b7c      	ldrh	r4, [r7, #26]
 8004470:	ed97 0a05 	vldr	s0, [r7, #20]
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7fe ff15 	bl	80032a4 <_ZN9LineTrace15radius2VelocityEf>
 800447a:	eef0 7a40 	vmov.f32	s15, s0
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	3304      	adds	r3, #4
 800448a:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 800448e:	8b7b      	ldrh	r3, [r7, #26]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	441a      	add	r2, r3
 8004496:	8b7b      	ldrh	r3, [r7, #26]
 8004498:	6812      	ldr	r2, [r2, #0]
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	3330      	adds	r3, #48	; 0x30
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80044a4:	8b7b      	ldrh	r3, [r7, #26]
 80044a6:	3301      	adds	r3, #1
 80044a8:	837b      	strh	r3, [r7, #26]
 80044aa:	e7af      	b.n	800440c <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80044b2:	3348      	adds	r3, #72	; 0x48
 80044b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d120      	bne.n	80044fe <_ZN9LineTrace20createVelocityTabeleEv+0x116>
		velocity_table_[0] = min_velocity_;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80044c8:	3304      	adds	r3, #4
 80044ca:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80044d2:	338c      	adds	r3, #140	; 0x8c
 80044d4:	edd3 7a00 	vldr	s15, [r3]
 80044d8:	6939      	ldr	r1, [r7, #16]
 80044da:	eeb0 0a67 	vmov.f32	s0, s15
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fe ff96 	bl	8003410 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80044ea:	3388      	adds	r3, #136	; 0x88
 80044ec:	edd3 7a00 	vldr	s15, [r3]
 80044f0:	6939      	ldr	r1, [r7, #16]
 80044f2:	eeb0 0a67 	vmov.f32	s0, s15
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff f82e 	bl	8003558 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80044fc:	e027      	b.n	800454e <_ZN9LineTrace20createVelocityTabeleEv+0x166>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004504:	3348      	adds	r3, #72	; 0x48
 8004506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d11f      	bne.n	800454e <_ZN9LineTrace20createVelocityTabeleEv+0x166>
		velocity_table_[0] = min_velocity2_;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800451a:	3304      	adds	r3, #4
 800451c:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004524:	3394      	adds	r3, #148	; 0x94
 8004526:	edd3 7a00 	vldr	s15, [r3]
 800452a:	6939      	ldr	r1, [r7, #16]
 800452c:	eeb0 0a67 	vmov.f32	s0, s15
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7fe ff6d 	bl	8003410 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800453c:	3390      	adds	r3, #144	; 0x90
 800453e:	edd3 7a00 	vldr	s15, [r3]
 8004542:	6939      	ldr	r1, [r7, #16]
 8004544:	eeb0 0a67 	vmov.f32	s0, s15
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff f805 	bl	8003558 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004554:	3304      	adds	r3, #4
 8004556:	2200      	movs	r2, #0
 8004558:	9200      	str	r2, [sp, #0]
 800455a:	f241 7270 	movw	r2, #6000	; 0x1770
 800455e:	4907      	ldr	r1, [pc, #28]	; (800457c <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 8004560:	4807      	ldr	r0, [pc, #28]	; (8004580 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8004562:	f7fd f98b 	bl	800187c <sd_write_array_float>

}
 8004566:	bf00      	nop
 8004568:	3724      	adds	r7, #36	; 0x24
 800456a:	46bd      	mov	sp, r7
 800456c:	bd90      	pop	{r4, r7, pc}
 800456e:	bf00      	nop
 8004570:	3727c5ac 	.word	0x3727c5ac
 8004574:	459c4000 	.word	0x459c4000
 8004578:	459c4000 	.word	0x459c4000
 800457c:	08019874 	.word	0x08019874
 8004580:	08019820 	.word	0x08019820

08004584 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b08b      	sub	sp, #44	; 0x2c
 8004588:	af02      	add	r7, sp, #8
 800458a:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	69d8      	ldr	r0, [r3, #28]
 8004590:	4b6b      	ldr	r3, [pc, #428]	; (8004740 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 8004592:	4a6c      	ldr	r2, [pc, #432]	; (8004744 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8004594:	496c      	ldr	r1, [pc, #432]	; (8004748 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004596:	f000 fb7f 	bl	8004c98 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80045a0:	334c      	adds	r3, #76	; 0x4c
 80045a2:	2264      	movs	r2, #100	; 0x64
 80045a4:	4969      	ldr	r1, [pc, #420]	; (800474c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 80045a6:	4868      	ldr	r0, [pc, #416]	; (8004748 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80045a8:	f7fd f9ce 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80045b2:	33dc      	adds	r3, #220	; 0xdc
 80045b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80045b8:	4965      	ldr	r1, [pc, #404]	; (8004750 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 80045ba:	4863      	ldr	r0, [pc, #396]	; (8004748 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80045bc:	f7fd f9c4 	bl	8001948 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 faad 	bl	8004b24 <_ZN6Logger23getDistanceArrayPointerEv>
 80045ca:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 fab5 	bl	8004b40 <_ZN6Logger20getThetaArrayPointerEv>
 80045d6:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80045d8:	2300      	movs	r3, #0
 80045da:	837b      	strh	r3, [r7, #26]
 80045dc:	8b7b      	ldrh	r3, [r7, #26]
 80045de:	f241 726f 	movw	r2, #5999	; 0x176f
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d84a      	bhi.n	800467c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xf8>

		temp_distance = p_distance[i];
 80045e6:	8b7b      	ldrh	r3, [r7, #26]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4413      	add	r3, r2
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80045f2:	8b7b      	ldrh	r3, [r7, #26]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4413      	add	r3, r2
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80045fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8004602:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800460a:	d101      	bne.n	8004610 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 800460c:	4b51      	ldr	r3, [pc, #324]	; (8004754 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 800460e:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8004610:	ed97 7a02 	vldr	s14, [r7, #8]
 8004614:	edd7 7a07 	vldr	s15, [r7, #28]
 8004618:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800461c:	eeb0 0a66 	vmov.f32	s0, s13
 8004620:	f7fe fa6e 	bl	8002b00 <_ZSt3absf>
 8004624:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004628:	edd7 7a05 	vldr	s15, [r7, #20]
 800462c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004758 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8004630:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004638:	db01      	blt.n	800463e <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 800463a:	4b48      	ldr	r3, [pc, #288]	; (800475c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 800463c:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 800463e:	8b7c      	ldrh	r4, [r7, #26]
 8004640:	ed97 0a05 	vldr	s0, [r7, #20]
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7fe fe2d 	bl	80032a4 <_ZN9LineTrace15radius2VelocityEf>
 800464a:	eef0 7a40 	vmov.f32	s15, s0
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	3304      	adds	r3, #4
 800465a:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 800465e:	8b7b      	ldrh	r3, [r7, #26]
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	441a      	add	r2, r3
 8004666:	8b7b      	ldrh	r3, [r7, #26]
 8004668:	6812      	ldr	r2, [r2, #0]
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	3330      	adds	r3, #48	; 0x30
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004674:	8b7b      	ldrh	r3, [r7, #26]
 8004676:	3301      	adds	r3, #1
 8004678:	837b      	strh	r3, [r7, #26]
 800467a:	e7af      	b.n	80045dc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004682:	3348      	adds	r3, #72	; 0x48
 8004684:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d120      	bne.n	80046ce <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14a>
		velocity_table_[0] = min_velocity_;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004698:	3304      	adds	r3, #4
 800469a:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80046a2:	338c      	adds	r3, #140	; 0x8c
 80046a4:	edd3 7a00 	vldr	s15, [r3]
 80046a8:	6939      	ldr	r1, [r7, #16]
 80046aa:	eeb0 0a67 	vmov.f32	s0, s15
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fe feae 	bl	8003410 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80046ba:	3388      	adds	r3, #136	; 0x88
 80046bc:	edd3 7a00 	vldr	s15, [r3]
 80046c0:	6939      	ldr	r1, [r7, #16]
 80046c2:	eeb0 0a67 	vmov.f32	s0, s15
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7fe ff46 	bl	8003558 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80046cc:	e027      	b.n	800471e <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19a>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80046d4:	3348      	adds	r3, #72	; 0x48
 80046d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d11f      	bne.n	800471e <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19a>
		velocity_table_[0] = min_velocity2_;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80046ea:	3304      	adds	r3, #4
 80046ec:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80046f4:	3394      	adds	r3, #148	; 0x94
 80046f6:	edd3 7a00 	vldr	s15, [r3]
 80046fa:	6939      	ldr	r1, [r7, #16]
 80046fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7fe fe85 	bl	8003410 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800470c:	3390      	adds	r3, #144	; 0x90
 800470e:	edd3 7a00 	vldr	s15, [r3]
 8004712:	6939      	ldr	r1, [r7, #16]
 8004714:	eeb0 0a67 	vmov.f32	s0, s15
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f7fe ff1d 	bl	8003558 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004724:	3304      	adds	r3, #4
 8004726:	2200      	movs	r2, #0
 8004728:	9200      	str	r2, [sp, #0]
 800472a:	f241 7270 	movw	r2, #6000	; 0x1770
 800472e:	490c      	ldr	r1, [pc, #48]	; (8004760 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 8004730:	4805      	ldr	r0, [pc, #20]	; (8004748 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004732:	f7fd f8a3 	bl	800187c <sd_write_array_float>

}
 8004736:	bf00      	nop
 8004738:	3724      	adds	r7, #36	; 0x24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd90      	pop	{r4, r7, pc}
 800473e:	bf00      	nop
 8004740:	08019804 	.word	0x08019804
 8004744:	08019810 	.word	0x08019810
 8004748:	08019820 	.word	0x08019820
 800474c:	08019848 	.word	0x08019848
 8004750:	08019858 	.word	0x08019858
 8004754:	3727c5ac 	.word	0x3727c5ac
 8004758:	459c4000 	.word	0x459c4000
 800475c:	459c4000 	.word	0x459c4000
 8004760:	08019874 	.word	0x08019874

08004764 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004772:	33c0      	adds	r3, #192	; 0xc0
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800477e:	33c2      	adds	r3, #194	; 0xc2
 8004780:	2200      	movs	r2, #0
 8004782:	801a      	strh	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800478a:	33c4      	adds	r3, #196	; 0xc4
 800478c:	2200      	movs	r2, #0
 800478e:	801a      	strh	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004796:	33c6      	adds	r3, #198	; 0xc6
 8004798:	2200      	movs	r2, #0
 800479a:	801a      	strh	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047a2:	33c8      	adds	r3, #200	; 0xc8
 80047a4:	2200      	movs	r2, #0
 80047a6:	801a      	strh	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047ae:	33ca      	adds	r3, #202	; 0xca
 80047b0:	2200      	movs	r2, #0
 80047b2:	801a      	strh	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4618      	mov	r0, r3
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80047cc:	2300      	movs	r3, #0
 80047ce:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 80047d0:	f7fd f9a6 	bl	8001b20 <sd_mount>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	bf0c      	ite	eq
 80047da:	2301      	moveq	r3, #1
 80047dc:	2300      	movne	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d016      	beq.n	8004812 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 80047e4:	f7fc fc5c 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80047e8:	2100      	movs	r1, #0
 80047ea:	2000      	movs	r0, #0
 80047ec:	f7fc fc68 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80047f0:	4815      	ldr	r0, [pc, #84]	; (8004848 <_ZN6Logger10sdCardInitEv+0x84>)
 80047f2:	f7fc fc8f 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80047f6:	2101      	movs	r1, #1
 80047f8:	2000      	movs	r0, #0
 80047fa:	f7fc fc61 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 80047fe:	4813      	ldr	r0, [pc, #76]	; (800484c <_ZN6Logger10sdCardInitEv+0x88>)
 8004800:	f7fc fc88 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004804:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004808:	f005 f818 	bl	800983c <HAL_Delay>

	  ret = true;
 800480c:	2301      	movs	r3, #1
 800480e:	73fb      	strb	r3, [r7, #15]
 8004810:	e015      	b.n	800483e <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8004812:	f7fc fc45 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004816:	2100      	movs	r1, #0
 8004818:	2000      	movs	r0, #0
 800481a:	f7fc fc51 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800481e:	480a      	ldr	r0, [pc, #40]	; (8004848 <_ZN6Logger10sdCardInitEv+0x84>)
 8004820:	f7fc fc78 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004824:	2101      	movs	r1, #1
 8004826:	2000      	movs	r0, #0
 8004828:	f7fc fc4a 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 800482c:	4808      	ldr	r0, [pc, #32]	; (8004850 <_ZN6Logger10sdCardInitEv+0x8c>)
 800482e:	f7fc fc71 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8004832:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004836:	f005 f801 	bl	800983c <HAL_Delay>

	  ret = false;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 800483e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	08019884 	.word	0x08019884
 800484c:	08019890 	.word	0x08019890
 8004850:	08019898 	.word	0x08019898

08004854 <_ZN6Logger8storeLogEf>:
void Logger::storeLog(float data)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004866:	33c0      	adds	r3, #192	; 0xc0
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d023      	beq.n	80048b6 <_ZN6Logger8storeLogEf+0x62>
		store_data_float_[log_index_tim_] = data;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004874:	33c2      	adds	r3, #194	; 0xc2
 8004876:	881b      	ldrh	r3, [r3, #0]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004888:	33c2      	adds	r3, #194	; 0xc2
 800488a:	881b      	ldrh	r3, [r3, #0]
 800488c:	3301      	adds	r3, #1
 800488e:	b29a      	uxth	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004896:	33c2      	adds	r3, #194	; 0xc2
 8004898:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048a0:	33c2      	adds	r3, #194	; 0xc2
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80048a8:	d305      	bcc.n	80048b6 <_ZN6Logger8storeLogEf+0x62>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048b0:	33c2      	adds	r3, #194	; 0xc2
 80048b2:	2200      	movs	r2, #0
 80048b4:	801a      	strh	r2, [r3, #0]
	}
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <_ZN6Logger9storeLog2Ef>:

void Logger::storeLog2(float data)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048d4:	33c0      	adds	r3, #192	; 0xc0
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d025      	beq.n	8004928 <_ZN6Logger9storeLog2Ef+0x66>
		store_data_float2_[log_index_tim2_] = data;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048e2:	33c4      	adds	r3, #196	; 0xc4
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048fa:	33c4      	adds	r3, #196	; 0xc4
 80048fc:	881b      	ldrh	r3, [r3, #0]
 80048fe:	3301      	adds	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004908:	33c4      	adds	r3, #196	; 0xc4
 800490a:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004912:	33c4      	adds	r3, #196	; 0xc4
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800491a:	d305      	bcc.n	8004928 <_ZN6Logger9storeLog2Ef+0x66>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004922:	33c4      	adds	r3, #196	; 0xc4
 8004924:	2200      	movs	r2, #0
 8004926:	801a      	strh	r2, [r3, #0]
	}
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <_ZN6Logger11storeLogIntEs>:

void Logger::storeLogInt(int16_t data)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004946:	33c0      	adds	r3, #192	; 0xc0
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d025      	beq.n	800499a <_ZN6Logger11storeLogIntEs+0x66>
		store_data_int_[log_index_tim_int_] = data;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004954:	33c6      	adds	r3, #198	; 0xc6
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f502 52fa 	add.w	r2, r2, #8000	; 0x1f40
 8004960:	8879      	ldrh	r1, [r7, #2]
 8004962:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		log_index_tim_int_++;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800496c:	33c6      	adds	r3, #198	; 0xc6
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	3301      	adds	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800497a:	33c6      	adds	r3, #198	; 0xc6
 800497c:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_int_ >= LOG_DATA_SIZE_TIM) log_index_tim_int_ = 0;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004984:	33c6      	adds	r3, #198	; 0xc6
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800498c:	d305      	bcc.n	800499a <_ZN6Logger11storeLogIntEs+0x66>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004994:	33c6      	adds	r3, #198	; 0xc6
 8004996:	2200      	movs	r2, #0
 8004998:	801a      	strh	r2, [r3, #0]
	}

}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <_ZN6Logger12storeLog2IntEs>:
void Logger::storeLog2Int(int16_t data)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	460b      	mov	r3, r1
 80049b0:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049b8:	33c0      	adds	r3, #192	; 0xc0
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d025      	beq.n	8004a0c <_ZN6Logger12storeLog2IntEs+0x66>
		store_data_int2_[log_index_tim2_int_] = data;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049c6:	33c8      	adds	r3, #200	; 0xc8
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80049d0:	3310      	adds	r3, #16
 80049d2:	8879      	ldrh	r1, [r7, #2]
 80049d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		log_index_tim2_int_++;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049de:	33c8      	adds	r3, #200	; 0xc8
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	3301      	adds	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049ec:	33c8      	adds	r3, #200	; 0xc8
 80049ee:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_int_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_int_ = 0;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049f6:	33c8      	adds	r3, #200	; 0xc8
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80049fe:	d305      	bcc.n	8004a0c <_ZN6Logger12storeLog2IntEs+0x66>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a06:	33c8      	adds	r3, #200	; 0xc8
 8004a08:	2200      	movs	r2, #0
 8004a0a:	801a      	strh	r2, [r3, #0]
	}

}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <_ZN6Logger21storeDistanceAndThetaEff>:

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a24:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a2e:	33ca      	adds	r3, #202	; 0xca
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004a38:	3310      	adds	r3, #16
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a48:	33ca      	adds	r3, #202	; 0xca
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004a52:	3320      	adds	r3, #32
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a62:	33ca      	adds	r3, #202	; 0xca
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	3301      	adds	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a70:	33ca      	adds	r3, #202	; 0xca
 8004a72:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a7a:	33ca      	adds	r3, #202	; 0xca
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	f241 726f 	movw	r2, #5999	; 0x176f
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d905      	bls.n	8004a92 <_ZN6Logger21storeDistanceAndThetaEff+0x7a>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a8c:	33ca      	adds	r3, #202	; 0xca
 8004a8e:	2200      	movs	r2, #0
 8004a90:	801a      	strh	r2, [r3, #0]
	//}
}
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	ed87 0a02 	vstr	s0, [r7, #8]
 8004aaa:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ab4:	33ca      	adds	r3, #202	; 0xca
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004abe:	3350      	adds	r3, #80	; 0x50
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ace:	33ca      	adds	r3, #202	; 0xca
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004ad8:	3340      	adds	r3, #64	; 0x40
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ae8:	33ca      	adds	r3, #202	; 0xca
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	3301      	adds	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004af6:	33ca      	adds	r3, #202	; 0xca
 8004af8:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b00:	33ca      	adds	r3, #202	; 0xca
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	f241 726f 	movw	r2, #5999	; 0x176f
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d905      	bls.n	8004b18 <_ZN6Logger22storeDistanceAndTheta2Eff+0x7a>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b12:	33ca      	adds	r3, #202	; 0xca
 8004b14:	2200      	movs	r2, #0
 8004b16:	801a      	strh	r2, [r3, #0]
	//}
}
 8004b18:	bf00      	nop
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b32:	3340      	adds	r3, #64	; 0x40
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004b4e:	3380      	adds	r3, #128	; 0x80
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	68b8      	ldr	r0, [r7, #8]
 8004b78:	f7fc fe80 	bl	800187c <sd_write_array_float>
}
 8004b7c:	bf00      	nop
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8004b96:	2300      	movs	r3, #0
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	68b8      	ldr	r0, [r7, #8]
 8004ba4:	f7fc fe6a 	bl	800187c <sd_write_array_float>
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <_ZN6Logger11saveLogsIntEPKcS1_>:

void Logger::saveLogsInt(const char *folder_name, const char *file_name)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_int_, OVER_WRITE); //write
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	68b8      	ldr	r0, [r7, #8]
 8004bd0:	f7fc ff46 	bl	8001a60 <sd_write_array_int>
}
 8004bd4:	bf00      	nop
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <_ZN6Logger12saveLogs2IntEPKcS1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8004bee:	3320      	adds	r3, #32
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	9200      	str	r2, [sp, #0]
 8004bf4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	68b8      	ldr	r0, [r7, #8]
 8004bfc:	f7fc ff30 	bl	8001a60 <sd_write_array_int>
}
 8004c00:	bf00      	nop
 8004c02:	3710      	adds	r7, #16
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004c1c:	3340      	adds	r3, #64	; 0x40
 8004c1e:	2200      	movs	r2, #0
 8004c20:	9200      	str	r2, [sp, #0]
 8004c22:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c26:	6879      	ldr	r1, [r7, #4]
 8004c28:	68b8      	ldr	r0, [r7, #8]
 8004c2a:	f7fc fe27 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004c34:	3380      	adds	r3, #128	; 0x80
 8004c36:	2200      	movs	r2, #0
 8004c38:	9200      	str	r2, [sp, #0]
 8004c3a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c3e:	6839      	ldr	r1, [r7, #0]
 8004c40:	68b8      	ldr	r0, [r7, #8]
 8004c42:	f7fc fe1b 	bl	800187c <sd_write_array_float>
}
 8004c46:	bf00      	nop
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b086      	sub	sp, #24
 8004c52:	af02      	add	r7, sp, #8
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	607a      	str	r2, [r7, #4]
 8004c5a:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004c62:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c66:	2200      	movs	r2, #0
 8004c68:	9200      	str	r2, [sp, #0]
 8004c6a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c6e:	6879      	ldr	r1, [r7, #4]
 8004c70:	68b8      	ldr	r0, [r7, #8]
 8004c72:	f7fc fe03 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004c7c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c80:	2200      	movs	r2, #0
 8004c82:	9200      	str	r2, [sp, #0]
 8004c84:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c88:	6839      	ldr	r1, [r7, #0]
 8004c8a:	68b8      	ldr	r0, [r7, #8]
 8004c8c:	f7fc fdf6 	bl	800187c <sd_write_array_float>
}
 8004c90:	bf00      	nop
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
 8004ca4:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004cac:	3340      	adds	r3, #64	; 0x40
 8004cae:	f241 7270 	movw	r2, #6000	; 0x1770
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	68b8      	ldr	r0, [r7, #8]
 8004cb6:	f7fc fe47 	bl	8001948 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004cc0:	3380      	adds	r3, #128	; 0x80
 8004cc2:	f241 7270 	movw	r2, #6000	; 0x1770
 8004cc6:	6839      	ldr	r1, [r7, #0]
 8004cc8:	68b8      	ldr	r0, [r7, #8]
 8004cca:	f7fc fe3d 	bl	8001948 <sd_read_array_float>
}
 8004cce:	bf00      	nop
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004cd6:	b480      	push	{r7}
 8004cd8:	b08b      	sub	sp, #44	; 0x2c
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004ce4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004ce8:	61fb      	str	r3, [r7, #28]
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004cf4:	3340      	adds	r3, #64	; 0x40
 8004cf6:	61bb      	str	r3, [r7, #24]
 8004cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d009      	beq.n	8004d14 <_ZN6Logger10resetLogs2Ev+0x3e>
 8004d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d02:	617b      	str	r3, [r7, #20]
		log = 0;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0e:	3304      	adds	r3, #4
 8004d10:	627b      	str	r3, [r7, #36]	; 0x24
 8004d12:	e7f1      	b.n	8004cf8 <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004d1a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004d1e:	613b      	str	r3, [r7, #16]
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	623b      	str	r3, [r7, #32]
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004d2a:	3340      	adds	r3, #64	; 0x40
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	6a3a      	ldr	r2, [r7, #32]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d009      	beq.n	8004d4a <_ZN6Logger10resetLogs2Ev+0x74>
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	3304      	adds	r3, #4
 8004d46:	623b      	str	r3, [r7, #32]
 8004d48:	e7f1      	b.n	8004d2e <_ZN6Logger10resetLogs2Ev+0x58>
	}

	log_index_tim_ = 0;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d50:	33c2      	adds	r3, #194	; 0xc2
 8004d52:	2200      	movs	r2, #0
 8004d54:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d5c:	33ca      	adds	r3, #202	; 0xca
 8004d5e:	2200      	movs	r2, #0
 8004d60:	801a      	strh	r2, [r3, #0]
}
 8004d62:	bf00      	nop
 8004d64:	372c      	adds	r7, #44	; 0x2c
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d7c:	33c2      	adds	r3, #194	; 0xc2
 8004d7e:	2200      	movs	r2, #0
 8004d80:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d88:	33ca      	adds	r3, #202	; 0xca
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	801a      	strh	r2, [r3, #0]
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <_ZN6Logger5startEv>:

void Logger::start()
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004da8:	33c0      	adds	r3, #192	; 0xc0
 8004daa:	2201      	movs	r2, #1
 8004dac:	701a      	strb	r2, [r3, #0]
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004dc8:	33c0      	adds	r3, #192	; 0xc0
 8004dca:	2200      	movs	r2, #0
 8004dcc:	701a      	strb	r2, [r3, #0]
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004dda:	b480      	push	{r7}
 8004ddc:	b083      	sub	sp, #12
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	801a      	strh	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	805a      	strh	r2, [r3, #2]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <_ZN5Motor4initEv>:

void Motor::init()
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004e04:	2108      	movs	r1, #8
 8004e06:	4805      	ldr	r0, [pc, #20]	; (8004e1c <_ZN5Motor4initEv+0x20>)
 8004e08:	f009 fec8 	bl	800eb9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004e0c:	210c      	movs	r1, #12
 8004e0e:	4803      	ldr	r0, [pc, #12]	; (8004e1c <_ZN5Motor4initEv+0x20>)
 8004e10:	f009 fec4 	bl	800eb9c <HAL_TIM_PWM_Start>

}
 8004e14:	bf00      	nop
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	20044724 	.word	0x20044724

08004e20 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	da0d      	bge.n	8004e4e <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004e32:	2200      	movs	r2, #0
 8004e34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e38:	481f      	ldr	r0, [pc, #124]	; (8004eb8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e3a:	f005 ff95 	bl	800ad68 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	425b      	negs	r3, r3
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	81fb      	strh	r3, [r7, #14]
 8004e4c:	e00a      	b.n	8004e64 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e54:	4818      	ldr	r0, [pc, #96]	; (8004eb8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e56:	f005 ff87 	bl	800ad68 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	da0d      	bge.n	8004e8a <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e74:	4810      	ldr	r0, [pc, #64]	; (8004eb8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e76:	f005 ff77 	bl	800ad68 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	425b      	negs	r3, r3
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	81bb      	strh	r3, [r7, #12]
 8004e88:	e00a      	b.n	8004ea0 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e90:	4809      	ldr	r0, [pc, #36]	; (8004eb8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e92:	f005 ff69 	bl	800ad68 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004ea0:	89fa      	ldrh	r2, [r7, #14]
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <_ZN5Motor9motorCtrlEv+0x9c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004ea8:	89ba      	ldrh	r2, [r7, #12]
 8004eaa:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <_ZN5Motor9motorCtrlEv+0x9c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004eb0:	bf00      	nop
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40020c00 	.word	0x40020c00
 8004ebc:	20044724 	.word	0x20044724

08004ec0 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004ec0:	b590      	push	{r4, r7, lr}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6178      	str	r0, [r7, #20]
 8004ec8:	ed87 0b02 	vstr	d0, [r7, #8]
 8004ecc:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	4b30      	ldr	r3, [pc, #192]	; (8004f98 <_ZN5Motor8setRatioEdd+0xd8>)
 8004ed6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004eda:	f7fb fe35 	bl	8000b48 <__aeabi_dcmpgt>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <_ZN5Motor8setRatioEdd+0x30>
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	4c2b      	ldr	r4, [pc, #172]	; (8004f98 <_ZN5Motor8setRatioEdd+0xd8>)
 8004eea:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004eee:	e00e      	b.n	8004f0e <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	4b29      	ldr	r3, [pc, #164]	; (8004f9c <_ZN5Motor8setRatioEdd+0xdc>)
 8004ef6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004efa:	f7fb fe07 	bl	8000b0c <__aeabi_dcmplt>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d004      	beq.n	8004f0e <_ZN5Motor8setRatioEdd+0x4e>
 8004f04:	f04f 0300 	mov.w	r3, #0
 8004f08:	4c24      	ldr	r4, [pc, #144]	; (8004f9c <_ZN5Motor8setRatioEdd+0xdc>)
 8004f0a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	4b21      	ldr	r3, [pc, #132]	; (8004f98 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f18:	f7fb fe16 	bl	8000b48 <__aeabi_dcmpgt>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d005      	beq.n	8004f2e <_ZN5Motor8setRatioEdd+0x6e>
 8004f22:	f04f 0300 	mov.w	r3, #0
 8004f26:	4c1c      	ldr	r4, [pc, #112]	; (8004f98 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f28:	e9c7 3400 	strd	r3, r4, [r7]
 8004f2c:	e00e      	b.n	8004f4c <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	4b1a      	ldr	r3, [pc, #104]	; (8004f9c <_ZN5Motor8setRatioEdd+0xdc>)
 8004f34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f38:	f7fb fde8 	bl	8000b0c <__aeabi_dcmplt>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d004      	beq.n	8004f4c <_ZN5Motor8setRatioEdd+0x8c>
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	4c15      	ldr	r4, [pc, #84]	; (8004f9c <_ZN5Motor8setRatioEdd+0xdc>)
 8004f48:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	4b13      	ldr	r3, [pc, #76]	; (8004fa0 <_ZN5Motor8setRatioEdd+0xe0>)
 8004f52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f56:	f7fb fb67 	bl	8000628 <__aeabi_dmul>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	460c      	mov	r4, r1
 8004f5e:	4618      	mov	r0, r3
 8004f60:	4621      	mov	r1, r4
 8004f62:	f7fb fe11 	bl	8000b88 <__aeabi_d2iz>
 8004f66:	4603      	mov	r3, r0
 8004f68:	b21a      	sxth	r2, r3
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <_ZN5Motor8setRatioEdd+0xe0>)
 8004f74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f78:	f7fb fb56 	bl	8000628 <__aeabi_dmul>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	460c      	mov	r4, r1
 8004f80:	4618      	mov	r0, r3
 8004f82:	4621      	mov	r1, r4
 8004f84:	f7fb fe00 	bl	8000b88 <__aeabi_d2iz>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	b21a      	sxth	r2, r3
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	805a      	strh	r2, [r3, #2]

}
 8004f90:	bf00      	nop
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd90      	pop	{r4, r7, pc}
 8004f98:	3ff00000 	.word	0x3ff00000
 8004f9c:	bff00000 	.word	0xbff00000
 8004fa0:	409c2000 	.word	0x409c2000

08004fa4 <_ZN5Motor20getLeftCounterPeriodEv>:

int16_t Motor::getLeftCounterPeriod()
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
	return temp_left_counter_period_;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <_ZN5Motor21getRightCounterPeriodEv>:

int16_t Motor::getRightCounterPeriod()
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
	return temp_right_counter_period_;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004fd8:	b490      	push	{r4, r7}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	f04f 0400 	mov.w	r4, #0
 8004ff0:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	f04f 0400 	mov.w	r4, #0
 8004ffe:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	f04f 0400 	mov.w	r4, #0
 800500c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8005010:	68fa      	ldr	r2, [r7, #12]
 8005012:	f04f 0300 	mov.w	r3, #0
 8005016:	f04f 0400 	mov.w	r4, #0
 800501a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	f04f 0400 	mov.w	r4, #0
 8005028:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	609a      	str	r2, [r3, #8]
}
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bc90      	pop	{r4, r7}
 8005048:	4770      	bx	lr
 800504a:	0000      	movs	r0, r0
 800504c:	0000      	movs	r0, r0
	...

08005050 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8005050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005054:	b086      	sub	sp, #24
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	4618      	mov	r0, r3
 8005060:	f7fc ff26 	bl	8001eb0 <_ZN3IMU8getOmegaEv>
 8005064:	ee10 3a10 	vmov	r3, s0
 8005068:	4618      	mov	r0, r3
 800506a:	f7fb fa85 	bl	8000578 <__aeabi_f2d>
 800506e:	4603      	mov	r3, r0
 8005070:	460c      	mov	r4, r1
 8005072:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f7fc fb14 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8005080:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8005084:	a376      	add	r3, pc, #472	; (adr r3, 8005260 <_ZN8Odometry12calcPotitionEv+0x210>)
 8005086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800508e:	f7fb facb 	bl	8000628 <__aeabi_dmul>
 8005092:	4603      	mov	r3, r0
 8005094:	460c      	mov	r4, r1
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f7fb fa68 	bl	8000578 <__aeabi_f2d>
 80050a8:	4682      	mov	sl, r0
 80050aa:	468b      	mov	fp, r1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050c0:	f7fb fbdc 	bl	800087c <__aeabi_ddiv>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	4640      	mov	r0, r8
 80050ca:	4649      	mov	r1, r9
 80050cc:	f7fb f8f6 	bl	80002bc <__adddf3>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	ec43 2b17 	vmov	d7, r2, r3
 80050d8:	eeb0 0a47 	vmov.f32	s0, s14
 80050dc:	eef0 0a67 	vmov.f32	s1, s15
 80050e0:	f00f f8a2 	bl	8014228 <cos>
 80050e4:	ec53 2b10 	vmov	r2, r3, d0
 80050e8:	4650      	mov	r0, sl
 80050ea:	4659      	mov	r1, fp
 80050ec:	f7fb fa9c 	bl	8000628 <__aeabi_dmul>
 80050f0:	4602      	mov	r2, r0
 80050f2:	460b      	mov	r3, r1
 80050f4:	4620      	mov	r0, r4
 80050f6:	4629      	mov	r1, r5
 80050f8:	f7fb f8e0 	bl	80002bc <__adddf3>
 80050fc:	4603      	mov	r3, r0
 80050fe:	460c      	mov	r4, r1
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f7fb fa33 	bl	8000578 <__aeabi_f2d>
 8005112:	4682      	mov	sl, r0
 8005114:	468b      	mov	fp, r1
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800512a:	f7fb fba7 	bl	800087c <__aeabi_ddiv>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	4640      	mov	r0, r8
 8005134:	4649      	mov	r1, r9
 8005136:	f7fb f8c1 	bl	80002bc <__adddf3>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	ec43 2b17 	vmov	d7, r2, r3
 8005142:	eeb0 0a47 	vmov.f32	s0, s14
 8005146:	eef0 0a67 	vmov.f32	s1, s15
 800514a:	f00f f8b1 	bl	80142b0 <sin>
 800514e:	ec53 2b10 	vmov	r2, r3, d0
 8005152:	4650      	mov	r0, sl
 8005154:	4659      	mov	r1, fp
 8005156:	f7fb fa67 	bl	8000628 <__aeabi_dmul>
 800515a:	4602      	mov	r2, r0
 800515c:	460b      	mov	r3, r1
 800515e:	4620      	mov	r0, r4
 8005160:	4629      	mov	r1, r5
 8005162:	f7fb f8ab 	bl	80002bc <__adddf3>
 8005166:	4603      	mov	r3, r0
 8005168:	460c      	mov	r4, r1
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800517c:	461a      	mov	r2, r3
 800517e:	4623      	mov	r3, r4
 8005180:	f7fb f89c 	bl	80002bc <__adddf3>
 8005184:	4603      	mov	r3, r0
 8005186:	460c      	mov	r4, r1
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	ed93 7b08 	vldr	d7, [r3, #32]
 800519a:	eeb0 0a47 	vmov.f32	s0, s14
 800519e:	eef0 0a67 	vmov.f32	s1, s15
 80051a2:	f00f f841 	bl	8014228 <cos>
 80051a6:	ec51 0b10 	vmov	r0, r1, d0
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	4b28      	ldr	r3, [pc, #160]	; (8005250 <_ZN8Odometry12calcPotitionEv+0x200>)
 80051b0:	f7fb fa3a 	bl	8000628 <__aeabi_dmul>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4620      	mov	r0, r4
 80051ba:	4629      	mov	r1, r5
 80051bc:	f7fb f87e 	bl	80002bc <__adddf3>
 80051c0:	4603      	mov	r3, r0
 80051c2:	460c      	mov	r4, r1
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	ed93 7b08 	vldr	d7, [r3, #32]
 80051d6:	eeb0 0a47 	vmov.f32	s0, s14
 80051da:	eef0 0a67 	vmov.f32	s1, s15
 80051de:	f00f f867 	bl	80142b0 <sin>
 80051e2:	ec51 0b10 	vmov	r0, r1, d0
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	4b19      	ldr	r3, [pc, #100]	; (8005250 <_ZN8Odometry12calcPotitionEv+0x200>)
 80051ec:	f7fb fa1c 	bl	8000628 <__aeabi_dmul>
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4620      	mov	r0, r4
 80051f6:	4629      	mov	r1, r5
 80051f8:	f7fb f860 	bl	80002bc <__adddf3>
 80051fc:	4603      	mov	r3, r0
 80051fe:	460c      	mov	r4, r1
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800520c:	4618      	mov	r0, r3
 800520e:	4621      	mov	r1, r4
 8005210:	f7fb fd02 	bl	8000c18 <__aeabi_d2f>
 8005214:	4602      	mov	r2, r0
 8005216:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <_ZN8Odometry12calcPotitionEv+0x204>)
 8005218:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005220:	4618      	mov	r0, r3
 8005222:	4621      	mov	r1, r4
 8005224:	f7fb fcf8 	bl	8000c18 <__aeabi_d2f>
 8005228:	4602      	mov	r2, r0
 800522a:	4b0b      	ldr	r3, [pc, #44]	; (8005258 <_ZN8Odometry12calcPotitionEv+0x208>)
 800522c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005234:	4618      	mov	r0, r3
 8005236:	4621      	mov	r1, r4
 8005238:	f7fb fcee 	bl	8000c18 <__aeabi_d2f>
 800523c:	4602      	mov	r2, r0
 800523e:	4b07      	ldr	r3, [pc, #28]	; (800525c <_ZN8Odometry12calcPotitionEv+0x20c>)
 8005240:	601a      	str	r2, [r3, #0]
}
 8005242:	bf00      	nop
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524c:	f3af 8000 	nop.w
 8005250:	405b8000 	.word	0x405b8000
 8005254:	200002c4 	.word	0x200002c4
 8005258:	200002c8 	.word	0x200002c8
 800525c:	200002cc 	.word	0x200002cc
 8005260:	d2f1a9fc 	.word	0xd2f1a9fc
 8005264:	3f50624d 	.word	0x3f50624d

08005268 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7ff feed 	bl	8005050 <_ZN8Odometry12calcPotitionEv>
}
 8005276:	bf00      	nop
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 800527e:	b490      	push	{r4, r7}
 8005280:	b082      	sub	sp, #8
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
	return theta_;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800528c:	ec44 3b17 	vmov	d7, r3, r4
}
 8005290:	eeb0 0a47 	vmov.f32	s0, s14
 8005294:	eef0 0a67 	vmov.f32	s1, s15
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bc90      	pop	{r4, r7}
 800529e:	4770      	bx	lr

080052a0 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80052a0:	b490      	push	{r4, r7}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	f04f 0400 	mov.w	r4, #0
 80052b2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	f04f 0400 	mov.w	r4, #0
 80052c0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	f04f 0300 	mov.w	r3, #0
 80052ca:	f04f 0400 	mov.w	r4, #0
 80052ce:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80052d2:	bf00      	nop
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc90      	pop	{r4, r7}
 80052da:	4770      	bx	lr

080052dc <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 80052dc:	b490      	push	{r4, r7}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	701a      	strb	r2, [r3, #0]
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	f04f 0400 	mov.w	r4, #0
 80052f4:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	f04f 0300 	mov.w	r3, #0
 80052fe:	f04f 0400 	mov.w	r4, #0
 8005302:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	f04f 0400 	mov.w	r4, #0
 8005310:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800531a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800531e:	2200      	movs	r2, #0
 8005320:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8005322:	4a29      	ldr	r2, [pc, #164]	; (80053c8 <_ZN13PathFollowingC1Ev+0xec>)
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	f04f 0400 	mov.w	r4, #0
 800532c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005330:	4a25      	ldr	r2, [pc, #148]	; (80053c8 <_ZN13PathFollowingC1Ev+0xec>)
 8005332:	f04f 0300 	mov.w	r3, #0
 8005336:	f04f 0400 	mov.w	r4, #0
 800533a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 800533e:	4a22      	ldr	r2, [pc, #136]	; (80053c8 <_ZN13PathFollowingC1Ev+0xec>)
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	f04f 0400 	mov.w	r4, #0
 8005348:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 800534c:	4a1f      	ldr	r2, [pc, #124]	; (80053cc <_ZN13PathFollowingC1Ev+0xf0>)
 800534e:	f04f 0300 	mov.w	r3, #0
 8005352:	f04f 0400 	mov.w	r4, #0
 8005356:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 800535a:	4a1c      	ldr	r2, [pc, #112]	; (80053cc <_ZN13PathFollowingC1Ev+0xf0>)
 800535c:	f04f 0300 	mov.w	r3, #0
 8005360:	f04f 0400 	mov.w	r4, #0
 8005364:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8005368:	4a18      	ldr	r2, [pc, #96]	; (80053cc <_ZN13PathFollowingC1Ev+0xf0>)
 800536a:	f04f 0300 	mov.w	r3, #0
 800536e:	f04f 0400 	mov.w	r4, #0
 8005372:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8005376:	4a15      	ldr	r2, [pc, #84]	; (80053cc <_ZN13PathFollowingC1Ev+0xf0>)
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	f04f 0400 	mov.w	r4, #0
 8005380:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8005384:	4a11      	ldr	r2, [pc, #68]	; (80053cc <_ZN13PathFollowingC1Ev+0xf0>)
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	f04f 0400 	mov.w	r4, #0
 800538e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8005392:	4a0e      	ldr	r2, [pc, #56]	; (80053cc <_ZN13PathFollowingC1Ev+0xf0>)
 8005394:	f04f 0300 	mov.w	r3, #0
 8005398:	f04f 0400 	mov.w	r4, #0
 800539c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80053a0:	4a0b      	ldr	r2, [pc, #44]	; (80053d0 <_ZN13PathFollowingC1Ev+0xf4>)
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	f04f 0400 	mov.w	r4, #0
 80053aa:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80053ae:	4a08      	ldr	r2, [pc, #32]	; (80053d0 <_ZN13PathFollowingC1Ev+0xf4>)
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	f04f 0400 	mov.w	r4, #0
 80053b8:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4618      	mov	r0, r3
 80053c0:	3708      	adds	r7, #8
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bc90      	pop	{r4, r7}
 80053c6:	4770      	bx	lr
 80053c8:	20044c28 	.word	0x20044c28
 80053cc:	20044bb8 	.word	0x20044bb8
 80053d0:	20044c18 	.word	0x20044c18

080053d4 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80053dc:	f001 fc4e 	bl	8006c7c <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 80053e0:	f107 0318 	add.w	r3, r7, #24
 80053e4:	2201      	movs	r2, #1
 80053e6:	4915      	ldr	r1, [pc, #84]	; (800543c <_ZN13PathFollowing4initEv+0x68>)
 80053e8:	4815      	ldr	r0, [pc, #84]	; (8005440 <_ZN13PathFollowing4initEv+0x6c>)
 80053ea:	f7fc faf3 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 80053ee:	f107 0310 	add.w	r3, r7, #16
 80053f2:	2201      	movs	r2, #1
 80053f4:	4913      	ldr	r1, [pc, #76]	; (8005444 <_ZN13PathFollowing4initEv+0x70>)
 80053f6:	4812      	ldr	r0, [pc, #72]	; (8005440 <_ZN13PathFollowing4initEv+0x6c>)
 80053f8:	f7fc faec 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 80053fc:	f107 0308 	add.w	r3, r7, #8
 8005400:	2201      	movs	r2, #1
 8005402:	4911      	ldr	r1, [pc, #68]	; (8005448 <_ZN13PathFollowing4initEv+0x74>)
 8005404:	480e      	ldr	r0, [pc, #56]	; (8005440 <_ZN13PathFollowing4initEv+0x6c>)
 8005406:	f7fc fae5 	bl	80019d4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 800540a:	ed97 7b06 	vldr	d7, [r7, #24]
 800540e:	ed97 6b04 	vldr	d6, [r7, #16]
 8005412:	ed97 5b02 	vldr	d5, [r7, #8]
 8005416:	eeb0 2a45 	vmov.f32	s4, s10
 800541a:	eef0 2a65 	vmov.f32	s5, s11
 800541e:	eeb0 1a46 	vmov.f32	s2, s12
 8005422:	eef0 1a66 	vmov.f32	s3, s13
 8005426:	eeb0 0a47 	vmov.f32	s0, s14
 800542a:	eef0 0a67 	vmov.f32	s1, s15
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f80c 	bl	800544c <_ZN13PathFollowing7setGainEddd>
}
 8005434:	bf00      	nop
 8005436:	3720      	adds	r7, #32
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	080198a0 	.word	0x080198a0
 8005440:	080198a8 	.word	0x080198a8
 8005444:	080198b0 	.word	0x080198b0
 8005448:	080198b8 	.word	0x080198b8

0800544c <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 800544c:	b490      	push	{r4, r7}
 800544e:	b088      	sub	sp, #32
 8005450:	af00      	add	r7, sp, #0
 8005452:	61f8      	str	r0, [r7, #28]
 8005454:	ed87 0b04 	vstr	d0, [r7, #16]
 8005458:	ed87 1b02 	vstr	d1, [r7, #8]
 800545c:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005460:	4a09      	ldr	r2, [pc, #36]	; (8005488 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005462:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005466:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 800546a:	4a07      	ldr	r2, [pc, #28]	; (8005488 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800546c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005470:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8005474:	4a04      	ldr	r2, [pc, #16]	; (8005488 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005476:	e9d7 3400 	ldrd	r3, r4, [r7]
 800547a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800547e:	bf00      	nop
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bc90      	pop	{r4, r7}
 8005486:	4770      	bx	lr
 8005488:	20044c28 	.word	0x20044c28

0800548c <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8005494:	2088      	movs	r0, #136	; 0x88
 8005496:	f7fc fe4e 	bl	8002136 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 800549a:	2080      	movs	r0, #128	; 0x80
 800549c:	f7fc fe4b 	bl	8002136 <INA260_init>
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80054a8:	b590      	push	{r4, r7, lr}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80054b0:	2188      	movs	r1, #136	; 0x88
 80054b2:	2002      	movs	r0, #2
 80054b4:	f7fc fddc 	bl	8002070 <INA260_read>
 80054b8:	4603      	mov	r3, r0
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fb f84a 	bl	8000554 <__aeabi_i2d>
 80054c0:	a30c      	add	r3, pc, #48	; (adr r3, 80054f4 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	f7fb f8af 	bl	8000628 <__aeabi_dmul>
 80054ca:	4603      	mov	r3, r0
 80054cc:	460c      	mov	r4, r1
 80054ce:	4618      	mov	r0, r3
 80054d0:	4621      	mov	r1, r4
 80054d2:	f7fb fba1 	bl	8000c18 <__aeabi_d2f>
 80054d6:	4602      	mov	r2, r0
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	4a03      	ldr	r2, [pc, #12]	; (80054f0 <_ZN11PowerSensor12updateValuesEv+0x48>)
 80054e2:	6013      	str	r3, [r2, #0]
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd90      	pop	{r4, r7, pc}
 80054ec:	f3af 8000 	nop.w
 80054f0:	200002d0 	.word	0x200002d0
 80054f4:	47ae147b 	.word	0x47ae147b
 80054f8:	3f547ae1 	.word	0x3f547ae1

080054fc <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 80054fc:	b480      	push	{r7}
 80054fe:	b083      	sub	sp, #12
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	ee07 3a90 	vmov	s15, r3

}
 800550c:	eeb0 0a67 	vmov.f32	s0, s15
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
	...

0800551c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005528:	2102      	movs	r1, #2
 800552a:	4822      	ldr	r0, [pc, #136]	; (80055b4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800552c:	f005 fc04 	bl	800ad38 <HAL_GPIO_ReadPin>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	bf0c      	ite	eq
 8005536:	2301      	moveq	r3, #1
 8005538:	2300      	movne	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005540:	89fb      	ldrh	r3, [r7, #14]
 8005542:	f043 0301 	orr.w	r3, r3, #1
 8005546:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005548:	2108      	movs	r1, #8
 800554a:	481a      	ldr	r0, [pc, #104]	; (80055b4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800554c:	f005 fbf4 	bl	800ad38 <HAL_GPIO_ReadPin>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	bf0c      	ite	eq
 8005556:	2301      	moveq	r3, #1
 8005558:	2300      	movne	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005560:	89fb      	ldrh	r3, [r7, #14]
 8005562:	f043 0302 	orr.w	r3, r3, #2
 8005566:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005568:	2110      	movs	r1, #16
 800556a:	4812      	ldr	r0, [pc, #72]	; (80055b4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800556c:	f005 fbe4 	bl	800ad38 <HAL_GPIO_ReadPin>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	bf0c      	ite	eq
 8005576:	2301      	moveq	r3, #1
 8005578:	2300      	movne	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005580:	89fb      	ldrh	r3, [r7, #14]
 8005582:	f043 0304 	orr.w	r3, r3, #4
 8005586:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005588:	2180      	movs	r1, #128	; 0x80
 800558a:	480a      	ldr	r0, [pc, #40]	; (80055b4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800558c:	f005 fbd4 	bl	800ad38 <HAL_GPIO_ReadPin>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	bf0c      	ite	eq
 8005596:	2301      	moveq	r3, #1
 8005598:	2300      	movne	r3, #0
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <_ZN12RotarySwitch8getValueEv+0x8c>
 80055a0:	89fb      	ldrh	r3, [r7, #14]
 80055a2:	f043 0308 	orr.w	r3, r3, #8
 80055a6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80055a8:	89fb      	ldrh	r3, [r7, #14]

}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	40020c00 	.word	0x40020c00

080055b8 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	801a      	strh	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	709a      	strb	r2, [r3, #2]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	70da      	strb	r2, [r3, #3]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	809a      	strh	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	80da      	strh	r2, [r3, #6]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	721a      	strb	r2, [r3, #8]
{

}
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4618      	mov	r0, r3
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
	...

080055f4 <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	7a1b      	ldrb	r3, [r3, #8]
 8005600:	f083 0301 	eor.w	r3, r3, #1
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 80db 	beq.w	80057c2 <_ZN10SideSensor12updateStatusEv+0x1ce>

		if(white_flag1 == false){
 800560c:	4b6f      	ldr	r3, [pc, #444]	; (80057cc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	f083 0301 	eor.w	r3, r3, #1
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d02a      	beq.n	8005670 <_ZN10SideSensor12updateStatusEv+0x7c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 800561a:	2104      	movs	r1, #4
 800561c:	486c      	ldr	r0, [pc, #432]	; (80057d0 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 800561e:	f005 fb8b 	bl	800ad38 <HAL_GPIO_ReadPin>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	bf0c      	ite	eq
 8005628:	2301      	moveq	r3, #1
 800562a:	2300      	movne	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d006      	beq.n	8005640 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8005632:	4b68      	ldr	r3, [pc, #416]	; (80057d4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	3301      	adds	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	4b66      	ldr	r3, [pc, #408]	; (80057d4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 800563c:	801a      	strh	r2, [r3, #0]
 800563e:	e002      	b.n	8005646 <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8005640:	4b64      	ldr	r3, [pc, #400]	; (80057d4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005642:	2200      	movs	r2, #0
 8005644:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8005646:	4b63      	ldr	r3, [pc, #396]	; (80057d4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	2b04      	cmp	r3, #4
 800564c:	d945      	bls.n	80056da <_ZN10SideSensor12updateStatusEv+0xe6>
				status_ |= 0x01;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 8005662:	4b5a      	ldr	r3, [pc, #360]	; (80057cc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8005664:	2201      	movs	r2, #1
 8005666:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8005668:	4b5a      	ldr	r3, [pc, #360]	; (80057d4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 800566a:	2200      	movs	r2, #0
 800566c:	801a      	strh	r2, [r3, #0]
 800566e:	e034      	b.n	80056da <_ZN10SideSensor12updateStatusEv+0xe6>
			}

		}
		else if(white_flag1 == true){
 8005670:	4b56      	ldr	r3, [pc, #344]	; (80057cc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d030      	beq.n	80056da <_ZN10SideSensor12updateStatusEv+0xe6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8005678:	2104      	movs	r1, #4
 800567a:	4855      	ldr	r0, [pc, #340]	; (80057d0 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 800567c:	f005 fb5c 	bl	800ad38 <HAL_GPIO_ReadPin>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	bf14      	ite	ne
 8005686:	2301      	movne	r3, #1
 8005688:	2300      	moveq	r3, #0
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d006      	beq.n	800569e <_ZN10SideSensor12updateStatusEv+0xaa>
				cnt_r++;
 8005690:	4b50      	ldr	r3, [pc, #320]	; (80057d4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	3301      	adds	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	4b4e      	ldr	r3, [pc, #312]	; (80057d4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 800569a:	801a      	strh	r2, [r3, #0]
 800569c:	e002      	b.n	80056a4 <_ZN10SideSensor12updateStatusEv+0xb0>
			}
			else{
				cnt_r = 0;
 800569e:	4b4d      	ldr	r3, [pc, #308]	; (80057d4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80056a4:	4b4b      	ldr	r3, [pc, #300]	; (80057d4 <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80056a6:	881b      	ldrh	r3, [r3, #0]
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d916      	bls.n	80056da <_ZN10SideSensor12updateStatusEv+0xe6>
				status_ ^= 0x01;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	f083 0301 	eor.w	r3, r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 80056c0:	4b42      	ldr	r3, [pc, #264]	; (80057cc <_ZN10SideSensor12updateStatusEv+0x1d8>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	88db      	ldrh	r3, [r3, #6]
 80056ca:	3301      	adds	r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	80da      	strh	r2, [r3, #6]
				mon_cnt_r = white_line_cnt_r_;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	88da      	ldrh	r2, [r3, #6]
 80056d6:	4b40      	ldr	r3, [pc, #256]	; (80057d8 <_ZN10SideSensor12updateStatusEv+0x1e4>)
 80056d8:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 80056da:	4b40      	ldr	r3, [pc, #256]	; (80057dc <_ZN10SideSensor12updateStatusEv+0x1e8>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	f083 0301 	eor.w	r3, r3, #1
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d02a      	beq.n	800573e <_ZN10SideSensor12updateStatusEv+0x14a>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 80056e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056ec:	483c      	ldr	r0, [pc, #240]	; (80057e0 <_ZN10SideSensor12updateStatusEv+0x1ec>)
 80056ee:	f005 fb23 	bl	800ad38 <HAL_GPIO_ReadPin>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf0c      	ite	eq
 80056f8:	2301      	moveq	r3, #1
 80056fa:	2300      	movne	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d006      	beq.n	8005710 <_ZN10SideSensor12updateStatusEv+0x11c>
				cnt_l++;
 8005702:	4b38      	ldr	r3, [pc, #224]	; (80057e4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	3301      	adds	r3, #1
 8005708:	b29a      	uxth	r2, r3
 800570a:	4b36      	ldr	r3, [pc, #216]	; (80057e4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 800570c:	801a      	strh	r2, [r3, #0]
 800570e:	e002      	b.n	8005716 <_ZN10SideSensor12updateStatusEv+0x122>
			}
			else{
				cnt_l = 0;
 8005710:	4b34      	ldr	r3, [pc, #208]	; (80057e4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005712:	2200      	movs	r2, #0
 8005714:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005716:	4b33      	ldr	r3, [pc, #204]	; (80057e4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	2b04      	cmp	r3, #4
 800571c:	d90f      	bls.n	800573e <_ZN10SideSensor12updateStatusEv+0x14a>
				status_ |= 0x02;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	f043 0302 	orr.w	r3, r3, #2
 8005726:	b29a      	uxth	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 8005732:	4b2a      	ldr	r3, [pc, #168]	; (80057dc <_ZN10SideSensor12updateStatusEv+0x1e8>)
 8005734:	2201      	movs	r2, #1
 8005736:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8005738:	4b2a      	ldr	r3, [pc, #168]	; (80057e4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 800573a:	2200      	movs	r2, #0
 800573c:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 800573e:	4b27      	ldr	r3, [pc, #156]	; (80057dc <_ZN10SideSensor12updateStatusEv+0x1e8>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d031      	beq.n	80057aa <_ZN10SideSensor12updateStatusEv+0x1b6>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005746:	f44f 7180 	mov.w	r1, #256	; 0x100
 800574a:	4825      	ldr	r0, [pc, #148]	; (80057e0 <_ZN10SideSensor12updateStatusEv+0x1ec>)
 800574c:	f005 faf4 	bl	800ad38 <HAL_GPIO_ReadPin>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	bf14      	ite	ne
 8005756:	2301      	movne	r3, #1
 8005758:	2300      	moveq	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d006      	beq.n	800576e <_ZN10SideSensor12updateStatusEv+0x17a>
				cnt_l++;
 8005760:	4b20      	ldr	r3, [pc, #128]	; (80057e4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	3301      	adds	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	4b1e      	ldr	r3, [pc, #120]	; (80057e4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 800576a:	801a      	strh	r2, [r3, #0]
 800576c:	e002      	b.n	8005774 <_ZN10SideSensor12updateStatusEv+0x180>
			}
			else{
				cnt_l = 0;
 800576e:	4b1d      	ldr	r3, [pc, #116]	; (80057e4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005770:	2200      	movs	r2, #0
 8005772:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005774:	4b1b      	ldr	r3, [pc, #108]	; (80057e4 <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	2b04      	cmp	r3, #4
 800577a:	d916      	bls.n	80057aa <_ZN10SideSensor12updateStatusEv+0x1b6>
				status_ ^= 0x02;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	f083 0302 	eor.w	r3, r3, #2
 8005784:	b29a      	uxth	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 8005790:	4b12      	ldr	r3, [pc, #72]	; (80057dc <_ZN10SideSensor12updateStatusEv+0x1e8>)
 8005792:	2200      	movs	r2, #0
 8005794:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	889b      	ldrh	r3, [r3, #4]
 800579a:	3301      	adds	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	809a      	strh	r2, [r3, #4]
				mon_cnt_l = white_line_cnt_l_;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	889a      	ldrh	r2, [r3, #4]
 80057a6:	4b10      	ldr	r3, [pc, #64]	; (80057e8 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 80057a8:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	881a      	ldrh	r2, [r3, #0]
 80057ae:	4b0f      	ldr	r3, [pc, #60]	; (80057ec <_ZN10SideSensor12updateStatusEv+0x1f8>)
 80057b0:	801a      	strh	r2, [r3, #0]
		mon_status_L = status_L_;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	789a      	ldrb	r2, [r3, #2]
 80057b6:	4b0e      	ldr	r3, [pc, #56]	; (80057f0 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 80057b8:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	78da      	ldrb	r2, [r3, #3]
 80057be:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <_ZN10SideSensor12updateStatusEv+0x200>)
 80057c0:	701a      	strb	r2, [r3, #0]
	}

}
 80057c2:	bf00      	nop
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	200002dc 	.word	0x200002dc
 80057d0:	40021000 	.word	0x40021000
 80057d4:	200002e0 	.word	0x200002e0
 80057d8:	200002da 	.word	0x200002da
 80057dc:	200002dd 	.word	0x200002dd
 80057e0:	40020c00 	.word	0x40020c00
 80057e4:	200002de 	.word	0x200002de
 80057e8:	200002d8 	.word	0x200002d8
 80057ec:	200002d4 	.word	0x200002d4
 80057f0:	200002d6 	.word	0x200002d6
 80057f4:	200002d7 	.word	0x200002d7

080057f8 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
	return status_L_;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	789b      	ldrb	r3, [r3, #2]
}
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	88db      	ldrh	r3, [r3, #6]
}
 800581c:	4618      	mov	r0, r3
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	80da      	strh	r2, [r3, #6]
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	721a      	strb	r2, [r3, #8]
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	721a      	strb	r2, [r3, #8]
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	7a1b      	ldrb	r3, [r3, #8]
}
 8005888:	4618      	mov	r0, r3
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4a10      	ldr	r2, [pc, #64]	; (80058e4 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 80058a4:	3308      	adds	r3, #8
 80058a6:	4611      	mov	r1, r2
 80058a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80058ac:	4618      	mov	r0, r3
 80058ae:	f00f fd3b 	bl	8015328 <memcpy>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4618      	mov	r0, r3
 80058dc:	3710      	adds	r7, #16
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	080198dc 	.word	0x080198dc

080058e8 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d010      	beq.n	8005920 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	ed97 0a00 	vldr	s0, [r7]
 8005906:	4618      	mov	r0, r3
 8005908:	f7fe ffa4 	bl	8004854 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8005916:	eeb0 0a67 	vmov.f32	s0, s15
 800591a:	4610      	mov	r0, r2
 800591c:	f7fe ffd1 	bl	80048c2 <_ZN6Logger9storeLog2Ef>
	}

}
 8005920:	bf00      	nop
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 8005928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005936:	2b00      	cmp	r3, #0
 8005938:	d046      	beq.n	80059c8 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005946:	461a      	mov	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3204      	adds	r2, #4
 800594c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005950:	ee07 3a90 	vmov	s15, r3
 8005954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005968:	3301      	adds	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005978:	4a15      	ldr	r2, [pc, #84]	; (80059d0 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 800597a:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005982:	2bf9      	cmp	r3, #249	; 0xf9
 8005984:	d903      	bls.n	800598e <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	22fa      	movs	r2, #250	; 0xfa
 800598a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685c      	ldr	r4, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005998:	4618      	mov	r0, r3
 800599a:	f7fa fded 	bl	8000578 <__aeabi_f2d>
 800599e:	4605      	mov	r5, r0
 80059a0:	460e      	mov	r6, r1
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80059a8:	eef1 7a67 	vneg.f32	s15, s15
 80059ac:	ee17 3a90 	vmov	r3, s15
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fa fde1 	bl	8000578 <__aeabi_f2d>
 80059b6:	4602      	mov	r2, r0
 80059b8:	460b      	mov	r3, r1
 80059ba:	ec43 2b11 	vmov	d1, r2, r3
 80059be:	ec46 5b10 	vmov	d0, r5, r6
 80059c2:	4620      	mov	r0, r4
 80059c4:	f7ff fa7c 	bl	8004ec0 <_ZN5Motor8setRatioEdd>

	}

}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059d0:	200002e4 	.word	0x200002e4

080059d4 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	605a      	str	r2, [r3, #4]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	609a      	str	r2, [r3, #8]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f04f 0200 	mov.w	r2, #0
 8005a00:	60da      	str	r2, [r3, #12]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	611a      	str	r2, [r3, #16]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	615a      	str	r2, [r3, #20]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	619a      	str	r2, [r3, #24]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	61da      	str	r2, [r3, #28]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f04f 0200 	mov.w	r2, #0
 8005a28:	621a      	str	r2, [r3, #32]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f04f 0200 	mov.w	r2, #0
 8005a30:	625a      	str	r2, [r3, #36]	; 0x24
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	0000      	movs	r0, r0
 8005a6c:	0000      	movs	r0, r0
	...

08005a70 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005a70:	b590      	push	{r4, r7, lr}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7c:	f107 020c 	add.w	r2, r7, #12
 8005a80:	f107 0110 	add.w	r1, r7, #16
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7fb fdfb 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005a8a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005a8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a96:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005a9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a9e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005aa2:	6978      	ldr	r0, [r7, #20]
 8005aa4:	f7fa fd68 	bl	8000578 <__aeabi_f2d>
 8005aa8:	a30b      	add	r3, pc, #44	; (adr r3, 8005ad8 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8005aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aae:	f7fa fdbb 	bl	8000628 <__aeabi_dmul>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	460c      	mov	r4, r1
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	4621      	mov	r1, r4
 8005aba:	f7fb f8ad 	bl	8000c18 <__aeabi_d2f>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	ee07 3a90 	vmov	s15, r3
}
 8005acc:	eeb0 0a67 	vmov.f32	s0, s15
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd90      	pop	{r4, r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	1ab1d998 	.word	0x1ab1d998
 8005adc:	3f7830b5 	.word	0x3f7830b5

08005ae0 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	ed93 7a00 	vldr	s14, [r3]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	edd3 7a02 	vldr	s15, [r3, #8]
 8005af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005af8:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005b06:	4b48      	ldr	r3, [pc, #288]	; (8005c28 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005b08:	f04f 0200 	mov.w	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	edd3 7a04 	vldr	s15, [r3, #16]
 8005b1c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b24:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005b28:	4b3f      	ldr	r3, [pc, #252]	; (8005c28 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fa fd23 	bl	8000578 <__aeabi_f2d>
 8005b32:	4604      	mov	r4, r0
 8005b34:	460d      	mov	r5, r1
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	ed93 7a06 	vldr	s14, [r3, #24]
 8005b3c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b44:	ee17 0a90 	vmov	r0, s15
 8005b48:	f7fa fd16 	bl	8000578 <__aeabi_f2d>
 8005b4c:	a334      	add	r3, pc, #208	; (adr r3, 8005c20 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	f7fa fd69 	bl	8000628 <__aeabi_dmul>
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	f7fa fbad 	bl	80002bc <__adddf3>
 8005b62:	4603      	mov	r3, r0
 8005b64:	460c      	mov	r4, r1
 8005b66:	4618      	mov	r0, r3
 8005b68:	4621      	mov	r1, r4
 8005b6a:	f7fb f855 	bl	8000c18 <__aeabi_d2f>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	4b2d      	ldr	r3, [pc, #180]	; (8005c28 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005b72:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	ed93 7a05 	vldr	s14, [r3, #20]
 8005b7a:	4b2c      	ldr	r3, [pc, #176]	; (8005c2c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005b7c:	edd3 7a00 	vldr	s15, [r3]
 8005b80:	edd7 6a05 	vldr	s13, [r7, #20]
 8005b84:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8c:	ee17 0a90 	vmov	r0, s15
 8005b90:	f7fa fcf2 	bl	8000578 <__aeabi_f2d>
 8005b94:	a322      	add	r3, pc, #136	; (adr r3, 8005c20 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9a:	f7fa fe6f 	bl	800087c <__aeabi_ddiv>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	f7fb f837 	bl	8000c18 <__aeabi_d2f>
 8005baa:	4603      	mov	r3, r0
 8005bac:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005bae:	ed97 7a04 	vldr	s14, [r7, #16]
 8005bb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bba:	4b1b      	ldr	r3, [pc, #108]	; (8005c28 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005bbc:	edd3 7a00 	vldr	s15, [r3]
 8005bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bc4:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005bd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bda:	ee17 0a90 	vmov	r0, s15
 8005bde:	f7fa fccb 	bl	8000578 <__aeabi_f2d>
 8005be2:	4605      	mov	r5, r0
 8005be4:	460e      	mov	r6, r1
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005bec:	ed97 7a02 	vldr	s14, [r7, #8]
 8005bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bf4:	ee17 0a90 	vmov	r0, s15
 8005bf8:	f7fa fcbe 	bl	8000578 <__aeabi_f2d>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	ec43 2b11 	vmov	d1, r2, r3
 8005c04:	ec46 5b10 	vmov	d0, r5, r6
 8005c08:	4620      	mov	r0, r4
 8005c0a:	f7ff f959 	bl	8004ec0 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005c0e:	4a07      	ldr	r2, [pc, #28]	; (8005c2c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	6013      	str	r3, [r2, #0]
}
 8005c14:	bf00      	nop
 8005c16:	371c      	adds	r7, #28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c1c:	f3af 8000 	nop.w
 8005c20:	d2f1a9fc 	.word	0xd2f1a9fc
 8005c24:	3f50624d 	.word	0x3f50624d
 8005c28:	200002ec 	.word	0x200002ec
 8005c2c:	200002e8 	.word	0x200002e8

08005c30 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	ed87 0a02 	vstr	s0, [r7, #8]
 8005c3c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	605a      	str	r2, [r3, #4]
}
 8005c4c:	bf00      	nop
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	ed87 0a02 	vstr	s0, [r7, #8]
 8005c64:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005c74:	bf00      	nop
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	ed87 0a02 	vstr	s0, [r7, #8]
 8005c8c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005c90:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	68ba      	ldr	r2, [r7, #8]
 8005c98:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	615a      	str	r2, [r3, #20]
}
 8005ca6:	bf00      	nop
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b085      	sub	sp, #20
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	ed87 0a02 	vstr	s0, [r7, #8]
 8005cbe:	edc7 0a01 	vstr	s1, [r7, #4]
 8005cc2:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	621a      	str	r2, [r3, #32]
}
 8005cd8:	bf00      	nop
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff febf 	bl	8005a70 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff feef 	bl	8005ae0 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
	...

08005d30 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005d60 <_ZN12VelocityCtrl4stopEv+0x30>
 8005d48:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005d60 <_ZN12VelocityCtrl4stopEv+0x30>
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff f8b7 	bl	8004ec0 <_ZN5Motor8setRatioEdd>

}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	f3af 8000 	nop.w
	...

08005d68 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	ee07 3a90 	vmov	s15, r3
}
 8005d78:	eeb0 0a67 	vmov.f32	s0, s15
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
	...

08005d88 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1e      	ldr	r2, [pc, #120]	; (8005e10 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d10e      	bne.n	8005db8 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005d9a:	f001 fe2b 	bl	80079f4 <cppFlip100ns>

		tim7_timer++;
 8005d9e:	4b1d      	ldr	r3, [pc, #116]	; (8005e14 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3301      	adds	r3, #1
 8005da4:	4a1b      	ldr	r2, [pc, #108]	; (8005e14 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005da6:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005da8:	4b1a      	ldr	r3, [pc, #104]	; (8005e14 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a1a      	ldr	r2, [pc, #104]	; (8005e18 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d902      	bls.n	8005db8 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005db2:	4b18      	ldr	r3, [pc, #96]	; (8005e14 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a17      	ldr	r2, [pc, #92]	; (8005e1c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d10e      	bne.n	8005de0 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005dc2:	f001 fdcd 	bl	8007960 <cppFlip1ms>

		tim6_timer++;
 8005dc6:	4b16      	ldr	r3, [pc, #88]	; (8005e20 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	4a14      	ldr	r2, [pc, #80]	; (8005e20 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005dce:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005dd0:	4b13      	ldr	r3, [pc, #76]	; (8005e20 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a10      	ldr	r2, [pc, #64]	; (8005e18 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d902      	bls.n	8005de0 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005dda:	4b11      	ldr	r3, [pc, #68]	; (8005e20 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a0f      	ldr	r2, [pc, #60]	; (8005e24 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d10e      	bne.n	8005e08 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005dea:	f001 fe0d 	bl	8007a08 <cppFlip10ms>

		tim13_timer++;
 8005dee:	4b0e      	ldr	r3, [pc, #56]	; (8005e28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3301      	adds	r3, #1
 8005df4:	4a0c      	ldr	r2, [pc, #48]	; (8005e28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005df6:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005df8:	4b0b      	ldr	r3, [pc, #44]	; (8005e28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a06      	ldr	r2, [pc, #24]	; (8005e18 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d902      	bls.n	8005e08 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005e02:	4b09      	ldr	r3, [pc, #36]	; (8005e28 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]
	}

}
 8005e08:	bf00      	nop
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	40001400 	.word	0x40001400
 8005e14:	200448d8 	.word	0x200448d8
 8005e18:	0001869f 	.word	0x0001869f
 8005e1c:	40001000 	.word	0x40001000
 8005e20:	20044894 	.word	0x20044894
 8005e24:	40001c00 	.word	0x40001c00
 8005e28:	200448dc 	.word	0x200448dc

08005e2c <init>:

void init()
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005e30:	2201      	movs	r2, #1
 8005e32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e36:	4808      	ldr	r0, [pc, #32]	; (8005e58 <init+0x2c>)
 8005e38:	f004 ff96 	bl	800ad68 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005e3c:	4807      	ldr	r0, [pc, #28]	; (8005e5c <init+0x30>)
 8005e3e:	f008 fe5e 	bl	800eafe <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005e42:	4807      	ldr	r0, [pc, #28]	; (8005e60 <init+0x34>)
 8005e44:	f008 fe5b 	bl	800eafe <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005e48:	4806      	ldr	r0, [pc, #24]	; (8005e64 <init+0x38>)
 8005e4a:	f008 fe58 	bl	800eafe <HAL_TIM_Base_Start_IT>

	cppInit();
 8005e4e:	f001 fce3 	bl	8007818 <cppInit>

	//path_following_initialize();

}
 8005e52:	bf00      	nop
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	40021000 	.word	0x40021000
 8005e5c:	200449c0 	.word	0x200449c0
 8005e60:	20044b64 	.word	0x20044b64
 8005e64:	200448e0 	.word	0x200448e0

08005e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005e6c:	f003 fc74 	bl	8009758 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005e70:	f000 f82a 	bl	8005ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005e74:	f000 fdbc 	bl	80069f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8005e78:	f000 fd8a 	bl	8006990 <MX_DMA_Init>
  MX_I2C2_Init();
 8005e7c:	f000 f9e8 	bl	8006250 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005e80:	f000 fa14 	bl	80062ac <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005e84:	f000 fa32 	bl	80062ec <MX_SPI2_Init>
  MX_TIM1_Init();
 8005e88:	f000 fa66 	bl	8006358 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005e8c:	f000 fb70 	bl	8006570 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005e90:	f000 fc3c 	bl	800670c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005e94:	f000 fd52 	bl	800693c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005e98:	f00a fe04 	bl	8010aa4 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005e9c:	f000 fbcc 	bl	8006638 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005ea0:	f000 f9a8 	bl	80061f4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8005ea4:	f000 fb00 	bl	80064a8 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005ea8:	f000 fc88 	bl	80067bc <MX_TIM10_Init>
  MX_TIM11_Init();
 8005eac:	f000 fcd4 	bl	8006858 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005eb0:	f000 f898 	bl	8005fe4 <MX_ADC2_Init>
  MX_TIM7_Init();
 8005eb4:	f000 fbf6 	bl	80066a4 <MX_TIM7_Init>
  MX_TIM13_Init();
 8005eb8:	f000 fd1c 	bl	80068f4 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005ebc:	f7ff ffb6 	bl	8005e2c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005ec0:	f001 fdce 	bl	8007a60 <cppLoop>
 8005ec4:	e7fc      	b.n	8005ec0 <main+0x58>
	...

08005ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b0a4      	sub	sp, #144	; 0x90
 8005ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ece:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005ed2:	2234      	movs	r2, #52	; 0x34
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f00f fa31 	bl	801533e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005edc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	605a      	str	r2, [r3, #4]
 8005ee6:	609a      	str	r2, [r3, #8]
 8005ee8:	60da      	str	r2, [r3, #12]
 8005eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005eec:	f107 030c 	add.w	r3, r7, #12
 8005ef0:	223c      	movs	r2, #60	; 0x3c
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f00f fa22 	bl	801533e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005efa:	2300      	movs	r3, #0
 8005efc:	60bb      	str	r3, [r7, #8]
 8005efe:	4b37      	ldr	r3, [pc, #220]	; (8005fdc <SystemClock_Config+0x114>)
 8005f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f02:	4a36      	ldr	r2, [pc, #216]	; (8005fdc <SystemClock_Config+0x114>)
 8005f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f08:	6413      	str	r3, [r2, #64]	; 0x40
 8005f0a:	4b34      	ldr	r3, [pc, #208]	; (8005fdc <SystemClock_Config+0x114>)
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f12:	60bb      	str	r3, [r7, #8]
 8005f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f16:	2300      	movs	r3, #0
 8005f18:	607b      	str	r3, [r7, #4]
 8005f1a:	4b31      	ldr	r3, [pc, #196]	; (8005fe0 <SystemClock_Config+0x118>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a30      	ldr	r2, [pc, #192]	; (8005fe0 <SystemClock_Config+0x118>)
 8005f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	4b2e      	ldr	r3, [pc, #184]	; (8005fe0 <SystemClock_Config+0x118>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005f2e:	607b      	str	r3, [r7, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005f32:	2301      	movs	r3, #1
 8005f34:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005f36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f3a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005f44:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005f46:	2308      	movs	r3, #8
 8005f48:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005f4a:	23b4      	movs	r3, #180	; 0xb4
 8005f4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005f50:	2302      	movs	r3, #2
 8005f52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005f56:	2308      	movs	r3, #8
 8005f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f62:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005f66:	4618      	mov	r0, r3
 8005f68:	f006 fb20 	bl	800c5ac <HAL_RCC_OscConfig>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005f72:	f000 fe7f 	bl	8006c74 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005f76:	f005 fe9b 	bl	800bcb0 <HAL_PWREx_EnableOverDrive>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005f80:	f000 fe78 	bl	8006c74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005f84:	230f      	movs	r3, #15
 8005f86:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005f90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005f94:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f9a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005f9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005fa0:	2105      	movs	r1, #5
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f005 fed4 	bl	800bd50 <HAL_RCC_ClockConfig>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005fae:	f000 fe61 	bl	8006c74 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005fb2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005fb6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005fc0:	f107 030c 	add.w	r3, r7, #12
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f006 f8b3 	bl	800c130 <HAL_RCCEx_PeriphCLKConfig>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005fd0:	f000 fe50 	bl	8006c74 <Error_Handler>
  }
}
 8005fd4:	bf00      	nop
 8005fd6:	3790      	adds	r7, #144	; 0x90
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	40023800 	.word	0x40023800
 8005fe0:	40007000 	.word	0x40007000

08005fe4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005fea:	463b      	mov	r3, r7
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	605a      	str	r2, [r3, #4]
 8005ff2:	609a      	str	r2, [r3, #8]
 8005ff4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005ff6:	4b7c      	ldr	r3, [pc, #496]	; (80061e8 <MX_ADC2_Init+0x204>)
 8005ff8:	4a7c      	ldr	r2, [pc, #496]	; (80061ec <MX_ADC2_Init+0x208>)
 8005ffa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005ffc:	4b7a      	ldr	r3, [pc, #488]	; (80061e8 <MX_ADC2_Init+0x204>)
 8005ffe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006002:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006004:	4b78      	ldr	r3, [pc, #480]	; (80061e8 <MX_ADC2_Init+0x204>)
 8006006:	2200      	movs	r2, #0
 8006008:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800600a:	4b77      	ldr	r3, [pc, #476]	; (80061e8 <MX_ADC2_Init+0x204>)
 800600c:	2201      	movs	r2, #1
 800600e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006010:	4b75      	ldr	r3, [pc, #468]	; (80061e8 <MX_ADC2_Init+0x204>)
 8006012:	2201      	movs	r2, #1
 8006014:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006016:	4b74      	ldr	r3, [pc, #464]	; (80061e8 <MX_ADC2_Init+0x204>)
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800601e:	4b72      	ldr	r3, [pc, #456]	; (80061e8 <MX_ADC2_Init+0x204>)
 8006020:	2200      	movs	r2, #0
 8006022:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006024:	4b70      	ldr	r3, [pc, #448]	; (80061e8 <MX_ADC2_Init+0x204>)
 8006026:	4a72      	ldr	r2, [pc, #456]	; (80061f0 <MX_ADC2_Init+0x20c>)
 8006028:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800602a:	4b6f      	ldr	r3, [pc, #444]	; (80061e8 <MX_ADC2_Init+0x204>)
 800602c:	2200      	movs	r2, #0
 800602e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8006030:	4b6d      	ldr	r3, [pc, #436]	; (80061e8 <MX_ADC2_Init+0x204>)
 8006032:	220e      	movs	r2, #14
 8006034:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8006036:	4b6c      	ldr	r3, [pc, #432]	; (80061e8 <MX_ADC2_Init+0x204>)
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800603e:	4b6a      	ldr	r3, [pc, #424]	; (80061e8 <MX_ADC2_Init+0x204>)
 8006040:	2201      	movs	r2, #1
 8006042:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006044:	4868      	ldr	r0, [pc, #416]	; (80061e8 <MX_ADC2_Init+0x204>)
 8006046:	f003 fc1b 	bl	8009880 <HAL_ADC_Init>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006050:	f000 fe10 	bl	8006c74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006054:	230a      	movs	r3, #10
 8006056:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006058:	2301      	movs	r3, #1
 800605a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800605c:	2306      	movs	r3, #6
 800605e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006060:	463b      	mov	r3, r7
 8006062:	4619      	mov	r1, r3
 8006064:	4860      	ldr	r0, [pc, #384]	; (80061e8 <MX_ADC2_Init+0x204>)
 8006066:	f003 fd5f 	bl	8009b28 <HAL_ADC_ConfigChannel>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006070:	f000 fe00 	bl	8006c74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006074:	230b      	movs	r3, #11
 8006076:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006078:	2302      	movs	r3, #2
 800607a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800607c:	463b      	mov	r3, r7
 800607e:	4619      	mov	r1, r3
 8006080:	4859      	ldr	r0, [pc, #356]	; (80061e8 <MX_ADC2_Init+0x204>)
 8006082:	f003 fd51 	bl	8009b28 <HAL_ADC_ConfigChannel>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800608c:	f000 fdf2 	bl	8006c74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006090:	230c      	movs	r3, #12
 8006092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006094:	2303      	movs	r3, #3
 8006096:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006098:	463b      	mov	r3, r7
 800609a:	4619      	mov	r1, r3
 800609c:	4852      	ldr	r0, [pc, #328]	; (80061e8 <MX_ADC2_Init+0x204>)
 800609e:	f003 fd43 	bl	8009b28 <HAL_ADC_ConfigChannel>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d001      	beq.n	80060ac <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80060a8:	f000 fde4 	bl	8006c74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80060ac:	230d      	movs	r3, #13
 80060ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80060b0:	2304      	movs	r3, #4
 80060b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060b4:	463b      	mov	r3, r7
 80060b6:	4619      	mov	r1, r3
 80060b8:	484b      	ldr	r0, [pc, #300]	; (80061e8 <MX_ADC2_Init+0x204>)
 80060ba:	f003 fd35 	bl	8009b28 <HAL_ADC_ConfigChannel>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80060c4:	f000 fdd6 	bl	8006c74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80060cc:	2305      	movs	r3, #5
 80060ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060d0:	463b      	mov	r3, r7
 80060d2:	4619      	mov	r1, r3
 80060d4:	4844      	ldr	r0, [pc, #272]	; (80061e8 <MX_ADC2_Init+0x204>)
 80060d6:	f003 fd27 	bl	8009b28 <HAL_ADC_ConfigChannel>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80060e0:	f000 fdc8 	bl	8006c74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80060e4:	2301      	movs	r3, #1
 80060e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80060e8:	2306      	movs	r3, #6
 80060ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060ec:	463b      	mov	r3, r7
 80060ee:	4619      	mov	r1, r3
 80060f0:	483d      	ldr	r0, [pc, #244]	; (80061e8 <MX_ADC2_Init+0x204>)
 80060f2:	f003 fd19 	bl	8009b28 <HAL_ADC_ConfigChannel>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80060fc:	f000 fdba 	bl	8006c74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006100:	2302      	movs	r3, #2
 8006102:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8006104:	2307      	movs	r3, #7
 8006106:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006108:	463b      	mov	r3, r7
 800610a:	4619      	mov	r1, r3
 800610c:	4836      	ldr	r0, [pc, #216]	; (80061e8 <MX_ADC2_Init+0x204>)
 800610e:	f003 fd0b 	bl	8009b28 <HAL_ADC_ConfigChannel>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006118:	f000 fdac 	bl	8006c74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800611c:	2303      	movs	r3, #3
 800611e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006120:	2308      	movs	r3, #8
 8006122:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006124:	463b      	mov	r3, r7
 8006126:	4619      	mov	r1, r3
 8006128:	482f      	ldr	r0, [pc, #188]	; (80061e8 <MX_ADC2_Init+0x204>)
 800612a:	f003 fcfd 	bl	8009b28 <HAL_ADC_ConfigChannel>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8006134:	f000 fd9e 	bl	8006c74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006138:	2304      	movs	r3, #4
 800613a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800613c:	2309      	movs	r3, #9
 800613e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006140:	463b      	mov	r3, r7
 8006142:	4619      	mov	r1, r3
 8006144:	4828      	ldr	r0, [pc, #160]	; (80061e8 <MX_ADC2_Init+0x204>)
 8006146:	f003 fcef 	bl	8009b28 <HAL_ADC_ConfigChannel>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d001      	beq.n	8006154 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006150:	f000 fd90 	bl	8006c74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006154:	2305      	movs	r3, #5
 8006156:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006158:	230a      	movs	r3, #10
 800615a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800615c:	463b      	mov	r3, r7
 800615e:	4619      	mov	r1, r3
 8006160:	4821      	ldr	r0, [pc, #132]	; (80061e8 <MX_ADC2_Init+0x204>)
 8006162:	f003 fce1 	bl	8009b28 <HAL_ADC_ConfigChannel>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800616c:	f000 fd82 	bl	8006c74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006170:	2306      	movs	r3, #6
 8006172:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8006174:	230b      	movs	r3, #11
 8006176:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006178:	463b      	mov	r3, r7
 800617a:	4619      	mov	r1, r3
 800617c:	481a      	ldr	r0, [pc, #104]	; (80061e8 <MX_ADC2_Init+0x204>)
 800617e:	f003 fcd3 	bl	8009b28 <HAL_ADC_ConfigChannel>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8006188:	f000 fd74 	bl	8006c74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800618c:	2307      	movs	r3, #7
 800618e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8006190:	230c      	movs	r3, #12
 8006192:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006194:	463b      	mov	r3, r7
 8006196:	4619      	mov	r1, r3
 8006198:	4813      	ldr	r0, [pc, #76]	; (80061e8 <MX_ADC2_Init+0x204>)
 800619a:	f003 fcc5 	bl	8009b28 <HAL_ADC_ConfigChannel>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d001      	beq.n	80061a8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80061a4:	f000 fd66 	bl	8006c74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80061a8:	2308      	movs	r3, #8
 80061aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80061ac:	230d      	movs	r3, #13
 80061ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061b0:	463b      	mov	r3, r7
 80061b2:	4619      	mov	r1, r3
 80061b4:	480c      	ldr	r0, [pc, #48]	; (80061e8 <MX_ADC2_Init+0x204>)
 80061b6:	f003 fcb7 	bl	8009b28 <HAL_ADC_ConfigChannel>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80061c0:	f000 fd58 	bl	8006c74 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80061c4:	2309      	movs	r3, #9
 80061c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80061c8:	230e      	movs	r3, #14
 80061ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061cc:	463b      	mov	r3, r7
 80061ce:	4619      	mov	r1, r3
 80061d0:	4805      	ldr	r0, [pc, #20]	; (80061e8 <MX_ADC2_Init+0x204>)
 80061d2:	f003 fca9 	bl	8009b28 <HAL_ADC_ConfigChannel>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80061dc:	f000 fd4a 	bl	8006c74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80061e0:	bf00      	nop
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20044764 	.word	0x20044764
 80061ec:	40012100 	.word	0x40012100
 80061f0:	0f000001 	.word	0x0f000001

080061f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80061f8:	4b12      	ldr	r3, [pc, #72]	; (8006244 <MX_I2C1_Init+0x50>)
 80061fa:	4a13      	ldr	r2, [pc, #76]	; (8006248 <MX_I2C1_Init+0x54>)
 80061fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80061fe:	4b11      	ldr	r3, [pc, #68]	; (8006244 <MX_I2C1_Init+0x50>)
 8006200:	4a12      	ldr	r2, [pc, #72]	; (800624c <MX_I2C1_Init+0x58>)
 8006202:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006204:	4b0f      	ldr	r3, [pc, #60]	; (8006244 <MX_I2C1_Init+0x50>)
 8006206:	2200      	movs	r2, #0
 8006208:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800620a:	4b0e      	ldr	r3, [pc, #56]	; (8006244 <MX_I2C1_Init+0x50>)
 800620c:	2200      	movs	r2, #0
 800620e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006210:	4b0c      	ldr	r3, [pc, #48]	; (8006244 <MX_I2C1_Init+0x50>)
 8006212:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006216:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006218:	4b0a      	ldr	r3, [pc, #40]	; (8006244 <MX_I2C1_Init+0x50>)
 800621a:	2200      	movs	r2, #0
 800621c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800621e:	4b09      	ldr	r3, [pc, #36]	; (8006244 <MX_I2C1_Init+0x50>)
 8006220:	2200      	movs	r2, #0
 8006222:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006224:	4b07      	ldr	r3, [pc, #28]	; (8006244 <MX_I2C1_Init+0x50>)
 8006226:	2200      	movs	r2, #0
 8006228:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800622a:	4b06      	ldr	r3, [pc, #24]	; (8006244 <MX_I2C1_Init+0x50>)
 800622c:	2280      	movs	r2, #128	; 0x80
 800622e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006230:	4804      	ldr	r0, [pc, #16]	; (8006244 <MX_I2C1_Init+0x50>)
 8006232:	f004 fdb3 	bl	800ad9c <HAL_I2C_Init>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800623c:	f000 fd1a 	bl	8006c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006240:	bf00      	nop
 8006242:	bd80      	pop	{r7, pc}
 8006244:	200447ac 	.word	0x200447ac
 8006248:	40005400 	.word	0x40005400
 800624c:	000186a0 	.word	0x000186a0

08006250 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006254:	4b12      	ldr	r3, [pc, #72]	; (80062a0 <MX_I2C2_Init+0x50>)
 8006256:	4a13      	ldr	r2, [pc, #76]	; (80062a4 <MX_I2C2_Init+0x54>)
 8006258:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800625a:	4b11      	ldr	r3, [pc, #68]	; (80062a0 <MX_I2C2_Init+0x50>)
 800625c:	4a12      	ldr	r2, [pc, #72]	; (80062a8 <MX_I2C2_Init+0x58>)
 800625e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006260:	4b0f      	ldr	r3, [pc, #60]	; (80062a0 <MX_I2C2_Init+0x50>)
 8006262:	2200      	movs	r2, #0
 8006264:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006266:	4b0e      	ldr	r3, [pc, #56]	; (80062a0 <MX_I2C2_Init+0x50>)
 8006268:	2200      	movs	r2, #0
 800626a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800626c:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <MX_I2C2_Init+0x50>)
 800626e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006272:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006274:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <MX_I2C2_Init+0x50>)
 8006276:	2200      	movs	r2, #0
 8006278:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800627a:	4b09      	ldr	r3, [pc, #36]	; (80062a0 <MX_I2C2_Init+0x50>)
 800627c:	2200      	movs	r2, #0
 800627e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006280:	4b07      	ldr	r3, [pc, #28]	; (80062a0 <MX_I2C2_Init+0x50>)
 8006282:	2200      	movs	r2, #0
 8006284:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006286:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <MX_I2C2_Init+0x50>)
 8006288:	2280      	movs	r2, #128	; 0x80
 800628a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800628c:	4804      	ldr	r0, [pc, #16]	; (80062a0 <MX_I2C2_Init+0x50>)
 800628e:	f004 fd85 	bl	800ad9c <HAL_I2C_Init>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006298:	f000 fcec 	bl	8006c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800629c:	bf00      	nop
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	20044840 	.word	0x20044840
 80062a4:	40005800 	.word	0x40005800
 80062a8:	000186a0 	.word	0x000186a0

080062ac <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80062b0:	4b0c      	ldr	r3, [pc, #48]	; (80062e4 <MX_SDIO_SD_Init+0x38>)
 80062b2:	4a0d      	ldr	r2, [pc, #52]	; (80062e8 <MX_SDIO_SD_Init+0x3c>)
 80062b4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80062b6:	4b0b      	ldr	r3, [pc, #44]	; (80062e4 <MX_SDIO_SD_Init+0x38>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80062bc:	4b09      	ldr	r3, [pc, #36]	; (80062e4 <MX_SDIO_SD_Init+0x38>)
 80062be:	2200      	movs	r2, #0
 80062c0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80062c2:	4b08      	ldr	r3, [pc, #32]	; (80062e4 <MX_SDIO_SD_Init+0x38>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80062c8:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <MX_SDIO_SD_Init+0x38>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80062ce:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <MX_SDIO_SD_Init+0x38>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80062d4:	4b03      	ldr	r3, [pc, #12]	; (80062e4 <MX_SDIO_SD_Init+0x38>)
 80062d6:	2202      	movs	r2, #2
 80062d8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80062da:	bf00      	nop
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	20044a40 	.word	0x20044a40
 80062e8:	40012c00 	.word	0x40012c00

080062ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80062f0:	4b17      	ldr	r3, [pc, #92]	; (8006350 <MX_SPI2_Init+0x64>)
 80062f2:	4a18      	ldr	r2, [pc, #96]	; (8006354 <MX_SPI2_Init+0x68>)
 80062f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80062f6:	4b16      	ldr	r3, [pc, #88]	; (8006350 <MX_SPI2_Init+0x64>)
 80062f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80062fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80062fe:	4b14      	ldr	r3, [pc, #80]	; (8006350 <MX_SPI2_Init+0x64>)
 8006300:	2200      	movs	r2, #0
 8006302:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006304:	4b12      	ldr	r3, [pc, #72]	; (8006350 <MX_SPI2_Init+0x64>)
 8006306:	2200      	movs	r2, #0
 8006308:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800630a:	4b11      	ldr	r3, [pc, #68]	; (8006350 <MX_SPI2_Init+0x64>)
 800630c:	2202      	movs	r2, #2
 800630e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006310:	4b0f      	ldr	r3, [pc, #60]	; (8006350 <MX_SPI2_Init+0x64>)
 8006312:	2201      	movs	r2, #1
 8006314:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006316:	4b0e      	ldr	r3, [pc, #56]	; (8006350 <MX_SPI2_Init+0x64>)
 8006318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800631c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800631e:	4b0c      	ldr	r3, [pc, #48]	; (8006350 <MX_SPI2_Init+0x64>)
 8006320:	2228      	movs	r2, #40	; 0x28
 8006322:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006324:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <MX_SPI2_Init+0x64>)
 8006326:	2200      	movs	r2, #0
 8006328:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800632a:	4b09      	ldr	r3, [pc, #36]	; (8006350 <MX_SPI2_Init+0x64>)
 800632c:	2200      	movs	r2, #0
 800632e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006330:	4b07      	ldr	r3, [pc, #28]	; (8006350 <MX_SPI2_Init+0x64>)
 8006332:	2200      	movs	r2, #0
 8006334:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006336:	4b06      	ldr	r3, [pc, #24]	; (8006350 <MX_SPI2_Init+0x64>)
 8006338:	220a      	movs	r2, #10
 800633a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800633c:	4804      	ldr	r0, [pc, #16]	; (8006350 <MX_SPI2_Init+0x64>)
 800633e:	f007 fe5f 	bl	800e000 <HAL_SPI_Init>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006348:	f000 fc94 	bl	8006c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800634c:	bf00      	nop
 800634e:	bd80      	pop	{r7, pc}
 8006350:	2004468c 	.word	0x2004468c
 8006354:	40003800 	.word	0x40003800

08006358 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b09a      	sub	sp, #104	; 0x68
 800635c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800635e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006362:	2224      	movs	r2, #36	; 0x24
 8006364:	2100      	movs	r1, #0
 8006366:	4618      	mov	r0, r3
 8006368:	f00e ffe9 	bl	801533e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800636c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006376:	f107 0320 	add.w	r3, r7, #32
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	605a      	str	r2, [r3, #4]
 8006380:	609a      	str	r2, [r3, #8]
 8006382:	60da      	str	r2, [r3, #12]
 8006384:	611a      	str	r2, [r3, #16]
 8006386:	615a      	str	r2, [r3, #20]
 8006388:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800638a:	463b      	mov	r3, r7
 800638c:	2220      	movs	r2, #32
 800638e:	2100      	movs	r1, #0
 8006390:	4618      	mov	r0, r3
 8006392:	f00e ffd4 	bl	801533e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006396:	4b42      	ldr	r3, [pc, #264]	; (80064a0 <MX_TIM1_Init+0x148>)
 8006398:	4a42      	ldr	r2, [pc, #264]	; (80064a4 <MX_TIM1_Init+0x14c>)
 800639a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800639c:	4b40      	ldr	r3, [pc, #256]	; (80064a0 <MX_TIM1_Init+0x148>)
 800639e:	2200      	movs	r2, #0
 80063a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063a2:	4b3f      	ldr	r3, [pc, #252]	; (80064a0 <MX_TIM1_Init+0x148>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80063a8:	4b3d      	ldr	r3, [pc, #244]	; (80064a0 <MX_TIM1_Init+0x148>)
 80063aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063ae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063b0:	4b3b      	ldr	r3, [pc, #236]	; (80064a0 <MX_TIM1_Init+0x148>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80063b6:	4b3a      	ldr	r3, [pc, #232]	; (80064a0 <MX_TIM1_Init+0x148>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80063bc:	4b38      	ldr	r3, [pc, #224]	; (80064a0 <MX_TIM1_Init+0x148>)
 80063be:	2200      	movs	r2, #0
 80063c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80063c2:	4837      	ldr	r0, [pc, #220]	; (80064a0 <MX_TIM1_Init+0x148>)
 80063c4:	f008 fbbf 	bl	800eb46 <HAL_TIM_PWM_Init>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d001      	beq.n	80063d2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80063ce:	f000 fc51 	bl	8006c74 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80063d2:	2303      	movs	r3, #3
 80063d4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80063d6:	2300      	movs	r3, #0
 80063d8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80063da:	2301      	movs	r3, #1
 80063dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80063de:	2300      	movs	r3, #0
 80063e0:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80063e2:	2300      	movs	r3, #0
 80063e4:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80063e6:	2300      	movs	r3, #0
 80063e8:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80063ea:	2301      	movs	r3, #1
 80063ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80063ee:	2300      	movs	r3, #0
 80063f0:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80063f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80063fa:	4619      	mov	r1, r3
 80063fc:	4828      	ldr	r0, [pc, #160]	; (80064a0 <MX_TIM1_Init+0x148>)
 80063fe:	f008 fc0b 	bl	800ec18 <HAL_TIM_Encoder_Init>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006408:	f000 fc34 	bl	8006c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800640c:	2300      	movs	r3, #0
 800640e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006410:	2300      	movs	r3, #0
 8006412:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006414:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006418:	4619      	mov	r1, r3
 800641a:	4821      	ldr	r0, [pc, #132]	; (80064a0 <MX_TIM1_Init+0x148>)
 800641c:	f009 f932 	bl	800f684 <HAL_TIMEx_MasterConfigSynchronization>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8006426:	f000 fc25 	bl	8006c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800642a:	2360      	movs	r3, #96	; 0x60
 800642c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006432:	2300      	movs	r3, #0
 8006434:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006436:	2300      	movs	r3, #0
 8006438:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800643a:	2300      	movs	r3, #0
 800643c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800643e:	2300      	movs	r3, #0
 8006440:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006442:	2300      	movs	r3, #0
 8006444:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006446:	f107 0320 	add.w	r3, r7, #32
 800644a:	2208      	movs	r2, #8
 800644c:	4619      	mov	r1, r3
 800644e:	4814      	ldr	r0, [pc, #80]	; (80064a0 <MX_TIM1_Init+0x148>)
 8006450:	f008 fdb4 	bl	800efbc <HAL_TIM_PWM_ConfigChannel>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800645a:	f000 fc0b 	bl	8006c74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800645e:	2300      	movs	r3, #0
 8006460:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006462:	2300      	movs	r3, #0
 8006464:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006466:	2300      	movs	r3, #0
 8006468:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800646a:	2300      	movs	r3, #0
 800646c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800646e:	2300      	movs	r3, #0
 8006470:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006472:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006476:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006478:	2300      	movs	r3, #0
 800647a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800647c:	463b      	mov	r3, r7
 800647e:	4619      	mov	r1, r3
 8006480:	4807      	ldr	r0, [pc, #28]	; (80064a0 <MX_TIM1_Init+0x148>)
 8006482:	f009 f97b 	bl	800f77c <HAL_TIMEx_ConfigBreakDeadTime>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800648c:	f000 fbf2 	bl	8006c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006490:	4803      	ldr	r0, [pc, #12]	; (80064a0 <MX_TIM1_Init+0x148>)
 8006492:	f000 ffdf 	bl	8007454 <HAL_TIM_MspPostInit>

}
 8006496:	bf00      	nop
 8006498:	3768      	adds	r7, #104	; 0x68
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20044a00 	.word	0x20044a00
 80064a4:	40010000 	.word	0x40010000

080064a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08a      	sub	sp, #40	; 0x28
 80064ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064ae:	f107 0320 	add.w	r3, r7, #32
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80064b8:	1d3b      	adds	r3, r7, #4
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	605a      	str	r2, [r3, #4]
 80064c0:	609a      	str	r2, [r3, #8]
 80064c2:	60da      	str	r2, [r3, #12]
 80064c4:	611a      	str	r2, [r3, #16]
 80064c6:	615a      	str	r2, [r3, #20]
 80064c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80064ca:	4b27      	ldr	r3, [pc, #156]	; (8006568 <MX_TIM3_Init+0xc0>)
 80064cc:	4a27      	ldr	r2, [pc, #156]	; (800656c <MX_TIM3_Init+0xc4>)
 80064ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80064d0:	4b25      	ldr	r3, [pc, #148]	; (8006568 <MX_TIM3_Init+0xc0>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064d6:	4b24      	ldr	r3, [pc, #144]	; (8006568 <MX_TIM3_Init+0xc0>)
 80064d8:	2200      	movs	r2, #0
 80064da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 80064dc:	4b22      	ldr	r3, [pc, #136]	; (8006568 <MX_TIM3_Init+0xc0>)
 80064de:	f241 1293 	movw	r2, #4499	; 0x1193
 80064e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064e4:	4b20      	ldr	r3, [pc, #128]	; (8006568 <MX_TIM3_Init+0xc0>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064ea:	4b1f      	ldr	r3, [pc, #124]	; (8006568 <MX_TIM3_Init+0xc0>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80064f0:	481d      	ldr	r0, [pc, #116]	; (8006568 <MX_TIM3_Init+0xc0>)
 80064f2:	f008 fb28 	bl	800eb46 <HAL_TIM_PWM_Init>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80064fc:	f000 fbba 	bl	8006c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006500:	2300      	movs	r3, #0
 8006502:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006504:	2300      	movs	r3, #0
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006508:	f107 0320 	add.w	r3, r7, #32
 800650c:	4619      	mov	r1, r3
 800650e:	4816      	ldr	r0, [pc, #88]	; (8006568 <MX_TIM3_Init+0xc0>)
 8006510:	f009 f8b8 	bl	800f684 <HAL_TIMEx_MasterConfigSynchronization>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800651a:	f000 fbab 	bl	8006c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800651e:	2360      	movs	r3, #96	; 0x60
 8006520:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006522:	2300      	movs	r3, #0
 8006524:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800652a:	2300      	movs	r3, #0
 800652c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800652e:	1d3b      	adds	r3, r7, #4
 8006530:	2200      	movs	r2, #0
 8006532:	4619      	mov	r1, r3
 8006534:	480c      	ldr	r0, [pc, #48]	; (8006568 <MX_TIM3_Init+0xc0>)
 8006536:	f008 fd41 	bl	800efbc <HAL_TIM_PWM_ConfigChannel>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006540:	f000 fb98 	bl	8006c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006544:	1d3b      	adds	r3, r7, #4
 8006546:	2204      	movs	r2, #4
 8006548:	4619      	mov	r1, r3
 800654a:	4807      	ldr	r0, [pc, #28]	; (8006568 <MX_TIM3_Init+0xc0>)
 800654c:	f008 fd36 	bl	800efbc <HAL_TIM_PWM_ConfigChannel>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006556:	f000 fb8d 	bl	8006c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800655a:	4803      	ldr	r0, [pc, #12]	; (8006568 <MX_TIM3_Init+0xc0>)
 800655c:	f000 ff7a 	bl	8007454 <HAL_TIM_MspPostInit>

}
 8006560:	bf00      	nop
 8006562:	3728      	adds	r7, #40	; 0x28
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	20044898 	.word	0x20044898
 800656c:	40000400 	.word	0x40000400

08006570 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08a      	sub	sp, #40	; 0x28
 8006574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006576:	f107 0320 	add.w	r3, r7, #32
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006580:	1d3b      	adds	r3, r7, #4
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	605a      	str	r2, [r3, #4]
 8006588:	609a      	str	r2, [r3, #8]
 800658a:	60da      	str	r2, [r3, #12]
 800658c:	611a      	str	r2, [r3, #16]
 800658e:	615a      	str	r2, [r3, #20]
 8006590:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006592:	4b27      	ldr	r3, [pc, #156]	; (8006630 <MX_TIM4_Init+0xc0>)
 8006594:	4a27      	ldr	r2, [pc, #156]	; (8006634 <MX_TIM4_Init+0xc4>)
 8006596:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006598:	4b25      	ldr	r3, [pc, #148]	; (8006630 <MX_TIM4_Init+0xc0>)
 800659a:	2200      	movs	r2, #0
 800659c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800659e:	4b24      	ldr	r3, [pc, #144]	; (8006630 <MX_TIM4_Init+0xc0>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80065a4:	4b22      	ldr	r3, [pc, #136]	; (8006630 <MX_TIM4_Init+0xc0>)
 80065a6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80065aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065ac:	4b20      	ldr	r3, [pc, #128]	; (8006630 <MX_TIM4_Init+0xc0>)
 80065ae:	2200      	movs	r2, #0
 80065b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065b2:	4b1f      	ldr	r3, [pc, #124]	; (8006630 <MX_TIM4_Init+0xc0>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80065b8:	481d      	ldr	r0, [pc, #116]	; (8006630 <MX_TIM4_Init+0xc0>)
 80065ba:	f008 fac4 	bl	800eb46 <HAL_TIM_PWM_Init>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80065c4:	f000 fb56 	bl	8006c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065c8:	2300      	movs	r3, #0
 80065ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065cc:	2300      	movs	r3, #0
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80065d0:	f107 0320 	add.w	r3, r7, #32
 80065d4:	4619      	mov	r1, r3
 80065d6:	4816      	ldr	r0, [pc, #88]	; (8006630 <MX_TIM4_Init+0xc0>)
 80065d8:	f009 f854 	bl	800f684 <HAL_TIMEx_MasterConfigSynchronization>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80065e2:	f000 fb47 	bl	8006c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065e6:	2360      	movs	r3, #96	; 0x60
 80065e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065f2:	2300      	movs	r3, #0
 80065f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80065f6:	1d3b      	adds	r3, r7, #4
 80065f8:	2208      	movs	r2, #8
 80065fa:	4619      	mov	r1, r3
 80065fc:	480c      	ldr	r0, [pc, #48]	; (8006630 <MX_TIM4_Init+0xc0>)
 80065fe:	f008 fcdd 	bl	800efbc <HAL_TIM_PWM_ConfigChannel>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006608:	f000 fb34 	bl	8006c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800660c:	1d3b      	adds	r3, r7, #4
 800660e:	220c      	movs	r2, #12
 8006610:	4619      	mov	r1, r3
 8006612:	4807      	ldr	r0, [pc, #28]	; (8006630 <MX_TIM4_Init+0xc0>)
 8006614:	f008 fcd2 	bl	800efbc <HAL_TIM_PWM_ConfigChannel>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800661e:	f000 fb29 	bl	8006c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006622:	4803      	ldr	r0, [pc, #12]	; (8006630 <MX_TIM4_Init+0xc0>)
 8006624:	f000 ff16 	bl	8007454 <HAL_TIM_MspPostInit>

}
 8006628:	bf00      	nop
 800662a:	3728      	adds	r7, #40	; 0x28
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}
 8006630:	20044724 	.word	0x20044724
 8006634:	40000800 	.word	0x40000800

08006638 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800663e:	463b      	mov	r3, r7
 8006640:	2200      	movs	r2, #0
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006646:	4b15      	ldr	r3, [pc, #84]	; (800669c <MX_TIM6_Init+0x64>)
 8006648:	4a15      	ldr	r2, [pc, #84]	; (80066a0 <MX_TIM6_Init+0x68>)
 800664a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 800664c:	4b13      	ldr	r3, [pc, #76]	; (800669c <MX_TIM6_Init+0x64>)
 800664e:	2259      	movs	r2, #89	; 0x59
 8006650:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006652:	4b12      	ldr	r3, [pc, #72]	; (800669c <MX_TIM6_Init+0x64>)
 8006654:	2200      	movs	r2, #0
 8006656:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006658:	4b10      	ldr	r3, [pc, #64]	; (800669c <MX_TIM6_Init+0x64>)
 800665a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800665e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006660:	4b0e      	ldr	r3, [pc, #56]	; (800669c <MX_TIM6_Init+0x64>)
 8006662:	2280      	movs	r2, #128	; 0x80
 8006664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006666:	480d      	ldr	r0, [pc, #52]	; (800669c <MX_TIM6_Init+0x64>)
 8006668:	f008 fa1e 	bl	800eaa8 <HAL_TIM_Base_Init>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006672:	f000 faff 	bl	8006c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006676:	2300      	movs	r3, #0
 8006678:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800667a:	2300      	movs	r3, #0
 800667c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800667e:	463b      	mov	r3, r7
 8006680:	4619      	mov	r1, r3
 8006682:	4806      	ldr	r0, [pc, #24]	; (800669c <MX_TIM6_Init+0x64>)
 8006684:	f008 fffe 	bl	800f684 <HAL_TIMEx_MasterConfigSynchronization>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800668e:	f000 faf1 	bl	8006c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	200449c0 	.word	0x200449c0
 80066a0:	40001000 	.word	0x40001000

080066a4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066aa:	463b      	mov	r3, r7
 80066ac:	2200      	movs	r2, #0
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80066b2:	4b14      	ldr	r3, [pc, #80]	; (8006704 <MX_TIM7_Init+0x60>)
 80066b4:	4a14      	ldr	r2, [pc, #80]	; (8006708 <MX_TIM7_Init+0x64>)
 80066b6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80066b8:	4b12      	ldr	r3, [pc, #72]	; (8006704 <MX_TIM7_Init+0x60>)
 80066ba:	22b3      	movs	r2, #179	; 0xb3
 80066bc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066be:	4b11      	ldr	r3, [pc, #68]	; (8006704 <MX_TIM7_Init+0x60>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80066c4:	4b0f      	ldr	r3, [pc, #60]	; (8006704 <MX_TIM7_Init+0x60>)
 80066c6:	2231      	movs	r2, #49	; 0x31
 80066c8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80066ca:	4b0e      	ldr	r3, [pc, #56]	; (8006704 <MX_TIM7_Init+0x60>)
 80066cc:	2280      	movs	r2, #128	; 0x80
 80066ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80066d0:	480c      	ldr	r0, [pc, #48]	; (8006704 <MX_TIM7_Init+0x60>)
 80066d2:	f008 f9e9 	bl	800eaa8 <HAL_TIM_Base_Init>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80066dc:	f000 faca 	bl	8006c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066e0:	2300      	movs	r3, #0
 80066e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066e4:	2300      	movs	r3, #0
 80066e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80066e8:	463b      	mov	r3, r7
 80066ea:	4619      	mov	r1, r3
 80066ec:	4805      	ldr	r0, [pc, #20]	; (8006704 <MX_TIM7_Init+0x60>)
 80066ee:	f008 ffc9 	bl	800f684 <HAL_TIMEx_MasterConfigSynchronization>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d001      	beq.n	80066fc <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80066f8:	f000 fabc 	bl	8006c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	20044b64 	.word	0x20044b64
 8006708:	40001400 	.word	0x40001400

0800670c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b08c      	sub	sp, #48	; 0x30
 8006710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006712:	f107 030c 	add.w	r3, r7, #12
 8006716:	2224      	movs	r2, #36	; 0x24
 8006718:	2100      	movs	r1, #0
 800671a:	4618      	mov	r0, r3
 800671c:	f00e fe0f 	bl	801533e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006720:	1d3b      	adds	r3, r7, #4
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006728:	4b22      	ldr	r3, [pc, #136]	; (80067b4 <MX_TIM8_Init+0xa8>)
 800672a:	4a23      	ldr	r2, [pc, #140]	; (80067b8 <MX_TIM8_Init+0xac>)
 800672c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800672e:	4b21      	ldr	r3, [pc, #132]	; (80067b4 <MX_TIM8_Init+0xa8>)
 8006730:	2200      	movs	r2, #0
 8006732:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006734:	4b1f      	ldr	r3, [pc, #124]	; (80067b4 <MX_TIM8_Init+0xa8>)
 8006736:	2210      	movs	r2, #16
 8006738:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800673a:	4b1e      	ldr	r3, [pc, #120]	; (80067b4 <MX_TIM8_Init+0xa8>)
 800673c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006740:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006742:	4b1c      	ldr	r3, [pc, #112]	; (80067b4 <MX_TIM8_Init+0xa8>)
 8006744:	2200      	movs	r2, #0
 8006746:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006748:	4b1a      	ldr	r3, [pc, #104]	; (80067b4 <MX_TIM8_Init+0xa8>)
 800674a:	2200      	movs	r2, #0
 800674c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800674e:	4b19      	ldr	r3, [pc, #100]	; (80067b4 <MX_TIM8_Init+0xa8>)
 8006750:	2200      	movs	r2, #0
 8006752:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006754:	2303      	movs	r3, #3
 8006756:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006758:	2300      	movs	r3, #0
 800675a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800675c:	2301      	movs	r3, #1
 800675e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006760:	2300      	movs	r3, #0
 8006762:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006764:	2300      	movs	r3, #0
 8006766:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006768:	2300      	movs	r3, #0
 800676a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800676c:	2301      	movs	r3, #1
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006770:	2300      	movs	r3, #0
 8006772:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006774:	2300      	movs	r3, #0
 8006776:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006778:	f107 030c 	add.w	r3, r7, #12
 800677c:	4619      	mov	r1, r3
 800677e:	480d      	ldr	r0, [pc, #52]	; (80067b4 <MX_TIM8_Init+0xa8>)
 8006780:	f008 fa4a 	bl	800ec18 <HAL_TIM_Encoder_Init>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800678a:	f000 fa73 	bl	8006c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800678e:	2300      	movs	r3, #0
 8006790:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006792:	2300      	movs	r3, #0
 8006794:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006796:	1d3b      	adds	r3, r7, #4
 8006798:	4619      	mov	r1, r3
 800679a:	4806      	ldr	r0, [pc, #24]	; (80067b4 <MX_TIM8_Init+0xa8>)
 800679c:	f008 ff72 	bl	800f684 <HAL_TIMEx_MasterConfigSynchronization>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80067a6:	f000 fa65 	bl	8006c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80067aa:	bf00      	nop
 80067ac:	3730      	adds	r7, #48	; 0x30
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	200446e4 	.word	0x200446e4
 80067b8:	40010400 	.word	0x40010400

080067bc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b088      	sub	sp, #32
 80067c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80067c2:	1d3b      	adds	r3, r7, #4
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	605a      	str	r2, [r3, #4]
 80067ca:	609a      	str	r2, [r3, #8]
 80067cc:	60da      	str	r2, [r3, #12]
 80067ce:	611a      	str	r2, [r3, #16]
 80067d0:	615a      	str	r2, [r3, #20]
 80067d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80067d4:	4b1e      	ldr	r3, [pc, #120]	; (8006850 <MX_TIM10_Init+0x94>)
 80067d6:	4a1f      	ldr	r2, [pc, #124]	; (8006854 <MX_TIM10_Init+0x98>)
 80067d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 80067da:	4b1d      	ldr	r3, [pc, #116]	; (8006850 <MX_TIM10_Init+0x94>)
 80067dc:	2201      	movs	r2, #1
 80067de:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067e0:	4b1b      	ldr	r3, [pc, #108]	; (8006850 <MX_TIM10_Init+0x94>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 80067e6:	4b1a      	ldr	r3, [pc, #104]	; (8006850 <MX_TIM10_Init+0x94>)
 80067e8:	f242 3227 	movw	r2, #8999	; 0x2327
 80067ec:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067ee:	4b18      	ldr	r3, [pc, #96]	; (8006850 <MX_TIM10_Init+0x94>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067f4:	4b16      	ldr	r3, [pc, #88]	; (8006850 <MX_TIM10_Init+0x94>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80067fa:	4815      	ldr	r0, [pc, #84]	; (8006850 <MX_TIM10_Init+0x94>)
 80067fc:	f008 f954 	bl	800eaa8 <HAL_TIM_Base_Init>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006806:	f000 fa35 	bl	8006c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800680a:	4811      	ldr	r0, [pc, #68]	; (8006850 <MX_TIM10_Init+0x94>)
 800680c:	f008 f99b 	bl	800eb46 <HAL_TIM_PWM_Init>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006816:	f000 fa2d 	bl	8006c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800681a:	2360      	movs	r3, #96	; 0x60
 800681c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800681e:	2300      	movs	r3, #0
 8006820:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006826:	2300      	movs	r3, #0
 8006828:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800682a:	1d3b      	adds	r3, r7, #4
 800682c:	2200      	movs	r2, #0
 800682e:	4619      	mov	r1, r3
 8006830:	4807      	ldr	r0, [pc, #28]	; (8006850 <MX_TIM10_Init+0x94>)
 8006832:	f008 fbc3 	bl	800efbc <HAL_TIM_PWM_ConfigChannel>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800683c:	f000 fa1a 	bl	8006c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006840:	4803      	ldr	r0, [pc, #12]	; (8006850 <MX_TIM10_Init+0x94>)
 8006842:	f000 fe07 	bl	8007454 <HAL_TIM_MspPostInit>

}
 8006846:	bf00      	nop
 8006848:	3720      	adds	r7, #32
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20044800 	.word	0x20044800
 8006854:	40014400 	.word	0x40014400

08006858 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b088      	sub	sp, #32
 800685c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800685e:	1d3b      	adds	r3, r7, #4
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	605a      	str	r2, [r3, #4]
 8006866:	609a      	str	r2, [r3, #8]
 8006868:	60da      	str	r2, [r3, #12]
 800686a:	611a      	str	r2, [r3, #16]
 800686c:	615a      	str	r2, [r3, #20]
 800686e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006870:	4b1e      	ldr	r3, [pc, #120]	; (80068ec <MX_TIM11_Init+0x94>)
 8006872:	4a1f      	ldr	r2, [pc, #124]	; (80068f0 <MX_TIM11_Init+0x98>)
 8006874:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8006876:	4b1d      	ldr	r3, [pc, #116]	; (80068ec <MX_TIM11_Init+0x94>)
 8006878:	2201      	movs	r2, #1
 800687a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800687c:	4b1b      	ldr	r3, [pc, #108]	; (80068ec <MX_TIM11_Init+0x94>)
 800687e:	2200      	movs	r2, #0
 8006880:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 8006882:	4b1a      	ldr	r3, [pc, #104]	; (80068ec <MX_TIM11_Init+0x94>)
 8006884:	f242 3227 	movw	r2, #8999	; 0x2327
 8006888:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800688a:	4b18      	ldr	r3, [pc, #96]	; (80068ec <MX_TIM11_Init+0x94>)
 800688c:	2200      	movs	r2, #0
 800688e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006890:	4b16      	ldr	r3, [pc, #88]	; (80068ec <MX_TIM11_Init+0x94>)
 8006892:	2200      	movs	r2, #0
 8006894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006896:	4815      	ldr	r0, [pc, #84]	; (80068ec <MX_TIM11_Init+0x94>)
 8006898:	f008 f906 	bl	800eaa8 <HAL_TIM_Base_Init>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80068a2:	f000 f9e7 	bl	8006c74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80068a6:	4811      	ldr	r0, [pc, #68]	; (80068ec <MX_TIM11_Init+0x94>)
 80068a8:	f008 f94d 	bl	800eb46 <HAL_TIM_PWM_Init>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80068b2:	f000 f9df 	bl	8006c74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80068b6:	2360      	movs	r3, #96	; 0x60
 80068b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80068ba:	2300      	movs	r3, #0
 80068bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80068be:	2300      	movs	r3, #0
 80068c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80068c2:	2300      	movs	r3, #0
 80068c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80068c6:	1d3b      	adds	r3, r7, #4
 80068c8:	2200      	movs	r2, #0
 80068ca:	4619      	mov	r1, r3
 80068cc:	4807      	ldr	r0, [pc, #28]	; (80068ec <MX_TIM11_Init+0x94>)
 80068ce:	f008 fb75 	bl	800efbc <HAL_TIM_PWM_ConfigChannel>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d001      	beq.n	80068dc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80068d8:	f000 f9cc 	bl	8006c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80068dc:	4803      	ldr	r0, [pc, #12]	; (80068ec <MX_TIM11_Init+0x94>)
 80068de:	f000 fdb9 	bl	8007454 <HAL_TIM_MspPostInit>

}
 80068e2:	bf00      	nop
 80068e4:	3720      	adds	r7, #32
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20044920 	.word	0x20044920
 80068f0:	40014800 	.word	0x40014800

080068f4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80068f8:	4b0e      	ldr	r3, [pc, #56]	; (8006934 <MX_TIM13_Init+0x40>)
 80068fa:	4a0f      	ldr	r2, [pc, #60]	; (8006938 <MX_TIM13_Init+0x44>)
 80068fc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80068fe:	4b0d      	ldr	r3, [pc, #52]	; (8006934 <MX_TIM13_Init+0x40>)
 8006900:	2259      	movs	r2, #89	; 0x59
 8006902:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006904:	4b0b      	ldr	r3, [pc, #44]	; (8006934 <MX_TIM13_Init+0x40>)
 8006906:	2200      	movs	r2, #0
 8006908:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800690a:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <MX_TIM13_Init+0x40>)
 800690c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006910:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006912:	4b08      	ldr	r3, [pc, #32]	; (8006934 <MX_TIM13_Init+0x40>)
 8006914:	2200      	movs	r2, #0
 8006916:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006918:	4b06      	ldr	r3, [pc, #24]	; (8006934 <MX_TIM13_Init+0x40>)
 800691a:	2280      	movs	r2, #128	; 0x80
 800691c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800691e:	4805      	ldr	r0, [pc, #20]	; (8006934 <MX_TIM13_Init+0x40>)
 8006920:	f008 f8c2 	bl	800eaa8 <HAL_TIM_Base_Init>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800692a:	f000 f9a3 	bl	8006c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800692e:	bf00      	nop
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	200448e0 	.word	0x200448e0
 8006938:	40001c00 	.word	0x40001c00

0800693c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006940:	4b11      	ldr	r3, [pc, #68]	; (8006988 <MX_USART2_UART_Init+0x4c>)
 8006942:	4a12      	ldr	r2, [pc, #72]	; (800698c <MX_USART2_UART_Init+0x50>)
 8006944:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006946:	4b10      	ldr	r3, [pc, #64]	; (8006988 <MX_USART2_UART_Init+0x4c>)
 8006948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800694c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800694e:	4b0e      	ldr	r3, [pc, #56]	; (8006988 <MX_USART2_UART_Init+0x4c>)
 8006950:	2200      	movs	r2, #0
 8006952:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006954:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <MX_USART2_UART_Init+0x4c>)
 8006956:	2200      	movs	r2, #0
 8006958:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800695a:	4b0b      	ldr	r3, [pc, #44]	; (8006988 <MX_USART2_UART_Init+0x4c>)
 800695c:	2200      	movs	r2, #0
 800695e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006960:	4b09      	ldr	r3, [pc, #36]	; (8006988 <MX_USART2_UART_Init+0x4c>)
 8006962:	220c      	movs	r2, #12
 8006964:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006966:	4b08      	ldr	r3, [pc, #32]	; (8006988 <MX_USART2_UART_Init+0x4c>)
 8006968:	2200      	movs	r2, #0
 800696a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800696c:	4b06      	ldr	r3, [pc, #24]	; (8006988 <MX_USART2_UART_Init+0x4c>)
 800696e:	2200      	movs	r2, #0
 8006970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006972:	4805      	ldr	r0, [pc, #20]	; (8006988 <MX_USART2_UART_Init+0x4c>)
 8006974:	f008 ff68 	bl	800f848 <HAL_UART_Init>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800697e:	f000 f979 	bl	8006c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006982:	bf00      	nop
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	20044ac4 	.word	0x20044ac4
 800698c:	40004400 	.word	0x40004400

08006990 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006996:	2300      	movs	r3, #0
 8006998:	607b      	str	r3, [r7, #4]
 800699a:	4b14      	ldr	r3, [pc, #80]	; (80069ec <MX_DMA_Init+0x5c>)
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	4a13      	ldr	r2, [pc, #76]	; (80069ec <MX_DMA_Init+0x5c>)
 80069a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069a4:	6313      	str	r3, [r2, #48]	; 0x30
 80069a6:	4b11      	ldr	r3, [pc, #68]	; (80069ec <MX_DMA_Init+0x5c>)
 80069a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ae:	607b      	str	r3, [r7, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80069b2:	2200      	movs	r2, #0
 80069b4:	2100      	movs	r1, #0
 80069b6:	203a      	movs	r0, #58	; 0x3a
 80069b8:	f003 fc41 	bl	800a23e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80069bc:	203a      	movs	r0, #58	; 0x3a
 80069be:	f003 fc5a 	bl	800a276 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80069c2:	2200      	movs	r2, #0
 80069c4:	2100      	movs	r1, #0
 80069c6:	203b      	movs	r0, #59	; 0x3b
 80069c8:	f003 fc39 	bl	800a23e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80069cc:	203b      	movs	r0, #59	; 0x3b
 80069ce:	f003 fc52 	bl	800a276 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80069d2:	2200      	movs	r2, #0
 80069d4:	2100      	movs	r1, #0
 80069d6:	2045      	movs	r0, #69	; 0x45
 80069d8:	f003 fc31 	bl	800a23e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80069dc:	2045      	movs	r0, #69	; 0x45
 80069de:	f003 fc4a 	bl	800a276 <HAL_NVIC_EnableIRQ>

}
 80069e2:	bf00      	nop
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	40023800 	.word	0x40023800

080069f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08c      	sub	sp, #48	; 0x30
 80069f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069f6:	f107 031c 	add.w	r3, r7, #28
 80069fa:	2200      	movs	r2, #0
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	605a      	str	r2, [r3, #4]
 8006a00:	609a      	str	r2, [r3, #8]
 8006a02:	60da      	str	r2, [r3, #12]
 8006a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a06:	2300      	movs	r3, #0
 8006a08:	61bb      	str	r3, [r7, #24]
 8006a0a:	4b94      	ldr	r3, [pc, #592]	; (8006c5c <MX_GPIO_Init+0x26c>)
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0e:	4a93      	ldr	r2, [pc, #588]	; (8006c5c <MX_GPIO_Init+0x26c>)
 8006a10:	f043 0310 	orr.w	r3, r3, #16
 8006a14:	6313      	str	r3, [r2, #48]	; 0x30
 8006a16:	4b91      	ldr	r3, [pc, #580]	; (8006c5c <MX_GPIO_Init+0x26c>)
 8006a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1a:	f003 0310 	and.w	r3, r3, #16
 8006a1e:	61bb      	str	r3, [r7, #24]
 8006a20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a22:	2300      	movs	r3, #0
 8006a24:	617b      	str	r3, [r7, #20]
 8006a26:	4b8d      	ldr	r3, [pc, #564]	; (8006c5c <MX_GPIO_Init+0x26c>)
 8006a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2a:	4a8c      	ldr	r2, [pc, #560]	; (8006c5c <MX_GPIO_Init+0x26c>)
 8006a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a30:	6313      	str	r3, [r2, #48]	; 0x30
 8006a32:	4b8a      	ldr	r3, [pc, #552]	; (8006c5c <MX_GPIO_Init+0x26c>)
 8006a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a3e:	2300      	movs	r3, #0
 8006a40:	613b      	str	r3, [r7, #16]
 8006a42:	4b86      	ldr	r3, [pc, #536]	; (8006c5c <MX_GPIO_Init+0x26c>)
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	4a85      	ldr	r2, [pc, #532]	; (8006c5c <MX_GPIO_Init+0x26c>)
 8006a48:	f043 0304 	orr.w	r3, r3, #4
 8006a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a4e:	4b83      	ldr	r3, [pc, #524]	; (8006c5c <MX_GPIO_Init+0x26c>)
 8006a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a52:	f003 0304 	and.w	r3, r3, #4
 8006a56:	613b      	str	r3, [r7, #16]
 8006a58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]
 8006a5e:	4b7f      	ldr	r3, [pc, #508]	; (8006c5c <MX_GPIO_Init+0x26c>)
 8006a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a62:	4a7e      	ldr	r2, [pc, #504]	; (8006c5c <MX_GPIO_Init+0x26c>)
 8006a64:	f043 0301 	orr.w	r3, r3, #1
 8006a68:	6313      	str	r3, [r2, #48]	; 0x30
 8006a6a:	4b7c      	ldr	r3, [pc, #496]	; (8006c5c <MX_GPIO_Init+0x26c>)
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a76:	2300      	movs	r3, #0
 8006a78:	60bb      	str	r3, [r7, #8]
 8006a7a:	4b78      	ldr	r3, [pc, #480]	; (8006c5c <MX_GPIO_Init+0x26c>)
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7e:	4a77      	ldr	r2, [pc, #476]	; (8006c5c <MX_GPIO_Init+0x26c>)
 8006a80:	f043 0302 	orr.w	r3, r3, #2
 8006a84:	6313      	str	r3, [r2, #48]	; 0x30
 8006a86:	4b75      	ldr	r3, [pc, #468]	; (8006c5c <MX_GPIO_Init+0x26c>)
 8006a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	60bb      	str	r3, [r7, #8]
 8006a90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a92:	2300      	movs	r3, #0
 8006a94:	607b      	str	r3, [r7, #4]
 8006a96:	4b71      	ldr	r3, [pc, #452]	; (8006c5c <MX_GPIO_Init+0x26c>)
 8006a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a9a:	4a70      	ldr	r2, [pc, #448]	; (8006c5c <MX_GPIO_Init+0x26c>)
 8006a9c:	f043 0308 	orr.w	r3, r3, #8
 8006aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8006aa2:	4b6e      	ldr	r3, [pc, #440]	; (8006c5c <MX_GPIO_Init+0x26c>)
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa6:	f003 0308 	and.w	r3, r3, #8
 8006aaa:	607b      	str	r3, [r7, #4]
 8006aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ab4:	486a      	ldr	r0, [pc, #424]	; (8006c60 <MX_GPIO_Init+0x270>)
 8006ab6:	f004 f957 	bl	800ad68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006aba:	2200      	movs	r2, #0
 8006abc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ac0:	4868      	ldr	r0, [pc, #416]	; (8006c64 <MX_GPIO_Init+0x274>)
 8006ac2:	f004 f951 	bl	800ad68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006acc:	4866      	ldr	r0, [pc, #408]	; (8006c68 <MX_GPIO_Init+0x278>)
 8006ace:	f004 f94b 	bl	800ad68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006ad8:	4864      	ldr	r0, [pc, #400]	; (8006c6c <MX_GPIO_Init+0x27c>)
 8006ada:	f004 f945 	bl	800ad68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006ade:	2304      	movs	r3, #4
 8006ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006aea:	f107 031c 	add.w	r3, r7, #28
 8006aee:	4619      	mov	r1, r3
 8006af0:	485b      	ldr	r0, [pc, #364]	; (8006c60 <MX_GPIO_Init+0x270>)
 8006af2:	f003 ff77 	bl	800a9e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006af6:	230f      	movs	r3, #15
 8006af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006afa:	2303      	movs	r3, #3
 8006afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b02:	f107 031c 	add.w	r3, r7, #28
 8006b06:	4619      	mov	r1, r3
 8006b08:	4859      	ldr	r0, [pc, #356]	; (8006c70 <MX_GPIO_Init+0x280>)
 8006b0a:	f003 ff6b 	bl	800a9e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006b0e:	23e1      	movs	r3, #225	; 0xe1
 8006b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b12:	2303      	movs	r3, #3
 8006b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b1a:	f107 031c 	add.w	r3, r7, #28
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4852      	ldr	r0, [pc, #328]	; (8006c6c <MX_GPIO_Init+0x27c>)
 8006b22:	f003 ff5f 	bl	800a9e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006b26:	2303      	movs	r3, #3
 8006b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b32:	f107 031c 	add.w	r3, r7, #28
 8006b36:	4619      	mov	r1, r3
 8006b38:	484a      	ldr	r0, [pc, #296]	; (8006c64 <MX_GPIO_Init+0x274>)
 8006b3a:	f003 ff53 	bl	800a9e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006b3e:	2304      	movs	r3, #4
 8006b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b42:	2300      	movs	r3, #0
 8006b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b46:	2301      	movs	r3, #1
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b4a:	f107 031c 	add.w	r3, r7, #28
 8006b4e:	4619      	mov	r1, r3
 8006b50:	4844      	ldr	r0, [pc, #272]	; (8006c64 <MX_GPIO_Init+0x274>)
 8006b52:	f003 ff47 	bl	800a9e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006b56:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006b5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b60:	2301      	movs	r3, #1
 8006b62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b64:	f107 031c 	add.w	r3, r7, #28
 8006b68:	4619      	mov	r1, r3
 8006b6a:	483d      	ldr	r0, [pc, #244]	; (8006c60 <MX_GPIO_Init+0x270>)
 8006b6c:	f003 ff3a 	bl	800a9e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006b70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b76:	2301      	movs	r3, #1
 8006b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b82:	f107 031c 	add.w	r3, r7, #28
 8006b86:	4619      	mov	r1, r3
 8006b88:	4835      	ldr	r0, [pc, #212]	; (8006c60 <MX_GPIO_Init+0x270>)
 8006b8a:	f003 ff2b 	bl	800a9e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b94:	2301      	movs	r3, #1
 8006b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ba0:	f107 031c 	add.w	r3, r7, #28
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	482f      	ldr	r0, [pc, #188]	; (8006c64 <MX_GPIO_Init+0x274>)
 8006ba8:	f003 ff1c 	bl	800a9e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006bac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bba:	f107 031c 	add.w	r3, r7, #28
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4829      	ldr	r0, [pc, #164]	; (8006c68 <MX_GPIO_Init+0x278>)
 8006bc2:	f003 ff0f 	bl	800a9e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006bc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bd8:	f107 031c 	add.w	r3, r7, #28
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4822      	ldr	r0, [pc, #136]	; (8006c68 <MX_GPIO_Init+0x278>)
 8006be0:	f003 ff00 	bl	800a9e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bea:	2301      	movs	r3, #1
 8006bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bf6:	f107 031c 	add.w	r3, r7, #28
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	481a      	ldr	r0, [pc, #104]	; (8006c68 <MX_GPIO_Init+0x278>)
 8006bfe:	f003 fef1 	bl	800a9e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006c02:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006c06:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c10:	2300      	movs	r3, #0
 8006c12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c14:	f107 031c 	add.w	r3, r7, #28
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4814      	ldr	r0, [pc, #80]	; (8006c6c <MX_GPIO_Init+0x27c>)
 8006c1c:	f003 fee2 	bl	800a9e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006c20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c26:	2300      	movs	r3, #0
 8006c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c2e:	f107 031c 	add.w	r3, r7, #28
 8006c32:	4619      	mov	r1, r3
 8006c34:	480d      	ldr	r0, [pc, #52]	; (8006c6c <MX_GPIO_Init+0x27c>)
 8006c36:	f003 fed5 	bl	800a9e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006c3a:	239b      	movs	r3, #155	; 0x9b
 8006c3c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c42:	2301      	movs	r3, #1
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c46:	f107 031c 	add.w	r3, r7, #28
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	4806      	ldr	r0, [pc, #24]	; (8006c68 <MX_GPIO_Init+0x278>)
 8006c4e:	f003 fec9 	bl	800a9e4 <HAL_GPIO_Init>

}
 8006c52:	bf00      	nop
 8006c54:	3730      	adds	r7, #48	; 0x30
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	40023800 	.word	0x40023800
 8006c60:	40021000 	.word	0x40021000
 8006c64:	40020400 	.word	0x40020400
 8006c68:	40020c00 	.word	0x40020c00
 8006c6c:	40020000 	.word	0x40020000
 8006c70:	40020800 	.word	0x40020800

08006c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006c78:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006c7a:	e7fe      	b.n	8006c7a <Error_Handler+0x6>

08006c7c <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006c80:	bf00      	nop
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
	...

08006c8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c92:	2300      	movs	r3, #0
 8006c94:	607b      	str	r3, [r7, #4]
 8006c96:	4b10      	ldr	r3, [pc, #64]	; (8006cd8 <HAL_MspInit+0x4c>)
 8006c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c9a:	4a0f      	ldr	r2, [pc, #60]	; (8006cd8 <HAL_MspInit+0x4c>)
 8006c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8006ca2:	4b0d      	ldr	r3, [pc, #52]	; (8006cd8 <HAL_MspInit+0x4c>)
 8006ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006caa:	607b      	str	r3, [r7, #4]
 8006cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006cae:	2300      	movs	r3, #0
 8006cb0:	603b      	str	r3, [r7, #0]
 8006cb2:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <HAL_MspInit+0x4c>)
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	4a08      	ldr	r2, [pc, #32]	; (8006cd8 <HAL_MspInit+0x4c>)
 8006cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006cbe:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <HAL_MspInit+0x4c>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cc6:	603b      	str	r3, [r7, #0]
 8006cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	40023800 	.word	0x40023800

08006cdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08c      	sub	sp, #48	; 0x30
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ce4:	f107 031c 	add.w	r3, r7, #28
 8006ce8:	2200      	movs	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]
 8006cec:	605a      	str	r2, [r3, #4]
 8006cee:	609a      	str	r2, [r3, #8]
 8006cf0:	60da      	str	r2, [r3, #12]
 8006cf2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a4a      	ldr	r2, [pc, #296]	; (8006e24 <HAL_ADC_MspInit+0x148>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	f040 808e 	bne.w	8006e1c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006d00:	2300      	movs	r3, #0
 8006d02:	61bb      	str	r3, [r7, #24]
 8006d04:	4b48      	ldr	r3, [pc, #288]	; (8006e28 <HAL_ADC_MspInit+0x14c>)
 8006d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d08:	4a47      	ldr	r2, [pc, #284]	; (8006e28 <HAL_ADC_MspInit+0x14c>)
 8006d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d0e:	6453      	str	r3, [r2, #68]	; 0x44
 8006d10:	4b45      	ldr	r3, [pc, #276]	; (8006e28 <HAL_ADC_MspInit+0x14c>)
 8006d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d18:	61bb      	str	r3, [r7, #24]
 8006d1a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	4b41      	ldr	r3, [pc, #260]	; (8006e28 <HAL_ADC_MspInit+0x14c>)
 8006d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d24:	4a40      	ldr	r2, [pc, #256]	; (8006e28 <HAL_ADC_MspInit+0x14c>)
 8006d26:	f043 0304 	orr.w	r3, r3, #4
 8006d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8006d2c:	4b3e      	ldr	r3, [pc, #248]	; (8006e28 <HAL_ADC_MspInit+0x14c>)
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	617b      	str	r3, [r7, #20]
 8006d36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d38:	2300      	movs	r3, #0
 8006d3a:	613b      	str	r3, [r7, #16]
 8006d3c:	4b3a      	ldr	r3, [pc, #232]	; (8006e28 <HAL_ADC_MspInit+0x14c>)
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d40:	4a39      	ldr	r2, [pc, #228]	; (8006e28 <HAL_ADC_MspInit+0x14c>)
 8006d42:	f043 0301 	orr.w	r3, r3, #1
 8006d46:	6313      	str	r3, [r2, #48]	; 0x30
 8006d48:	4b37      	ldr	r3, [pc, #220]	; (8006e28 <HAL_ADC_MspInit+0x14c>)
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	613b      	str	r3, [r7, #16]
 8006d52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d54:	2300      	movs	r3, #0
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	4b33      	ldr	r3, [pc, #204]	; (8006e28 <HAL_ADC_MspInit+0x14c>)
 8006d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5c:	4a32      	ldr	r2, [pc, #200]	; (8006e28 <HAL_ADC_MspInit+0x14c>)
 8006d5e:	f043 0302 	orr.w	r3, r3, #2
 8006d62:	6313      	str	r3, [r2, #48]	; 0x30
 8006d64:	4b30      	ldr	r3, [pc, #192]	; (8006e28 <HAL_ADC_MspInit+0x14c>)
 8006d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	60fb      	str	r3, [r7, #12]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006d70:	230f      	movs	r3, #15
 8006d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d74:	2303      	movs	r3, #3
 8006d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d7c:	f107 031c 	add.w	r3, r7, #28
 8006d80:	4619      	mov	r1, r3
 8006d82:	482a      	ldr	r0, [pc, #168]	; (8006e2c <HAL_ADC_MspInit+0x150>)
 8006d84:	f003 fe2e 	bl	800a9e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006d88:	23ff      	movs	r3, #255	; 0xff
 8006d8a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d90:	2300      	movs	r3, #0
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d94:	f107 031c 	add.w	r3, r7, #28
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4825      	ldr	r0, [pc, #148]	; (8006e30 <HAL_ADC_MspInit+0x154>)
 8006d9c:	f003 fe22 	bl	800a9e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006da0:	2303      	movs	r3, #3
 8006da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006da4:	2303      	movs	r3, #3
 8006da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006da8:	2300      	movs	r3, #0
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dac:	f107 031c 	add.w	r3, r7, #28
 8006db0:	4619      	mov	r1, r3
 8006db2:	4820      	ldr	r0, [pc, #128]	; (8006e34 <HAL_ADC_MspInit+0x158>)
 8006db4:	f003 fe16 	bl	800a9e4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006db8:	4b1f      	ldr	r3, [pc, #124]	; (8006e38 <HAL_ADC_MspInit+0x15c>)
 8006dba:	4a20      	ldr	r2, [pc, #128]	; (8006e3c <HAL_ADC_MspInit+0x160>)
 8006dbc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006dbe:	4b1e      	ldr	r3, [pc, #120]	; (8006e38 <HAL_ADC_MspInit+0x15c>)
 8006dc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006dc4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006dc6:	4b1c      	ldr	r3, [pc, #112]	; (8006e38 <HAL_ADC_MspInit+0x15c>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dcc:	4b1a      	ldr	r3, [pc, #104]	; (8006e38 <HAL_ADC_MspInit+0x15c>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006dd2:	4b19      	ldr	r3, [pc, #100]	; (8006e38 <HAL_ADC_MspInit+0x15c>)
 8006dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006dd8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006dda:	4b17      	ldr	r3, [pc, #92]	; (8006e38 <HAL_ADC_MspInit+0x15c>)
 8006ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006de0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006de2:	4b15      	ldr	r3, [pc, #84]	; (8006e38 <HAL_ADC_MspInit+0x15c>)
 8006de4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006de8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006dea:	4b13      	ldr	r3, [pc, #76]	; (8006e38 <HAL_ADC_MspInit+0x15c>)
 8006dec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006df0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006df2:	4b11      	ldr	r3, [pc, #68]	; (8006e38 <HAL_ADC_MspInit+0x15c>)
 8006df4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006df8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006dfa:	4b0f      	ldr	r3, [pc, #60]	; (8006e38 <HAL_ADC_MspInit+0x15c>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006e00:	480d      	ldr	r0, [pc, #52]	; (8006e38 <HAL_ADC_MspInit+0x15c>)
 8006e02:	f003 fa53 	bl	800a2ac <HAL_DMA_Init>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006e0c:	f7ff ff32 	bl	8006c74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a09      	ldr	r2, [pc, #36]	; (8006e38 <HAL_ADC_MspInit+0x15c>)
 8006e14:	639a      	str	r2, [r3, #56]	; 0x38
 8006e16:	4a08      	ldr	r2, [pc, #32]	; (8006e38 <HAL_ADC_MspInit+0x15c>)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006e1c:	bf00      	nop
 8006e1e:	3730      	adds	r7, #48	; 0x30
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	40012100 	.word	0x40012100
 8006e28:	40023800 	.word	0x40023800
 8006e2c:	40020800 	.word	0x40020800
 8006e30:	40020000 	.word	0x40020000
 8006e34:	40020400 	.word	0x40020400
 8006e38:	20044b04 	.word	0x20044b04
 8006e3c:	40026440 	.word	0x40026440

08006e40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08c      	sub	sp, #48	; 0x30
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e48:	f107 031c 	add.w	r3, r7, #28
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	601a      	str	r2, [r3, #0]
 8006e50:	605a      	str	r2, [r3, #4]
 8006e52:	609a      	str	r2, [r3, #8]
 8006e54:	60da      	str	r2, [r3, #12]
 8006e56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a32      	ldr	r2, [pc, #200]	; (8006f28 <HAL_I2C_MspInit+0xe8>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d12c      	bne.n	8006ebc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e62:	2300      	movs	r3, #0
 8006e64:	61bb      	str	r3, [r7, #24]
 8006e66:	4b31      	ldr	r3, [pc, #196]	; (8006f2c <HAL_I2C_MspInit+0xec>)
 8006e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6a:	4a30      	ldr	r2, [pc, #192]	; (8006f2c <HAL_I2C_MspInit+0xec>)
 8006e6c:	f043 0302 	orr.w	r3, r3, #2
 8006e70:	6313      	str	r3, [r2, #48]	; 0x30
 8006e72:	4b2e      	ldr	r3, [pc, #184]	; (8006f2c <HAL_I2C_MspInit+0xec>)
 8006e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	61bb      	str	r3, [r7, #24]
 8006e7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006e7e:	23c0      	movs	r3, #192	; 0xc0
 8006e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e82:	2312      	movs	r3, #18
 8006e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e86:	2301      	movs	r3, #1
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006e8e:	2304      	movs	r3, #4
 8006e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e92:	f107 031c 	add.w	r3, r7, #28
 8006e96:	4619      	mov	r1, r3
 8006e98:	4825      	ldr	r0, [pc, #148]	; (8006f30 <HAL_I2C_MspInit+0xf0>)
 8006e9a:	f003 fda3 	bl	800a9e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	4b22      	ldr	r3, [pc, #136]	; (8006f2c <HAL_I2C_MspInit+0xec>)
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	4a21      	ldr	r2, [pc, #132]	; (8006f2c <HAL_I2C_MspInit+0xec>)
 8006ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006eac:	6413      	str	r3, [r2, #64]	; 0x40
 8006eae:	4b1f      	ldr	r3, [pc, #124]	; (8006f2c <HAL_I2C_MspInit+0xec>)
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006eb6:	617b      	str	r3, [r7, #20]
 8006eb8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006eba:	e031      	b.n	8006f20 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a1c      	ldr	r2, [pc, #112]	; (8006f34 <HAL_I2C_MspInit+0xf4>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d12c      	bne.n	8006f20 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	613b      	str	r3, [r7, #16]
 8006eca:	4b18      	ldr	r3, [pc, #96]	; (8006f2c <HAL_I2C_MspInit+0xec>)
 8006ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ece:	4a17      	ldr	r2, [pc, #92]	; (8006f2c <HAL_I2C_MspInit+0xec>)
 8006ed0:	f043 0302 	orr.w	r3, r3, #2
 8006ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ed6:	4b15      	ldr	r3, [pc, #84]	; (8006f2c <HAL_I2C_MspInit+0xec>)
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	613b      	str	r3, [r7, #16]
 8006ee0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006ee2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ee8:	2312      	movs	r3, #18
 8006eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006eec:	2301      	movs	r3, #1
 8006eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006ef4:	2304      	movs	r3, #4
 8006ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ef8:	f107 031c 	add.w	r3, r7, #28
 8006efc:	4619      	mov	r1, r3
 8006efe:	480c      	ldr	r0, [pc, #48]	; (8006f30 <HAL_I2C_MspInit+0xf0>)
 8006f00:	f003 fd70 	bl	800a9e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	4b08      	ldr	r3, [pc, #32]	; (8006f2c <HAL_I2C_MspInit+0xec>)
 8006f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0c:	4a07      	ldr	r2, [pc, #28]	; (8006f2c <HAL_I2C_MspInit+0xec>)
 8006f0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f12:	6413      	str	r3, [r2, #64]	; 0x40
 8006f14:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <HAL_I2C_MspInit+0xec>)
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f1c:	60fb      	str	r3, [r7, #12]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
}
 8006f20:	bf00      	nop
 8006f22:	3730      	adds	r7, #48	; 0x30
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	40005400 	.word	0x40005400
 8006f2c:	40023800 	.word	0x40023800
 8006f30:	40020400 	.word	0x40020400
 8006f34:	40005800 	.word	0x40005800

08006f38 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b08a      	sub	sp, #40	; 0x28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f40:	f107 0314 	add.w	r3, r7, #20
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]
 8006f48:	605a      	str	r2, [r3, #4]
 8006f4a:	609a      	str	r2, [r3, #8]
 8006f4c:	60da      	str	r2, [r3, #12]
 8006f4e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a69      	ldr	r2, [pc, #420]	; (80070fc <HAL_SD_MspInit+0x1c4>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	f040 80cb 	bne.w	80070f2 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	613b      	str	r3, [r7, #16]
 8006f60:	4b67      	ldr	r3, [pc, #412]	; (8007100 <HAL_SD_MspInit+0x1c8>)
 8006f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f64:	4a66      	ldr	r2, [pc, #408]	; (8007100 <HAL_SD_MspInit+0x1c8>)
 8006f66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006f6a:	6453      	str	r3, [r2, #68]	; 0x44
 8006f6c:	4b64      	ldr	r3, [pc, #400]	; (8007100 <HAL_SD_MspInit+0x1c8>)
 8006f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f74:	613b      	str	r3, [r7, #16]
 8006f76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f78:	2300      	movs	r3, #0
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	4b60      	ldr	r3, [pc, #384]	; (8007100 <HAL_SD_MspInit+0x1c8>)
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f80:	4a5f      	ldr	r2, [pc, #380]	; (8007100 <HAL_SD_MspInit+0x1c8>)
 8006f82:	f043 0304 	orr.w	r3, r3, #4
 8006f86:	6313      	str	r3, [r2, #48]	; 0x30
 8006f88:	4b5d      	ldr	r3, [pc, #372]	; (8007100 <HAL_SD_MspInit+0x1c8>)
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	f003 0304 	and.w	r3, r3, #4
 8006f90:	60fb      	str	r3, [r7, #12]
 8006f92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f94:	2300      	movs	r3, #0
 8006f96:	60bb      	str	r3, [r7, #8]
 8006f98:	4b59      	ldr	r3, [pc, #356]	; (8007100 <HAL_SD_MspInit+0x1c8>)
 8006f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f9c:	4a58      	ldr	r2, [pc, #352]	; (8007100 <HAL_SD_MspInit+0x1c8>)
 8006f9e:	f043 0308 	orr.w	r3, r3, #8
 8006fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8006fa4:	4b56      	ldr	r3, [pc, #344]	; (8007100 <HAL_SD_MspInit+0x1c8>)
 8006fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	60bb      	str	r3, [r7, #8]
 8006fae:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006fb0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006fb4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006fc2:	230c      	movs	r3, #12
 8006fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fc6:	f107 0314 	add.w	r3, r7, #20
 8006fca:	4619      	mov	r1, r3
 8006fcc:	484d      	ldr	r0, [pc, #308]	; (8007104 <HAL_SD_MspInit+0x1cc>)
 8006fce:	f003 fd09 	bl	800a9e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006fd2:	2304      	movs	r3, #4
 8006fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006fe2:	230c      	movs	r3, #12
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006fe6:	f107 0314 	add.w	r3, r7, #20
 8006fea:	4619      	mov	r1, r3
 8006fec:	4846      	ldr	r0, [pc, #280]	; (8007108 <HAL_SD_MspInit+0x1d0>)
 8006fee:	f003 fcf9 	bl	800a9e4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006ff2:	4b46      	ldr	r3, [pc, #280]	; (800710c <HAL_SD_MspInit+0x1d4>)
 8006ff4:	4a46      	ldr	r2, [pc, #280]	; (8007110 <HAL_SD_MspInit+0x1d8>)
 8006ff6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006ff8:	4b44      	ldr	r3, [pc, #272]	; (800710c <HAL_SD_MspInit+0x1d4>)
 8006ffa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ffe:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007000:	4b42      	ldr	r3, [pc, #264]	; (800710c <HAL_SD_MspInit+0x1d4>)
 8007002:	2200      	movs	r2, #0
 8007004:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007006:	4b41      	ldr	r3, [pc, #260]	; (800710c <HAL_SD_MspInit+0x1d4>)
 8007008:	2200      	movs	r2, #0
 800700a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800700c:	4b3f      	ldr	r3, [pc, #252]	; (800710c <HAL_SD_MspInit+0x1d4>)
 800700e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007012:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007014:	4b3d      	ldr	r3, [pc, #244]	; (800710c <HAL_SD_MspInit+0x1d4>)
 8007016:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800701a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800701c:	4b3b      	ldr	r3, [pc, #236]	; (800710c <HAL_SD_MspInit+0x1d4>)
 800701e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007022:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8007024:	4b39      	ldr	r3, [pc, #228]	; (800710c <HAL_SD_MspInit+0x1d4>)
 8007026:	2220      	movs	r2, #32
 8007028:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800702a:	4b38      	ldr	r3, [pc, #224]	; (800710c <HAL_SD_MspInit+0x1d4>)
 800702c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007030:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007032:	4b36      	ldr	r3, [pc, #216]	; (800710c <HAL_SD_MspInit+0x1d4>)
 8007034:	2204      	movs	r2, #4
 8007036:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007038:	4b34      	ldr	r3, [pc, #208]	; (800710c <HAL_SD_MspInit+0x1d4>)
 800703a:	2203      	movs	r2, #3
 800703c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800703e:	4b33      	ldr	r3, [pc, #204]	; (800710c <HAL_SD_MspInit+0x1d4>)
 8007040:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007044:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007046:	4b31      	ldr	r3, [pc, #196]	; (800710c <HAL_SD_MspInit+0x1d4>)
 8007048:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800704c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800704e:	482f      	ldr	r0, [pc, #188]	; (800710c <HAL_SD_MspInit+0x1d4>)
 8007050:	f003 f92c 	bl	800a2ac <HAL_DMA_Init>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800705a:	f7ff fe0b 	bl	8006c74 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a2a      	ldr	r2, [pc, #168]	; (800710c <HAL_SD_MspInit+0x1d4>)
 8007062:	641a      	str	r2, [r3, #64]	; 0x40
 8007064:	4a29      	ldr	r2, [pc, #164]	; (800710c <HAL_SD_MspInit+0x1d4>)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800706a:	4b2a      	ldr	r3, [pc, #168]	; (8007114 <HAL_SD_MspInit+0x1dc>)
 800706c:	4a2a      	ldr	r2, [pc, #168]	; (8007118 <HAL_SD_MspInit+0x1e0>)
 800706e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8007070:	4b28      	ldr	r3, [pc, #160]	; (8007114 <HAL_SD_MspInit+0x1dc>)
 8007072:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007076:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007078:	4b26      	ldr	r3, [pc, #152]	; (8007114 <HAL_SD_MspInit+0x1dc>)
 800707a:	2240      	movs	r2, #64	; 0x40
 800707c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800707e:	4b25      	ldr	r3, [pc, #148]	; (8007114 <HAL_SD_MspInit+0x1dc>)
 8007080:	2200      	movs	r2, #0
 8007082:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007084:	4b23      	ldr	r3, [pc, #140]	; (8007114 <HAL_SD_MspInit+0x1dc>)
 8007086:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800708a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800708c:	4b21      	ldr	r3, [pc, #132]	; (8007114 <HAL_SD_MspInit+0x1dc>)
 800708e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007092:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007094:	4b1f      	ldr	r3, [pc, #124]	; (8007114 <HAL_SD_MspInit+0x1dc>)
 8007096:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800709a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800709c:	4b1d      	ldr	r3, [pc, #116]	; (8007114 <HAL_SD_MspInit+0x1dc>)
 800709e:	2220      	movs	r2, #32
 80070a0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80070a2:	4b1c      	ldr	r3, [pc, #112]	; (8007114 <HAL_SD_MspInit+0x1dc>)
 80070a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80070a8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80070aa:	4b1a      	ldr	r3, [pc, #104]	; (8007114 <HAL_SD_MspInit+0x1dc>)
 80070ac:	2204      	movs	r2, #4
 80070ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80070b0:	4b18      	ldr	r3, [pc, #96]	; (8007114 <HAL_SD_MspInit+0x1dc>)
 80070b2:	2203      	movs	r2, #3
 80070b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80070b6:	4b17      	ldr	r3, [pc, #92]	; (8007114 <HAL_SD_MspInit+0x1dc>)
 80070b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80070bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80070be:	4b15      	ldr	r3, [pc, #84]	; (8007114 <HAL_SD_MspInit+0x1dc>)
 80070c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80070c4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80070c6:	4813      	ldr	r0, [pc, #76]	; (8007114 <HAL_SD_MspInit+0x1dc>)
 80070c8:	f003 f8f0 	bl	800a2ac <HAL_DMA_Init>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80070d2:	f7ff fdcf 	bl	8006c74 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a0e      	ldr	r2, [pc, #56]	; (8007114 <HAL_SD_MspInit+0x1dc>)
 80070da:	63da      	str	r2, [r3, #60]	; 0x3c
 80070dc:	4a0d      	ldr	r2, [pc, #52]	; (8007114 <HAL_SD_MspInit+0x1dc>)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80070e2:	2200      	movs	r2, #0
 80070e4:	2100      	movs	r1, #0
 80070e6:	2031      	movs	r0, #49	; 0x31
 80070e8:	f003 f8a9 	bl	800a23e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80070ec:	2031      	movs	r0, #49	; 0x31
 80070ee:	f003 f8c2 	bl	800a276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80070f2:	bf00      	nop
 80070f4:	3728      	adds	r7, #40	; 0x28
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	40012c00 	.word	0x40012c00
 8007100:	40023800 	.word	0x40023800
 8007104:	40020800 	.word	0x40020800
 8007108:	40020c00 	.word	0x40020c00
 800710c:	2004462c 	.word	0x2004462c
 8007110:	40026458 	.word	0x40026458
 8007114:	20044960 	.word	0x20044960
 8007118:	400264a0 	.word	0x400264a0

0800711c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08a      	sub	sp, #40	; 0x28
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007124:	f107 0314 	add.w	r3, r7, #20
 8007128:	2200      	movs	r2, #0
 800712a:	601a      	str	r2, [r3, #0]
 800712c:	605a      	str	r2, [r3, #4]
 800712e:	609a      	str	r2, [r3, #8]
 8007130:	60da      	str	r2, [r3, #12]
 8007132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a19      	ldr	r2, [pc, #100]	; (80071a0 <HAL_SPI_MspInit+0x84>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d12c      	bne.n	8007198 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800713e:	2300      	movs	r3, #0
 8007140:	613b      	str	r3, [r7, #16]
 8007142:	4b18      	ldr	r3, [pc, #96]	; (80071a4 <HAL_SPI_MspInit+0x88>)
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	4a17      	ldr	r2, [pc, #92]	; (80071a4 <HAL_SPI_MspInit+0x88>)
 8007148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800714c:	6413      	str	r3, [r2, #64]	; 0x40
 800714e:	4b15      	ldr	r3, [pc, #84]	; (80071a4 <HAL_SPI_MspInit+0x88>)
 8007150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007156:	613b      	str	r3, [r7, #16]
 8007158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800715a:	2300      	movs	r3, #0
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	4b11      	ldr	r3, [pc, #68]	; (80071a4 <HAL_SPI_MspInit+0x88>)
 8007160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007162:	4a10      	ldr	r2, [pc, #64]	; (80071a4 <HAL_SPI_MspInit+0x88>)
 8007164:	f043 0302 	orr.w	r3, r3, #2
 8007168:	6313      	str	r3, [r2, #48]	; 0x30
 800716a:	4b0e      	ldr	r3, [pc, #56]	; (80071a4 <HAL_SPI_MspInit+0x88>)
 800716c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007176:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800717a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800717c:	2302      	movs	r3, #2
 800717e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007180:	2300      	movs	r3, #0
 8007182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007184:	2303      	movs	r3, #3
 8007186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007188:	2305      	movs	r3, #5
 800718a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800718c:	f107 0314 	add.w	r3, r7, #20
 8007190:	4619      	mov	r1, r3
 8007192:	4805      	ldr	r0, [pc, #20]	; (80071a8 <HAL_SPI_MspInit+0x8c>)
 8007194:	f003 fc26 	bl	800a9e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007198:	bf00      	nop
 800719a:	3728      	adds	r7, #40	; 0x28
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	40003800 	.word	0x40003800
 80071a4:	40023800 	.word	0x40023800
 80071a8:	40020400 	.word	0x40020400

080071ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b08c      	sub	sp, #48	; 0x30
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071b4:	f107 031c 	add.w	r3, r7, #28
 80071b8:	2200      	movs	r2, #0
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	605a      	str	r2, [r3, #4]
 80071be:	609a      	str	r2, [r3, #8]
 80071c0:	60da      	str	r2, [r3, #12]
 80071c2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a2d      	ldr	r2, [pc, #180]	; (8007280 <HAL_TIM_PWM_MspInit+0xd4>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d12d      	bne.n	800722a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80071ce:	2300      	movs	r3, #0
 80071d0:	61bb      	str	r3, [r7, #24]
 80071d2:	4b2c      	ldr	r3, [pc, #176]	; (8007284 <HAL_TIM_PWM_MspInit+0xd8>)
 80071d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071d6:	4a2b      	ldr	r2, [pc, #172]	; (8007284 <HAL_TIM_PWM_MspInit+0xd8>)
 80071d8:	f043 0301 	orr.w	r3, r3, #1
 80071dc:	6453      	str	r3, [r2, #68]	; 0x44
 80071de:	4b29      	ldr	r3, [pc, #164]	; (8007284 <HAL_TIM_PWM_MspInit+0xd8>)
 80071e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	61bb      	str	r3, [r7, #24]
 80071e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80071ea:	2300      	movs	r3, #0
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	4b25      	ldr	r3, [pc, #148]	; (8007284 <HAL_TIM_PWM_MspInit+0xd8>)
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	4a24      	ldr	r2, [pc, #144]	; (8007284 <HAL_TIM_PWM_MspInit+0xd8>)
 80071f4:	f043 0310 	orr.w	r3, r3, #16
 80071f8:	6313      	str	r3, [r2, #48]	; 0x30
 80071fa:	4b22      	ldr	r3, [pc, #136]	; (8007284 <HAL_TIM_PWM_MspInit+0xd8>)
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	f003 0310 	and.w	r3, r3, #16
 8007202:	617b      	str	r3, [r7, #20]
 8007204:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8007206:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800720a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800720c:	2302      	movs	r3, #2
 800720e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007210:	2300      	movs	r3, #0
 8007212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007214:	2300      	movs	r3, #0
 8007216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007218:	2301      	movs	r3, #1
 800721a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800721c:	f107 031c 	add.w	r3, r7, #28
 8007220:	4619      	mov	r1, r3
 8007222:	4819      	ldr	r0, [pc, #100]	; (8007288 <HAL_TIM_PWM_MspInit+0xdc>)
 8007224:	f003 fbde 	bl	800a9e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007228:	e026      	b.n	8007278 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a17      	ldr	r2, [pc, #92]	; (800728c <HAL_TIM_PWM_MspInit+0xe0>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d10e      	bne.n	8007252 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007234:	2300      	movs	r3, #0
 8007236:	613b      	str	r3, [r7, #16]
 8007238:	4b12      	ldr	r3, [pc, #72]	; (8007284 <HAL_TIM_PWM_MspInit+0xd8>)
 800723a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723c:	4a11      	ldr	r2, [pc, #68]	; (8007284 <HAL_TIM_PWM_MspInit+0xd8>)
 800723e:	f043 0302 	orr.w	r3, r3, #2
 8007242:	6413      	str	r3, [r2, #64]	; 0x40
 8007244:	4b0f      	ldr	r3, [pc, #60]	; (8007284 <HAL_TIM_PWM_MspInit+0xd8>)
 8007246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007248:	f003 0302 	and.w	r3, r3, #2
 800724c:	613b      	str	r3, [r7, #16]
 800724e:	693b      	ldr	r3, [r7, #16]
}
 8007250:	e012      	b.n	8007278 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a0e      	ldr	r2, [pc, #56]	; (8007290 <HAL_TIM_PWM_MspInit+0xe4>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d10d      	bne.n	8007278 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	4b08      	ldr	r3, [pc, #32]	; (8007284 <HAL_TIM_PWM_MspInit+0xd8>)
 8007262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007264:	4a07      	ldr	r2, [pc, #28]	; (8007284 <HAL_TIM_PWM_MspInit+0xd8>)
 8007266:	f043 0304 	orr.w	r3, r3, #4
 800726a:	6413      	str	r3, [r2, #64]	; 0x40
 800726c:	4b05      	ldr	r3, [pc, #20]	; (8007284 <HAL_TIM_PWM_MspInit+0xd8>)
 800726e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	68fb      	ldr	r3, [r7, #12]
}
 8007278:	bf00      	nop
 800727a:	3730      	adds	r7, #48	; 0x30
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	40010000 	.word	0x40010000
 8007284:	40023800 	.word	0x40023800
 8007288:	40021000 	.word	0x40021000
 800728c:	40000400 	.word	0x40000400
 8007290:	40000800 	.word	0x40000800

08007294 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a3e      	ldr	r2, [pc, #248]	; (800739c <HAL_TIM_Base_MspInit+0x108>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d116      	bne.n	80072d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80072a6:	2300      	movs	r3, #0
 80072a8:	61fb      	str	r3, [r7, #28]
 80072aa:	4b3d      	ldr	r3, [pc, #244]	; (80073a0 <HAL_TIM_Base_MspInit+0x10c>)
 80072ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ae:	4a3c      	ldr	r2, [pc, #240]	; (80073a0 <HAL_TIM_Base_MspInit+0x10c>)
 80072b0:	f043 0310 	orr.w	r3, r3, #16
 80072b4:	6413      	str	r3, [r2, #64]	; 0x40
 80072b6:	4b3a      	ldr	r3, [pc, #232]	; (80073a0 <HAL_TIM_Base_MspInit+0x10c>)
 80072b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ba:	f003 0310 	and.w	r3, r3, #16
 80072be:	61fb      	str	r3, [r7, #28]
 80072c0:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80072c2:	2200      	movs	r2, #0
 80072c4:	2101      	movs	r1, #1
 80072c6:	2036      	movs	r0, #54	; 0x36
 80072c8:	f002 ffb9 	bl	800a23e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80072cc:	2036      	movs	r0, #54	; 0x36
 80072ce:	f002 ffd2 	bl	800a276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80072d2:	e05e      	b.n	8007392 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a32      	ldr	r2, [pc, #200]	; (80073a4 <HAL_TIM_Base_MspInit+0x110>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d116      	bne.n	800730c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80072de:	2300      	movs	r3, #0
 80072e0:	61bb      	str	r3, [r7, #24]
 80072e2:	4b2f      	ldr	r3, [pc, #188]	; (80073a0 <HAL_TIM_Base_MspInit+0x10c>)
 80072e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e6:	4a2e      	ldr	r2, [pc, #184]	; (80073a0 <HAL_TIM_Base_MspInit+0x10c>)
 80072e8:	f043 0320 	orr.w	r3, r3, #32
 80072ec:	6413      	str	r3, [r2, #64]	; 0x40
 80072ee:	4b2c      	ldr	r3, [pc, #176]	; (80073a0 <HAL_TIM_Base_MspInit+0x10c>)
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	61bb      	str	r3, [r7, #24]
 80072f8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80072fa:	2200      	movs	r2, #0
 80072fc:	2100      	movs	r1, #0
 80072fe:	2037      	movs	r0, #55	; 0x37
 8007300:	f002 ff9d 	bl	800a23e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007304:	2037      	movs	r0, #55	; 0x37
 8007306:	f002 ffb6 	bl	800a276 <HAL_NVIC_EnableIRQ>
}
 800730a:	e042      	b.n	8007392 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a25      	ldr	r2, [pc, #148]	; (80073a8 <HAL_TIM_Base_MspInit+0x114>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d10e      	bne.n	8007334 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	4b21      	ldr	r3, [pc, #132]	; (80073a0 <HAL_TIM_Base_MspInit+0x10c>)
 800731c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731e:	4a20      	ldr	r2, [pc, #128]	; (80073a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007324:	6453      	str	r3, [r2, #68]	; 0x44
 8007326:	4b1e      	ldr	r3, [pc, #120]	; (80073a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800732a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800732e:	617b      	str	r3, [r7, #20]
 8007330:	697b      	ldr	r3, [r7, #20]
}
 8007332:	e02e      	b.n	8007392 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a1c      	ldr	r2, [pc, #112]	; (80073ac <HAL_TIM_Base_MspInit+0x118>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d10e      	bne.n	800735c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800733e:	2300      	movs	r3, #0
 8007340:	613b      	str	r3, [r7, #16]
 8007342:	4b17      	ldr	r3, [pc, #92]	; (80073a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007346:	4a16      	ldr	r2, [pc, #88]	; (80073a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800734c:	6453      	str	r3, [r2, #68]	; 0x44
 800734e:	4b14      	ldr	r3, [pc, #80]	; (80073a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007356:	613b      	str	r3, [r7, #16]
 8007358:	693b      	ldr	r3, [r7, #16]
}
 800735a:	e01a      	b.n	8007392 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a13      	ldr	r2, [pc, #76]	; (80073b0 <HAL_TIM_Base_MspInit+0x11c>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d115      	bne.n	8007392 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007366:	2300      	movs	r3, #0
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	4b0d      	ldr	r3, [pc, #52]	; (80073a0 <HAL_TIM_Base_MspInit+0x10c>)
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	4a0c      	ldr	r2, [pc, #48]	; (80073a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007374:	6413      	str	r3, [r2, #64]	; 0x40
 8007376:	4b0a      	ldr	r3, [pc, #40]	; (80073a0 <HAL_TIM_Base_MspInit+0x10c>)
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007382:	2200      	movs	r2, #0
 8007384:	2100      	movs	r1, #0
 8007386:	202c      	movs	r0, #44	; 0x2c
 8007388:	f002 ff59 	bl	800a23e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800738c:	202c      	movs	r0, #44	; 0x2c
 800738e:	f002 ff72 	bl	800a276 <HAL_NVIC_EnableIRQ>
}
 8007392:	bf00      	nop
 8007394:	3720      	adds	r7, #32
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	40001000 	.word	0x40001000
 80073a0:	40023800 	.word	0x40023800
 80073a4:	40001400 	.word	0x40001400
 80073a8:	40014400 	.word	0x40014400
 80073ac:	40014800 	.word	0x40014800
 80073b0:	40001c00 	.word	0x40001c00

080073b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08a      	sub	sp, #40	; 0x28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073bc:	f107 0314 	add.w	r3, r7, #20
 80073c0:	2200      	movs	r2, #0
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	605a      	str	r2, [r3, #4]
 80073c6:	609a      	str	r2, [r3, #8]
 80073c8:	60da      	str	r2, [r3, #12]
 80073ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a1d      	ldr	r2, [pc, #116]	; (8007448 <HAL_TIM_Encoder_MspInit+0x94>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d133      	bne.n	800743e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80073d6:	2300      	movs	r3, #0
 80073d8:	613b      	str	r3, [r7, #16]
 80073da:	4b1c      	ldr	r3, [pc, #112]	; (800744c <HAL_TIM_Encoder_MspInit+0x98>)
 80073dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073de:	4a1b      	ldr	r2, [pc, #108]	; (800744c <HAL_TIM_Encoder_MspInit+0x98>)
 80073e0:	f043 0302 	orr.w	r3, r3, #2
 80073e4:	6453      	str	r3, [r2, #68]	; 0x44
 80073e6:	4b19      	ldr	r3, [pc, #100]	; (800744c <HAL_TIM_Encoder_MspInit+0x98>)
 80073e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	613b      	str	r3, [r7, #16]
 80073f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073f2:	2300      	movs	r3, #0
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	4b15      	ldr	r3, [pc, #84]	; (800744c <HAL_TIM_Encoder_MspInit+0x98>)
 80073f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fa:	4a14      	ldr	r2, [pc, #80]	; (800744c <HAL_TIM_Encoder_MspInit+0x98>)
 80073fc:	f043 0304 	orr.w	r3, r3, #4
 8007400:	6313      	str	r3, [r2, #48]	; 0x30
 8007402:	4b12      	ldr	r3, [pc, #72]	; (800744c <HAL_TIM_Encoder_MspInit+0x98>)
 8007404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007406:	f003 0304 	and.w	r3, r3, #4
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800740e:	23c0      	movs	r3, #192	; 0xc0
 8007410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007412:	2302      	movs	r3, #2
 8007414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007416:	2300      	movs	r3, #0
 8007418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800741a:	2300      	movs	r3, #0
 800741c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800741e:	2303      	movs	r3, #3
 8007420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007422:	f107 0314 	add.w	r3, r7, #20
 8007426:	4619      	mov	r1, r3
 8007428:	4809      	ldr	r0, [pc, #36]	; (8007450 <HAL_TIM_Encoder_MspInit+0x9c>)
 800742a:	f003 fadb 	bl	800a9e4 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800742e:	2200      	movs	r2, #0
 8007430:	2100      	movs	r1, #0
 8007432:	202c      	movs	r0, #44	; 0x2c
 8007434:	f002 ff03 	bl	800a23e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007438:	202c      	movs	r0, #44	; 0x2c
 800743a:	f002 ff1c 	bl	800a276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800743e:	bf00      	nop
 8007440:	3728      	adds	r7, #40	; 0x28
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	40010400 	.word	0x40010400
 800744c:	40023800 	.word	0x40023800
 8007450:	40020800 	.word	0x40020800

08007454 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08c      	sub	sp, #48	; 0x30
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800745c:	f107 031c 	add.w	r3, r7, #28
 8007460:	2200      	movs	r2, #0
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	605a      	str	r2, [r3, #4]
 8007466:	609a      	str	r2, [r3, #8]
 8007468:	60da      	str	r2, [r3, #12]
 800746a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a5c      	ldr	r2, [pc, #368]	; (80075e4 <HAL_TIM_MspPostInit+0x190>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d11f      	bne.n	80074b6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007476:	2300      	movs	r3, #0
 8007478:	61bb      	str	r3, [r7, #24]
 800747a:	4b5b      	ldr	r3, [pc, #364]	; (80075e8 <HAL_TIM_MspPostInit+0x194>)
 800747c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747e:	4a5a      	ldr	r2, [pc, #360]	; (80075e8 <HAL_TIM_MspPostInit+0x194>)
 8007480:	f043 0310 	orr.w	r3, r3, #16
 8007484:	6313      	str	r3, [r2, #48]	; 0x30
 8007486:	4b58      	ldr	r3, [pc, #352]	; (80075e8 <HAL_TIM_MspPostInit+0x194>)
 8007488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748a:	f003 0310 	and.w	r3, r3, #16
 800748e:	61bb      	str	r3, [r7, #24]
 8007490:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007498:	2302      	movs	r3, #2
 800749a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800749c:	2300      	movs	r3, #0
 800749e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074a0:	2300      	movs	r3, #0
 80074a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80074a4:	2301      	movs	r3, #1
 80074a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80074a8:	f107 031c 	add.w	r3, r7, #28
 80074ac:	4619      	mov	r1, r3
 80074ae:	484f      	ldr	r0, [pc, #316]	; (80075ec <HAL_TIM_MspPostInit+0x198>)
 80074b0:	f003 fa98 	bl	800a9e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80074b4:	e091      	b.n	80075da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a4d      	ldr	r2, [pc, #308]	; (80075f0 <HAL_TIM_MspPostInit+0x19c>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d11e      	bne.n	80074fe <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]
 80074c4:	4b48      	ldr	r3, [pc, #288]	; (80075e8 <HAL_TIM_MspPostInit+0x194>)
 80074c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c8:	4a47      	ldr	r2, [pc, #284]	; (80075e8 <HAL_TIM_MspPostInit+0x194>)
 80074ca:	f043 0302 	orr.w	r3, r3, #2
 80074ce:	6313      	str	r3, [r2, #48]	; 0x30
 80074d0:	4b45      	ldr	r3, [pc, #276]	; (80075e8 <HAL_TIM_MspPostInit+0x194>)
 80074d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d4:	f003 0302 	and.w	r3, r3, #2
 80074d8:	617b      	str	r3, [r7, #20]
 80074da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80074dc:	2330      	movs	r3, #48	; 0x30
 80074de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074e0:	2302      	movs	r3, #2
 80074e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074e8:	2300      	movs	r3, #0
 80074ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80074ec:	2302      	movs	r3, #2
 80074ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074f0:	f107 031c 	add.w	r3, r7, #28
 80074f4:	4619      	mov	r1, r3
 80074f6:	483f      	ldr	r0, [pc, #252]	; (80075f4 <HAL_TIM_MspPostInit+0x1a0>)
 80074f8:	f003 fa74 	bl	800a9e4 <HAL_GPIO_Init>
}
 80074fc:	e06d      	b.n	80075da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a3d      	ldr	r2, [pc, #244]	; (80075f8 <HAL_TIM_MspPostInit+0x1a4>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d11f      	bne.n	8007548 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007508:	2300      	movs	r3, #0
 800750a:	613b      	str	r3, [r7, #16]
 800750c:	4b36      	ldr	r3, [pc, #216]	; (80075e8 <HAL_TIM_MspPostInit+0x194>)
 800750e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007510:	4a35      	ldr	r2, [pc, #212]	; (80075e8 <HAL_TIM_MspPostInit+0x194>)
 8007512:	f043 0308 	orr.w	r3, r3, #8
 8007516:	6313      	str	r3, [r2, #48]	; 0x30
 8007518:	4b33      	ldr	r3, [pc, #204]	; (80075e8 <HAL_TIM_MspPostInit+0x194>)
 800751a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751c:	f003 0308 	and.w	r3, r3, #8
 8007520:	613b      	str	r3, [r7, #16]
 8007522:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007524:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800752a:	2302      	movs	r3, #2
 800752c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800752e:	2300      	movs	r3, #0
 8007530:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007532:	2300      	movs	r3, #0
 8007534:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007536:	2302      	movs	r3, #2
 8007538:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800753a:	f107 031c 	add.w	r3, r7, #28
 800753e:	4619      	mov	r1, r3
 8007540:	482e      	ldr	r0, [pc, #184]	; (80075fc <HAL_TIM_MspPostInit+0x1a8>)
 8007542:	f003 fa4f 	bl	800a9e4 <HAL_GPIO_Init>
}
 8007546:	e048      	b.n	80075da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a2c      	ldr	r2, [pc, #176]	; (8007600 <HAL_TIM_MspPostInit+0x1ac>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d11f      	bne.n	8007592 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007552:	2300      	movs	r3, #0
 8007554:	60fb      	str	r3, [r7, #12]
 8007556:	4b24      	ldr	r3, [pc, #144]	; (80075e8 <HAL_TIM_MspPostInit+0x194>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	4a23      	ldr	r2, [pc, #140]	; (80075e8 <HAL_TIM_MspPostInit+0x194>)
 800755c:	f043 0302 	orr.w	r3, r3, #2
 8007560:	6313      	str	r3, [r2, #48]	; 0x30
 8007562:	4b21      	ldr	r3, [pc, #132]	; (80075e8 <HAL_TIM_MspPostInit+0x194>)
 8007564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007566:	f003 0302 	and.w	r3, r3, #2
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800756e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007574:	2302      	movs	r3, #2
 8007576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007578:	2300      	movs	r3, #0
 800757a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800757c:	2300      	movs	r3, #0
 800757e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007580:	2303      	movs	r3, #3
 8007582:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007584:	f107 031c 	add.w	r3, r7, #28
 8007588:	4619      	mov	r1, r3
 800758a:	481a      	ldr	r0, [pc, #104]	; (80075f4 <HAL_TIM_MspPostInit+0x1a0>)
 800758c:	f003 fa2a 	bl	800a9e4 <HAL_GPIO_Init>
}
 8007590:	e023      	b.n	80075da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a1b      	ldr	r2, [pc, #108]	; (8007604 <HAL_TIM_MspPostInit+0x1b0>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d11e      	bne.n	80075da <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800759c:	2300      	movs	r3, #0
 800759e:	60bb      	str	r3, [r7, #8]
 80075a0:	4b11      	ldr	r3, [pc, #68]	; (80075e8 <HAL_TIM_MspPostInit+0x194>)
 80075a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a4:	4a10      	ldr	r2, [pc, #64]	; (80075e8 <HAL_TIM_MspPostInit+0x194>)
 80075a6:	f043 0302 	orr.w	r3, r3, #2
 80075aa:	6313      	str	r3, [r2, #48]	; 0x30
 80075ac:	4b0e      	ldr	r3, [pc, #56]	; (80075e8 <HAL_TIM_MspPostInit+0x194>)
 80075ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	60bb      	str	r3, [r7, #8]
 80075b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80075b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075be:	2302      	movs	r3, #2
 80075c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075c2:	2300      	movs	r3, #0
 80075c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075c6:	2300      	movs	r3, #0
 80075c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80075ca:	2303      	movs	r3, #3
 80075cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075ce:	f107 031c 	add.w	r3, r7, #28
 80075d2:	4619      	mov	r1, r3
 80075d4:	4807      	ldr	r0, [pc, #28]	; (80075f4 <HAL_TIM_MspPostInit+0x1a0>)
 80075d6:	f003 fa05 	bl	800a9e4 <HAL_GPIO_Init>
}
 80075da:	bf00      	nop
 80075dc:	3730      	adds	r7, #48	; 0x30
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	40010000 	.word	0x40010000
 80075e8:	40023800 	.word	0x40023800
 80075ec:	40021000 	.word	0x40021000
 80075f0:	40000400 	.word	0x40000400
 80075f4:	40020400 	.word	0x40020400
 80075f8:	40000800 	.word	0x40000800
 80075fc:	40020c00 	.word	0x40020c00
 8007600:	40014400 	.word	0x40014400
 8007604:	40014800 	.word	0x40014800

08007608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b08a      	sub	sp, #40	; 0x28
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007610:	f107 0314 	add.w	r3, r7, #20
 8007614:	2200      	movs	r2, #0
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	605a      	str	r2, [r3, #4]
 800761a:	609a      	str	r2, [r3, #8]
 800761c:	60da      	str	r2, [r3, #12]
 800761e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a19      	ldr	r2, [pc, #100]	; (800768c <HAL_UART_MspInit+0x84>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d12b      	bne.n	8007682 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800762a:	2300      	movs	r3, #0
 800762c:	613b      	str	r3, [r7, #16]
 800762e:	4b18      	ldr	r3, [pc, #96]	; (8007690 <HAL_UART_MspInit+0x88>)
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	4a17      	ldr	r2, [pc, #92]	; (8007690 <HAL_UART_MspInit+0x88>)
 8007634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007638:	6413      	str	r3, [r2, #64]	; 0x40
 800763a:	4b15      	ldr	r3, [pc, #84]	; (8007690 <HAL_UART_MspInit+0x88>)
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007642:	613b      	str	r3, [r7, #16]
 8007644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]
 800764a:	4b11      	ldr	r3, [pc, #68]	; (8007690 <HAL_UART_MspInit+0x88>)
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	4a10      	ldr	r2, [pc, #64]	; (8007690 <HAL_UART_MspInit+0x88>)
 8007650:	f043 0308 	orr.w	r3, r3, #8
 8007654:	6313      	str	r3, [r2, #48]	; 0x30
 8007656:	4b0e      	ldr	r3, [pc, #56]	; (8007690 <HAL_UART_MspInit+0x88>)
 8007658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007662:	2360      	movs	r3, #96	; 0x60
 8007664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007666:	2302      	movs	r3, #2
 8007668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800766a:	2300      	movs	r3, #0
 800766c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800766e:	2303      	movs	r3, #3
 8007670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007672:	2307      	movs	r3, #7
 8007674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007676:	f107 0314 	add.w	r3, r7, #20
 800767a:	4619      	mov	r1, r3
 800767c:	4805      	ldr	r0, [pc, #20]	; (8007694 <HAL_UART_MspInit+0x8c>)
 800767e:	f003 f9b1 	bl	800a9e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007682:	bf00      	nop
 8007684:	3728      	adds	r7, #40	; 0x28
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	40004400 	.word	0x40004400
 8007690:	40023800 	.word	0x40023800
 8007694:	40020c00 	.word	0x40020c00

08007698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800769c:	e7fe      	b.n	800769c <NMI_Handler+0x4>

0800769e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800769e:	b480      	push	{r7}
 80076a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80076a2:	e7fe      	b.n	80076a2 <HardFault_Handler+0x4>

080076a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80076a8:	e7fe      	b.n	80076a8 <MemManage_Handler+0x4>

080076aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80076aa:	b480      	push	{r7}
 80076ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80076ae:	e7fe      	b.n	80076ae <BusFault_Handler+0x4>

080076b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80076b4:	e7fe      	b.n	80076b4 <UsageFault_Handler+0x4>

080076b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80076b6:	b480      	push	{r7}
 80076b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80076ba:	bf00      	nop
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80076c4:	b480      	push	{r7}
 80076c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80076c8:	bf00      	nop
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80076d2:	b480      	push	{r7}
 80076d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80076d6:	bf00      	nop
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80076e4:	f002 f88a 	bl	80097fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80076e8:	bf00      	nop
 80076ea:	bd80      	pop	{r7, pc}

080076ec <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80076f0:	4803      	ldr	r0, [pc, #12]	; (8007700 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80076f2:	f007 fb5a 	bl	800edaa <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80076f6:	4803      	ldr	r0, [pc, #12]	; (8007704 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80076f8:	f007 fb57 	bl	800edaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80076fc:	bf00      	nop
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	200446e4 	.word	0x200446e4
 8007704:	200448e0 	.word	0x200448e0

08007708 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800770c:	4802      	ldr	r0, [pc, #8]	; (8007718 <SDIO_IRQHandler+0x10>)
 800770e:	f005 fbf3 	bl	800cef8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007712:	bf00      	nop
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20044a40 	.word	0x20044a40

0800771c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007720:	4802      	ldr	r0, [pc, #8]	; (800772c <TIM6_DAC_IRQHandler+0x10>)
 8007722:	f007 fb42 	bl	800edaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007726:	bf00      	nop
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	200449c0 	.word	0x200449c0

08007730 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007734:	4802      	ldr	r0, [pc, #8]	; (8007740 <TIM7_IRQHandler+0x10>)
 8007736:	f007 fb38 	bl	800edaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800773a:	bf00      	nop
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20044b64 	.word	0x20044b64

08007744 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007748:	4802      	ldr	r0, [pc, #8]	; (8007754 <DMA2_Stream2_IRQHandler+0x10>)
 800774a:	f002 fed7 	bl	800a4fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800774e:	bf00      	nop
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20044b04 	.word	0x20044b04

08007758 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800775c:	4802      	ldr	r0, [pc, #8]	; (8007768 <DMA2_Stream3_IRQHandler+0x10>)
 800775e:	f002 fecd 	bl	800a4fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007762:	bf00      	nop
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	2004462c 	.word	0x2004462c

0800776c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007770:	4802      	ldr	r0, [pc, #8]	; (800777c <DMA2_Stream6_IRQHandler+0x10>)
 8007772:	f002 fec3 	bl	800a4fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007776:	bf00      	nop
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	20044960 	.word	0x20044960

08007780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007788:	4a14      	ldr	r2, [pc, #80]	; (80077dc <_sbrk+0x5c>)
 800778a:	4b15      	ldr	r3, [pc, #84]	; (80077e0 <_sbrk+0x60>)
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007794:	4b13      	ldr	r3, [pc, #76]	; (80077e4 <_sbrk+0x64>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d102      	bne.n	80077a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800779c:	4b11      	ldr	r3, [pc, #68]	; (80077e4 <_sbrk+0x64>)
 800779e:	4a12      	ldr	r2, [pc, #72]	; (80077e8 <_sbrk+0x68>)
 80077a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80077a2:	4b10      	ldr	r3, [pc, #64]	; (80077e4 <_sbrk+0x64>)
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4413      	add	r3, r2
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d207      	bcs.n	80077c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80077b0:	f00d fd90 	bl	80152d4 <__errno>
 80077b4:	4602      	mov	r2, r0
 80077b6:	230c      	movs	r3, #12
 80077b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80077ba:	f04f 33ff 	mov.w	r3, #4294967295
 80077be:	e009      	b.n	80077d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80077c0:	4b08      	ldr	r3, [pc, #32]	; (80077e4 <_sbrk+0x64>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80077c6:	4b07      	ldr	r3, [pc, #28]	; (80077e4 <_sbrk+0x64>)
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4413      	add	r3, r2
 80077ce:	4a05      	ldr	r2, [pc, #20]	; (80077e4 <_sbrk+0x64>)
 80077d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80077d2:	68fb      	ldr	r3, [r7, #12]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3718      	adds	r7, #24
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	20050000 	.word	0x20050000
 80077e0:	00000800 	.word	0x00000800
 80077e4:	200002f0 	.word	0x200002f0
 80077e8:	20046cb8 	.word	0x20046cb8

080077ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80077f0:	4b08      	ldr	r3, [pc, #32]	; (8007814 <SystemInit+0x28>)
 80077f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f6:	4a07      	ldr	r2, [pc, #28]	; (8007814 <SystemInit+0x28>)
 80077f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007800:	4b04      	ldr	r3, [pc, #16]	; (8007814 <SystemInit+0x28>)
 8007802:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007806:	609a      	str	r2, [r3, #8]
#endif
}
 8007808:	bf00      	nop
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr
 8007812:	bf00      	nop
 8007814:	e000ed00 	.word	0xe000ed00

08007818 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007818:	b598      	push	{r3, r4, r7, lr}
 800781a:	af00      	add	r7, sp, #0
	lcd_init();
 800781c:	f7f9 fbfc 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007820:	483b      	ldr	r0, [pc, #236]	; (8007910 <cppInit+0xf8>)
 8007822:	f7fd fe33 	bl	800548c <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8007826:	2064      	movs	r0, #100	; 0x64
 8007828:	f002 f808 	bl	800983c <HAL_Delay>
	power_sensor.updateValues();
 800782c:	4838      	ldr	r0, [pc, #224]	; (8007910 <cppInit+0xf8>)
 800782e:	f7fd fe3b 	bl	80054a8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8007832:	f7f9 fc35 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8007836:	2100      	movs	r1, #0
 8007838:	2000      	movs	r0, #0
 800783a:	f7f9 fc41 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 800783e:	4835      	ldr	r0, [pc, #212]	; (8007914 <cppInit+0xfc>)
 8007840:	f7f9 fc68 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007844:	2101      	movs	r1, #1
 8007846:	2000      	movs	r0, #0
 8007848:	f7f9 fc3a 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 800784c:	4830      	ldr	r0, [pc, #192]	; (8007910 <cppInit+0xf8>)
 800784e:	f7fd fe55 	bl	80054fc <_ZN11PowerSensor17getButteryVoltageEv>
 8007852:	ee10 3a10 	vmov	r3, s0
 8007856:	4618      	mov	r0, r3
 8007858:	f7f8 fe8e 	bl	8000578 <__aeabi_f2d>
 800785c:	4603      	mov	r3, r0
 800785e:	460c      	mov	r4, r1
 8007860:	461a      	mov	r2, r3
 8007862:	4623      	mov	r3, r4
 8007864:	482c      	ldr	r0, [pc, #176]	; (8007918 <cppInit+0x100>)
 8007866:	f7f9 fc55 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 800786a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800786e:	f001 ffe5 	bl	800983c <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8007872:	482a      	ldr	r0, [pc, #168]	; (800791c <cppInit+0x104>)
 8007874:	f7fc ffa6 	bl	80047c4 <_ZN6Logger10sdCardInitEv>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d007      	beq.n	800788e <cppInit+0x76>
		led.fullColor('G');
 800787e:	2147      	movs	r1, #71	; 0x47
 8007880:	4827      	ldr	r0, [pc, #156]	; (8007920 <cppInit+0x108>)
 8007882:	f7fa fcd7 	bl	8002234 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007886:	2064      	movs	r0, #100	; 0x64
 8007888:	f001 ffd8 	bl	800983c <HAL_Delay>
 800788c:	e006      	b.n	800789c <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 800788e:	2152      	movs	r1, #82	; 0x52
 8007890:	4823      	ldr	r0, [pc, #140]	; (8007920 <cppInit+0x108>)
 8007892:	f7fa fccf 	bl	8002234 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007896:	2064      	movs	r0, #100	; 0x64
 8007898:	f001 ffd0 	bl	800983c <HAL_Delay>
	}

	line_sensor.ADCStart();
 800789c:	4821      	ldr	r0, [pc, #132]	; (8007924 <cppInit+0x10c>)
 800789e:	f7fa fe25 	bl	80024ec <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80078a2:	4821      	ldr	r0, [pc, #132]	; (8007928 <cppInit+0x110>)
 80078a4:	f7fd faaa 	bl	8004dfc <_ZN5Motor4initEv>
	encoder.init();
 80078a8:	4820      	ldr	r0, [pc, #128]	; (800792c <cppInit+0x114>)
 80078aa:	f7f9 fdbb 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 80078ae:	4820      	ldr	r0, [pc, #128]	; (8007930 <cppInit+0x118>)
 80078b0:	f7fa fa7e 	bl	8001db0 <_ZN3IMU4initEv>
	line_trace.init();
 80078b4:	481f      	ldr	r0, [pc, #124]	; (8007934 <cppInit+0x11c>)
 80078b6:	f7fc f911 	bl	8003adc <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80078ba:	481a      	ldr	r0, [pc, #104]	; (8007924 <cppInit+0x10c>)
 80078bc:	f7fa ffb0 	bl	8002820 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80078c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80078c4:	f001 ffba 	bl	800983c <HAL_Delay>

	led.fullColor('M');
 80078c8:	214d      	movs	r1, #77	; 0x4d
 80078ca:	4815      	ldr	r0, [pc, #84]	; (8007920 <cppInit+0x108>)
 80078cc:	f7fa fcb2 	bl	8002234 <_ZN3LED9fullColorEc>
	imu.calibration();
 80078d0:	4817      	ldr	r0, [pc, #92]	; (8007930 <cppInit+0x118>)
 80078d2:	f7fa fb37 	bl	8001f44 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	velocity_ctrl.setVelocityGain(1.8295/1.5, 16.1174/1.5, 0.025243/1.5); //3s
 80078d6:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007938 <cppInit+0x120>
 80078da:	eddf 0a18 	vldr	s1, [pc, #96]	; 800793c <cppInit+0x124>
 80078de:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007940 <cppInit+0x128>
 80078e2:	4818      	ldr	r0, [pc, #96]	; (8007944 <cppInit+0x12c>)
 80078e4:	f7fe f9cc 	bl	8005c80 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 80078e8:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007948 <cppInit+0x130>
 80078ec:	eddf 0a17 	vldr	s1, [pc, #92]	; 800794c <cppInit+0x134>
 80078f0:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007950 <cppInit+0x138>
 80078f4:	4813      	ldr	r0, [pc, #76]	; (8007944 <cppInit+0x12c>)
 80078f6:	f7fe f9dc 	bl	8005cb2 <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 80078fa:	4816      	ldr	r0, [pc, #88]	; (8007954 <cppInit+0x13c>)
 80078fc:	f7fd fcd0 	bl	80052a0 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007900:	4815      	ldr	r0, [pc, #84]	; (8007958 <cppInit+0x140>)
 8007902:	f7fd fd67 	bl	80053d4 <_ZN13PathFollowing4initEv>

	esc.init();
 8007906:	4815      	ldr	r0, [pc, #84]	; (800795c <cppInit+0x144>)
 8007908:	f7f9 fc70 	bl	80011ec <_ZN3ESC4initEv>

}
 800790c:	bf00      	nop
 800790e:	bd98      	pop	{r3, r4, r7, pc}
 8007910:	20000608 	.word	0x20000608
 8007914:	08019b00 	.word	0x08019b00
 8007918:	08019b08 	.word	0x08019b08
 800791c:	20000628 	.word	0x20000628
 8007920:	20000604 	.word	0x20000604
 8007924:	200002f4 	.word	0x200002f4
 8007928:	20000600 	.word	0x20000600
 800792c:	2001daf4 	.word	0x2001daf4
 8007930:	20000614 	.word	0x20000614
 8007934:	2001db94 	.word	0x2001db94
 8007938:	3c89dc46 	.word	0x3c89dc46
 800793c:	412beb3f 	.word	0x412beb3f
 8007940:	3f9c1e0a 	.word	0x3f9c1e0a
 8007944:	2001db14 	.word	0x2001db14
 8007948:	00000000 	.word	0x00000000
 800794c:	3f5e3fbc 	.word	0x3f5e3fbc
 8007950:	3d75c28f 	.word	0x3d75c28f
 8007954:	2001db50 	.word	0x2001db50
 8007958:	2002ab40 	.word	0x2002ab40
 800795c:	2001db90 	.word	0x2001db90

08007960 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007964:	4819      	ldr	r0, [pc, #100]	; (80079cc <cppFlip1ms+0x6c>)
 8007966:	f7fa fe1f 	bl	80025a8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 800796a:	4819      	ldr	r0, [pc, #100]	; (80079d0 <cppFlip1ms+0x70>)
 800796c:	f7fa fa48 	bl	8001e00 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007970:	4818      	ldr	r0, [pc, #96]	; (80079d4 <cppFlip1ms+0x74>)
 8007972:	f7f9 fd79 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007976:	4818      	ldr	r0, [pc, #96]	; (80079d8 <cppFlip1ms+0x78>)
 8007978:	f7fc fae6 	bl	8003f48 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 800797c:	4817      	ldr	r0, [pc, #92]	; (80079dc <cppFlip1ms+0x7c>)
 800797e:	f7fe f9b1 	bl	8005ce4 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007982:	4817      	ldr	r0, [pc, #92]	; (80079e0 <cppFlip1ms+0x80>)
 8007984:	f7fd fc70 	bl	8005268 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007988:	4816      	ldr	r0, [pc, #88]	; (80079e4 <cppFlip1ms+0x84>)
 800798a:	f7fd fe33 	bl	80055f4 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 800798e:	4816      	ldr	r0, [pc, #88]	; (80079e8 <cppFlip1ms+0x88>)
 8007990:	f7fd fa46 	bl	8004e20 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8007994:	4b15      	ldr	r3, [pc, #84]	; (80079ec <cppFlip1ms+0x8c>)
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	3301      	adds	r3, #1
 800799a:	b29a      	uxth	r2, r3
 800799c:	4b13      	ldr	r3, [pc, #76]	; (80079ec <cppFlip1ms+0x8c>)
 800799e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 80079a0:	4b12      	ldr	r3, [pc, #72]	; (80079ec <cppFlip1ms+0x8c>)
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d90c      	bls.n	80079c2 <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 80079a8:	4809      	ldr	r0, [pc, #36]	; (80079d0 <cppFlip1ms+0x70>)
 80079aa:	f7fa fa81 	bl	8001eb0 <_ZN3IMU8getOmegaEv>
 80079ae:	eef0 7a40 	vmov.f32	s15, s0
 80079b2:	eeb0 0a67 	vmov.f32	s0, s15
 80079b6:	480e      	ldr	r0, [pc, #56]	; (80079f0 <cppFlip1ms+0x90>)
 80079b8:	f7fd ff96 	bl	80058e8 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 80079bc:	4b0b      	ldr	r3, [pc, #44]	; (80079ec <cppFlip1ms+0x8c>)
 80079be:	2200      	movs	r2, #0
 80079c0:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 80079c2:	4804      	ldr	r0, [pc, #16]	; (80079d4 <cppFlip1ms+0x74>)
 80079c4:	f7f9 fe3a 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80079c8:	bf00      	nop
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	200002f4 	.word	0x200002f4
 80079d0:	20000614 	.word	0x20000614
 80079d4:	2001daf4 	.word	0x2001daf4
 80079d8:	2001db94 	.word	0x2001db94
 80079dc:	2001db14 	.word	0x2001db14
 80079e0:	2001db50 	.word	0x2001db50
 80079e4:	200005ec 	.word	0x200005ec
 80079e8:	20000600 	.word	0x20000600
 80079ec:	20042268 	.word	0x20042268
 80079f0:	2002a930 	.word	0x2002a930

080079f4 <cppFlip100ns>:

void cppFlip100ns(void)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80079f8:	4802      	ldr	r0, [pc, #8]	; (8007a04 <cppFlip100ns+0x10>)
 80079fa:	f7fa fd87 	bl	800250c <_ZN10LineSensor17storeSensorValuesEv>
}
 80079fe:	bf00      	nop
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	200002f4 	.word	0x200002f4

08007a08 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8007a0c:	4b10      	ldr	r3, [pc, #64]	; (8007a50 <cppFlip10ms+0x48>)
 8007a0e:	881b      	ldrh	r3, [r3, #0]
 8007a10:	3301      	adds	r3, #1
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	4b0e      	ldr	r3, [pc, #56]	; (8007a50 <cppFlip10ms+0x48>)
 8007a16:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8007a18:	4b0d      	ldr	r3, [pc, #52]	; (8007a50 <cppFlip10ms+0x48>)
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	2b06      	cmp	r3, #6
 8007a1e:	d905      	bls.n	8007a2c <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007a20:	480c      	ldr	r0, [pc, #48]	; (8007a54 <cppFlip10ms+0x4c>)
 8007a22:	f7fd ff81 	bl	8005928 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8007a26:	4b0a      	ldr	r3, [pc, #40]	; (8007a50 <cppFlip10ms+0x48>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	801a      	strh	r2, [r3, #0]
	}

	logger.storeLogInt(motor.getLeftCounterPeriod());
 8007a2c:	480a      	ldr	r0, [pc, #40]	; (8007a58 <cppFlip10ms+0x50>)
 8007a2e:	f7fd fab9 	bl	8004fa4 <_ZN5Motor20getLeftCounterPeriodEv>
 8007a32:	4603      	mov	r3, r0
 8007a34:	4619      	mov	r1, r3
 8007a36:	4809      	ldr	r0, [pc, #36]	; (8007a5c <cppFlip10ms+0x54>)
 8007a38:	f7fc ff7c 	bl	8004934 <_ZN6Logger11storeLogIntEs>
	logger.storeLog2Int(motor.getRightCounterPeriod());
 8007a3c:	4806      	ldr	r0, [pc, #24]	; (8007a58 <cppFlip10ms+0x50>)
 8007a3e:	f7fd fabe 	bl	8004fbe <_ZN5Motor21getRightCounterPeriodEv>
 8007a42:	4603      	mov	r3, r0
 8007a44:	4619      	mov	r1, r3
 8007a46:	4805      	ldr	r0, [pc, #20]	; (8007a5c <cppFlip10ms+0x54>)
 8007a48:	f7fc ffad 	bl	80049a6 <_ZN6Logger12storeLog2IntEs>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007a4c:	bf00      	nop
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	2004226a 	.word	0x2004226a
 8007a54:	2002a930 	.word	0x2002a930
 8007a58:	20000600 	.word	0x20000600
 8007a5c:	20000628 	.word	0x20000628

08007a60 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007a66:	4baf      	ldr	r3, [pc, #700]	; (8007d24 <cppLoop+0x2c4>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	f3bf 8f5b 	dmb	ish
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	f003 0301 	and.w	r3, r3, #1
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	bf0c      	ite	eq
 8007a78:	2301      	moveq	r3, #1
 8007a7a:	2300      	movne	r3, #0
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d015      	beq.n	8007aae <cppLoop+0x4e>
 8007a82:	48a8      	ldr	r0, [pc, #672]	; (8007d24 <cppLoop+0x2c4>)
 8007a84:	f00c fbbf 	bl	8014206 <__cxa_guard_acquire>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	bf14      	ite	ne
 8007a8e:	2301      	movne	r3, #1
 8007a90:	2300      	moveq	r3, #0
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00a      	beq.n	8007aae <cppLoop+0x4e>
 8007a98:	48a3      	ldr	r0, [pc, #652]	; (8007d28 <cppLoop+0x2c8>)
 8007a9a:	f7fc f8fc 	bl	8003c96 <_ZN9LineTrace5getKpEv>
 8007a9e:	eef0 7a40 	vmov.f32	s15, s0
 8007aa2:	4ba2      	ldr	r3, [pc, #648]	; (8007d2c <cppLoop+0x2cc>)
 8007aa4:	edc3 7a00 	vstr	s15, [r3]
 8007aa8:	489e      	ldr	r0, [pc, #632]	; (8007d24 <cppLoop+0x2c4>)
 8007aaa:	f00c fbb8 	bl	801421e <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007aae:	4ba0      	ldr	r3, [pc, #640]	; (8007d30 <cppLoop+0x2d0>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	f3bf 8f5b 	dmb	ish
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	bf0c      	ite	eq
 8007ac0:	2301      	moveq	r3, #1
 8007ac2:	2300      	movne	r3, #0
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d015      	beq.n	8007af6 <cppLoop+0x96>
 8007aca:	4899      	ldr	r0, [pc, #612]	; (8007d30 <cppLoop+0x2d0>)
 8007acc:	f00c fb9b 	bl	8014206 <__cxa_guard_acquire>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	bf14      	ite	ne
 8007ad6:	2301      	movne	r3, #1
 8007ad8:	2300      	moveq	r3, #0
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <cppLoop+0x96>
 8007ae0:	4891      	ldr	r0, [pc, #580]	; (8007d28 <cppLoop+0x2c8>)
 8007ae2:	f7fc f8e7 	bl	8003cb4 <_ZN9LineTrace5getKiEv>
 8007ae6:	eef0 7a40 	vmov.f32	s15, s0
 8007aea:	4b92      	ldr	r3, [pc, #584]	; (8007d34 <cppLoop+0x2d4>)
 8007aec:	edc3 7a00 	vstr	s15, [r3]
 8007af0:	488f      	ldr	r0, [pc, #572]	; (8007d30 <cppLoop+0x2d0>)
 8007af2:	f00c fb94 	bl	801421e <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007af6:	4b90      	ldr	r3, [pc, #576]	; (8007d38 <cppLoop+0x2d8>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	f3bf 8f5b 	dmb	ish
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	bf0c      	ite	eq
 8007b08:	2301      	moveq	r3, #1
 8007b0a:	2300      	movne	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d015      	beq.n	8007b3e <cppLoop+0xde>
 8007b12:	4889      	ldr	r0, [pc, #548]	; (8007d38 <cppLoop+0x2d8>)
 8007b14:	f00c fb77 	bl	8014206 <__cxa_guard_acquire>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	bf14      	ite	ne
 8007b1e:	2301      	movne	r3, #1
 8007b20:	2300      	moveq	r3, #0
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00a      	beq.n	8007b3e <cppLoop+0xde>
 8007b28:	487f      	ldr	r0, [pc, #508]	; (8007d28 <cppLoop+0x2c8>)
 8007b2a:	f7fc f8d2 	bl	8003cd2 <_ZN9LineTrace5getKdEv>
 8007b2e:	eef0 7a40 	vmov.f32	s15, s0
 8007b32:	4b82      	ldr	r3, [pc, #520]	; (8007d3c <cppLoop+0x2dc>)
 8007b34:	edc3 7a00 	vstr	s15, [r3]
 8007b38:	487f      	ldr	r0, [pc, #508]	; (8007d38 <cppLoop+0x2d8>)
 8007b3a:	f00c fb70 	bl	801421e <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007b3e:	4b80      	ldr	r3, [pc, #512]	; (8007d40 <cppLoop+0x2e0>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	f3bf 8f5b 	dmb	ish
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	bf0c      	ite	eq
 8007b50:	2301      	moveq	r3, #1
 8007b52:	2300      	movne	r3, #0
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d015      	beq.n	8007b86 <cppLoop+0x126>
 8007b5a:	4879      	ldr	r0, [pc, #484]	; (8007d40 <cppLoop+0x2e0>)
 8007b5c:	f00c fb53 	bl	8014206 <__cxa_guard_acquire>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bf14      	ite	ne
 8007b66:	2301      	movne	r3, #1
 8007b68:	2300      	moveq	r3, #0
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <cppLoop+0x126>
 8007b70:	486d      	ldr	r0, [pc, #436]	; (8007d28 <cppLoop+0x2c8>)
 8007b72:	f7fc f91c 	bl	8003dae <_ZN9LineTrace17getTargetVelocityEv>
 8007b76:	eef0 7a40 	vmov.f32	s15, s0
 8007b7a:	4b72      	ldr	r3, [pc, #456]	; (8007d44 <cppLoop+0x2e4>)
 8007b7c:	edc3 7a00 	vstr	s15, [r3]
 8007b80:	486f      	ldr	r0, [pc, #444]	; (8007d40 <cppLoop+0x2e0>)
 8007b82:	f00c fb4c 	bl	801421e <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007b86:	4b70      	ldr	r3, [pc, #448]	; (8007d48 <cppLoop+0x2e8>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	f3bf 8f5b 	dmb	ish
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	bf0c      	ite	eq
 8007b98:	2301      	moveq	r3, #1
 8007b9a:	2300      	movne	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d015      	beq.n	8007bce <cppLoop+0x16e>
 8007ba2:	4869      	ldr	r0, [pc, #420]	; (8007d48 <cppLoop+0x2e8>)
 8007ba4:	f00c fb2f 	bl	8014206 <__cxa_guard_acquire>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	bf14      	ite	ne
 8007bae:	2301      	movne	r3, #1
 8007bb0:	2300      	moveq	r3, #0
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <cppLoop+0x16e>
 8007bb8:	485b      	ldr	r0, [pc, #364]	; (8007d28 <cppLoop+0x2c8>)
 8007bba:	f7fc f908 	bl	8003dce <_ZN9LineTrace14getMaxVelocityEv>
 8007bbe:	eef0 7a40 	vmov.f32	s15, s0
 8007bc2:	4b62      	ldr	r3, [pc, #392]	; (8007d4c <cppLoop+0x2ec>)
 8007bc4:	edc3 7a00 	vstr	s15, [r3]
 8007bc8:	485f      	ldr	r0, [pc, #380]	; (8007d48 <cppLoop+0x2e8>)
 8007bca:	f00c fb28 	bl	801421e <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007bce:	4b60      	ldr	r3, [pc, #384]	; (8007d50 <cppLoop+0x2f0>)
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	f3bf 8f5b 	dmb	ish
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	bf0c      	ite	eq
 8007be0:	2301      	moveq	r3, #1
 8007be2:	2300      	movne	r3, #0
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d015      	beq.n	8007c16 <cppLoop+0x1b6>
 8007bea:	4859      	ldr	r0, [pc, #356]	; (8007d50 <cppLoop+0x2f0>)
 8007bec:	f00c fb0b 	bl	8014206 <__cxa_guard_acquire>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	bf14      	ite	ne
 8007bf6:	2301      	movne	r3, #1
 8007bf8:	2300      	moveq	r3, #0
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00a      	beq.n	8007c16 <cppLoop+0x1b6>
 8007c00:	4849      	ldr	r0, [pc, #292]	; (8007d28 <cppLoop+0x2c8>)
 8007c02:	f7fc f8f4 	bl	8003dee <_ZN9LineTrace15getMaxVelocity2Ev>
 8007c06:	eef0 7a40 	vmov.f32	s15, s0
 8007c0a:	4b52      	ldr	r3, [pc, #328]	; (8007d54 <cppLoop+0x2f4>)
 8007c0c:	edc3 7a00 	vstr	s15, [r3]
 8007c10:	484f      	ldr	r0, [pc, #316]	; (8007d50 <cppLoop+0x2f0>)
 8007c12:	f00c fb04 	bl	801421e <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007c16:	4b50      	ldr	r3, [pc, #320]	; (8007d58 <cppLoop+0x2f8>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	f3bf 8f5b 	dmb	ish
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	bf0c      	ite	eq
 8007c28:	2301      	moveq	r3, #1
 8007c2a:	2300      	movne	r3, #0
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d015      	beq.n	8007c5e <cppLoop+0x1fe>
 8007c32:	4849      	ldr	r0, [pc, #292]	; (8007d58 <cppLoop+0x2f8>)
 8007c34:	f00c fae7 	bl	8014206 <__cxa_guard_acquire>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	bf14      	ite	ne
 8007c3e:	2301      	movne	r3, #1
 8007c40:	2300      	moveq	r3, #0
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00a      	beq.n	8007c5e <cppLoop+0x1fe>
 8007c48:	4837      	ldr	r0, [pc, #220]	; (8007d28 <cppLoop+0x2c8>)
 8007c4a:	f7fc f8e0 	bl	8003e0e <_ZN9LineTrace14getMinVelocityEv>
 8007c4e:	eef0 7a40 	vmov.f32	s15, s0
 8007c52:	4b42      	ldr	r3, [pc, #264]	; (8007d5c <cppLoop+0x2fc>)
 8007c54:	edc3 7a00 	vstr	s15, [r3]
 8007c58:	483f      	ldr	r0, [pc, #252]	; (8007d58 <cppLoop+0x2f8>)
 8007c5a:	f00c fae0 	bl	801421e <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007c5e:	4b40      	ldr	r3, [pc, #256]	; (8007d60 <cppLoop+0x300>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	f3bf 8f5b 	dmb	ish
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	bf0c      	ite	eq
 8007c70:	2301      	moveq	r3, #1
 8007c72:	2300      	movne	r3, #0
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d015      	beq.n	8007ca6 <cppLoop+0x246>
 8007c7a:	4839      	ldr	r0, [pc, #228]	; (8007d60 <cppLoop+0x300>)
 8007c7c:	f00c fac3 	bl	8014206 <__cxa_guard_acquire>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	bf14      	ite	ne
 8007c86:	2301      	movne	r3, #1
 8007c88:	2300      	moveq	r3, #0
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00a      	beq.n	8007ca6 <cppLoop+0x246>
 8007c90:	4825      	ldr	r0, [pc, #148]	; (8007d28 <cppLoop+0x2c8>)
 8007c92:	f7fc f8cc 	bl	8003e2e <_ZN9LineTrace15getMinVelocity2Ev>
 8007c96:	eef0 7a40 	vmov.f32	s15, s0
 8007c9a:	4b32      	ldr	r3, [pc, #200]	; (8007d64 <cppLoop+0x304>)
 8007c9c:	edc3 7a00 	vstr	s15, [r3]
 8007ca0:	482f      	ldr	r0, [pc, #188]	; (8007d60 <cppLoop+0x300>)
 8007ca2:	f00c fabc 	bl	801421e <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007ca6:	4b30      	ldr	r3, [pc, #192]	; (8007d68 <cppLoop+0x308>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	f3bf 8f5b 	dmb	ish
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	bf0c      	ite	eq
 8007cb8:	2301      	moveq	r3, #1
 8007cba:	2300      	movne	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d015      	beq.n	8007cee <cppLoop+0x28e>
 8007cc2:	4829      	ldr	r0, [pc, #164]	; (8007d68 <cppLoop+0x308>)
 8007cc4:	f00c fa9f 	bl	8014206 <__cxa_guard_acquire>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bf14      	ite	ne
 8007cce:	2301      	movne	r3, #1
 8007cd0:	2300      	moveq	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00a      	beq.n	8007cee <cppLoop+0x28e>
 8007cd8:	4813      	ldr	r0, [pc, #76]	; (8007d28 <cppLoop+0x2c8>)
 8007cda:	f7fc f8ec 	bl	8003eb6 <_ZN9LineTrace9getMaxAccEv>
 8007cde:	eef0 7a40 	vmov.f32	s15, s0
 8007ce2:	4b22      	ldr	r3, [pc, #136]	; (8007d6c <cppLoop+0x30c>)
 8007ce4:	edc3 7a00 	vstr	s15, [r3]
 8007ce8:	481f      	ldr	r0, [pc, #124]	; (8007d68 <cppLoop+0x308>)
 8007cea:	f00c fa98 	bl	801421e <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007cee:	4b20      	ldr	r3, [pc, #128]	; (8007d70 <cppLoop+0x310>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	f3bf 8f5b 	dmb	ish
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	bf0c      	ite	eq
 8007d00:	2301      	moveq	r3, #1
 8007d02:	2300      	movne	r3, #0
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d03f      	beq.n	8007d8a <cppLoop+0x32a>
 8007d0a:	4819      	ldr	r0, [pc, #100]	; (8007d70 <cppLoop+0x310>)
 8007d0c:	f00c fa7b 	bl	8014206 <__cxa_guard_acquire>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	bf14      	ite	ne
 8007d16:	2301      	movne	r3, #1
 8007d18:	2300      	moveq	r3, #0
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d034      	beq.n	8007d8a <cppLoop+0x32a>
 8007d20:	e028      	b.n	8007d74 <cppLoop+0x314>
 8007d22:	bf00      	nop
 8007d24:	2004227c 	.word	0x2004227c
 8007d28:	2001db94 	.word	0x2001db94
 8007d2c:	20042278 	.word	0x20042278
 8007d30:	20042284 	.word	0x20042284
 8007d34:	20042280 	.word	0x20042280
 8007d38:	2004228c 	.word	0x2004228c
 8007d3c:	20042288 	.word	0x20042288
 8007d40:	20042294 	.word	0x20042294
 8007d44:	20042290 	.word	0x20042290
 8007d48:	2004229c 	.word	0x2004229c
 8007d4c:	20042298 	.word	0x20042298
 8007d50:	200422a4 	.word	0x200422a4
 8007d54:	200422a0 	.word	0x200422a0
 8007d58:	200422ac 	.word	0x200422ac
 8007d5c:	200422a8 	.word	0x200422a8
 8007d60:	200422b4 	.word	0x200422b4
 8007d64:	200422b0 	.word	0x200422b0
 8007d68:	200422bc 	.word	0x200422bc
 8007d6c:	200422b8 	.word	0x200422b8
 8007d70:	200422c4 	.word	0x200422c4
 8007d74:	48b2      	ldr	r0, [pc, #712]	; (8008040 <cppLoop+0x5e0>)
 8007d76:	f7fc f8d4 	bl	8003f22 <_ZN9LineTrace9getMaxDecEv>
 8007d7a:	eef0 7a40 	vmov.f32	s15, s0
 8007d7e:	4bb1      	ldr	r3, [pc, #708]	; (8008044 <cppLoop+0x5e4>)
 8007d80:	edc3 7a00 	vstr	s15, [r3]
 8007d84:	48b0      	ldr	r0, [pc, #704]	; (8008048 <cppLoop+0x5e8>)
 8007d86:	f00c fa4a 	bl	801421e <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007d8a:	4bb0      	ldr	r3, [pc, #704]	; (800804c <cppLoop+0x5ec>)
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	f3bf 8f5b 	dmb	ish
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	bf0c      	ite	eq
 8007d9c:	2301      	moveq	r3, #1
 8007d9e:	2300      	movne	r3, #0
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d015      	beq.n	8007dd2 <cppLoop+0x372>
 8007da6:	48a9      	ldr	r0, [pc, #676]	; (800804c <cppLoop+0x5ec>)
 8007da8:	f00c fa2d 	bl	8014206 <__cxa_guard_acquire>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	bf14      	ite	ne
 8007db2:	2301      	movne	r3, #1
 8007db4:	2300      	moveq	r3, #0
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00a      	beq.n	8007dd2 <cppLoop+0x372>
 8007dbc:	48a0      	ldr	r0, [pc, #640]	; (8008040 <cppLoop+0x5e0>)
 8007dbe:	f7fc f89e 	bl	8003efe <_ZN9LineTrace10getMaxAcc2Ev>
 8007dc2:	eef0 7a40 	vmov.f32	s15, s0
 8007dc6:	4ba2      	ldr	r3, [pc, #648]	; (8008050 <cppLoop+0x5f0>)
 8007dc8:	edc3 7a00 	vstr	s15, [r3]
 8007dcc:	489f      	ldr	r0, [pc, #636]	; (800804c <cppLoop+0x5ec>)
 8007dce:	f00c fa26 	bl	801421e <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007dd2:	4ba0      	ldr	r3, [pc, #640]	; (8008054 <cppLoop+0x5f4>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	f3bf 8f5b 	dmb	ish
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	bf0c      	ite	eq
 8007de4:	2301      	moveq	r3, #1
 8007de6:	2300      	movne	r3, #0
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d015      	beq.n	8007e1a <cppLoop+0x3ba>
 8007dee:	4899      	ldr	r0, [pc, #612]	; (8008054 <cppLoop+0x5f4>)
 8007df0:	f00c fa09 	bl	8014206 <__cxa_guard_acquire>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	bf14      	ite	ne
 8007dfa:	2301      	movne	r3, #1
 8007dfc:	2300      	moveq	r3, #0
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00a      	beq.n	8007e1a <cppLoop+0x3ba>
 8007e04:	488e      	ldr	r0, [pc, #568]	; (8008040 <cppLoop+0x5e0>)
 8007e06:	f7fc f868 	bl	8003eda <_ZN9LineTrace10getMaxDec2Ev>
 8007e0a:	eef0 7a40 	vmov.f32	s15, s0
 8007e0e:	4b92      	ldr	r3, [pc, #584]	; (8008058 <cppLoop+0x5f8>)
 8007e10:	edc3 7a00 	vstr	s15, [r3]
 8007e14:	488f      	ldr	r0, [pc, #572]	; (8008054 <cppLoop+0x5f4>)
 8007e16:	f00c fa02 	bl	801421e <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007e1a:	4890      	ldr	r0, [pc, #576]	; (800805c <cppLoop+0x5fc>)
 8007e1c:	f7fd fb7e 	bl	800551c <_ZN12RotarySwitch8getValueEv>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b0f      	cmp	r3, #15
 8007e24:	f201 83c5 	bhi.w	80095b2 <cppLoop+0x1b52>
 8007e28:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <cppLoop+0x3d0>)
 8007e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2e:	bf00      	nop
 8007e30:	08007e71 	.word	0x08007e71
 8007e34:	08008221 	.word	0x08008221
 8007e38:	08008365 	.word	0x08008365
 8007e3c:	080084b7 	.word	0x080084b7
 8007e40:	08008583 	.word	0x08008583
 8007e44:	08008811 	.word	0x08008811
 8007e48:	0800891d 	.word	0x0800891d
 8007e4c:	08008ba5 	.word	0x08008ba5
 8007e50:	08008ded 	.word	0x08008ded
 8007e54:	08009071 	.word	0x08009071
 8007e58:	0800912d 	.word	0x0800912d
 8007e5c:	08009221 	.word	0x08009221
 8007e60:	080092a7 	.word	0x080092a7
 8007e64:	08009341 	.word	0x08009341
 8007e68:	080093e1 	.word	0x080093e1
 8007e6c:	080094fd 	.word	0x080094fd
	case 0:
		led.fullColor('W');
 8007e70:	2157      	movs	r1, #87	; 0x57
 8007e72:	487b      	ldr	r0, [pc, #492]	; (8008060 <cppLoop+0x600>)
 8007e74:	f7fa f9de 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007e78:	f7f9 f912 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	2000      	movs	r0, #0
 8007e80:	f7f9 f91e 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8007e84:	486e      	ldr	r0, [pc, #440]	; (8008040 <cppLoop+0x5e0>)
 8007e86:	f7fb ff06 	bl	8003c96 <_ZN9LineTrace5getKpEv>
 8007e8a:	eeb0 7a40 	vmov.f32	s14, s0
 8007e8e:	eddf 7a75 	vldr	s15, [pc, #468]	; 8008064 <cppLoop+0x604>
 8007e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e96:	ee17 0a90 	vmov	r0, s15
 8007e9a:	f7f8 fb6d 	bl	8000578 <__aeabi_f2d>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	460c      	mov	r4, r1
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	4623      	mov	r3, r4
 8007ea6:	4870      	ldr	r0, [pc, #448]	; (8008068 <cppLoop+0x608>)
 8007ea8:	f7f9 f934 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007eac:	2101      	movs	r1, #1
 8007eae:	2000      	movs	r0, #0
 8007eb0:	f7f9 f906 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8007eb4:	4862      	ldr	r0, [pc, #392]	; (8008040 <cppLoop+0x5e0>)
 8007eb6:	f7fb fefd 	bl	8003cb4 <_ZN9LineTrace5getKiEv>
 8007eba:	eeb0 7a40 	vmov.f32	s14, s0
 8007ebe:	eddf 7a6b 	vldr	s15, [pc, #428]	; 800806c <cppLoop+0x60c>
 8007ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec6:	ee17 0a90 	vmov	r0, s15
 8007eca:	f7f8 fb55 	bl	8000578 <__aeabi_f2d>
 8007ece:	4605      	mov	r5, r0
 8007ed0:	460e      	mov	r6, r1
 8007ed2:	485b      	ldr	r0, [pc, #364]	; (8008040 <cppLoop+0x5e0>)
 8007ed4:	f7fb fefd 	bl	8003cd2 <_ZN9LineTrace5getKdEv>
 8007ed8:	eeb0 7a40 	vmov.f32	s14, s0
 8007edc:	eddf 7a64 	vldr	s15, [pc, #400]	; 8008070 <cppLoop+0x610>
 8007ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ee4:	ee17 0a90 	vmov	r0, s15
 8007ee8:	f7f8 fb46 	bl	8000578 <__aeabi_f2d>
 8007eec:	4603      	mov	r3, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	e9cd 3400 	strd	r3, r4, [sp]
 8007ef4:	462a      	mov	r2, r5
 8007ef6:	4633      	mov	r3, r6
 8007ef8:	485e      	ldr	r0, [pc, #376]	; (8008074 <cppLoop+0x614>)
 8007efa:	f7f9 f90b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007efe:	485e      	ldr	r0, [pc, #376]	; (8008078 <cppLoop+0x618>)
 8007f00:	f7fa f934 	bl	800216c <_ZN8JoyStick8getValueEv>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b08      	cmp	r3, #8
 8007f08:	bf0c      	ite	eq
 8007f0a:	2301      	moveq	r3, #1
 8007f0c:	2300      	movne	r3, #0
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d022      	beq.n	8007f5a <cppLoop+0x4fa>
			led.LR(-1, 1);
 8007f14:	2201      	movs	r2, #1
 8007f16:	f04f 31ff 	mov.w	r1, #4294967295
 8007f1a:	4851      	ldr	r0, [pc, #324]	; (8008060 <cppLoop+0x600>)
 8007f1c:	f7fa fa46 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007f20:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007f24:	f001 fc8a 	bl	800983c <HAL_Delay>

			selector++;
 8007f28:	4b54      	ldr	r3, [pc, #336]	; (800807c <cppLoop+0x61c>)
 8007f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3301      	adds	r3, #1
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	b21a      	sxth	r2, r3
 8007f36:	4b51      	ldr	r3, [pc, #324]	; (800807c <cppLoop+0x61c>)
 8007f38:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007f3a:	4b50      	ldr	r3, [pc, #320]	; (800807c <cppLoop+0x61c>)
 8007f3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	dd02      	ble.n	8007f4a <cppLoop+0x4ea>
 8007f44:	4b4d      	ldr	r3, [pc, #308]	; (800807c <cppLoop+0x61c>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8007f50:	4843      	ldr	r0, [pc, #268]	; (8008060 <cppLoop+0x600>)
 8007f52:	f7fa fa2b 	bl	80023ac <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8007f56:	f001 bb2e 	b.w	80095b6 <cppLoop+0x1b56>
		else if(joy_stick.getValue() == JOY_R){
 8007f5a:	4847      	ldr	r0, [pc, #284]	; (8008078 <cppLoop+0x618>)
 8007f5c:	f7fa f906 	bl	800216c <_ZN8JoyStick8getValueEv>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b10      	cmp	r3, #16
 8007f64:	bf0c      	ite	eq
 8007f66:	2301      	moveq	r3, #1
 8007f68:	2300      	movne	r3, #0
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 808d 	beq.w	800808c <cppLoop+0x62c>
			led.LR(-1, 1);
 8007f72:	2201      	movs	r2, #1
 8007f74:	f04f 31ff 	mov.w	r1, #4294967295
 8007f78:	4839      	ldr	r0, [pc, #228]	; (8008060 <cppLoop+0x600>)
 8007f7a:	f7fa fa17 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007f7e:	2064      	movs	r0, #100	; 0x64
 8007f80:	f001 fc5c 	bl	800983c <HAL_Delay>
			if(selector == 0){
 8007f84:	4b3d      	ldr	r3, [pc, #244]	; (800807c <cppLoop+0x61c>)
 8007f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d113      	bne.n	8007fb6 <cppLoop+0x556>
				adj_kp = adj_kp + 0.00001;
 8007f8e:	4b3c      	ldr	r3, [pc, #240]	; (8008080 <cppLoop+0x620>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7f8 faf0 	bl	8000578 <__aeabi_f2d>
 8007f98:	a323      	add	r3, pc, #140	; (adr r3, 8008028 <cppLoop+0x5c8>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f7f8 f98d 	bl	80002bc <__adddf3>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	4621      	mov	r1, r4
 8007faa:	f7f8 fe35 	bl	8000c18 <__aeabi_d2f>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	4b33      	ldr	r3, [pc, #204]	; (8008080 <cppLoop+0x620>)
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	e02b      	b.n	800800e <cppLoop+0x5ae>
			else if(selector == 1){
 8007fb6:	4b31      	ldr	r3, [pc, #196]	; (800807c <cppLoop+0x61c>)
 8007fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d113      	bne.n	8007fe8 <cppLoop+0x588>
				adj_ki = adj_ki + 0.0001;
 8007fc0:	4b30      	ldr	r3, [pc, #192]	; (8008084 <cppLoop+0x624>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7f8 fad7 	bl	8000578 <__aeabi_f2d>
 8007fca:	a319      	add	r3, pc, #100	; (adr r3, 8008030 <cppLoop+0x5d0>)
 8007fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd0:	f7f8 f974 	bl	80002bc <__adddf3>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	4618      	mov	r0, r3
 8007fda:	4621      	mov	r1, r4
 8007fdc:	f7f8 fe1c 	bl	8000c18 <__aeabi_d2f>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	4b28      	ldr	r3, [pc, #160]	; (8008084 <cppLoop+0x624>)
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	e012      	b.n	800800e <cppLoop+0x5ae>
				adj_kd = adj_kd + 0.000001;
 8007fe8:	4b27      	ldr	r3, [pc, #156]	; (8008088 <cppLoop+0x628>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7f8 fac3 	bl	8000578 <__aeabi_f2d>
 8007ff2:	a311      	add	r3, pc, #68	; (adr r3, 8008038 <cppLoop+0x5d8>)
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	f7f8 f960 	bl	80002bc <__adddf3>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	460c      	mov	r4, r1
 8008000:	4618      	mov	r0, r3
 8008002:	4621      	mov	r1, r4
 8008004:	f7f8 fe08 	bl	8000c18 <__aeabi_d2f>
 8008008:	4602      	mov	r2, r0
 800800a:	4b1f      	ldr	r3, [pc, #124]	; (8008088 <cppLoop+0x628>)
 800800c:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800800e:	2152      	movs	r1, #82	; 0x52
 8008010:	4813      	ldr	r0, [pc, #76]	; (8008060 <cppLoop+0x600>)
 8008012:	f7fa f90f 	bl	8002234 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008016:	2200      	movs	r2, #0
 8008018:	f04f 31ff 	mov.w	r1, #4294967295
 800801c:	4810      	ldr	r0, [pc, #64]	; (8008060 <cppLoop+0x600>)
 800801e:	f7fa f9c5 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008022:	f001 bac8 	b.w	80095b6 <cppLoop+0x1b56>
 8008026:	bf00      	nop
 8008028:	88e368f1 	.word	0x88e368f1
 800802c:	3ee4f8b5 	.word	0x3ee4f8b5
 8008030:	eb1c432d 	.word	0xeb1c432d
 8008034:	3f1a36e2 	.word	0x3f1a36e2
 8008038:	a0b5ed8d 	.word	0xa0b5ed8d
 800803c:	3eb0c6f7 	.word	0x3eb0c6f7
 8008040:	2001db94 	.word	0x2001db94
 8008044:	200422c0 	.word	0x200422c0
 8008048:	200422c4 	.word	0x200422c4
 800804c:	200422cc 	.word	0x200422cc
 8008050:	200422c8 	.word	0x200422c8
 8008054:	200422d4 	.word	0x200422d4
 8008058:	200422d0 	.word	0x200422d0
 800805c:	200005fc 	.word	0x200005fc
 8008060:	20000604 	.word	0x20000604
 8008064:	447a0000 	.word	0x447a0000
 8008068:	08019b0c 	.word	0x08019b0c
 800806c:	42c80000 	.word	0x42c80000
 8008070:	461c4000 	.word	0x461c4000
 8008074:	08019b18 	.word	0x08019b18
 8008078:	200005f8 	.word	0x200005f8
 800807c:	2004226c 	.word	0x2004226c
 8008080:	20042278 	.word	0x20042278
 8008084:	20042280 	.word	0x20042280
 8008088:	20042288 	.word	0x20042288
		else if(joy_stick.getValue() == JOY_L){
 800808c:	48a2      	ldr	r0, [pc, #648]	; (8008318 <cppLoop+0x8b8>)
 800808e:	f7fa f86d 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008092:	4603      	mov	r3, r0
 8008094:	2b01      	cmp	r3, #1
 8008096:	bf0c      	ite	eq
 8008098:	2301      	moveq	r3, #1
 800809a:	2300      	movne	r3, #0
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d059      	beq.n	8008156 <cppLoop+0x6f6>
			led.LR(-1, 1);
 80080a2:	2201      	movs	r2, #1
 80080a4:	f04f 31ff 	mov.w	r1, #4294967295
 80080a8:	489c      	ldr	r0, [pc, #624]	; (800831c <cppLoop+0x8bc>)
 80080aa:	f7fa f97f 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 80080ae:	2064      	movs	r0, #100	; 0x64
 80080b0:	f001 fbc4 	bl	800983c <HAL_Delay>
			if(selector == 0){
 80080b4:	4b9a      	ldr	r3, [pc, #616]	; (8008320 <cppLoop+0x8c0>)
 80080b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d113      	bne.n	80080e6 <cppLoop+0x686>
				adj_kp = adj_kp - 0.00001;
 80080be:	4b99      	ldr	r3, [pc, #612]	; (8008324 <cppLoop+0x8c4>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7f8 fa58 	bl	8000578 <__aeabi_f2d>
 80080c8:	a38d      	add	r3, pc, #564	; (adr r3, 8008300 <cppLoop+0x8a0>)
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f7f8 f8f3 	bl	80002b8 <__aeabi_dsub>
 80080d2:	4603      	mov	r3, r0
 80080d4:	460c      	mov	r4, r1
 80080d6:	4618      	mov	r0, r3
 80080d8:	4621      	mov	r1, r4
 80080da:	f7f8 fd9d 	bl	8000c18 <__aeabi_d2f>
 80080de:	4602      	mov	r2, r0
 80080e0:	4b90      	ldr	r3, [pc, #576]	; (8008324 <cppLoop+0x8c4>)
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	e02b      	b.n	800813e <cppLoop+0x6de>
			else if(selector == 1){
 80080e6:	4b8e      	ldr	r3, [pc, #568]	; (8008320 <cppLoop+0x8c0>)
 80080e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d113      	bne.n	8008118 <cppLoop+0x6b8>
				adj_ki = adj_ki - 0.0001;
 80080f0:	4b8d      	ldr	r3, [pc, #564]	; (8008328 <cppLoop+0x8c8>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7f8 fa3f 	bl	8000578 <__aeabi_f2d>
 80080fa:	a383      	add	r3, pc, #524	; (adr r3, 8008308 <cppLoop+0x8a8>)
 80080fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008100:	f7f8 f8da 	bl	80002b8 <__aeabi_dsub>
 8008104:	4603      	mov	r3, r0
 8008106:	460c      	mov	r4, r1
 8008108:	4618      	mov	r0, r3
 800810a:	4621      	mov	r1, r4
 800810c:	f7f8 fd84 	bl	8000c18 <__aeabi_d2f>
 8008110:	4602      	mov	r2, r0
 8008112:	4b85      	ldr	r3, [pc, #532]	; (8008328 <cppLoop+0x8c8>)
 8008114:	601a      	str	r2, [r3, #0]
 8008116:	e012      	b.n	800813e <cppLoop+0x6de>
				adj_kd = adj_kd - 0.000001;
 8008118:	4b84      	ldr	r3, [pc, #528]	; (800832c <cppLoop+0x8cc>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4618      	mov	r0, r3
 800811e:	f7f8 fa2b 	bl	8000578 <__aeabi_f2d>
 8008122:	a37b      	add	r3, pc, #492	; (adr r3, 8008310 <cppLoop+0x8b0>)
 8008124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008128:	f7f8 f8c6 	bl	80002b8 <__aeabi_dsub>
 800812c:	4603      	mov	r3, r0
 800812e:	460c      	mov	r4, r1
 8008130:	4618      	mov	r0, r3
 8008132:	4621      	mov	r1, r4
 8008134:	f7f8 fd70 	bl	8000c18 <__aeabi_d2f>
 8008138:	4602      	mov	r2, r0
 800813a:	4b7c      	ldr	r3, [pc, #496]	; (800832c <cppLoop+0x8cc>)
 800813c:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800813e:	2152      	movs	r1, #82	; 0x52
 8008140:	4876      	ldr	r0, [pc, #472]	; (800831c <cppLoop+0x8bc>)
 8008142:	f7fa f877 	bl	8002234 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008146:	2200      	movs	r2, #0
 8008148:	f04f 31ff 	mov.w	r1, #4294967295
 800814c:	4873      	ldr	r0, [pc, #460]	; (800831c <cppLoop+0x8bc>)
 800814e:	f7fa f92d 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008152:	f001 ba30 	b.w	80095b6 <cppLoop+0x1b56>
		else if(joy_stick.getValue() == JOY_D){
 8008156:	4870      	ldr	r0, [pc, #448]	; (8008318 <cppLoop+0x8b8>)
 8008158:	f7fa f808 	bl	800216c <_ZN8JoyStick8getValueEv>
 800815c:	4603      	mov	r3, r0
 800815e:	2b04      	cmp	r3, #4
 8008160:	bf0c      	ite	eq
 8008162:	2301      	moveq	r3, #1
 8008164:	2300      	movne	r3, #0
 8008166:	b2db      	uxtb	r3, r3
 8008168:	2b00      	cmp	r3, #0
 800816a:	d011      	beq.n	8008190 <cppLoop+0x730>
			led.LR(-1, 1);
 800816c:	2201      	movs	r2, #1
 800816e:	f04f 31ff 	mov.w	r1, #4294967295
 8008172:	486a      	ldr	r0, [pc, #424]	; (800831c <cppLoop+0x8bc>)
 8008174:	f7fa f91a 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008178:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800817c:	f001 fb5e 	bl	800983c <HAL_Delay>
			led.LR(-1, 0);
 8008180:	2200      	movs	r2, #0
 8008182:	f04f 31ff 	mov.w	r1, #4294967295
 8008186:	4865      	ldr	r0, [pc, #404]	; (800831c <cppLoop+0x8bc>)
 8008188:	f7fa f910 	bl	80023ac <_ZN3LED2LREaa>
		break;
 800818c:	f001 ba13 	b.w	80095b6 <cppLoop+0x1b56>
		else if(joy_stick.getValue() == JOY_C){
 8008190:	4861      	ldr	r0, [pc, #388]	; (8008318 <cppLoop+0x8b8>)
 8008192:	f7f9 ffeb 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008196:	4603      	mov	r3, r0
 8008198:	2b02      	cmp	r3, #2
 800819a:	bf0c      	ite	eq
 800819c:	2301      	moveq	r3, #1
 800819e:	2300      	movne	r3, #0
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f001 8207 	beq.w	80095b6 <cppLoop+0x1b56>
			led.LR(-1, 1);
 80081a8:	2201      	movs	r2, #1
 80081aa:	f04f 31ff 	mov.w	r1, #4294967295
 80081ae:	485b      	ldr	r0, [pc, #364]	; (800831c <cppLoop+0x8bc>)
 80081b0:	f7fa f8fc 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 80081b4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80081b8:	f001 fb40 	bl	800983c <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 80081bc:	2300      	movs	r3, #0
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	4b58      	ldr	r3, [pc, #352]	; (8008324 <cppLoop+0x8c4>)
 80081c2:	2201      	movs	r2, #1
 80081c4:	495a      	ldr	r1, [pc, #360]	; (8008330 <cppLoop+0x8d0>)
 80081c6:	485b      	ldr	r0, [pc, #364]	; (8008334 <cppLoop+0x8d4>)
 80081c8:	f7f9 fb58 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 80081cc:	2300      	movs	r3, #0
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	4b55      	ldr	r3, [pc, #340]	; (8008328 <cppLoop+0x8c8>)
 80081d2:	2201      	movs	r2, #1
 80081d4:	4958      	ldr	r1, [pc, #352]	; (8008338 <cppLoop+0x8d8>)
 80081d6:	4857      	ldr	r0, [pc, #348]	; (8008334 <cppLoop+0x8d4>)
 80081d8:	f7f9 fb50 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 80081dc:	2300      	movs	r3, #0
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	4b52      	ldr	r3, [pc, #328]	; (800832c <cppLoop+0x8cc>)
 80081e2:	2201      	movs	r2, #1
 80081e4:	4955      	ldr	r1, [pc, #340]	; (800833c <cppLoop+0x8dc>)
 80081e6:	4853      	ldr	r0, [pc, #332]	; (8008334 <cppLoop+0x8d4>)
 80081e8:	f7f9 fb48 	bl	800187c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80081ec:	4b4d      	ldr	r3, [pc, #308]	; (8008324 <cppLoop+0x8c4>)
 80081ee:	edd3 7a00 	vldr	s15, [r3]
 80081f2:	4b4d      	ldr	r3, [pc, #308]	; (8008328 <cppLoop+0x8c8>)
 80081f4:	ed93 7a00 	vldr	s14, [r3]
 80081f8:	4b4c      	ldr	r3, [pc, #304]	; (800832c <cppLoop+0x8cc>)
 80081fa:	edd3 6a00 	vldr	s13, [r3]
 80081fe:	eeb0 1a66 	vmov.f32	s2, s13
 8008202:	eef0 0a47 	vmov.f32	s1, s14
 8008206:	eeb0 0a67 	vmov.f32	s0, s15
 800820a:	484d      	ldr	r0, [pc, #308]	; (8008340 <cppLoop+0x8e0>)
 800820c:	f7fb fd2a 	bl	8003c64 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8008210:	2200      	movs	r2, #0
 8008212:	f04f 31ff 	mov.w	r1, #4294967295
 8008216:	4841      	ldr	r0, [pc, #260]	; (800831c <cppLoop+0x8bc>)
 8008218:	f7fa f8c8 	bl	80023ac <_ZN3LED2LREaa>
		break;
 800821c:	f001 b9cb 	b.w	80095b6 <cppLoop+0x1b56>

	case 1:
		led.fullColor('C');
 8008220:	2143      	movs	r1, #67	; 0x43
 8008222:	483e      	ldr	r0, [pc, #248]	; (800831c <cppLoop+0x8bc>)
 8008224:	f7fa f806 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008228:	f7f8 ff3a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800822c:	2100      	movs	r1, #0
 800822e:	2000      	movs	r0, #0
 8008230:	f7f8 ff46 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008234:	4843      	ldr	r0, [pc, #268]	; (8008344 <cppLoop+0x8e4>)
 8008236:	f7f8 ff6d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800823a:	2101      	movs	r1, #1
 800823c:	2000      	movs	r0, #0
 800823e:	f7f8 ff3f 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8008242:	4b41      	ldr	r3, [pc, #260]	; (8008348 <cppLoop+0x8e8>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4618      	mov	r0, r3
 8008248:	f7f8 f996 	bl	8000578 <__aeabi_f2d>
 800824c:	4603      	mov	r3, r0
 800824e:	460c      	mov	r4, r1
 8008250:	461a      	mov	r2, r3
 8008252:	4623      	mov	r3, r4
 8008254:	483d      	ldr	r0, [pc, #244]	; (800834c <cppLoop+0x8ec>)
 8008256:	f7f8 ff5d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800825a:	482f      	ldr	r0, [pc, #188]	; (8008318 <cppLoop+0x8b8>)
 800825c:	f7f9 ff86 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008260:	4603      	mov	r3, r0
 8008262:	2b02      	cmp	r3, #2
 8008264:	bf0c      	ite	eq
 8008266:	2301      	moveq	r3, #1
 8008268:	2300      	movne	r3, #0
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b00      	cmp	r3, #0
 800826e:	f001 81a4 	beq.w	80095ba <cppLoop+0x1b5a>
			HAL_Delay(500);
 8008272:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008276:	f001 fae1 	bl	800983c <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 800827a:	4b33      	ldr	r3, [pc, #204]	; (8008348 <cppLoop+0x8e8>)
 800827c:	edd3 7a00 	vldr	s15, [r3]
 8008280:	eeb0 0a67 	vmov.f32	s0, s15
 8008284:	482e      	ldr	r0, [pc, #184]	; (8008340 <cppLoop+0x8e0>)
 8008286:	f7fb fd42 	bl	8003d0e <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 800828a:	f04f 32ff 	mov.w	r2, #4294967295
 800828e:	2101      	movs	r1, #1
 8008290:	4822      	ldr	r0, [pc, #136]	; (800831c <cppLoop+0x8bc>)
 8008292:	f7fa f88b 	bl	80023ac <_ZN3LED2LREaa>

			// BLDC on
			HAL_Delay(3000);
 8008296:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800829a:	f001 facf 	bl	800983c <HAL_Delay>
			esc.on(0.5, 0.5, 0.5, 0.5);
 800829e:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80082a2:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80082a6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80082aa:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80082ae:	4828      	ldr	r0, [pc, #160]	; (8008350 <cppLoop+0x8f0>)
 80082b0:	f7f8 ffce 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80082b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082b8:	f001 fac0 	bl	800983c <HAL_Delay>

			// Record start
			logger.start();
 80082bc:	4825      	ldr	r0, [pc, #148]	; (8008354 <cppLoop+0x8f4>)
 80082be:	f7fc fd6c 	bl	8004d9a <_ZN6Logger5startEv>

			// Run
			line_trace.setMode(FIRST_RUNNING);
 80082c2:	2100      	movs	r1, #0
 80082c4:	481e      	ldr	r0, [pc, #120]	; (8008340 <cppLoop+0x8e0>)
 80082c6:	f7fb ff67 	bl	8004198 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 80082ca:	481d      	ldr	r0, [pc, #116]	; (8008340 <cppLoop+0x8e0>)
 80082cc:	f7fb ffa2 	bl	8004214 <_ZN9LineTrace7runningEv>

			// BLDC off
			esc.off();
 80082d0:	481f      	ldr	r0, [pc, #124]	; (8008350 <cppLoop+0x8f0>)
 80082d2:	f7f9 f857 	bl	8001384 <_ZN3ESC3offEv>

			// Record stop and save
			logger.stop();
 80082d6:	481f      	ldr	r0, [pc, #124]	; (8008354 <cppLoop+0x8f4>)
 80082d8:	f7fc fd6f 	bl	8004dba <_ZN6Logger4stopEv>
			logger.saveLogsInt("STATELOG", "LPERIOD.txt");
 80082dc:	4a1e      	ldr	r2, [pc, #120]	; (8008358 <cppLoop+0x8f8>)
 80082de:	491f      	ldr	r1, [pc, #124]	; (800835c <cppLoop+0x8fc>)
 80082e0:	481c      	ldr	r0, [pc, #112]	; (8008354 <cppLoop+0x8f4>)
 80082e2:	f7fc fc65 	bl	8004bb0 <_ZN6Logger11saveLogsIntEPKcS1_>
			logger.saveLogs2Int("STATELOG", "RPERIOD.txt");
 80082e6:	4a1e      	ldr	r2, [pc, #120]	; (8008360 <cppLoop+0x900>)
 80082e8:	491c      	ldr	r1, [pc, #112]	; (800835c <cppLoop+0x8fc>)
 80082ea:	481a      	ldr	r0, [pc, #104]	; (8008354 <cppLoop+0x8f4>)
 80082ec:	f7fc fc76 	bl	8004bdc <_ZN6Logger12saveLogs2IntEPKcS1_>

			led.LR(0, -1);
 80082f0:	f04f 32ff 	mov.w	r2, #4294967295
 80082f4:	2100      	movs	r1, #0
 80082f6:	4809      	ldr	r0, [pc, #36]	; (800831c <cppLoop+0x8bc>)
 80082f8:	f7fa f858 	bl	80023ac <_ZN3LED2LREaa>
		}

		break;
 80082fc:	f001 b95d 	b.w	80095ba <cppLoop+0x1b5a>
 8008300:	88e368f1 	.word	0x88e368f1
 8008304:	3ee4f8b5 	.word	0x3ee4f8b5
 8008308:	eb1c432d 	.word	0xeb1c432d
 800830c:	3f1a36e2 	.word	0x3f1a36e2
 8008310:	a0b5ed8d 	.word	0xa0b5ed8d
 8008314:	3eb0c6f7 	.word	0x3eb0c6f7
 8008318:	200005f8 	.word	0x200005f8
 800831c:	20000604 	.word	0x20000604
 8008320:	2004226c 	.word	0x2004226c
 8008324:	20042278 	.word	0x20042278
 8008328:	20042280 	.word	0x20042280
 800832c:	20042288 	.word	0x20042288
 8008330:	08019b28 	.word	0x08019b28
 8008334:	08019b30 	.word	0x08019b30
 8008338:	08019b38 	.word	0x08019b38
 800833c:	08019b40 	.word	0x08019b40
 8008340:	2001db94 	.word	0x2001db94
 8008344:	08019b48 	.word	0x08019b48
 8008348:	20042290 	.word	0x20042290
 800834c:	08019b54 	.word	0x08019b54
 8008350:	2001db90 	.word	0x2001db90
 8008354:	20000628 	.word	0x20000628
 8008358:	08019b60 	.word	0x08019b60
 800835c:	08019b6c 	.word	0x08019b6c
 8008360:	08019b78 	.word	0x08019b78

	case 2:
		led.fullColor('B');
 8008364:	2142      	movs	r1, #66	; 0x42
 8008366:	48b6      	ldr	r0, [pc, #728]	; (8008640 <cppLoop+0xbe0>)
 8008368:	f7f9 ff64 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 800836c:	f7f8 fe98 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008370:	2100      	movs	r1, #0
 8008372:	2000      	movs	r0, #0
 8008374:	f7f8 fea4 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008378:	48b2      	ldr	r0, [pc, #712]	; (8008644 <cppLoop+0xbe4>)
 800837a:	f7f8 fecb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800837e:	2101      	movs	r1, #1
 8008380:	2000      	movs	r0, #0
 8008382:	f7f8 fe9d 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8008386:	4bb0      	ldr	r3, [pc, #704]	; (8008648 <cppLoop+0xbe8>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4618      	mov	r0, r3
 800838c:	f7f8 f8f4 	bl	8000578 <__aeabi_f2d>
 8008390:	4603      	mov	r3, r0
 8008392:	460c      	mov	r4, r1
 8008394:	461a      	mov	r2, r3
 8008396:	4623      	mov	r3, r4
 8008398:	48ac      	ldr	r0, [pc, #688]	; (800864c <cppLoop+0xbec>)
 800839a:	f7f8 febb 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 800839e:	48ac      	ldr	r0, [pc, #688]	; (8008650 <cppLoop+0xbf0>)
 80083a0:	f7f9 fee4 	bl	800216c <_ZN8JoyStick8getValueEv>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b10      	cmp	r3, #16
 80083a8:	bf0c      	ite	eq
 80083aa:	2301      	moveq	r3, #1
 80083ac:	2300      	movne	r3, #0
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d023      	beq.n	80083fc <cppLoop+0x99c>
			led.LR(-1, 1);
 80083b4:	2201      	movs	r2, #1
 80083b6:	f04f 31ff 	mov.w	r1, #4294967295
 80083ba:	48a1      	ldr	r0, [pc, #644]	; (8008640 <cppLoop+0xbe0>)
 80083bc:	f7f9 fff6 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 80083c0:	2064      	movs	r0, #100	; 0x64
 80083c2:	f001 fa3b 	bl	800983c <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 80083c6:	4ba0      	ldr	r3, [pc, #640]	; (8008648 <cppLoop+0xbe8>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7f8 f8d4 	bl	8000578 <__aeabi_f2d>
 80083d0:	a399      	add	r3, pc, #612	; (adr r3, 8008638 <cppLoop+0xbd8>)
 80083d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d6:	f7f7 ff71 	bl	80002bc <__adddf3>
 80083da:	4603      	mov	r3, r0
 80083dc:	460c      	mov	r4, r1
 80083de:	4618      	mov	r0, r3
 80083e0:	4621      	mov	r1, r4
 80083e2:	f7f8 fc19 	bl	8000c18 <__aeabi_d2f>
 80083e6:	4602      	mov	r2, r0
 80083e8:	4b97      	ldr	r3, [pc, #604]	; (8008648 <cppLoop+0xbe8>)
 80083ea:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 80083ec:	2200      	movs	r2, #0
 80083ee:	f04f 31ff 	mov.w	r1, #4294967295
 80083f2:	4893      	ldr	r0, [pc, #588]	; (8008640 <cppLoop+0xbe0>)
 80083f4:	f7f9 ffda 	bl	80023ac <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 80083f8:	f001 b8e1 	b.w	80095be <cppLoop+0x1b5e>
		else if(joy_stick.getValue() == JOY_L){
 80083fc:	4894      	ldr	r0, [pc, #592]	; (8008650 <cppLoop+0xbf0>)
 80083fe:	f7f9 feb5 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008402:	4603      	mov	r3, r0
 8008404:	2b01      	cmp	r3, #1
 8008406:	bf0c      	ite	eq
 8008408:	2301      	moveq	r3, #1
 800840a:	2300      	movne	r3, #0
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b00      	cmp	r3, #0
 8008410:	d023      	beq.n	800845a <cppLoop+0x9fa>
			led.LR(-1, 1);
 8008412:	2201      	movs	r2, #1
 8008414:	f04f 31ff 	mov.w	r1, #4294967295
 8008418:	4889      	ldr	r0, [pc, #548]	; (8008640 <cppLoop+0xbe0>)
 800841a:	f7f9 ffc7 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 800841e:	2064      	movs	r0, #100	; 0x64
 8008420:	f001 fa0c 	bl	800983c <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008424:	4b88      	ldr	r3, [pc, #544]	; (8008648 <cppLoop+0xbe8>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4618      	mov	r0, r3
 800842a:	f7f8 f8a5 	bl	8000578 <__aeabi_f2d>
 800842e:	a382      	add	r3, pc, #520	; (adr r3, 8008638 <cppLoop+0xbd8>)
 8008430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008434:	f7f7 ff40 	bl	80002b8 <__aeabi_dsub>
 8008438:	4603      	mov	r3, r0
 800843a:	460c      	mov	r4, r1
 800843c:	4618      	mov	r0, r3
 800843e:	4621      	mov	r1, r4
 8008440:	f7f8 fbea 	bl	8000c18 <__aeabi_d2f>
 8008444:	4602      	mov	r2, r0
 8008446:	4b80      	ldr	r3, [pc, #512]	; (8008648 <cppLoop+0xbe8>)
 8008448:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800844a:	2200      	movs	r2, #0
 800844c:	f04f 31ff 	mov.w	r1, #4294967295
 8008450:	487b      	ldr	r0, [pc, #492]	; (8008640 <cppLoop+0xbe0>)
 8008452:	f7f9 ffab 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008456:	f001 b8b2 	b.w	80095be <cppLoop+0x1b5e>
		else if(joy_stick.getValue() == JOY_C){
 800845a:	487d      	ldr	r0, [pc, #500]	; (8008650 <cppLoop+0xbf0>)
 800845c:	f7f9 fe86 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008460:	4603      	mov	r3, r0
 8008462:	2b02      	cmp	r3, #2
 8008464:	bf0c      	ite	eq
 8008466:	2301      	moveq	r3, #1
 8008468:	2300      	movne	r3, #0
 800846a:	b2db      	uxtb	r3, r3
 800846c:	2b00      	cmp	r3, #0
 800846e:	f001 80a6 	beq.w	80095be <cppLoop+0x1b5e>
			led.LR(-1, 1);
 8008472:	2201      	movs	r2, #1
 8008474:	f04f 31ff 	mov.w	r1, #4294967295
 8008478:	4871      	ldr	r0, [pc, #452]	; (8008640 <cppLoop+0xbe0>)
 800847a:	f7f9 ff97 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 800847e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008482:	f001 f9db 	bl	800983c <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8008486:	2300      	movs	r3, #0
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	4b6f      	ldr	r3, [pc, #444]	; (8008648 <cppLoop+0xbe8>)
 800848c:	2201      	movs	r2, #1
 800848e:	4971      	ldr	r1, [pc, #452]	; (8008654 <cppLoop+0xbf4>)
 8008490:	4871      	ldr	r0, [pc, #452]	; (8008658 <cppLoop+0xbf8>)
 8008492:	f7f9 f9f3 	bl	800187c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8008496:	4b6c      	ldr	r3, [pc, #432]	; (8008648 <cppLoop+0xbe8>)
 8008498:	edd3 7a00 	vldr	s15, [r3]
 800849c:	eeb0 0a67 	vmov.f32	s0, s15
 80084a0:	486e      	ldr	r0, [pc, #440]	; (800865c <cppLoop+0xbfc>)
 80084a2:	f7fb fc34 	bl	8003d0e <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 80084a6:	2200      	movs	r2, #0
 80084a8:	f04f 31ff 	mov.w	r1, #4294967295
 80084ac:	4864      	ldr	r0, [pc, #400]	; (8008640 <cppLoop+0xbe0>)
 80084ae:	f7f9 ff7d 	bl	80023ac <_ZN3LED2LREaa>
		break;
 80084b2:	f001 b884 	b.w	80095be <cppLoop+0x1b5e>

	case 3:
		led.fullColor('Y');
 80084b6:	2159      	movs	r1, #89	; 0x59
 80084b8:	4861      	ldr	r0, [pc, #388]	; (8008640 <cppLoop+0xbe0>)
 80084ba:	f7f9 febb 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 80084be:	f7f8 fdef 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80084c2:	2100      	movs	r1, #0
 80084c4:	2000      	movs	r0, #0
 80084c6:	f7f8 fdfb 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 80084ca:	4b65      	ldr	r3, [pc, #404]	; (8008660 <cppLoop+0xc00>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7f8 f852 	bl	8000578 <__aeabi_f2d>
 80084d4:	4603      	mov	r3, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	461a      	mov	r2, r3
 80084da:	4623      	mov	r3, r4
 80084dc:	4861      	ldr	r0, [pc, #388]	; (8008664 <cppLoop+0xc04>)
 80084de:	f7f8 fe19 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80084e2:	2101      	movs	r1, #1
 80084e4:	2000      	movs	r0, #0
 80084e6:	f7f8 fdeb 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 80084ea:	4b5f      	ldr	r3, [pc, #380]	; (8008668 <cppLoop+0xc08>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7f8 f842 	bl	8000578 <__aeabi_f2d>
 80084f4:	4603      	mov	r3, r0
 80084f6:	460c      	mov	r4, r1
 80084f8:	461a      	mov	r2, r3
 80084fa:	4623      	mov	r3, r4
 80084fc:	485b      	ldr	r0, [pc, #364]	; (800866c <cppLoop+0xc0c>)
 80084fe:	f7f8 fe09 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008502:	4853      	ldr	r0, [pc, #332]	; (8008650 <cppLoop+0xbf0>)
 8008504:	f7f9 fe32 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008508:	4603      	mov	r3, r0
 800850a:	2b02      	cmp	r3, #2
 800850c:	bf0c      	ite	eq
 800850e:	2301      	moveq	r3, #1
 8008510:	2300      	movne	r3, #0
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	f001 8054 	beq.w	80095c2 <cppLoop+0x1b62>
			HAL_Delay(500);
 800851a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800851e:	f001 f98d 	bl	800983c <HAL_Delay>

			led.LR(1, -1);
 8008522:	f04f 32ff 	mov.w	r2, #4294967295
 8008526:	2101      	movs	r1, #1
 8008528:	4845      	ldr	r0, [pc, #276]	; (8008640 <cppLoop+0xbe0>)
 800852a:	f7f9 ff3f 	bl	80023ac <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800852e:	2101      	movs	r1, #1
 8008530:	484a      	ldr	r0, [pc, #296]	; (800865c <cppLoop+0xbfc>)
 8008532:	f7fb fe31 	bl	8004198 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8008536:	4b4c      	ldr	r3, [pc, #304]	; (8008668 <cppLoop+0xc08>)
 8008538:	edd3 7a00 	vldr	s15, [r3]
 800853c:	eeb0 0a67 	vmov.f32	s0, s15
 8008540:	4846      	ldr	r0, [pc, #280]	; (800865c <cppLoop+0xbfc>)
 8008542:	f7fb fbe4 	bl	8003d0e <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008546:	4b46      	ldr	r3, [pc, #280]	; (8008660 <cppLoop+0xc00>)
 8008548:	edd3 7a00 	vldr	s15, [r3]
 800854c:	eeb0 0a67 	vmov.f32	s0, s15
 8008550:	4842      	ldr	r0, [pc, #264]	; (800865c <cppLoop+0xbfc>)
 8008552:	f7fb fbec 	bl	8003d2e <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008556:	4b44      	ldr	r3, [pc, #272]	; (8008668 <cppLoop+0xc08>)
 8008558:	edd3 7a00 	vldr	s15, [r3]
 800855c:	eeb0 0a67 	vmov.f32	s0, s15
 8008560:	483e      	ldr	r0, [pc, #248]	; (800865c <cppLoop+0xbfc>)
 8008562:	f7fb fc04 	bl	8003d6e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8008566:	483d      	ldr	r0, [pc, #244]	; (800865c <cppLoop+0xbfc>)
 8008568:	f7fb ff3e 	bl	80043e8 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 800856c:	483b      	ldr	r0, [pc, #236]	; (800865c <cppLoop+0xbfc>)
 800856e:	f7fb fe51 	bl	8004214 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008572:	f04f 32ff 	mov.w	r2, #4294967295
 8008576:	2100      	movs	r1, #0
 8008578:	4831      	ldr	r0, [pc, #196]	; (8008640 <cppLoop+0xbe0>)
 800857a:	f7f9 ff17 	bl	80023ac <_ZN3LED2LREaa>
		}

		break;
 800857e:	f001 b820 	b.w	80095c2 <cppLoop+0x1b62>

	case 4:
		led.fullColor('G');
 8008582:	2147      	movs	r1, #71	; 0x47
 8008584:	482e      	ldr	r0, [pc, #184]	; (8008640 <cppLoop+0xbe0>)
 8008586:	f7f9 fe55 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 800858a:	f7f8 fd89 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800858e:	2100      	movs	r1, #0
 8008590:	2000      	movs	r0, #0
 8008592:	f7f8 fd95 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8008596:	4831      	ldr	r0, [pc, #196]	; (800865c <cppLoop+0xbfc>)
 8008598:	f7fb fc19 	bl	8003dce <_ZN9LineTrace14getMaxVelocityEv>
 800859c:	ee10 3a10 	vmov	r3, s0
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7f7 ffe9 	bl	8000578 <__aeabi_f2d>
 80085a6:	4603      	mov	r3, r0
 80085a8:	460c      	mov	r4, r1
 80085aa:	461a      	mov	r2, r3
 80085ac:	4623      	mov	r3, r4
 80085ae:	482d      	ldr	r0, [pc, #180]	; (8008664 <cppLoop+0xc04>)
 80085b0:	f7f8 fdb0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80085b4:	2101      	movs	r1, #1
 80085b6:	2000      	movs	r0, #0
 80085b8:	f7f8 fd82 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 80085bc:	4827      	ldr	r0, [pc, #156]	; (800865c <cppLoop+0xbfc>)
 80085be:	f7fb fc26 	bl	8003e0e <_ZN9LineTrace14getMinVelocityEv>
 80085c2:	ee10 3a10 	vmov	r3, s0
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7f7 ffd6 	bl	8000578 <__aeabi_f2d>
 80085cc:	4603      	mov	r3, r0
 80085ce:	460c      	mov	r4, r1
 80085d0:	461a      	mov	r2, r3
 80085d2:	4623      	mov	r3, r4
 80085d4:	481d      	ldr	r0, [pc, #116]	; (800864c <cppLoop+0xbec>)
 80085d6:	f7f8 fd9d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80085da:	481d      	ldr	r0, [pc, #116]	; (8008650 <cppLoop+0xbf0>)
 80085dc:	f7f9 fdc6 	bl	800216c <_ZN8JoyStick8getValueEv>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b08      	cmp	r3, #8
 80085e4:	bf0c      	ite	eq
 80085e6:	2301      	moveq	r3, #1
 80085e8:	2300      	movne	r3, #0
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d041      	beq.n	8008674 <cppLoop+0xc14>
			led.LR(-1, 1);
 80085f0:	2201      	movs	r2, #1
 80085f2:	f04f 31ff 	mov.w	r1, #4294967295
 80085f6:	4812      	ldr	r0, [pc, #72]	; (8008640 <cppLoop+0xbe0>)
 80085f8:	f7f9 fed8 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 80085fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008600:	f001 f91c 	bl	800983c <HAL_Delay>

			selector_vel++;
 8008604:	4b1a      	ldr	r3, [pc, #104]	; (8008670 <cppLoop+0xc10>)
 8008606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800860a:	b29b      	uxth	r3, r3
 800860c:	3301      	adds	r3, #1
 800860e:	b29b      	uxth	r3, r3
 8008610:	b21a      	sxth	r2, r3
 8008612:	4b17      	ldr	r3, [pc, #92]	; (8008670 <cppLoop+0xc10>)
 8008614:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8008616:	4b16      	ldr	r3, [pc, #88]	; (8008670 <cppLoop+0xc10>)
 8008618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800861c:	2b01      	cmp	r3, #1
 800861e:	dd02      	ble.n	8008626 <cppLoop+0xbc6>
 8008620:	4b13      	ldr	r3, [pc, #76]	; (8008670 <cppLoop+0xc10>)
 8008622:	2200      	movs	r2, #0
 8008624:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008626:	2200      	movs	r2, #0
 8008628:	f04f 31ff 	mov.w	r1, #4294967295
 800862c:	4804      	ldr	r0, [pc, #16]	; (8008640 <cppLoop+0xbe0>)
 800862e:	f7f9 febd 	bl	80023ac <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 8008632:	f000 bfc8 	b.w	80095c6 <cppLoop+0x1b66>
 8008636:	bf00      	nop
 8008638:	9999999a 	.word	0x9999999a
 800863c:	3fb99999 	.word	0x3fb99999
 8008640:	20000604 	.word	0x20000604
 8008644:	08019b48 	.word	0x08019b48
 8008648:	20042290 	.word	0x20042290
 800864c:	08019b84 	.word	0x08019b84
 8008650:	200005f8 	.word	0x200005f8
 8008654:	08019b90 	.word	0x08019b90
 8008658:	08019b30 	.word	0x08019b30
 800865c:	2001db94 	.word	0x2001db94
 8008660:	20042298 	.word	0x20042298
 8008664:	08019b9c 	.word	0x08019b9c
 8008668:	200422a8 	.word	0x200422a8
 800866c:	08019b54 	.word	0x08019b54
 8008670:	20042272 	.word	0x20042272
		else if(joy_stick.getValue() == JOY_R){
 8008674:	489c      	ldr	r0, [pc, #624]	; (80088e8 <cppLoop+0xe88>)
 8008676:	f7f9 fd79 	bl	800216c <_ZN8JoyStick8getValueEv>
 800867a:	4603      	mov	r3, r0
 800867c:	2b10      	cmp	r3, #16
 800867e:	bf0c      	ite	eq
 8008680:	2301      	moveq	r3, #1
 8008682:	2300      	movne	r3, #0
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d03c      	beq.n	8008704 <cppLoop+0xca4>
			led.LR(-1, 1);
 800868a:	2201      	movs	r2, #1
 800868c:	f04f 31ff 	mov.w	r1, #4294967295
 8008690:	4896      	ldr	r0, [pc, #600]	; (80088ec <cppLoop+0xe8c>)
 8008692:	f7f9 fe8b 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008696:	2064      	movs	r0, #100	; 0x64
 8008698:	f001 f8d0 	bl	800983c <HAL_Delay>
			if(selector_vel == 0)
 800869c:	4b94      	ldr	r3, [pc, #592]	; (80088f0 <cppLoop+0xe90>)
 800869e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d113      	bne.n	80086ce <cppLoop+0xc6e>
				adj_max_velocity = adj_max_velocity + 0.1;
 80086a6:	4b93      	ldr	r3, [pc, #588]	; (80088f4 <cppLoop+0xe94>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7f7 ff64 	bl	8000578 <__aeabi_f2d>
 80086b0:	a38b      	add	r3, pc, #556	; (adr r3, 80088e0 <cppLoop+0xe80>)
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	f7f7 fe01 	bl	80002bc <__adddf3>
 80086ba:	4603      	mov	r3, r0
 80086bc:	460c      	mov	r4, r1
 80086be:	4618      	mov	r0, r3
 80086c0:	4621      	mov	r1, r4
 80086c2:	f7f8 faa9 	bl	8000c18 <__aeabi_d2f>
 80086c6:	4602      	mov	r2, r0
 80086c8:	4b8a      	ldr	r3, [pc, #552]	; (80088f4 <cppLoop+0xe94>)
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	e012      	b.n	80086f4 <cppLoop+0xc94>
				adj_min_velocity = adj_min_velocity + 0.1;
 80086ce:	4b8a      	ldr	r3, [pc, #552]	; (80088f8 <cppLoop+0xe98>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7f7 ff50 	bl	8000578 <__aeabi_f2d>
 80086d8:	a381      	add	r3, pc, #516	; (adr r3, 80088e0 <cppLoop+0xe80>)
 80086da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086de:	f7f7 fded 	bl	80002bc <__adddf3>
 80086e2:	4603      	mov	r3, r0
 80086e4:	460c      	mov	r4, r1
 80086e6:	4618      	mov	r0, r3
 80086e8:	4621      	mov	r1, r4
 80086ea:	f7f8 fa95 	bl	8000c18 <__aeabi_d2f>
 80086ee:	4602      	mov	r2, r0
 80086f0:	4b81      	ldr	r3, [pc, #516]	; (80088f8 <cppLoop+0xe98>)
 80086f2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80086f4:	2200      	movs	r2, #0
 80086f6:	f04f 31ff 	mov.w	r1, #4294967295
 80086fa:	487c      	ldr	r0, [pc, #496]	; (80088ec <cppLoop+0xe8c>)
 80086fc:	f7f9 fe56 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008700:	f000 bf61 	b.w	80095c6 <cppLoop+0x1b66>
		else if(joy_stick.getValue() == JOY_L){
 8008704:	4878      	ldr	r0, [pc, #480]	; (80088e8 <cppLoop+0xe88>)
 8008706:	f7f9 fd31 	bl	800216c <_ZN8JoyStick8getValueEv>
 800870a:	4603      	mov	r3, r0
 800870c:	2b01      	cmp	r3, #1
 800870e:	bf0c      	ite	eq
 8008710:	2301      	moveq	r3, #1
 8008712:	2300      	movne	r3, #0
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d03c      	beq.n	8008794 <cppLoop+0xd34>
			led.LR(-1, 1);
 800871a:	2201      	movs	r2, #1
 800871c:	f04f 31ff 	mov.w	r1, #4294967295
 8008720:	4872      	ldr	r0, [pc, #456]	; (80088ec <cppLoop+0xe8c>)
 8008722:	f7f9 fe43 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008726:	2064      	movs	r0, #100	; 0x64
 8008728:	f001 f888 	bl	800983c <HAL_Delay>
			if(selector_vel == 0)
 800872c:	4b70      	ldr	r3, [pc, #448]	; (80088f0 <cppLoop+0xe90>)
 800872e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d113      	bne.n	800875e <cppLoop+0xcfe>
				adj_max_velocity = adj_max_velocity - 0.1;
 8008736:	4b6f      	ldr	r3, [pc, #444]	; (80088f4 <cppLoop+0xe94>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4618      	mov	r0, r3
 800873c:	f7f7 ff1c 	bl	8000578 <__aeabi_f2d>
 8008740:	a367      	add	r3, pc, #412	; (adr r3, 80088e0 <cppLoop+0xe80>)
 8008742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008746:	f7f7 fdb7 	bl	80002b8 <__aeabi_dsub>
 800874a:	4603      	mov	r3, r0
 800874c:	460c      	mov	r4, r1
 800874e:	4618      	mov	r0, r3
 8008750:	4621      	mov	r1, r4
 8008752:	f7f8 fa61 	bl	8000c18 <__aeabi_d2f>
 8008756:	4602      	mov	r2, r0
 8008758:	4b66      	ldr	r3, [pc, #408]	; (80088f4 <cppLoop+0xe94>)
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	e012      	b.n	8008784 <cppLoop+0xd24>
				adj_min_velocity = adj_min_velocity - 0.1;
 800875e:	4b66      	ldr	r3, [pc, #408]	; (80088f8 <cppLoop+0xe98>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4618      	mov	r0, r3
 8008764:	f7f7 ff08 	bl	8000578 <__aeabi_f2d>
 8008768:	a35d      	add	r3, pc, #372	; (adr r3, 80088e0 <cppLoop+0xe80>)
 800876a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800876e:	f7f7 fda3 	bl	80002b8 <__aeabi_dsub>
 8008772:	4603      	mov	r3, r0
 8008774:	460c      	mov	r4, r1
 8008776:	4618      	mov	r0, r3
 8008778:	4621      	mov	r1, r4
 800877a:	f7f8 fa4d 	bl	8000c18 <__aeabi_d2f>
 800877e:	4602      	mov	r2, r0
 8008780:	4b5d      	ldr	r3, [pc, #372]	; (80088f8 <cppLoop+0xe98>)
 8008782:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008784:	2200      	movs	r2, #0
 8008786:	f04f 31ff 	mov.w	r1, #4294967295
 800878a:	4858      	ldr	r0, [pc, #352]	; (80088ec <cppLoop+0xe8c>)
 800878c:	f7f9 fe0e 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008790:	f000 bf19 	b.w	80095c6 <cppLoop+0x1b66>
		else if(joy_stick.getValue() == JOY_C){
 8008794:	4854      	ldr	r0, [pc, #336]	; (80088e8 <cppLoop+0xe88>)
 8008796:	f7f9 fce9 	bl	800216c <_ZN8JoyStick8getValueEv>
 800879a:	4603      	mov	r3, r0
 800879c:	2b02      	cmp	r3, #2
 800879e:	bf0c      	ite	eq
 80087a0:	2301      	moveq	r3, #1
 80087a2:	2300      	movne	r3, #0
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f000 870d 	beq.w	80095c6 <cppLoop+0x1b66>
			led.LR(-1, 1);
 80087ac:	2201      	movs	r2, #1
 80087ae:	f04f 31ff 	mov.w	r1, #4294967295
 80087b2:	484e      	ldr	r0, [pc, #312]	; (80088ec <cppLoop+0xe8c>)
 80087b4:	f7f9 fdfa 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 80087b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80087bc:	f001 f83e 	bl	800983c <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 80087c0:	2300      	movs	r3, #0
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	4b4b      	ldr	r3, [pc, #300]	; (80088f4 <cppLoop+0xe94>)
 80087c6:	2201      	movs	r2, #1
 80087c8:	494c      	ldr	r1, [pc, #304]	; (80088fc <cppLoop+0xe9c>)
 80087ca:	484d      	ldr	r0, [pc, #308]	; (8008900 <cppLoop+0xea0>)
 80087cc:	f7f9 f856 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 80087d0:	2300      	movs	r3, #0
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	4b48      	ldr	r3, [pc, #288]	; (80088f8 <cppLoop+0xe98>)
 80087d6:	2201      	movs	r2, #1
 80087d8:	494a      	ldr	r1, [pc, #296]	; (8008904 <cppLoop+0xea4>)
 80087da:	4849      	ldr	r0, [pc, #292]	; (8008900 <cppLoop+0xea0>)
 80087dc:	f7f9 f84e 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 80087e0:	4b44      	ldr	r3, [pc, #272]	; (80088f4 <cppLoop+0xe94>)
 80087e2:	edd3 7a00 	vldr	s15, [r3]
 80087e6:	eeb0 0a67 	vmov.f32	s0, s15
 80087ea:	4847      	ldr	r0, [pc, #284]	; (8008908 <cppLoop+0xea8>)
 80087ec:	f7fb fa9f 	bl	8003d2e <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80087f0:	4b41      	ldr	r3, [pc, #260]	; (80088f8 <cppLoop+0xe98>)
 80087f2:	edd3 7a00 	vldr	s15, [r3]
 80087f6:	eeb0 0a67 	vmov.f32	s0, s15
 80087fa:	4843      	ldr	r0, [pc, #268]	; (8008908 <cppLoop+0xea8>)
 80087fc:	f7fb fab7 	bl	8003d6e <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008800:	2200      	movs	r2, #0
 8008802:	f04f 31ff 	mov.w	r1, #4294967295
 8008806:	4839      	ldr	r0, [pc, #228]	; (80088ec <cppLoop+0xe8c>)
 8008808:	f7f9 fdd0 	bl	80023ac <_ZN3LED2LREaa>
		break;
 800880c:	f000 bedb 	b.w	80095c6 <cppLoop+0x1b66>

	case 5:
		led.fullColor('M');
 8008810:	214d      	movs	r1, #77	; 0x4d
 8008812:	4836      	ldr	r0, [pc, #216]	; (80088ec <cppLoop+0xe8c>)
 8008814:	f7f9 fd0e 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008818:	f7f8 fc42 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800881c:	2100      	movs	r1, #0
 800881e:	2000      	movs	r0, #0
 8008820:	f7f8 fc4e 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008824:	4b39      	ldr	r3, [pc, #228]	; (800890c <cppLoop+0xeac>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4618      	mov	r0, r3
 800882a:	f7f7 fea5 	bl	8000578 <__aeabi_f2d>
 800882e:	4603      	mov	r3, r0
 8008830:	460c      	mov	r4, r1
 8008832:	461a      	mov	r2, r3
 8008834:	4623      	mov	r3, r4
 8008836:	4836      	ldr	r0, [pc, #216]	; (8008910 <cppLoop+0xeb0>)
 8008838:	f7f8 fc6c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800883c:	2101      	movs	r1, #1
 800883e:	2000      	movs	r0, #0
 8008840:	f7f8 fc3e 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008844:	4b33      	ldr	r3, [pc, #204]	; (8008914 <cppLoop+0xeb4>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4618      	mov	r0, r3
 800884a:	f7f7 fe95 	bl	8000578 <__aeabi_f2d>
 800884e:	4603      	mov	r3, r0
 8008850:	460c      	mov	r4, r1
 8008852:	461a      	mov	r2, r3
 8008854:	4623      	mov	r3, r4
 8008856:	4830      	ldr	r0, [pc, #192]	; (8008918 <cppLoop+0xeb8>)
 8008858:	f7f8 fc5c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800885c:	4822      	ldr	r0, [pc, #136]	; (80088e8 <cppLoop+0xe88>)
 800885e:	f7f9 fc85 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008862:	4603      	mov	r3, r0
 8008864:	2b02      	cmp	r3, #2
 8008866:	bf0c      	ite	eq
 8008868:	2301      	moveq	r3, #1
 800886a:	2300      	movne	r3, #0
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	f000 86ab 	beq.w	80095ca <cppLoop+0x1b6a>
			HAL_Delay(500);
 8008874:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008878:	f000 ffe0 	bl	800983c <HAL_Delay>

			led.LR(1, -1);
 800887c:	f04f 32ff 	mov.w	r2, #4294967295
 8008880:	2101      	movs	r1, #1
 8008882:	481a      	ldr	r0, [pc, #104]	; (80088ec <cppLoop+0xe8c>)
 8008884:	f7f9 fd92 	bl	80023ac <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8008888:	2102      	movs	r1, #2
 800888a:	481f      	ldr	r0, [pc, #124]	; (8008908 <cppLoop+0xea8>)
 800888c:	f7fb fc84 	bl	8004198 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008890:	4b20      	ldr	r3, [pc, #128]	; (8008914 <cppLoop+0xeb4>)
 8008892:	edd3 7a00 	vldr	s15, [r3]
 8008896:	eeb0 0a67 	vmov.f32	s0, s15
 800889a:	481b      	ldr	r0, [pc, #108]	; (8008908 <cppLoop+0xea8>)
 800889c:	f7fb fa37 	bl	8003d0e <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80088a0:	4b1a      	ldr	r3, [pc, #104]	; (800890c <cppLoop+0xeac>)
 80088a2:	edd3 7a00 	vldr	s15, [r3]
 80088a6:	eeb0 0a67 	vmov.f32	s0, s15
 80088aa:	4817      	ldr	r0, [pc, #92]	; (8008908 <cppLoop+0xea8>)
 80088ac:	f7fb fa4f 	bl	8003d4e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80088b0:	4b18      	ldr	r3, [pc, #96]	; (8008914 <cppLoop+0xeb4>)
 80088b2:	edd3 7a00 	vldr	s15, [r3]
 80088b6:	eeb0 0a67 	vmov.f32	s0, s15
 80088ba:	4813      	ldr	r0, [pc, #76]	; (8008908 <cppLoop+0xea8>)
 80088bc:	f7fb fa67 	bl	8003d8e <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 80088c0:	4811      	ldr	r0, [pc, #68]	; (8008908 <cppLoop+0xea8>)
 80088c2:	f7fb fd91 	bl	80043e8 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 80088c6:	4810      	ldr	r0, [pc, #64]	; (8008908 <cppLoop+0xea8>)
 80088c8:	f7fb fca4 	bl	8004214 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80088cc:	f04f 32ff 	mov.w	r2, #4294967295
 80088d0:	2100      	movs	r1, #0
 80088d2:	4806      	ldr	r0, [pc, #24]	; (80088ec <cppLoop+0xe8c>)
 80088d4:	f7f9 fd6a 	bl	80023ac <_ZN3LED2LREaa>
		}

		break;
 80088d8:	f000 be77 	b.w	80095ca <cppLoop+0x1b6a>
 80088dc:	f3af 8000 	nop.w
 80088e0:	9999999a 	.word	0x9999999a
 80088e4:	3fb99999 	.word	0x3fb99999
 80088e8:	200005f8 	.word	0x200005f8
 80088ec:	20000604 	.word	0x20000604
 80088f0:	20042272 	.word	0x20042272
 80088f4:	20042298 	.word	0x20042298
 80088f8:	200422a8 	.word	0x200422a8
 80088fc:	08019ba8 	.word	0x08019ba8
 8008900:	08019b30 	.word	0x08019b30
 8008904:	08019bb4 	.word	0x08019bb4
 8008908:	2001db94 	.word	0x2001db94
 800890c:	200422a0 	.word	0x200422a0
 8008910:	08019bc0 	.word	0x08019bc0
 8008914:	200422b0 	.word	0x200422b0
 8008918:	08019b54 	.word	0x08019b54

	case 6:
		led.fullColor('R');
 800891c:	2152      	movs	r1, #82	; 0x52
 800891e:	4896      	ldr	r0, [pc, #600]	; (8008b78 <cppLoop+0x1118>)
 8008920:	f7f9 fc88 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008924:	f7f8 fbbc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008928:	2100      	movs	r1, #0
 800892a:	2000      	movs	r0, #0
 800892c:	f7f8 fbc8 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008930:	4892      	ldr	r0, [pc, #584]	; (8008b7c <cppLoop+0x111c>)
 8008932:	f7fb fa5c 	bl	8003dee <_ZN9LineTrace15getMaxVelocity2Ev>
 8008936:	ee10 3a10 	vmov	r3, s0
 800893a:	4618      	mov	r0, r3
 800893c:	f7f7 fe1c 	bl	8000578 <__aeabi_f2d>
 8008940:	4603      	mov	r3, r0
 8008942:	460c      	mov	r4, r1
 8008944:	461a      	mov	r2, r3
 8008946:	4623      	mov	r3, r4
 8008948:	488d      	ldr	r0, [pc, #564]	; (8008b80 <cppLoop+0x1120>)
 800894a:	f7f8 fbe3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800894e:	2101      	movs	r1, #1
 8008950:	2000      	movs	r0, #0
 8008952:	f7f8 fbb5 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008956:	4889      	ldr	r0, [pc, #548]	; (8008b7c <cppLoop+0x111c>)
 8008958:	f7fb fa69 	bl	8003e2e <_ZN9LineTrace15getMinVelocity2Ev>
 800895c:	ee10 3a10 	vmov	r3, s0
 8008960:	4618      	mov	r0, r3
 8008962:	f7f7 fe09 	bl	8000578 <__aeabi_f2d>
 8008966:	4603      	mov	r3, r0
 8008968:	460c      	mov	r4, r1
 800896a:	461a      	mov	r2, r3
 800896c:	4623      	mov	r3, r4
 800896e:	4885      	ldr	r0, [pc, #532]	; (8008b84 <cppLoop+0x1124>)
 8008970:	f7f8 fbd0 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008974:	4884      	ldr	r0, [pc, #528]	; (8008b88 <cppLoop+0x1128>)
 8008976:	f7f9 fbf9 	bl	800216c <_ZN8JoyStick8getValueEv>
 800897a:	4603      	mov	r3, r0
 800897c:	2b08      	cmp	r3, #8
 800897e:	bf0c      	ite	eq
 8008980:	2301      	moveq	r3, #1
 8008982:	2300      	movne	r3, #0
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d022      	beq.n	80089d0 <cppLoop+0xf70>
			led.LR(-1, 1);
 800898a:	2201      	movs	r2, #1
 800898c:	f04f 31ff 	mov.w	r1, #4294967295
 8008990:	4879      	ldr	r0, [pc, #484]	; (8008b78 <cppLoop+0x1118>)
 8008992:	f7f9 fd0b 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008996:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800899a:	f000 ff4f 	bl	800983c <HAL_Delay>

			selector_vel2++;
 800899e:	4b7b      	ldr	r3, [pc, #492]	; (8008b8c <cppLoop+0x112c>)
 80089a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	3301      	adds	r3, #1
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	b21a      	sxth	r2, r3
 80089ac:	4b77      	ldr	r3, [pc, #476]	; (8008b8c <cppLoop+0x112c>)
 80089ae:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 80089b0:	4b76      	ldr	r3, [pc, #472]	; (8008b8c <cppLoop+0x112c>)
 80089b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	dd02      	ble.n	80089c0 <cppLoop+0xf60>
 80089ba:	4b74      	ldr	r3, [pc, #464]	; (8008b8c <cppLoop+0x112c>)
 80089bc:	2200      	movs	r2, #0
 80089be:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80089c0:	2200      	movs	r2, #0
 80089c2:	f04f 31ff 	mov.w	r1, #4294967295
 80089c6:	486c      	ldr	r0, [pc, #432]	; (8008b78 <cppLoop+0x1118>)
 80089c8:	f7f9 fcf0 	bl	80023ac <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 80089cc:	f000 bdff 	b.w	80095ce <cppLoop+0x1b6e>
		else if(joy_stick.getValue() == JOY_R){
 80089d0:	486d      	ldr	r0, [pc, #436]	; (8008b88 <cppLoop+0x1128>)
 80089d2:	f7f9 fbcb 	bl	800216c <_ZN8JoyStick8getValueEv>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b10      	cmp	r3, #16
 80089da:	bf0c      	ite	eq
 80089dc:	2301      	moveq	r3, #1
 80089de:	2300      	movne	r3, #0
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d03c      	beq.n	8008a60 <cppLoop+0x1000>
			led.LR(-1, 1);
 80089e6:	2201      	movs	r2, #1
 80089e8:	f04f 31ff 	mov.w	r1, #4294967295
 80089ec:	4862      	ldr	r0, [pc, #392]	; (8008b78 <cppLoop+0x1118>)
 80089ee:	f7f9 fcdd 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 80089f2:	2064      	movs	r0, #100	; 0x64
 80089f4:	f000 ff22 	bl	800983c <HAL_Delay>
			if(selector_vel2 == 0)
 80089f8:	4b64      	ldr	r3, [pc, #400]	; (8008b8c <cppLoop+0x112c>)
 80089fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d113      	bne.n	8008a2a <cppLoop+0xfca>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008a02:	4b63      	ldr	r3, [pc, #396]	; (8008b90 <cppLoop+0x1130>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7f7 fdb6 	bl	8000578 <__aeabi_f2d>
 8008a0c:	a358      	add	r3, pc, #352	; (adr r3, 8008b70 <cppLoop+0x1110>)
 8008a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a12:	f7f7 fc53 	bl	80002bc <__adddf3>
 8008a16:	4603      	mov	r3, r0
 8008a18:	460c      	mov	r4, r1
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	f7f8 f8fb 	bl	8000c18 <__aeabi_d2f>
 8008a22:	4602      	mov	r2, r0
 8008a24:	4b5a      	ldr	r3, [pc, #360]	; (8008b90 <cppLoop+0x1130>)
 8008a26:	601a      	str	r2, [r3, #0]
 8008a28:	e012      	b.n	8008a50 <cppLoop+0xff0>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008a2a:	4b5a      	ldr	r3, [pc, #360]	; (8008b94 <cppLoop+0x1134>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7f7 fda2 	bl	8000578 <__aeabi_f2d>
 8008a34:	a34e      	add	r3, pc, #312	; (adr r3, 8008b70 <cppLoop+0x1110>)
 8008a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3a:	f7f7 fc3f 	bl	80002bc <__adddf3>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	460c      	mov	r4, r1
 8008a42:	4618      	mov	r0, r3
 8008a44:	4621      	mov	r1, r4
 8008a46:	f7f8 f8e7 	bl	8000c18 <__aeabi_d2f>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	4b51      	ldr	r3, [pc, #324]	; (8008b94 <cppLoop+0x1134>)
 8008a4e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008a50:	2200      	movs	r2, #0
 8008a52:	f04f 31ff 	mov.w	r1, #4294967295
 8008a56:	4848      	ldr	r0, [pc, #288]	; (8008b78 <cppLoop+0x1118>)
 8008a58:	f7f9 fca8 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008a5c:	f000 bdb7 	b.w	80095ce <cppLoop+0x1b6e>
		else if(joy_stick.getValue() == JOY_L){
 8008a60:	4849      	ldr	r0, [pc, #292]	; (8008b88 <cppLoop+0x1128>)
 8008a62:	f7f9 fb83 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	bf0c      	ite	eq
 8008a6c:	2301      	moveq	r3, #1
 8008a6e:	2300      	movne	r3, #0
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d03c      	beq.n	8008af0 <cppLoop+0x1090>
			led.LR(-1, 1);
 8008a76:	2201      	movs	r2, #1
 8008a78:	f04f 31ff 	mov.w	r1, #4294967295
 8008a7c:	483e      	ldr	r0, [pc, #248]	; (8008b78 <cppLoop+0x1118>)
 8008a7e:	f7f9 fc95 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008a82:	2064      	movs	r0, #100	; 0x64
 8008a84:	f000 feda 	bl	800983c <HAL_Delay>
			if(selector_vel2 == 0)
 8008a88:	4b40      	ldr	r3, [pc, #256]	; (8008b8c <cppLoop+0x112c>)
 8008a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d113      	bne.n	8008aba <cppLoop+0x105a>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008a92:	4b3f      	ldr	r3, [pc, #252]	; (8008b90 <cppLoop+0x1130>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7f7 fd6e 	bl	8000578 <__aeabi_f2d>
 8008a9c:	a334      	add	r3, pc, #208	; (adr r3, 8008b70 <cppLoop+0x1110>)
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	f7f7 fc09 	bl	80002b8 <__aeabi_dsub>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	460c      	mov	r4, r1
 8008aaa:	4618      	mov	r0, r3
 8008aac:	4621      	mov	r1, r4
 8008aae:	f7f8 f8b3 	bl	8000c18 <__aeabi_d2f>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	4b36      	ldr	r3, [pc, #216]	; (8008b90 <cppLoop+0x1130>)
 8008ab6:	601a      	str	r2, [r3, #0]
 8008ab8:	e012      	b.n	8008ae0 <cppLoop+0x1080>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008aba:	4b36      	ldr	r3, [pc, #216]	; (8008b94 <cppLoop+0x1134>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7f7 fd5a 	bl	8000578 <__aeabi_f2d>
 8008ac4:	a32a      	add	r3, pc, #168	; (adr r3, 8008b70 <cppLoop+0x1110>)
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	f7f7 fbf5 	bl	80002b8 <__aeabi_dsub>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	460c      	mov	r4, r1
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	f7f8 f89f 	bl	8000c18 <__aeabi_d2f>
 8008ada:	4602      	mov	r2, r0
 8008adc:	4b2d      	ldr	r3, [pc, #180]	; (8008b94 <cppLoop+0x1134>)
 8008ade:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ae6:	4824      	ldr	r0, [pc, #144]	; (8008b78 <cppLoop+0x1118>)
 8008ae8:	f7f9 fc60 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008aec:	f000 bd6f 	b.w	80095ce <cppLoop+0x1b6e>
		else if(joy_stick.getValue() == JOY_C){
 8008af0:	4825      	ldr	r0, [pc, #148]	; (8008b88 <cppLoop+0x1128>)
 8008af2:	f7f9 fb3b 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	bf0c      	ite	eq
 8008afc:	2301      	moveq	r3, #1
 8008afe:	2300      	movne	r3, #0
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f000 8563 	beq.w	80095ce <cppLoop+0x1b6e>
			led.LR(-1, 1);
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f04f 31ff 	mov.w	r1, #4294967295
 8008b0e:	481a      	ldr	r0, [pc, #104]	; (8008b78 <cppLoop+0x1118>)
 8008b10:	f7f9 fc4c 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008b14:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b18:	f000 fe90 	bl	800983c <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	4b1b      	ldr	r3, [pc, #108]	; (8008b90 <cppLoop+0x1130>)
 8008b22:	2201      	movs	r2, #1
 8008b24:	491c      	ldr	r1, [pc, #112]	; (8008b98 <cppLoop+0x1138>)
 8008b26:	481d      	ldr	r0, [pc, #116]	; (8008b9c <cppLoop+0x113c>)
 8008b28:	f7f8 fea8 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	4b18      	ldr	r3, [pc, #96]	; (8008b94 <cppLoop+0x1134>)
 8008b32:	2201      	movs	r2, #1
 8008b34:	491a      	ldr	r1, [pc, #104]	; (8008ba0 <cppLoop+0x1140>)
 8008b36:	4819      	ldr	r0, [pc, #100]	; (8008b9c <cppLoop+0x113c>)
 8008b38:	f7f8 fea0 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008b3c:	4b14      	ldr	r3, [pc, #80]	; (8008b90 <cppLoop+0x1130>)
 8008b3e:	edd3 7a00 	vldr	s15, [r3]
 8008b42:	eeb0 0a67 	vmov.f32	s0, s15
 8008b46:	480d      	ldr	r0, [pc, #52]	; (8008b7c <cppLoop+0x111c>)
 8008b48:	f7fb f901 	bl	8003d4e <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008b4c:	4b11      	ldr	r3, [pc, #68]	; (8008b94 <cppLoop+0x1134>)
 8008b4e:	edd3 7a00 	vldr	s15, [r3]
 8008b52:	eeb0 0a67 	vmov.f32	s0, s15
 8008b56:	4809      	ldr	r0, [pc, #36]	; (8008b7c <cppLoop+0x111c>)
 8008b58:	f7fb f919 	bl	8003d8e <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f04f 31ff 	mov.w	r1, #4294967295
 8008b62:	4805      	ldr	r0, [pc, #20]	; (8008b78 <cppLoop+0x1118>)
 8008b64:	f7f9 fc22 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008b68:	f000 bd31 	b.w	80095ce <cppLoop+0x1b6e>
 8008b6c:	f3af 8000 	nop.w
 8008b70:	9999999a 	.word	0x9999999a
 8008b74:	3fb99999 	.word	0x3fb99999
 8008b78:	20000604 	.word	0x20000604
 8008b7c:	2001db94 	.word	0x2001db94
 8008b80:	08019bc0 	.word	0x08019bc0
 8008b84:	08019b84 	.word	0x08019b84
 8008b88:	200005f8 	.word	0x200005f8
 8008b8c:	20042274 	.word	0x20042274
 8008b90:	200422a0 	.word	0x200422a0
 8008b94:	200422b0 	.word	0x200422b0
 8008b98:	08019bcc 	.word	0x08019bcc
 8008b9c:	08019b30 	.word	0x08019b30
 8008ba0:	08019bd8 	.word	0x08019bd8

	case 7:
		led.fullColor('W');
 8008ba4:	2157      	movs	r1, #87	; 0x57
 8008ba6:	48c0      	ldr	r0, [pc, #768]	; (8008ea8 <cppLoop+0x1448>)
 8008ba8:	f7f9 fb44 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008bac:	f7f8 fa78 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	f7f8 fa84 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008bb8:	48bc      	ldr	r0, [pc, #752]	; (8008eac <cppLoop+0x144c>)
 8008bba:	f7fb f97c 	bl	8003eb6 <_ZN9LineTrace9getMaxAccEv>
 8008bbe:	ee10 3a10 	vmov	r3, s0
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7f7 fcd8 	bl	8000578 <__aeabi_f2d>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	460c      	mov	r4, r1
 8008bcc:	461a      	mov	r2, r3
 8008bce:	4623      	mov	r3, r4
 8008bd0:	48b7      	ldr	r0, [pc, #732]	; (8008eb0 <cppLoop+0x1450>)
 8008bd2:	f7f8 fa9f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	2000      	movs	r0, #0
 8008bda:	f7f8 fa71 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008bde:	48b3      	ldr	r0, [pc, #716]	; (8008eac <cppLoop+0x144c>)
 8008be0:	f7fb f99f 	bl	8003f22 <_ZN9LineTrace9getMaxDecEv>
 8008be4:	ee10 3a10 	vmov	r3, s0
 8008be8:	4618      	mov	r0, r3
 8008bea:	f7f7 fcc5 	bl	8000578 <__aeabi_f2d>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	460c      	mov	r4, r1
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	4623      	mov	r3, r4
 8008bf6:	48af      	ldr	r0, [pc, #700]	; (8008eb4 <cppLoop+0x1454>)
 8008bf8:	f7f8 fa8c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008bfc:	48ae      	ldr	r0, [pc, #696]	; (8008eb8 <cppLoop+0x1458>)
 8008bfe:	f7f9 fab5 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b08      	cmp	r3, #8
 8008c06:	bf0c      	ite	eq
 8008c08:	2301      	moveq	r3, #1
 8008c0a:	2300      	movne	r3, #0
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d022      	beq.n	8008c58 <cppLoop+0x11f8>
			led.LR(-1, 1);
 8008c12:	2201      	movs	r2, #1
 8008c14:	f04f 31ff 	mov.w	r1, #4294967295
 8008c18:	48a3      	ldr	r0, [pc, #652]	; (8008ea8 <cppLoop+0x1448>)
 8008c1a:	f7f9 fbc7 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008c1e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008c22:	f000 fe0b 	bl	800983c <HAL_Delay>

			selector_acc++;
 8008c26:	4ba5      	ldr	r3, [pc, #660]	; (8008ebc <cppLoop+0x145c>)
 8008c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	3301      	adds	r3, #1
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	b21a      	sxth	r2, r3
 8008c34:	4ba1      	ldr	r3, [pc, #644]	; (8008ebc <cppLoop+0x145c>)
 8008c36:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008c38:	4ba0      	ldr	r3, [pc, #640]	; (8008ebc <cppLoop+0x145c>)
 8008c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	dd02      	ble.n	8008c48 <cppLoop+0x11e8>
 8008c42:	4b9e      	ldr	r3, [pc, #632]	; (8008ebc <cppLoop+0x145c>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f04f 31ff 	mov.w	r1, #4294967295
 8008c4e:	4896      	ldr	r0, [pc, #600]	; (8008ea8 <cppLoop+0x1448>)
 8008c50:	f7f9 fbac 	bl	80023ac <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008c54:	f000 bcbd 	b.w	80095d2 <cppLoop+0x1b72>
		else if(joy_stick.getValue() == JOY_R){
 8008c58:	4897      	ldr	r0, [pc, #604]	; (8008eb8 <cppLoop+0x1458>)
 8008c5a:	f7f9 fa87 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b10      	cmp	r3, #16
 8008c62:	bf0c      	ite	eq
 8008c64:	2301      	moveq	r3, #1
 8008c66:	2300      	movne	r3, #0
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d03c      	beq.n	8008ce8 <cppLoop+0x1288>
			led.LR(-1, 1);
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f04f 31ff 	mov.w	r1, #4294967295
 8008c74:	488c      	ldr	r0, [pc, #560]	; (8008ea8 <cppLoop+0x1448>)
 8008c76:	f7f9 fb99 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008c7a:	2064      	movs	r0, #100	; 0x64
 8008c7c:	f000 fdde 	bl	800983c <HAL_Delay>
			if(selector_acc == 0){
 8008c80:	4b8e      	ldr	r3, [pc, #568]	; (8008ebc <cppLoop+0x145c>)
 8008c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d113      	bne.n	8008cb2 <cppLoop+0x1252>
				adj_acc = adj_acc + 0.1;
 8008c8a:	4b8d      	ldr	r3, [pc, #564]	; (8008ec0 <cppLoop+0x1460>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7f7 fc72 	bl	8000578 <__aeabi_f2d>
 8008c94:	a382      	add	r3, pc, #520	; (adr r3, 8008ea0 <cppLoop+0x1440>)
 8008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9a:	f7f7 fb0f 	bl	80002bc <__adddf3>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	460c      	mov	r4, r1
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	f7f7 ffb7 	bl	8000c18 <__aeabi_d2f>
 8008caa:	4602      	mov	r2, r0
 8008cac:	4b84      	ldr	r3, [pc, #528]	; (8008ec0 <cppLoop+0x1460>)
 8008cae:	601a      	str	r2, [r3, #0]
 8008cb0:	e012      	b.n	8008cd8 <cppLoop+0x1278>
				adj_dec = adj_dec + 0.1;
 8008cb2:	4b84      	ldr	r3, [pc, #528]	; (8008ec4 <cppLoop+0x1464>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7f7 fc5e 	bl	8000578 <__aeabi_f2d>
 8008cbc:	a378      	add	r3, pc, #480	; (adr r3, 8008ea0 <cppLoop+0x1440>)
 8008cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc2:	f7f7 fafb 	bl	80002bc <__adddf3>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	460c      	mov	r4, r1
 8008cca:	4618      	mov	r0, r3
 8008ccc:	4621      	mov	r1, r4
 8008cce:	f7f7 ffa3 	bl	8000c18 <__aeabi_d2f>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	4b7b      	ldr	r3, [pc, #492]	; (8008ec4 <cppLoop+0x1464>)
 8008cd6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f04f 31ff 	mov.w	r1, #4294967295
 8008cde:	4872      	ldr	r0, [pc, #456]	; (8008ea8 <cppLoop+0x1448>)
 8008ce0:	f7f9 fb64 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008ce4:	f000 bc75 	b.w	80095d2 <cppLoop+0x1b72>
		else if(joy_stick.getValue() == JOY_L){
 8008ce8:	4873      	ldr	r0, [pc, #460]	; (8008eb8 <cppLoop+0x1458>)
 8008cea:	f7f9 fa3f 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	bf0c      	ite	eq
 8008cf4:	2301      	moveq	r3, #1
 8008cf6:	2300      	movne	r3, #0
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d03c      	beq.n	8008d78 <cppLoop+0x1318>
			led.LR(-1, 1);
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f04f 31ff 	mov.w	r1, #4294967295
 8008d04:	4868      	ldr	r0, [pc, #416]	; (8008ea8 <cppLoop+0x1448>)
 8008d06:	f7f9 fb51 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008d0a:	2064      	movs	r0, #100	; 0x64
 8008d0c:	f000 fd96 	bl	800983c <HAL_Delay>
			if(selector_acc == 0){
 8008d10:	4b6a      	ldr	r3, [pc, #424]	; (8008ebc <cppLoop+0x145c>)
 8008d12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d113      	bne.n	8008d42 <cppLoop+0x12e2>
				adj_acc = adj_acc - 0.1;
 8008d1a:	4b69      	ldr	r3, [pc, #420]	; (8008ec0 <cppLoop+0x1460>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7f7 fc2a 	bl	8000578 <__aeabi_f2d>
 8008d24:	a35e      	add	r3, pc, #376	; (adr r3, 8008ea0 <cppLoop+0x1440>)
 8008d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2a:	f7f7 fac5 	bl	80002b8 <__aeabi_dsub>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	460c      	mov	r4, r1
 8008d32:	4618      	mov	r0, r3
 8008d34:	4621      	mov	r1, r4
 8008d36:	f7f7 ff6f 	bl	8000c18 <__aeabi_d2f>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	4b60      	ldr	r3, [pc, #384]	; (8008ec0 <cppLoop+0x1460>)
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	e012      	b.n	8008d68 <cppLoop+0x1308>
				adj_dec = adj_dec - 0.1;
 8008d42:	4b60      	ldr	r3, [pc, #384]	; (8008ec4 <cppLoop+0x1464>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7f7 fc16 	bl	8000578 <__aeabi_f2d>
 8008d4c:	a354      	add	r3, pc, #336	; (adr r3, 8008ea0 <cppLoop+0x1440>)
 8008d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d52:	f7f7 fab1 	bl	80002b8 <__aeabi_dsub>
 8008d56:	4603      	mov	r3, r0
 8008d58:	460c      	mov	r4, r1
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	4621      	mov	r1, r4
 8008d5e:	f7f7 ff5b 	bl	8000c18 <__aeabi_d2f>
 8008d62:	4602      	mov	r2, r0
 8008d64:	4b57      	ldr	r3, [pc, #348]	; (8008ec4 <cppLoop+0x1464>)
 8008d66:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8008d6e:	484e      	ldr	r0, [pc, #312]	; (8008ea8 <cppLoop+0x1448>)
 8008d70:	f7f9 fb1c 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008d74:	f000 bc2d 	b.w	80095d2 <cppLoop+0x1b72>
		else if(joy_stick.getValue() == JOY_C){
 8008d78:	484f      	ldr	r0, [pc, #316]	; (8008eb8 <cppLoop+0x1458>)
 8008d7a:	f7f9 f9f7 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	bf0c      	ite	eq
 8008d84:	2301      	moveq	r3, #1
 8008d86:	2300      	movne	r3, #0
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	f000 8421 	beq.w	80095d2 <cppLoop+0x1b72>
			led.LR(-1, 1);
 8008d90:	2201      	movs	r2, #1
 8008d92:	f04f 31ff 	mov.w	r1, #4294967295
 8008d96:	4844      	ldr	r0, [pc, #272]	; (8008ea8 <cppLoop+0x1448>)
 8008d98:	f7f9 fb08 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008da0:	f000 fd4c 	bl	800983c <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008da4:	2300      	movs	r3, #0
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	4b45      	ldr	r3, [pc, #276]	; (8008ec0 <cppLoop+0x1460>)
 8008daa:	2201      	movs	r2, #1
 8008dac:	4946      	ldr	r1, [pc, #280]	; (8008ec8 <cppLoop+0x1468>)
 8008dae:	4847      	ldr	r0, [pc, #284]	; (8008ecc <cppLoop+0x146c>)
 8008db0:	f7f8 fd64 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008db4:	2300      	movs	r3, #0
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	4b42      	ldr	r3, [pc, #264]	; (8008ec4 <cppLoop+0x1464>)
 8008dba:	2201      	movs	r2, #1
 8008dbc:	4944      	ldr	r1, [pc, #272]	; (8008ed0 <cppLoop+0x1470>)
 8008dbe:	4843      	ldr	r0, [pc, #268]	; (8008ecc <cppLoop+0x146c>)
 8008dc0:	f7f8 fd5c 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008dc4:	4b3e      	ldr	r3, [pc, #248]	; (8008ec0 <cppLoop+0x1460>)
 8008dc6:	edd3 7a00 	vldr	s15, [r3]
 8008dca:	4b3e      	ldr	r3, [pc, #248]	; (8008ec4 <cppLoop+0x1464>)
 8008dcc:	ed93 7a00 	vldr	s14, [r3]
 8008dd0:	eef0 0a47 	vmov.f32	s1, s14
 8008dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8008dd8:	4834      	ldr	r0, [pc, #208]	; (8008eac <cppLoop+0x144c>)
 8008dda:	f7fb f838 	bl	8003e4e <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008dde:	2200      	movs	r2, #0
 8008de0:	f04f 31ff 	mov.w	r1, #4294967295
 8008de4:	4830      	ldr	r0, [pc, #192]	; (8008ea8 <cppLoop+0x1448>)
 8008de6:	f7f9 fae1 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008dea:	e3f2      	b.n	80095d2 <cppLoop+0x1b72>

	case 8:
		led.fullColor('W');
 8008dec:	2157      	movs	r1, #87	; 0x57
 8008dee:	482e      	ldr	r0, [pc, #184]	; (8008ea8 <cppLoop+0x1448>)
 8008df0:	f7f9 fa20 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008df4:	f7f8 f954 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008df8:	2100      	movs	r1, #0
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	f7f8 f960 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008e00:	482a      	ldr	r0, [pc, #168]	; (8008eac <cppLoop+0x144c>)
 8008e02:	f7fb f87c 	bl	8003efe <_ZN9LineTrace10getMaxAcc2Ev>
 8008e06:	ee10 3a10 	vmov	r3, s0
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7f7 fbb4 	bl	8000578 <__aeabi_f2d>
 8008e10:	4603      	mov	r3, r0
 8008e12:	460c      	mov	r4, r1
 8008e14:	461a      	mov	r2, r3
 8008e16:	4623      	mov	r3, r4
 8008e18:	482e      	ldr	r0, [pc, #184]	; (8008ed4 <cppLoop+0x1474>)
 8008e1a:	f7f8 f97b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008e1e:	2101      	movs	r1, #1
 8008e20:	2000      	movs	r0, #0
 8008e22:	f7f8 f94d 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008e26:	4821      	ldr	r0, [pc, #132]	; (8008eac <cppLoop+0x144c>)
 8008e28:	f7fb f857 	bl	8003eda <_ZN9LineTrace10getMaxDec2Ev>
 8008e2c:	ee10 3a10 	vmov	r3, s0
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7f7 fba1 	bl	8000578 <__aeabi_f2d>
 8008e36:	4603      	mov	r3, r0
 8008e38:	460c      	mov	r4, r1
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	4623      	mov	r3, r4
 8008e3e:	4826      	ldr	r0, [pc, #152]	; (8008ed8 <cppLoop+0x1478>)
 8008e40:	f7f8 f968 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008e44:	481c      	ldr	r0, [pc, #112]	; (8008eb8 <cppLoop+0x1458>)
 8008e46:	f7f9 f991 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b08      	cmp	r3, #8
 8008e4e:	bf0c      	ite	eq
 8008e50:	2301      	moveq	r3, #1
 8008e52:	2300      	movne	r3, #0
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d042      	beq.n	8008ee0 <cppLoop+0x1480>
			led.LR(-1, 1);
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8008e60:	4811      	ldr	r0, [pc, #68]	; (8008ea8 <cppLoop+0x1448>)
 8008e62:	f7f9 faa3 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008e66:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e6a:	f000 fce7 	bl	800983c <HAL_Delay>

			selector_acc2++;
 8008e6e:	4b1b      	ldr	r3, [pc, #108]	; (8008edc <cppLoop+0x147c>)
 8008e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	3301      	adds	r3, #1
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	b21a      	sxth	r2, r3
 8008e7c:	4b17      	ldr	r3, [pc, #92]	; (8008edc <cppLoop+0x147c>)
 8008e7e:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008e80:	4b16      	ldr	r3, [pc, #88]	; (8008edc <cppLoop+0x147c>)
 8008e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	dd02      	ble.n	8008e90 <cppLoop+0x1430>
 8008e8a:	4b14      	ldr	r3, [pc, #80]	; (8008edc <cppLoop+0x147c>)
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008e90:	2200      	movs	r2, #0
 8008e92:	f04f 31ff 	mov.w	r1, #4294967295
 8008e96:	4804      	ldr	r0, [pc, #16]	; (8008ea8 <cppLoop+0x1448>)
 8008e98:	f7f9 fa88 	bl	80023ac <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008e9c:	e39b      	b.n	80095d6 <cppLoop+0x1b76>
 8008e9e:	bf00      	nop
 8008ea0:	9999999a 	.word	0x9999999a
 8008ea4:	3fb99999 	.word	0x3fb99999
 8008ea8:	20000604 	.word	0x20000604
 8008eac:	2001db94 	.word	0x2001db94
 8008eb0:	08019be4 	.word	0x08019be4
 8008eb4:	08019bf0 	.word	0x08019bf0
 8008eb8:	200005f8 	.word	0x200005f8
 8008ebc:	2004226e 	.word	0x2004226e
 8008ec0:	200422b8 	.word	0x200422b8
 8008ec4:	200422c0 	.word	0x200422c0
 8008ec8:	08019bfc 	.word	0x08019bfc
 8008ecc:	08019b30 	.word	0x08019b30
 8008ed0:	08019c04 	.word	0x08019c04
 8008ed4:	08019c0c 	.word	0x08019c0c
 8008ed8:	08019c18 	.word	0x08019c18
 8008edc:	20042270 	.word	0x20042270
		else if(joy_stick.getValue() == JOY_R){
 8008ee0:	48bd      	ldr	r0, [pc, #756]	; (80091d8 <cppLoop+0x1778>)
 8008ee2:	f7f9 f943 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b10      	cmp	r3, #16
 8008eea:	bf0c      	ite	eq
 8008eec:	2301      	moveq	r3, #1
 8008eee:	2300      	movne	r3, #0
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d03b      	beq.n	8008f6e <cppLoop+0x150e>
			led.LR(-1, 1);
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8008efc:	48b7      	ldr	r0, [pc, #732]	; (80091dc <cppLoop+0x177c>)
 8008efe:	f7f9 fa55 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008f02:	2064      	movs	r0, #100	; 0x64
 8008f04:	f000 fc9a 	bl	800983c <HAL_Delay>
			if(selector_acc2 == 0){
 8008f08:	4bb5      	ldr	r3, [pc, #724]	; (80091e0 <cppLoop+0x1780>)
 8008f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d113      	bne.n	8008f3a <cppLoop+0x14da>
				adj_acc2 = adj_acc2 + 0.1;
 8008f12:	4bb4      	ldr	r3, [pc, #720]	; (80091e4 <cppLoop+0x1784>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7f7 fb2e 	bl	8000578 <__aeabi_f2d>
 8008f1c:	a3ac      	add	r3, pc, #688	; (adr r3, 80091d0 <cppLoop+0x1770>)
 8008f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f22:	f7f7 f9cb 	bl	80002bc <__adddf3>
 8008f26:	4603      	mov	r3, r0
 8008f28:	460c      	mov	r4, r1
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	4621      	mov	r1, r4
 8008f2e:	f7f7 fe73 	bl	8000c18 <__aeabi_d2f>
 8008f32:	4602      	mov	r2, r0
 8008f34:	4bab      	ldr	r3, [pc, #684]	; (80091e4 <cppLoop+0x1784>)
 8008f36:	601a      	str	r2, [r3, #0]
 8008f38:	e012      	b.n	8008f60 <cppLoop+0x1500>
				adj_dec2 = adj_dec2 + 0.1;
 8008f3a:	4bab      	ldr	r3, [pc, #684]	; (80091e8 <cppLoop+0x1788>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7f7 fb1a 	bl	8000578 <__aeabi_f2d>
 8008f44:	a3a2      	add	r3, pc, #648	; (adr r3, 80091d0 <cppLoop+0x1770>)
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	f7f7 f9b7 	bl	80002bc <__adddf3>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	460c      	mov	r4, r1
 8008f52:	4618      	mov	r0, r3
 8008f54:	4621      	mov	r1, r4
 8008f56:	f7f7 fe5f 	bl	8000c18 <__aeabi_d2f>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	4ba2      	ldr	r3, [pc, #648]	; (80091e8 <cppLoop+0x1788>)
 8008f5e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008f60:	2200      	movs	r2, #0
 8008f62:	f04f 31ff 	mov.w	r1, #4294967295
 8008f66:	489d      	ldr	r0, [pc, #628]	; (80091dc <cppLoop+0x177c>)
 8008f68:	f7f9 fa20 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008f6c:	e333      	b.n	80095d6 <cppLoop+0x1b76>
		else if(joy_stick.getValue() == JOY_L){
 8008f6e:	489a      	ldr	r0, [pc, #616]	; (80091d8 <cppLoop+0x1778>)
 8008f70:	f7f9 f8fc 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	bf0c      	ite	eq
 8008f7a:	2301      	moveq	r3, #1
 8008f7c:	2300      	movne	r3, #0
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d03b      	beq.n	8008ffc <cppLoop+0x159c>
			led.LR(-1, 1);
 8008f84:	2201      	movs	r2, #1
 8008f86:	f04f 31ff 	mov.w	r1, #4294967295
 8008f8a:	4894      	ldr	r0, [pc, #592]	; (80091dc <cppLoop+0x177c>)
 8008f8c:	f7f9 fa0e 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008f90:	2064      	movs	r0, #100	; 0x64
 8008f92:	f000 fc53 	bl	800983c <HAL_Delay>
			if(selector_acc2 == 0){
 8008f96:	4b92      	ldr	r3, [pc, #584]	; (80091e0 <cppLoop+0x1780>)
 8008f98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d113      	bne.n	8008fc8 <cppLoop+0x1568>
				adj_acc2 = adj_acc2 - 0.1;
 8008fa0:	4b90      	ldr	r3, [pc, #576]	; (80091e4 <cppLoop+0x1784>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7f7 fae7 	bl	8000578 <__aeabi_f2d>
 8008faa:	a389      	add	r3, pc, #548	; (adr r3, 80091d0 <cppLoop+0x1770>)
 8008fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb0:	f7f7 f982 	bl	80002b8 <__aeabi_dsub>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	4618      	mov	r0, r3
 8008fba:	4621      	mov	r1, r4
 8008fbc:	f7f7 fe2c 	bl	8000c18 <__aeabi_d2f>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	4b88      	ldr	r3, [pc, #544]	; (80091e4 <cppLoop+0x1784>)
 8008fc4:	601a      	str	r2, [r3, #0]
 8008fc6:	e012      	b.n	8008fee <cppLoop+0x158e>
				adj_dec2 = adj_dec2 - 0.1;
 8008fc8:	4b87      	ldr	r3, [pc, #540]	; (80091e8 <cppLoop+0x1788>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7f7 fad3 	bl	8000578 <__aeabi_f2d>
 8008fd2:	a37f      	add	r3, pc, #508	; (adr r3, 80091d0 <cppLoop+0x1770>)
 8008fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd8:	f7f7 f96e 	bl	80002b8 <__aeabi_dsub>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	460c      	mov	r4, r1
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	4621      	mov	r1, r4
 8008fe4:	f7f7 fe18 	bl	8000c18 <__aeabi_d2f>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	4b7f      	ldr	r3, [pc, #508]	; (80091e8 <cppLoop+0x1788>)
 8008fec:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ff4:	4879      	ldr	r0, [pc, #484]	; (80091dc <cppLoop+0x177c>)
 8008ff6:	f7f9 f9d9 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008ffa:	e2ec      	b.n	80095d6 <cppLoop+0x1b76>
		else if(joy_stick.getValue() == JOY_C){
 8008ffc:	4876      	ldr	r0, [pc, #472]	; (80091d8 <cppLoop+0x1778>)
 8008ffe:	f7f9 f8b5 	bl	800216c <_ZN8JoyStick8getValueEv>
 8009002:	4603      	mov	r3, r0
 8009004:	2b02      	cmp	r3, #2
 8009006:	bf0c      	ite	eq
 8009008:	2301      	moveq	r3, #1
 800900a:	2300      	movne	r3, #0
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b00      	cmp	r3, #0
 8009010:	f000 82e1 	beq.w	80095d6 <cppLoop+0x1b76>
			led.LR(-1, 1);
 8009014:	2201      	movs	r2, #1
 8009016:	f04f 31ff 	mov.w	r1, #4294967295
 800901a:	4870      	ldr	r0, [pc, #448]	; (80091dc <cppLoop+0x177c>)
 800901c:	f7f9 f9c6 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009020:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009024:	f000 fc0a 	bl	800983c <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 8009028:	2300      	movs	r3, #0
 800902a:	9300      	str	r3, [sp, #0]
 800902c:	4b6d      	ldr	r3, [pc, #436]	; (80091e4 <cppLoop+0x1784>)
 800902e:	2201      	movs	r2, #1
 8009030:	496e      	ldr	r1, [pc, #440]	; (80091ec <cppLoop+0x178c>)
 8009032:	486f      	ldr	r0, [pc, #444]	; (80091f0 <cppLoop+0x1790>)
 8009034:	f7f8 fc22 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8009038:	2300      	movs	r3, #0
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	4b6a      	ldr	r3, [pc, #424]	; (80091e8 <cppLoop+0x1788>)
 800903e:	2201      	movs	r2, #1
 8009040:	496c      	ldr	r1, [pc, #432]	; (80091f4 <cppLoop+0x1794>)
 8009042:	486b      	ldr	r0, [pc, #428]	; (80091f0 <cppLoop+0x1790>)
 8009044:	f7f8 fc1a 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8009048:	4b66      	ldr	r3, [pc, #408]	; (80091e4 <cppLoop+0x1784>)
 800904a:	edd3 7a00 	vldr	s15, [r3]
 800904e:	4b66      	ldr	r3, [pc, #408]	; (80091e8 <cppLoop+0x1788>)
 8009050:	ed93 7a00 	vldr	s14, [r3]
 8009054:	eef0 0a47 	vmov.f32	s1, s14
 8009058:	eeb0 0a67 	vmov.f32	s0, s15
 800905c:	4866      	ldr	r0, [pc, #408]	; (80091f8 <cppLoop+0x1798>)
 800905e:	f7fa ff10 	bl	8003e82 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8009062:	2200      	movs	r2, #0
 8009064:	f04f 31ff 	mov.w	r1, #4294967295
 8009068:	485c      	ldr	r0, [pc, #368]	; (80091dc <cppLoop+0x177c>)
 800906a:	f7f9 f99f 	bl	80023ac <_ZN3LED2LREaa>
		break;
 800906e:	e2b2      	b.n	80095d6 <cppLoop+0x1b76>

	case 9:
		led.fullColor('~');
 8009070:	217e      	movs	r1, #126	; 0x7e
 8009072:	485a      	ldr	r0, [pc, #360]	; (80091dc <cppLoop+0x177c>)
 8009074:	f7f9 f8de 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009078:	f7f8 f812 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800907c:	2100      	movs	r1, #0
 800907e:	2000      	movs	r0, #0
 8009080:	f7f8 f81e 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8009084:	485d      	ldr	r0, [pc, #372]	; (80091fc <cppLoop+0x179c>)
 8009086:	f7f8 f845 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800908a:	2101      	movs	r1, #1
 800908c:	2000      	movs	r0, #0
 800908e:	f7f8 f817 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8009092:	485b      	ldr	r0, [pc, #364]	; (8009200 <cppLoop+0x17a0>)
 8009094:	f7f8 f83e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009098:	484f      	ldr	r0, [pc, #316]	; (80091d8 <cppLoop+0x1778>)
 800909a:	f7f9 f867 	bl	800216c <_ZN8JoyStick8getValueEv>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	bf0c      	ite	eq
 80090a4:	2301      	moveq	r3, #1
 80090a6:	2300      	movne	r3, #0
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f000 8295 	beq.w	80095da <cppLoop+0x1b7a>
			led.LR(-1, 1);
 80090b0:	2201      	movs	r2, #1
 80090b2:	f04f 31ff 	mov.w	r1, #4294967295
 80090b6:	4849      	ldr	r0, [pc, #292]	; (80091dc <cppLoop+0x177c>)
 80090b8:	f7f9 f978 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(500);
 80090bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090c0:	f000 fbbc 	bl	800983c <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 80090c4:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8009204 <cppLoop+0x17a4>
 80090c8:	484b      	ldr	r0, [pc, #300]	; (80091f8 <cppLoop+0x1798>)
 80090ca:	f7fa fe11 	bl	8003cf0 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80090ce:	484a      	ldr	r0, [pc, #296]	; (80091f8 <cppLoop+0x1798>)
 80090d0:	f7fb f874 	bl	80041bc <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80090d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090d8:	f000 fbb0 	bl	800983c <HAL_Delay>

			led.fullColor('R');
 80090dc:	2152      	movs	r1, #82	; 0x52
 80090de:	483f      	ldr	r0, [pc, #252]	; (80091dc <cppLoop+0x177c>)
 80090e0:	f7f9 f8a8 	bl	8002234 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 80090e4:	4848      	ldr	r0, [pc, #288]	; (8009208 <cppLoop+0x17a8>)
 80090e6:	f7f8 fb1b 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 80090ea:	f242 7010 	movw	r0, #10000	; 0x2710
 80090ee:	f000 fba5 	bl	800983c <HAL_Delay>

			line_trace.stop();
 80090f2:	4841      	ldr	r0, [pc, #260]	; (80091f8 <cppLoop+0x1798>)
 80090f4:	f7fb f902 	bl	80042fc <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80090f8:	4944      	ldr	r1, [pc, #272]	; (800920c <cppLoop+0x17ac>)
 80090fa:	4845      	ldr	r0, [pc, #276]	; (8009210 <cppLoop+0x17b0>)
 80090fc:	f7f8 fb49 	bl	8001792 <user_fopen>
			float d = encoder.getDistance();
 8009100:	4841      	ldr	r0, [pc, #260]	; (8009208 <cppLoop+0x17a8>)
 8009102:	f7f8 fad1 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8009106:	eef0 7a40 	vmov.f32	s15, s0
 800910a:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 800910e:	1d3b      	adds	r3, r7, #4
 8009110:	2201      	movs	r2, #1
 8009112:	4619      	mov	r1, r3
 8009114:	2001      	movs	r0, #1
 8009116:	f7f8 fb5f 	bl	80017d8 <sd_write_float>
			user_fclose();
 800911a:	f7f8 fb4d 	bl	80017b8 <user_fclose>

			led.LR(-1, 0);
 800911e:	2200      	movs	r2, #0
 8009120:	f04f 31ff 	mov.w	r1, #4294967295
 8009124:	482d      	ldr	r0, [pc, #180]	; (80091dc <cppLoop+0x177c>)
 8009126:	f7f9 f941 	bl	80023ac <_ZN3LED2LREaa>
		}
		break;
 800912a:	e256      	b.n	80095da <cppLoop+0x1b7a>

	case 10:
		led.fullColor('~');
 800912c:	217e      	movs	r1, #126	; 0x7e
 800912e:	482b      	ldr	r0, [pc, #172]	; (80091dc <cppLoop+0x177c>)
 8009130:	f7f9 f880 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009134:	f7f7 ffb4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009138:	2100      	movs	r1, #0
 800913a:	2000      	movs	r0, #0
 800913c:	f7f7 ffc0 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8009140:	4834      	ldr	r0, [pc, #208]	; (8009214 <cppLoop+0x17b4>)
 8009142:	f7f7 ffe7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009146:	2101      	movs	r1, #1
 8009148:	2000      	movs	r0, #0
 800914a:	f7f7 ffb9 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 800914e:	4832      	ldr	r0, [pc, #200]	; (8009218 <cppLoop+0x17b8>)
 8009150:	f7f7 ffe0 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8009154:	4820      	ldr	r0, [pc, #128]	; (80091d8 <cppLoop+0x1778>)
 8009156:	f7f9 f809 	bl	800216c <_ZN8JoyStick8getValueEv>
 800915a:	4603      	mov	r3, r0
 800915c:	2b02      	cmp	r3, #2
 800915e:	bf0c      	ite	eq
 8009160:	2301      	moveq	r3, #1
 8009162:	2300      	movne	r3, #0
 8009164:	b2db      	uxtb	r3, r3
 8009166:	2b00      	cmp	r3, #0
 8009168:	f000 8239 	beq.w	80095de <cppLoop+0x1b7e>
			HAL_Delay(500);
 800916c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009170:	f000 fb64 	bl	800983c <HAL_Delay>
			led.LR(-1, 1);
 8009174:	2201      	movs	r2, #1
 8009176:	f04f 31ff 	mov.w	r1, #4294967295
 800917a:	4818      	ldr	r0, [pc, #96]	; (80091dc <cppLoop+0x177c>)
 800917c:	f7f9 f916 	bl	80023ac <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 8009180:	2102      	movs	r1, #2
 8009182:	481d      	ldr	r0, [pc, #116]	; (80091f8 <cppLoop+0x1798>)
 8009184:	f7fb f808 	bl	8004198 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8009188:	4b24      	ldr	r3, [pc, #144]	; (800921c <cppLoop+0x17bc>)
 800918a:	edd3 7a00 	vldr	s15, [r3]
 800918e:	eeb0 0a67 	vmov.f32	s0, s15
 8009192:	4819      	ldr	r0, [pc, #100]	; (80091f8 <cppLoop+0x1798>)
 8009194:	f7fa fdbb 	bl	8003d0e <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009198:	4b20      	ldr	r3, [pc, #128]	; (800921c <cppLoop+0x17bc>)
 800919a:	edd3 7a00 	vldr	s15, [r3]
 800919e:	eeb0 0a67 	vmov.f32	s0, s15
 80091a2:	4815      	ldr	r0, [pc, #84]	; (80091f8 <cppLoop+0x1798>)
 80091a4:	f7fa fdc3 	bl	8003d2e <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80091a8:	4b1c      	ldr	r3, [pc, #112]	; (800921c <cppLoop+0x17bc>)
 80091aa:	edd3 7a00 	vldr	s15, [r3]
 80091ae:	eeb0 0a67 	vmov.f32	s0, s15
 80091b2:	4811      	ldr	r0, [pc, #68]	; (80091f8 <cppLoop+0x1798>)
 80091b4:	f7fa fddb 	bl	8003d6e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80091b8:	480f      	ldr	r0, [pc, #60]	; (80091f8 <cppLoop+0x1798>)
 80091ba:	f7fb f9e3 	bl	8004584 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 80091be:	2200      	movs	r2, #0
 80091c0:	f04f 31ff 	mov.w	r1, #4294967295
 80091c4:	4805      	ldr	r0, [pc, #20]	; (80091dc <cppLoop+0x177c>)
 80091c6:	f7f9 f8f1 	bl	80023ac <_ZN3LED2LREaa>
		}

		break;
 80091ca:	e208      	b.n	80095de <cppLoop+0x1b7e>
 80091cc:	f3af 8000 	nop.w
 80091d0:	9999999a 	.word	0x9999999a
 80091d4:	3fb99999 	.word	0x3fb99999
 80091d8:	200005f8 	.word	0x200005f8
 80091dc:	20000604 	.word	0x20000604
 80091e0:	20042270 	.word	0x20042270
 80091e4:	200422c8 	.word	0x200422c8
 80091e8:	200422d0 	.word	0x200422d0
 80091ec:	08019c24 	.word	0x08019c24
 80091f0:	08019b30 	.word	0x08019b30
 80091f4:	08019c30 	.word	0x08019c30
 80091f8:	2001db94 	.word	0x2001db94
 80091fc:	08019c3c 	.word	0x08019c3c
 8009200:	08019c44 	.word	0x08019c44
 8009204:	00000000 	.word	0x00000000
 8009208:	2001daf4 	.word	0x2001daf4
 800920c:	08019c50 	.word	0x08019c50
 8009210:	08019c58 	.word	0x08019c58
 8009214:	08019c64 	.word	0x08019c64
 8009218:	08019c70 	.word	0x08019c70
 800921c:	200422a0 	.word	0x200422a0

	case 11:
		led.fullColor('~');
 8009220:	217e      	movs	r1, #126	; 0x7e
 8009222:	489d      	ldr	r0, [pc, #628]	; (8009498 <cppLoop+0x1a38>)
 8009224:	f7f9 f806 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009228:	f7f7 ff3a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800922c:	2100      	movs	r1, #0
 800922e:	2000      	movs	r0, #0
 8009230:	f7f7 ff46 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 8009234:	4899      	ldr	r0, [pc, #612]	; (800949c <cppLoop+0x1a3c>)
 8009236:	f7f7 ff6d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800923a:	2101      	movs	r1, #1
 800923c:	2000      	movs	r0, #0
 800923e:	f7f7 ff3f 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 8009242:	4897      	ldr	r0, [pc, #604]	; (80094a0 <cppLoop+0x1a40>)
 8009244:	f7f7 ff66 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009248:	4896      	ldr	r0, [pc, #600]	; (80094a4 <cppLoop+0x1a44>)
 800924a:	f7f8 ff8f 	bl	800216c <_ZN8JoyStick8getValueEv>
 800924e:	4603      	mov	r3, r0
 8009250:	2b02      	cmp	r3, #2
 8009252:	bf0c      	ite	eq
 8009254:	2301      	moveq	r3, #1
 8009256:	2300      	movne	r3, #0
 8009258:	b2db      	uxtb	r3, r3
 800925a:	2b00      	cmp	r3, #0
 800925c:	f000 81c1 	beq.w	80095e2 <cppLoop+0x1b82>
			HAL_Delay(1000);
 8009260:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009264:	f000 faea 	bl	800983c <HAL_Delay>
			led.LR(-1, 1);
 8009268:	2201      	movs	r2, #1
 800926a:	f04f 31ff 	mov.w	r1, #4294967295
 800926e:	488a      	ldr	r0, [pc, #552]	; (8009498 <cppLoop+0x1a38>)
 8009270:	f7f9 f89c 	bl	80023ac <_ZN3LED2LREaa>

			esc.on(0.2, 0.2, 0.2, 0.2);
 8009274:	eddf 1a8c 	vldr	s3, [pc, #560]	; 80094a8 <cppLoop+0x1a48>
 8009278:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 80094a8 <cppLoop+0x1a48>
 800927c:	eddf 0a8a 	vldr	s1, [pc, #552]	; 80094a8 <cppLoop+0x1a48>
 8009280:	ed9f 0a89 	vldr	s0, [pc, #548]	; 80094a8 <cppLoop+0x1a48>
 8009284:	4889      	ldr	r0, [pc, #548]	; (80094ac <cppLoop+0x1a4c>)
 8009286:	f7f7 ffe3 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(5000);
 800928a:	f241 3088 	movw	r0, #5000	; 0x1388
 800928e:	f000 fad5 	bl	800983c <HAL_Delay>
			esc.off();
 8009292:	4886      	ldr	r0, [pc, #536]	; (80094ac <cppLoop+0x1a4c>)
 8009294:	f7f8 f876 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8009298:	2200      	movs	r2, #0
 800929a:	f04f 31ff 	mov.w	r1, #4294967295
 800929e:	487e      	ldr	r0, [pc, #504]	; (8009498 <cppLoop+0x1a38>)
 80092a0:	f7f9 f884 	bl	80023ac <_ZN3LED2LREaa>
			logger.saveLogs("SYSIDENT", "STEPRES.txt");

			led.LR(-1, 0);
		}
		*/
		break;
 80092a4:	e19d      	b.n	80095e2 <cppLoop+0x1b82>

	case 12:
		led.fullColor('~');
 80092a6:	217e      	movs	r1, #126	; 0x7e
 80092a8:	487b      	ldr	r0, [pc, #492]	; (8009498 <cppLoop+0x1a38>)
 80092aa:	f7f8 ffc3 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 80092ae:	f7f7 fef7 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80092b2:	2100      	movs	r1, #0
 80092b4:	2000      	movs	r0, #0
 80092b6:	f7f7 ff03 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 80092ba:	487d      	ldr	r0, [pc, #500]	; (80094b0 <cppLoop+0x1a50>)
 80092bc:	f7f7 ff2a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80092c0:	2101      	movs	r1, #1
 80092c2:	2000      	movs	r0, #0
 80092c4:	f7f7 fefc 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 80092c8:	487a      	ldr	r0, [pc, #488]	; (80094b4 <cppLoop+0x1a54>)
 80092ca:	f7f7 ff23 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80092ce:	4875      	ldr	r0, [pc, #468]	; (80094a4 <cppLoop+0x1a44>)
 80092d0:	f7f8 ff4c 	bl	800216c <_ZN8JoyStick8getValueEv>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	bf0c      	ite	eq
 80092da:	2301      	moveq	r3, #1
 80092dc:	2300      	movne	r3, #0
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	f000 8180 	beq.w	80095e6 <cppLoop+0x1b86>
			HAL_Delay(1500);
 80092e6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80092ea:	f000 faa7 	bl	800983c <HAL_Delay>
			led.LR(-1, 1);
 80092ee:	2201      	movs	r2, #1
 80092f0:	f04f 31ff 	mov.w	r1, #4294967295
 80092f4:	4868      	ldr	r0, [pc, #416]	; (8009498 <cppLoop+0x1a38>)
 80092f6:	f7f9 f859 	bl	80023ac <_ZN3LED2LREaa>

			logger.start();
 80092fa:	486f      	ldr	r0, [pc, #444]	; (80094b8 <cppLoop+0x1a58>)
 80092fc:	f7fb fd4d 	bl	8004d9a <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8009300:	486e      	ldr	r0, [pc, #440]	; (80094bc <cppLoop+0x1a5c>)
 8009302:	f7fc fd02 	bl	8005d0a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0, 3.14);
 8009306:	eddf 0a6e 	vldr	s1, [pc, #440]	; 80094c0 <cppLoop+0x1a60>
 800930a:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 80094c4 <cppLoop+0x1a64>
 800930e:	486b      	ldr	r0, [pc, #428]	; (80094bc <cppLoop+0x1a5c>)
 8009310:	f7fc fc8e 	bl	8005c30 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8009314:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009318:	f000 fa90 	bl	800983c <HAL_Delay>

			logger.stop();
 800931c:	4866      	ldr	r0, [pc, #408]	; (80094b8 <cppLoop+0x1a58>)
 800931e:	f7fb fd4c 	bl	8004dba <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8009322:	4866      	ldr	r0, [pc, #408]	; (80094bc <cppLoop+0x1a5c>)
 8009324:	f7fc fd04 	bl	8005d30 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8009328:	4a67      	ldr	r2, [pc, #412]	; (80094c8 <cppLoop+0x1a68>)
 800932a:	4968      	ldr	r1, [pc, #416]	; (80094cc <cppLoop+0x1a6c>)
 800932c:	4862      	ldr	r0, [pc, #392]	; (80094b8 <cppLoop+0x1a58>)
 800932e:	f7fb fc15 	bl	8004b5c <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8009332:	2200      	movs	r2, #0
 8009334:	f04f 31ff 	mov.w	r1, #4294967295
 8009338:	4857      	ldr	r0, [pc, #348]	; (8009498 <cppLoop+0x1a38>)
 800933a:	f7f9 f837 	bl	80023ac <_ZN3LED2LREaa>
		}
		break;
 800933e:	e152      	b.n	80095e6 <cppLoop+0x1b86>

	case 13:

		led.fullColor('~');
 8009340:	217e      	movs	r1, #126	; 0x7e
 8009342:	4855      	ldr	r0, [pc, #340]	; (8009498 <cppLoop+0x1a38>)
 8009344:	f7f8 ff76 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009348:	f7f7 feaa 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800934c:	2100      	movs	r1, #0
 800934e:	2000      	movs	r0, #0
 8009350:	f7f7 feb6 	bl	80010c0 <lcd_locate>
		lcd_printf("Steer");
 8009354:	485e      	ldr	r0, [pc, #376]	; (80094d0 <cppLoop+0x1a70>)
 8009356:	f7f7 fedd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800935a:	2101      	movs	r1, #1
 800935c:	2000      	movs	r0, #0
 800935e:	f7f7 feaf 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8009362:	485c      	ldr	r0, [pc, #368]	; (80094d4 <cppLoop+0x1a74>)
 8009364:	f7f7 fed6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009368:	484e      	ldr	r0, [pc, #312]	; (80094a4 <cppLoop+0x1a44>)
 800936a:	f7f8 feff 	bl	800216c <_ZN8JoyStick8getValueEv>
 800936e:	4603      	mov	r3, r0
 8009370:	2b02      	cmp	r3, #2
 8009372:	bf0c      	ite	eq
 8009374:	2301      	moveq	r3, #1
 8009376:	2300      	movne	r3, #0
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	f000 8135 	beq.w	80095ea <cppLoop+0x1b8a>
			HAL_Delay(500);
 8009380:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009384:	f000 fa5a 	bl	800983c <HAL_Delay>

			line_trace.setTargetVelocity(0.3);
 8009388:	ed9f 0a53 	vldr	s0, [pc, #332]	; 80094d8 <cppLoop+0x1a78>
 800938c:	4853      	ldr	r0, [pc, #332]	; (80094dc <cppLoop+0x1a7c>)
 800938e:	f7fa fcbe 	bl	8003d0e <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8009392:	f04f 32ff 	mov.w	r2, #4294967295
 8009396:	2101      	movs	r1, #1
 8009398:	483f      	ldr	r0, [pc, #252]	; (8009498 <cppLoop+0x1a38>)
 800939a:	f7f9 f807 	bl	80023ac <_ZN3LED2LREaa>

			logger.resetIdx();
 800939e:	4846      	ldr	r0, [pc, #280]	; (80094b8 <cppLoop+0x1a58>)
 80093a0:	f7fb fce5 	bl	8004d6e <_ZN6Logger8resetIdxEv>
			line_trace.setMode(FIRST_RUNNING);
 80093a4:	2100      	movs	r1, #0
 80093a6:	484d      	ldr	r0, [pc, #308]	; (80094dc <cppLoop+0x1a7c>)
 80093a8:	f7fa fef6 	bl	8004198 <_ZN9LineTrace7setModeEs>
			logger.start();
 80093ac:	4842      	ldr	r0, [pc, #264]	; (80094b8 <cppLoop+0x1a58>)
 80093ae:	f7fb fcf4 	bl	8004d9a <_ZN6Logger5startEv>
			line_trace.running();
 80093b2:	484a      	ldr	r0, [pc, #296]	; (80094dc <cppLoop+0x1a7c>)
 80093b4:	f7fa ff2e 	bl	8004214 <_ZN9LineTrace7runningEv>
			logger.stop();
 80093b8:	483f      	ldr	r0, [pc, #252]	; (80094b8 <cppLoop+0x1a58>)
 80093ba:	f7fb fcfe 	bl	8004dba <_ZN6Logger4stopEv>

			logger.saveLogs("STATELOG", "COMEGA.TXT");
 80093be:	4a48      	ldr	r2, [pc, #288]	; (80094e0 <cppLoop+0x1a80>)
 80093c0:	4948      	ldr	r1, [pc, #288]	; (80094e4 <cppLoop+0x1a84>)
 80093c2:	483d      	ldr	r0, [pc, #244]	; (80094b8 <cppLoop+0x1a58>)
 80093c4:	f7fb fbca 	bl	8004b5c <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "TOMEGA.TXT");
 80093c8:	4a47      	ldr	r2, [pc, #284]	; (80094e8 <cppLoop+0x1a88>)
 80093ca:	4946      	ldr	r1, [pc, #280]	; (80094e4 <cppLoop+0x1a84>)
 80093cc:	483a      	ldr	r0, [pc, #232]	; (80094b8 <cppLoop+0x1a58>)
 80093ce:	f7fb fbd9 	bl	8004b84 <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 80093d2:	f04f 32ff 	mov.w	r2, #4294967295
 80093d6:	2100      	movs	r1, #0
 80093d8:	482f      	ldr	r0, [pc, #188]	; (8009498 <cppLoop+0x1a38>)
 80093da:	f7f8 ffe7 	bl	80023ac <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 80093de:	e104      	b.n	80095ea <cppLoop+0x1b8a>

	case 14:
		led.fullColor('W');
 80093e0:	2157      	movs	r1, #87	; 0x57
 80093e2:	482d      	ldr	r0, [pc, #180]	; (8009498 <cppLoop+0x1a38>)
 80093e4:	f7f8 ff26 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 80093e8:	f7f7 fe5a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80093ec:	2100      	movs	r1, #0
 80093ee:	2000      	movs	r0, #0
 80093f0:	f7f7 fe66 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 80093f4:	483d      	ldr	r0, [pc, #244]	; (80094ec <cppLoop+0x1a8c>)
 80093f6:	f7f7 fe8d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80093fa:	2101      	movs	r1, #1
 80093fc:	2000      	movs	r0, #0
 80093fe:	f7f7 fe5f 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8009402:	4b3b      	ldr	r3, [pc, #236]	; (80094f0 <cppLoop+0x1a90>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4618      	mov	r0, r3
 8009408:	f7f7 f8b6 	bl	8000578 <__aeabi_f2d>
 800940c:	4603      	mov	r3, r0
 800940e:	460c      	mov	r4, r1
 8009410:	461a      	mov	r2, r3
 8009412:	4623      	mov	r3, r4
 8009414:	4837      	ldr	r0, [pc, #220]	; (80094f4 <cppLoop+0x1a94>)
 8009416:	f7f7 fe7d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800941a:	4822      	ldr	r0, [pc, #136]	; (80094a4 <cppLoop+0x1a44>)
 800941c:	f7f8 fea6 	bl	800216c <_ZN8JoyStick8getValueEv>
 8009420:	4603      	mov	r3, r0
 8009422:	2b02      	cmp	r3, #2
 8009424:	bf0c      	ite	eq
 8009426:	2301      	moveq	r3, #1
 8009428:	2300      	movne	r3, #0
 800942a:	b2db      	uxtb	r3, r3
 800942c:	2b00      	cmp	r3, #0
 800942e:	f000 80de 	beq.w	80095ee <cppLoop+0x1b8e>
			HAL_Delay(500);
 8009432:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009436:	f000 fa01 	bl	800983c <HAL_Delay>

			led.LR(1, -1);
 800943a:	f04f 32ff 	mov.w	r2, #4294967295
 800943e:	2101      	movs	r1, #1
 8009440:	4815      	ldr	r0, [pc, #84]	; (8009498 <cppLoop+0x1a38>)
 8009442:	f7f8 ffb3 	bl	80023ac <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8009446:	2102      	movs	r1, #2
 8009448:	4824      	ldr	r0, [pc, #144]	; (80094dc <cppLoop+0x1a7c>)
 800944a:	f7fa fea5 	bl	8004198 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 800944e:	4b2a      	ldr	r3, [pc, #168]	; (80094f8 <cppLoop+0x1a98>)
 8009450:	edd3 7a00 	vldr	s15, [r3]
 8009454:	eeb0 0a67 	vmov.f32	s0, s15
 8009458:	4820      	ldr	r0, [pc, #128]	; (80094dc <cppLoop+0x1a7c>)
 800945a:	f7fa fc58 	bl	8003d0e <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800945e:	4b24      	ldr	r3, [pc, #144]	; (80094f0 <cppLoop+0x1a90>)
 8009460:	edd3 7a00 	vldr	s15, [r3]
 8009464:	eeb0 0a67 	vmov.f32	s0, s15
 8009468:	481c      	ldr	r0, [pc, #112]	; (80094dc <cppLoop+0x1a7c>)
 800946a:	f7fa fc60 	bl	8003d2e <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 800946e:	4b20      	ldr	r3, [pc, #128]	; (80094f0 <cppLoop+0x1a90>)
 8009470:	edd3 7a00 	vldr	s15, [r3]
 8009474:	eeb0 0a67 	vmov.f32	s0, s15
 8009478:	4818      	ldr	r0, [pc, #96]	; (80094dc <cppLoop+0x1a7c>)
 800947a:	f7fa fc78 	bl	8003d6e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800947e:	4817      	ldr	r0, [pc, #92]	; (80094dc <cppLoop+0x1a7c>)
 8009480:	f7fb f880 	bl	8004584 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8009484:	4815      	ldr	r0, [pc, #84]	; (80094dc <cppLoop+0x1a7c>)
 8009486:	f7fa fec5 	bl	8004214 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 800948a:	f04f 32ff 	mov.w	r2, #4294967295
 800948e:	2100      	movs	r1, #0
 8009490:	4801      	ldr	r0, [pc, #4]	; (8009498 <cppLoop+0x1a38>)
 8009492:	f7f8 ff8b 	bl	80023ac <_ZN3LED2LREaa>
		}

		break;
 8009496:	e0aa      	b.n	80095ee <cppLoop+0x1b8e>
 8009498:	20000604 	.word	0x20000604
 800949c:	08019c7c 	.word	0x08019c7c
 80094a0:	08019c80 	.word	0x08019c80
 80094a4:	200005f8 	.word	0x200005f8
 80094a8:	3e4ccccd 	.word	0x3e4ccccd
 80094ac:	2001db90 	.word	0x2001db90
 80094b0:	08019c88 	.word	0x08019c88
 80094b4:	08019c8c 	.word	0x08019c8c
 80094b8:	20000628 	.word	0x20000628
 80094bc:	2001db14 	.word	0x2001db14
 80094c0:	4048f5c3 	.word	0x4048f5c3
 80094c4:	00000000 	.word	0x00000000
 80094c8:	08019c98 	.word	0x08019c98
 80094cc:	08019ca4 	.word	0x08019ca4
 80094d0:	08019cb0 	.word	0x08019cb0
 80094d4:	08019cb8 	.word	0x08019cb8
 80094d8:	3e99999a 	.word	0x3e99999a
 80094dc:	2001db94 	.word	0x2001db94
 80094e0:	08019cc0 	.word	0x08019cc0
 80094e4:	08019b6c 	.word	0x08019b6c
 80094e8:	08019ccc 	.word	0x08019ccc
 80094ec:	08019cd8 	.word	0x08019cd8
 80094f0:	200422a0 	.word	0x200422a0
 80094f4:	08019b54 	.word	0x08019b54
 80094f8:	200422b0 	.word	0x200422b0

	case 15:
		led.fullColor('W');
 80094fc:	2157      	movs	r1, #87	; 0x57
 80094fe:	4841      	ldr	r0, [pc, #260]	; (8009604 <cppLoop+0x1ba4>)
 8009500:	f7f8 fe98 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009504:	f7f7 fdcc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009508:	2100      	movs	r1, #0
 800950a:	2000      	movs	r0, #0
 800950c:	f7f7 fdd8 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8009510:	483d      	ldr	r0, [pc, #244]	; (8009608 <cppLoop+0x1ba8>)
 8009512:	f7f7 fdff 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009516:	2101      	movs	r1, #1
 8009518:	2000      	movs	r0, #0
 800951a:	f7f7 fdd1 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 800951e:	4b3b      	ldr	r3, [pc, #236]	; (800960c <cppLoop+0x1bac>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4618      	mov	r0, r3
 8009524:	f7f7 f828 	bl	8000578 <__aeabi_f2d>
 8009528:	4603      	mov	r3, r0
 800952a:	460c      	mov	r4, r1
 800952c:	461a      	mov	r2, r3
 800952e:	4623      	mov	r3, r4
 8009530:	4837      	ldr	r0, [pc, #220]	; (8009610 <cppLoop+0x1bb0>)
 8009532:	f7f7 fdef 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009536:	4837      	ldr	r0, [pc, #220]	; (8009614 <cppLoop+0x1bb4>)
 8009538:	f7f8 fe18 	bl	800216c <_ZN8JoyStick8getValueEv>
 800953c:	4603      	mov	r3, r0
 800953e:	2b02      	cmp	r3, #2
 8009540:	bf0c      	ite	eq
 8009542:	2301      	moveq	r3, #1
 8009544:	2300      	movne	r3, #0
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b00      	cmp	r3, #0
 800954a:	d052      	beq.n	80095f2 <cppLoop+0x1b92>
			HAL_Delay(500);
 800954c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009550:	f000 f974 	bl	800983c <HAL_Delay>

			led.LR(1, -1);
 8009554:	f04f 32ff 	mov.w	r2, #4294967295
 8009558:	2101      	movs	r1, #1
 800955a:	482a      	ldr	r0, [pc, #168]	; (8009604 <cppLoop+0x1ba4>)
 800955c:	f7f8 ff26 	bl	80023ac <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009560:	2101      	movs	r1, #1
 8009562:	482d      	ldr	r0, [pc, #180]	; (8009618 <cppLoop+0x1bb8>)
 8009564:	f7fa fe18 	bl	8004198 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009568:	4b2c      	ldr	r3, [pc, #176]	; (800961c <cppLoop+0x1bbc>)
 800956a:	edd3 7a00 	vldr	s15, [r3]
 800956e:	eeb0 0a67 	vmov.f32	s0, s15
 8009572:	4829      	ldr	r0, [pc, #164]	; (8009618 <cppLoop+0x1bb8>)
 8009574:	f7fa fbcb 	bl	8003d0e <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009578:	4b24      	ldr	r3, [pc, #144]	; (800960c <cppLoop+0x1bac>)
 800957a:	edd3 7a00 	vldr	s15, [r3]
 800957e:	eeb0 0a67 	vmov.f32	s0, s15
 8009582:	4825      	ldr	r0, [pc, #148]	; (8009618 <cppLoop+0x1bb8>)
 8009584:	f7fa fbd3 	bl	8003d2e <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009588:	4b24      	ldr	r3, [pc, #144]	; (800961c <cppLoop+0x1bbc>)
 800958a:	edd3 7a00 	vldr	s15, [r3]
 800958e:	eeb0 0a67 	vmov.f32	s0, s15
 8009592:	4821      	ldr	r0, [pc, #132]	; (8009618 <cppLoop+0x1bb8>)
 8009594:	f7fa fbeb 	bl	8003d6e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009598:	481f      	ldr	r0, [pc, #124]	; (8009618 <cppLoop+0x1bb8>)
 800959a:	f7fa fff3 	bl	8004584 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 800959e:	481e      	ldr	r0, [pc, #120]	; (8009618 <cppLoop+0x1bb8>)
 80095a0:	f7fa fe38 	bl	8004214 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80095a4:	f04f 32ff 	mov.w	r2, #4294967295
 80095a8:	2100      	movs	r1, #0
 80095aa:	4816      	ldr	r0, [pc, #88]	; (8009604 <cppLoop+0x1ba4>)
 80095ac:	f7f8 fefe 	bl	80023ac <_ZN3LED2LREaa>
		}
		break;
 80095b0:	e01f      	b.n	80095f2 <cppLoop+0x1b92>

	default:
		break;
 80095b2:	bf00      	nop
 80095b4:	e01e      	b.n	80095f4 <cppLoop+0x1b94>
		break;
 80095b6:	bf00      	nop
 80095b8:	e01c      	b.n	80095f4 <cppLoop+0x1b94>
		break;
 80095ba:	bf00      	nop
 80095bc:	e01a      	b.n	80095f4 <cppLoop+0x1b94>
		break;
 80095be:	bf00      	nop
 80095c0:	e018      	b.n	80095f4 <cppLoop+0x1b94>
		break;
 80095c2:	bf00      	nop
 80095c4:	e016      	b.n	80095f4 <cppLoop+0x1b94>
		break;
 80095c6:	bf00      	nop
 80095c8:	e014      	b.n	80095f4 <cppLoop+0x1b94>
		break;
 80095ca:	bf00      	nop
 80095cc:	e012      	b.n	80095f4 <cppLoop+0x1b94>
		break;
 80095ce:	bf00      	nop
 80095d0:	e010      	b.n	80095f4 <cppLoop+0x1b94>
		break;
 80095d2:	bf00      	nop
 80095d4:	e00e      	b.n	80095f4 <cppLoop+0x1b94>
		break;
 80095d6:	bf00      	nop
 80095d8:	e00c      	b.n	80095f4 <cppLoop+0x1b94>
		break;
 80095da:	bf00      	nop
 80095dc:	e00a      	b.n	80095f4 <cppLoop+0x1b94>
		break;
 80095de:	bf00      	nop
 80095e0:	e008      	b.n	80095f4 <cppLoop+0x1b94>
		break;
 80095e2:	bf00      	nop
 80095e4:	e006      	b.n	80095f4 <cppLoop+0x1b94>
		break;
 80095e6:	bf00      	nop
 80095e8:	e004      	b.n	80095f4 <cppLoop+0x1b94>
		break;
 80095ea:	bf00      	nop
 80095ec:	e002      	b.n	80095f4 <cppLoop+0x1b94>
		break;
 80095ee:	bf00      	nop
 80095f0:	e000      	b.n	80095f4 <cppLoop+0x1b94>
		break;
 80095f2:	bf00      	nop

	}

	HAL_Delay(30);
 80095f4:	201e      	movs	r0, #30
 80095f6:	f000 f921 	bl	800983c <HAL_Delay>

}
 80095fa:	bf00      	nop
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009602:	bf00      	nop
 8009604:	20000604 	.word	0x20000604
 8009608:	08019ce4 	.word	0x08019ce4
 800960c:	20042298 	.word	0x20042298
 8009610:	08019b54 	.word	0x08019b54
 8009614:	200005f8 	.word	0x200005f8
 8009618:	2001db94 	.word	0x2001db94
 800961c:	200422a8 	.word	0x200422a8

08009620 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af06      	add	r7, sp, #24
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d142      	bne.n	80096b6 <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009636:	4293      	cmp	r3, r2
 8009638:	d13d      	bne.n	80096b6 <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 800963a:	4821      	ldr	r0, [pc, #132]	; (80096c0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800963c:	f7f8 feee 	bl	800241c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009640:	4820      	ldr	r0, [pc, #128]	; (80096c4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009642:	f7fb ffb9 	bl	80055b8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009646:	4820      	ldr	r0, [pc, #128]	; (80096c8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009648:	f7f8 fd84 	bl	8002154 <_ZN8JoyStickC1Ev>
Motor motor;
 800964c:	481f      	ldr	r0, [pc, #124]	; (80096cc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800964e:	f7fb fbc4 	bl	8004dda <_ZN5MotorC1Ev>
IMU imu;
 8009652:	481f      	ldr	r0, [pc, #124]	; (80096d0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009654:	f7f8 fb8a 	bl	8001d6c <_ZN3IMUC1Ev>
Logger logger;
 8009658:	481e      	ldr	r0, [pc, #120]	; (80096d4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800965a:	f7fb f883 	bl	8004764 <_ZN6LoggerC1Ev>
Encoder encoder;
 800965e:	481e      	ldr	r0, [pc, #120]	; (80096d8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009660:	f7f7 feb4 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009664:	4b1a      	ldr	r3, [pc, #104]	; (80096d0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009666:	4a1c      	ldr	r2, [pc, #112]	; (80096d8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009668:	4918      	ldr	r1, [pc, #96]	; (80096cc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800966a:	481c      	ldr	r0, [pc, #112]	; (80096dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800966c:	f7fc f9b2 	bl	80059d4 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009670:	4b1a      	ldr	r3, [pc, #104]	; (80096dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009672:	4a17      	ldr	r2, [pc, #92]	; (80096d0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009674:	4918      	ldr	r1, [pc, #96]	; (80096d8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009676:	481a      	ldr	r0, [pc, #104]	; (80096e0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009678:	f7fb fcae 	bl	8004fd8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 800967c:	4819      	ldr	r0, [pc, #100]	; (80096e4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800967e:	f7f7 fda9 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009682:	4b18      	ldr	r3, [pc, #96]	; (80096e4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009684:	9305      	str	r3, [sp, #20]
 8009686:	4b12      	ldr	r3, [pc, #72]	; (80096d0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009688:	9304      	str	r3, [sp, #16]
 800968a:	4b12      	ldr	r3, [pc, #72]	; (80096d4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800968c:	9303      	str	r3, [sp, #12]
 800968e:	4b14      	ldr	r3, [pc, #80]	; (80096e0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009690:	9302      	str	r3, [sp, #8]
 8009692:	4b11      	ldr	r3, [pc, #68]	; (80096d8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009694:	9301      	str	r3, [sp, #4]
 8009696:	4b0b      	ldr	r3, [pc, #44]	; (80096c4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	4b10      	ldr	r3, [pc, #64]	; (80096dc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800969c:	4a08      	ldr	r2, [pc, #32]	; (80096c0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800969e:	490b      	ldr	r1, [pc, #44]	; (80096cc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80096a0:	4811      	ldr	r0, [pc, #68]	; (80096e8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80096a2:	f7f9 fa3d 	bl	8002b20 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 80096a6:	4a09      	ldr	r2, [pc, #36]	; (80096cc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80096a8:	490a      	ldr	r1, [pc, #40]	; (80096d4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80096aa:	4810      	ldr	r0, [pc, #64]	; (80096ec <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80096ac:	f7fc f8f2 	bl	8005894 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 80096b0:	480f      	ldr	r0, [pc, #60]	; (80096f0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80096b2:	f7fb fe13 	bl	80052dc <_ZN13PathFollowingC1Ev>
}
 80096b6:	bf00      	nop
 80096b8:	3708      	adds	r7, #8
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	200002f4 	.word	0x200002f4
 80096c4:	200005ec 	.word	0x200005ec
 80096c8:	200005f8 	.word	0x200005f8
 80096cc:	20000600 	.word	0x20000600
 80096d0:	20000614 	.word	0x20000614
 80096d4:	20000628 	.word	0x20000628
 80096d8:	2001daf4 	.word	0x2001daf4
 80096dc:	2001db14 	.word	0x2001db14
 80096e0:	2001db50 	.word	0x2001db50
 80096e4:	2001db90 	.word	0x2001db90
 80096e8:	2001db94 	.word	0x2001db94
 80096ec:	2002a930 	.word	0x2002a930
 80096f0:	2002ab40 	.word	0x2002ab40

080096f4 <_GLOBAL__sub_I_line_sensor>:
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80096fc:	2001      	movs	r0, #1
 80096fe:	f7ff ff8f 	bl	8009620 <_Z41__static_initialization_and_destruction_0ii>
 8009702:	bd80      	pop	{r7, pc}

08009704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800973c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009708:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800970a:	e003      	b.n	8009714 <LoopCopyDataInit>

0800970c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800970c:	4b0c      	ldr	r3, [pc, #48]	; (8009740 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800970e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009710:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009712:	3104      	adds	r1, #4

08009714 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009714:	480b      	ldr	r0, [pc, #44]	; (8009744 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009716:	4b0c      	ldr	r3, [pc, #48]	; (8009748 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009718:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800971a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800971c:	d3f6      	bcc.n	800970c <CopyDataInit>
  ldr  r2, =_sbss
 800971e:	4a0b      	ldr	r2, [pc, #44]	; (800974c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009720:	e002      	b.n	8009728 <LoopFillZerobss>

08009722 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009722:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009724:	f842 3b04 	str.w	r3, [r2], #4

08009728 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009728:	4b09      	ldr	r3, [pc, #36]	; (8009750 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800972a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800972c:	d3f9      	bcc.n	8009722 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800972e:	f7fe f85d 	bl	80077ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009732:	f00b fdd5 	bl	80152e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009736:	f7fc fb97 	bl	8005e68 <main>
  bx  lr    
 800973a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800973c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009740:	0801a2d8 	.word	0x0801a2d8
  ldr  r0, =_sdata
 8009744:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009748:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800974c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009750:	20046cb8 	.word	0x20046cb8

08009754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009754:	e7fe      	b.n	8009754 <ADC_IRQHandler>
	...

08009758 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800975c:	4b0e      	ldr	r3, [pc, #56]	; (8009798 <HAL_Init+0x40>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a0d      	ldr	r2, [pc, #52]	; (8009798 <HAL_Init+0x40>)
 8009762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009766:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009768:	4b0b      	ldr	r3, [pc, #44]	; (8009798 <HAL_Init+0x40>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a0a      	ldr	r2, [pc, #40]	; (8009798 <HAL_Init+0x40>)
 800976e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009772:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009774:	4b08      	ldr	r3, [pc, #32]	; (8009798 <HAL_Init+0x40>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a07      	ldr	r2, [pc, #28]	; (8009798 <HAL_Init+0x40>)
 800977a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800977e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009780:	2003      	movs	r0, #3
 8009782:	f000 fd51 	bl	800a228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009786:	2000      	movs	r0, #0
 8009788:	f000 f808 	bl	800979c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800978c:	f7fd fa7e 	bl	8006c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	40023c00 	.word	0x40023c00

0800979c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80097a4:	4b12      	ldr	r3, [pc, #72]	; (80097f0 <HAL_InitTick+0x54>)
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	4b12      	ldr	r3, [pc, #72]	; (80097f4 <HAL_InitTick+0x58>)
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	4619      	mov	r1, r3
 80097ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80097b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80097b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 fd69 	bl	800a292 <HAL_SYSTICK_Config>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d001      	beq.n	80097ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80097c6:	2301      	movs	r3, #1
 80097c8:	e00e      	b.n	80097e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b0f      	cmp	r3, #15
 80097ce:	d80a      	bhi.n	80097e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80097d0:	2200      	movs	r2, #0
 80097d2:	6879      	ldr	r1, [r7, #4]
 80097d4:	f04f 30ff 	mov.w	r0, #4294967295
 80097d8:	f000 fd31 	bl	800a23e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80097dc:	4a06      	ldr	r2, [pc, #24]	; (80097f8 <HAL_InitTick+0x5c>)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	e000      	b.n	80097e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	20000000 	.word	0x20000000
 80097f4:	20000008 	.word	0x20000008
 80097f8:	20000004 	.word	0x20000004

080097fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80097fc:	b480      	push	{r7}
 80097fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009800:	4b06      	ldr	r3, [pc, #24]	; (800981c <HAL_IncTick+0x20>)
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	461a      	mov	r2, r3
 8009806:	4b06      	ldr	r3, [pc, #24]	; (8009820 <HAL_IncTick+0x24>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4413      	add	r3, r2
 800980c:	4a04      	ldr	r2, [pc, #16]	; (8009820 <HAL_IncTick+0x24>)
 800980e:	6013      	str	r3, [r2, #0]
}
 8009810:	bf00      	nop
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	20000008 	.word	0x20000008
 8009820:	20044c40 	.word	0x20044c40

08009824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009824:	b480      	push	{r7}
 8009826:	af00      	add	r7, sp, #0
  return uwTick;
 8009828:	4b03      	ldr	r3, [pc, #12]	; (8009838 <HAL_GetTick+0x14>)
 800982a:	681b      	ldr	r3, [r3, #0]
}
 800982c:	4618      	mov	r0, r3
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	20044c40 	.word	0x20044c40

0800983c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009844:	f7ff ffee 	bl	8009824 <HAL_GetTick>
 8009848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009854:	d005      	beq.n	8009862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009856:	4b09      	ldr	r3, [pc, #36]	; (800987c <HAL_Delay+0x40>)
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	461a      	mov	r2, r3
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4413      	add	r3, r2
 8009860:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009862:	bf00      	nop
 8009864:	f7ff ffde 	bl	8009824 <HAL_GetTick>
 8009868:	4602      	mov	r2, r0
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	1ad3      	subs	r3, r2, r3
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	429a      	cmp	r2, r3
 8009872:	d8f7      	bhi.n	8009864 <HAL_Delay+0x28>
  {
  }
}
 8009874:	bf00      	nop
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	20000008 	.word	0x20000008

08009880 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009888:	2300      	movs	r3, #0
 800988a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d101      	bne.n	8009896 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e033      	b.n	80098fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989a:	2b00      	cmp	r3, #0
 800989c:	d109      	bne.n	80098b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f7fd fa1c 	bl	8006cdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098b6:	f003 0310 	and.w	r3, r3, #16
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d118      	bne.n	80098f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80098c6:	f023 0302 	bic.w	r3, r3, #2
 80098ca:	f043 0202 	orr.w	r2, r3, #2
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fa5a 	bl	8009d8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e2:	f023 0303 	bic.w	r3, r3, #3
 80098e6:	f043 0201 	orr.w	r2, r3, #1
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	641a      	str	r2, [r3, #64]	; 0x40
 80098ee:	e001      	b.n	80098f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80098f0:	2301      	movs	r3, #1
 80098f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
	...

08009908 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009914:	2300      	movs	r3, #0
 8009916:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800991e:	2b01      	cmp	r3, #1
 8009920:	d101      	bne.n	8009926 <HAL_ADC_Start_DMA+0x1e>
 8009922:	2302      	movs	r3, #2
 8009924:	e0cc      	b.n	8009ac0 <HAL_ADC_Start_DMA+0x1b8>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	f003 0301 	and.w	r3, r3, #1
 8009938:	2b01      	cmp	r3, #1
 800993a:	d018      	beq.n	800996e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	689a      	ldr	r2, [r3, #8]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f042 0201 	orr.w	r2, r2, #1
 800994a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800994c:	4b5e      	ldr	r3, [pc, #376]	; (8009ac8 <HAL_ADC_Start_DMA+0x1c0>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a5e      	ldr	r2, [pc, #376]	; (8009acc <HAL_ADC_Start_DMA+0x1c4>)
 8009952:	fba2 2303 	umull	r2, r3, r2, r3
 8009956:	0c9a      	lsrs	r2, r3, #18
 8009958:	4613      	mov	r3, r2
 800995a:	005b      	lsls	r3, r3, #1
 800995c:	4413      	add	r3, r2
 800995e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009960:	e002      	b.n	8009968 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	3b01      	subs	r3, #1
 8009966:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1f9      	bne.n	8009962 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	689b      	ldr	r3, [r3, #8]
 8009974:	f003 0301 	and.w	r3, r3, #1
 8009978:	2b01      	cmp	r3, #1
 800997a:	f040 80a0 	bne.w	8009abe <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009982:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009986:	f023 0301 	bic.w	r3, r3, #1
 800998a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800999c:	2b00      	cmp	r3, #0
 800999e:	d007      	beq.n	80099b0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80099a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099bc:	d106      	bne.n	80099cc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099c2:	f023 0206 	bic.w	r2, r3, #6
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	645a      	str	r2, [r3, #68]	; 0x44
 80099ca:	e002      	b.n	80099d2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2200      	movs	r2, #0
 80099d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80099da:	4b3d      	ldr	r3, [pc, #244]	; (8009ad0 <HAL_ADC_Start_DMA+0x1c8>)
 80099dc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e2:	4a3c      	ldr	r2, [pc, #240]	; (8009ad4 <HAL_ADC_Start_DMA+0x1cc>)
 80099e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ea:	4a3b      	ldr	r2, [pc, #236]	; (8009ad8 <HAL_ADC_Start_DMA+0x1d0>)
 80099ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f2:	4a3a      	ldr	r2, [pc, #232]	; (8009adc <HAL_ADC_Start_DMA+0x1d4>)
 80099f4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80099fe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	685a      	ldr	r2, [r3, #4]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009a0e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	689a      	ldr	r2, [r3, #8]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a1e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	334c      	adds	r3, #76	; 0x4c
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f000 fcea 	bl	800a408 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	f003 031f 	and.w	r3, r3, #31
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d12a      	bne.n	8009a96 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a26      	ldr	r2, [pc, #152]	; (8009ae0 <HAL_ADC_Start_DMA+0x1d8>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d015      	beq.n	8009a76 <HAL_ADC_Start_DMA+0x16e>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a25      	ldr	r2, [pc, #148]	; (8009ae4 <HAL_ADC_Start_DMA+0x1dc>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d105      	bne.n	8009a60 <HAL_ADC_Start_DMA+0x158>
 8009a54:	4b1e      	ldr	r3, [pc, #120]	; (8009ad0 <HAL_ADC_Start_DMA+0x1c8>)
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	f003 031f 	and.w	r3, r3, #31
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00a      	beq.n	8009a76 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a20      	ldr	r2, [pc, #128]	; (8009ae8 <HAL_ADC_Start_DMA+0x1e0>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d129      	bne.n	8009abe <HAL_ADC_Start_DMA+0x1b6>
 8009a6a:	4b19      	ldr	r3, [pc, #100]	; (8009ad0 <HAL_ADC_Start_DMA+0x1c8>)
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	f003 031f 	and.w	r3, r3, #31
 8009a72:	2b0f      	cmp	r3, #15
 8009a74:	d823      	bhi.n	8009abe <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d11c      	bne.n	8009abe <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	689a      	ldr	r2, [r3, #8]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009a92:	609a      	str	r2, [r3, #8]
 8009a94:	e013      	b.n	8009abe <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a11      	ldr	r2, [pc, #68]	; (8009ae0 <HAL_ADC_Start_DMA+0x1d8>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d10e      	bne.n	8009abe <HAL_ADC_Start_DMA+0x1b6>
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d107      	bne.n	8009abe <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	689a      	ldr	r2, [r3, #8]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009abc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3718      	adds	r7, #24
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	20000000 	.word	0x20000000
 8009acc:	431bde83 	.word	0x431bde83
 8009ad0:	40012300 	.word	0x40012300
 8009ad4:	08009f85 	.word	0x08009f85
 8009ad8:	0800a03f 	.word	0x0800a03f
 8009adc:	0800a05b 	.word	0x0800a05b
 8009ae0:	40012000 	.word	0x40012000
 8009ae4:	40012100 	.word	0x40012100
 8009ae8:	40012200 	.word	0x40012200

08009aec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009b32:	2300      	movs	r3, #0
 8009b34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d101      	bne.n	8009b44 <HAL_ADC_ConfigChannel+0x1c>
 8009b40:	2302      	movs	r3, #2
 8009b42:	e113      	b.n	8009d6c <HAL_ADC_ConfigChannel+0x244>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b09      	cmp	r3, #9
 8009b52:	d925      	bls.n	8009ba0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68d9      	ldr	r1, [r3, #12]
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	461a      	mov	r2, r3
 8009b62:	4613      	mov	r3, r2
 8009b64:	005b      	lsls	r3, r3, #1
 8009b66:	4413      	add	r3, r2
 8009b68:	3b1e      	subs	r3, #30
 8009b6a:	2207      	movs	r2, #7
 8009b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b70:	43da      	mvns	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	400a      	ands	r2, r1
 8009b78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	68d9      	ldr	r1, [r3, #12]
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	689a      	ldr	r2, [r3, #8]
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	005b      	lsls	r3, r3, #1
 8009b90:	4403      	add	r3, r0
 8009b92:	3b1e      	subs	r3, #30
 8009b94:	409a      	lsls	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	430a      	orrs	r2, r1
 8009b9c:	60da      	str	r2, [r3, #12]
 8009b9e:	e022      	b.n	8009be6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6919      	ldr	r1, [r3, #16]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	461a      	mov	r2, r3
 8009bae:	4613      	mov	r3, r2
 8009bb0:	005b      	lsls	r3, r3, #1
 8009bb2:	4413      	add	r3, r2
 8009bb4:	2207      	movs	r2, #7
 8009bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bba:	43da      	mvns	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	400a      	ands	r2, r1
 8009bc2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	6919      	ldr	r1, [r3, #16]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	689a      	ldr	r2, [r3, #8]
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	005b      	lsls	r3, r3, #1
 8009bda:	4403      	add	r3, r0
 8009bdc:	409a      	lsls	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	2b06      	cmp	r3, #6
 8009bec:	d824      	bhi.n	8009c38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	4613      	mov	r3, r2
 8009bfa:	009b      	lsls	r3, r3, #2
 8009bfc:	4413      	add	r3, r2
 8009bfe:	3b05      	subs	r3, #5
 8009c00:	221f      	movs	r2, #31
 8009c02:	fa02 f303 	lsl.w	r3, r2, r3
 8009c06:	43da      	mvns	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	400a      	ands	r2, r1
 8009c0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	685a      	ldr	r2, [r3, #4]
 8009c22:	4613      	mov	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	3b05      	subs	r3, #5
 8009c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	430a      	orrs	r2, r1
 8009c34:	635a      	str	r2, [r3, #52]	; 0x34
 8009c36:	e04c      	b.n	8009cd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	2b0c      	cmp	r3, #12
 8009c3e:	d824      	bhi.n	8009c8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	685a      	ldr	r2, [r3, #4]
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	3b23      	subs	r3, #35	; 0x23
 8009c52:	221f      	movs	r2, #31
 8009c54:	fa02 f303 	lsl.w	r3, r2, r3
 8009c58:	43da      	mvns	r2, r3
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	400a      	ands	r2, r1
 8009c60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	4618      	mov	r0, r3
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	685a      	ldr	r2, [r3, #4]
 8009c74:	4613      	mov	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	3b23      	subs	r3, #35	; 0x23
 8009c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	430a      	orrs	r2, r1
 8009c86:	631a      	str	r2, [r3, #48]	; 0x30
 8009c88:	e023      	b.n	8009cd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	685a      	ldr	r2, [r3, #4]
 8009c94:	4613      	mov	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4413      	add	r3, r2
 8009c9a:	3b41      	subs	r3, #65	; 0x41
 8009c9c:	221f      	movs	r2, #31
 8009c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca2:	43da      	mvns	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	400a      	ands	r2, r1
 8009caa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	4618      	mov	r0, r3
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	685a      	ldr	r2, [r3, #4]
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	3b41      	subs	r3, #65	; 0x41
 8009cc6:	fa00 f203 	lsl.w	r2, r0, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009cd2:	4b29      	ldr	r3, [pc, #164]	; (8009d78 <HAL_ADC_ConfigChannel+0x250>)
 8009cd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a28      	ldr	r2, [pc, #160]	; (8009d7c <HAL_ADC_ConfigChannel+0x254>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d10f      	bne.n	8009d00 <HAL_ADC_ConfigChannel+0x1d8>
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b12      	cmp	r3, #18
 8009ce6:	d10b      	bne.n	8009d00 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	685b      	ldr	r3, [r3, #4]
 8009cec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a1d      	ldr	r2, [pc, #116]	; (8009d7c <HAL_ADC_ConfigChannel+0x254>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d12b      	bne.n	8009d62 <HAL_ADC_ConfigChannel+0x23a>
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a1c      	ldr	r2, [pc, #112]	; (8009d80 <HAL_ADC_ConfigChannel+0x258>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d003      	beq.n	8009d1c <HAL_ADC_ConfigChannel+0x1f4>
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b11      	cmp	r3, #17
 8009d1a:	d122      	bne.n	8009d62 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	685b      	ldr	r3, [r3, #4]
 8009d2c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a11      	ldr	r2, [pc, #68]	; (8009d80 <HAL_ADC_ConfigChannel+0x258>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d111      	bne.n	8009d62 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009d3e:	4b11      	ldr	r3, [pc, #68]	; (8009d84 <HAL_ADC_ConfigChannel+0x25c>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a11      	ldr	r2, [pc, #68]	; (8009d88 <HAL_ADC_ConfigChannel+0x260>)
 8009d44:	fba2 2303 	umull	r2, r3, r2, r3
 8009d48:	0c9a      	lsrs	r2, r3, #18
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	4413      	add	r3, r2
 8009d50:	005b      	lsls	r3, r3, #1
 8009d52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009d54:	e002      	b.n	8009d5c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1f9      	bne.n	8009d56 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009d6a:	2300      	movs	r3, #0
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3714      	adds	r7, #20
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr
 8009d78:	40012300 	.word	0x40012300
 8009d7c:	40012000 	.word	0x40012000
 8009d80:	10000012 	.word	0x10000012
 8009d84:	20000000 	.word	0x20000000
 8009d88:	431bde83 	.word	0x431bde83

08009d8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009d94:	4b79      	ldr	r3, [pc, #484]	; (8009f7c <ADC_Init+0x1f0>)
 8009d96:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	685a      	ldr	r2, [r3, #4]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	431a      	orrs	r2, r3
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009dc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6859      	ldr	r1, [r3, #4]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	021a      	lsls	r2, r3, #8
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009de4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	6859      	ldr	r1, [r3, #4]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	689a      	ldr	r2, [r3, #8]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	430a      	orrs	r2, r1
 8009df6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	689a      	ldr	r2, [r3, #8]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	6899      	ldr	r1, [r3, #8]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	68da      	ldr	r2, [r3, #12]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	430a      	orrs	r2, r1
 8009e18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1e:	4a58      	ldr	r2, [pc, #352]	; (8009f80 <ADC_Init+0x1f4>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d022      	beq.n	8009e6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	689a      	ldr	r2, [r3, #8]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009e32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6899      	ldr	r1, [r3, #8]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	430a      	orrs	r2, r1
 8009e44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	689a      	ldr	r2, [r3, #8]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009e54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	6899      	ldr	r1, [r3, #8]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	609a      	str	r2, [r3, #8]
 8009e68:	e00f      	b.n	8009e8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	689a      	ldr	r2, [r3, #8]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009e78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	689a      	ldr	r2, [r3, #8]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009e88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	689a      	ldr	r2, [r3, #8]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f022 0202 	bic.w	r2, r2, #2
 8009e98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	6899      	ldr	r1, [r3, #8]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	7e1b      	ldrb	r3, [r3, #24]
 8009ea4:	005a      	lsls	r2, r3, #1
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	430a      	orrs	r2, r1
 8009eac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d01b      	beq.n	8009ef0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ec6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009ed6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6859      	ldr	r1, [r3, #4]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	035a      	lsls	r2, r3, #13
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	605a      	str	r2, [r3, #4]
 8009eee:	e007      	b.n	8009f00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	685a      	ldr	r2, [r3, #4]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009efe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	69db      	ldr	r3, [r3, #28]
 8009f1a:	3b01      	subs	r3, #1
 8009f1c:	051a      	lsls	r2, r3, #20
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	430a      	orrs	r2, r1
 8009f24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	689a      	ldr	r2, [r3, #8]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009f34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	6899      	ldr	r1, [r3, #8]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f42:	025a      	lsls	r2, r3, #9
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	430a      	orrs	r2, r1
 8009f4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	689a      	ldr	r2, [r3, #8]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	6899      	ldr	r1, [r3, #8]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	029a      	lsls	r2, r3, #10
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	430a      	orrs	r2, r1
 8009f6e:	609a      	str	r2, [r3, #8]
}
 8009f70:	bf00      	nop
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	40012300 	.word	0x40012300
 8009f80:	0f000001 	.word	0x0f000001

08009f84 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f90:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d13c      	bne.n	800a018 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d12b      	bne.n	800a010 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d127      	bne.n	800a010 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d006      	beq.n	8009fdc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d119      	bne.n	800a010 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f022 0220 	bic.w	r2, r2, #32
 8009fea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d105      	bne.n	800a010 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a008:	f043 0201 	orr.w	r2, r3, #1
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a010:	68f8      	ldr	r0, [r7, #12]
 800a012:	f7ff fd6b 	bl	8009aec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a016:	e00e      	b.n	800a036 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01c:	f003 0310 	and.w	r3, r3, #16
 800a020:	2b00      	cmp	r3, #0
 800a022:	d003      	beq.n	800a02c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f7ff fd75 	bl	8009b14 <HAL_ADC_ErrorCallback>
}
 800a02a:	e004      	b.n	800a036 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	4798      	blx	r3
}
 800a036:	bf00      	nop
 800a038:	3710      	adds	r7, #16
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b084      	sub	sp, #16
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a04a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f7ff fd57 	bl	8009b00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a052:	bf00      	nop
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b084      	sub	sp, #16
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a066:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2240      	movs	r2, #64	; 0x40
 800a06c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a072:	f043 0204 	orr.w	r2, r3, #4
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f7ff fd4a 	bl	8009b14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a080:	bf00      	nop
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a088:	b480      	push	{r7}
 800a08a:	b085      	sub	sp, #20
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f003 0307 	and.w	r3, r3, #7
 800a096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a098:	4b0c      	ldr	r3, [pc, #48]	; (800a0cc <__NVIC_SetPriorityGrouping+0x44>)
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a0b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a0b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a0ba:	4a04      	ldr	r2, [pc, #16]	; (800a0cc <__NVIC_SetPriorityGrouping+0x44>)
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	60d3      	str	r3, [r2, #12]
}
 800a0c0:	bf00      	nop
 800a0c2:	3714      	adds	r7, #20
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	e000ed00 	.word	0xe000ed00

0800a0d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a0d4:	4b04      	ldr	r3, [pc, #16]	; (800a0e8 <__NVIC_GetPriorityGrouping+0x18>)
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	0a1b      	lsrs	r3, r3, #8
 800a0da:	f003 0307 	and.w	r3, r3, #7
}
 800a0de:	4618      	mov	r0, r3
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr
 800a0e8:	e000ed00 	.word	0xe000ed00

0800a0ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	db0b      	blt.n	800a116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a0fe:	79fb      	ldrb	r3, [r7, #7]
 800a100:	f003 021f 	and.w	r2, r3, #31
 800a104:	4907      	ldr	r1, [pc, #28]	; (800a124 <__NVIC_EnableIRQ+0x38>)
 800a106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a10a:	095b      	lsrs	r3, r3, #5
 800a10c:	2001      	movs	r0, #1
 800a10e:	fa00 f202 	lsl.w	r2, r0, r2
 800a112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a116:	bf00      	nop
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	e000e100 	.word	0xe000e100

0800a128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	4603      	mov	r3, r0
 800a130:	6039      	str	r1, [r7, #0]
 800a132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	db0a      	blt.n	800a152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	490c      	ldr	r1, [pc, #48]	; (800a174 <__NVIC_SetPriority+0x4c>)
 800a142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a146:	0112      	lsls	r2, r2, #4
 800a148:	b2d2      	uxtb	r2, r2
 800a14a:	440b      	add	r3, r1
 800a14c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a150:	e00a      	b.n	800a168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	b2da      	uxtb	r2, r3
 800a156:	4908      	ldr	r1, [pc, #32]	; (800a178 <__NVIC_SetPriority+0x50>)
 800a158:	79fb      	ldrb	r3, [r7, #7]
 800a15a:	f003 030f 	and.w	r3, r3, #15
 800a15e:	3b04      	subs	r3, #4
 800a160:	0112      	lsls	r2, r2, #4
 800a162:	b2d2      	uxtb	r2, r2
 800a164:	440b      	add	r3, r1
 800a166:	761a      	strb	r2, [r3, #24]
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr
 800a174:	e000e100 	.word	0xe000e100
 800a178:	e000ed00 	.word	0xe000ed00

0800a17c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b089      	sub	sp, #36	; 0x24
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f003 0307 	and.w	r3, r3, #7
 800a18e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	f1c3 0307 	rsb	r3, r3, #7
 800a196:	2b04      	cmp	r3, #4
 800a198:	bf28      	it	cs
 800a19a:	2304      	movcs	r3, #4
 800a19c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	2b06      	cmp	r3, #6
 800a1a4:	d902      	bls.n	800a1ac <NVIC_EncodePriority+0x30>
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	3b03      	subs	r3, #3
 800a1aa:	e000      	b.n	800a1ae <NVIC_EncodePriority+0x32>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a1b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ba:	43da      	mvns	r2, r3
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	401a      	ands	r2, r3
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a1c4:	f04f 31ff 	mov.w	r1, #4294967295
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ce:	43d9      	mvns	r1, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a1d4:	4313      	orrs	r3, r2
         );
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3724      	adds	r7, #36	; 0x24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
	...

0800a1e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b082      	sub	sp, #8
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a1f4:	d301      	bcc.n	800a1fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e00f      	b.n	800a21a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a1fa:	4a0a      	ldr	r2, [pc, #40]	; (800a224 <SysTick_Config+0x40>)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	3b01      	subs	r3, #1
 800a200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a202:	210f      	movs	r1, #15
 800a204:	f04f 30ff 	mov.w	r0, #4294967295
 800a208:	f7ff ff8e 	bl	800a128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a20c:	4b05      	ldr	r3, [pc, #20]	; (800a224 <SysTick_Config+0x40>)
 800a20e:	2200      	movs	r2, #0
 800a210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a212:	4b04      	ldr	r3, [pc, #16]	; (800a224 <SysTick_Config+0x40>)
 800a214:	2207      	movs	r2, #7
 800a216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	e000e010 	.word	0xe000e010

0800a228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f7ff ff29 	bl	800a088 <__NVIC_SetPriorityGrouping>
}
 800a236:	bf00      	nop
 800a238:	3708      	adds	r7, #8
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a23e:	b580      	push	{r7, lr}
 800a240:	b086      	sub	sp, #24
 800a242:	af00      	add	r7, sp, #0
 800a244:	4603      	mov	r3, r0
 800a246:	60b9      	str	r1, [r7, #8]
 800a248:	607a      	str	r2, [r7, #4]
 800a24a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a24c:	2300      	movs	r3, #0
 800a24e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a250:	f7ff ff3e 	bl	800a0d0 <__NVIC_GetPriorityGrouping>
 800a254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	68b9      	ldr	r1, [r7, #8]
 800a25a:	6978      	ldr	r0, [r7, #20]
 800a25c:	f7ff ff8e 	bl	800a17c <NVIC_EncodePriority>
 800a260:	4602      	mov	r2, r0
 800a262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a266:	4611      	mov	r1, r2
 800a268:	4618      	mov	r0, r3
 800a26a:	f7ff ff5d 	bl	800a128 <__NVIC_SetPriority>
}
 800a26e:	bf00      	nop
 800a270:	3718      	adds	r7, #24
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a276:	b580      	push	{r7, lr}
 800a278:	b082      	sub	sp, #8
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	4603      	mov	r3, r0
 800a27e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a284:	4618      	mov	r0, r3
 800a286:	f7ff ff31 	bl	800a0ec <__NVIC_EnableIRQ>
}
 800a28a:	bf00      	nop
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b082      	sub	sp, #8
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f7ff ffa2 	bl	800a1e4 <SysTick_Config>
 800a2a0:	4603      	mov	r3, r0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
	...

0800a2ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b086      	sub	sp, #24
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a2b8:	f7ff fab4 	bl	8009824 <HAL_GetTick>
 800a2bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e099      	b.n	800a3fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f022 0201 	bic.w	r2, r2, #1
 800a2e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a2e8:	e00f      	b.n	800a30a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a2ea:	f7ff fa9b 	bl	8009824 <HAL_GetTick>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	1ad3      	subs	r3, r2, r3
 800a2f4:	2b05      	cmp	r3, #5
 800a2f6:	d908      	bls.n	800a30a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2220      	movs	r2, #32
 800a2fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2203      	movs	r2, #3
 800a302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a306:	2303      	movs	r3, #3
 800a308:	e078      	b.n	800a3fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f003 0301 	and.w	r3, r3, #1
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1e8      	bne.n	800a2ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a320:	697a      	ldr	r2, [r7, #20]
 800a322:	4b38      	ldr	r3, [pc, #224]	; (800a404 <HAL_DMA_Init+0x158>)
 800a324:	4013      	ands	r3, r2
 800a326:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	685a      	ldr	r2, [r3, #4]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a336:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a34e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a356:	697a      	ldr	r2, [r7, #20]
 800a358:	4313      	orrs	r3, r2
 800a35a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a360:	2b04      	cmp	r3, #4
 800a362:	d107      	bne.n	800a374 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36c:	4313      	orrs	r3, r2
 800a36e:	697a      	ldr	r2, [r7, #20]
 800a370:	4313      	orrs	r3, r2
 800a372:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	695b      	ldr	r3, [r3, #20]
 800a382:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f023 0307 	bic.w	r3, r3, #7
 800a38a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a390:	697a      	ldr	r2, [r7, #20]
 800a392:	4313      	orrs	r3, r2
 800a394:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39a:	2b04      	cmp	r3, #4
 800a39c:	d117      	bne.n	800a3ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a2:	697a      	ldr	r2, [r7, #20]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d00e      	beq.n	800a3ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 fa9d 	bl	800a8f0 <DMA_CheckFifoParam>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d008      	beq.n	800a3ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2240      	movs	r2, #64	; 0x40
 800a3c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e016      	b.n	800a3fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	697a      	ldr	r2, [r7, #20]
 800a3d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fa54 	bl	800a884 <DMA_CalcBaseAndBitshift>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3e4:	223f      	movs	r2, #63	; 0x3f
 800a3e6:	409a      	lsls	r2, r3
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3718      	adds	r7, #24
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	f010803f 	.word	0xf010803f

0800a408 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b086      	sub	sp, #24
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a416:	2300      	movs	r3, #0
 800a418:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a41e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a426:	2b01      	cmp	r3, #1
 800a428:	d101      	bne.n	800a42e <HAL_DMA_Start_IT+0x26>
 800a42a:	2302      	movs	r3, #2
 800a42c:	e040      	b.n	800a4b0 <HAL_DMA_Start_IT+0xa8>
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2201      	movs	r2, #1
 800a432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d12f      	bne.n	800a4a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2202      	movs	r2, #2
 800a446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	68b9      	ldr	r1, [r7, #8]
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f000 f9e6 	bl	800a828 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a460:	223f      	movs	r2, #63	; 0x3f
 800a462:	409a      	lsls	r2, r3
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f042 0216 	orr.w	r2, r2, #22
 800a476:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d007      	beq.n	800a490 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f042 0208 	orr.w	r2, r2, #8
 800a48e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f042 0201 	orr.w	r2, r2, #1
 800a49e:	601a      	str	r2, [r3, #0]
 800a4a0:	e005      	b.n	800a4ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a4aa:	2302      	movs	r3, #2
 800a4ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a4ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3718      	adds	r7, #24
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d004      	beq.n	800a4d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2280      	movs	r2, #128	; 0x80
 800a4d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e00c      	b.n	800a4f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2205      	movs	r2, #5
 800a4da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f022 0201 	bic.w	r2, r2, #1
 800a4ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a4ee:	2300      	movs	r3, #0
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a504:	2300      	movs	r3, #0
 800a506:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a508:	4b92      	ldr	r3, [pc, #584]	; (800a754 <HAL_DMA_IRQHandler+0x258>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a92      	ldr	r2, [pc, #584]	; (800a758 <HAL_DMA_IRQHandler+0x25c>)
 800a50e:	fba2 2303 	umull	r2, r3, r2, r3
 800a512:	0a9b      	lsrs	r3, r3, #10
 800a514:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a51a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a526:	2208      	movs	r2, #8
 800a528:	409a      	lsls	r2, r3
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	4013      	ands	r3, r2
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d01a      	beq.n	800a568 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f003 0304 	and.w	r3, r3, #4
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d013      	beq.n	800a568 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f022 0204 	bic.w	r2, r2, #4
 800a54e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a554:	2208      	movs	r2, #8
 800a556:	409a      	lsls	r2, r3
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a560:	f043 0201 	orr.w	r2, r3, #1
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a56c:	2201      	movs	r2, #1
 800a56e:	409a      	lsls	r2, r3
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	4013      	ands	r3, r2
 800a574:	2b00      	cmp	r3, #0
 800a576:	d012      	beq.n	800a59e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00b      	beq.n	800a59e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a58a:	2201      	movs	r2, #1
 800a58c:	409a      	lsls	r2, r3
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a596:	f043 0202 	orr.w	r2, r3, #2
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5a2:	2204      	movs	r2, #4
 800a5a4:	409a      	lsls	r2, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	4013      	ands	r3, r2
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d012      	beq.n	800a5d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0302 	and.w	r3, r3, #2
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00b      	beq.n	800a5d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5c0:	2204      	movs	r2, #4
 800a5c2:	409a      	lsls	r2, r3
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5cc:	f043 0204 	orr.w	r2, r3, #4
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5d8:	2210      	movs	r2, #16
 800a5da:	409a      	lsls	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	4013      	ands	r3, r2
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d043      	beq.n	800a66c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f003 0308 	and.w	r3, r3, #8
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d03c      	beq.n	800a66c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5f6:	2210      	movs	r2, #16
 800a5f8:	409a      	lsls	r2, r3
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d018      	beq.n	800a63e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a616:	2b00      	cmp	r3, #0
 800a618:	d108      	bne.n	800a62c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d024      	beq.n	800a66c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	4798      	blx	r3
 800a62a:	e01f      	b.n	800a66c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a630:	2b00      	cmp	r3, #0
 800a632:	d01b      	beq.n	800a66c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	4798      	blx	r3
 800a63c:	e016      	b.n	800a66c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d107      	bne.n	800a65c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f022 0208 	bic.w	r2, r2, #8
 800a65a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a660:	2b00      	cmp	r3, #0
 800a662:	d003      	beq.n	800a66c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a670:	2220      	movs	r2, #32
 800a672:	409a      	lsls	r2, r3
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4013      	ands	r3, r2
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f000 808e 	beq.w	800a79a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 0310 	and.w	r3, r3, #16
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 8086 	beq.w	800a79a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a692:	2220      	movs	r2, #32
 800a694:	409a      	lsls	r2, r3
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	2b05      	cmp	r3, #5
 800a6a4:	d136      	bne.n	800a714 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f022 0216 	bic.w	r2, r2, #22
 800a6b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	695a      	ldr	r2, [r3, #20]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a6c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d103      	bne.n	800a6d6 <HAL_DMA_IRQHandler+0x1da>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d007      	beq.n	800a6e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681a      	ldr	r2, [r3, #0]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f022 0208 	bic.w	r2, r2, #8
 800a6e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6ea:	223f      	movs	r2, #63	; 0x3f
 800a6ec:	409a      	lsls	r2, r3
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a706:	2b00      	cmp	r3, #0
 800a708:	d07d      	beq.n	800a806 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	4798      	blx	r3
        }
        return;
 800a712:	e078      	b.n	800a806 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d01c      	beq.n	800a75c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d108      	bne.n	800a742 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a734:	2b00      	cmp	r3, #0
 800a736:	d030      	beq.n	800a79a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	4798      	blx	r3
 800a740:	e02b      	b.n	800a79a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a746:	2b00      	cmp	r3, #0
 800a748:	d027      	beq.n	800a79a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	4798      	blx	r3
 800a752:	e022      	b.n	800a79a <HAL_DMA_IRQHandler+0x29e>
 800a754:	20000000 	.word	0x20000000
 800a758:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10f      	bne.n	800a78a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f022 0210 	bic.w	r2, r2, #16
 800a778:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2201      	movs	r2, #1
 800a786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d003      	beq.n	800a79a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d032      	beq.n	800a808 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7a6:	f003 0301 	and.w	r3, r3, #1
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d022      	beq.n	800a7f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2205      	movs	r2, #5
 800a7b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f022 0201 	bic.w	r2, r2, #1
 800a7c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	3301      	adds	r3, #1
 800a7ca:	60bb      	str	r3, [r7, #8]
 800a7cc:	697a      	ldr	r2, [r7, #20]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d307      	bcc.n	800a7e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f003 0301 	and.w	r3, r3, #1
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d1f2      	bne.n	800a7c6 <HAL_DMA_IRQHandler+0x2ca>
 800a7e0:	e000      	b.n	800a7e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a7e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d005      	beq.n	800a808 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	4798      	blx	r3
 800a804:	e000      	b.n	800a808 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a806:	bf00      	nop
    }
  }
}
 800a808:	3718      	adds	r7, #24
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop

0800a810 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a844:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	2b40      	cmp	r3, #64	; 0x40
 800a854:	d108      	bne.n	800a868 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68ba      	ldr	r2, [r7, #8]
 800a864:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a866:	e007      	b.n	800a878 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68ba      	ldr	r2, [r7, #8]
 800a86e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	60da      	str	r2, [r3, #12]
}
 800a878:	bf00      	nop
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	b2db      	uxtb	r3, r3
 800a892:	3b10      	subs	r3, #16
 800a894:	4a14      	ldr	r2, [pc, #80]	; (800a8e8 <DMA_CalcBaseAndBitshift+0x64>)
 800a896:	fba2 2303 	umull	r2, r3, r2, r3
 800a89a:	091b      	lsrs	r3, r3, #4
 800a89c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a89e:	4a13      	ldr	r2, [pc, #76]	; (800a8ec <DMA_CalcBaseAndBitshift+0x68>)
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d909      	bls.n	800a8c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a8ba:	f023 0303 	bic.w	r3, r3, #3
 800a8be:	1d1a      	adds	r2, r3, #4
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	659a      	str	r2, [r3, #88]	; 0x58
 800a8c4:	e007      	b.n	800a8d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a8ce:	f023 0303 	bic.w	r3, r3, #3
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3714      	adds	r7, #20
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	aaaaaaab 	.word	0xaaaaaaab
 800a8ec:	08019d24 	.word	0x08019d24

0800a8f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b085      	sub	sp, #20
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a900:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d11f      	bne.n	800a94a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	2b03      	cmp	r3, #3
 800a90e:	d855      	bhi.n	800a9bc <DMA_CheckFifoParam+0xcc>
 800a910:	a201      	add	r2, pc, #4	; (adr r2, 800a918 <DMA_CheckFifoParam+0x28>)
 800a912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a916:	bf00      	nop
 800a918:	0800a929 	.word	0x0800a929
 800a91c:	0800a93b 	.word	0x0800a93b
 800a920:	0800a929 	.word	0x0800a929
 800a924:	0800a9bd 	.word	0x0800a9bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a92c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a930:	2b00      	cmp	r3, #0
 800a932:	d045      	beq.n	800a9c0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a938:	e042      	b.n	800a9c0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a93e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a942:	d13f      	bne.n	800a9c4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a948:	e03c      	b.n	800a9c4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a952:	d121      	bne.n	800a998 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	2b03      	cmp	r3, #3
 800a958:	d836      	bhi.n	800a9c8 <DMA_CheckFifoParam+0xd8>
 800a95a:	a201      	add	r2, pc, #4	; (adr r2, 800a960 <DMA_CheckFifoParam+0x70>)
 800a95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a960:	0800a971 	.word	0x0800a971
 800a964:	0800a977 	.word	0x0800a977
 800a968:	0800a971 	.word	0x0800a971
 800a96c:	0800a989 	.word	0x0800a989
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	73fb      	strb	r3, [r7, #15]
      break;
 800a974:	e02f      	b.n	800a9d6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d024      	beq.n	800a9cc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a986:	e021      	b.n	800a9cc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a98c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a990:	d11e      	bne.n	800a9d0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a996:	e01b      	b.n	800a9d0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	2b02      	cmp	r3, #2
 800a99c:	d902      	bls.n	800a9a4 <DMA_CheckFifoParam+0xb4>
 800a99e:	2b03      	cmp	r3, #3
 800a9a0:	d003      	beq.n	800a9aa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a9a2:	e018      	b.n	800a9d6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a9a8:	e015      	b.n	800a9d6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d00e      	beq.n	800a9d4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	73fb      	strb	r3, [r7, #15]
      break;
 800a9ba:	e00b      	b.n	800a9d4 <DMA_CheckFifoParam+0xe4>
      break;
 800a9bc:	bf00      	nop
 800a9be:	e00a      	b.n	800a9d6 <DMA_CheckFifoParam+0xe6>
      break;
 800a9c0:	bf00      	nop
 800a9c2:	e008      	b.n	800a9d6 <DMA_CheckFifoParam+0xe6>
      break;
 800a9c4:	bf00      	nop
 800a9c6:	e006      	b.n	800a9d6 <DMA_CheckFifoParam+0xe6>
      break;
 800a9c8:	bf00      	nop
 800a9ca:	e004      	b.n	800a9d6 <DMA_CheckFifoParam+0xe6>
      break;
 800a9cc:	bf00      	nop
 800a9ce:	e002      	b.n	800a9d6 <DMA_CheckFifoParam+0xe6>
      break;   
 800a9d0:	bf00      	nop
 800a9d2:	e000      	b.n	800a9d6 <DMA_CheckFifoParam+0xe6>
      break;
 800a9d4:	bf00      	nop
    }
  } 
  
  return status; 
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3714      	adds	r7, #20
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr

0800a9e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b089      	sub	sp, #36	; 0x24
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	61fb      	str	r3, [r7, #28]
 800a9fe:	e177      	b.n	800acf0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800aa00:	2201      	movs	r2, #1
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	fa02 f303 	lsl.w	r3, r2, r3
 800aa08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	697a      	ldr	r2, [r7, #20]
 800aa10:	4013      	ands	r3, r2
 800aa12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800aa14:	693a      	ldr	r2, [r7, #16]
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	f040 8166 	bne.w	800acea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d00b      	beq.n	800aa3e <HAL_GPIO_Init+0x5a>
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	2b02      	cmp	r3, #2
 800aa2c:	d007      	beq.n	800aa3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aa32:	2b11      	cmp	r3, #17
 800aa34:	d003      	beq.n	800aa3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	2b12      	cmp	r3, #18
 800aa3c:	d130      	bne.n	800aaa0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	005b      	lsls	r3, r3, #1
 800aa48:	2203      	movs	r2, #3
 800aa4a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa4e:	43db      	mvns	r3, r3
 800aa50:	69ba      	ldr	r2, [r7, #24]
 800aa52:	4013      	ands	r3, r2
 800aa54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	68da      	ldr	r2, [r3, #12]
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	005b      	lsls	r3, r3, #1
 800aa5e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa62:	69ba      	ldr	r2, [r7, #24]
 800aa64:	4313      	orrs	r3, r2
 800aa66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	69ba      	ldr	r2, [r7, #24]
 800aa6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800aa74:	2201      	movs	r2, #1
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	fa02 f303 	lsl.w	r3, r2, r3
 800aa7c:	43db      	mvns	r3, r3
 800aa7e:	69ba      	ldr	r2, [r7, #24]
 800aa80:	4013      	ands	r3, r2
 800aa82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	685b      	ldr	r3, [r3, #4]
 800aa88:	091b      	lsrs	r3, r3, #4
 800aa8a:	f003 0201 	and.w	r2, r3, #1
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	fa02 f303 	lsl.w	r3, r2, r3
 800aa94:	69ba      	ldr	r2, [r7, #24]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	69ba      	ldr	r2, [r7, #24]
 800aa9e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	005b      	lsls	r3, r3, #1
 800aaaa:	2203      	movs	r2, #3
 800aaac:	fa02 f303 	lsl.w	r3, r2, r3
 800aab0:	43db      	mvns	r3, r3
 800aab2:	69ba      	ldr	r2, [r7, #24]
 800aab4:	4013      	ands	r3, r2
 800aab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	689a      	ldr	r2, [r3, #8]
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	005b      	lsls	r3, r3, #1
 800aac0:	fa02 f303 	lsl.w	r3, r2, r3
 800aac4:	69ba      	ldr	r2, [r7, #24]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	69ba      	ldr	r2, [r7, #24]
 800aace:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	d003      	beq.n	800aae0 <HAL_GPIO_Init+0xfc>
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	2b12      	cmp	r3, #18
 800aade:	d123      	bne.n	800ab28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800aae0:	69fb      	ldr	r3, [r7, #28]
 800aae2:	08da      	lsrs	r2, r3, #3
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	3208      	adds	r2, #8
 800aae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	f003 0307 	and.w	r3, r3, #7
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	220f      	movs	r2, #15
 800aaf8:	fa02 f303 	lsl.w	r3, r2, r3
 800aafc:	43db      	mvns	r3, r3
 800aafe:	69ba      	ldr	r2, [r7, #24]
 800ab00:	4013      	ands	r3, r2
 800ab02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	691a      	ldr	r2, [r3, #16]
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	f003 0307 	and.w	r3, r3, #7
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	fa02 f303 	lsl.w	r3, r2, r3
 800ab14:	69ba      	ldr	r2, [r7, #24]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	08da      	lsrs	r2, r3, #3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	3208      	adds	r2, #8
 800ab22:	69b9      	ldr	r1, [r7, #24]
 800ab24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	005b      	lsls	r3, r3, #1
 800ab32:	2203      	movs	r2, #3
 800ab34:	fa02 f303 	lsl.w	r3, r2, r3
 800ab38:	43db      	mvns	r3, r3
 800ab3a:	69ba      	ldr	r2, [r7, #24]
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	f003 0203 	and.w	r2, r3, #3
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	005b      	lsls	r3, r3, #1
 800ab4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab50:	69ba      	ldr	r2, [r7, #24]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	69ba      	ldr	r2, [r7, #24]
 800ab5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f000 80c0 	beq.w	800acea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	60fb      	str	r3, [r7, #12]
 800ab6e:	4b65      	ldr	r3, [pc, #404]	; (800ad04 <HAL_GPIO_Init+0x320>)
 800ab70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab72:	4a64      	ldr	r2, [pc, #400]	; (800ad04 <HAL_GPIO_Init+0x320>)
 800ab74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab78:	6453      	str	r3, [r2, #68]	; 0x44
 800ab7a:	4b62      	ldr	r3, [pc, #392]	; (800ad04 <HAL_GPIO_Init+0x320>)
 800ab7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab82:	60fb      	str	r3, [r7, #12]
 800ab84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ab86:	4a60      	ldr	r2, [pc, #384]	; (800ad08 <HAL_GPIO_Init+0x324>)
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	089b      	lsrs	r3, r3, #2
 800ab8c:	3302      	adds	r3, #2
 800ab8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	f003 0303 	and.w	r3, r3, #3
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	220f      	movs	r2, #15
 800ab9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aba2:	43db      	mvns	r3, r3
 800aba4:	69ba      	ldr	r2, [r7, #24]
 800aba6:	4013      	ands	r3, r2
 800aba8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a57      	ldr	r2, [pc, #348]	; (800ad0c <HAL_GPIO_Init+0x328>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d037      	beq.n	800ac22 <HAL_GPIO_Init+0x23e>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a56      	ldr	r2, [pc, #344]	; (800ad10 <HAL_GPIO_Init+0x32c>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d031      	beq.n	800ac1e <HAL_GPIO_Init+0x23a>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a55      	ldr	r2, [pc, #340]	; (800ad14 <HAL_GPIO_Init+0x330>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d02b      	beq.n	800ac1a <HAL_GPIO_Init+0x236>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a54      	ldr	r2, [pc, #336]	; (800ad18 <HAL_GPIO_Init+0x334>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d025      	beq.n	800ac16 <HAL_GPIO_Init+0x232>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a53      	ldr	r2, [pc, #332]	; (800ad1c <HAL_GPIO_Init+0x338>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d01f      	beq.n	800ac12 <HAL_GPIO_Init+0x22e>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a52      	ldr	r2, [pc, #328]	; (800ad20 <HAL_GPIO_Init+0x33c>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d019      	beq.n	800ac0e <HAL_GPIO_Init+0x22a>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a51      	ldr	r2, [pc, #324]	; (800ad24 <HAL_GPIO_Init+0x340>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d013      	beq.n	800ac0a <HAL_GPIO_Init+0x226>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a50      	ldr	r2, [pc, #320]	; (800ad28 <HAL_GPIO_Init+0x344>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d00d      	beq.n	800ac06 <HAL_GPIO_Init+0x222>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a4f      	ldr	r2, [pc, #316]	; (800ad2c <HAL_GPIO_Init+0x348>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d007      	beq.n	800ac02 <HAL_GPIO_Init+0x21e>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a4e      	ldr	r2, [pc, #312]	; (800ad30 <HAL_GPIO_Init+0x34c>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d101      	bne.n	800abfe <HAL_GPIO_Init+0x21a>
 800abfa:	2309      	movs	r3, #9
 800abfc:	e012      	b.n	800ac24 <HAL_GPIO_Init+0x240>
 800abfe:	230a      	movs	r3, #10
 800ac00:	e010      	b.n	800ac24 <HAL_GPIO_Init+0x240>
 800ac02:	2308      	movs	r3, #8
 800ac04:	e00e      	b.n	800ac24 <HAL_GPIO_Init+0x240>
 800ac06:	2307      	movs	r3, #7
 800ac08:	e00c      	b.n	800ac24 <HAL_GPIO_Init+0x240>
 800ac0a:	2306      	movs	r3, #6
 800ac0c:	e00a      	b.n	800ac24 <HAL_GPIO_Init+0x240>
 800ac0e:	2305      	movs	r3, #5
 800ac10:	e008      	b.n	800ac24 <HAL_GPIO_Init+0x240>
 800ac12:	2304      	movs	r3, #4
 800ac14:	e006      	b.n	800ac24 <HAL_GPIO_Init+0x240>
 800ac16:	2303      	movs	r3, #3
 800ac18:	e004      	b.n	800ac24 <HAL_GPIO_Init+0x240>
 800ac1a:	2302      	movs	r3, #2
 800ac1c:	e002      	b.n	800ac24 <HAL_GPIO_Init+0x240>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e000      	b.n	800ac24 <HAL_GPIO_Init+0x240>
 800ac22:	2300      	movs	r3, #0
 800ac24:	69fa      	ldr	r2, [r7, #28]
 800ac26:	f002 0203 	and.w	r2, r2, #3
 800ac2a:	0092      	lsls	r2, r2, #2
 800ac2c:	4093      	lsls	r3, r2
 800ac2e:	69ba      	ldr	r2, [r7, #24]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ac34:	4934      	ldr	r1, [pc, #208]	; (800ad08 <HAL_GPIO_Init+0x324>)
 800ac36:	69fb      	ldr	r3, [r7, #28]
 800ac38:	089b      	lsrs	r3, r3, #2
 800ac3a:	3302      	adds	r3, #2
 800ac3c:	69ba      	ldr	r2, [r7, #24]
 800ac3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ac42:	4b3c      	ldr	r3, [pc, #240]	; (800ad34 <HAL_GPIO_Init+0x350>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	43db      	mvns	r3, r3
 800ac4c:	69ba      	ldr	r2, [r7, #24]
 800ac4e:	4013      	ands	r3, r2
 800ac50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d003      	beq.n	800ac66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800ac5e:	69ba      	ldr	r2, [r7, #24]
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ac66:	4a33      	ldr	r2, [pc, #204]	; (800ad34 <HAL_GPIO_Init+0x350>)
 800ac68:	69bb      	ldr	r3, [r7, #24]
 800ac6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ac6c:	4b31      	ldr	r3, [pc, #196]	; (800ad34 <HAL_GPIO_Init+0x350>)
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	43db      	mvns	r3, r3
 800ac76:	69ba      	ldr	r2, [r7, #24]
 800ac78:	4013      	ands	r3, r2
 800ac7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d003      	beq.n	800ac90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800ac88:	69ba      	ldr	r2, [r7, #24]
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ac90:	4a28      	ldr	r2, [pc, #160]	; (800ad34 <HAL_GPIO_Init+0x350>)
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ac96:	4b27      	ldr	r3, [pc, #156]	; (800ad34 <HAL_GPIO_Init+0x350>)
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	43db      	mvns	r3, r3
 800aca0:	69ba      	ldr	r2, [r7, #24]
 800aca2:	4013      	ands	r3, r2
 800aca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d003      	beq.n	800acba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800acb2:	69ba      	ldr	r2, [r7, #24]
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800acba:	4a1e      	ldr	r2, [pc, #120]	; (800ad34 <HAL_GPIO_Init+0x350>)
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800acc0:	4b1c      	ldr	r3, [pc, #112]	; (800ad34 <HAL_GPIO_Init+0x350>)
 800acc2:	68db      	ldr	r3, [r3, #12]
 800acc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	43db      	mvns	r3, r3
 800acca:	69ba      	ldr	r2, [r7, #24]
 800accc:	4013      	ands	r3, r2
 800acce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d003      	beq.n	800ace4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800acdc:	69ba      	ldr	r2, [r7, #24]
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ace4:	4a13      	ldr	r2, [pc, #76]	; (800ad34 <HAL_GPIO_Init+0x350>)
 800ace6:	69bb      	ldr	r3, [r7, #24]
 800ace8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	3301      	adds	r3, #1
 800acee:	61fb      	str	r3, [r7, #28]
 800acf0:	69fb      	ldr	r3, [r7, #28]
 800acf2:	2b0f      	cmp	r3, #15
 800acf4:	f67f ae84 	bls.w	800aa00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800acf8:	bf00      	nop
 800acfa:	3724      	adds	r7, #36	; 0x24
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr
 800ad04:	40023800 	.word	0x40023800
 800ad08:	40013800 	.word	0x40013800
 800ad0c:	40020000 	.word	0x40020000
 800ad10:	40020400 	.word	0x40020400
 800ad14:	40020800 	.word	0x40020800
 800ad18:	40020c00 	.word	0x40020c00
 800ad1c:	40021000 	.word	0x40021000
 800ad20:	40021400 	.word	0x40021400
 800ad24:	40021800 	.word	0x40021800
 800ad28:	40021c00 	.word	0x40021c00
 800ad2c:	40022000 	.word	0x40022000
 800ad30:	40022400 	.word	0x40022400
 800ad34:	40013c00 	.word	0x40013c00

0800ad38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b085      	sub	sp, #20
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	460b      	mov	r3, r1
 800ad42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	691a      	ldr	r2, [r3, #16]
 800ad48:	887b      	ldrh	r3, [r7, #2]
 800ad4a:	4013      	ands	r3, r2
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d002      	beq.n	800ad56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ad50:	2301      	movs	r3, #1
 800ad52:	73fb      	strb	r3, [r7, #15]
 800ad54:	e001      	b.n	800ad5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ad56:	2300      	movs	r3, #0
 800ad58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ad5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3714      	adds	r7, #20
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	460b      	mov	r3, r1
 800ad72:	807b      	strh	r3, [r7, #2]
 800ad74:	4613      	mov	r3, r2
 800ad76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ad78:	787b      	ldrb	r3, [r7, #1]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d003      	beq.n	800ad86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ad7e:	887a      	ldrh	r2, [r7, #2]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ad84:	e003      	b.n	800ad8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ad86:	887b      	ldrh	r3, [r7, #2]
 800ad88:	041a      	lsls	r2, r3, #16
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	619a      	str	r2, [r3, #24]
}
 800ad8e:	bf00      	nop
 800ad90:	370c      	adds	r7, #12
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
	...

0800ad9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d101      	bne.n	800adae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	e11f      	b.n	800afee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d106      	bne.n	800adc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7fc f83c 	bl	8006e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2224      	movs	r2, #36	; 0x24
 800adcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f022 0201 	bic.w	r2, r2, #1
 800adde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800adee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800adfe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ae00:	f001 f96e 	bl	800c0e0 <HAL_RCC_GetPCLK1Freq>
 800ae04:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	4a7b      	ldr	r2, [pc, #492]	; (800aff8 <HAL_I2C_Init+0x25c>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d807      	bhi.n	800ae20 <HAL_I2C_Init+0x84>
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	4a7a      	ldr	r2, [pc, #488]	; (800affc <HAL_I2C_Init+0x260>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	bf94      	ite	ls
 800ae18:	2301      	movls	r3, #1
 800ae1a:	2300      	movhi	r3, #0
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	e006      	b.n	800ae2e <HAL_I2C_Init+0x92>
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	4a77      	ldr	r2, [pc, #476]	; (800b000 <HAL_I2C_Init+0x264>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	bf94      	ite	ls
 800ae28:	2301      	movls	r3, #1
 800ae2a:	2300      	movhi	r3, #0
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	e0db      	b.n	800afee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	4a72      	ldr	r2, [pc, #456]	; (800b004 <HAL_I2C_Init+0x268>)
 800ae3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae3e:	0c9b      	lsrs	r3, r3, #18
 800ae40:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	430a      	orrs	r2, r1
 800ae54:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	6a1b      	ldr	r3, [r3, #32]
 800ae5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	4a64      	ldr	r2, [pc, #400]	; (800aff8 <HAL_I2C_Init+0x25c>)
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d802      	bhi.n	800ae70 <HAL_I2C_Init+0xd4>
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	3301      	adds	r3, #1
 800ae6e:	e009      	b.n	800ae84 <HAL_I2C_Init+0xe8>
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ae76:	fb02 f303 	mul.w	r3, r2, r3
 800ae7a:	4a63      	ldr	r2, [pc, #396]	; (800b008 <HAL_I2C_Init+0x26c>)
 800ae7c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae80:	099b      	lsrs	r3, r3, #6
 800ae82:	3301      	adds	r3, #1
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	6812      	ldr	r2, [r2, #0]
 800ae88:	430b      	orrs	r3, r1
 800ae8a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	69db      	ldr	r3, [r3, #28]
 800ae92:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ae96:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	4956      	ldr	r1, [pc, #344]	; (800aff8 <HAL_I2C_Init+0x25c>)
 800aea0:	428b      	cmp	r3, r1
 800aea2:	d80d      	bhi.n	800aec0 <HAL_I2C_Init+0x124>
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	1e59      	subs	r1, r3, #1
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	005b      	lsls	r3, r3, #1
 800aeae:	fbb1 f3f3 	udiv	r3, r1, r3
 800aeb2:	3301      	adds	r3, #1
 800aeb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aeb8:	2b04      	cmp	r3, #4
 800aeba:	bf38      	it	cc
 800aebc:	2304      	movcc	r3, #4
 800aebe:	e04f      	b.n	800af60 <HAL_I2C_Init+0x1c4>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d111      	bne.n	800aeec <HAL_I2C_Init+0x150>
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	1e58      	subs	r0, r3, #1
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6859      	ldr	r1, [r3, #4]
 800aed0:	460b      	mov	r3, r1
 800aed2:	005b      	lsls	r3, r3, #1
 800aed4:	440b      	add	r3, r1
 800aed6:	fbb0 f3f3 	udiv	r3, r0, r3
 800aeda:	3301      	adds	r3, #1
 800aedc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	bf0c      	ite	eq
 800aee4:	2301      	moveq	r3, #1
 800aee6:	2300      	movne	r3, #0
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	e012      	b.n	800af12 <HAL_I2C_Init+0x176>
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	1e58      	subs	r0, r3, #1
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6859      	ldr	r1, [r3, #4]
 800aef4:	460b      	mov	r3, r1
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	440b      	add	r3, r1
 800aefa:	0099      	lsls	r1, r3, #2
 800aefc:	440b      	add	r3, r1
 800aefe:	fbb0 f3f3 	udiv	r3, r0, r3
 800af02:	3301      	adds	r3, #1
 800af04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af08:	2b00      	cmp	r3, #0
 800af0a:	bf0c      	ite	eq
 800af0c:	2301      	moveq	r3, #1
 800af0e:	2300      	movne	r3, #0
 800af10:	b2db      	uxtb	r3, r3
 800af12:	2b00      	cmp	r3, #0
 800af14:	d001      	beq.n	800af1a <HAL_I2C_Init+0x17e>
 800af16:	2301      	movs	r3, #1
 800af18:	e022      	b.n	800af60 <HAL_I2C_Init+0x1c4>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10e      	bne.n	800af40 <HAL_I2C_Init+0x1a4>
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	1e58      	subs	r0, r3, #1
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6859      	ldr	r1, [r3, #4]
 800af2a:	460b      	mov	r3, r1
 800af2c:	005b      	lsls	r3, r3, #1
 800af2e:	440b      	add	r3, r1
 800af30:	fbb0 f3f3 	udiv	r3, r0, r3
 800af34:	3301      	adds	r3, #1
 800af36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af3e:	e00f      	b.n	800af60 <HAL_I2C_Init+0x1c4>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	1e58      	subs	r0, r3, #1
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6859      	ldr	r1, [r3, #4]
 800af48:	460b      	mov	r3, r1
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	440b      	add	r3, r1
 800af4e:	0099      	lsls	r1, r3, #2
 800af50:	440b      	add	r3, r1
 800af52:	fbb0 f3f3 	udiv	r3, r0, r3
 800af56:	3301      	adds	r3, #1
 800af58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af60:	6879      	ldr	r1, [r7, #4]
 800af62:	6809      	ldr	r1, [r1, #0]
 800af64:	4313      	orrs	r3, r2
 800af66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	69da      	ldr	r2, [r3, #28]
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	431a      	orrs	r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	430a      	orrs	r2, r1
 800af82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800af8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	6911      	ldr	r1, [r2, #16]
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	68d2      	ldr	r2, [r2, #12]
 800af9a:	4311      	orrs	r1, r2
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	6812      	ldr	r2, [r2, #0]
 800afa0:	430b      	orrs	r3, r1
 800afa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	695a      	ldr	r2, [r3, #20]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	699b      	ldr	r3, [r3, #24]
 800afb6:	431a      	orrs	r2, r3
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	430a      	orrs	r2, r1
 800afbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f042 0201 	orr.w	r2, r2, #1
 800afce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2220      	movs	r2, #32
 800afda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2200      	movs	r2, #0
 800afe2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3710      	adds	r7, #16
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	000186a0 	.word	0x000186a0
 800affc:	001e847f 	.word	0x001e847f
 800b000:	003d08ff 	.word	0x003d08ff
 800b004:	431bde83 	.word	0x431bde83
 800b008:	10624dd3 	.word	0x10624dd3

0800b00c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b088      	sub	sp, #32
 800b010:	af02      	add	r7, sp, #8
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	607a      	str	r2, [r7, #4]
 800b016:	461a      	mov	r2, r3
 800b018:	460b      	mov	r3, r1
 800b01a:	817b      	strh	r3, [r7, #10]
 800b01c:	4613      	mov	r3, r2
 800b01e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b020:	f7fe fc00 	bl	8009824 <HAL_GetTick>
 800b024:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	2b20      	cmp	r3, #32
 800b030:	f040 80e0 	bne.w	800b1f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	9300      	str	r3, [sp, #0]
 800b038:	2319      	movs	r3, #25
 800b03a:	2201      	movs	r2, #1
 800b03c:	4970      	ldr	r1, [pc, #448]	; (800b200 <HAL_I2C_Master_Transmit+0x1f4>)
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f000 fc58 	bl	800b8f4 <I2C_WaitOnFlagUntilTimeout>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d001      	beq.n	800b04e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b04a:	2302      	movs	r3, #2
 800b04c:	e0d3      	b.n	800b1f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b054:	2b01      	cmp	r3, #1
 800b056:	d101      	bne.n	800b05c <HAL_I2C_Master_Transmit+0x50>
 800b058:	2302      	movs	r3, #2
 800b05a:	e0cc      	b.n	800b1f6 <HAL_I2C_Master_Transmit+0x1ea>
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2201      	movs	r2, #1
 800b060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f003 0301 	and.w	r3, r3, #1
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d007      	beq.n	800b082 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f042 0201 	orr.w	r2, r2, #1
 800b080:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b090:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2221      	movs	r2, #33	; 0x21
 800b096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2210      	movs	r2, #16
 800b09e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	893a      	ldrh	r2, [r7, #8]
 800b0b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	4a50      	ldr	r2, [pc, #320]	; (800b204 <HAL_I2C_Master_Transmit+0x1f8>)
 800b0c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b0c4:	8979      	ldrh	r1, [r7, #10]
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	6a3a      	ldr	r2, [r7, #32]
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	f000 fac2 	bl	800b654 <I2C_MasterRequestWrite>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d001      	beq.n	800b0da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e08d      	b.n	800b1f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0da:	2300      	movs	r3, #0
 800b0dc:	613b      	str	r3, [r7, #16]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	695b      	ldr	r3, [r3, #20]
 800b0e4:	613b      	str	r3, [r7, #16]
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	699b      	ldr	r3, [r3, #24]
 800b0ec:	613b      	str	r3, [r7, #16]
 800b0ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b0f0:	e066      	b.n	800b1c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0f2:	697a      	ldr	r2, [r7, #20]
 800b0f4:	6a39      	ldr	r1, [r7, #32]
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	f000 fcd2 	bl	800baa0 <I2C_WaitOnTXEFlagUntilTimeout>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00d      	beq.n	800b11e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b106:	2b04      	cmp	r3, #4
 800b108:	d107      	bne.n	800b11a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b118:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	e06b      	b.n	800b1f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b122:	781a      	ldrb	r2, [r3, #0]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12e:	1c5a      	adds	r2, r3, #1
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b138:	b29b      	uxth	r3, r3
 800b13a:	3b01      	subs	r3, #1
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b146:	3b01      	subs	r3, #1
 800b148:	b29a      	uxth	r2, r3
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	695b      	ldr	r3, [r3, #20]
 800b154:	f003 0304 	and.w	r3, r3, #4
 800b158:	2b04      	cmp	r3, #4
 800b15a:	d11b      	bne.n	800b194 <HAL_I2C_Master_Transmit+0x188>
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b160:	2b00      	cmp	r3, #0
 800b162:	d017      	beq.n	800b194 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b168:	781a      	ldrb	r2, [r3, #0]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b174:	1c5a      	adds	r2, r3, #1
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b17e:	b29b      	uxth	r3, r3
 800b180:	3b01      	subs	r3, #1
 800b182:	b29a      	uxth	r2, r3
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b18c:	3b01      	subs	r3, #1
 800b18e:	b29a      	uxth	r2, r3
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b194:	697a      	ldr	r2, [r7, #20]
 800b196:	6a39      	ldr	r1, [r7, #32]
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f000 fcc2 	bl	800bb22 <I2C_WaitOnBTFFlagUntilTimeout>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d00d      	beq.n	800b1c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a8:	2b04      	cmp	r3, #4
 800b1aa:	d107      	bne.n	800b1bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	e01a      	b.n	800b1f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d194      	bne.n	800b0f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2220      	movs	r2, #32
 800b1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	e000      	b.n	800b1f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b1f4:	2302      	movs	r3, #2
  }
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3718      	adds	r7, #24
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop
 800b200:	00100002 	.word	0x00100002
 800b204:	ffff0000 	.word	0xffff0000

0800b208 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b08c      	sub	sp, #48	; 0x30
 800b20c:	af02      	add	r7, sp, #8
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	607a      	str	r2, [r7, #4]
 800b212:	461a      	mov	r2, r3
 800b214:	460b      	mov	r3, r1
 800b216:	817b      	strh	r3, [r7, #10]
 800b218:	4613      	mov	r3, r2
 800b21a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b21c:	f7fe fb02 	bl	8009824 <HAL_GetTick>
 800b220:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	2b20      	cmp	r3, #32
 800b22c:	f040 820b 	bne.w	800b646 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	2319      	movs	r3, #25
 800b236:	2201      	movs	r2, #1
 800b238:	497c      	ldr	r1, [pc, #496]	; (800b42c <HAL_I2C_Master_Receive+0x224>)
 800b23a:	68f8      	ldr	r0, [r7, #12]
 800b23c:	f000 fb5a 	bl	800b8f4 <I2C_WaitOnFlagUntilTimeout>
 800b240:	4603      	mov	r3, r0
 800b242:	2b00      	cmp	r3, #0
 800b244:	d001      	beq.n	800b24a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b246:	2302      	movs	r3, #2
 800b248:	e1fe      	b.n	800b648 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b250:	2b01      	cmp	r3, #1
 800b252:	d101      	bne.n	800b258 <HAL_I2C_Master_Receive+0x50>
 800b254:	2302      	movs	r3, #2
 800b256:	e1f7      	b.n	800b648 <HAL_I2C_Master_Receive+0x440>
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2201      	movs	r2, #1
 800b25c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 0301 	and.w	r3, r3, #1
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d007      	beq.n	800b27e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f042 0201 	orr.w	r2, r2, #1
 800b27c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b28c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2222      	movs	r2, #34	; 0x22
 800b292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2210      	movs	r2, #16
 800b29a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	893a      	ldrh	r2, [r7, #8]
 800b2ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	4a5c      	ldr	r2, [pc, #368]	; (800b430 <HAL_I2C_Master_Receive+0x228>)
 800b2be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b2c0:	8979      	ldrh	r1, [r7, #10]
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f000 fa46 	bl	800b758 <I2C_MasterRequestRead>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d001      	beq.n	800b2d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e1b8      	b.n	800b648 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d113      	bne.n	800b306 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2de:	2300      	movs	r3, #0
 800b2e0:	623b      	str	r3, [r7, #32]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	695b      	ldr	r3, [r3, #20]
 800b2e8:	623b      	str	r3, [r7, #32]
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	699b      	ldr	r3, [r3, #24]
 800b2f0:	623b      	str	r3, [r7, #32]
 800b2f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b302:	601a      	str	r2, [r3, #0]
 800b304:	e18c      	b.n	800b620 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d11b      	bne.n	800b346 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b31c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b31e:	2300      	movs	r3, #0
 800b320:	61fb      	str	r3, [r7, #28]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	695b      	ldr	r3, [r3, #20]
 800b328:	61fb      	str	r3, [r7, #28]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	699b      	ldr	r3, [r3, #24]
 800b330:	61fb      	str	r3, [r7, #28]
 800b332:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b342:	601a      	str	r2, [r3, #0]
 800b344:	e16c      	b.n	800b620 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d11b      	bne.n	800b386 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b35c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b36c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b36e:	2300      	movs	r3, #0
 800b370:	61bb      	str	r3, [r7, #24]
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	695b      	ldr	r3, [r3, #20]
 800b378:	61bb      	str	r3, [r7, #24]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	699b      	ldr	r3, [r3, #24]
 800b380:	61bb      	str	r3, [r7, #24]
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	e14c      	b.n	800b620 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b394:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b396:	2300      	movs	r3, #0
 800b398:	617b      	str	r3, [r7, #20]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	695b      	ldr	r3, [r3, #20]
 800b3a0:	617b      	str	r3, [r7, #20]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	699b      	ldr	r3, [r3, #24]
 800b3a8:	617b      	str	r3, [r7, #20]
 800b3aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b3ac:	e138      	b.n	800b620 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3b2:	2b03      	cmp	r3, #3
 800b3b4:	f200 80f1 	bhi.w	800b59a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d123      	bne.n	800b408 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b3c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f000 fbed 	bl	800bba4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d001      	beq.n	800b3d4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e139      	b.n	800b648 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	691a      	ldr	r2, [r3, #16]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3de:	b2d2      	uxtb	r2, r2
 800b3e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e6:	1c5a      	adds	r2, r3, #1
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	3b01      	subs	r3, #1
 800b400:	b29a      	uxth	r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b406:	e10b      	b.n	800b620 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b40c:	2b02      	cmp	r3, #2
 800b40e:	d14e      	bne.n	800b4ae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b416:	2200      	movs	r2, #0
 800b418:	4906      	ldr	r1, [pc, #24]	; (800b434 <HAL_I2C_Master_Receive+0x22c>)
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f000 fa6a 	bl	800b8f4 <I2C_WaitOnFlagUntilTimeout>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d008      	beq.n	800b438 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e10e      	b.n	800b648 <HAL_I2C_Master_Receive+0x440>
 800b42a:	bf00      	nop
 800b42c:	00100002 	.word	0x00100002
 800b430:	ffff0000 	.word	0xffff0000
 800b434:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b446:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	691a      	ldr	r2, [r3, #16]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b452:	b2d2      	uxtb	r2, r2
 800b454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45a:	1c5a      	adds	r2, r3, #1
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b464:	3b01      	subs	r3, #1
 800b466:	b29a      	uxth	r2, r3
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b470:	b29b      	uxth	r3, r3
 800b472:	3b01      	subs	r3, #1
 800b474:	b29a      	uxth	r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	691a      	ldr	r2, [r3, #16]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b484:	b2d2      	uxtb	r2, r2
 800b486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48c:	1c5a      	adds	r2, r3, #1
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b496:	3b01      	subs	r3, #1
 800b498:	b29a      	uxth	r2, r3
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	3b01      	subs	r3, #1
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b4ac:	e0b8      	b.n	800b620 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	4966      	ldr	r1, [pc, #408]	; (800b650 <HAL_I2C_Master_Receive+0x448>)
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f000 fa1b 	bl	800b8f4 <I2C_WaitOnFlagUntilTimeout>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d001      	beq.n	800b4c8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	e0bf      	b.n	800b648 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b4d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	691a      	ldr	r2, [r3, #16]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e2:	b2d2      	uxtb	r2, r2
 800b4e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ea:	1c5a      	adds	r2, r3, #1
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b500:	b29b      	uxth	r3, r3
 800b502:	3b01      	subs	r3, #1
 800b504:	b29a      	uxth	r2, r3
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50c:	9300      	str	r3, [sp, #0]
 800b50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b510:	2200      	movs	r2, #0
 800b512:	494f      	ldr	r1, [pc, #316]	; (800b650 <HAL_I2C_Master_Receive+0x448>)
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f000 f9ed 	bl	800b8f4 <I2C_WaitOnFlagUntilTimeout>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d001      	beq.n	800b524 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b520:	2301      	movs	r3, #1
 800b522:	e091      	b.n	800b648 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b532:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	691a      	ldr	r2, [r3, #16]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53e:	b2d2      	uxtb	r2, r2
 800b540:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b546:	1c5a      	adds	r2, r3, #1
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b550:	3b01      	subs	r3, #1
 800b552:	b29a      	uxth	r2, r3
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	3b01      	subs	r3, #1
 800b560:	b29a      	uxth	r2, r3
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	691a      	ldr	r2, [r3, #16]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b570:	b2d2      	uxtb	r2, r2
 800b572:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b578:	1c5a      	adds	r2, r3, #1
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b582:	3b01      	subs	r3, #1
 800b584:	b29a      	uxth	r2, r3
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b58e:	b29b      	uxth	r3, r3
 800b590:	3b01      	subs	r3, #1
 800b592:	b29a      	uxth	r2, r3
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b598:	e042      	b.n	800b620 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b59a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b59c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f000 fb00 	bl	800bba4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d001      	beq.n	800b5ae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e04c      	b.n	800b648 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	691a      	ldr	r2, [r3, #16]
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b8:	b2d2      	uxtb	r2, r2
 800b5ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c0:	1c5a      	adds	r2, r3, #1
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	b29a      	uxth	r2, r3
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	3b01      	subs	r3, #1
 800b5da:	b29a      	uxth	r2, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	695b      	ldr	r3, [r3, #20]
 800b5e6:	f003 0304 	and.w	r3, r3, #4
 800b5ea:	2b04      	cmp	r3, #4
 800b5ec:	d118      	bne.n	800b620 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	691a      	ldr	r2, [r3, #16]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f8:	b2d2      	uxtb	r2, r2
 800b5fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b600:	1c5a      	adds	r2, r3, #1
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b60a:	3b01      	subs	r3, #1
 800b60c:	b29a      	uxth	r2, r3
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b616:	b29b      	uxth	r3, r3
 800b618:	3b01      	subs	r3, #1
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b624:	2b00      	cmp	r3, #0
 800b626:	f47f aec2 	bne.w	800b3ae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2220      	movs	r2, #32
 800b62e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2200      	movs	r2, #0
 800b636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	2200      	movs	r2, #0
 800b63e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	e000      	b.n	800b648 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b646:	2302      	movs	r3, #2
  }
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3728      	adds	r7, #40	; 0x28
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	00010004 	.word	0x00010004

0800b654 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b088      	sub	sp, #32
 800b658:	af02      	add	r7, sp, #8
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	607a      	str	r2, [r7, #4]
 800b65e:	603b      	str	r3, [r7, #0]
 800b660:	460b      	mov	r3, r1
 800b662:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b668:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	2b08      	cmp	r3, #8
 800b66e:	d006      	beq.n	800b67e <I2C_MasterRequestWrite+0x2a>
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	2b01      	cmp	r3, #1
 800b674:	d003      	beq.n	800b67e <I2C_MasterRequestWrite+0x2a>
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b67c:	d108      	bne.n	800b690 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b68c:	601a      	str	r2, [r3, #0]
 800b68e:	e00b      	b.n	800b6a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b694:	2b12      	cmp	r3, #18
 800b696:	d107      	bne.n	800b6a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	9300      	str	r3, [sp, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b6b4:	68f8      	ldr	r0, [r7, #12]
 800b6b6:	f000 f91d 	bl	800b8f4 <I2C_WaitOnFlagUntilTimeout>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d00d      	beq.n	800b6dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6ce:	d103      	bne.n	800b6d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b6d8:	2303      	movs	r3, #3
 800b6da:	e035      	b.n	800b748 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b6e4:	d108      	bne.n	800b6f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b6e6:	897b      	ldrh	r3, [r7, #10]
 800b6e8:	b2db      	uxtb	r3, r3
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b6f4:	611a      	str	r2, [r3, #16]
 800b6f6:	e01b      	b.n	800b730 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b6f8:	897b      	ldrh	r3, [r7, #10]
 800b6fa:	11db      	asrs	r3, r3, #7
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	f003 0306 	and.w	r3, r3, #6
 800b702:	b2db      	uxtb	r3, r3
 800b704:	f063 030f 	orn	r3, r3, #15
 800b708:	b2da      	uxtb	r2, r3
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	490e      	ldr	r1, [pc, #56]	; (800b750 <I2C_MasterRequestWrite+0xfc>)
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	f000 f943 	bl	800b9a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d001      	beq.n	800b726 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	e010      	b.n	800b748 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b726:	897b      	ldrh	r3, [r7, #10]
 800b728:	b2da      	uxtb	r2, r3
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	4907      	ldr	r1, [pc, #28]	; (800b754 <I2C_MasterRequestWrite+0x100>)
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f000 f933 	bl	800b9a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b73c:	4603      	mov	r3, r0
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d001      	beq.n	800b746 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b742:	2301      	movs	r3, #1
 800b744:	e000      	b.n	800b748 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b746:	2300      	movs	r3, #0
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3718      	adds	r7, #24
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	00010008 	.word	0x00010008
 800b754:	00010002 	.word	0x00010002

0800b758 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b088      	sub	sp, #32
 800b75c:	af02      	add	r7, sp, #8
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	607a      	str	r2, [r7, #4]
 800b762:	603b      	str	r3, [r7, #0]
 800b764:	460b      	mov	r3, r1
 800b766:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b76c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b77c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	2b08      	cmp	r3, #8
 800b782:	d006      	beq.n	800b792 <I2C_MasterRequestRead+0x3a>
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	2b01      	cmp	r3, #1
 800b788:	d003      	beq.n	800b792 <I2C_MasterRequestRead+0x3a>
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b790:	d108      	bne.n	800b7a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7a0:	601a      	str	r2, [r3, #0]
 800b7a2:	e00b      	b.n	800b7bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a8:	2b11      	cmp	r3, #17
 800b7aa:	d107      	bne.n	800b7bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	9300      	str	r3, [sp, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f000 f893 	bl	800b8f4 <I2C_WaitOnFlagUntilTimeout>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00d      	beq.n	800b7f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7e2:	d103      	bne.n	800b7ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	e079      	b.n	800b8e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	691b      	ldr	r3, [r3, #16]
 800b7f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7f8:	d108      	bne.n	800b80c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b7fa:	897b      	ldrh	r3, [r7, #10]
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	f043 0301 	orr.w	r3, r3, #1
 800b802:	b2da      	uxtb	r2, r3
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	611a      	str	r2, [r3, #16]
 800b80a:	e05f      	b.n	800b8cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b80c:	897b      	ldrh	r3, [r7, #10]
 800b80e:	11db      	asrs	r3, r3, #7
 800b810:	b2db      	uxtb	r3, r3
 800b812:	f003 0306 	and.w	r3, r3, #6
 800b816:	b2db      	uxtb	r3, r3
 800b818:	f063 030f 	orn	r3, r3, #15
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	687a      	ldr	r2, [r7, #4]
 800b828:	4930      	ldr	r1, [pc, #192]	; (800b8ec <I2C_MasterRequestRead+0x194>)
 800b82a:	68f8      	ldr	r0, [r7, #12]
 800b82c:	f000 f8b9 	bl	800b9a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d001      	beq.n	800b83a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	e054      	b.n	800b8e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b83a:	897b      	ldrh	r3, [r7, #10]
 800b83c:	b2da      	uxtb	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	4929      	ldr	r1, [pc, #164]	; (800b8f0 <I2C_MasterRequestRead+0x198>)
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	f000 f8a9 	bl	800b9a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b850:	4603      	mov	r3, r0
 800b852:	2b00      	cmp	r3, #0
 800b854:	d001      	beq.n	800b85a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	e044      	b.n	800b8e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b85a:	2300      	movs	r3, #0
 800b85c:	613b      	str	r3, [r7, #16]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	613b      	str	r3, [r7, #16]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	699b      	ldr	r3, [r3, #24]
 800b86c:	613b      	str	r3, [r7, #16]
 800b86e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	681a      	ldr	r2, [r3, #0]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b87e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	9300      	str	r3, [sp, #0]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2200      	movs	r2, #0
 800b888:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b88c:	68f8      	ldr	r0, [r7, #12]
 800b88e:	f000 f831 	bl	800b8f4 <I2C_WaitOnFlagUntilTimeout>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00d      	beq.n	800b8b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a6:	d103      	bne.n	800b8b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8ae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800b8b0:	2303      	movs	r3, #3
 800b8b2:	e017      	b.n	800b8e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800b8b4:	897b      	ldrh	r3, [r7, #10]
 800b8b6:	11db      	asrs	r3, r3, #7
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	f003 0306 	and.w	r3, r3, #6
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	f063 030e 	orn	r3, r3, #14
 800b8c4:	b2da      	uxtb	r2, r3
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	4907      	ldr	r1, [pc, #28]	; (800b8f0 <I2C_MasterRequestRead+0x198>)
 800b8d2:	68f8      	ldr	r0, [r7, #12]
 800b8d4:	f000 f865 	bl	800b9a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d001      	beq.n	800b8e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e000      	b.n	800b8e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800b8e2:	2300      	movs	r3, #0
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3718      	adds	r7, #24
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	00010008 	.word	0x00010008
 800b8f0:	00010002 	.word	0x00010002

0800b8f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	60b9      	str	r1, [r7, #8]
 800b8fe:	603b      	str	r3, [r7, #0]
 800b900:	4613      	mov	r3, r2
 800b902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b904:	e025      	b.n	800b952 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b90c:	d021      	beq.n	800b952 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b90e:	f7fd ff89 	bl	8009824 <HAL_GetTick>
 800b912:	4602      	mov	r2, r0
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	683a      	ldr	r2, [r7, #0]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d302      	bcc.n	800b924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d116      	bne.n	800b952 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2200      	movs	r2, #0
 800b928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2220      	movs	r2, #32
 800b92e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2200      	movs	r2, #0
 800b936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b93e:	f043 0220 	orr.w	r2, r3, #32
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2200      	movs	r2, #0
 800b94a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	e023      	b.n	800b99a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	0c1b      	lsrs	r3, r3, #16
 800b956:	b2db      	uxtb	r3, r3
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d10d      	bne.n	800b978 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	695b      	ldr	r3, [r3, #20]
 800b962:	43da      	mvns	r2, r3
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	4013      	ands	r3, r2
 800b968:	b29b      	uxth	r3, r3
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	bf0c      	ite	eq
 800b96e:	2301      	moveq	r3, #1
 800b970:	2300      	movne	r3, #0
 800b972:	b2db      	uxtb	r3, r3
 800b974:	461a      	mov	r2, r3
 800b976:	e00c      	b.n	800b992 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	699b      	ldr	r3, [r3, #24]
 800b97e:	43da      	mvns	r2, r3
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	4013      	ands	r3, r2
 800b984:	b29b      	uxth	r3, r3
 800b986:	2b00      	cmp	r3, #0
 800b988:	bf0c      	ite	eq
 800b98a:	2301      	moveq	r3, #1
 800b98c:	2300      	movne	r3, #0
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	461a      	mov	r2, r3
 800b992:	79fb      	ldrb	r3, [r7, #7]
 800b994:	429a      	cmp	r2, r3
 800b996:	d0b6      	beq.n	800b906 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b9a2:	b580      	push	{r7, lr}
 800b9a4:	b084      	sub	sp, #16
 800b9a6:	af00      	add	r7, sp, #0
 800b9a8:	60f8      	str	r0, [r7, #12]
 800b9aa:	60b9      	str	r1, [r7, #8]
 800b9ac:	607a      	str	r2, [r7, #4]
 800b9ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b9b0:	e051      	b.n	800ba56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	695b      	ldr	r3, [r3, #20]
 800b9b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b9bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9c0:	d123      	bne.n	800ba0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b9da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2220      	movs	r2, #32
 800b9e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f6:	f043 0204 	orr.w	r2, r3, #4
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	e046      	b.n	800ba98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba10:	d021      	beq.n	800ba56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba12:	f7fd ff07 	bl	8009824 <HAL_GetTick>
 800ba16:	4602      	mov	r2, r0
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d302      	bcc.n	800ba28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d116      	bne.n	800ba56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2220      	movs	r2, #32
 800ba32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba42:	f043 0220 	orr.w	r2, r3, #32
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	e020      	b.n	800ba98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	0c1b      	lsrs	r3, r3, #16
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d10c      	bne.n	800ba7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	695b      	ldr	r3, [r3, #20]
 800ba66:	43da      	mvns	r2, r3
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	bf14      	ite	ne
 800ba72:	2301      	movne	r3, #1
 800ba74:	2300      	moveq	r3, #0
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	e00b      	b.n	800ba92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	699b      	ldr	r3, [r3, #24]
 800ba80:	43da      	mvns	r2, r3
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	4013      	ands	r3, r2
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	bf14      	ite	ne
 800ba8c:	2301      	movne	r3, #1
 800ba8e:	2300      	moveq	r3, #0
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d18d      	bne.n	800b9b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	60f8      	str	r0, [r7, #12]
 800baa8:	60b9      	str	r1, [r7, #8]
 800baaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800baac:	e02d      	b.n	800bb0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f000 f8ce 	bl	800bc50 <I2C_IsAcknowledgeFailed>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800baba:	2301      	movs	r3, #1
 800babc:	e02d      	b.n	800bb1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac4:	d021      	beq.n	800bb0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bac6:	f7fd fead 	bl	8009824 <HAL_GetTick>
 800baca:	4602      	mov	r2, r0
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	1ad3      	subs	r3, r2, r3
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d302      	bcc.n	800badc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d116      	bne.n	800bb0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2200      	movs	r2, #0
 800bae0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2220      	movs	r2, #32
 800bae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	2200      	movs	r2, #0
 800baee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf6:	f043 0220 	orr.w	r2, r3, #32
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bb06:	2301      	movs	r3, #1
 800bb08:	e007      	b.n	800bb1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	695b      	ldr	r3, [r3, #20]
 800bb10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb14:	2b80      	cmp	r3, #128	; 0x80
 800bb16:	d1ca      	bne.n	800baae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}

0800bb22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb22:	b580      	push	{r7, lr}
 800bb24:	b084      	sub	sp, #16
 800bb26:	af00      	add	r7, sp, #0
 800bb28:	60f8      	str	r0, [r7, #12]
 800bb2a:	60b9      	str	r1, [r7, #8]
 800bb2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bb2e:	e02d      	b.n	800bb8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f000 f88d 	bl	800bc50 <I2C_IsAcknowledgeFailed>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	e02d      	b.n	800bb9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb46:	d021      	beq.n	800bb8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb48:	f7fd fe6c 	bl	8009824 <HAL_GetTick>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	1ad3      	subs	r3, r2, r3
 800bb52:	68ba      	ldr	r2, [r7, #8]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d302      	bcc.n	800bb5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d116      	bne.n	800bb8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2200      	movs	r2, #0
 800bb62:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	2220      	movs	r2, #32
 800bb68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb78:	f043 0220 	orr.w	r2, r3, #32
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2200      	movs	r2, #0
 800bb84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e007      	b.n	800bb9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	695b      	ldr	r3, [r3, #20]
 800bb92:	f003 0304 	and.w	r3, r3, #4
 800bb96:	2b04      	cmp	r3, #4
 800bb98:	d1ca      	bne.n	800bb30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bb9a:	2300      	movs	r3, #0
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bbb0:	e042      	b.n	800bc38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	695b      	ldr	r3, [r3, #20]
 800bbb8:	f003 0310 	and.w	r3, r3, #16
 800bbbc:	2b10      	cmp	r3, #16
 800bbbe:	d119      	bne.n	800bbf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f06f 0210 	mvn.w	r2, #16
 800bbc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2220      	movs	r2, #32
 800bbd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	2200      	movs	r2, #0
 800bbec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e029      	b.n	800bc48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbf4:	f7fd fe16 	bl	8009824 <HAL_GetTick>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	1ad3      	subs	r3, r2, r3
 800bbfe:	68ba      	ldr	r2, [r7, #8]
 800bc00:	429a      	cmp	r2, r3
 800bc02:	d302      	bcc.n	800bc0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d116      	bne.n	800bc38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2220      	movs	r2, #32
 800bc14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc24:	f043 0220 	orr.w	r2, r3, #32
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	e007      	b.n	800bc48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	695b      	ldr	r3, [r3, #20]
 800bc3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc42:	2b40      	cmp	r3, #64	; 0x40
 800bc44:	d1b5      	bne.n	800bbb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bc46:	2300      	movs	r3, #0
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3710      	adds	r7, #16
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b083      	sub	sp, #12
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	695b      	ldr	r3, [r3, #20]
 800bc5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc66:	d11b      	bne.n	800bca0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bc70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2220      	movs	r2, #32
 800bc7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc8c:	f043 0204 	orr.w	r2, r3, #4
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e000      	b.n	800bca2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	370c      	adds	r7, #12
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr
	...

0800bcb0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800bcba:	2300      	movs	r3, #0
 800bcbc:	603b      	str	r3, [r7, #0]
 800bcbe:	4b20      	ldr	r3, [pc, #128]	; (800bd40 <HAL_PWREx_EnableOverDrive+0x90>)
 800bcc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcc2:	4a1f      	ldr	r2, [pc, #124]	; (800bd40 <HAL_PWREx_EnableOverDrive+0x90>)
 800bcc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bcc8:	6413      	str	r3, [r2, #64]	; 0x40
 800bcca:	4b1d      	ldr	r3, [pc, #116]	; (800bd40 <HAL_PWREx_EnableOverDrive+0x90>)
 800bccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bcd2:	603b      	str	r3, [r7, #0]
 800bcd4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800bcd6:	4b1b      	ldr	r3, [pc, #108]	; (800bd44 <HAL_PWREx_EnableOverDrive+0x94>)
 800bcd8:	2201      	movs	r2, #1
 800bcda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bcdc:	f7fd fda2 	bl	8009824 <HAL_GetTick>
 800bce0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bce2:	e009      	b.n	800bcf8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bce4:	f7fd fd9e 	bl	8009824 <HAL_GetTick>
 800bce8:	4602      	mov	r2, r0
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	1ad3      	subs	r3, r2, r3
 800bcee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bcf2:	d901      	bls.n	800bcf8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800bcf4:	2303      	movs	r3, #3
 800bcf6:	e01f      	b.n	800bd38 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bcf8:	4b13      	ldr	r3, [pc, #76]	; (800bd48 <HAL_PWREx_EnableOverDrive+0x98>)
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bd00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd04:	d1ee      	bne.n	800bce4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800bd06:	4b11      	ldr	r3, [pc, #68]	; (800bd4c <HAL_PWREx_EnableOverDrive+0x9c>)
 800bd08:	2201      	movs	r2, #1
 800bd0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bd0c:	f7fd fd8a 	bl	8009824 <HAL_GetTick>
 800bd10:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bd12:	e009      	b.n	800bd28 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bd14:	f7fd fd86 	bl	8009824 <HAL_GetTick>
 800bd18:	4602      	mov	r2, r0
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	1ad3      	subs	r3, r2, r3
 800bd1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bd22:	d901      	bls.n	800bd28 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800bd24:	2303      	movs	r3, #3
 800bd26:	e007      	b.n	800bd38 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bd28:	4b07      	ldr	r3, [pc, #28]	; (800bd48 <HAL_PWREx_EnableOverDrive+0x98>)
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd34:	d1ee      	bne.n	800bd14 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	40023800 	.word	0x40023800
 800bd44:	420e0040 	.word	0x420e0040
 800bd48:	40007000 	.word	0x40007000
 800bd4c:	420e0044 	.word	0x420e0044

0800bd50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d101      	bne.n	800bd64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	e0cc      	b.n	800befe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bd64:	4b68      	ldr	r3, [pc, #416]	; (800bf08 <HAL_RCC_ClockConfig+0x1b8>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f003 030f 	and.w	r3, r3, #15
 800bd6c:	683a      	ldr	r2, [r7, #0]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d90c      	bls.n	800bd8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd72:	4b65      	ldr	r3, [pc, #404]	; (800bf08 <HAL_RCC_ClockConfig+0x1b8>)
 800bd74:	683a      	ldr	r2, [r7, #0]
 800bd76:	b2d2      	uxtb	r2, r2
 800bd78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd7a:	4b63      	ldr	r3, [pc, #396]	; (800bf08 <HAL_RCC_ClockConfig+0x1b8>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f003 030f 	and.w	r3, r3, #15
 800bd82:	683a      	ldr	r2, [r7, #0]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d001      	beq.n	800bd8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bd88:	2301      	movs	r3, #1
 800bd8a:	e0b8      	b.n	800befe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f003 0302 	and.w	r3, r3, #2
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d020      	beq.n	800bdda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 0304 	and.w	r3, r3, #4
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d005      	beq.n	800bdb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bda4:	4b59      	ldr	r3, [pc, #356]	; (800bf0c <HAL_RCC_ClockConfig+0x1bc>)
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	4a58      	ldr	r2, [pc, #352]	; (800bf0c <HAL_RCC_ClockConfig+0x1bc>)
 800bdaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bdae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f003 0308 	and.w	r3, r3, #8
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d005      	beq.n	800bdc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bdbc:	4b53      	ldr	r3, [pc, #332]	; (800bf0c <HAL_RCC_ClockConfig+0x1bc>)
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	4a52      	ldr	r2, [pc, #328]	; (800bf0c <HAL_RCC_ClockConfig+0x1bc>)
 800bdc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bdc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bdc8:	4b50      	ldr	r3, [pc, #320]	; (800bf0c <HAL_RCC_ClockConfig+0x1bc>)
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	689b      	ldr	r3, [r3, #8]
 800bdd4:	494d      	ldr	r1, [pc, #308]	; (800bf0c <HAL_RCC_ClockConfig+0x1bc>)
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f003 0301 	and.w	r3, r3, #1
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d044      	beq.n	800be70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	685b      	ldr	r3, [r3, #4]
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d107      	bne.n	800bdfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bdee:	4b47      	ldr	r3, [pc, #284]	; (800bf0c <HAL_RCC_ClockConfig+0x1bc>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d119      	bne.n	800be2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e07f      	b.n	800befe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	2b02      	cmp	r3, #2
 800be04:	d003      	beq.n	800be0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800be0a:	2b03      	cmp	r3, #3
 800be0c:	d107      	bne.n	800be1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be0e:	4b3f      	ldr	r3, [pc, #252]	; (800bf0c <HAL_RCC_ClockConfig+0x1bc>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be16:	2b00      	cmp	r3, #0
 800be18:	d109      	bne.n	800be2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800be1a:	2301      	movs	r3, #1
 800be1c:	e06f      	b.n	800befe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800be1e:	4b3b      	ldr	r3, [pc, #236]	; (800bf0c <HAL_RCC_ClockConfig+0x1bc>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f003 0302 	and.w	r3, r3, #2
 800be26:	2b00      	cmp	r3, #0
 800be28:	d101      	bne.n	800be2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800be2a:	2301      	movs	r3, #1
 800be2c:	e067      	b.n	800befe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800be2e:	4b37      	ldr	r3, [pc, #220]	; (800bf0c <HAL_RCC_ClockConfig+0x1bc>)
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	f023 0203 	bic.w	r2, r3, #3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	4934      	ldr	r1, [pc, #208]	; (800bf0c <HAL_RCC_ClockConfig+0x1bc>)
 800be3c:	4313      	orrs	r3, r2
 800be3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800be40:	f7fd fcf0 	bl	8009824 <HAL_GetTick>
 800be44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be46:	e00a      	b.n	800be5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800be48:	f7fd fcec 	bl	8009824 <HAL_GetTick>
 800be4c:	4602      	mov	r2, r0
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	f241 3288 	movw	r2, #5000	; 0x1388
 800be56:	4293      	cmp	r3, r2
 800be58:	d901      	bls.n	800be5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800be5a:	2303      	movs	r3, #3
 800be5c:	e04f      	b.n	800befe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800be5e:	4b2b      	ldr	r3, [pc, #172]	; (800bf0c <HAL_RCC_ClockConfig+0x1bc>)
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	f003 020c 	and.w	r2, r3, #12
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d1eb      	bne.n	800be48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800be70:	4b25      	ldr	r3, [pc, #148]	; (800bf08 <HAL_RCC_ClockConfig+0x1b8>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f003 030f 	and.w	r3, r3, #15
 800be78:	683a      	ldr	r2, [r7, #0]
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d20c      	bcs.n	800be98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be7e:	4b22      	ldr	r3, [pc, #136]	; (800bf08 <HAL_RCC_ClockConfig+0x1b8>)
 800be80:	683a      	ldr	r2, [r7, #0]
 800be82:	b2d2      	uxtb	r2, r2
 800be84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800be86:	4b20      	ldr	r3, [pc, #128]	; (800bf08 <HAL_RCC_ClockConfig+0x1b8>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f003 030f 	and.w	r3, r3, #15
 800be8e:	683a      	ldr	r2, [r7, #0]
 800be90:	429a      	cmp	r2, r3
 800be92:	d001      	beq.n	800be98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800be94:	2301      	movs	r3, #1
 800be96:	e032      	b.n	800befe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 0304 	and.w	r3, r3, #4
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d008      	beq.n	800beb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bea4:	4b19      	ldr	r3, [pc, #100]	; (800bf0c <HAL_RCC_ClockConfig+0x1bc>)
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	4916      	ldr	r1, [pc, #88]	; (800bf0c <HAL_RCC_ClockConfig+0x1bc>)
 800beb2:	4313      	orrs	r3, r2
 800beb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f003 0308 	and.w	r3, r3, #8
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d009      	beq.n	800bed6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bec2:	4b12      	ldr	r3, [pc, #72]	; (800bf0c <HAL_RCC_ClockConfig+0x1bc>)
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	00db      	lsls	r3, r3, #3
 800bed0:	490e      	ldr	r1, [pc, #56]	; (800bf0c <HAL_RCC_ClockConfig+0x1bc>)
 800bed2:	4313      	orrs	r3, r2
 800bed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bed6:	f000 f821 	bl	800bf1c <HAL_RCC_GetSysClockFreq>
 800beda:	4601      	mov	r1, r0
 800bedc:	4b0b      	ldr	r3, [pc, #44]	; (800bf0c <HAL_RCC_ClockConfig+0x1bc>)
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	091b      	lsrs	r3, r3, #4
 800bee2:	f003 030f 	and.w	r3, r3, #15
 800bee6:	4a0a      	ldr	r2, [pc, #40]	; (800bf10 <HAL_RCC_ClockConfig+0x1c0>)
 800bee8:	5cd3      	ldrb	r3, [r2, r3]
 800beea:	fa21 f303 	lsr.w	r3, r1, r3
 800beee:	4a09      	ldr	r2, [pc, #36]	; (800bf14 <HAL_RCC_ClockConfig+0x1c4>)
 800bef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800bef2:	4b09      	ldr	r3, [pc, #36]	; (800bf18 <HAL_RCC_ClockConfig+0x1c8>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fd fc50 	bl	800979c <HAL_InitTick>

  return HAL_OK;
 800befc:	2300      	movs	r3, #0
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	40023c00 	.word	0x40023c00
 800bf0c:	40023800 	.word	0x40023800
 800bf10:	08019d0c 	.word	0x08019d0c
 800bf14:	20000000 	.word	0x20000000
 800bf18:	20000004 	.word	0x20000004

0800bf1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bf1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf1e:	b085      	sub	sp, #20
 800bf20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800bf22:	2300      	movs	r3, #0
 800bf24:	607b      	str	r3, [r7, #4]
 800bf26:	2300      	movs	r3, #0
 800bf28:	60fb      	str	r3, [r7, #12]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bf32:	4b63      	ldr	r3, [pc, #396]	; (800c0c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	f003 030c 	and.w	r3, r3, #12
 800bf3a:	2b04      	cmp	r3, #4
 800bf3c:	d007      	beq.n	800bf4e <HAL_RCC_GetSysClockFreq+0x32>
 800bf3e:	2b08      	cmp	r3, #8
 800bf40:	d008      	beq.n	800bf54 <HAL_RCC_GetSysClockFreq+0x38>
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f040 80b4 	bne.w	800c0b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bf48:	4b5e      	ldr	r3, [pc, #376]	; (800c0c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bf4a:	60bb      	str	r3, [r7, #8]
       break;
 800bf4c:	e0b3      	b.n	800c0b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bf4e:	4b5d      	ldr	r3, [pc, #372]	; (800c0c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bf50:	60bb      	str	r3, [r7, #8]
      break;
 800bf52:	e0b0      	b.n	800c0b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bf54:	4b5a      	ldr	r3, [pc, #360]	; (800c0c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bf5e:	4b58      	ldr	r3, [pc, #352]	; (800c0c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d04a      	beq.n	800c000 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bf6a:	4b55      	ldr	r3, [pc, #340]	; (800c0c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bf6c:	685b      	ldr	r3, [r3, #4]
 800bf6e:	099b      	lsrs	r3, r3, #6
 800bf70:	f04f 0400 	mov.w	r4, #0
 800bf74:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bf78:	f04f 0200 	mov.w	r2, #0
 800bf7c:	ea03 0501 	and.w	r5, r3, r1
 800bf80:	ea04 0602 	and.w	r6, r4, r2
 800bf84:	4629      	mov	r1, r5
 800bf86:	4632      	mov	r2, r6
 800bf88:	f04f 0300 	mov.w	r3, #0
 800bf8c:	f04f 0400 	mov.w	r4, #0
 800bf90:	0154      	lsls	r4, r2, #5
 800bf92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bf96:	014b      	lsls	r3, r1, #5
 800bf98:	4619      	mov	r1, r3
 800bf9a:	4622      	mov	r2, r4
 800bf9c:	1b49      	subs	r1, r1, r5
 800bf9e:	eb62 0206 	sbc.w	r2, r2, r6
 800bfa2:	f04f 0300 	mov.w	r3, #0
 800bfa6:	f04f 0400 	mov.w	r4, #0
 800bfaa:	0194      	lsls	r4, r2, #6
 800bfac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bfb0:	018b      	lsls	r3, r1, #6
 800bfb2:	1a5b      	subs	r3, r3, r1
 800bfb4:	eb64 0402 	sbc.w	r4, r4, r2
 800bfb8:	f04f 0100 	mov.w	r1, #0
 800bfbc:	f04f 0200 	mov.w	r2, #0
 800bfc0:	00e2      	lsls	r2, r4, #3
 800bfc2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bfc6:	00d9      	lsls	r1, r3, #3
 800bfc8:	460b      	mov	r3, r1
 800bfca:	4614      	mov	r4, r2
 800bfcc:	195b      	adds	r3, r3, r5
 800bfce:	eb44 0406 	adc.w	r4, r4, r6
 800bfd2:	f04f 0100 	mov.w	r1, #0
 800bfd6:	f04f 0200 	mov.w	r2, #0
 800bfda:	02a2      	lsls	r2, r4, #10
 800bfdc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bfe0:	0299      	lsls	r1, r3, #10
 800bfe2:	460b      	mov	r3, r1
 800bfe4:	4614      	mov	r4, r2
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	4621      	mov	r1, r4
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f04f 0400 	mov.w	r4, #0
 800bff0:	461a      	mov	r2, r3
 800bff2:	4623      	mov	r3, r4
 800bff4:	f7f4 fe60 	bl	8000cb8 <__aeabi_uldivmod>
 800bff8:	4603      	mov	r3, r0
 800bffa:	460c      	mov	r4, r1
 800bffc:	60fb      	str	r3, [r7, #12]
 800bffe:	e049      	b.n	800c094 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c000:	4b2f      	ldr	r3, [pc, #188]	; (800c0c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	099b      	lsrs	r3, r3, #6
 800c006:	f04f 0400 	mov.w	r4, #0
 800c00a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c00e:	f04f 0200 	mov.w	r2, #0
 800c012:	ea03 0501 	and.w	r5, r3, r1
 800c016:	ea04 0602 	and.w	r6, r4, r2
 800c01a:	4629      	mov	r1, r5
 800c01c:	4632      	mov	r2, r6
 800c01e:	f04f 0300 	mov.w	r3, #0
 800c022:	f04f 0400 	mov.w	r4, #0
 800c026:	0154      	lsls	r4, r2, #5
 800c028:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c02c:	014b      	lsls	r3, r1, #5
 800c02e:	4619      	mov	r1, r3
 800c030:	4622      	mov	r2, r4
 800c032:	1b49      	subs	r1, r1, r5
 800c034:	eb62 0206 	sbc.w	r2, r2, r6
 800c038:	f04f 0300 	mov.w	r3, #0
 800c03c:	f04f 0400 	mov.w	r4, #0
 800c040:	0194      	lsls	r4, r2, #6
 800c042:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c046:	018b      	lsls	r3, r1, #6
 800c048:	1a5b      	subs	r3, r3, r1
 800c04a:	eb64 0402 	sbc.w	r4, r4, r2
 800c04e:	f04f 0100 	mov.w	r1, #0
 800c052:	f04f 0200 	mov.w	r2, #0
 800c056:	00e2      	lsls	r2, r4, #3
 800c058:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c05c:	00d9      	lsls	r1, r3, #3
 800c05e:	460b      	mov	r3, r1
 800c060:	4614      	mov	r4, r2
 800c062:	195b      	adds	r3, r3, r5
 800c064:	eb44 0406 	adc.w	r4, r4, r6
 800c068:	f04f 0100 	mov.w	r1, #0
 800c06c:	f04f 0200 	mov.w	r2, #0
 800c070:	02a2      	lsls	r2, r4, #10
 800c072:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c076:	0299      	lsls	r1, r3, #10
 800c078:	460b      	mov	r3, r1
 800c07a:	4614      	mov	r4, r2
 800c07c:	4618      	mov	r0, r3
 800c07e:	4621      	mov	r1, r4
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f04f 0400 	mov.w	r4, #0
 800c086:	461a      	mov	r2, r3
 800c088:	4623      	mov	r3, r4
 800c08a:	f7f4 fe15 	bl	8000cb8 <__aeabi_uldivmod>
 800c08e:	4603      	mov	r3, r0
 800c090:	460c      	mov	r4, r1
 800c092:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c094:	4b0a      	ldr	r3, [pc, #40]	; (800c0c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	0c1b      	lsrs	r3, r3, #16
 800c09a:	f003 0303 	and.w	r3, r3, #3
 800c09e:	3301      	adds	r3, #1
 800c0a0:	005b      	lsls	r3, r3, #1
 800c0a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c0a4:	68fa      	ldr	r2, [r7, #12]
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0ac:	60bb      	str	r3, [r7, #8]
      break;
 800c0ae:	e002      	b.n	800c0b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c0b0:	4b04      	ldr	r3, [pc, #16]	; (800c0c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c0b2:	60bb      	str	r3, [r7, #8]
      break;
 800c0b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c0b6:	68bb      	ldr	r3, [r7, #8]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3714      	adds	r7, #20
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0c0:	40023800 	.word	0x40023800
 800c0c4:	00f42400 	.word	0x00f42400

0800c0c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c0cc:	4b03      	ldr	r3, [pc, #12]	; (800c0dc <HAL_RCC_GetHCLKFreq+0x14>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr
 800c0da:	bf00      	nop
 800c0dc:	20000000 	.word	0x20000000

0800c0e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c0e4:	f7ff fff0 	bl	800c0c8 <HAL_RCC_GetHCLKFreq>
 800c0e8:	4601      	mov	r1, r0
 800c0ea:	4b05      	ldr	r3, [pc, #20]	; (800c100 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	0a9b      	lsrs	r3, r3, #10
 800c0f0:	f003 0307 	and.w	r3, r3, #7
 800c0f4:	4a03      	ldr	r2, [pc, #12]	; (800c104 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c0f6:	5cd3      	ldrb	r3, [r2, r3]
 800c0f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	bd80      	pop	{r7, pc}
 800c100:	40023800 	.word	0x40023800
 800c104:	08019d1c 	.word	0x08019d1c

0800c108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c10c:	f7ff ffdc 	bl	800c0c8 <HAL_RCC_GetHCLKFreq>
 800c110:	4601      	mov	r1, r0
 800c112:	4b05      	ldr	r3, [pc, #20]	; (800c128 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	0b5b      	lsrs	r3, r3, #13
 800c118:	f003 0307 	and.w	r3, r3, #7
 800c11c:	4a03      	ldr	r2, [pc, #12]	; (800c12c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c11e:	5cd3      	ldrb	r3, [r2, r3]
 800c120:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c124:	4618      	mov	r0, r3
 800c126:	bd80      	pop	{r7, pc}
 800c128:	40023800 	.word	0x40023800
 800c12c:	08019d1c 	.word	0x08019d1c

0800c130 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c130:	b580      	push	{r7, lr}
 800c132:	b088      	sub	sp, #32
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c138:	2300      	movs	r3, #0
 800c13a:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c13c:	2300      	movs	r3, #0
 800c13e:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c140:	2300      	movs	r3, #0
 800c142:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c144:	2300      	movs	r3, #0
 800c146:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c148:	2300      	movs	r3, #0
 800c14a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c154:	2b00      	cmp	r3, #0
 800c156:	d00a      	beq.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c158:	4b66      	ldr	r3, [pc, #408]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c15a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c15e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c166:	4963      	ldr	r1, [pc, #396]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c168:	4313      	orrs	r3, r2
 800c16a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c176:	2b00      	cmp	r3, #0
 800c178:	d00a      	beq.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c17a:	4b5e      	ldr	r3, [pc, #376]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c17c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c180:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c188:	495a      	ldr	r1, [pc, #360]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c18a:	4313      	orrs	r3, r2
 800c18c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f003 0301 	and.w	r3, r3, #1
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d10b      	bne.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d105      	bne.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d075      	beq.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c1b4:	4b50      	ldr	r3, [pc, #320]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c1ba:	f7fd fb33 	bl	8009824 <HAL_GetTick>
 800c1be:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c1c0:	e008      	b.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c1c2:	f7fd fb2f 	bl	8009824 <HAL_GetTick>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	69fb      	ldr	r3, [r7, #28]
 800c1ca:	1ad3      	subs	r3, r2, r3
 800c1cc:	2b02      	cmp	r3, #2
 800c1ce:	d901      	bls.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c1d0:	2303      	movs	r3, #3
 800c1d2:	e1dc      	b.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c1d4:	4b47      	ldr	r3, [pc, #284]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d1f0      	bne.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f003 0301 	and.w	r3, r3, #1
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d009      	beq.n	800c200 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	019a      	lsls	r2, r3, #6
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	071b      	lsls	r3, r3, #28
 800c1f8:	493e      	ldr	r1, [pc, #248]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f003 0302 	and.w	r3, r3, #2
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d01f      	beq.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c20c:	4b39      	ldr	r3, [pc, #228]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c20e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c212:	0f1b      	lsrs	r3, r3, #28
 800c214:	f003 0307 	and.w	r3, r3, #7
 800c218:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	019a      	lsls	r2, r3, #6
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	68db      	ldr	r3, [r3, #12]
 800c224:	061b      	lsls	r3, r3, #24
 800c226:	431a      	orrs	r2, r3
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	071b      	lsls	r3, r3, #28
 800c22c:	4931      	ldr	r1, [pc, #196]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c22e:	4313      	orrs	r3, r2
 800c230:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c234:	4b2f      	ldr	r3, [pc, #188]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c23a:	f023 021f 	bic.w	r2, r3, #31
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a1b      	ldr	r3, [r3, #32]
 800c242:	3b01      	subs	r3, #1
 800c244:	492b      	ldr	r1, [pc, #172]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c246:	4313      	orrs	r3, r2
 800c248:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c254:	2b00      	cmp	r3, #0
 800c256:	d00d      	beq.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	019a      	lsls	r2, r3, #6
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	061b      	lsls	r3, r3, #24
 800c264:	431a      	orrs	r2, r3
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	071b      	lsls	r3, r3, #28
 800c26c:	4921      	ldr	r1, [pc, #132]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c26e:	4313      	orrs	r3, r2
 800c270:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c274:	4b20      	ldr	r3, [pc, #128]	; (800c2f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c276:	2201      	movs	r2, #1
 800c278:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c27a:	f7fd fad3 	bl	8009824 <HAL_GetTick>
 800c27e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c280:	e008      	b.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c282:	f7fd facf 	bl	8009824 <HAL_GetTick>
 800c286:	4602      	mov	r2, r0
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	1ad3      	subs	r3, r2, r3
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d901      	bls.n	800c294 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c290:	2303      	movs	r3, #3
 800c292:	e17c      	b.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c294:	4b17      	ldr	r3, [pc, #92]	; (800c2f4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d0f0      	beq.n	800c282 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f003 0304 	and.w	r3, r3, #4
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d112      	bne.n	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d10c      	bne.n	800c2d2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f000 80ce 	beq.w	800c462 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c2ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2ce:	f040 80c8 	bne.w	800c462 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c2d2:	4b0a      	ldr	r3, [pc, #40]	; (800c2fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c2d8:	f7fd faa4 	bl	8009824 <HAL_GetTick>
 800c2dc:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c2de:	e00f      	b.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c2e0:	f7fd faa0 	bl	8009824 <HAL_GetTick>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	1ad3      	subs	r3, r2, r3
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	d908      	bls.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c2ee:	2303      	movs	r3, #3
 800c2f0:	e14d      	b.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c2f2:	bf00      	nop
 800c2f4:	40023800 	.word	0x40023800
 800c2f8:	42470068 	.word	0x42470068
 800c2fc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c300:	4ba5      	ldr	r3, [pc, #660]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c308:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c30c:	d0e8      	beq.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f003 0304 	and.w	r3, r3, #4
 800c316:	2b00      	cmp	r3, #0
 800c318:	d02e      	beq.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c31a:	4b9f      	ldr	r3, [pc, #636]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c320:	0c1b      	lsrs	r3, r3, #16
 800c322:	f003 0303 	and.w	r3, r3, #3
 800c326:	3301      	adds	r3, #1
 800c328:	005b      	lsls	r3, r3, #1
 800c32a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c32c:	4b9a      	ldr	r3, [pc, #616]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c32e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c332:	0f1b      	lsrs	r3, r3, #28
 800c334:	f003 0307 	and.w	r3, r3, #7
 800c338:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	691b      	ldr	r3, [r3, #16]
 800c33e:	019a      	lsls	r2, r3, #6
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	085b      	lsrs	r3, r3, #1
 800c344:	3b01      	subs	r3, #1
 800c346:	041b      	lsls	r3, r3, #16
 800c348:	431a      	orrs	r2, r3
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	699b      	ldr	r3, [r3, #24]
 800c34e:	061b      	lsls	r3, r3, #24
 800c350:	431a      	orrs	r2, r3
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	071b      	lsls	r3, r3, #28
 800c356:	4990      	ldr	r1, [pc, #576]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c358:	4313      	orrs	r3, r2
 800c35a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c35e:	4b8e      	ldr	r3, [pc, #568]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c364:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36c:	3b01      	subs	r3, #1
 800c36e:	021b      	lsls	r3, r3, #8
 800c370:	4989      	ldr	r1, [pc, #548]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c372:	4313      	orrs	r3, r2
 800c374:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f003 0308 	and.w	r3, r3, #8
 800c380:	2b00      	cmp	r3, #0
 800c382:	d02c      	beq.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c384:	4b84      	ldr	r3, [pc, #528]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c38a:	0c1b      	lsrs	r3, r3, #16
 800c38c:	f003 0303 	and.w	r3, r3, #3
 800c390:	3301      	adds	r3, #1
 800c392:	005b      	lsls	r3, r3, #1
 800c394:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c396:	4b80      	ldr	r3, [pc, #512]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c39c:	0e1b      	lsrs	r3, r3, #24
 800c39e:	f003 030f 	and.w	r3, r3, #15
 800c3a2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	691b      	ldr	r3, [r3, #16]
 800c3a8:	019a      	lsls	r2, r3, #6
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	085b      	lsrs	r3, r3, #1
 800c3ae:	3b01      	subs	r3, #1
 800c3b0:	041b      	lsls	r3, r3, #16
 800c3b2:	431a      	orrs	r2, r3
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	061b      	lsls	r3, r3, #24
 800c3b8:	431a      	orrs	r2, r3
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	69db      	ldr	r3, [r3, #28]
 800c3be:	071b      	lsls	r3, r3, #28
 800c3c0:	4975      	ldr	r1, [pc, #468]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c3c8:	4b73      	ldr	r3, [pc, #460]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3d6:	4970      	ldr	r1, [pc, #448]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d024      	beq.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c3ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3f2:	d11f      	bne.n	800c434 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c3f4:	4b68      	ldr	r3, [pc, #416]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3fa:	0e1b      	lsrs	r3, r3, #24
 800c3fc:	f003 030f 	and.w	r3, r3, #15
 800c400:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c402:	4b65      	ldr	r3, [pc, #404]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c408:	0f1b      	lsrs	r3, r3, #28
 800c40a:	f003 0307 	and.w	r3, r3, #7
 800c40e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	691b      	ldr	r3, [r3, #16]
 800c414:	019a      	lsls	r2, r3, #6
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	695b      	ldr	r3, [r3, #20]
 800c41a:	085b      	lsrs	r3, r3, #1
 800c41c:	3b01      	subs	r3, #1
 800c41e:	041b      	lsls	r3, r3, #16
 800c420:	431a      	orrs	r2, r3
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	061b      	lsls	r3, r3, #24
 800c426:	431a      	orrs	r2, r3
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	071b      	lsls	r3, r3, #28
 800c42c:	495a      	ldr	r1, [pc, #360]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c42e:	4313      	orrs	r3, r2
 800c430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c434:	4b59      	ldr	r3, [pc, #356]	; (800c59c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c436:	2201      	movs	r2, #1
 800c438:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c43a:	f7fd f9f3 	bl	8009824 <HAL_GetTick>
 800c43e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c440:	e008      	b.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c442:	f7fd f9ef 	bl	8009824 <HAL_GetTick>
 800c446:	4602      	mov	r2, r0
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	1ad3      	subs	r3, r2, r3
 800c44c:	2b02      	cmp	r3, #2
 800c44e:	d901      	bls.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c450:	2303      	movs	r3, #3
 800c452:	e09c      	b.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c454:	4b50      	ldr	r3, [pc, #320]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c45c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c460:	d1ef      	bne.n	800c442 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f003 0320 	and.w	r3, r3, #32
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	f000 8083 	beq.w	800c576 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c470:	2300      	movs	r3, #0
 800c472:	60bb      	str	r3, [r7, #8]
 800c474:	4b48      	ldr	r3, [pc, #288]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c478:	4a47      	ldr	r2, [pc, #284]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c47a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c47e:	6413      	str	r3, [r2, #64]	; 0x40
 800c480:	4b45      	ldr	r3, [pc, #276]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c488:	60bb      	str	r3, [r7, #8]
 800c48a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c48c:	4b44      	ldr	r3, [pc, #272]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a43      	ldr	r2, [pc, #268]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c496:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c498:	f7fd f9c4 	bl	8009824 <HAL_GetTick>
 800c49c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c49e:	e008      	b.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c4a0:	f7fd f9c0 	bl	8009824 <HAL_GetTick>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	1ad3      	subs	r3, r2, r3
 800c4aa:	2b02      	cmp	r3, #2
 800c4ac:	d901      	bls.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c4ae:	2303      	movs	r3, #3
 800c4b0:	e06d      	b.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c4b2:	4b3b      	ldr	r3, [pc, #236]	; (800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d0f0      	beq.n	800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c4be:	4b36      	ldr	r3, [pc, #216]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4c6:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d02f      	beq.n	800c52e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4d6:	69ba      	ldr	r2, [r7, #24]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d028      	beq.n	800c52e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c4dc:	4b2e      	ldr	r3, [pc, #184]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c4e4:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c4e6:	4b2f      	ldr	r3, [pc, #188]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c4ec:	4b2d      	ldr	r3, [pc, #180]	; (800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c4f2:	4a29      	ldr	r2, [pc, #164]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4f4:	69bb      	ldr	r3, [r7, #24]
 800c4f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c4f8:	4b27      	ldr	r3, [pc, #156]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4fc:	f003 0301 	and.w	r3, r3, #1
 800c500:	2b01      	cmp	r3, #1
 800c502:	d114      	bne.n	800c52e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c504:	f7fd f98e 	bl	8009824 <HAL_GetTick>
 800c508:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c50a:	e00a      	b.n	800c522 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c50c:	f7fd f98a 	bl	8009824 <HAL_GetTick>
 800c510:	4602      	mov	r2, r0
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	1ad3      	subs	r3, r2, r3
 800c516:	f241 3288 	movw	r2, #5000	; 0x1388
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d901      	bls.n	800c522 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c51e:	2303      	movs	r3, #3
 800c520:	e035      	b.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c522:	4b1d      	ldr	r3, [pc, #116]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c526:	f003 0302 	and.w	r3, r3, #2
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d0ee      	beq.n	800c50c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c536:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c53a:	d10d      	bne.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c53c:	4b16      	ldr	r3, [pc, #88]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c53e:	689b      	ldr	r3, [r3, #8]
 800c540:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c548:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c54c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c550:	4911      	ldr	r1, [pc, #68]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c552:	4313      	orrs	r3, r2
 800c554:	608b      	str	r3, [r1, #8]
 800c556:	e005      	b.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c558:	4b0f      	ldr	r3, [pc, #60]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c55a:	689b      	ldr	r3, [r3, #8]
 800c55c:	4a0e      	ldr	r2, [pc, #56]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c55e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c562:	6093      	str	r3, [r2, #8]
 800c564:	4b0c      	ldr	r3, [pc, #48]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c566:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c56c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c570:	4909      	ldr	r1, [pc, #36]	; (800c598 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c572:	4313      	orrs	r3, r2
 800c574:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f003 0310 	and.w	r3, r3, #16
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d004      	beq.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c588:	4b07      	ldr	r3, [pc, #28]	; (800c5a8 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c58a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3720      	adds	r7, #32
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	40023800 	.word	0x40023800
 800c59c:	42470070 	.word	0x42470070
 800c5a0:	40007000 	.word	0x40007000
 800c5a4:	42470e40 	.word	0x42470e40
 800c5a8:	424711e0 	.word	0x424711e0

0800c5ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b086      	sub	sp, #24
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f003 0301 	and.w	r3, r3, #1
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d075      	beq.n	800c6b0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c5c4:	4ba2      	ldr	r3, [pc, #648]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c5c6:	689b      	ldr	r3, [r3, #8]
 800c5c8:	f003 030c 	and.w	r3, r3, #12
 800c5cc:	2b04      	cmp	r3, #4
 800c5ce:	d00c      	beq.n	800c5ea <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c5d0:	4b9f      	ldr	r3, [pc, #636]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c5d8:	2b08      	cmp	r3, #8
 800c5da:	d112      	bne.n	800c602 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c5dc:	4b9c      	ldr	r3, [pc, #624]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5e8:	d10b      	bne.n	800c602 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c5ea:	4b99      	ldr	r3, [pc, #612]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d05b      	beq.n	800c6ae <HAL_RCC_OscConfig+0x102>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d157      	bne.n	800c6ae <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c5fe:	2301      	movs	r3, #1
 800c600:	e20b      	b.n	800ca1a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c60a:	d106      	bne.n	800c61a <HAL_RCC_OscConfig+0x6e>
 800c60c:	4b90      	ldr	r3, [pc, #576]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a8f      	ldr	r2, [pc, #572]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c616:	6013      	str	r3, [r2, #0]
 800c618:	e01d      	b.n	800c656 <HAL_RCC_OscConfig+0xaa>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c622:	d10c      	bne.n	800c63e <HAL_RCC_OscConfig+0x92>
 800c624:	4b8a      	ldr	r3, [pc, #552]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4a89      	ldr	r2, [pc, #548]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c62a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c62e:	6013      	str	r3, [r2, #0]
 800c630:	4b87      	ldr	r3, [pc, #540]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4a86      	ldr	r2, [pc, #536]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c63a:	6013      	str	r3, [r2, #0]
 800c63c:	e00b      	b.n	800c656 <HAL_RCC_OscConfig+0xaa>
 800c63e:	4b84      	ldr	r3, [pc, #528]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4a83      	ldr	r2, [pc, #524]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c648:	6013      	str	r3, [r2, #0]
 800c64a:	4b81      	ldr	r3, [pc, #516]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a80      	ldr	r2, [pc, #512]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c654:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d013      	beq.n	800c686 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c65e:	f7fd f8e1 	bl	8009824 <HAL_GetTick>
 800c662:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c664:	e008      	b.n	800c678 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c666:	f7fd f8dd 	bl	8009824 <HAL_GetTick>
 800c66a:	4602      	mov	r2, r0
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	1ad3      	subs	r3, r2, r3
 800c670:	2b64      	cmp	r3, #100	; 0x64
 800c672:	d901      	bls.n	800c678 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800c674:	2303      	movs	r3, #3
 800c676:	e1d0      	b.n	800ca1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c678:	4b75      	ldr	r3, [pc, #468]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c680:	2b00      	cmp	r3, #0
 800c682:	d0f0      	beq.n	800c666 <HAL_RCC_OscConfig+0xba>
 800c684:	e014      	b.n	800c6b0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c686:	f7fd f8cd 	bl	8009824 <HAL_GetTick>
 800c68a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c68c:	e008      	b.n	800c6a0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c68e:	f7fd f8c9 	bl	8009824 <HAL_GetTick>
 800c692:	4602      	mov	r2, r0
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	1ad3      	subs	r3, r2, r3
 800c698:	2b64      	cmp	r3, #100	; 0x64
 800c69a:	d901      	bls.n	800c6a0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800c69c:	2303      	movs	r3, #3
 800c69e:	e1bc      	b.n	800ca1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c6a0:	4b6b      	ldr	r3, [pc, #428]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1f0      	bne.n	800c68e <HAL_RCC_OscConfig+0xe2>
 800c6ac:	e000      	b.n	800c6b0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c6ae:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f003 0302 	and.w	r3, r3, #2
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d063      	beq.n	800c784 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c6bc:	4b64      	ldr	r3, [pc, #400]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c6be:	689b      	ldr	r3, [r3, #8]
 800c6c0:	f003 030c 	and.w	r3, r3, #12
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00b      	beq.n	800c6e0 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c6c8:	4b61      	ldr	r3, [pc, #388]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c6d0:	2b08      	cmp	r3, #8
 800c6d2:	d11c      	bne.n	800c70e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c6d4:	4b5e      	ldr	r3, [pc, #376]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d116      	bne.n	800c70e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c6e0:	4b5b      	ldr	r3, [pc, #364]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f003 0302 	and.w	r3, r3, #2
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d005      	beq.n	800c6f8 <HAL_RCC_OscConfig+0x14c>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d001      	beq.n	800c6f8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e190      	b.n	800ca1a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6f8:	4b55      	ldr	r3, [pc, #340]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	691b      	ldr	r3, [r3, #16]
 800c704:	00db      	lsls	r3, r3, #3
 800c706:	4952      	ldr	r1, [pc, #328]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c708:	4313      	orrs	r3, r2
 800c70a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c70c:	e03a      	b.n	800c784 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d020      	beq.n	800c758 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c716:	4b4f      	ldr	r3, [pc, #316]	; (800c854 <HAL_RCC_OscConfig+0x2a8>)
 800c718:	2201      	movs	r2, #1
 800c71a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c71c:	f7fd f882 	bl	8009824 <HAL_GetTick>
 800c720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c722:	e008      	b.n	800c736 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c724:	f7fd f87e 	bl	8009824 <HAL_GetTick>
 800c728:	4602      	mov	r2, r0
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	1ad3      	subs	r3, r2, r3
 800c72e:	2b02      	cmp	r3, #2
 800c730:	d901      	bls.n	800c736 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800c732:	2303      	movs	r3, #3
 800c734:	e171      	b.n	800ca1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c736:	4b46      	ldr	r3, [pc, #280]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f003 0302 	and.w	r3, r3, #2
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d0f0      	beq.n	800c724 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c742:	4b43      	ldr	r3, [pc, #268]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	691b      	ldr	r3, [r3, #16]
 800c74e:	00db      	lsls	r3, r3, #3
 800c750:	493f      	ldr	r1, [pc, #252]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c752:	4313      	orrs	r3, r2
 800c754:	600b      	str	r3, [r1, #0]
 800c756:	e015      	b.n	800c784 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c758:	4b3e      	ldr	r3, [pc, #248]	; (800c854 <HAL_RCC_OscConfig+0x2a8>)
 800c75a:	2200      	movs	r2, #0
 800c75c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c75e:	f7fd f861 	bl	8009824 <HAL_GetTick>
 800c762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c764:	e008      	b.n	800c778 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c766:	f7fd f85d 	bl	8009824 <HAL_GetTick>
 800c76a:	4602      	mov	r2, r0
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	1ad3      	subs	r3, r2, r3
 800c770:	2b02      	cmp	r3, #2
 800c772:	d901      	bls.n	800c778 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c774:	2303      	movs	r3, #3
 800c776:	e150      	b.n	800ca1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c778:	4b35      	ldr	r3, [pc, #212]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f003 0302 	and.w	r3, r3, #2
 800c780:	2b00      	cmp	r3, #0
 800c782:	d1f0      	bne.n	800c766 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f003 0308 	and.w	r3, r3, #8
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d030      	beq.n	800c7f2 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	695b      	ldr	r3, [r3, #20]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d016      	beq.n	800c7c6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c798:	4b2f      	ldr	r3, [pc, #188]	; (800c858 <HAL_RCC_OscConfig+0x2ac>)
 800c79a:	2201      	movs	r2, #1
 800c79c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c79e:	f7fd f841 	bl	8009824 <HAL_GetTick>
 800c7a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c7a4:	e008      	b.n	800c7b8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c7a6:	f7fd f83d 	bl	8009824 <HAL_GetTick>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	1ad3      	subs	r3, r2, r3
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	d901      	bls.n	800c7b8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800c7b4:	2303      	movs	r3, #3
 800c7b6:	e130      	b.n	800ca1a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c7b8:	4b25      	ldr	r3, [pc, #148]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c7ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7bc:	f003 0302 	and.w	r3, r3, #2
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d0f0      	beq.n	800c7a6 <HAL_RCC_OscConfig+0x1fa>
 800c7c4:	e015      	b.n	800c7f2 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c7c6:	4b24      	ldr	r3, [pc, #144]	; (800c858 <HAL_RCC_OscConfig+0x2ac>)
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7cc:	f7fd f82a 	bl	8009824 <HAL_GetTick>
 800c7d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c7d2:	e008      	b.n	800c7e6 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c7d4:	f7fd f826 	bl	8009824 <HAL_GetTick>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	2b02      	cmp	r3, #2
 800c7e0:	d901      	bls.n	800c7e6 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800c7e2:	2303      	movs	r3, #3
 800c7e4:	e119      	b.n	800ca1a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c7e6:	4b1a      	ldr	r3, [pc, #104]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c7e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7ea:	f003 0302 	and.w	r3, r3, #2
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d1f0      	bne.n	800c7d4 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f003 0304 	and.w	r3, r3, #4
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f000 809f 	beq.w	800c93e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c800:	2300      	movs	r3, #0
 800c802:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c804:	4b12      	ldr	r3, [pc, #72]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d10f      	bne.n	800c830 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c810:	2300      	movs	r3, #0
 800c812:	60fb      	str	r3, [r7, #12]
 800c814:	4b0e      	ldr	r3, [pc, #56]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c818:	4a0d      	ldr	r2, [pc, #52]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c81a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c81e:	6413      	str	r3, [r2, #64]	; 0x40
 800c820:	4b0b      	ldr	r3, [pc, #44]	; (800c850 <HAL_RCC_OscConfig+0x2a4>)
 800c822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c828:	60fb      	str	r3, [r7, #12]
 800c82a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c82c:	2301      	movs	r3, #1
 800c82e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c830:	4b0a      	ldr	r3, [pc, #40]	; (800c85c <HAL_RCC_OscConfig+0x2b0>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d120      	bne.n	800c87e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c83c:	4b07      	ldr	r3, [pc, #28]	; (800c85c <HAL_RCC_OscConfig+0x2b0>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a06      	ldr	r2, [pc, #24]	; (800c85c <HAL_RCC_OscConfig+0x2b0>)
 800c842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c846:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c848:	f7fc ffec 	bl	8009824 <HAL_GetTick>
 800c84c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c84e:	e010      	b.n	800c872 <HAL_RCC_OscConfig+0x2c6>
 800c850:	40023800 	.word	0x40023800
 800c854:	42470000 	.word	0x42470000
 800c858:	42470e80 	.word	0x42470e80
 800c85c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c860:	f7fc ffe0 	bl	8009824 <HAL_GetTick>
 800c864:	4602      	mov	r2, r0
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	1ad3      	subs	r3, r2, r3
 800c86a:	2b02      	cmp	r3, #2
 800c86c:	d901      	bls.n	800c872 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800c86e:	2303      	movs	r3, #3
 800c870:	e0d3      	b.n	800ca1a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c872:	4b6c      	ldr	r3, [pc, #432]	; (800ca24 <HAL_RCC_OscConfig+0x478>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d0f0      	beq.n	800c860 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	2b01      	cmp	r3, #1
 800c884:	d106      	bne.n	800c894 <HAL_RCC_OscConfig+0x2e8>
 800c886:	4b68      	ldr	r3, [pc, #416]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800c888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c88a:	4a67      	ldr	r2, [pc, #412]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800c88c:	f043 0301 	orr.w	r3, r3, #1
 800c890:	6713      	str	r3, [r2, #112]	; 0x70
 800c892:	e01c      	b.n	800c8ce <HAL_RCC_OscConfig+0x322>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	689b      	ldr	r3, [r3, #8]
 800c898:	2b05      	cmp	r3, #5
 800c89a:	d10c      	bne.n	800c8b6 <HAL_RCC_OscConfig+0x30a>
 800c89c:	4b62      	ldr	r3, [pc, #392]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800c89e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8a0:	4a61      	ldr	r2, [pc, #388]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800c8a2:	f043 0304 	orr.w	r3, r3, #4
 800c8a6:	6713      	str	r3, [r2, #112]	; 0x70
 800c8a8:	4b5f      	ldr	r3, [pc, #380]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800c8aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8ac:	4a5e      	ldr	r2, [pc, #376]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800c8ae:	f043 0301 	orr.w	r3, r3, #1
 800c8b2:	6713      	str	r3, [r2, #112]	; 0x70
 800c8b4:	e00b      	b.n	800c8ce <HAL_RCC_OscConfig+0x322>
 800c8b6:	4b5c      	ldr	r3, [pc, #368]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800c8b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8ba:	4a5b      	ldr	r2, [pc, #364]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800c8bc:	f023 0301 	bic.w	r3, r3, #1
 800c8c0:	6713      	str	r3, [r2, #112]	; 0x70
 800c8c2:	4b59      	ldr	r3, [pc, #356]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800c8c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8c6:	4a58      	ldr	r2, [pc, #352]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800c8c8:	f023 0304 	bic.w	r3, r3, #4
 800c8cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d015      	beq.n	800c902 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8d6:	f7fc ffa5 	bl	8009824 <HAL_GetTick>
 800c8da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c8dc:	e00a      	b.n	800c8f4 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c8de:	f7fc ffa1 	bl	8009824 <HAL_GetTick>
 800c8e2:	4602      	mov	r2, r0
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	1ad3      	subs	r3, r2, r3
 800c8e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d901      	bls.n	800c8f4 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800c8f0:	2303      	movs	r3, #3
 800c8f2:	e092      	b.n	800ca1a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c8f4:	4b4c      	ldr	r3, [pc, #304]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800c8f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8f8:	f003 0302 	and.w	r3, r3, #2
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d0ee      	beq.n	800c8de <HAL_RCC_OscConfig+0x332>
 800c900:	e014      	b.n	800c92c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c902:	f7fc ff8f 	bl	8009824 <HAL_GetTick>
 800c906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c908:	e00a      	b.n	800c920 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c90a:	f7fc ff8b 	bl	8009824 <HAL_GetTick>
 800c90e:	4602      	mov	r2, r0
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	1ad3      	subs	r3, r2, r3
 800c914:	f241 3288 	movw	r2, #5000	; 0x1388
 800c918:	4293      	cmp	r3, r2
 800c91a:	d901      	bls.n	800c920 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800c91c:	2303      	movs	r3, #3
 800c91e:	e07c      	b.n	800ca1a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c920:	4b41      	ldr	r3, [pc, #260]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800c922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c924:	f003 0302 	and.w	r3, r3, #2
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d1ee      	bne.n	800c90a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c92c:	7dfb      	ldrb	r3, [r7, #23]
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d105      	bne.n	800c93e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c932:	4b3d      	ldr	r3, [pc, #244]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800c934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c936:	4a3c      	ldr	r2, [pc, #240]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800c938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c93c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	699b      	ldr	r3, [r3, #24]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d068      	beq.n	800ca18 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c946:	4b38      	ldr	r3, [pc, #224]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	f003 030c 	and.w	r3, r3, #12
 800c94e:	2b08      	cmp	r3, #8
 800c950:	d060      	beq.n	800ca14 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	699b      	ldr	r3, [r3, #24]
 800c956:	2b02      	cmp	r3, #2
 800c958:	d145      	bne.n	800c9e6 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c95a:	4b34      	ldr	r3, [pc, #208]	; (800ca2c <HAL_RCC_OscConfig+0x480>)
 800c95c:	2200      	movs	r2, #0
 800c95e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c960:	f7fc ff60 	bl	8009824 <HAL_GetTick>
 800c964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c966:	e008      	b.n	800c97a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c968:	f7fc ff5c 	bl	8009824 <HAL_GetTick>
 800c96c:	4602      	mov	r2, r0
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	1ad3      	subs	r3, r2, r3
 800c972:	2b02      	cmp	r3, #2
 800c974:	d901      	bls.n	800c97a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800c976:	2303      	movs	r3, #3
 800c978:	e04f      	b.n	800ca1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c97a:	4b2b      	ldr	r3, [pc, #172]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1f0      	bne.n	800c968 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	69da      	ldr	r2, [r3, #28]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6a1b      	ldr	r3, [r3, #32]
 800c98e:	431a      	orrs	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c994:	019b      	lsls	r3, r3, #6
 800c996:	431a      	orrs	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c99c:	085b      	lsrs	r3, r3, #1
 800c99e:	3b01      	subs	r3, #1
 800c9a0:	041b      	lsls	r3, r3, #16
 800c9a2:	431a      	orrs	r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a8:	061b      	lsls	r3, r3, #24
 800c9aa:	431a      	orrs	r2, r3
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9b0:	071b      	lsls	r3, r3, #28
 800c9b2:	491d      	ldr	r1, [pc, #116]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c9b8:	4b1c      	ldr	r3, [pc, #112]	; (800ca2c <HAL_RCC_OscConfig+0x480>)
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9be:	f7fc ff31 	bl	8009824 <HAL_GetTick>
 800c9c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c9c4:	e008      	b.n	800c9d8 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c9c6:	f7fc ff2d 	bl	8009824 <HAL_GetTick>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	1ad3      	subs	r3, r2, r3
 800c9d0:	2b02      	cmp	r3, #2
 800c9d2:	d901      	bls.n	800c9d8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800c9d4:	2303      	movs	r3, #3
 800c9d6:	e020      	b.n	800ca1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c9d8:	4b13      	ldr	r3, [pc, #76]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d0f0      	beq.n	800c9c6 <HAL_RCC_OscConfig+0x41a>
 800c9e4:	e018      	b.n	800ca18 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c9e6:	4b11      	ldr	r3, [pc, #68]	; (800ca2c <HAL_RCC_OscConfig+0x480>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9ec:	f7fc ff1a 	bl	8009824 <HAL_GetTick>
 800c9f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9f2:	e008      	b.n	800ca06 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c9f4:	f7fc ff16 	bl	8009824 <HAL_GetTick>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	1ad3      	subs	r3, r2, r3
 800c9fe:	2b02      	cmp	r3, #2
 800ca00:	d901      	bls.n	800ca06 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800ca02:	2303      	movs	r3, #3
 800ca04:	e009      	b.n	800ca1a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ca06:	4b08      	ldr	r3, [pc, #32]	; (800ca28 <HAL_RCC_OscConfig+0x47c>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1f0      	bne.n	800c9f4 <HAL_RCC_OscConfig+0x448>
 800ca12:	e001      	b.n	800ca18 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	e000      	b.n	800ca1a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800ca18:	2300      	movs	r3, #0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3718      	adds	r7, #24
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}
 800ca22:	bf00      	nop
 800ca24:	40007000 	.word	0x40007000
 800ca28:	40023800 	.word	0x40023800
 800ca2c:	42470060 	.word	0x42470060

0800ca30 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d101      	bne.n	800ca42 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ca3e:	2301      	movs	r3, #1
 800ca40:	e022      	b.n	800ca88 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca48:	b2db      	uxtb	r3, r3
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d105      	bne.n	800ca5a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2200      	movs	r2, #0
 800ca52:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f7fa fa6f 	bl	8006f38 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2203      	movs	r2, #3
 800ca5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 f814 	bl	800ca90 <HAL_SD_InitCard>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d001      	beq.n	800ca72 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	e00a      	b.n	800ca88 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2200      	movs	r2, #0
 800ca76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2201      	movs	r2, #1
 800ca82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ca86:	2300      	movs	r3, #0
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3708      	adds	r7, #8
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ca90:	b5b0      	push	{r4, r5, r7, lr}
 800ca92:	b08e      	sub	sp, #56	; 0x38
 800ca94:	af04      	add	r7, sp, #16
 800ca96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800caa0:	2300      	movs	r3, #0
 800caa2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800caa4:	2300      	movs	r3, #0
 800caa6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800caa8:	2300      	movs	r3, #0
 800caaa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800caac:	2376      	movs	r3, #118	; 0x76
 800caae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681d      	ldr	r5, [r3, #0]
 800cab4:	466c      	mov	r4, sp
 800cab6:	f107 0314 	add.w	r3, r7, #20
 800caba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cabe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cac2:	f107 0308 	add.w	r3, r7, #8
 800cac6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cac8:	4628      	mov	r0, r5
 800caca:	f003 fa87 	bl	800ffdc <SDIO_Init>
 800cace:	4603      	mov	r3, r0
 800cad0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800cad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d001      	beq.n	800cae0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cadc:	2301      	movs	r3, #1
 800cade:	e031      	b.n	800cb44 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cae0:	4b1a      	ldr	r3, [pc, #104]	; (800cb4c <HAL_SD_InitCard+0xbc>)
 800cae2:	2200      	movs	r2, #0
 800cae4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4618      	mov	r0, r3
 800caec:	f003 fabf 	bl	801006e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800caf0:	4b16      	ldr	r3, [pc, #88]	; (800cb4c <HAL_SD_InitCard+0xbc>)
 800caf2:	2201      	movs	r2, #1
 800caf4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 ffc6 	bl	800da88 <SD_PowerON>
 800cafc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cafe:	6a3b      	ldr	r3, [r7, #32]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d00b      	beq.n	800cb1c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2201      	movs	r2, #1
 800cb08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb10:	6a3b      	ldr	r3, [r7, #32]
 800cb12:	431a      	orrs	r2, r3
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cb18:	2301      	movs	r3, #1
 800cb1a:	e013      	b.n	800cb44 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f000 fee5 	bl	800d8ec <SD_InitCard>
 800cb22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb24:	6a3b      	ldr	r3, [r7, #32]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00b      	beq.n	800cb42 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb36:	6a3b      	ldr	r3, [r7, #32]
 800cb38:	431a      	orrs	r2, r3
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cb3e:	2301      	movs	r3, #1
 800cb40:	e000      	b.n	800cb44 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800cb42:	2300      	movs	r3, #0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3728      	adds	r7, #40	; 0x28
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bdb0      	pop	{r4, r5, r7, pc}
 800cb4c:	422580a0 	.word	0x422580a0

0800cb50 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b08c      	sub	sp, #48	; 0x30
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	60f8      	str	r0, [r7, #12]
 800cb58:	60b9      	str	r1, [r7, #8]
 800cb5a:	607a      	str	r2, [r7, #4]
 800cb5c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d107      	bne.n	800cb78 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb6c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cb74:	2301      	movs	r3, #1
 800cb76:	e0c7      	b.n	800cd08 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	f040 80c0 	bne.w	800cd06 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cb8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	441a      	add	r2, r3
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d907      	bls.n	800cbaa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb9e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cba6:	2301      	movs	r3, #1
 800cba8:	e0ae      	b.n	800cd08 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2203      	movs	r2, #3
 800cbae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800cbc8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbce:	4a50      	ldr	r2, [pc, #320]	; (800cd10 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cbd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbd6:	4a4f      	ldr	r2, [pc, #316]	; (800cd14 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800cbd8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbde:	2200      	movs	r2, #0
 800cbe0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	3380      	adds	r3, #128	; 0x80
 800cbec:	4619      	mov	r1, r3
 800cbee:	68ba      	ldr	r2, [r7, #8]
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	025b      	lsls	r3, r3, #9
 800cbf4:	089b      	lsrs	r3, r3, #2
 800cbf6:	f7fd fc07 	bl	800a408 <HAL_DMA_Start_IT>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d017      	beq.n	800cc30 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800cc0e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a40      	ldr	r2, [pc, #256]	; (800cd18 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cc16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2201      	movs	r2, #1
 800cc28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	e06b      	b.n	800cd08 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800cc30:	4b3a      	ldr	r3, [pc, #232]	; (800cd1c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800cc32:	2201      	movs	r2, #1
 800cc34:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d002      	beq.n	800cc44 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800cc3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc40:	025b      	lsls	r3, r3, #9
 800cc42:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f003 faa1 	bl	8010194 <SDMMC_CmdBlockLength>
 800cc52:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800cc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d00f      	beq.n	800cc7a <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4a2e      	ldr	r2, [pc, #184]	; (800cd18 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cc60:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc68:	431a      	orrs	r2, r3
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2201      	movs	r2, #1
 800cc72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800cc76:	2301      	movs	r3, #1
 800cc78:	e046      	b.n	800cd08 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cc7a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc7e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	025b      	lsls	r3, r3, #9
 800cc84:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cc86:	2390      	movs	r3, #144	; 0x90
 800cc88:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cc8a:	2302      	movs	r3, #2
 800cc8c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cc92:	2301      	movs	r3, #1
 800cc94:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f107 0210 	add.w	r2, r7, #16
 800cc9e:	4611      	mov	r1, r2
 800cca0:	4618      	mov	r0, r3
 800cca2:	f003 fa4b 	bl	801013c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d90a      	bls.n	800ccc2 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2282      	movs	r2, #130	; 0x82
 800ccb0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f003 faaf 	bl	801021c <SDMMC_CmdReadMultiBlock>
 800ccbe:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ccc0:	e009      	b.n	800ccd6 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	2281      	movs	r2, #129	; 0x81
 800ccc6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f003 fa82 	bl	80101d8 <SDMMC_CmdReadSingleBlock>
 800ccd4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800ccd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d012      	beq.n	800cd02 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4a0d      	ldr	r2, [pc, #52]	; (800cd18 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cce2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccea:	431a      	orrs	r2, r3
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	e002      	b.n	800cd08 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800cd02:	2300      	movs	r3, #0
 800cd04:	e000      	b.n	800cd08 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800cd06:	2302      	movs	r3, #2
  }
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3730      	adds	r7, #48	; 0x30
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	0800d6fb 	.word	0x0800d6fb
 800cd14:	0800d76d 	.word	0x0800d76d
 800cd18:	004005ff 	.word	0x004005ff
 800cd1c:	4225858c 	.word	0x4225858c

0800cd20 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b08c      	sub	sp, #48	; 0x30
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	60b9      	str	r1, [r7, #8]
 800cd2a:	607a      	str	r2, [r7, #4]
 800cd2c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d107      	bne.n	800cd48 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd3c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cd44:	2301      	movs	r3, #1
 800cd46:	e0ca      	b.n	800cede <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cd4e:	b2db      	uxtb	r3, r3
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	f040 80c3 	bne.w	800cedc <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cd5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	441a      	add	r2, r3
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d907      	bls.n	800cd7a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd6e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cd76:	2301      	movs	r3, #1
 800cd78:	e0b1      	b.n	800cede <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2203      	movs	r2, #3
 800cd7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2200      	movs	r2, #0
 800cd88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f042 021a 	orr.w	r2, r2, #26
 800cd98:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd9e:	4a52      	ldr	r2, [pc, #328]	; (800cee8 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800cda0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cda6:	4a51      	ldr	r2, [pc, #324]	; (800ceec <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800cda8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdae:	2200      	movs	r2, #0
 800cdb0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d002      	beq.n	800cdc0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800cdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbc:	025b      	lsls	r3, r3, #9
 800cdbe:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f003 f9e3 	bl	8010194 <SDMMC_CmdBlockLength>
 800cdce:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d00f      	beq.n	800cdf6 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	4a45      	ldr	r2, [pc, #276]	; (800cef0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cddc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde4:	431a      	orrs	r2, r3
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2201      	movs	r2, #1
 800cdee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e073      	b.n	800cede <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d90a      	bls.n	800ce12 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	22a0      	movs	r2, #160	; 0xa0
 800ce00:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f003 fa4b 	bl	80102a4 <SDMMC_CmdWriteMultiBlock>
 800ce0e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ce10:	e009      	b.n	800ce26 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2290      	movs	r2, #144	; 0x90
 800ce16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f003 fa1e 	bl	8010260 <SDMMC_CmdWriteSingleBlock>
 800ce24:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ce26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d012      	beq.n	800ce52 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a2f      	ldr	r2, [pc, #188]	; (800cef0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ce32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3a:	431a      	orrs	r2, r3
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2201      	movs	r2, #1
 800ce44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	e045      	b.n	800cede <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ce52:	4b28      	ldr	r3, [pc, #160]	; (800cef4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800ce54:	2201      	movs	r2, #1
 800ce56:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ce5c:	68b9      	ldr	r1, [r7, #8]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	3380      	adds	r3, #128	; 0x80
 800ce64:	461a      	mov	r2, r3
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	025b      	lsls	r3, r3, #9
 800ce6a:	089b      	lsrs	r3, r3, #2
 800ce6c:	f7fd facc 	bl	800a408 <HAL_DMA_Start_IT>
 800ce70:	4603      	mov	r3, r0
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d01a      	beq.n	800ceac <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f022 021a 	bic.w	r2, r2, #26
 800ce84:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4a19      	ldr	r2, [pc, #100]	; (800cef0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ce8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2200      	movs	r2, #0
 800cea6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cea8:	2301      	movs	r3, #1
 800ceaa:	e018      	b.n	800cede <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ceac:	f04f 33ff 	mov.w	r3, #4294967295
 800ceb0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	025b      	lsls	r3, r3, #9
 800ceb6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ceb8:	2390      	movs	r3, #144	; 0x90
 800ceba:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800cebc:	2300      	movs	r3, #0
 800cebe:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cec0:	2300      	movs	r3, #0
 800cec2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cec4:	2301      	movs	r3, #1
 800cec6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f107 0210 	add.w	r2, r7, #16
 800ced0:	4611      	mov	r1, r2
 800ced2:	4618      	mov	r0, r3
 800ced4:	f003 f932 	bl	801013c <SDIO_ConfigData>

      return HAL_OK;
 800ced8:	2300      	movs	r3, #0
 800ceda:	e000      	b.n	800cede <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800cedc:	2302      	movs	r3, #2
  }
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3730      	adds	r7, #48	; 0x30
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	0800d6d1 	.word	0x0800d6d1
 800ceec:	0800d76d 	.word	0x0800d76d
 800cef0:	004005ff 	.word	0x004005ff
 800cef4:	4225858c 	.word	0x4225858c

0800cef8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf04:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d008      	beq.n	800cf26 <HAL_SD_IRQHandler+0x2e>
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	f003 0308 	and.w	r3, r3, #8
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d003      	beq.n	800cf26 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 ffc8 	bl	800deb4 <SD_Read_IT>
 800cf24:	e155      	b.n	800d1d2 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	f000 808f 	beq.w	800d054 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cf3e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	6812      	ldr	r2, [r2, #0]
 800cf4a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800cf4e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800cf52:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f022 0201 	bic.w	r2, r2, #1
 800cf62:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f003 0308 	and.w	r3, r3, #8
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d039      	beq.n	800cfe2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f003 0302 	and.w	r3, r3, #2
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d104      	bne.n	800cf82 <HAL_SD_IRQHandler+0x8a>
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f003 0320 	and.w	r3, r3, #32
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d011      	beq.n	800cfa6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	4618      	mov	r0, r3
 800cf88:	f003 f9ae 	bl	80102e8 <SDMMC_CmdStopTransfer>
 800cf8c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d008      	beq.n	800cfa6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	431a      	orrs	r2, r3
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 f91f 	bl	800d1e4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f240 523a 	movw	r2, #1338	; 0x53a
 800cfae:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f003 0301 	and.w	r3, r3, #1
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d104      	bne.n	800cfd2 <HAL_SD_IRQHandler+0xda>
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	f003 0302 	and.w	r3, r3, #2
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d003      	beq.n	800cfda <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f003 fe04 	bl	8010be0 <HAL_SD_RxCpltCallback>
 800cfd8:	e0fb      	b.n	800d1d2 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f003 fdf6 	bl	8010bcc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cfe0:	e0f7      	b.n	800d1d2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	f000 80f2 	beq.w	800d1d2 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	f003 0320 	and.w	r3, r3, #32
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d011      	beq.n	800d01c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4618      	mov	r0, r3
 800cffe:	f003 f973 	bl	80102e8 <SDMMC_CmdStopTransfer>
 800d002:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d008      	beq.n	800d01c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	431a      	orrs	r2, r3
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f000 f8e4 	bl	800d1e4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	f003 0301 	and.w	r3, r3, #1
 800d022:	2b00      	cmp	r3, #0
 800d024:	f040 80d5 	bne.w	800d1d2 <HAL_SD_IRQHandler+0x2da>
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	f003 0302 	and.w	r3, r3, #2
 800d02e:	2b00      	cmp	r3, #0
 800d030:	f040 80cf 	bne.w	800d1d2 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f022 0208 	bic.w	r2, r2, #8
 800d042:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2201      	movs	r2, #1
 800d048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f003 fdbd 	bl	8010bcc <HAL_SD_TxCpltCallback>
}
 800d052:	e0be      	b.n	800d1d2 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d05a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d008      	beq.n	800d074 <HAL_SD_IRQHandler+0x17c>
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	f003 0308 	and.w	r3, r3, #8
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d003      	beq.n	800d074 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f000 ff72 	bl	800df56 <SD_Write_IT>
 800d072:	e0ae      	b.n	800d1d2 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d07a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f000 80a7 	beq.w	800d1d2 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d08a:	f003 0302 	and.w	r3, r3, #2
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d005      	beq.n	800d09e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d096:	f043 0202 	orr.w	r2, r3, #2
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0a4:	f003 0308 	and.w	r3, r3, #8
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d005      	beq.n	800d0b8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b0:	f043 0208 	orr.w	r2, r3, #8
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0be:	f003 0320 	and.w	r3, r3, #32
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d005      	beq.n	800d0d2 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ca:	f043 0220 	orr.w	r2, r3, #32
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0d8:	f003 0310 	and.w	r3, r3, #16
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d005      	beq.n	800d0ec <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0e4:	f043 0210 	orr.w	r2, r3, #16
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f240 523a 	movw	r2, #1338	; 0x53a
 800d0f4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d104:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4618      	mov	r0, r3
 800d10c:	f003 f8ec 	bl	80102e8 <SDMMC_CmdStopTransfer>
 800d110:	4602      	mov	r2, r0
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d116:	431a      	orrs	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f003 0308 	and.w	r3, r3, #8
 800d122:	2b00      	cmp	r3, #0
 800d124:	d00a      	beq.n	800d13c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2201      	movs	r2, #1
 800d12a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2200      	movs	r2, #0
 800d132:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 f855 	bl	800d1e4 <HAL_SD_ErrorCallback>
}
 800d13a:	e04a      	b.n	800d1d2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d142:	2b00      	cmp	r3, #0
 800d144:	d045      	beq.n	800d1d2 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f003 0310 	and.w	r3, r3, #16
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d104      	bne.n	800d15a <HAL_SD_IRQHandler+0x262>
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f003 0320 	and.w	r3, r3, #32
 800d156:	2b00      	cmp	r3, #0
 800d158:	d011      	beq.n	800d17e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d15e:	4a1f      	ldr	r2, [pc, #124]	; (800d1dc <HAL_SD_IRQHandler+0x2e4>)
 800d160:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d166:	4618      	mov	r0, r3
 800d168:	f7fd f9a6 	bl	800a4b8 <HAL_DMA_Abort_IT>
 800d16c:	4603      	mov	r3, r0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d02f      	beq.n	800d1d2 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d176:	4618      	mov	r0, r3
 800d178:	f000 fb4a 	bl	800d810 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d17c:	e029      	b.n	800d1d2 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f003 0301 	and.w	r3, r3, #1
 800d184:	2b00      	cmp	r3, #0
 800d186:	d104      	bne.n	800d192 <HAL_SD_IRQHandler+0x29a>
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f003 0302 	and.w	r3, r3, #2
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d011      	beq.n	800d1b6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d196:	4a12      	ldr	r2, [pc, #72]	; (800d1e0 <HAL_SD_IRQHandler+0x2e8>)
 800d198:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fd f98a 	bl	800a4b8 <HAL_DMA_Abort_IT>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d013      	beq.n	800d1d2 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f000 fb65 	bl	800d87e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d1b4:	e00d      	b.n	800d1d2 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f003 fcf4 	bl	8010bb8 <HAL_SD_AbortCallback>
}
 800d1d0:	e7ff      	b.n	800d1d2 <HAL_SD_IRQHandler+0x2da>
 800d1d2:	bf00      	nop
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	0800d811 	.word	0x0800d811
 800d1e0:	0800d87f 	.word	0x0800d87f

0800d1e4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d1ec:	bf00      	nop
 800d1ee:	370c      	adds	r7, #12
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr

0800d1f8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d206:	0f9b      	lsrs	r3, r3, #30
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d212:	0e9b      	lsrs	r3, r3, #26
 800d214:	b2db      	uxtb	r3, r3
 800d216:	f003 030f 	and.w	r3, r3, #15
 800d21a:	b2da      	uxtb	r2, r3
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d224:	0e1b      	lsrs	r3, r3, #24
 800d226:	b2db      	uxtb	r3, r3
 800d228:	f003 0303 	and.w	r3, r3, #3
 800d22c:	b2da      	uxtb	r2, r3
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d236:	0c1b      	lsrs	r3, r3, #16
 800d238:	b2da      	uxtb	r2, r3
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d242:	0a1b      	lsrs	r3, r3, #8
 800d244:	b2da      	uxtb	r2, r3
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d24e:	b2da      	uxtb	r2, r3
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d258:	0d1b      	lsrs	r3, r3, #20
 800d25a:	b29a      	uxth	r2, r3
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d264:	0c1b      	lsrs	r3, r3, #16
 800d266:	b2db      	uxtb	r3, r3
 800d268:	f003 030f 	and.w	r3, r3, #15
 800d26c:	b2da      	uxtb	r2, r3
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d276:	0bdb      	lsrs	r3, r3, #15
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	f003 0301 	and.w	r3, r3, #1
 800d27e:	b2da      	uxtb	r2, r3
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d288:	0b9b      	lsrs	r3, r3, #14
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	f003 0301 	and.w	r3, r3, #1
 800d290:	b2da      	uxtb	r2, r3
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d29a:	0b5b      	lsrs	r3, r3, #13
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	f003 0301 	and.w	r3, r3, #1
 800d2a2:	b2da      	uxtb	r2, r3
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2ac:	0b1b      	lsrs	r3, r3, #12
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	f003 0301 	and.w	r3, r3, #1
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d163      	bne.n	800d390 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2cc:	009a      	lsls	r2, r3, #2
 800d2ce:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d2d2:	4013      	ands	r3, r2
 800d2d4:	687a      	ldr	r2, [r7, #4]
 800d2d6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d2d8:	0f92      	lsrs	r2, r2, #30
 800d2da:	431a      	orrs	r2, r3
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2e4:	0edb      	lsrs	r3, r3, #27
 800d2e6:	b2db      	uxtb	r3, r3
 800d2e8:	f003 0307 	and.w	r3, r3, #7
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2f6:	0e1b      	lsrs	r3, r3, #24
 800d2f8:	b2db      	uxtb	r3, r3
 800d2fa:	f003 0307 	and.w	r3, r3, #7
 800d2fe:	b2da      	uxtb	r2, r3
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d308:	0d5b      	lsrs	r3, r3, #21
 800d30a:	b2db      	uxtb	r3, r3
 800d30c:	f003 0307 	and.w	r3, r3, #7
 800d310:	b2da      	uxtb	r2, r3
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d31a:	0c9b      	lsrs	r3, r3, #18
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	f003 0307 	and.w	r3, r3, #7
 800d322:	b2da      	uxtb	r2, r3
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d32c:	0bdb      	lsrs	r3, r3, #15
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	f003 0307 	and.w	r3, r3, #7
 800d334:	b2da      	uxtb	r2, r3
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	691b      	ldr	r3, [r3, #16]
 800d33e:	1c5a      	adds	r2, r3, #1
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	7e1b      	ldrb	r3, [r3, #24]
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	f003 0307 	and.w	r3, r3, #7
 800d34e:	3302      	adds	r3, #2
 800d350:	2201      	movs	r2, #1
 800d352:	fa02 f303 	lsl.w	r3, r2, r3
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d35a:	fb02 f203 	mul.w	r2, r2, r3
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	7a1b      	ldrb	r3, [r3, #8]
 800d366:	b2db      	uxtb	r3, r3
 800d368:	f003 030f 	and.w	r3, r3, #15
 800d36c:	2201      	movs	r2, #1
 800d36e:	409a      	lsls	r2, r3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d378:	687a      	ldr	r2, [r7, #4]
 800d37a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d37c:	0a52      	lsrs	r2, r2, #9
 800d37e:	fb02 f203 	mul.w	r2, r2, r3
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d38c:	661a      	str	r2, [r3, #96]	; 0x60
 800d38e:	e031      	b.n	800d3f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d394:	2b01      	cmp	r3, #1
 800d396:	d11d      	bne.n	800d3d4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d39c:	041b      	lsls	r3, r3, #16
 800d39e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3a6:	0c1b      	lsrs	r3, r3, #16
 800d3a8:	431a      	orrs	r2, r3
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	691b      	ldr	r3, [r3, #16]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	029a      	lsls	r2, r3, #10
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3c8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	661a      	str	r2, [r3, #96]	; 0x60
 800d3d2:	e00f      	b.n	800d3f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4a58      	ldr	r2, [pc, #352]	; (800d53c <HAL_SD_GetCardCSD+0x344>)
 800d3da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	e09d      	b.n	800d530 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d3f8:	0b9b      	lsrs	r3, r3, #14
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	f003 0301 	and.w	r3, r3, #1
 800d400:	b2da      	uxtb	r2, r3
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d40a:	09db      	lsrs	r3, r3, #7
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d412:	b2da      	uxtb	r2, r3
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d422:	b2da      	uxtb	r2, r3
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d42c:	0fdb      	lsrs	r3, r3, #31
 800d42e:	b2da      	uxtb	r2, r3
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d438:	0f5b      	lsrs	r3, r3, #29
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	f003 0303 	and.w	r3, r3, #3
 800d440:	b2da      	uxtb	r2, r3
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d44a:	0e9b      	lsrs	r3, r3, #26
 800d44c:	b2db      	uxtb	r3, r3
 800d44e:	f003 0307 	and.w	r3, r3, #7
 800d452:	b2da      	uxtb	r2, r3
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d45c:	0d9b      	lsrs	r3, r3, #22
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	f003 030f 	and.w	r3, r3, #15
 800d464:	b2da      	uxtb	r2, r3
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d46e:	0d5b      	lsrs	r3, r3, #21
 800d470:	b2db      	uxtb	r3, r3
 800d472:	f003 0301 	and.w	r3, r3, #1
 800d476:	b2da      	uxtb	r2, r3
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	2200      	movs	r2, #0
 800d482:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d48a:	0c1b      	lsrs	r3, r3, #16
 800d48c:	b2db      	uxtb	r3, r3
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	b2da      	uxtb	r2, r3
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d49e:	0bdb      	lsrs	r3, r3, #15
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	f003 0301 	and.w	r3, r3, #1
 800d4a6:	b2da      	uxtb	r2, r3
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4b2:	0b9b      	lsrs	r3, r3, #14
 800d4b4:	b2db      	uxtb	r3, r3
 800d4b6:	f003 0301 	and.w	r3, r3, #1
 800d4ba:	b2da      	uxtb	r2, r3
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4c6:	0b5b      	lsrs	r3, r3, #13
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	f003 0301 	and.w	r3, r3, #1
 800d4ce:	b2da      	uxtb	r2, r3
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4da:	0b1b      	lsrs	r3, r3, #12
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	f003 0301 	and.w	r3, r3, #1
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4ee:	0a9b      	lsrs	r3, r3, #10
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	f003 0303 	and.w	r3, r3, #3
 800d4f6:	b2da      	uxtb	r2, r3
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d502:	0a1b      	lsrs	r3, r3, #8
 800d504:	b2db      	uxtb	r3, r3
 800d506:	f003 0303 	and.w	r3, r3, #3
 800d50a:	b2da      	uxtb	r2, r3
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d516:	085b      	lsrs	r3, r3, #1
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d51e:	b2da      	uxtb	r2, r3
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	2201      	movs	r2, #1
 800d52a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	370c      	adds	r7, #12
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr
 800d53c:	004005ff 	.word	0x004005ff

0800d540 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d540:	b480      	push	{r7}
 800d542:	b083      	sub	sp, #12
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d58a:	2300      	movs	r3, #0
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	370c      	adds	r7, #12
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr

0800d598 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d598:	b5b0      	push	{r4, r5, r7, lr}
 800d59a:	b08e      	sub	sp, #56	; 0x38
 800d59c:	af04      	add	r7, sp, #16
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2203      	movs	r2, #3
 800d5a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5ae:	2b03      	cmp	r3, #3
 800d5b0:	d02e      	beq.n	800d610 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5b8:	d106      	bne.n	800d5c8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	639a      	str	r2, [r3, #56]	; 0x38
 800d5c6:	e029      	b.n	800d61c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5ce:	d10a      	bne.n	800d5e6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 fb0f 	bl	800dbf4 <SD_WideBus_Enable>
 800d5d6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5de:	431a      	orrs	r2, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	639a      	str	r2, [r3, #56]	; 0x38
 800d5e4:	e01a      	b.n	800d61c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d10a      	bne.n	800d602 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f000 fb4c 	bl	800dc8a <SD_WideBus_Disable>
 800d5f2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fa:	431a      	orrs	r2, r3
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	639a      	str	r2, [r3, #56]	; 0x38
 800d600:	e00c      	b.n	800d61c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d606:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	639a      	str	r2, [r3, #56]	; 0x38
 800d60e:	e005      	b.n	800d61c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d614:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d620:	2b00      	cmp	r3, #0
 800d622:	d009      	beq.n	800d638 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4a18      	ldr	r2, [pc, #96]	; (800d68c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800d62a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d634:	2301      	movs	r3, #1
 800d636:	e024      	b.n	800d682 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	689b      	ldr	r3, [r3, #8]
 800d642:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	695b      	ldr	r3, [r3, #20]
 800d652:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	699b      	ldr	r3, [r3, #24]
 800d658:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681d      	ldr	r5, [r3, #0]
 800d65e:	466c      	mov	r4, sp
 800d660:	f107 0318 	add.w	r3, r7, #24
 800d664:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d668:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d66c:	f107 030c 	add.w	r3, r7, #12
 800d670:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d672:	4628      	mov	r0, r5
 800d674:	f002 fcb2 	bl	800ffdc <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2201      	movs	r2, #1
 800d67c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d680:	2300      	movs	r3, #0
}
 800d682:	4618      	mov	r0, r3
 800d684:	3728      	adds	r7, #40	; 0x28
 800d686:	46bd      	mov	sp, r7
 800d688:	bdb0      	pop	{r4, r5, r7, pc}
 800d68a:	bf00      	nop
 800d68c:	004005ff 	.word	0x004005ff

0800d690 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b086      	sub	sp, #24
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d698:	2300      	movs	r3, #0
 800d69a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d69c:	f107 030c 	add.w	r3, r7, #12
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 fa7e 	bl	800dba4 <SD_SendStatus>
 800d6a8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d005      	beq.n	800d6bc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	431a      	orrs	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	0a5b      	lsrs	r3, r3, #9
 800d6c0:	f003 030f 	and.w	r3, r3, #15
 800d6c4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d6c6:	693b      	ldr	r3, [r7, #16]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3718      	adds	r7, #24
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b085      	sub	sp, #20
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6dc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d6ec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d6ee:	bf00      	nop
 800d6f0:	3714      	adds	r7, #20
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr

0800d6fa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d6fa:	b580      	push	{r7, lr}
 800d6fc:	b084      	sub	sp, #16
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d706:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d70c:	2b82      	cmp	r3, #130	; 0x82
 800d70e:	d111      	bne.n	800d734 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4618      	mov	r0, r3
 800d716:	f002 fde7 	bl	80102e8 <SDMMC_CmdStopTransfer>
 800d71a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d008      	beq.n	800d734 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	431a      	orrs	r2, r3
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f7ff fd58 	bl	800d1e4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f022 0208 	bic.w	r2, r2, #8
 800d742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f240 523a 	movw	r2, #1338	; 0x53a
 800d74c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2201      	movs	r2, #1
 800d752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2200      	movs	r2, #0
 800d75a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d75c:	68f8      	ldr	r0, [r7, #12]
 800d75e:	f003 fa3f 	bl	8010be0 <HAL_SD_RxCpltCallback>
#endif
}
 800d762:	bf00      	nop
 800d764:	3710      	adds	r7, #16
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
	...

0800d76c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b086      	sub	sp, #24
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d778:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f7fd f848 	bl	800a810 <HAL_DMA_GetError>
 800d780:	4603      	mov	r3, r0
 800d782:	2b02      	cmp	r3, #2
 800d784:	d03e      	beq.n	800d804 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d78a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d78c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d794:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	2b01      	cmp	r3, #1
 800d79a:	d002      	beq.n	800d7a2 <SD_DMAError+0x36>
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2b01      	cmp	r3, #1
 800d7a0:	d12d      	bne.n	800d7fe <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	4a19      	ldr	r2, [pc, #100]	; (800d80c <SD_DMAError+0xa0>)
 800d7a8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d7b8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d7c6:	6978      	ldr	r0, [r7, #20]
 800d7c8:	f7ff ff62 	bl	800d690 <HAL_SD_GetCardState>
 800d7cc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	2b06      	cmp	r3, #6
 800d7d2:	d002      	beq.n	800d7da <SD_DMAError+0x6e>
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	2b05      	cmp	r3, #5
 800d7d8:	d10a      	bne.n	800d7f0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f002 fd82 	bl	80102e8 <SDMMC_CmdStopTransfer>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ea:	431a      	orrs	r2, r3
 800d7ec:	697b      	ldr	r3, [r7, #20]
 800d7ee:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d7fe:	6978      	ldr	r0, [r7, #20]
 800d800:	f7ff fcf0 	bl	800d1e4 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d804:	bf00      	nop
 800d806:	3718      	adds	r7, #24
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}
 800d80c:	004005ff 	.word	0x004005ff

0800d810 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d81c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f240 523a 	movw	r2, #1338	; 0x53a
 800d826:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d828:	68f8      	ldr	r0, [r7, #12]
 800d82a:	f7ff ff31 	bl	800d690 <HAL_SD_GetCardState>
 800d82e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2201      	movs	r2, #1
 800d834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2200      	movs	r2, #0
 800d83c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	2b06      	cmp	r3, #6
 800d842:	d002      	beq.n	800d84a <SD_DMATxAbort+0x3a>
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	2b05      	cmp	r3, #5
 800d848:	d10a      	bne.n	800d860 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	4618      	mov	r0, r3
 800d850:	f002 fd4a 	bl	80102e8 <SDMMC_CmdStopTransfer>
 800d854:	4602      	mov	r2, r0
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d85a:	431a      	orrs	r2, r3
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d864:	2b00      	cmp	r3, #0
 800d866:	d103      	bne.n	800d870 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d868:	68f8      	ldr	r0, [r7, #12]
 800d86a:	f003 f9a5 	bl	8010bb8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d86e:	e002      	b.n	800d876 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d870:	68f8      	ldr	r0, [r7, #12]
 800d872:	f7ff fcb7 	bl	800d1e4 <HAL_SD_ErrorCallback>
}
 800d876:	bf00      	nop
 800d878:	3710      	adds	r7, #16
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}

0800d87e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d87e:	b580      	push	{r7, lr}
 800d880:	b084      	sub	sp, #16
 800d882:	af00      	add	r7, sp, #0
 800d884:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d88a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	f240 523a 	movw	r2, #1338	; 0x53a
 800d894:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d896:	68f8      	ldr	r0, [r7, #12]
 800d898:	f7ff fefa 	bl	800d690 <HAL_SD_GetCardState>
 800d89c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	2b06      	cmp	r3, #6
 800d8b0:	d002      	beq.n	800d8b8 <SD_DMARxAbort+0x3a>
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	2b05      	cmp	r3, #5
 800d8b6:	d10a      	bne.n	800d8ce <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f002 fd13 	bl	80102e8 <SDMMC_CmdStopTransfer>
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8c8:	431a      	orrs	r2, r3
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d103      	bne.n	800d8de <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d8d6:	68f8      	ldr	r0, [r7, #12]
 800d8d8:	f003 f96e 	bl	8010bb8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d8dc:	e002      	b.n	800d8e4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d8de:	68f8      	ldr	r0, [r7, #12]
 800d8e0:	f7ff fc80 	bl	800d1e4 <HAL_SD_ErrorCallback>
}
 800d8e4:	bf00      	nop
 800d8e6:	3710      	adds	r7, #16
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	bd80      	pop	{r7, pc}

0800d8ec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d8ec:	b5b0      	push	{r4, r5, r7, lr}
 800d8ee:	b094      	sub	sp, #80	; 0x50
 800d8f0:	af04      	add	r7, sp, #16
 800d8f2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f002 fbc5 	bl	801008c <SDIO_GetPowerState>
 800d902:	4603      	mov	r3, r0
 800d904:	2b00      	cmp	r3, #0
 800d906:	d102      	bne.n	800d90e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d908:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d90c:	e0b7      	b.n	800da7e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d912:	2b03      	cmp	r3, #3
 800d914:	d02f      	beq.n	800d976 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	4618      	mov	r0, r3
 800d91c:	f002 fdee 	bl	80104fc <SDMMC_CmdSendCID>
 800d920:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d924:	2b00      	cmp	r3, #0
 800d926:	d001      	beq.n	800d92c <SD_InitCard+0x40>
    {
      return errorstate;
 800d928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d92a:	e0a8      	b.n	800da7e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	2100      	movs	r1, #0
 800d932:	4618      	mov	r0, r3
 800d934:	f002 fbef 	bl	8010116 <SDIO_GetResponse>
 800d938:	4602      	mov	r2, r0
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	2104      	movs	r1, #4
 800d944:	4618      	mov	r0, r3
 800d946:	f002 fbe6 	bl	8010116 <SDIO_GetResponse>
 800d94a:	4602      	mov	r2, r0
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2108      	movs	r1, #8
 800d956:	4618      	mov	r0, r3
 800d958:	f002 fbdd 	bl	8010116 <SDIO_GetResponse>
 800d95c:	4602      	mov	r2, r0
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	210c      	movs	r1, #12
 800d968:	4618      	mov	r0, r3
 800d96a:	f002 fbd4 	bl	8010116 <SDIO_GetResponse>
 800d96e:	4602      	mov	r2, r0
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d97a:	2b03      	cmp	r3, #3
 800d97c:	d00d      	beq.n	800d99a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f107 020e 	add.w	r2, r7, #14
 800d986:	4611      	mov	r1, r2
 800d988:	4618      	mov	r0, r3
 800d98a:	f002 fdf4 	bl	8010576 <SDMMC_CmdSetRelAdd>
 800d98e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d992:	2b00      	cmp	r3, #0
 800d994:	d001      	beq.n	800d99a <SD_InitCard+0xae>
    {
      return errorstate;
 800d996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d998:	e071      	b.n	800da7e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d99e:	2b03      	cmp	r3, #3
 800d9a0:	d036      	beq.n	800da10 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d9a2:	89fb      	ldrh	r3, [r7, #14]
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9b2:	041b      	lsls	r3, r3, #16
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	4610      	mov	r0, r2
 800d9b8:	f002 fdbe 	bl	8010538 <SDMMC_CmdSendCSD>
 800d9bc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d001      	beq.n	800d9c8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d9c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9c6:	e05a      	b.n	800da7e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2100      	movs	r1, #0
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f002 fba1 	bl	8010116 <SDIO_GetResponse>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	2104      	movs	r1, #4
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f002 fb98 	bl	8010116 <SDIO_GetResponse>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2108      	movs	r1, #8
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f002 fb8f 	bl	8010116 <SDIO_GetResponse>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	210c      	movs	r1, #12
 800da04:	4618      	mov	r0, r3
 800da06:	f002 fb86 	bl	8010116 <SDIO_GetResponse>
 800da0a:	4602      	mov	r2, r0
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2104      	movs	r1, #4
 800da16:	4618      	mov	r0, r3
 800da18:	f002 fb7d 	bl	8010116 <SDIO_GetResponse>
 800da1c:	4603      	mov	r3, r0
 800da1e:	0d1a      	lsrs	r2, r3, #20
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800da24:	f107 0310 	add.w	r3, r7, #16
 800da28:	4619      	mov	r1, r3
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f7ff fbe4 	bl	800d1f8 <HAL_SD_GetCardCSD>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d002      	beq.n	800da3c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800da3a:	e020      	b.n	800da7e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6819      	ldr	r1, [r3, #0]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da44:	041b      	lsls	r3, r3, #16
 800da46:	f04f 0400 	mov.w	r4, #0
 800da4a:	461a      	mov	r2, r3
 800da4c:	4623      	mov	r3, r4
 800da4e:	4608      	mov	r0, r1
 800da50:	f002 fc6c 	bl	801032c <SDMMC_CmdSelDesel>
 800da54:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800da56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d001      	beq.n	800da60 <SD_InitCard+0x174>
  {
    return errorstate;
 800da5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da5e:	e00e      	b.n	800da7e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681d      	ldr	r5, [r3, #0]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	466c      	mov	r4, sp
 800da68:	f103 0210 	add.w	r2, r3, #16
 800da6c:	ca07      	ldmia	r2, {r0, r1, r2}
 800da6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800da72:	3304      	adds	r3, #4
 800da74:	cb0e      	ldmia	r3, {r1, r2, r3}
 800da76:	4628      	mov	r0, r5
 800da78:	f002 fab0 	bl	800ffdc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800da7c:	2300      	movs	r3, #0
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3740      	adds	r7, #64	; 0x40
 800da82:	46bd      	mov	sp, r7
 800da84:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800da88 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b086      	sub	sp, #24
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800da90:	2300      	movs	r3, #0
 800da92:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800da94:	2300      	movs	r3, #0
 800da96:	617b      	str	r3, [r7, #20]
 800da98:	2300      	movs	r3, #0
 800da9a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4618      	mov	r0, r3
 800daa2:	f002 fc66 	bl	8010372 <SDMMC_CmdGoIdleState>
 800daa6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d001      	beq.n	800dab2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	e072      	b.n	800db98 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4618      	mov	r0, r3
 800dab8:	f002 fc79 	bl	80103ae <SDMMC_CmdOperCond>
 800dabc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d00d      	beq.n	800dae0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2200      	movs	r2, #0
 800dac8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4618      	mov	r0, r3
 800dad0:	f002 fc4f 	bl	8010372 <SDMMC_CmdGoIdleState>
 800dad4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d004      	beq.n	800dae6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	e05b      	b.n	800db98 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2201      	movs	r2, #1
 800dae4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800daea:	2b01      	cmp	r3, #1
 800daec:	d137      	bne.n	800db5e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	2100      	movs	r1, #0
 800daf4:	4618      	mov	r0, r3
 800daf6:	f002 fc79 	bl	80103ec <SDMMC_CmdAppCommand>
 800dafa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d02d      	beq.n	800db5e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800db06:	e047      	b.n	800db98 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	2100      	movs	r1, #0
 800db0e:	4618      	mov	r0, r3
 800db10:	f002 fc6c 	bl	80103ec <SDMMC_CmdAppCommand>
 800db14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d001      	beq.n	800db20 <SD_PowerON+0x98>
    {
      return errorstate;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	e03b      	b.n	800db98 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	491e      	ldr	r1, [pc, #120]	; (800dba0 <SD_PowerON+0x118>)
 800db26:	4618      	mov	r0, r3
 800db28:	f002 fc82 	bl	8010430 <SDMMC_CmdAppOperCommand>
 800db2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d002      	beq.n	800db3a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800db38:	e02e      	b.n	800db98 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	2100      	movs	r1, #0
 800db40:	4618      	mov	r0, r3
 800db42:	f002 fae8 	bl	8010116 <SDIO_GetResponse>
 800db46:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	0fdb      	lsrs	r3, r3, #31
 800db4c:	2b01      	cmp	r3, #1
 800db4e:	d101      	bne.n	800db54 <SD_PowerON+0xcc>
 800db50:	2301      	movs	r3, #1
 800db52:	e000      	b.n	800db56 <SD_PowerON+0xce>
 800db54:	2300      	movs	r3, #0
 800db56:	613b      	str	r3, [r7, #16]

    count++;
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	3301      	adds	r3, #1
 800db5c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800db5e:	68bb      	ldr	r3, [r7, #8]
 800db60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800db64:	4293      	cmp	r3, r2
 800db66:	d802      	bhi.n	800db6e <SD_PowerON+0xe6>
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d0cc      	beq.n	800db08 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800db74:	4293      	cmp	r3, r2
 800db76:	d902      	bls.n	800db7e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800db78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800db7c:	e00c      	b.n	800db98 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800db84:	2b00      	cmp	r3, #0
 800db86:	d003      	beq.n	800db90 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	2201      	movs	r2, #1
 800db8c:	645a      	str	r2, [r3, #68]	; 0x44
 800db8e:	e002      	b.n	800db96 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800db96:	2300      	movs	r3, #0
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3718      	adds	r7, #24
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}
 800dba0:	c1100000 	.word	0xc1100000

0800dba4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b084      	sub	sp, #16
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
 800dbac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d102      	bne.n	800dbba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dbb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dbb8:	e018      	b.n	800dbec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	681a      	ldr	r2, [r3, #0]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbc2:	041b      	lsls	r3, r3, #16
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	4610      	mov	r0, r2
 800dbc8:	f002 fcf6 	bl	80105b8 <SDMMC_CmdSendStatus>
 800dbcc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d001      	beq.n	800dbd8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	e009      	b.n	800dbec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	2100      	movs	r1, #0
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f002 fa99 	bl	8010116 <SDIO_GetResponse>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dbea:	2300      	movs	r3, #0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3710      	adds	r7, #16
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b086      	sub	sp, #24
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	60fb      	str	r3, [r7, #12]
 800dc00:	2300      	movs	r3, #0
 800dc02:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	2100      	movs	r1, #0
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f002 fa83 	bl	8010116 <SDIO_GetResponse>
 800dc10:	4603      	mov	r3, r0
 800dc12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dc1a:	d102      	bne.n	800dc22 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dc1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dc20:	e02f      	b.n	800dc82 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dc22:	f107 030c 	add.w	r3, r7, #12
 800dc26:	4619      	mov	r1, r3
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f000 f879 	bl	800dd20 <SD_FindSCR>
 800dc2e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d001      	beq.n	800dc3a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	e023      	b.n	800dc82 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dc3a:	693b      	ldr	r3, [r7, #16]
 800dc3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d01c      	beq.n	800dc7e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc4c:	041b      	lsls	r3, r3, #16
 800dc4e:	4619      	mov	r1, r3
 800dc50:	4610      	mov	r0, r2
 800dc52:	f002 fbcb 	bl	80103ec <SDMMC_CmdAppCommand>
 800dc56:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d001      	beq.n	800dc62 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	e00f      	b.n	800dc82 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	2102      	movs	r1, #2
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f002 fc04 	bl	8010476 <SDMMC_CmdBusWidth>
 800dc6e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d001      	beq.n	800dc7a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	e003      	b.n	800dc82 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	e001      	b.n	800dc82 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dc7e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3718      	adds	r7, #24
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}

0800dc8a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b086      	sub	sp, #24
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dc92:	2300      	movs	r3, #0
 800dc94:	60fb      	str	r3, [r7, #12]
 800dc96:	2300      	movs	r3, #0
 800dc98:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	2100      	movs	r1, #0
 800dca0:	4618      	mov	r0, r3
 800dca2:	f002 fa38 	bl	8010116 <SDIO_GetResponse>
 800dca6:	4603      	mov	r3, r0
 800dca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dcac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dcb0:	d102      	bne.n	800dcb8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dcb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dcb6:	e02f      	b.n	800dd18 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dcb8:	f107 030c 	add.w	r3, r7, #12
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 f82e 	bl	800dd20 <SD_FindSCR>
 800dcc4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d001      	beq.n	800dcd0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	e023      	b.n	800dd18 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d01c      	beq.n	800dd14 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dce2:	041b      	lsls	r3, r3, #16
 800dce4:	4619      	mov	r1, r3
 800dce6:	4610      	mov	r0, r2
 800dce8:	f002 fb80 	bl	80103ec <SDMMC_CmdAppCommand>
 800dcec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d001      	beq.n	800dcf8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	e00f      	b.n	800dd18 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2100      	movs	r1, #0
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f002 fbb9 	bl	8010476 <SDMMC_CmdBusWidth>
 800dd04:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d001      	beq.n	800dd10 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	e003      	b.n	800dd18 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dd10:	2300      	movs	r3, #0
 800dd12:	e001      	b.n	800dd18 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dd14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3718      	adds	r7, #24
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dd20:	b590      	push	{r4, r7, lr}
 800dd22:	b08f      	sub	sp, #60	; 0x3c
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dd2a:	f7fb fd7b 	bl	8009824 <HAL_GetTick>
 800dd2e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800dd30:	2300      	movs	r3, #0
 800dd32:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800dd34:	2300      	movs	r3, #0
 800dd36:	60bb      	str	r3, [r7, #8]
 800dd38:	2300      	movs	r3, #0
 800dd3a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	2108      	movs	r1, #8
 800dd46:	4618      	mov	r0, r3
 800dd48:	f002 fa24 	bl	8010194 <SDMMC_CmdBlockLength>
 800dd4c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d001      	beq.n	800dd58 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd56:	e0a9      	b.n	800deac <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681a      	ldr	r2, [r3, #0]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd60:	041b      	lsls	r3, r3, #16
 800dd62:	4619      	mov	r1, r3
 800dd64:	4610      	mov	r0, r2
 800dd66:	f002 fb41 	bl	80103ec <SDMMC_CmdAppCommand>
 800dd6a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d001      	beq.n	800dd76 <SD_FindSCR+0x56>
  {
    return errorstate;
 800dd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd74:	e09a      	b.n	800deac <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dd76:	f04f 33ff 	mov.w	r3, #4294967295
 800dd7a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dd7c:	2308      	movs	r3, #8
 800dd7e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800dd80:	2330      	movs	r3, #48	; 0x30
 800dd82:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800dd84:	2302      	movs	r3, #2
 800dd86:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f107 0210 	add.w	r2, r7, #16
 800dd98:	4611      	mov	r1, r2
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f002 f9ce 	bl	801013c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f002 fb88 	bl	80104ba <SDMMC_CmdSendSCR>
 800ddaa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ddac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d022      	beq.n	800ddf8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800ddb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddb4:	e07a      	b.n	800deac <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d00e      	beq.n	800dde2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6819      	ldr	r1, [r3, #0]
 800ddc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	f107 0208 	add.w	r2, r7, #8
 800ddd0:	18d4      	adds	r4, r2, r3
 800ddd2:	4608      	mov	r0, r1
 800ddd4:	f002 f92d 	bl	8010032 <SDIO_ReadFIFO>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	6023      	str	r3, [r4, #0]
      index++;
 800dddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddde:	3301      	adds	r3, #1
 800dde0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dde2:	f7fb fd1f 	bl	8009824 <HAL_GetTick>
 800dde6:	4602      	mov	r2, r0
 800dde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddea:	1ad3      	subs	r3, r2, r3
 800ddec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddf0:	d102      	bne.n	800ddf8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ddf2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ddf6:	e059      	b.n	800deac <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddfe:	f240 432a 	movw	r3, #1066	; 0x42a
 800de02:	4013      	ands	r3, r2
 800de04:	2b00      	cmp	r3, #0
 800de06:	d0d6      	beq.n	800ddb6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de0e:	f003 0308 	and.w	r3, r3, #8
 800de12:	2b00      	cmp	r3, #0
 800de14:	d005      	beq.n	800de22 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	2208      	movs	r2, #8
 800de1c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800de1e:	2308      	movs	r3, #8
 800de20:	e044      	b.n	800deac <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de28:	f003 0302 	and.w	r3, r3, #2
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d005      	beq.n	800de3c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2202      	movs	r2, #2
 800de36:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800de38:	2302      	movs	r3, #2
 800de3a:	e037      	b.n	800deac <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de42:	f003 0320 	and.w	r3, r3, #32
 800de46:	2b00      	cmp	r3, #0
 800de48:	d005      	beq.n	800de56 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2220      	movs	r2, #32
 800de50:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800de52:	2320      	movs	r3, #32
 800de54:	e02a      	b.n	800deac <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f240 523a 	movw	r2, #1338	; 0x53a
 800de5e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	061a      	lsls	r2, r3, #24
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	021b      	lsls	r3, r3, #8
 800de68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800de6c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	0a1b      	lsrs	r3, r3, #8
 800de72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800de76:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	0e1b      	lsrs	r3, r3, #24
 800de7c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800de7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de80:	601a      	str	r2, [r3, #0]
    scr++;
 800de82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de84:	3304      	adds	r3, #4
 800de86:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	061a      	lsls	r2, r3, #24
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	021b      	lsls	r3, r3, #8
 800de90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800de94:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	0a1b      	lsrs	r3, r3, #8
 800de9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800de9e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	0e1b      	lsrs	r3, r3, #24
 800dea4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800deaa:	2300      	movs	r3, #0
}
 800deac:	4618      	mov	r0, r3
 800deae:	373c      	adds	r7, #60	; 0x3c
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd90      	pop	{r4, r7, pc}

0800deb4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b086      	sub	sp, #24
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dec0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d03f      	beq.n	800df4e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800dece:	2300      	movs	r3, #0
 800ded0:	617b      	str	r3, [r7, #20]
 800ded2:	e033      	b.n	800df3c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	4618      	mov	r0, r3
 800deda:	f002 f8aa 	bl	8010032 <SDIO_ReadFIFO>
 800dede:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	b2da      	uxtb	r2, r3
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	3301      	adds	r3, #1
 800deec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	3b01      	subs	r3, #1
 800def2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	0a1b      	lsrs	r3, r3, #8
 800def8:	b2da      	uxtb	r2, r3
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	3301      	adds	r3, #1
 800df02:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	3b01      	subs	r3, #1
 800df08:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	0c1b      	lsrs	r3, r3, #16
 800df0e:	b2da      	uxtb	r2, r3
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	701a      	strb	r2, [r3, #0]
      tmp++;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	3301      	adds	r3, #1
 800df18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	3b01      	subs	r3, #1
 800df1e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	0e1b      	lsrs	r3, r3, #24
 800df24:	b2da      	uxtb	r2, r3
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	701a      	strb	r2, [r3, #0]
      tmp++;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	3301      	adds	r3, #1
 800df2e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	3b01      	subs	r3, #1
 800df34:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	3301      	adds	r3, #1
 800df3a:	617b      	str	r3, [r7, #20]
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	2b07      	cmp	r3, #7
 800df40:	d9c8      	bls.n	800ded4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	68fa      	ldr	r2, [r7, #12]
 800df46:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	693a      	ldr	r2, [r7, #16]
 800df4c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800df4e:	bf00      	nop
 800df50:	3718      	adds	r7, #24
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}

0800df56 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800df56:	b580      	push	{r7, lr}
 800df58:	b086      	sub	sp, #24
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6a1b      	ldr	r3, [r3, #32]
 800df62:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df68:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d043      	beq.n	800dff8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800df70:	2300      	movs	r3, #0
 800df72:	617b      	str	r3, [r7, #20]
 800df74:	e037      	b.n	800dfe6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	3301      	adds	r3, #1
 800df80:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	3b01      	subs	r3, #1
 800df86:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	021a      	lsls	r2, r3, #8
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	4313      	orrs	r3, r2
 800df92:	60bb      	str	r3, [r7, #8]
      tmp++;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	3301      	adds	r3, #1
 800df98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	3b01      	subs	r3, #1
 800df9e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	781b      	ldrb	r3, [r3, #0]
 800dfa4:	041a      	lsls	r2, r3, #16
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	4313      	orrs	r3, r2
 800dfaa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	3301      	adds	r3, #1
 800dfb0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dfb2:	693b      	ldr	r3, [r7, #16]
 800dfb4:	3b01      	subs	r3, #1
 800dfb6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	061a      	lsls	r2, r3, #24
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	3b01      	subs	r3, #1
 800dfce:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f107 0208 	add.w	r2, r7, #8
 800dfd8:	4611      	mov	r1, r2
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f002 f836 	bl	801004c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800dfe0:	697b      	ldr	r3, [r7, #20]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	617b      	str	r3, [r7, #20]
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	2b07      	cmp	r3, #7
 800dfea:	d9c4      	bls.n	800df76 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	68fa      	ldr	r2, [r7, #12]
 800dff0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	693a      	ldr	r2, [r7, #16]
 800dff6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800dff8:	bf00      	nop
 800dffa:	3718      	adds	r7, #24
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d101      	bne.n	800e012 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e00e:	2301      	movs	r3, #1
 800e010:	e056      	b.n	800e0c0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	2200      	movs	r2, #0
 800e016:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e01e:	b2db      	uxtb	r3, r3
 800e020:	2b00      	cmp	r3, #0
 800e022:	d106      	bne.n	800e032 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2200      	movs	r2, #0
 800e028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f7f9 f875 	bl	800711c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2202      	movs	r2, #2
 800e036:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e048:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	685a      	ldr	r2, [r3, #4]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	689b      	ldr	r3, [r3, #8]
 800e052:	431a      	orrs	r2, r3
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	68db      	ldr	r3, [r3, #12]
 800e058:	431a      	orrs	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	691b      	ldr	r3, [r3, #16]
 800e05e:	431a      	orrs	r2, r3
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	695b      	ldr	r3, [r3, #20]
 800e064:	431a      	orrs	r2, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	699b      	ldr	r3, [r3, #24]
 800e06a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e06e:	431a      	orrs	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	69db      	ldr	r3, [r3, #28]
 800e074:	431a      	orrs	r2, r3
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6a1b      	ldr	r3, [r3, #32]
 800e07a:	ea42 0103 	orr.w	r1, r2, r3
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	430a      	orrs	r2, r1
 800e088:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	699b      	ldr	r3, [r3, #24]
 800e08e:	0c1b      	lsrs	r3, r3, #16
 800e090:	f003 0104 	and.w	r1, r3, #4
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	430a      	orrs	r2, r1
 800e09e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	69da      	ldr	r2, [r3, #28]
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e0ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2201      	movs	r2, #1
 800e0ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e0be:	2300      	movs	r3, #0
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3708      	adds	r7, #8
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b088      	sub	sp, #32
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	60f8      	str	r0, [r7, #12]
 800e0d0:	60b9      	str	r1, [r7, #8]
 800e0d2:	603b      	str	r3, [r7, #0]
 800e0d4:	4613      	mov	r3, r2
 800e0d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	d101      	bne.n	800e0ea <HAL_SPI_Transmit+0x22>
 800e0e6:	2302      	movs	r3, #2
 800e0e8:	e11e      	b.n	800e328 <HAL_SPI_Transmit+0x260>
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e0f2:	f7fb fb97 	bl	8009824 <HAL_GetTick>
 800e0f6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e0f8:	88fb      	ldrh	r3, [r7, #6]
 800e0fa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e102:	b2db      	uxtb	r3, r3
 800e104:	2b01      	cmp	r3, #1
 800e106:	d002      	beq.n	800e10e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e108:	2302      	movs	r3, #2
 800e10a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e10c:	e103      	b.n	800e316 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d002      	beq.n	800e11a <HAL_SPI_Transmit+0x52>
 800e114:	88fb      	ldrh	r3, [r7, #6]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d102      	bne.n	800e120 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e11a:	2301      	movs	r3, #1
 800e11c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e11e:	e0fa      	b.n	800e316 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2203      	movs	r2, #3
 800e124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	2200      	movs	r2, #0
 800e12c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	68ba      	ldr	r2, [r7, #8]
 800e132:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	88fa      	ldrh	r2, [r7, #6]
 800e138:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	88fa      	ldrh	r2, [r7, #6]
 800e13e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2200      	movs	r2, #0
 800e144:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2200      	movs	r2, #0
 800e14a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2200      	movs	r2, #0
 800e150:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2200      	movs	r2, #0
 800e156:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	2200      	movs	r2, #0
 800e15c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	689b      	ldr	r3, [r3, #8]
 800e162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e166:	d107      	bne.n	800e178 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	681a      	ldr	r2, [r3, #0]
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e176:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e182:	2b40      	cmp	r3, #64	; 0x40
 800e184:	d007      	beq.n	800e196 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	681a      	ldr	r2, [r3, #0]
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e194:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	68db      	ldr	r3, [r3, #12]
 800e19a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e19e:	d14b      	bne.n	800e238 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d002      	beq.n	800e1ae <HAL_SPI_Transmit+0xe6>
 800e1a8:	8afb      	ldrh	r3, [r7, #22]
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d13e      	bne.n	800e22c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1b2:	881a      	ldrh	r2, [r3, #0]
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1be:	1c9a      	adds	r2, r3, #2
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	3b01      	subs	r3, #1
 800e1cc:	b29a      	uxth	r2, r3
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e1d2:	e02b      	b.n	800e22c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	689b      	ldr	r3, [r3, #8]
 800e1da:	f003 0302 	and.w	r3, r3, #2
 800e1de:	2b02      	cmp	r3, #2
 800e1e0:	d112      	bne.n	800e208 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1e6:	881a      	ldrh	r2, [r3, #0]
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1f2:	1c9a      	adds	r2, r3, #2
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	3b01      	subs	r3, #1
 800e200:	b29a      	uxth	r2, r3
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	86da      	strh	r2, [r3, #54]	; 0x36
 800e206:	e011      	b.n	800e22c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e208:	f7fb fb0c 	bl	8009824 <HAL_GetTick>
 800e20c:	4602      	mov	r2, r0
 800e20e:	69bb      	ldr	r3, [r7, #24]
 800e210:	1ad3      	subs	r3, r2, r3
 800e212:	683a      	ldr	r2, [r7, #0]
 800e214:	429a      	cmp	r2, r3
 800e216:	d803      	bhi.n	800e220 <HAL_SPI_Transmit+0x158>
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e21e:	d102      	bne.n	800e226 <HAL_SPI_Transmit+0x15e>
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d102      	bne.n	800e22c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e226:	2303      	movs	r3, #3
 800e228:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e22a:	e074      	b.n	800e316 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e230:	b29b      	uxth	r3, r3
 800e232:	2b00      	cmp	r3, #0
 800e234:	d1ce      	bne.n	800e1d4 <HAL_SPI_Transmit+0x10c>
 800e236:	e04c      	b.n	800e2d2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d002      	beq.n	800e246 <HAL_SPI_Transmit+0x17e>
 800e240:	8afb      	ldrh	r3, [r7, #22]
 800e242:	2b01      	cmp	r3, #1
 800e244:	d140      	bne.n	800e2c8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	330c      	adds	r3, #12
 800e250:	7812      	ldrb	r2, [r2, #0]
 800e252:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e258:	1c5a      	adds	r2, r3, #1
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e262:	b29b      	uxth	r3, r3
 800e264:	3b01      	subs	r3, #1
 800e266:	b29a      	uxth	r2, r3
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e26c:	e02c      	b.n	800e2c8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	689b      	ldr	r3, [r3, #8]
 800e274:	f003 0302 	and.w	r3, r3, #2
 800e278:	2b02      	cmp	r3, #2
 800e27a:	d113      	bne.n	800e2a4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	330c      	adds	r3, #12
 800e286:	7812      	ldrb	r2, [r2, #0]
 800e288:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e28e:	1c5a      	adds	r2, r3, #1
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e298:	b29b      	uxth	r3, r3
 800e29a:	3b01      	subs	r3, #1
 800e29c:	b29a      	uxth	r2, r3
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	86da      	strh	r2, [r3, #54]	; 0x36
 800e2a2:	e011      	b.n	800e2c8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2a4:	f7fb fabe 	bl	8009824 <HAL_GetTick>
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	69bb      	ldr	r3, [r7, #24]
 800e2ac:	1ad3      	subs	r3, r2, r3
 800e2ae:	683a      	ldr	r2, [r7, #0]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d803      	bhi.n	800e2bc <HAL_SPI_Transmit+0x1f4>
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ba:	d102      	bne.n	800e2c2 <HAL_SPI_Transmit+0x1fa>
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d102      	bne.n	800e2c8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e2c2:	2303      	movs	r3, #3
 800e2c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e2c6:	e026      	b.n	800e316 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e2cc:	b29b      	uxth	r3, r3
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d1cd      	bne.n	800e26e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e2d2:	69ba      	ldr	r2, [r7, #24]
 800e2d4:	6839      	ldr	r1, [r7, #0]
 800e2d6:	68f8      	ldr	r0, [r7, #12]
 800e2d8:	f000 fba4 	bl	800ea24 <SPI_EndRxTxTransaction>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d002      	beq.n	800e2e8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2220      	movs	r2, #32
 800e2e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	689b      	ldr	r3, [r3, #8]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d10a      	bne.n	800e306 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	613b      	str	r3, [r7, #16]
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	613b      	str	r3, [r7, #16]
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	689b      	ldr	r3, [r3, #8]
 800e302:	613b      	str	r3, [r7, #16]
 800e304:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d002      	beq.n	800e314 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e30e:	2301      	movs	r3, #1
 800e310:	77fb      	strb	r3, [r7, #31]
 800e312:	e000      	b.n	800e316 <HAL_SPI_Transmit+0x24e>
  }

error:
 800e314:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2201      	movs	r2, #1
 800e31a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2200      	movs	r2, #0
 800e322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e326:	7ffb      	ldrb	r3, [r7, #31]
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3720      	adds	r7, #32
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}

0800e330 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b088      	sub	sp, #32
 800e334:	af02      	add	r7, sp, #8
 800e336:	60f8      	str	r0, [r7, #12]
 800e338:	60b9      	str	r1, [r7, #8]
 800e33a:	603b      	str	r3, [r7, #0]
 800e33c:	4613      	mov	r3, r2
 800e33e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e340:	2300      	movs	r3, #0
 800e342:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	685b      	ldr	r3, [r3, #4]
 800e348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e34c:	d112      	bne.n	800e374 <HAL_SPI_Receive+0x44>
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	689b      	ldr	r3, [r3, #8]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d10e      	bne.n	800e374 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2204      	movs	r2, #4
 800e35a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e35e:	88fa      	ldrh	r2, [r7, #6]
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	9300      	str	r3, [sp, #0]
 800e364:	4613      	mov	r3, r2
 800e366:	68ba      	ldr	r2, [r7, #8]
 800e368:	68b9      	ldr	r1, [r7, #8]
 800e36a:	68f8      	ldr	r0, [r7, #12]
 800e36c:	f000 f8e9 	bl	800e542 <HAL_SPI_TransmitReceive>
 800e370:	4603      	mov	r3, r0
 800e372:	e0e2      	b.n	800e53a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d101      	bne.n	800e382 <HAL_SPI_Receive+0x52>
 800e37e:	2302      	movs	r3, #2
 800e380:	e0db      	b.n	800e53a <HAL_SPI_Receive+0x20a>
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2201      	movs	r2, #1
 800e386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e38a:	f7fb fa4b 	bl	8009824 <HAL_GetTick>
 800e38e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e396:	b2db      	uxtb	r3, r3
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d002      	beq.n	800e3a2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e39c:	2302      	movs	r3, #2
 800e39e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e3a0:	e0c2      	b.n	800e528 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d002      	beq.n	800e3ae <HAL_SPI_Receive+0x7e>
 800e3a8:	88fb      	ldrh	r3, [r7, #6]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d102      	bne.n	800e3b4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e3b2:	e0b9      	b.n	800e528 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2204      	movs	r2, #4
 800e3b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	68ba      	ldr	r2, [r7, #8]
 800e3c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	88fa      	ldrh	r2, [r7, #6]
 800e3cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	88fa      	ldrh	r2, [r7, #6]
 800e3d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	2200      	movs	r2, #0
 800e3de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	689b      	ldr	r3, [r3, #8]
 800e3f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3fa:	d107      	bne.n	800e40c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e40a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e416:	2b40      	cmp	r3, #64	; 0x40
 800e418:	d007      	beq.n	800e42a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	681a      	ldr	r2, [r3, #0]
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e428:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d162      	bne.n	800e4f8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e432:	e02e      	b.n	800e492 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	689b      	ldr	r3, [r3, #8]
 800e43a:	f003 0301 	and.w	r3, r3, #1
 800e43e:	2b01      	cmp	r3, #1
 800e440:	d115      	bne.n	800e46e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f103 020c 	add.w	r2, r3, #12
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e44e:	7812      	ldrb	r2, [r2, #0]
 800e450:	b2d2      	uxtb	r2, r2
 800e452:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e458:	1c5a      	adds	r2, r3, #1
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e462:	b29b      	uxth	r3, r3
 800e464:	3b01      	subs	r3, #1
 800e466:	b29a      	uxth	r2, r3
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e46c:	e011      	b.n	800e492 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e46e:	f7fb f9d9 	bl	8009824 <HAL_GetTick>
 800e472:	4602      	mov	r2, r0
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	1ad3      	subs	r3, r2, r3
 800e478:	683a      	ldr	r2, [r7, #0]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d803      	bhi.n	800e486 <HAL_SPI_Receive+0x156>
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e484:	d102      	bne.n	800e48c <HAL_SPI_Receive+0x15c>
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d102      	bne.n	800e492 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e48c:	2303      	movs	r3, #3
 800e48e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e490:	e04a      	b.n	800e528 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e496:	b29b      	uxth	r3, r3
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d1cb      	bne.n	800e434 <HAL_SPI_Receive+0x104>
 800e49c:	e031      	b.n	800e502 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	689b      	ldr	r3, [r3, #8]
 800e4a4:	f003 0301 	and.w	r3, r3, #1
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d113      	bne.n	800e4d4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	68da      	ldr	r2, [r3, #12]
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b6:	b292      	uxth	r2, r2
 800e4b8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4be:	1c9a      	adds	r2, r3, #2
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	3b01      	subs	r3, #1
 800e4cc:	b29a      	uxth	r2, r3
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e4d2:	e011      	b.n	800e4f8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e4d4:	f7fb f9a6 	bl	8009824 <HAL_GetTick>
 800e4d8:	4602      	mov	r2, r0
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	1ad3      	subs	r3, r2, r3
 800e4de:	683a      	ldr	r2, [r7, #0]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d803      	bhi.n	800e4ec <HAL_SPI_Receive+0x1bc>
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ea:	d102      	bne.n	800e4f2 <HAL_SPI_Receive+0x1c2>
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d102      	bne.n	800e4f8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e4f2:	2303      	movs	r3, #3
 800e4f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e4f6:	e017      	b.n	800e528 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d1cd      	bne.n	800e49e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e502:	693a      	ldr	r2, [r7, #16]
 800e504:	6839      	ldr	r1, [r7, #0]
 800e506:	68f8      	ldr	r0, [r7, #12]
 800e508:	f000 fa27 	bl	800e95a <SPI_EndRxTransaction>
 800e50c:	4603      	mov	r3, r0
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d002      	beq.n	800e518 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	2220      	movs	r2, #32
 800e516:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d002      	beq.n	800e526 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e520:	2301      	movs	r3, #1
 800e522:	75fb      	strb	r3, [r7, #23]
 800e524:	e000      	b.n	800e528 <HAL_SPI_Receive+0x1f8>
  }

error :
 800e526:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	2201      	movs	r2, #1
 800e52c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2200      	movs	r2, #0
 800e534:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e538:	7dfb      	ldrb	r3, [r7, #23]
}
 800e53a:	4618      	mov	r0, r3
 800e53c:	3718      	adds	r7, #24
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}

0800e542 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e542:	b580      	push	{r7, lr}
 800e544:	b08c      	sub	sp, #48	; 0x30
 800e546:	af00      	add	r7, sp, #0
 800e548:	60f8      	str	r0, [r7, #12]
 800e54a:	60b9      	str	r1, [r7, #8]
 800e54c:	607a      	str	r2, [r7, #4]
 800e54e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e550:	2301      	movs	r3, #1
 800e552:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e554:	2300      	movs	r3, #0
 800e556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e560:	2b01      	cmp	r3, #1
 800e562:	d101      	bne.n	800e568 <HAL_SPI_TransmitReceive+0x26>
 800e564:	2302      	movs	r3, #2
 800e566:	e18a      	b.n	800e87e <HAL_SPI_TransmitReceive+0x33c>
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2201      	movs	r2, #1
 800e56c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e570:	f7fb f958 	bl	8009824 <HAL_GetTick>
 800e574:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e57c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e586:	887b      	ldrh	r3, [r7, #2]
 800e588:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e58a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e58e:	2b01      	cmp	r3, #1
 800e590:	d00f      	beq.n	800e5b2 <HAL_SPI_TransmitReceive+0x70>
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e598:	d107      	bne.n	800e5aa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	689b      	ldr	r3, [r3, #8]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d103      	bne.n	800e5aa <HAL_SPI_TransmitReceive+0x68>
 800e5a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e5a6:	2b04      	cmp	r3, #4
 800e5a8:	d003      	beq.n	800e5b2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e5aa:	2302      	movs	r3, #2
 800e5ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e5b0:	e15b      	b.n	800e86a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d005      	beq.n	800e5c4 <HAL_SPI_TransmitReceive+0x82>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d002      	beq.n	800e5c4 <HAL_SPI_TransmitReceive+0x82>
 800e5be:	887b      	ldrh	r3, [r7, #2]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d103      	bne.n	800e5cc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e5ca:	e14e      	b.n	800e86a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e5d2:	b2db      	uxtb	r3, r3
 800e5d4:	2b04      	cmp	r3, #4
 800e5d6:	d003      	beq.n	800e5e0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2205      	movs	r2, #5
 800e5dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	687a      	ldr	r2, [r7, #4]
 800e5ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	887a      	ldrh	r2, [r7, #2]
 800e5f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	887a      	ldrh	r2, [r7, #2]
 800e5f6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	68ba      	ldr	r2, [r7, #8]
 800e5fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	887a      	ldrh	r2, [r7, #2]
 800e602:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	887a      	ldrh	r2, [r7, #2]
 800e608:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2200      	movs	r2, #0
 800e60e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2200      	movs	r2, #0
 800e614:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e620:	2b40      	cmp	r3, #64	; 0x40
 800e622:	d007      	beq.n	800e634 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	681a      	ldr	r2, [r3, #0]
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e632:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	68db      	ldr	r3, [r3, #12]
 800e638:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e63c:	d178      	bne.n	800e730 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d002      	beq.n	800e64c <HAL_SPI_TransmitReceive+0x10a>
 800e646:	8b7b      	ldrh	r3, [r7, #26]
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d166      	bne.n	800e71a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e650:	881a      	ldrh	r2, [r3, #0]
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e65c:	1c9a      	adds	r2, r3, #2
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e666:	b29b      	uxth	r3, r3
 800e668:	3b01      	subs	r3, #1
 800e66a:	b29a      	uxth	r2, r3
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e670:	e053      	b.n	800e71a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	689b      	ldr	r3, [r3, #8]
 800e678:	f003 0302 	and.w	r3, r3, #2
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	d11b      	bne.n	800e6b8 <HAL_SPI_TransmitReceive+0x176>
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e684:	b29b      	uxth	r3, r3
 800e686:	2b00      	cmp	r3, #0
 800e688:	d016      	beq.n	800e6b8 <HAL_SPI_TransmitReceive+0x176>
 800e68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68c:	2b01      	cmp	r3, #1
 800e68e:	d113      	bne.n	800e6b8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e694:	881a      	ldrh	r2, [r3, #0]
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6a0:	1c9a      	adds	r2, r3, #2
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	3b01      	subs	r3, #1
 800e6ae:	b29a      	uxth	r2, r3
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	689b      	ldr	r3, [r3, #8]
 800e6be:	f003 0301 	and.w	r3, r3, #1
 800e6c2:	2b01      	cmp	r3, #1
 800e6c4:	d119      	bne.n	800e6fa <HAL_SPI_TransmitReceive+0x1b8>
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d014      	beq.n	800e6fa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	68da      	ldr	r2, [r3, #12]
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6da:	b292      	uxth	r2, r2
 800e6dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6e2:	1c9a      	adds	r2, r3, #2
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	3b01      	subs	r3, #1
 800e6f0:	b29a      	uxth	r2, r3
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e6fa:	f7fb f893 	bl	8009824 <HAL_GetTick>
 800e6fe:	4602      	mov	r2, r0
 800e700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e702:	1ad3      	subs	r3, r2, r3
 800e704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e706:	429a      	cmp	r2, r3
 800e708:	d807      	bhi.n	800e71a <HAL_SPI_TransmitReceive+0x1d8>
 800e70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e710:	d003      	beq.n	800e71a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e712:	2303      	movs	r3, #3
 800e714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e718:	e0a7      	b.n	800e86a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e71e:	b29b      	uxth	r3, r3
 800e720:	2b00      	cmp	r3, #0
 800e722:	d1a6      	bne.n	800e672 <HAL_SPI_TransmitReceive+0x130>
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e728:	b29b      	uxth	r3, r3
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d1a1      	bne.n	800e672 <HAL_SPI_TransmitReceive+0x130>
 800e72e:	e07c      	b.n	800e82a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d002      	beq.n	800e73e <HAL_SPI_TransmitReceive+0x1fc>
 800e738:	8b7b      	ldrh	r3, [r7, #26]
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	d16b      	bne.n	800e816 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	330c      	adds	r3, #12
 800e748:	7812      	ldrb	r2, [r2, #0]
 800e74a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e750:	1c5a      	adds	r2, r3, #1
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e75a:	b29b      	uxth	r3, r3
 800e75c:	3b01      	subs	r3, #1
 800e75e:	b29a      	uxth	r2, r3
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e764:	e057      	b.n	800e816 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	689b      	ldr	r3, [r3, #8]
 800e76c:	f003 0302 	and.w	r3, r3, #2
 800e770:	2b02      	cmp	r3, #2
 800e772:	d11c      	bne.n	800e7ae <HAL_SPI_TransmitReceive+0x26c>
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e778:	b29b      	uxth	r3, r3
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d017      	beq.n	800e7ae <HAL_SPI_TransmitReceive+0x26c>
 800e77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e780:	2b01      	cmp	r3, #1
 800e782:	d114      	bne.n	800e7ae <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	330c      	adds	r3, #12
 800e78e:	7812      	ldrb	r2, [r2, #0]
 800e790:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e796:	1c5a      	adds	r2, r3, #1
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	3b01      	subs	r3, #1
 800e7a4:	b29a      	uxth	r2, r3
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	689b      	ldr	r3, [r3, #8]
 800e7b4:	f003 0301 	and.w	r3, r3, #1
 800e7b8:	2b01      	cmp	r3, #1
 800e7ba:	d119      	bne.n	800e7f0 <HAL_SPI_TransmitReceive+0x2ae>
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d014      	beq.n	800e7f0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	68da      	ldr	r2, [r3, #12]
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7d0:	b2d2      	uxtb	r2, r2
 800e7d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7d8:	1c5a      	adds	r2, r3, #1
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	3b01      	subs	r3, #1
 800e7e6:	b29a      	uxth	r2, r3
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e7f0:	f7fb f818 	bl	8009824 <HAL_GetTick>
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f8:	1ad3      	subs	r3, r2, r3
 800e7fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d803      	bhi.n	800e808 <HAL_SPI_TransmitReceive+0x2c6>
 800e800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e802:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e806:	d102      	bne.n	800e80e <HAL_SPI_TransmitReceive+0x2cc>
 800e808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d103      	bne.n	800e816 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e80e:	2303      	movs	r3, #3
 800e810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e814:	e029      	b.n	800e86a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d1a2      	bne.n	800e766 <HAL_SPI_TransmitReceive+0x224>
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e824:	b29b      	uxth	r3, r3
 800e826:	2b00      	cmp	r3, #0
 800e828:	d19d      	bne.n	800e766 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e82a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e82c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	f000 f8f8 	bl	800ea24 <SPI_EndRxTxTransaction>
 800e834:	4603      	mov	r3, r0
 800e836:	2b00      	cmp	r3, #0
 800e838:	d006      	beq.n	800e848 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e83a:	2301      	movs	r3, #1
 800e83c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2220      	movs	r2, #32
 800e844:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e846:	e010      	b.n	800e86a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	689b      	ldr	r3, [r3, #8]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d10b      	bne.n	800e868 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e850:	2300      	movs	r3, #0
 800e852:	617b      	str	r3, [r7, #20]
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	68db      	ldr	r3, [r3, #12]
 800e85a:	617b      	str	r3, [r7, #20]
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	689b      	ldr	r3, [r3, #8]
 800e862:	617b      	str	r3, [r7, #20]
 800e864:	697b      	ldr	r3, [r7, #20]
 800e866:	e000      	b.n	800e86a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e868:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2201      	movs	r2, #1
 800e86e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	2200      	movs	r2, #0
 800e876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e87a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3730      	adds	r7, #48	; 0x30
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}

0800e886 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e886:	b580      	push	{r7, lr}
 800e888:	b084      	sub	sp, #16
 800e88a:	af00      	add	r7, sp, #0
 800e88c:	60f8      	str	r0, [r7, #12]
 800e88e:	60b9      	str	r1, [r7, #8]
 800e890:	603b      	str	r3, [r7, #0]
 800e892:	4613      	mov	r3, r2
 800e894:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e896:	e04c      	b.n	800e932 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e898:	683b      	ldr	r3, [r7, #0]
 800e89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e89e:	d048      	beq.n	800e932 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e8a0:	f7fa ffc0 	bl	8009824 <HAL_GetTick>
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	69bb      	ldr	r3, [r7, #24]
 800e8a8:	1ad3      	subs	r3, r2, r3
 800e8aa:	683a      	ldr	r2, [r7, #0]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d902      	bls.n	800e8b6 <SPI_WaitFlagStateUntilTimeout+0x30>
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d13d      	bne.n	800e932 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	685a      	ldr	r2, [r3, #4]
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e8c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e8ce:	d111      	bne.n	800e8f4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	689b      	ldr	r3, [r3, #8]
 800e8d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8d8:	d004      	beq.n	800e8e4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8e2:	d107      	bne.n	800e8f4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e8f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8fc:	d10f      	bne.n	800e91e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	681a      	ldr	r2, [r3, #0]
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e90c:	601a      	str	r2, [r3, #0]
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e91c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2201      	movs	r2, #1
 800e922:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2200      	movs	r2, #0
 800e92a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e92e:	2303      	movs	r3, #3
 800e930:	e00f      	b.n	800e952 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	689a      	ldr	r2, [r3, #8]
 800e938:	68bb      	ldr	r3, [r7, #8]
 800e93a:	4013      	ands	r3, r2
 800e93c:	68ba      	ldr	r2, [r7, #8]
 800e93e:	429a      	cmp	r2, r3
 800e940:	bf0c      	ite	eq
 800e942:	2301      	moveq	r3, #1
 800e944:	2300      	movne	r3, #0
 800e946:	b2db      	uxtb	r3, r3
 800e948:	461a      	mov	r2, r3
 800e94a:	79fb      	ldrb	r3, [r7, #7]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d1a3      	bne.n	800e898 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800e950:	2300      	movs	r3, #0
}
 800e952:	4618      	mov	r0, r3
 800e954:	3710      	adds	r7, #16
 800e956:	46bd      	mov	sp, r7
 800e958:	bd80      	pop	{r7, pc}

0800e95a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e95a:	b580      	push	{r7, lr}
 800e95c:	b086      	sub	sp, #24
 800e95e:	af02      	add	r7, sp, #8
 800e960:	60f8      	str	r0, [r7, #12]
 800e962:	60b9      	str	r1, [r7, #8]
 800e964:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e96e:	d111      	bne.n	800e994 <SPI_EndRxTransaction+0x3a>
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	689b      	ldr	r3, [r3, #8]
 800e974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e978:	d004      	beq.n	800e984 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	689b      	ldr	r3, [r3, #8]
 800e97e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e982:	d107      	bne.n	800e994 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	681a      	ldr	r2, [r3, #0]
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e992:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	685b      	ldr	r3, [r3, #4]
 800e998:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e99c:	d12a      	bne.n	800e9f4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	689b      	ldr	r3, [r3, #8]
 800e9a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e9a6:	d012      	beq.n	800e9ce <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	9300      	str	r3, [sp, #0]
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	2180      	movs	r1, #128	; 0x80
 800e9b2:	68f8      	ldr	r0, [r7, #12]
 800e9b4:	f7ff ff67 	bl	800e886 <SPI_WaitFlagStateUntilTimeout>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d02d      	beq.n	800ea1a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9c2:	f043 0220 	orr.w	r2, r3, #32
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e9ca:	2303      	movs	r3, #3
 800e9cc:	e026      	b.n	800ea1c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	9300      	str	r3, [sp, #0]
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	2101      	movs	r1, #1
 800e9d8:	68f8      	ldr	r0, [r7, #12]
 800e9da:	f7ff ff54 	bl	800e886 <SPI_WaitFlagStateUntilTimeout>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d01a      	beq.n	800ea1a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9e8:	f043 0220 	orr.w	r2, r3, #32
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e9f0:	2303      	movs	r3, #3
 800e9f2:	e013      	b.n	800ea1c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	2101      	movs	r1, #1
 800e9fe:	68f8      	ldr	r0, [r7, #12]
 800ea00:	f7ff ff41 	bl	800e886 <SPI_WaitFlagStateUntilTimeout>
 800ea04:	4603      	mov	r3, r0
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d007      	beq.n	800ea1a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea0e:	f043 0220 	orr.w	r2, r3, #32
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ea16:	2303      	movs	r3, #3
 800ea18:	e000      	b.n	800ea1c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ea1a:	2300      	movs	r3, #0
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3710      	adds	r7, #16
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}

0800ea24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b088      	sub	sp, #32
 800ea28:	af02      	add	r7, sp, #8
 800ea2a:	60f8      	str	r0, [r7, #12]
 800ea2c:	60b9      	str	r1, [r7, #8]
 800ea2e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ea30:	4b1b      	ldr	r3, [pc, #108]	; (800eaa0 <SPI_EndRxTxTransaction+0x7c>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	4a1b      	ldr	r2, [pc, #108]	; (800eaa4 <SPI_EndRxTxTransaction+0x80>)
 800ea36:	fba2 2303 	umull	r2, r3, r2, r3
 800ea3a:	0d5b      	lsrs	r3, r3, #21
 800ea3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ea40:	fb02 f303 	mul.w	r3, r2, r3
 800ea44:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	685b      	ldr	r3, [r3, #4]
 800ea4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea4e:	d112      	bne.n	800ea76 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	9300      	str	r3, [sp, #0]
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	2200      	movs	r2, #0
 800ea58:	2180      	movs	r1, #128	; 0x80
 800ea5a:	68f8      	ldr	r0, [r7, #12]
 800ea5c:	f7ff ff13 	bl	800e886 <SPI_WaitFlagStateUntilTimeout>
 800ea60:	4603      	mov	r3, r0
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d016      	beq.n	800ea94 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea6a:	f043 0220 	orr.w	r2, r3, #32
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ea72:	2303      	movs	r3, #3
 800ea74:	e00f      	b.n	800ea96 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d00a      	beq.n	800ea92 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	3b01      	subs	r3, #1
 800ea80:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	689b      	ldr	r3, [r3, #8]
 800ea88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea8c:	2b80      	cmp	r3, #128	; 0x80
 800ea8e:	d0f2      	beq.n	800ea76 <SPI_EndRxTxTransaction+0x52>
 800ea90:	e000      	b.n	800ea94 <SPI_EndRxTxTransaction+0x70>
        break;
 800ea92:	bf00      	nop
  }

  return HAL_OK;
 800ea94:	2300      	movs	r3, #0
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3718      	adds	r7, #24
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	20000000 	.word	0x20000000
 800eaa4:	165e9f81 	.word	0x165e9f81

0800eaa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d101      	bne.n	800eaba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eab6:	2301      	movs	r3, #1
 800eab8:	e01d      	b.n	800eaf6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eac0:	b2db      	uxtb	r3, r3
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d106      	bne.n	800ead4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f7f8 fbe0 	bl	8007294 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2202      	movs	r2, #2
 800ead8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681a      	ldr	r2, [r3, #0]
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	3304      	adds	r3, #4
 800eae4:	4619      	mov	r1, r3
 800eae6:	4610      	mov	r0, r2
 800eae8:	f000 fb56 	bl	800f198 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2201      	movs	r2, #1
 800eaf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eaf4:	2300      	movs	r3, #0
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3708      	adds	r7, #8
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}

0800eafe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eafe:	b480      	push	{r7}
 800eb00:	b085      	sub	sp, #20
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	68da      	ldr	r2, [r3, #12]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	f042 0201 	orr.w	r2, r2, #1
 800eb14:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	689b      	ldr	r3, [r3, #8]
 800eb1c:	f003 0307 	and.w	r3, r3, #7
 800eb20:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	2b06      	cmp	r3, #6
 800eb26:	d007      	beq.n	800eb38 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	681a      	ldr	r2, [r3, #0]
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f042 0201 	orr.w	r2, r2, #1
 800eb36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eb38:	2300      	movs	r3, #0
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3714      	adds	r7, #20
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb44:	4770      	bx	lr

0800eb46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800eb46:	b580      	push	{r7, lr}
 800eb48:	b082      	sub	sp, #8
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d101      	bne.n	800eb58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800eb54:	2301      	movs	r3, #1
 800eb56:	e01d      	b.n	800eb94 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb5e:	b2db      	uxtb	r3, r3
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d106      	bne.n	800eb72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2200      	movs	r2, #0
 800eb68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f7f8 fb1d 	bl	80071ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2202      	movs	r2, #2
 800eb76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681a      	ldr	r2, [r3, #0]
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	3304      	adds	r3, #4
 800eb82:	4619      	mov	r1, r3
 800eb84:	4610      	mov	r0, r2
 800eb86:	f000 fb07 	bl	800f198 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2201      	movs	r2, #1
 800eb8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb92:	2300      	movs	r3, #0
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3708      	adds	r7, #8
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	2201      	movs	r2, #1
 800ebac:	6839      	ldr	r1, [r7, #0]
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f000 fd42 	bl	800f638 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	4a15      	ldr	r2, [pc, #84]	; (800ec10 <HAL_TIM_PWM_Start+0x74>)
 800ebba:	4293      	cmp	r3, r2
 800ebbc:	d004      	beq.n	800ebc8 <HAL_TIM_PWM_Start+0x2c>
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	4a14      	ldr	r2, [pc, #80]	; (800ec14 <HAL_TIM_PWM_Start+0x78>)
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d101      	bne.n	800ebcc <HAL_TIM_PWM_Start+0x30>
 800ebc8:	2301      	movs	r3, #1
 800ebca:	e000      	b.n	800ebce <HAL_TIM_PWM_Start+0x32>
 800ebcc:	2300      	movs	r3, #0
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d007      	beq.n	800ebe2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ebe0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	689b      	ldr	r3, [r3, #8]
 800ebe8:	f003 0307 	and.w	r3, r3, #7
 800ebec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2b06      	cmp	r3, #6
 800ebf2:	d007      	beq.n	800ec04 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f042 0201 	orr.w	r2, r2, #1
 800ec02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ec04:	2300      	movs	r3, #0
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3710      	adds	r7, #16
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	40010000 	.word	0x40010000
 800ec14:	40010400 	.word	0x40010400

0800ec18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b086      	sub	sp, #24
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d101      	bne.n	800ec2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ec28:	2301      	movs	r3, #1
 800ec2a:	e083      	b.n	800ed34 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d106      	bne.n	800ec46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f7f8 fbb7 	bl	80073b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	2202      	movs	r2, #2
 800ec4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	689b      	ldr	r3, [r3, #8]
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	6812      	ldr	r2, [r2, #0]
 800ec58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ec5c:	f023 0307 	bic.w	r3, r3, #7
 800ec60:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681a      	ldr	r2, [r3, #0]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	3304      	adds	r3, #4
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	4610      	mov	r0, r2
 800ec6e:	f000 fa93 	bl	800f198 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	689b      	ldr	r3, [r3, #8]
 800ec78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	699b      	ldr	r3, [r3, #24]
 800ec80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	6a1b      	ldr	r3, [r3, #32]
 800ec88:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	697a      	ldr	r2, [r7, #20]
 800ec90:	4313      	orrs	r3, r2
 800ec92:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec9a:	f023 0303 	bic.w	r3, r3, #3
 800ec9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	689a      	ldr	r2, [r3, #8]
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	699b      	ldr	r3, [r3, #24]
 800eca8:	021b      	lsls	r3, r3, #8
 800ecaa:	4313      	orrs	r3, r2
 800ecac:	693a      	ldr	r2, [r7, #16]
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ecb8:	f023 030c 	bic.w	r3, r3, #12
 800ecbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ecbe:	693b      	ldr	r3, [r7, #16]
 800ecc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ecc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ecc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	68da      	ldr	r2, [r3, #12]
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	69db      	ldr	r3, [r3, #28]
 800ecd2:	021b      	lsls	r3, r3, #8
 800ecd4:	4313      	orrs	r3, r2
 800ecd6:	693a      	ldr	r2, [r7, #16]
 800ecd8:	4313      	orrs	r3, r2
 800ecda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	691b      	ldr	r3, [r3, #16]
 800ece0:	011a      	lsls	r2, r3, #4
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	6a1b      	ldr	r3, [r3, #32]
 800ece6:	031b      	lsls	r3, r3, #12
 800ece8:	4313      	orrs	r3, r2
 800ecea:	693a      	ldr	r2, [r7, #16]
 800ecec:	4313      	orrs	r3, r2
 800ecee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ecf6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ecfe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	685a      	ldr	r2, [r3, #4]
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	695b      	ldr	r3, [r3, #20]
 800ed08:	011b      	lsls	r3, r3, #4
 800ed0a:	4313      	orrs	r3, r2
 800ed0c:	68fa      	ldr	r2, [r7, #12]
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	697a      	ldr	r2, [r7, #20]
 800ed18:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	693a      	ldr	r2, [r7, #16]
 800ed20:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	68fa      	ldr	r2, [r7, #12]
 800ed28:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2201      	movs	r2, #1
 800ed2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ed32:	2300      	movs	r3, #0
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3718      	adds	r7, #24
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}

0800ed3c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b082      	sub	sp, #8
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d002      	beq.n	800ed52 <HAL_TIM_Encoder_Start+0x16>
 800ed4c:	2b04      	cmp	r3, #4
 800ed4e:	d008      	beq.n	800ed62 <HAL_TIM_Encoder_Start+0x26>
 800ed50:	e00f      	b.n	800ed72 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	2201      	movs	r2, #1
 800ed58:	2100      	movs	r1, #0
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f000 fc6c 	bl	800f638 <TIM_CCxChannelCmd>
      break;
 800ed60:	e016      	b.n	800ed90 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	2201      	movs	r2, #1
 800ed68:	2104      	movs	r1, #4
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f000 fc64 	bl	800f638 <TIM_CCxChannelCmd>
      break;
 800ed70:	e00e      	b.n	800ed90 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	2201      	movs	r2, #1
 800ed78:	2100      	movs	r1, #0
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f000 fc5c 	bl	800f638 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	2201      	movs	r2, #1
 800ed86:	2104      	movs	r1, #4
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f000 fc55 	bl	800f638 <TIM_CCxChannelCmd>
      break;
 800ed8e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	681a      	ldr	r2, [r3, #0]
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f042 0201 	orr.w	r2, r2, #1
 800ed9e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800eda0:	2300      	movs	r3, #0
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3708      	adds	r7, #8
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}

0800edaa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800edaa:	b580      	push	{r7, lr}
 800edac:	b082      	sub	sp, #8
 800edae:	af00      	add	r7, sp, #0
 800edb0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	691b      	ldr	r3, [r3, #16]
 800edb8:	f003 0302 	and.w	r3, r3, #2
 800edbc:	2b02      	cmp	r3, #2
 800edbe:	d122      	bne.n	800ee06 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	68db      	ldr	r3, [r3, #12]
 800edc6:	f003 0302 	and.w	r3, r3, #2
 800edca:	2b02      	cmp	r3, #2
 800edcc:	d11b      	bne.n	800ee06 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	f06f 0202 	mvn.w	r2, #2
 800edd6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2201      	movs	r2, #1
 800eddc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	699b      	ldr	r3, [r3, #24]
 800ede4:	f003 0303 	and.w	r3, r3, #3
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d003      	beq.n	800edf4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f000 f9b5 	bl	800f15c <HAL_TIM_IC_CaptureCallback>
 800edf2:	e005      	b.n	800ee00 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f000 f9a7 	bl	800f148 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f000 f9b8 	bl	800f170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2200      	movs	r2, #0
 800ee04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	691b      	ldr	r3, [r3, #16]
 800ee0c:	f003 0304 	and.w	r3, r3, #4
 800ee10:	2b04      	cmp	r3, #4
 800ee12:	d122      	bne.n	800ee5a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	68db      	ldr	r3, [r3, #12]
 800ee1a:	f003 0304 	and.w	r3, r3, #4
 800ee1e:	2b04      	cmp	r3, #4
 800ee20:	d11b      	bne.n	800ee5a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f06f 0204 	mvn.w	r2, #4
 800ee2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2202      	movs	r2, #2
 800ee30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	699b      	ldr	r3, [r3, #24]
 800ee38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d003      	beq.n	800ee48 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f000 f98b 	bl	800f15c <HAL_TIM_IC_CaptureCallback>
 800ee46:	e005      	b.n	800ee54 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f000 f97d 	bl	800f148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f000 f98e 	bl	800f170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2200      	movs	r2, #0
 800ee58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	691b      	ldr	r3, [r3, #16]
 800ee60:	f003 0308 	and.w	r3, r3, #8
 800ee64:	2b08      	cmp	r3, #8
 800ee66:	d122      	bne.n	800eeae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	68db      	ldr	r3, [r3, #12]
 800ee6e:	f003 0308 	and.w	r3, r3, #8
 800ee72:	2b08      	cmp	r3, #8
 800ee74:	d11b      	bne.n	800eeae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	f06f 0208 	mvn.w	r2, #8
 800ee7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2204      	movs	r2, #4
 800ee84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	69db      	ldr	r3, [r3, #28]
 800ee8c:	f003 0303 	and.w	r3, r3, #3
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d003      	beq.n	800ee9c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f000 f961 	bl	800f15c <HAL_TIM_IC_CaptureCallback>
 800ee9a:	e005      	b.n	800eea8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f000 f953 	bl	800f148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f000 f964 	bl	800f170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2200      	movs	r2, #0
 800eeac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	691b      	ldr	r3, [r3, #16]
 800eeb4:	f003 0310 	and.w	r3, r3, #16
 800eeb8:	2b10      	cmp	r3, #16
 800eeba:	d122      	bne.n	800ef02 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	68db      	ldr	r3, [r3, #12]
 800eec2:	f003 0310 	and.w	r3, r3, #16
 800eec6:	2b10      	cmp	r3, #16
 800eec8:	d11b      	bne.n	800ef02 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f06f 0210 	mvn.w	r2, #16
 800eed2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2208      	movs	r2, #8
 800eed8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	69db      	ldr	r3, [r3, #28]
 800eee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d003      	beq.n	800eef0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 f937 	bl	800f15c <HAL_TIM_IC_CaptureCallback>
 800eeee:	e005      	b.n	800eefc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	f000 f929 	bl	800f148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f000 f93a 	bl	800f170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2200      	movs	r2, #0
 800ef00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	691b      	ldr	r3, [r3, #16]
 800ef08:	f003 0301 	and.w	r3, r3, #1
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d10e      	bne.n	800ef2e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	f003 0301 	and.w	r3, r3, #1
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d107      	bne.n	800ef2e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	f06f 0201 	mvn.w	r2, #1
 800ef26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f7f6 ff2d 	bl	8005d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	691b      	ldr	r3, [r3, #16]
 800ef34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef38:	2b80      	cmp	r3, #128	; 0x80
 800ef3a:	d10e      	bne.n	800ef5a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	68db      	ldr	r3, [r3, #12]
 800ef42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef46:	2b80      	cmp	r3, #128	; 0x80
 800ef48:	d107      	bne.n	800ef5a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ef52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f000 fc6d 	bl	800f834 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	691b      	ldr	r3, [r3, #16]
 800ef60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef64:	2b40      	cmp	r3, #64	; 0x40
 800ef66:	d10e      	bne.n	800ef86 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	68db      	ldr	r3, [r3, #12]
 800ef6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef72:	2b40      	cmp	r3, #64	; 0x40
 800ef74:	d107      	bne.n	800ef86 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ef7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f000 f8ff 	bl	800f184 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	691b      	ldr	r3, [r3, #16]
 800ef8c:	f003 0320 	and.w	r3, r3, #32
 800ef90:	2b20      	cmp	r3, #32
 800ef92:	d10e      	bne.n	800efb2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	68db      	ldr	r3, [r3, #12]
 800ef9a:	f003 0320 	and.w	r3, r3, #32
 800ef9e:	2b20      	cmp	r3, #32
 800efa0:	d107      	bne.n	800efb2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	f06f 0220 	mvn.w	r2, #32
 800efaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f000 fc37 	bl	800f820 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800efb2:	bf00      	nop
 800efb4:	3708      	adds	r7, #8
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
	...

0800efbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	60f8      	str	r0, [r7, #12]
 800efc4:	60b9      	str	r1, [r7, #8]
 800efc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800efce:	2b01      	cmp	r3, #1
 800efd0:	d101      	bne.n	800efd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800efd2:	2302      	movs	r3, #2
 800efd4:	e0b4      	b.n	800f140 <HAL_TIM_PWM_ConfigChannel+0x184>
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2201      	movs	r2, #1
 800efda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	2202      	movs	r2, #2
 800efe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2b0c      	cmp	r3, #12
 800efea:	f200 809f 	bhi.w	800f12c <HAL_TIM_PWM_ConfigChannel+0x170>
 800efee:	a201      	add	r2, pc, #4	; (adr r2, 800eff4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800eff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eff4:	0800f029 	.word	0x0800f029
 800eff8:	0800f12d 	.word	0x0800f12d
 800effc:	0800f12d 	.word	0x0800f12d
 800f000:	0800f12d 	.word	0x0800f12d
 800f004:	0800f069 	.word	0x0800f069
 800f008:	0800f12d 	.word	0x0800f12d
 800f00c:	0800f12d 	.word	0x0800f12d
 800f010:	0800f12d 	.word	0x0800f12d
 800f014:	0800f0ab 	.word	0x0800f0ab
 800f018:	0800f12d 	.word	0x0800f12d
 800f01c:	0800f12d 	.word	0x0800f12d
 800f020:	0800f12d 	.word	0x0800f12d
 800f024:	0800f0eb 	.word	0x0800f0eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	68b9      	ldr	r1, [r7, #8]
 800f02e:	4618      	mov	r0, r3
 800f030:	f000 f952 	bl	800f2d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	699a      	ldr	r2, [r3, #24]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f042 0208 	orr.w	r2, r2, #8
 800f042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	699a      	ldr	r2, [r3, #24]
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f022 0204 	bic.w	r2, r2, #4
 800f052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	6999      	ldr	r1, [r3, #24]
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	691a      	ldr	r2, [r3, #16]
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	430a      	orrs	r2, r1
 800f064:	619a      	str	r2, [r3, #24]
      break;
 800f066:	e062      	b.n	800f12e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	68b9      	ldr	r1, [r7, #8]
 800f06e:	4618      	mov	r0, r3
 800f070:	f000 f9a2 	bl	800f3b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	699a      	ldr	r2, [r3, #24]
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	699a      	ldr	r2, [r3, #24]
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	6999      	ldr	r1, [r3, #24]
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	691b      	ldr	r3, [r3, #16]
 800f09e:	021a      	lsls	r2, r3, #8
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	430a      	orrs	r2, r1
 800f0a6:	619a      	str	r2, [r3, #24]
      break;
 800f0a8:	e041      	b.n	800f12e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	68b9      	ldr	r1, [r7, #8]
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f000 f9f7 	bl	800f4a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	69da      	ldr	r2, [r3, #28]
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f042 0208 	orr.w	r2, r2, #8
 800f0c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	69da      	ldr	r2, [r3, #28]
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	f022 0204 	bic.w	r2, r2, #4
 800f0d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	69d9      	ldr	r1, [r3, #28]
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	691a      	ldr	r2, [r3, #16]
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	430a      	orrs	r2, r1
 800f0e6:	61da      	str	r2, [r3, #28]
      break;
 800f0e8:	e021      	b.n	800f12e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	68b9      	ldr	r1, [r7, #8]
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f000 fa4b 	bl	800f58c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	69da      	ldr	r2, [r3, #28]
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	69da      	ldr	r2, [r3, #28]
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	69d9      	ldr	r1, [r3, #28]
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	691b      	ldr	r3, [r3, #16]
 800f120:	021a      	lsls	r2, r3, #8
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	430a      	orrs	r2, r1
 800f128:	61da      	str	r2, [r3, #28]
      break;
 800f12a:	e000      	b.n	800f12e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f12c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2201      	movs	r2, #1
 800f132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	2200      	movs	r2, #0
 800f13a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f13e:	2300      	movs	r3, #0
}
 800f140:	4618      	mov	r0, r3
 800f142:	3710      	adds	r7, #16
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}

0800f148 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f148:	b480      	push	{r7}
 800f14a:	b083      	sub	sp, #12
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f150:	bf00      	nop
 800f152:	370c      	adds	r7, #12
 800f154:	46bd      	mov	sp, r7
 800f156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15a:	4770      	bx	lr

0800f15c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f15c:	b480      	push	{r7}
 800f15e:	b083      	sub	sp, #12
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f164:	bf00      	nop
 800f166:	370c      	adds	r7, #12
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f170:	b480      	push	{r7}
 800f172:	b083      	sub	sp, #12
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f178:	bf00      	nop
 800f17a:	370c      	adds	r7, #12
 800f17c:	46bd      	mov	sp, r7
 800f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f182:	4770      	bx	lr

0800f184 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f184:	b480      	push	{r7}
 800f186:	b083      	sub	sp, #12
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f18c:	bf00      	nop
 800f18e:	370c      	adds	r7, #12
 800f190:	46bd      	mov	sp, r7
 800f192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f196:	4770      	bx	lr

0800f198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f198:	b480      	push	{r7}
 800f19a:	b085      	sub	sp, #20
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	4a40      	ldr	r2, [pc, #256]	; (800f2ac <TIM_Base_SetConfig+0x114>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d013      	beq.n	800f1d8 <TIM_Base_SetConfig+0x40>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1b6:	d00f      	beq.n	800f1d8 <TIM_Base_SetConfig+0x40>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	4a3d      	ldr	r2, [pc, #244]	; (800f2b0 <TIM_Base_SetConfig+0x118>)
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d00b      	beq.n	800f1d8 <TIM_Base_SetConfig+0x40>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4a3c      	ldr	r2, [pc, #240]	; (800f2b4 <TIM_Base_SetConfig+0x11c>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d007      	beq.n	800f1d8 <TIM_Base_SetConfig+0x40>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	4a3b      	ldr	r2, [pc, #236]	; (800f2b8 <TIM_Base_SetConfig+0x120>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d003      	beq.n	800f1d8 <TIM_Base_SetConfig+0x40>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4a3a      	ldr	r2, [pc, #232]	; (800f2bc <TIM_Base_SetConfig+0x124>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d108      	bne.n	800f1ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	68fa      	ldr	r2, [r7, #12]
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	4a2f      	ldr	r2, [pc, #188]	; (800f2ac <TIM_Base_SetConfig+0x114>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d02b      	beq.n	800f24a <TIM_Base_SetConfig+0xb2>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1f8:	d027      	beq.n	800f24a <TIM_Base_SetConfig+0xb2>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	4a2c      	ldr	r2, [pc, #176]	; (800f2b0 <TIM_Base_SetConfig+0x118>)
 800f1fe:	4293      	cmp	r3, r2
 800f200:	d023      	beq.n	800f24a <TIM_Base_SetConfig+0xb2>
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	4a2b      	ldr	r2, [pc, #172]	; (800f2b4 <TIM_Base_SetConfig+0x11c>)
 800f206:	4293      	cmp	r3, r2
 800f208:	d01f      	beq.n	800f24a <TIM_Base_SetConfig+0xb2>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	4a2a      	ldr	r2, [pc, #168]	; (800f2b8 <TIM_Base_SetConfig+0x120>)
 800f20e:	4293      	cmp	r3, r2
 800f210:	d01b      	beq.n	800f24a <TIM_Base_SetConfig+0xb2>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	4a29      	ldr	r2, [pc, #164]	; (800f2bc <TIM_Base_SetConfig+0x124>)
 800f216:	4293      	cmp	r3, r2
 800f218:	d017      	beq.n	800f24a <TIM_Base_SetConfig+0xb2>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	4a28      	ldr	r2, [pc, #160]	; (800f2c0 <TIM_Base_SetConfig+0x128>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d013      	beq.n	800f24a <TIM_Base_SetConfig+0xb2>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	4a27      	ldr	r2, [pc, #156]	; (800f2c4 <TIM_Base_SetConfig+0x12c>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d00f      	beq.n	800f24a <TIM_Base_SetConfig+0xb2>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	4a26      	ldr	r2, [pc, #152]	; (800f2c8 <TIM_Base_SetConfig+0x130>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d00b      	beq.n	800f24a <TIM_Base_SetConfig+0xb2>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	4a25      	ldr	r2, [pc, #148]	; (800f2cc <TIM_Base_SetConfig+0x134>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d007      	beq.n	800f24a <TIM_Base_SetConfig+0xb2>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	4a24      	ldr	r2, [pc, #144]	; (800f2d0 <TIM_Base_SetConfig+0x138>)
 800f23e:	4293      	cmp	r3, r2
 800f240:	d003      	beq.n	800f24a <TIM_Base_SetConfig+0xb2>
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	4a23      	ldr	r2, [pc, #140]	; (800f2d4 <TIM_Base_SetConfig+0x13c>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d108      	bne.n	800f25c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f252:	683b      	ldr	r3, [r7, #0]
 800f254:	68db      	ldr	r3, [r3, #12]
 800f256:	68fa      	ldr	r2, [r7, #12]
 800f258:	4313      	orrs	r3, r2
 800f25a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	695b      	ldr	r3, [r3, #20]
 800f266:	4313      	orrs	r3, r2
 800f268:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	68fa      	ldr	r2, [r7, #12]
 800f26e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	689a      	ldr	r2, [r3, #8]
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	681a      	ldr	r2, [r3, #0]
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	4a0a      	ldr	r2, [pc, #40]	; (800f2ac <TIM_Base_SetConfig+0x114>)
 800f284:	4293      	cmp	r3, r2
 800f286:	d003      	beq.n	800f290 <TIM_Base_SetConfig+0xf8>
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	4a0c      	ldr	r2, [pc, #48]	; (800f2bc <TIM_Base_SetConfig+0x124>)
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d103      	bne.n	800f298 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	691a      	ldr	r2, [r3, #16]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2201      	movs	r2, #1
 800f29c:	615a      	str	r2, [r3, #20]
}
 800f29e:	bf00      	nop
 800f2a0:	3714      	adds	r7, #20
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a8:	4770      	bx	lr
 800f2aa:	bf00      	nop
 800f2ac:	40010000 	.word	0x40010000
 800f2b0:	40000400 	.word	0x40000400
 800f2b4:	40000800 	.word	0x40000800
 800f2b8:	40000c00 	.word	0x40000c00
 800f2bc:	40010400 	.word	0x40010400
 800f2c0:	40014000 	.word	0x40014000
 800f2c4:	40014400 	.word	0x40014400
 800f2c8:	40014800 	.word	0x40014800
 800f2cc:	40001800 	.word	0x40001800
 800f2d0:	40001c00 	.word	0x40001c00
 800f2d4:	40002000 	.word	0x40002000

0800f2d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b087      	sub	sp, #28
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
 800f2e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6a1b      	ldr	r3, [r3, #32]
 800f2e6:	f023 0201 	bic.w	r2, r3, #1
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6a1b      	ldr	r3, [r3, #32]
 800f2f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	685b      	ldr	r3, [r3, #4]
 800f2f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	699b      	ldr	r3, [r3, #24]
 800f2fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	f023 0303 	bic.w	r3, r3, #3
 800f30e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	68fa      	ldr	r2, [r7, #12]
 800f316:	4313      	orrs	r3, r2
 800f318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	f023 0302 	bic.w	r3, r3, #2
 800f320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	689b      	ldr	r3, [r3, #8]
 800f326:	697a      	ldr	r2, [r7, #20]
 800f328:	4313      	orrs	r3, r2
 800f32a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	4a20      	ldr	r2, [pc, #128]	; (800f3b0 <TIM_OC1_SetConfig+0xd8>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d003      	beq.n	800f33c <TIM_OC1_SetConfig+0x64>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	4a1f      	ldr	r2, [pc, #124]	; (800f3b4 <TIM_OC1_SetConfig+0xdc>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d10c      	bne.n	800f356 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	f023 0308 	bic.w	r3, r3, #8
 800f342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	68db      	ldr	r3, [r3, #12]
 800f348:	697a      	ldr	r2, [r7, #20]
 800f34a:	4313      	orrs	r3, r2
 800f34c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	f023 0304 	bic.w	r3, r3, #4
 800f354:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	4a15      	ldr	r2, [pc, #84]	; (800f3b0 <TIM_OC1_SetConfig+0xd8>)
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d003      	beq.n	800f366 <TIM_OC1_SetConfig+0x8e>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4a14      	ldr	r2, [pc, #80]	; (800f3b4 <TIM_OC1_SetConfig+0xdc>)
 800f362:	4293      	cmp	r3, r2
 800f364:	d111      	bne.n	800f38a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f366:	693b      	ldr	r3, [r7, #16]
 800f368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f36c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	695b      	ldr	r3, [r3, #20]
 800f37a:	693a      	ldr	r2, [r7, #16]
 800f37c:	4313      	orrs	r3, r2
 800f37e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	699b      	ldr	r3, [r3, #24]
 800f384:	693a      	ldr	r2, [r7, #16]
 800f386:	4313      	orrs	r3, r2
 800f388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	693a      	ldr	r2, [r7, #16]
 800f38e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	68fa      	ldr	r2, [r7, #12]
 800f394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	685a      	ldr	r2, [r3, #4]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	697a      	ldr	r2, [r7, #20]
 800f3a2:	621a      	str	r2, [r3, #32]
}
 800f3a4:	bf00      	nop
 800f3a6:	371c      	adds	r7, #28
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr
 800f3b0:	40010000 	.word	0x40010000
 800f3b4:	40010400 	.word	0x40010400

0800f3b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b087      	sub	sp, #28
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6a1b      	ldr	r3, [r3, #32]
 800f3c6:	f023 0210 	bic.w	r2, r3, #16
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6a1b      	ldr	r3, [r3, #32]
 800f3d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	699b      	ldr	r3, [r3, #24]
 800f3de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f3ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	021b      	lsls	r3, r3, #8
 800f3f6:	68fa      	ldr	r2, [r7, #12]
 800f3f8:	4313      	orrs	r3, r2
 800f3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	f023 0320 	bic.w	r3, r3, #32
 800f402:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	689b      	ldr	r3, [r3, #8]
 800f408:	011b      	lsls	r3, r3, #4
 800f40a:	697a      	ldr	r2, [r7, #20]
 800f40c:	4313      	orrs	r3, r2
 800f40e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	4a22      	ldr	r2, [pc, #136]	; (800f49c <TIM_OC2_SetConfig+0xe4>)
 800f414:	4293      	cmp	r3, r2
 800f416:	d003      	beq.n	800f420 <TIM_OC2_SetConfig+0x68>
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	4a21      	ldr	r2, [pc, #132]	; (800f4a0 <TIM_OC2_SetConfig+0xe8>)
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d10d      	bne.n	800f43c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	68db      	ldr	r3, [r3, #12]
 800f42c:	011b      	lsls	r3, r3, #4
 800f42e:	697a      	ldr	r2, [r7, #20]
 800f430:	4313      	orrs	r3, r2
 800f432:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f43a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	4a17      	ldr	r2, [pc, #92]	; (800f49c <TIM_OC2_SetConfig+0xe4>)
 800f440:	4293      	cmp	r3, r2
 800f442:	d003      	beq.n	800f44c <TIM_OC2_SetConfig+0x94>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	4a16      	ldr	r2, [pc, #88]	; (800f4a0 <TIM_OC2_SetConfig+0xe8>)
 800f448:	4293      	cmp	r3, r2
 800f44a:	d113      	bne.n	800f474 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f44c:	693b      	ldr	r3, [r7, #16]
 800f44e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f452:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f45a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	695b      	ldr	r3, [r3, #20]
 800f460:	009b      	lsls	r3, r3, #2
 800f462:	693a      	ldr	r2, [r7, #16]
 800f464:	4313      	orrs	r3, r2
 800f466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	699b      	ldr	r3, [r3, #24]
 800f46c:	009b      	lsls	r3, r3, #2
 800f46e:	693a      	ldr	r2, [r7, #16]
 800f470:	4313      	orrs	r3, r2
 800f472:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	693a      	ldr	r2, [r7, #16]
 800f478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	68fa      	ldr	r2, [r7, #12]
 800f47e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f480:	683b      	ldr	r3, [r7, #0]
 800f482:	685a      	ldr	r2, [r3, #4]
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	697a      	ldr	r2, [r7, #20]
 800f48c:	621a      	str	r2, [r3, #32]
}
 800f48e:	bf00      	nop
 800f490:	371c      	adds	r7, #28
 800f492:	46bd      	mov	sp, r7
 800f494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f498:	4770      	bx	lr
 800f49a:	bf00      	nop
 800f49c:	40010000 	.word	0x40010000
 800f4a0:	40010400 	.word	0x40010400

0800f4a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b087      	sub	sp, #28
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6a1b      	ldr	r3, [r3, #32]
 800f4b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6a1b      	ldr	r3, [r3, #32]
 800f4be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	685b      	ldr	r3, [r3, #4]
 800f4c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	69db      	ldr	r3, [r3, #28]
 800f4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	f023 0303 	bic.w	r3, r3, #3
 800f4da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	68fa      	ldr	r2, [r7, #12]
 800f4e2:	4313      	orrs	r3, r2
 800f4e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f4ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	689b      	ldr	r3, [r3, #8]
 800f4f2:	021b      	lsls	r3, r3, #8
 800f4f4:	697a      	ldr	r2, [r7, #20]
 800f4f6:	4313      	orrs	r3, r2
 800f4f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4a21      	ldr	r2, [pc, #132]	; (800f584 <TIM_OC3_SetConfig+0xe0>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d003      	beq.n	800f50a <TIM_OC3_SetConfig+0x66>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4a20      	ldr	r2, [pc, #128]	; (800f588 <TIM_OC3_SetConfig+0xe4>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d10d      	bne.n	800f526 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	021b      	lsls	r3, r3, #8
 800f518:	697a      	ldr	r2, [r7, #20]
 800f51a:	4313      	orrs	r3, r2
 800f51c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4a16      	ldr	r2, [pc, #88]	; (800f584 <TIM_OC3_SetConfig+0xe0>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d003      	beq.n	800f536 <TIM_OC3_SetConfig+0x92>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	4a15      	ldr	r2, [pc, #84]	; (800f588 <TIM_OC3_SetConfig+0xe4>)
 800f532:	4293      	cmp	r3, r2
 800f534:	d113      	bne.n	800f55e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f536:	693b      	ldr	r3, [r7, #16]
 800f538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f53c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f53e:	693b      	ldr	r3, [r7, #16]
 800f540:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	695b      	ldr	r3, [r3, #20]
 800f54a:	011b      	lsls	r3, r3, #4
 800f54c:	693a      	ldr	r2, [r7, #16]
 800f54e:	4313      	orrs	r3, r2
 800f550:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	699b      	ldr	r3, [r3, #24]
 800f556:	011b      	lsls	r3, r3, #4
 800f558:	693a      	ldr	r2, [r7, #16]
 800f55a:	4313      	orrs	r3, r2
 800f55c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	693a      	ldr	r2, [r7, #16]
 800f562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	68fa      	ldr	r2, [r7, #12]
 800f568:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	685a      	ldr	r2, [r3, #4]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	697a      	ldr	r2, [r7, #20]
 800f576:	621a      	str	r2, [r3, #32]
}
 800f578:	bf00      	nop
 800f57a:	371c      	adds	r7, #28
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr
 800f584:	40010000 	.word	0x40010000
 800f588:	40010400 	.word	0x40010400

0800f58c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f58c:	b480      	push	{r7}
 800f58e:	b087      	sub	sp, #28
 800f590:	af00      	add	r7, sp, #0
 800f592:	6078      	str	r0, [r7, #4]
 800f594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6a1b      	ldr	r3, [r3, #32]
 800f59a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6a1b      	ldr	r3, [r3, #32]
 800f5a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	685b      	ldr	r3, [r3, #4]
 800f5ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	69db      	ldr	r3, [r3, #28]
 800f5b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f5ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f5c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	021b      	lsls	r3, r3, #8
 800f5ca:	68fa      	ldr	r2, [r7, #12]
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f5d0:	693b      	ldr	r3, [r7, #16]
 800f5d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f5d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	689b      	ldr	r3, [r3, #8]
 800f5dc:	031b      	lsls	r3, r3, #12
 800f5de:	693a      	ldr	r2, [r7, #16]
 800f5e0:	4313      	orrs	r3, r2
 800f5e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	4a12      	ldr	r2, [pc, #72]	; (800f630 <TIM_OC4_SetConfig+0xa4>)
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	d003      	beq.n	800f5f4 <TIM_OC4_SetConfig+0x68>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	4a11      	ldr	r2, [pc, #68]	; (800f634 <TIM_OC4_SetConfig+0xa8>)
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d109      	bne.n	800f608 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f5fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	695b      	ldr	r3, [r3, #20]
 800f600:	019b      	lsls	r3, r3, #6
 800f602:	697a      	ldr	r2, [r7, #20]
 800f604:	4313      	orrs	r3, r2
 800f606:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	697a      	ldr	r2, [r7, #20]
 800f60c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	68fa      	ldr	r2, [r7, #12]
 800f612:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	685a      	ldr	r2, [r3, #4]
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	693a      	ldr	r2, [r7, #16]
 800f620:	621a      	str	r2, [r3, #32]
}
 800f622:	bf00      	nop
 800f624:	371c      	adds	r7, #28
 800f626:	46bd      	mov	sp, r7
 800f628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62c:	4770      	bx	lr
 800f62e:	bf00      	nop
 800f630:	40010000 	.word	0x40010000
 800f634:	40010400 	.word	0x40010400

0800f638 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f638:	b480      	push	{r7}
 800f63a:	b087      	sub	sp, #28
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	60f8      	str	r0, [r7, #12]
 800f640:	60b9      	str	r1, [r7, #8]
 800f642:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f644:	68bb      	ldr	r3, [r7, #8]
 800f646:	f003 031f 	and.w	r3, r3, #31
 800f64a:	2201      	movs	r2, #1
 800f64c:	fa02 f303 	lsl.w	r3, r2, r3
 800f650:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	6a1a      	ldr	r2, [r3, #32]
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	43db      	mvns	r3, r3
 800f65a:	401a      	ands	r2, r3
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	6a1a      	ldr	r2, [r3, #32]
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	f003 031f 	and.w	r3, r3, #31
 800f66a:	6879      	ldr	r1, [r7, #4]
 800f66c:	fa01 f303 	lsl.w	r3, r1, r3
 800f670:	431a      	orrs	r2, r3
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	621a      	str	r2, [r3, #32]
}
 800f676:	bf00      	nop
 800f678:	371c      	adds	r7, #28
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr
	...

0800f684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f684:	b480      	push	{r7}
 800f686:	b085      	sub	sp, #20
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
 800f68c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f694:	2b01      	cmp	r3, #1
 800f696:	d101      	bne.n	800f69c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f698:	2302      	movs	r3, #2
 800f69a:	e05a      	b.n	800f752 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2201      	movs	r2, #1
 800f6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2202      	movs	r2, #2
 800f6a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	685b      	ldr	r3, [r3, #4]
 800f6b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	689b      	ldr	r3, [r3, #8]
 800f6ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f6c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	68fa      	ldr	r2, [r7, #12]
 800f6ca:	4313      	orrs	r3, r2
 800f6cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	68fa      	ldr	r2, [r7, #12]
 800f6d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4a21      	ldr	r2, [pc, #132]	; (800f760 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	d022      	beq.n	800f726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6e8:	d01d      	beq.n	800f726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	4a1d      	ldr	r2, [pc, #116]	; (800f764 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d018      	beq.n	800f726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	4a1b      	ldr	r2, [pc, #108]	; (800f768 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d013      	beq.n	800f726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	4a1a      	ldr	r2, [pc, #104]	; (800f76c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d00e      	beq.n	800f726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4a18      	ldr	r2, [pc, #96]	; (800f770 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	d009      	beq.n	800f726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	4a17      	ldr	r2, [pc, #92]	; (800f774 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d004      	beq.n	800f726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4a15      	ldr	r2, [pc, #84]	; (800f778 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d10c      	bne.n	800f740 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f72c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	685b      	ldr	r3, [r3, #4]
 800f732:	68ba      	ldr	r2, [r7, #8]
 800f734:	4313      	orrs	r3, r2
 800f736:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	68ba      	ldr	r2, [r7, #8]
 800f73e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2201      	movs	r2, #1
 800f744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	2200      	movs	r2, #0
 800f74c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f750:	2300      	movs	r3, #0
}
 800f752:	4618      	mov	r0, r3
 800f754:	3714      	adds	r7, #20
 800f756:	46bd      	mov	sp, r7
 800f758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75c:	4770      	bx	lr
 800f75e:	bf00      	nop
 800f760:	40010000 	.word	0x40010000
 800f764:	40000400 	.word	0x40000400
 800f768:	40000800 	.word	0x40000800
 800f76c:	40000c00 	.word	0x40000c00
 800f770:	40010400 	.word	0x40010400
 800f774:	40014000 	.word	0x40014000
 800f778:	40001800 	.word	0x40001800

0800f77c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b085      	sub	sp, #20
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f786:	2300      	movs	r3, #0
 800f788:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f790:	2b01      	cmp	r3, #1
 800f792:	d101      	bne.n	800f798 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f794:	2302      	movs	r3, #2
 800f796:	e03d      	b.n	800f814 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	2201      	movs	r2, #1
 800f79c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	68db      	ldr	r3, [r3, #12]
 800f7aa:	4313      	orrs	r3, r2
 800f7ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	689b      	ldr	r3, [r3, #8]
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	4313      	orrs	r3, r2
 800f7c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	4313      	orrs	r3, r2
 800f7d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	691b      	ldr	r3, [r3, #16]
 800f7e2:	4313      	orrs	r3, r2
 800f7e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	695b      	ldr	r3, [r3, #20]
 800f7f0:	4313      	orrs	r3, r2
 800f7f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	69db      	ldr	r3, [r3, #28]
 800f7fe:	4313      	orrs	r3, r2
 800f800:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	68fa      	ldr	r2, [r7, #12]
 800f808:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2200      	movs	r2, #0
 800f80e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f812:	2300      	movs	r3, #0
}
 800f814:	4618      	mov	r0, r3
 800f816:	3714      	adds	r7, #20
 800f818:	46bd      	mov	sp, r7
 800f81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81e:	4770      	bx	lr

0800f820 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f820:	b480      	push	{r7}
 800f822:	b083      	sub	sp, #12
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f828:	bf00      	nop
 800f82a:	370c      	adds	r7, #12
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr

0800f834 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f834:	b480      	push	{r7}
 800f836:	b083      	sub	sp, #12
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f83c:	bf00      	nop
 800f83e:	370c      	adds	r7, #12
 800f840:	46bd      	mov	sp, r7
 800f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f846:	4770      	bx	lr

0800f848 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b082      	sub	sp, #8
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d101      	bne.n	800f85a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f856:	2301      	movs	r3, #1
 800f858:	e03f      	b.n	800f8da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f860:	b2db      	uxtb	r3, r3
 800f862:	2b00      	cmp	r3, #0
 800f864:	d106      	bne.n	800f874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	2200      	movs	r2, #0
 800f86a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f7f7 feca 	bl	8007608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2224      	movs	r2, #36	; 0x24
 800f878:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	68da      	ldr	r2, [r3, #12]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f88a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f000 f829 	bl	800f8e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	691a      	ldr	r2, [r3, #16]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f8a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	695a      	ldr	r2, [r3, #20]
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f8b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	68da      	ldr	r2, [r3, #12]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f8c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2220      	movs	r2, #32
 800f8cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2220      	movs	r2, #32
 800f8d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f8d8:	2300      	movs	r3, #0
}
 800f8da:	4618      	mov	r0, r3
 800f8dc:	3708      	adds	r7, #8
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}
	...

0800f8e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e8:	b085      	sub	sp, #20
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	691b      	ldr	r3, [r3, #16]
 800f8f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	68da      	ldr	r2, [r3, #12]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	430a      	orrs	r2, r1
 800f902:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	689a      	ldr	r2, [r3, #8]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	691b      	ldr	r3, [r3, #16]
 800f90c:	431a      	orrs	r2, r3
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	695b      	ldr	r3, [r3, #20]
 800f912:	431a      	orrs	r2, r3
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	69db      	ldr	r3, [r3, #28]
 800f918:	4313      	orrs	r3, r2
 800f91a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	68db      	ldr	r3, [r3, #12]
 800f922:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800f926:	f023 030c 	bic.w	r3, r3, #12
 800f92a:	687a      	ldr	r2, [r7, #4]
 800f92c:	6812      	ldr	r2, [r2, #0]
 800f92e:	68f9      	ldr	r1, [r7, #12]
 800f930:	430b      	orrs	r3, r1
 800f932:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	695b      	ldr	r3, [r3, #20]
 800f93a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	699a      	ldr	r2, [r3, #24]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	430a      	orrs	r2, r1
 800f948:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	69db      	ldr	r3, [r3, #28]
 800f94e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f952:	f040 818b 	bne.w	800fc6c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	4ac1      	ldr	r2, [pc, #772]	; (800fc60 <UART_SetConfig+0x37c>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d005      	beq.n	800f96c <UART_SetConfig+0x88>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	4abf      	ldr	r2, [pc, #764]	; (800fc64 <UART_SetConfig+0x380>)
 800f966:	4293      	cmp	r3, r2
 800f968:	f040 80bd 	bne.w	800fae6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f96c:	f7fc fbcc 	bl	800c108 <HAL_RCC_GetPCLK2Freq>
 800f970:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	461d      	mov	r5, r3
 800f976:	f04f 0600 	mov.w	r6, #0
 800f97a:	46a8      	mov	r8, r5
 800f97c:	46b1      	mov	r9, r6
 800f97e:	eb18 0308 	adds.w	r3, r8, r8
 800f982:	eb49 0409 	adc.w	r4, r9, r9
 800f986:	4698      	mov	r8, r3
 800f988:	46a1      	mov	r9, r4
 800f98a:	eb18 0805 	adds.w	r8, r8, r5
 800f98e:	eb49 0906 	adc.w	r9, r9, r6
 800f992:	f04f 0100 	mov.w	r1, #0
 800f996:	f04f 0200 	mov.w	r2, #0
 800f99a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f99e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f9a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f9a6:	4688      	mov	r8, r1
 800f9a8:	4691      	mov	r9, r2
 800f9aa:	eb18 0005 	adds.w	r0, r8, r5
 800f9ae:	eb49 0106 	adc.w	r1, r9, r6
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	685b      	ldr	r3, [r3, #4]
 800f9b6:	461d      	mov	r5, r3
 800f9b8:	f04f 0600 	mov.w	r6, #0
 800f9bc:	196b      	adds	r3, r5, r5
 800f9be:	eb46 0406 	adc.w	r4, r6, r6
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	4623      	mov	r3, r4
 800f9c6:	f7f1 f977 	bl	8000cb8 <__aeabi_uldivmod>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	460c      	mov	r4, r1
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	4ba5      	ldr	r3, [pc, #660]	; (800fc68 <UART_SetConfig+0x384>)
 800f9d2:	fba3 2302 	umull	r2, r3, r3, r2
 800f9d6:	095b      	lsrs	r3, r3, #5
 800f9d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	461d      	mov	r5, r3
 800f9e0:	f04f 0600 	mov.w	r6, #0
 800f9e4:	46a9      	mov	r9, r5
 800f9e6:	46b2      	mov	sl, r6
 800f9e8:	eb19 0309 	adds.w	r3, r9, r9
 800f9ec:	eb4a 040a 	adc.w	r4, sl, sl
 800f9f0:	4699      	mov	r9, r3
 800f9f2:	46a2      	mov	sl, r4
 800f9f4:	eb19 0905 	adds.w	r9, r9, r5
 800f9f8:	eb4a 0a06 	adc.w	sl, sl, r6
 800f9fc:	f04f 0100 	mov.w	r1, #0
 800fa00:	f04f 0200 	mov.w	r2, #0
 800fa04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fa08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fa0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fa10:	4689      	mov	r9, r1
 800fa12:	4692      	mov	sl, r2
 800fa14:	eb19 0005 	adds.w	r0, r9, r5
 800fa18:	eb4a 0106 	adc.w	r1, sl, r6
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	685b      	ldr	r3, [r3, #4]
 800fa20:	461d      	mov	r5, r3
 800fa22:	f04f 0600 	mov.w	r6, #0
 800fa26:	196b      	adds	r3, r5, r5
 800fa28:	eb46 0406 	adc.w	r4, r6, r6
 800fa2c:	461a      	mov	r2, r3
 800fa2e:	4623      	mov	r3, r4
 800fa30:	f7f1 f942 	bl	8000cb8 <__aeabi_uldivmod>
 800fa34:	4603      	mov	r3, r0
 800fa36:	460c      	mov	r4, r1
 800fa38:	461a      	mov	r2, r3
 800fa3a:	4b8b      	ldr	r3, [pc, #556]	; (800fc68 <UART_SetConfig+0x384>)
 800fa3c:	fba3 1302 	umull	r1, r3, r3, r2
 800fa40:	095b      	lsrs	r3, r3, #5
 800fa42:	2164      	movs	r1, #100	; 0x64
 800fa44:	fb01 f303 	mul.w	r3, r1, r3
 800fa48:	1ad3      	subs	r3, r2, r3
 800fa4a:	00db      	lsls	r3, r3, #3
 800fa4c:	3332      	adds	r3, #50	; 0x32
 800fa4e:	4a86      	ldr	r2, [pc, #536]	; (800fc68 <UART_SetConfig+0x384>)
 800fa50:	fba2 2303 	umull	r2, r3, r2, r3
 800fa54:	095b      	lsrs	r3, r3, #5
 800fa56:	005b      	lsls	r3, r3, #1
 800fa58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fa5c:	4498      	add	r8, r3
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	461d      	mov	r5, r3
 800fa62:	f04f 0600 	mov.w	r6, #0
 800fa66:	46a9      	mov	r9, r5
 800fa68:	46b2      	mov	sl, r6
 800fa6a:	eb19 0309 	adds.w	r3, r9, r9
 800fa6e:	eb4a 040a 	adc.w	r4, sl, sl
 800fa72:	4699      	mov	r9, r3
 800fa74:	46a2      	mov	sl, r4
 800fa76:	eb19 0905 	adds.w	r9, r9, r5
 800fa7a:	eb4a 0a06 	adc.w	sl, sl, r6
 800fa7e:	f04f 0100 	mov.w	r1, #0
 800fa82:	f04f 0200 	mov.w	r2, #0
 800fa86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fa8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fa8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fa92:	4689      	mov	r9, r1
 800fa94:	4692      	mov	sl, r2
 800fa96:	eb19 0005 	adds.w	r0, r9, r5
 800fa9a:	eb4a 0106 	adc.w	r1, sl, r6
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	685b      	ldr	r3, [r3, #4]
 800faa2:	461d      	mov	r5, r3
 800faa4:	f04f 0600 	mov.w	r6, #0
 800faa8:	196b      	adds	r3, r5, r5
 800faaa:	eb46 0406 	adc.w	r4, r6, r6
 800faae:	461a      	mov	r2, r3
 800fab0:	4623      	mov	r3, r4
 800fab2:	f7f1 f901 	bl	8000cb8 <__aeabi_uldivmod>
 800fab6:	4603      	mov	r3, r0
 800fab8:	460c      	mov	r4, r1
 800faba:	461a      	mov	r2, r3
 800fabc:	4b6a      	ldr	r3, [pc, #424]	; (800fc68 <UART_SetConfig+0x384>)
 800fabe:	fba3 1302 	umull	r1, r3, r3, r2
 800fac2:	095b      	lsrs	r3, r3, #5
 800fac4:	2164      	movs	r1, #100	; 0x64
 800fac6:	fb01 f303 	mul.w	r3, r1, r3
 800faca:	1ad3      	subs	r3, r2, r3
 800facc:	00db      	lsls	r3, r3, #3
 800face:	3332      	adds	r3, #50	; 0x32
 800fad0:	4a65      	ldr	r2, [pc, #404]	; (800fc68 <UART_SetConfig+0x384>)
 800fad2:	fba2 2303 	umull	r2, r3, r2, r3
 800fad6:	095b      	lsrs	r3, r3, #5
 800fad8:	f003 0207 	and.w	r2, r3, #7
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4442      	add	r2, r8
 800fae2:	609a      	str	r2, [r3, #8]
 800fae4:	e26f      	b.n	800ffc6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fae6:	f7fc fafb 	bl	800c0e0 <HAL_RCC_GetPCLK1Freq>
 800faea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	461d      	mov	r5, r3
 800faf0:	f04f 0600 	mov.w	r6, #0
 800faf4:	46a8      	mov	r8, r5
 800faf6:	46b1      	mov	r9, r6
 800faf8:	eb18 0308 	adds.w	r3, r8, r8
 800fafc:	eb49 0409 	adc.w	r4, r9, r9
 800fb00:	4698      	mov	r8, r3
 800fb02:	46a1      	mov	r9, r4
 800fb04:	eb18 0805 	adds.w	r8, r8, r5
 800fb08:	eb49 0906 	adc.w	r9, r9, r6
 800fb0c:	f04f 0100 	mov.w	r1, #0
 800fb10:	f04f 0200 	mov.w	r2, #0
 800fb14:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fb18:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fb1c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fb20:	4688      	mov	r8, r1
 800fb22:	4691      	mov	r9, r2
 800fb24:	eb18 0005 	adds.w	r0, r8, r5
 800fb28:	eb49 0106 	adc.w	r1, r9, r6
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	685b      	ldr	r3, [r3, #4]
 800fb30:	461d      	mov	r5, r3
 800fb32:	f04f 0600 	mov.w	r6, #0
 800fb36:	196b      	adds	r3, r5, r5
 800fb38:	eb46 0406 	adc.w	r4, r6, r6
 800fb3c:	461a      	mov	r2, r3
 800fb3e:	4623      	mov	r3, r4
 800fb40:	f7f1 f8ba 	bl	8000cb8 <__aeabi_uldivmod>
 800fb44:	4603      	mov	r3, r0
 800fb46:	460c      	mov	r4, r1
 800fb48:	461a      	mov	r2, r3
 800fb4a:	4b47      	ldr	r3, [pc, #284]	; (800fc68 <UART_SetConfig+0x384>)
 800fb4c:	fba3 2302 	umull	r2, r3, r3, r2
 800fb50:	095b      	lsrs	r3, r3, #5
 800fb52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fb56:	68bb      	ldr	r3, [r7, #8]
 800fb58:	461d      	mov	r5, r3
 800fb5a:	f04f 0600 	mov.w	r6, #0
 800fb5e:	46a9      	mov	r9, r5
 800fb60:	46b2      	mov	sl, r6
 800fb62:	eb19 0309 	adds.w	r3, r9, r9
 800fb66:	eb4a 040a 	adc.w	r4, sl, sl
 800fb6a:	4699      	mov	r9, r3
 800fb6c:	46a2      	mov	sl, r4
 800fb6e:	eb19 0905 	adds.w	r9, r9, r5
 800fb72:	eb4a 0a06 	adc.w	sl, sl, r6
 800fb76:	f04f 0100 	mov.w	r1, #0
 800fb7a:	f04f 0200 	mov.w	r2, #0
 800fb7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fb82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fb86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fb8a:	4689      	mov	r9, r1
 800fb8c:	4692      	mov	sl, r2
 800fb8e:	eb19 0005 	adds.w	r0, r9, r5
 800fb92:	eb4a 0106 	adc.w	r1, sl, r6
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	685b      	ldr	r3, [r3, #4]
 800fb9a:	461d      	mov	r5, r3
 800fb9c:	f04f 0600 	mov.w	r6, #0
 800fba0:	196b      	adds	r3, r5, r5
 800fba2:	eb46 0406 	adc.w	r4, r6, r6
 800fba6:	461a      	mov	r2, r3
 800fba8:	4623      	mov	r3, r4
 800fbaa:	f7f1 f885 	bl	8000cb8 <__aeabi_uldivmod>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	460c      	mov	r4, r1
 800fbb2:	461a      	mov	r2, r3
 800fbb4:	4b2c      	ldr	r3, [pc, #176]	; (800fc68 <UART_SetConfig+0x384>)
 800fbb6:	fba3 1302 	umull	r1, r3, r3, r2
 800fbba:	095b      	lsrs	r3, r3, #5
 800fbbc:	2164      	movs	r1, #100	; 0x64
 800fbbe:	fb01 f303 	mul.w	r3, r1, r3
 800fbc2:	1ad3      	subs	r3, r2, r3
 800fbc4:	00db      	lsls	r3, r3, #3
 800fbc6:	3332      	adds	r3, #50	; 0x32
 800fbc8:	4a27      	ldr	r2, [pc, #156]	; (800fc68 <UART_SetConfig+0x384>)
 800fbca:	fba2 2303 	umull	r2, r3, r2, r3
 800fbce:	095b      	lsrs	r3, r3, #5
 800fbd0:	005b      	lsls	r3, r3, #1
 800fbd2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fbd6:	4498      	add	r8, r3
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	461d      	mov	r5, r3
 800fbdc:	f04f 0600 	mov.w	r6, #0
 800fbe0:	46a9      	mov	r9, r5
 800fbe2:	46b2      	mov	sl, r6
 800fbe4:	eb19 0309 	adds.w	r3, r9, r9
 800fbe8:	eb4a 040a 	adc.w	r4, sl, sl
 800fbec:	4699      	mov	r9, r3
 800fbee:	46a2      	mov	sl, r4
 800fbf0:	eb19 0905 	adds.w	r9, r9, r5
 800fbf4:	eb4a 0a06 	adc.w	sl, sl, r6
 800fbf8:	f04f 0100 	mov.w	r1, #0
 800fbfc:	f04f 0200 	mov.w	r2, #0
 800fc00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fc04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fc08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fc0c:	4689      	mov	r9, r1
 800fc0e:	4692      	mov	sl, r2
 800fc10:	eb19 0005 	adds.w	r0, r9, r5
 800fc14:	eb4a 0106 	adc.w	r1, sl, r6
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	685b      	ldr	r3, [r3, #4]
 800fc1c:	461d      	mov	r5, r3
 800fc1e:	f04f 0600 	mov.w	r6, #0
 800fc22:	196b      	adds	r3, r5, r5
 800fc24:	eb46 0406 	adc.w	r4, r6, r6
 800fc28:	461a      	mov	r2, r3
 800fc2a:	4623      	mov	r3, r4
 800fc2c:	f7f1 f844 	bl	8000cb8 <__aeabi_uldivmod>
 800fc30:	4603      	mov	r3, r0
 800fc32:	460c      	mov	r4, r1
 800fc34:	461a      	mov	r2, r3
 800fc36:	4b0c      	ldr	r3, [pc, #48]	; (800fc68 <UART_SetConfig+0x384>)
 800fc38:	fba3 1302 	umull	r1, r3, r3, r2
 800fc3c:	095b      	lsrs	r3, r3, #5
 800fc3e:	2164      	movs	r1, #100	; 0x64
 800fc40:	fb01 f303 	mul.w	r3, r1, r3
 800fc44:	1ad3      	subs	r3, r2, r3
 800fc46:	00db      	lsls	r3, r3, #3
 800fc48:	3332      	adds	r3, #50	; 0x32
 800fc4a:	4a07      	ldr	r2, [pc, #28]	; (800fc68 <UART_SetConfig+0x384>)
 800fc4c:	fba2 2303 	umull	r2, r3, r2, r3
 800fc50:	095b      	lsrs	r3, r3, #5
 800fc52:	f003 0207 	and.w	r2, r3, #7
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	4442      	add	r2, r8
 800fc5c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800fc5e:	e1b2      	b.n	800ffc6 <UART_SetConfig+0x6e2>
 800fc60:	40011000 	.word	0x40011000
 800fc64:	40011400 	.word	0x40011400
 800fc68:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	4ad7      	ldr	r2, [pc, #860]	; (800ffd0 <UART_SetConfig+0x6ec>)
 800fc72:	4293      	cmp	r3, r2
 800fc74:	d005      	beq.n	800fc82 <UART_SetConfig+0x39e>
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	4ad6      	ldr	r2, [pc, #856]	; (800ffd4 <UART_SetConfig+0x6f0>)
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	f040 80d1 	bne.w	800fe24 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800fc82:	f7fc fa41 	bl	800c108 <HAL_RCC_GetPCLK2Freq>
 800fc86:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	469a      	mov	sl, r3
 800fc8c:	f04f 0b00 	mov.w	fp, #0
 800fc90:	46d0      	mov	r8, sl
 800fc92:	46d9      	mov	r9, fp
 800fc94:	eb18 0308 	adds.w	r3, r8, r8
 800fc98:	eb49 0409 	adc.w	r4, r9, r9
 800fc9c:	4698      	mov	r8, r3
 800fc9e:	46a1      	mov	r9, r4
 800fca0:	eb18 080a 	adds.w	r8, r8, sl
 800fca4:	eb49 090b 	adc.w	r9, r9, fp
 800fca8:	f04f 0100 	mov.w	r1, #0
 800fcac:	f04f 0200 	mov.w	r2, #0
 800fcb0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fcb4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fcb8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fcbc:	4688      	mov	r8, r1
 800fcbe:	4691      	mov	r9, r2
 800fcc0:	eb1a 0508 	adds.w	r5, sl, r8
 800fcc4:	eb4b 0609 	adc.w	r6, fp, r9
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	685b      	ldr	r3, [r3, #4]
 800fccc:	4619      	mov	r1, r3
 800fcce:	f04f 0200 	mov.w	r2, #0
 800fcd2:	f04f 0300 	mov.w	r3, #0
 800fcd6:	f04f 0400 	mov.w	r4, #0
 800fcda:	0094      	lsls	r4, r2, #2
 800fcdc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fce0:	008b      	lsls	r3, r1, #2
 800fce2:	461a      	mov	r2, r3
 800fce4:	4623      	mov	r3, r4
 800fce6:	4628      	mov	r0, r5
 800fce8:	4631      	mov	r1, r6
 800fcea:	f7f0 ffe5 	bl	8000cb8 <__aeabi_uldivmod>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	460c      	mov	r4, r1
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	4bb8      	ldr	r3, [pc, #736]	; (800ffd8 <UART_SetConfig+0x6f4>)
 800fcf6:	fba3 2302 	umull	r2, r3, r3, r2
 800fcfa:	095b      	lsrs	r3, r3, #5
 800fcfc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	469b      	mov	fp, r3
 800fd04:	f04f 0c00 	mov.w	ip, #0
 800fd08:	46d9      	mov	r9, fp
 800fd0a:	46e2      	mov	sl, ip
 800fd0c:	eb19 0309 	adds.w	r3, r9, r9
 800fd10:	eb4a 040a 	adc.w	r4, sl, sl
 800fd14:	4699      	mov	r9, r3
 800fd16:	46a2      	mov	sl, r4
 800fd18:	eb19 090b 	adds.w	r9, r9, fp
 800fd1c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fd20:	f04f 0100 	mov.w	r1, #0
 800fd24:	f04f 0200 	mov.w	r2, #0
 800fd28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fd2c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fd30:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fd34:	4689      	mov	r9, r1
 800fd36:	4692      	mov	sl, r2
 800fd38:	eb1b 0509 	adds.w	r5, fp, r9
 800fd3c:	eb4c 060a 	adc.w	r6, ip, sl
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	685b      	ldr	r3, [r3, #4]
 800fd44:	4619      	mov	r1, r3
 800fd46:	f04f 0200 	mov.w	r2, #0
 800fd4a:	f04f 0300 	mov.w	r3, #0
 800fd4e:	f04f 0400 	mov.w	r4, #0
 800fd52:	0094      	lsls	r4, r2, #2
 800fd54:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fd58:	008b      	lsls	r3, r1, #2
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	4623      	mov	r3, r4
 800fd5e:	4628      	mov	r0, r5
 800fd60:	4631      	mov	r1, r6
 800fd62:	f7f0 ffa9 	bl	8000cb8 <__aeabi_uldivmod>
 800fd66:	4603      	mov	r3, r0
 800fd68:	460c      	mov	r4, r1
 800fd6a:	461a      	mov	r2, r3
 800fd6c:	4b9a      	ldr	r3, [pc, #616]	; (800ffd8 <UART_SetConfig+0x6f4>)
 800fd6e:	fba3 1302 	umull	r1, r3, r3, r2
 800fd72:	095b      	lsrs	r3, r3, #5
 800fd74:	2164      	movs	r1, #100	; 0x64
 800fd76:	fb01 f303 	mul.w	r3, r1, r3
 800fd7a:	1ad3      	subs	r3, r2, r3
 800fd7c:	011b      	lsls	r3, r3, #4
 800fd7e:	3332      	adds	r3, #50	; 0x32
 800fd80:	4a95      	ldr	r2, [pc, #596]	; (800ffd8 <UART_SetConfig+0x6f4>)
 800fd82:	fba2 2303 	umull	r2, r3, r2, r3
 800fd86:	095b      	lsrs	r3, r3, #5
 800fd88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fd8c:	4498      	add	r8, r3
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	469b      	mov	fp, r3
 800fd92:	f04f 0c00 	mov.w	ip, #0
 800fd96:	46d9      	mov	r9, fp
 800fd98:	46e2      	mov	sl, ip
 800fd9a:	eb19 0309 	adds.w	r3, r9, r9
 800fd9e:	eb4a 040a 	adc.w	r4, sl, sl
 800fda2:	4699      	mov	r9, r3
 800fda4:	46a2      	mov	sl, r4
 800fda6:	eb19 090b 	adds.w	r9, r9, fp
 800fdaa:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fdae:	f04f 0100 	mov.w	r1, #0
 800fdb2:	f04f 0200 	mov.w	r2, #0
 800fdb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fdba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fdbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fdc2:	4689      	mov	r9, r1
 800fdc4:	4692      	mov	sl, r2
 800fdc6:	eb1b 0509 	adds.w	r5, fp, r9
 800fdca:	eb4c 060a 	adc.w	r6, ip, sl
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	685b      	ldr	r3, [r3, #4]
 800fdd2:	4619      	mov	r1, r3
 800fdd4:	f04f 0200 	mov.w	r2, #0
 800fdd8:	f04f 0300 	mov.w	r3, #0
 800fddc:	f04f 0400 	mov.w	r4, #0
 800fde0:	0094      	lsls	r4, r2, #2
 800fde2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fde6:	008b      	lsls	r3, r1, #2
 800fde8:	461a      	mov	r2, r3
 800fdea:	4623      	mov	r3, r4
 800fdec:	4628      	mov	r0, r5
 800fdee:	4631      	mov	r1, r6
 800fdf0:	f7f0 ff62 	bl	8000cb8 <__aeabi_uldivmod>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	460c      	mov	r4, r1
 800fdf8:	461a      	mov	r2, r3
 800fdfa:	4b77      	ldr	r3, [pc, #476]	; (800ffd8 <UART_SetConfig+0x6f4>)
 800fdfc:	fba3 1302 	umull	r1, r3, r3, r2
 800fe00:	095b      	lsrs	r3, r3, #5
 800fe02:	2164      	movs	r1, #100	; 0x64
 800fe04:	fb01 f303 	mul.w	r3, r1, r3
 800fe08:	1ad3      	subs	r3, r2, r3
 800fe0a:	011b      	lsls	r3, r3, #4
 800fe0c:	3332      	adds	r3, #50	; 0x32
 800fe0e:	4a72      	ldr	r2, [pc, #456]	; (800ffd8 <UART_SetConfig+0x6f4>)
 800fe10:	fba2 2303 	umull	r2, r3, r2, r3
 800fe14:	095b      	lsrs	r3, r3, #5
 800fe16:	f003 020f 	and.w	r2, r3, #15
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	4442      	add	r2, r8
 800fe20:	609a      	str	r2, [r3, #8]
 800fe22:	e0d0      	b.n	800ffc6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800fe24:	f7fc f95c 	bl	800c0e0 <HAL_RCC_GetPCLK1Freq>
 800fe28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	469a      	mov	sl, r3
 800fe2e:	f04f 0b00 	mov.w	fp, #0
 800fe32:	46d0      	mov	r8, sl
 800fe34:	46d9      	mov	r9, fp
 800fe36:	eb18 0308 	adds.w	r3, r8, r8
 800fe3a:	eb49 0409 	adc.w	r4, r9, r9
 800fe3e:	4698      	mov	r8, r3
 800fe40:	46a1      	mov	r9, r4
 800fe42:	eb18 080a 	adds.w	r8, r8, sl
 800fe46:	eb49 090b 	adc.w	r9, r9, fp
 800fe4a:	f04f 0100 	mov.w	r1, #0
 800fe4e:	f04f 0200 	mov.w	r2, #0
 800fe52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fe56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fe5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fe5e:	4688      	mov	r8, r1
 800fe60:	4691      	mov	r9, r2
 800fe62:	eb1a 0508 	adds.w	r5, sl, r8
 800fe66:	eb4b 0609 	adc.w	r6, fp, r9
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	685b      	ldr	r3, [r3, #4]
 800fe6e:	4619      	mov	r1, r3
 800fe70:	f04f 0200 	mov.w	r2, #0
 800fe74:	f04f 0300 	mov.w	r3, #0
 800fe78:	f04f 0400 	mov.w	r4, #0
 800fe7c:	0094      	lsls	r4, r2, #2
 800fe7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fe82:	008b      	lsls	r3, r1, #2
 800fe84:	461a      	mov	r2, r3
 800fe86:	4623      	mov	r3, r4
 800fe88:	4628      	mov	r0, r5
 800fe8a:	4631      	mov	r1, r6
 800fe8c:	f7f0 ff14 	bl	8000cb8 <__aeabi_uldivmod>
 800fe90:	4603      	mov	r3, r0
 800fe92:	460c      	mov	r4, r1
 800fe94:	461a      	mov	r2, r3
 800fe96:	4b50      	ldr	r3, [pc, #320]	; (800ffd8 <UART_SetConfig+0x6f4>)
 800fe98:	fba3 2302 	umull	r2, r3, r3, r2
 800fe9c:	095b      	lsrs	r3, r3, #5
 800fe9e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	469b      	mov	fp, r3
 800fea6:	f04f 0c00 	mov.w	ip, #0
 800feaa:	46d9      	mov	r9, fp
 800feac:	46e2      	mov	sl, ip
 800feae:	eb19 0309 	adds.w	r3, r9, r9
 800feb2:	eb4a 040a 	adc.w	r4, sl, sl
 800feb6:	4699      	mov	r9, r3
 800feb8:	46a2      	mov	sl, r4
 800feba:	eb19 090b 	adds.w	r9, r9, fp
 800febe:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fec2:	f04f 0100 	mov.w	r1, #0
 800fec6:	f04f 0200 	mov.w	r2, #0
 800feca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fece:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fed2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fed6:	4689      	mov	r9, r1
 800fed8:	4692      	mov	sl, r2
 800feda:	eb1b 0509 	adds.w	r5, fp, r9
 800fede:	eb4c 060a 	adc.w	r6, ip, sl
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	685b      	ldr	r3, [r3, #4]
 800fee6:	4619      	mov	r1, r3
 800fee8:	f04f 0200 	mov.w	r2, #0
 800feec:	f04f 0300 	mov.w	r3, #0
 800fef0:	f04f 0400 	mov.w	r4, #0
 800fef4:	0094      	lsls	r4, r2, #2
 800fef6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fefa:	008b      	lsls	r3, r1, #2
 800fefc:	461a      	mov	r2, r3
 800fefe:	4623      	mov	r3, r4
 800ff00:	4628      	mov	r0, r5
 800ff02:	4631      	mov	r1, r6
 800ff04:	f7f0 fed8 	bl	8000cb8 <__aeabi_uldivmod>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	460c      	mov	r4, r1
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	4b32      	ldr	r3, [pc, #200]	; (800ffd8 <UART_SetConfig+0x6f4>)
 800ff10:	fba3 1302 	umull	r1, r3, r3, r2
 800ff14:	095b      	lsrs	r3, r3, #5
 800ff16:	2164      	movs	r1, #100	; 0x64
 800ff18:	fb01 f303 	mul.w	r3, r1, r3
 800ff1c:	1ad3      	subs	r3, r2, r3
 800ff1e:	011b      	lsls	r3, r3, #4
 800ff20:	3332      	adds	r3, #50	; 0x32
 800ff22:	4a2d      	ldr	r2, [pc, #180]	; (800ffd8 <UART_SetConfig+0x6f4>)
 800ff24:	fba2 2303 	umull	r2, r3, r2, r3
 800ff28:	095b      	lsrs	r3, r3, #5
 800ff2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ff2e:	4498      	add	r8, r3
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	469b      	mov	fp, r3
 800ff34:	f04f 0c00 	mov.w	ip, #0
 800ff38:	46d9      	mov	r9, fp
 800ff3a:	46e2      	mov	sl, ip
 800ff3c:	eb19 0309 	adds.w	r3, r9, r9
 800ff40:	eb4a 040a 	adc.w	r4, sl, sl
 800ff44:	4699      	mov	r9, r3
 800ff46:	46a2      	mov	sl, r4
 800ff48:	eb19 090b 	adds.w	r9, r9, fp
 800ff4c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ff50:	f04f 0100 	mov.w	r1, #0
 800ff54:	f04f 0200 	mov.w	r2, #0
 800ff58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ff5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ff60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ff64:	4689      	mov	r9, r1
 800ff66:	4692      	mov	sl, r2
 800ff68:	eb1b 0509 	adds.w	r5, fp, r9
 800ff6c:	eb4c 060a 	adc.w	r6, ip, sl
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	685b      	ldr	r3, [r3, #4]
 800ff74:	4619      	mov	r1, r3
 800ff76:	f04f 0200 	mov.w	r2, #0
 800ff7a:	f04f 0300 	mov.w	r3, #0
 800ff7e:	f04f 0400 	mov.w	r4, #0
 800ff82:	0094      	lsls	r4, r2, #2
 800ff84:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ff88:	008b      	lsls	r3, r1, #2
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	4623      	mov	r3, r4
 800ff8e:	4628      	mov	r0, r5
 800ff90:	4631      	mov	r1, r6
 800ff92:	f7f0 fe91 	bl	8000cb8 <__aeabi_uldivmod>
 800ff96:	4603      	mov	r3, r0
 800ff98:	460c      	mov	r4, r1
 800ff9a:	461a      	mov	r2, r3
 800ff9c:	4b0e      	ldr	r3, [pc, #56]	; (800ffd8 <UART_SetConfig+0x6f4>)
 800ff9e:	fba3 1302 	umull	r1, r3, r3, r2
 800ffa2:	095b      	lsrs	r3, r3, #5
 800ffa4:	2164      	movs	r1, #100	; 0x64
 800ffa6:	fb01 f303 	mul.w	r3, r1, r3
 800ffaa:	1ad3      	subs	r3, r2, r3
 800ffac:	011b      	lsls	r3, r3, #4
 800ffae:	3332      	adds	r3, #50	; 0x32
 800ffb0:	4a09      	ldr	r2, [pc, #36]	; (800ffd8 <UART_SetConfig+0x6f4>)
 800ffb2:	fba2 2303 	umull	r2, r3, r2, r3
 800ffb6:	095b      	lsrs	r3, r3, #5
 800ffb8:	f003 020f 	and.w	r2, r3, #15
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	4442      	add	r2, r8
 800ffc2:	609a      	str	r2, [r3, #8]
}
 800ffc4:	e7ff      	b.n	800ffc6 <UART_SetConfig+0x6e2>
 800ffc6:	bf00      	nop
 800ffc8:	3714      	adds	r7, #20
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd0:	40011000 	.word	0x40011000
 800ffd4:	40011400 	.word	0x40011400
 800ffd8:	51eb851f 	.word	0x51eb851f

0800ffdc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ffdc:	b084      	sub	sp, #16
 800ffde:	b480      	push	{r7}
 800ffe0:	b085      	sub	sp, #20
 800ffe2:	af00      	add	r7, sp, #0
 800ffe4:	6078      	str	r0, [r7, #4]
 800ffe6:	f107 001c 	add.w	r0, r7, #28
 800ffea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ffee:	2300      	movs	r3, #0
 800fff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800fff2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800fff4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800fff6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800fff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800fffa:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800fffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800fffe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8010002:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8010006:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010008:	68fa      	ldr	r2, [r7, #12]
 801000a:	4313      	orrs	r3, r2
 801000c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	685b      	ldr	r3, [r3, #4]
 8010012:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8010016:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801001a:	68fa      	ldr	r2, [r7, #12]
 801001c:	431a      	orrs	r2, r3
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010022:	2300      	movs	r3, #0
}
 8010024:	4618      	mov	r0, r3
 8010026:	3714      	adds	r7, #20
 8010028:	46bd      	mov	sp, r7
 801002a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002e:	b004      	add	sp, #16
 8010030:	4770      	bx	lr

08010032 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8010032:	b480      	push	{r7}
 8010034:	b083      	sub	sp, #12
 8010036:	af00      	add	r7, sp, #0
 8010038:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010040:	4618      	mov	r0, r3
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
 8010054:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	681a      	ldr	r2, [r3, #0]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010060:	2300      	movs	r3, #0
}
 8010062:	4618      	mov	r0, r3
 8010064:	370c      	adds	r7, #12
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr

0801006e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 801006e:	b580      	push	{r7, lr}
 8010070:	b082      	sub	sp, #8
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2203      	movs	r2, #3
 801007a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 801007c:	2002      	movs	r0, #2
 801007e:	f7f9 fbdd 	bl	800983c <HAL_Delay>
  
  return HAL_OK;
 8010082:	2300      	movs	r3, #0
}
 8010084:	4618      	mov	r0, r3
 8010086:	3708      	adds	r7, #8
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}

0801008c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 801008c:	b480      	push	{r7}
 801008e:	b083      	sub	sp, #12
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	f003 0303 	and.w	r3, r3, #3
}
 801009c:	4618      	mov	r0, r3
 801009e:	370c      	adds	r7, #12
 80100a0:	46bd      	mov	sp, r7
 80100a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a6:	4770      	bx	lr

080100a8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80100a8:	b480      	push	{r7}
 80100aa:	b085      	sub	sp, #20
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
 80100b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80100b2:	2300      	movs	r3, #0
 80100b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	681a      	ldr	r2, [r3, #0]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80100c6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80100cc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80100ce:	683b      	ldr	r3, [r7, #0]
 80100d0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80100d2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80100d4:	68fa      	ldr	r2, [r7, #12]
 80100d6:	4313      	orrs	r3, r2
 80100d8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	68db      	ldr	r3, [r3, #12]
 80100de:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80100e2:	f023 030f 	bic.w	r3, r3, #15
 80100e6:	68fa      	ldr	r2, [r7, #12]
 80100e8:	431a      	orrs	r2, r3
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80100ee:	2300      	movs	r3, #0
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	3714      	adds	r7, #20
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr

080100fc <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	691b      	ldr	r3, [r3, #16]
 8010108:	b2db      	uxtb	r3, r3
}
 801010a:	4618      	mov	r0, r3
 801010c:	370c      	adds	r7, #12
 801010e:	46bd      	mov	sp, r7
 8010110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010114:	4770      	bx	lr

08010116 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8010116:	b480      	push	{r7}
 8010118:	b085      	sub	sp, #20
 801011a:	af00      	add	r7, sp, #0
 801011c:	6078      	str	r0, [r7, #4]
 801011e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	3314      	adds	r3, #20
 8010124:	461a      	mov	r2, r3
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	4413      	add	r3, r2
 801012a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	681b      	ldr	r3, [r3, #0]
}  
 8010130:	4618      	mov	r0, r3
 8010132:	3714      	adds	r7, #20
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr

0801013c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 801013c:	b480      	push	{r7}
 801013e:	b085      	sub	sp, #20
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010146:	2300      	movs	r3, #0
 8010148:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	681a      	ldr	r2, [r3, #0]
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8010152:	683b      	ldr	r3, [r7, #0]
 8010154:	685a      	ldr	r2, [r3, #4]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010162:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010168:	431a      	orrs	r2, r3
                       Data->DPSM);
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801016e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010170:	68fa      	ldr	r2, [r7, #12]
 8010172:	4313      	orrs	r3, r2
 8010174:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801017a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	431a      	orrs	r2, r3
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010186:	2300      	movs	r3, #0

}
 8010188:	4618      	mov	r0, r3
 801018a:	3714      	adds	r7, #20
 801018c:	46bd      	mov	sp, r7
 801018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010192:	4770      	bx	lr

08010194 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b088      	sub	sp, #32
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80101a2:	2310      	movs	r3, #16
 80101a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80101a6:	2340      	movs	r3, #64	; 0x40
 80101a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80101aa:	2300      	movs	r3, #0
 80101ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80101ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101b4:	f107 0308 	add.w	r3, r7, #8
 80101b8:	4619      	mov	r1, r3
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f7ff ff74 	bl	80100a8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80101c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80101c4:	2110      	movs	r1, #16
 80101c6:	6878      	ldr	r0, [r7, #4]
 80101c8:	f000 fa40 	bl	801064c <SDMMC_GetCmdResp1>
 80101cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101ce:	69fb      	ldr	r3, [r7, #28]
}
 80101d0:	4618      	mov	r0, r3
 80101d2:	3720      	adds	r7, #32
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b088      	sub	sp, #32
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80101e6:	2311      	movs	r3, #17
 80101e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80101ea:	2340      	movs	r3, #64	; 0x40
 80101ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80101ee:	2300      	movs	r3, #0
 80101f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80101f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101f8:	f107 0308 	add.w	r3, r7, #8
 80101fc:	4619      	mov	r1, r3
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f7ff ff52 	bl	80100a8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010204:	f241 3288 	movw	r2, #5000	; 0x1388
 8010208:	2111      	movs	r1, #17
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f000 fa1e 	bl	801064c <SDMMC_GetCmdResp1>
 8010210:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010212:	69fb      	ldr	r3, [r7, #28]
}
 8010214:	4618      	mov	r0, r3
 8010216:	3720      	adds	r7, #32
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b088      	sub	sp, #32
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
 8010224:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801022a:	2312      	movs	r3, #18
 801022c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801022e:	2340      	movs	r3, #64	; 0x40
 8010230:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010232:	2300      	movs	r3, #0
 8010234:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801023a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801023c:	f107 0308 	add.w	r3, r7, #8
 8010240:	4619      	mov	r1, r3
 8010242:	6878      	ldr	r0, [r7, #4]
 8010244:	f7ff ff30 	bl	80100a8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010248:	f241 3288 	movw	r2, #5000	; 0x1388
 801024c:	2112      	movs	r1, #18
 801024e:	6878      	ldr	r0, [r7, #4]
 8010250:	f000 f9fc 	bl	801064c <SDMMC_GetCmdResp1>
 8010254:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010256:	69fb      	ldr	r3, [r7, #28]
}
 8010258:	4618      	mov	r0, r3
 801025a:	3720      	adds	r7, #32
 801025c:	46bd      	mov	sp, r7
 801025e:	bd80      	pop	{r7, pc}

08010260 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b088      	sub	sp, #32
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801026e:	2318      	movs	r3, #24
 8010270:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010272:	2340      	movs	r3, #64	; 0x40
 8010274:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010276:	2300      	movs	r3, #0
 8010278:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801027a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801027e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010280:	f107 0308 	add.w	r3, r7, #8
 8010284:	4619      	mov	r1, r3
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f7ff ff0e 	bl	80100a8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 801028c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010290:	2118      	movs	r1, #24
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f000 f9da 	bl	801064c <SDMMC_GetCmdResp1>
 8010298:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801029a:	69fb      	ldr	r3, [r7, #28]
}
 801029c:	4618      	mov	r0, r3
 801029e:	3720      	adds	r7, #32
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}

080102a4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b088      	sub	sp, #32
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
 80102ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80102ae:	683b      	ldr	r3, [r7, #0]
 80102b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80102b2:	2319      	movs	r3, #25
 80102b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80102b6:	2340      	movs	r3, #64	; 0x40
 80102b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80102ba:	2300      	movs	r3, #0
 80102bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80102be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80102c4:	f107 0308 	add.w	r3, r7, #8
 80102c8:	4619      	mov	r1, r3
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f7ff feec 	bl	80100a8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80102d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80102d4:	2119      	movs	r1, #25
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	f000 f9b8 	bl	801064c <SDMMC_GetCmdResp1>
 80102dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102de:	69fb      	ldr	r3, [r7, #28]
}
 80102e0:	4618      	mov	r0, r3
 80102e2:	3720      	adds	r7, #32
 80102e4:	46bd      	mov	sp, r7
 80102e6:	bd80      	pop	{r7, pc}

080102e8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b088      	sub	sp, #32
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80102f0:	2300      	movs	r3, #0
 80102f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80102f4:	230c      	movs	r3, #12
 80102f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80102f8:	2340      	movs	r3, #64	; 0x40
 80102fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80102fc:	2300      	movs	r3, #0
 80102fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010304:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010306:	f107 0308 	add.w	r3, r7, #8
 801030a:	4619      	mov	r1, r3
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f7ff fecb 	bl	80100a8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8010312:	4a05      	ldr	r2, [pc, #20]	; (8010328 <SDMMC_CmdStopTransfer+0x40>)
 8010314:	210c      	movs	r1, #12
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f000 f998 	bl	801064c <SDMMC_GetCmdResp1>
 801031c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801031e:	69fb      	ldr	r3, [r7, #28]
}
 8010320:	4618      	mov	r0, r3
 8010322:	3720      	adds	r7, #32
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	05f5e100 	.word	0x05f5e100

0801032c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b08a      	sub	sp, #40	; 0x28
 8010330:	af00      	add	r7, sp, #0
 8010332:	60f8      	str	r0, [r7, #12]
 8010334:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010338:	683b      	ldr	r3, [r7, #0]
 801033a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801033c:	2307      	movs	r3, #7
 801033e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010340:	2340      	movs	r3, #64	; 0x40
 8010342:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010344:	2300      	movs	r3, #0
 8010346:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801034c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801034e:	f107 0310 	add.w	r3, r7, #16
 8010352:	4619      	mov	r1, r3
 8010354:	68f8      	ldr	r0, [r7, #12]
 8010356:	f7ff fea7 	bl	80100a8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 801035a:	f241 3288 	movw	r2, #5000	; 0x1388
 801035e:	2107      	movs	r1, #7
 8010360:	68f8      	ldr	r0, [r7, #12]
 8010362:	f000 f973 	bl	801064c <SDMMC_GetCmdResp1>
 8010366:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801036a:	4618      	mov	r0, r3
 801036c:	3728      	adds	r7, #40	; 0x28
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}

08010372 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010372:	b580      	push	{r7, lr}
 8010374:	b088      	sub	sp, #32
 8010376:	af00      	add	r7, sp, #0
 8010378:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801037a:	2300      	movs	r3, #0
 801037c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801037e:	2300      	movs	r3, #0
 8010380:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010382:	2300      	movs	r3, #0
 8010384:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010386:	2300      	movs	r3, #0
 8010388:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801038a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801038e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010390:	f107 0308 	add.w	r3, r7, #8
 8010394:	4619      	mov	r1, r3
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f7ff fe86 	bl	80100a8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f000 f92d 	bl	80105fc <SDMMC_GetCmdError>
 80103a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103a4:	69fb      	ldr	r3, [r7, #28]
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3720      	adds	r7, #32
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}

080103ae <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80103ae:	b580      	push	{r7, lr}
 80103b0:	b088      	sub	sp, #32
 80103b2:	af00      	add	r7, sp, #0
 80103b4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80103b6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80103ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80103bc:	2308      	movs	r3, #8
 80103be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80103c0:	2340      	movs	r3, #64	; 0x40
 80103c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80103c4:	2300      	movs	r3, #0
 80103c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80103c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103cc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103ce:	f107 0308 	add.w	r3, r7, #8
 80103d2:	4619      	mov	r1, r3
 80103d4:	6878      	ldr	r0, [r7, #4]
 80103d6:	f7ff fe67 	bl	80100a8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f000 fb16 	bl	8010a0c <SDMMC_GetCmdResp7>
 80103e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103e2:	69fb      	ldr	r3, [r7, #28]
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3720      	adds	r7, #32
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}

080103ec <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b088      	sub	sp, #32
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	6078      	str	r0, [r7, #4]
 80103f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80103f6:	683b      	ldr	r3, [r7, #0]
 80103f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80103fa:	2337      	movs	r3, #55	; 0x37
 80103fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80103fe:	2340      	movs	r3, #64	; 0x40
 8010400:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010402:	2300      	movs	r3, #0
 8010404:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801040a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801040c:	f107 0308 	add.w	r3, r7, #8
 8010410:	4619      	mov	r1, r3
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	f7ff fe48 	bl	80100a8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010418:	f241 3288 	movw	r2, #5000	; 0x1388
 801041c:	2137      	movs	r1, #55	; 0x37
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f000 f914 	bl	801064c <SDMMC_GetCmdResp1>
 8010424:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010426:	69fb      	ldr	r3, [r7, #28]
}
 8010428:	4618      	mov	r0, r3
 801042a:	3720      	adds	r7, #32
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}

08010430 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b088      	sub	sp, #32
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
 8010438:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010444:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010446:	2329      	movs	r3, #41	; 0x29
 8010448:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801044a:	2340      	movs	r3, #64	; 0x40
 801044c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801044e:	2300      	movs	r3, #0
 8010450:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010456:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010458:	f107 0308 	add.w	r3, r7, #8
 801045c:	4619      	mov	r1, r3
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f7ff fe22 	bl	80100a8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010464:	6878      	ldr	r0, [r7, #4]
 8010466:	f000 fa23 	bl	80108b0 <SDMMC_GetCmdResp3>
 801046a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801046c:	69fb      	ldr	r3, [r7, #28]
}
 801046e:	4618      	mov	r0, r3
 8010470:	3720      	adds	r7, #32
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}

08010476 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010476:	b580      	push	{r7, lr}
 8010478:	b088      	sub	sp, #32
 801047a:	af00      	add	r7, sp, #0
 801047c:	6078      	str	r0, [r7, #4]
 801047e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010484:	2306      	movs	r3, #6
 8010486:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010488:	2340      	movs	r3, #64	; 0x40
 801048a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801048c:	2300      	movs	r3, #0
 801048e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010494:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010496:	f107 0308 	add.w	r3, r7, #8
 801049a:	4619      	mov	r1, r3
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f7ff fe03 	bl	80100a8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80104a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80104a6:	2106      	movs	r1, #6
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f000 f8cf 	bl	801064c <SDMMC_GetCmdResp1>
 80104ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104b0:	69fb      	ldr	r3, [r7, #28]
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3720      	adds	r7, #32
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}

080104ba <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80104ba:	b580      	push	{r7, lr}
 80104bc:	b088      	sub	sp, #32
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80104c2:	2300      	movs	r3, #0
 80104c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80104c6:	2333      	movs	r3, #51	; 0x33
 80104c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80104ca:	2340      	movs	r3, #64	; 0x40
 80104cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104ce:	2300      	movs	r3, #0
 80104d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104d8:	f107 0308 	add.w	r3, r7, #8
 80104dc:	4619      	mov	r1, r3
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f7ff fde2 	bl	80100a8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80104e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80104e8:	2133      	movs	r1, #51	; 0x33
 80104ea:	6878      	ldr	r0, [r7, #4]
 80104ec:	f000 f8ae 	bl	801064c <SDMMC_GetCmdResp1>
 80104f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104f2:	69fb      	ldr	r3, [r7, #28]
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3720      	adds	r7, #32
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b088      	sub	sp, #32
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010504:	2300      	movs	r3, #0
 8010506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010508:	2302      	movs	r3, #2
 801050a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801050c:	23c0      	movs	r3, #192	; 0xc0
 801050e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010510:	2300      	movs	r3, #0
 8010512:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010518:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801051a:	f107 0308 	add.w	r3, r7, #8
 801051e:	4619      	mov	r1, r3
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f7ff fdc1 	bl	80100a8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f000 f97c 	bl	8010824 <SDMMC_GetCmdResp2>
 801052c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801052e:	69fb      	ldr	r3, [r7, #28]
}
 8010530:	4618      	mov	r0, r3
 8010532:	3720      	adds	r7, #32
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b088      	sub	sp, #32
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010546:	2309      	movs	r3, #9
 8010548:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801054a:	23c0      	movs	r3, #192	; 0xc0
 801054c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801054e:	2300      	movs	r3, #0
 8010550:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010556:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010558:	f107 0308 	add.w	r3, r7, #8
 801055c:	4619      	mov	r1, r3
 801055e:	6878      	ldr	r0, [r7, #4]
 8010560:	f7ff fda2 	bl	80100a8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f000 f95d 	bl	8010824 <SDMMC_GetCmdResp2>
 801056a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801056c:	69fb      	ldr	r3, [r7, #28]
}
 801056e:	4618      	mov	r0, r3
 8010570:	3720      	adds	r7, #32
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}

08010576 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010576:	b580      	push	{r7, lr}
 8010578:	b088      	sub	sp, #32
 801057a:	af00      	add	r7, sp, #0
 801057c:	6078      	str	r0, [r7, #4]
 801057e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010580:	2300      	movs	r3, #0
 8010582:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010584:	2303      	movs	r3, #3
 8010586:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010588:	2340      	movs	r3, #64	; 0x40
 801058a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801058c:	2300      	movs	r3, #0
 801058e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010594:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010596:	f107 0308 	add.w	r3, r7, #8
 801059a:	4619      	mov	r1, r3
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f7ff fd83 	bl	80100a8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80105a2:	683a      	ldr	r2, [r7, #0]
 80105a4:	2103      	movs	r1, #3
 80105a6:	6878      	ldr	r0, [r7, #4]
 80105a8:	f000 f9bc 	bl	8010924 <SDMMC_GetCmdResp6>
 80105ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105ae:	69fb      	ldr	r3, [r7, #28]
}
 80105b0:	4618      	mov	r0, r3
 80105b2:	3720      	adds	r7, #32
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}

080105b8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b088      	sub	sp, #32
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80105c6:	230d      	movs	r3, #13
 80105c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80105ca:	2340      	movs	r3, #64	; 0x40
 80105cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80105ce:	2300      	movs	r3, #0
 80105d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80105d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80105d8:	f107 0308 	add.w	r3, r7, #8
 80105dc:	4619      	mov	r1, r3
 80105de:	6878      	ldr	r0, [r7, #4]
 80105e0:	f7ff fd62 	bl	80100a8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80105e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80105e8:	210d      	movs	r1, #13
 80105ea:	6878      	ldr	r0, [r7, #4]
 80105ec:	f000 f82e 	bl	801064c <SDMMC_GetCmdResp1>
 80105f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105f2:	69fb      	ldr	r3, [r7, #28]
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3720      	adds	r7, #32
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80105fc:	b490      	push	{r4, r7}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010604:	4b0f      	ldr	r3, [pc, #60]	; (8010644 <SDMMC_GetCmdError+0x48>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	4a0f      	ldr	r2, [pc, #60]	; (8010648 <SDMMC_GetCmdError+0x4c>)
 801060a:	fba2 2303 	umull	r2, r3, r2, r3
 801060e:	0a5b      	lsrs	r3, r3, #9
 8010610:	f241 3288 	movw	r2, #5000	; 0x1388
 8010614:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010618:	4623      	mov	r3, r4
 801061a:	1e5c      	subs	r4, r3, #1
 801061c:	2b00      	cmp	r3, #0
 801061e:	d102      	bne.n	8010626 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010620:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010624:	e009      	b.n	801063a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801062a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801062e:	2b00      	cmp	r3, #0
 8010630:	d0f2      	beq.n	8010618 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	22c5      	movs	r2, #197	; 0xc5
 8010636:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010638:	2300      	movs	r3, #0
}
 801063a:	4618      	mov	r0, r3
 801063c:	3708      	adds	r7, #8
 801063e:	46bd      	mov	sp, r7
 8010640:	bc90      	pop	{r4, r7}
 8010642:	4770      	bx	lr
 8010644:	20000000 	.word	0x20000000
 8010648:	10624dd3 	.word	0x10624dd3

0801064c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 801064c:	b590      	push	{r4, r7, lr}
 801064e:	b087      	sub	sp, #28
 8010650:	af00      	add	r7, sp, #0
 8010652:	60f8      	str	r0, [r7, #12]
 8010654:	460b      	mov	r3, r1
 8010656:	607a      	str	r2, [r7, #4]
 8010658:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801065a:	4b6f      	ldr	r3, [pc, #444]	; (8010818 <SDMMC_GetCmdResp1+0x1cc>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	4a6f      	ldr	r2, [pc, #444]	; (801081c <SDMMC_GetCmdResp1+0x1d0>)
 8010660:	fba2 2303 	umull	r2, r3, r2, r3
 8010664:	0a5b      	lsrs	r3, r3, #9
 8010666:	687a      	ldr	r2, [r7, #4]
 8010668:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801066c:	4623      	mov	r3, r4
 801066e:	1e5c      	subs	r4, r3, #1
 8010670:	2b00      	cmp	r3, #0
 8010672:	d102      	bne.n	801067a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010674:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010678:	e0c9      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801067e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010686:	2b00      	cmp	r3, #0
 8010688:	d0f0      	beq.n	801066c <SDMMC_GetCmdResp1+0x20>
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010690:	2b00      	cmp	r3, #0
 8010692:	d1eb      	bne.n	801066c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010698:	f003 0304 	and.w	r3, r3, #4
 801069c:	2b00      	cmp	r3, #0
 801069e:	d004      	beq.n	80106aa <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	2204      	movs	r2, #4
 80106a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80106a6:	2304      	movs	r3, #4
 80106a8:	e0b1      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ae:	f003 0301 	and.w	r3, r3, #1
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d004      	beq.n	80106c0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	2201      	movs	r2, #1
 80106ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80106bc:	2301      	movs	r3, #1
 80106be:	e0a6      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	22c5      	movs	r2, #197	; 0xc5
 80106c4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80106c6:	68f8      	ldr	r0, [r7, #12]
 80106c8:	f7ff fd18 	bl	80100fc <SDIO_GetCommandResponse>
 80106cc:	4603      	mov	r3, r0
 80106ce:	461a      	mov	r2, r3
 80106d0:	7afb      	ldrb	r3, [r7, #11]
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d001      	beq.n	80106da <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80106d6:	2301      	movs	r3, #1
 80106d8:	e099      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80106da:	2100      	movs	r1, #0
 80106dc:	68f8      	ldr	r0, [r7, #12]
 80106de:	f7ff fd1a 	bl	8010116 <SDIO_GetResponse>
 80106e2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80106e4:	693a      	ldr	r2, [r7, #16]
 80106e6:	4b4e      	ldr	r3, [pc, #312]	; (8010820 <SDMMC_GetCmdResp1+0x1d4>)
 80106e8:	4013      	ands	r3, r2
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d101      	bne.n	80106f2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80106ee:	2300      	movs	r3, #0
 80106f0:	e08d      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	da02      	bge.n	80106fe <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80106f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80106fc:	e087      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80106fe:	693b      	ldr	r3, [r7, #16]
 8010700:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010704:	2b00      	cmp	r3, #0
 8010706:	d001      	beq.n	801070c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010708:	2340      	movs	r3, #64	; 0x40
 801070a:	e080      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801070c:	693b      	ldr	r3, [r7, #16]
 801070e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010712:	2b00      	cmp	r3, #0
 8010714:	d001      	beq.n	801071a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010716:	2380      	movs	r3, #128	; 0x80
 8010718:	e079      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010720:	2b00      	cmp	r3, #0
 8010722:	d002      	beq.n	801072a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010728:	e071      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010730:	2b00      	cmp	r3, #0
 8010732:	d002      	beq.n	801073a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010738:	e069      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801073a:	693b      	ldr	r3, [r7, #16]
 801073c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010740:	2b00      	cmp	r3, #0
 8010742:	d002      	beq.n	801074a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010748:	e061      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801074a:	693b      	ldr	r3, [r7, #16]
 801074c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010750:	2b00      	cmp	r3, #0
 8010752:	d002      	beq.n	801075a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010754:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010758:	e059      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801075a:	693b      	ldr	r3, [r7, #16]
 801075c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010760:	2b00      	cmp	r3, #0
 8010762:	d002      	beq.n	801076a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010768:	e051      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801076a:	693b      	ldr	r3, [r7, #16]
 801076c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010770:	2b00      	cmp	r3, #0
 8010772:	d002      	beq.n	801077a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010778:	e049      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010780:	2b00      	cmp	r3, #0
 8010782:	d002      	beq.n	801078a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010784:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010788:	e041      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801078a:	693b      	ldr	r3, [r7, #16]
 801078c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010790:	2b00      	cmp	r3, #0
 8010792:	d002      	beq.n	801079a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010794:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010798:	e039      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801079a:	693b      	ldr	r3, [r7, #16]
 801079c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d002      	beq.n	80107aa <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80107a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80107a8:	e031      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80107aa:	693b      	ldr	r3, [r7, #16]
 80107ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d002      	beq.n	80107ba <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80107b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80107b8:	e029      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80107ba:	693b      	ldr	r3, [r7, #16]
 80107bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d002      	beq.n	80107ca <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80107c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80107c8:	e021      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80107ca:	693b      	ldr	r3, [r7, #16]
 80107cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d002      	beq.n	80107da <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80107d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80107d8:	e019      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d002      	beq.n	80107ea <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80107e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80107e8:	e011      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d002      	beq.n	80107fa <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80107f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80107f8:	e009      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	f003 0308 	and.w	r3, r3, #8
 8010800:	2b00      	cmp	r3, #0
 8010802:	d002      	beq.n	801080a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010804:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010808:	e001      	b.n	801080e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801080a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801080e:	4618      	mov	r0, r3
 8010810:	371c      	adds	r7, #28
 8010812:	46bd      	mov	sp, r7
 8010814:	bd90      	pop	{r4, r7, pc}
 8010816:	bf00      	nop
 8010818:	20000000 	.word	0x20000000
 801081c:	10624dd3 	.word	0x10624dd3
 8010820:	fdffe008 	.word	0xfdffe008

08010824 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010824:	b490      	push	{r4, r7}
 8010826:	b084      	sub	sp, #16
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801082c:	4b1e      	ldr	r3, [pc, #120]	; (80108a8 <SDMMC_GetCmdResp2+0x84>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	4a1e      	ldr	r2, [pc, #120]	; (80108ac <SDMMC_GetCmdResp2+0x88>)
 8010832:	fba2 2303 	umull	r2, r3, r2, r3
 8010836:	0a5b      	lsrs	r3, r3, #9
 8010838:	f241 3288 	movw	r2, #5000	; 0x1388
 801083c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010840:	4623      	mov	r3, r4
 8010842:	1e5c      	subs	r4, r3, #1
 8010844:	2b00      	cmp	r3, #0
 8010846:	d102      	bne.n	801084e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010848:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801084c:	e026      	b.n	801089c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010852:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801085a:	2b00      	cmp	r3, #0
 801085c:	d0f0      	beq.n	8010840 <SDMMC_GetCmdResp2+0x1c>
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010864:	2b00      	cmp	r3, #0
 8010866:	d1eb      	bne.n	8010840 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801086c:	f003 0304 	and.w	r3, r3, #4
 8010870:	2b00      	cmp	r3, #0
 8010872:	d004      	beq.n	801087e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2204      	movs	r2, #4
 8010878:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801087a:	2304      	movs	r3, #4
 801087c:	e00e      	b.n	801089c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010882:	f003 0301 	and.w	r3, r3, #1
 8010886:	2b00      	cmp	r3, #0
 8010888:	d004      	beq.n	8010894 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2201      	movs	r2, #1
 801088e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010890:	2301      	movs	r3, #1
 8010892:	e003      	b.n	801089c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	22c5      	movs	r2, #197	; 0xc5
 8010898:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801089a:	2300      	movs	r3, #0
}
 801089c:	4618      	mov	r0, r3
 801089e:	3710      	adds	r7, #16
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bc90      	pop	{r4, r7}
 80108a4:	4770      	bx	lr
 80108a6:	bf00      	nop
 80108a8:	20000000 	.word	0x20000000
 80108ac:	10624dd3 	.word	0x10624dd3

080108b0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80108b0:	b490      	push	{r4, r7}
 80108b2:	b084      	sub	sp, #16
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80108b8:	4b18      	ldr	r3, [pc, #96]	; (801091c <SDMMC_GetCmdResp3+0x6c>)
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	4a18      	ldr	r2, [pc, #96]	; (8010920 <SDMMC_GetCmdResp3+0x70>)
 80108be:	fba2 2303 	umull	r2, r3, r2, r3
 80108c2:	0a5b      	lsrs	r3, r3, #9
 80108c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80108c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80108cc:	4623      	mov	r3, r4
 80108ce:	1e5c      	subs	r4, r3, #1
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d102      	bne.n	80108da <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80108d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80108d8:	e01b      	b.n	8010912 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108de:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d0f0      	beq.n	80108cc <SDMMC_GetCmdResp3+0x1c>
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d1eb      	bne.n	80108cc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108f8:	f003 0304 	and.w	r3, r3, #4
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d004      	beq.n	801090a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2204      	movs	r2, #4
 8010904:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010906:	2304      	movs	r3, #4
 8010908:	e003      	b.n	8010912 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	22c5      	movs	r2, #197	; 0xc5
 801090e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010910:	2300      	movs	r3, #0
}
 8010912:	4618      	mov	r0, r3
 8010914:	3710      	adds	r7, #16
 8010916:	46bd      	mov	sp, r7
 8010918:	bc90      	pop	{r4, r7}
 801091a:	4770      	bx	lr
 801091c:	20000000 	.word	0x20000000
 8010920:	10624dd3 	.word	0x10624dd3

08010924 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010924:	b590      	push	{r4, r7, lr}
 8010926:	b087      	sub	sp, #28
 8010928:	af00      	add	r7, sp, #0
 801092a:	60f8      	str	r0, [r7, #12]
 801092c:	460b      	mov	r3, r1
 801092e:	607a      	str	r2, [r7, #4]
 8010930:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010932:	4b34      	ldr	r3, [pc, #208]	; (8010a04 <SDMMC_GetCmdResp6+0xe0>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	4a34      	ldr	r2, [pc, #208]	; (8010a08 <SDMMC_GetCmdResp6+0xe4>)
 8010938:	fba2 2303 	umull	r2, r3, r2, r3
 801093c:	0a5b      	lsrs	r3, r3, #9
 801093e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010942:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010946:	4623      	mov	r3, r4
 8010948:	1e5c      	subs	r4, r3, #1
 801094a:	2b00      	cmp	r3, #0
 801094c:	d102      	bne.n	8010954 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 801094e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010952:	e052      	b.n	80109fa <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010958:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010960:	2b00      	cmp	r3, #0
 8010962:	d0f0      	beq.n	8010946 <SDMMC_GetCmdResp6+0x22>
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801096a:	2b00      	cmp	r3, #0
 801096c:	d1eb      	bne.n	8010946 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010972:	f003 0304 	and.w	r3, r3, #4
 8010976:	2b00      	cmp	r3, #0
 8010978:	d004      	beq.n	8010984 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2204      	movs	r2, #4
 801097e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010980:	2304      	movs	r3, #4
 8010982:	e03a      	b.n	80109fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010988:	f003 0301 	and.w	r3, r3, #1
 801098c:	2b00      	cmp	r3, #0
 801098e:	d004      	beq.n	801099a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	2201      	movs	r2, #1
 8010994:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010996:	2301      	movs	r3, #1
 8010998:	e02f      	b.n	80109fa <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801099a:	68f8      	ldr	r0, [r7, #12]
 801099c:	f7ff fbae 	bl	80100fc <SDIO_GetCommandResponse>
 80109a0:	4603      	mov	r3, r0
 80109a2:	461a      	mov	r2, r3
 80109a4:	7afb      	ldrb	r3, [r7, #11]
 80109a6:	4293      	cmp	r3, r2
 80109a8:	d001      	beq.n	80109ae <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80109aa:	2301      	movs	r3, #1
 80109ac:	e025      	b.n	80109fa <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	22c5      	movs	r2, #197	; 0xc5
 80109b2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80109b4:	2100      	movs	r1, #0
 80109b6:	68f8      	ldr	r0, [r7, #12]
 80109b8:	f7ff fbad 	bl	8010116 <SDIO_GetResponse>
 80109bc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80109be:	693b      	ldr	r3, [r7, #16]
 80109c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d106      	bne.n	80109d6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80109c8:	693b      	ldr	r3, [r7, #16]
 80109ca:	0c1b      	lsrs	r3, r3, #16
 80109cc:	b29a      	uxth	r2, r3
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80109d2:	2300      	movs	r3, #0
 80109d4:	e011      	b.n	80109fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80109d6:	693b      	ldr	r3, [r7, #16]
 80109d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d002      	beq.n	80109e6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80109e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80109e4:	e009      	b.n	80109fa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d002      	beq.n	80109f6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80109f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109f4:	e001      	b.n	80109fa <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80109f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80109fa:	4618      	mov	r0, r3
 80109fc:	371c      	adds	r7, #28
 80109fe:	46bd      	mov	sp, r7
 8010a00:	bd90      	pop	{r4, r7, pc}
 8010a02:	bf00      	nop
 8010a04:	20000000 	.word	0x20000000
 8010a08:	10624dd3 	.word	0x10624dd3

08010a0c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010a0c:	b490      	push	{r4, r7}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a14:	4b21      	ldr	r3, [pc, #132]	; (8010a9c <SDMMC_GetCmdResp7+0x90>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	4a21      	ldr	r2, [pc, #132]	; (8010aa0 <SDMMC_GetCmdResp7+0x94>)
 8010a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8010a1e:	0a5b      	lsrs	r3, r3, #9
 8010a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a24:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010a28:	4623      	mov	r3, r4
 8010a2a:	1e5c      	subs	r4, r3, #1
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d102      	bne.n	8010a36 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010a34:	e02c      	b.n	8010a90 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a3a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d0f0      	beq.n	8010a28 <SDMMC_GetCmdResp7+0x1c>
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d1eb      	bne.n	8010a28 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a54:	f003 0304 	and.w	r3, r3, #4
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d004      	beq.n	8010a66 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2204      	movs	r2, #4
 8010a60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a62:	2304      	movs	r3, #4
 8010a64:	e014      	b.n	8010a90 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a6a:	f003 0301 	and.w	r3, r3, #1
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d004      	beq.n	8010a7c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	2201      	movs	r2, #1
 8010a76:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a78:	2301      	movs	r3, #1
 8010a7a:	e009      	b.n	8010a90 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d002      	beq.n	8010a8e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2240      	movs	r2, #64	; 0x40
 8010a8c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010a8e:	2300      	movs	r3, #0
  
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3710      	adds	r7, #16
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bc90      	pop	{r4, r7}
 8010a98:	4770      	bx	lr
 8010a9a:	bf00      	nop
 8010a9c:	20000000 	.word	0x20000000
 8010aa0:	10624dd3 	.word	0x10624dd3

08010aa4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010aa8:	4904      	ldr	r1, [pc, #16]	; (8010abc <MX_FATFS_Init+0x18>)
 8010aaa:	4805      	ldr	r0, [pc, #20]	; (8010ac0 <MX_FATFS_Init+0x1c>)
 8010aac:	f003 fb9c 	bl	80141e8 <FATFS_LinkDriver>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	461a      	mov	r2, r3
 8010ab4:	4b03      	ldr	r3, [pc, #12]	; (8010ac4 <MX_FATFS_Init+0x20>)
 8010ab6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010ab8:	bf00      	nop
 8010aba:	bd80      	pop	{r7, pc}
 8010abc:	20044c48 	.word	0x20044c48
 8010ac0:	08019d2c 	.word	0x08019d2c
 8010ac4:	20044c44 	.word	0x20044c44

08010ac8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b082      	sub	sp, #8
 8010acc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010ad2:	f000 f896 	bl	8010c02 <BSP_SD_IsDetected>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	2b01      	cmp	r3, #1
 8010ada:	d001      	beq.n	8010ae0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010adc:	2301      	movs	r3, #1
 8010ade:	e012      	b.n	8010b06 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010ae0:	480b      	ldr	r0, [pc, #44]	; (8010b10 <BSP_SD_Init+0x48>)
 8010ae2:	f7fb ffa5 	bl	800ca30 <HAL_SD_Init>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010aea:	79fb      	ldrb	r3, [r7, #7]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d109      	bne.n	8010b04 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010af0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010af4:	4806      	ldr	r0, [pc, #24]	; (8010b10 <BSP_SD_Init+0x48>)
 8010af6:	f7fc fd4f 	bl	800d598 <HAL_SD_ConfigWideBusOperation>
 8010afa:	4603      	mov	r3, r0
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d001      	beq.n	8010b04 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010b00:	2301      	movs	r3, #1
 8010b02:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010b04:	79fb      	ldrb	r3, [r7, #7]
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3708      	adds	r7, #8
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}
 8010b0e:	bf00      	nop
 8010b10:	20044a40 	.word	0x20044a40

08010b14 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b086      	sub	sp, #24
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	60f8      	str	r0, [r7, #12]
 8010b1c:	60b9      	str	r1, [r7, #8]
 8010b1e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010b20:	2300      	movs	r3, #0
 8010b22:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	68ba      	ldr	r2, [r7, #8]
 8010b28:	68f9      	ldr	r1, [r7, #12]
 8010b2a:	4806      	ldr	r0, [pc, #24]	; (8010b44 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010b2c:	f7fc f810 	bl	800cb50 <HAL_SD_ReadBlocks_DMA>
 8010b30:	4603      	mov	r3, r0
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d001      	beq.n	8010b3a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010b36:	2301      	movs	r3, #1
 8010b38:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3718      	adds	r7, #24
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}
 8010b44:	20044a40 	.word	0x20044a40

08010b48 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b086      	sub	sp, #24
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	60f8      	str	r0, [r7, #12]
 8010b50:	60b9      	str	r1, [r7, #8]
 8010b52:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010b54:	2300      	movs	r3, #0
 8010b56:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	68ba      	ldr	r2, [r7, #8]
 8010b5c:	68f9      	ldr	r1, [r7, #12]
 8010b5e:	4806      	ldr	r0, [pc, #24]	; (8010b78 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010b60:	f7fc f8de 	bl	800cd20 <HAL_SD_WriteBlocks_DMA>
 8010b64:	4603      	mov	r3, r0
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d001      	beq.n	8010b6e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3718      	adds	r7, #24
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	20044a40 	.word	0x20044a40

08010b7c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010b80:	4805      	ldr	r0, [pc, #20]	; (8010b98 <BSP_SD_GetCardState+0x1c>)
 8010b82:	f7fc fd85 	bl	800d690 <HAL_SD_GetCardState>
 8010b86:	4603      	mov	r3, r0
 8010b88:	2b04      	cmp	r3, #4
 8010b8a:	bf14      	ite	ne
 8010b8c:	2301      	movne	r3, #1
 8010b8e:	2300      	moveq	r3, #0
 8010b90:	b2db      	uxtb	r3, r3
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	bd80      	pop	{r7, pc}
 8010b96:	bf00      	nop
 8010b98:	20044a40 	.word	0x20044a40

08010b9c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010ba4:	6879      	ldr	r1, [r7, #4]
 8010ba6:	4803      	ldr	r0, [pc, #12]	; (8010bb4 <BSP_SD_GetCardInfo+0x18>)
 8010ba8:	f7fc fcca 	bl	800d540 <HAL_SD_GetCardInfo>
}
 8010bac:	bf00      	nop
 8010bae:	3708      	adds	r7, #8
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}
 8010bb4:	20044a40 	.word	0x20044a40

08010bb8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010bc0:	f000 f818 	bl	8010bf4 <BSP_SD_AbortCallback>
}
 8010bc4:	bf00      	nop
 8010bc6:	3708      	adds	r7, #8
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}

08010bcc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b082      	sub	sp, #8
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010bd4:	f000 f9a8 	bl	8010f28 <BSP_SD_WriteCpltCallback>
}
 8010bd8:	bf00      	nop
 8010bda:	3708      	adds	r7, #8
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	bd80      	pop	{r7, pc}

08010be0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010be8:	f000 f9aa 	bl	8010f40 <BSP_SD_ReadCpltCallback>
}
 8010bec:	bf00      	nop
 8010bee:	3708      	adds	r7, #8
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}

08010bf4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	af00      	add	r7, sp, #0

}
 8010bf8:	bf00      	nop
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c00:	4770      	bx	lr

08010c02 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010c02:	b580      	push	{r7, lr}
 8010c04:	b082      	sub	sp, #8
 8010c06:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010c08:	2301      	movs	r3, #1
 8010c0a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010c0c:	f000 f80c 	bl	8010c28 <BSP_PlatformIsDetected>
 8010c10:	4603      	mov	r3, r0
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d101      	bne.n	8010c1a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010c16:	2300      	movs	r3, #0
 8010c18:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010c1a:	79fb      	ldrb	r3, [r7, #7]
 8010c1c:	b2db      	uxtb	r3, r3
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	3708      	adds	r7, #8
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}
	...

08010c28 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b082      	sub	sp, #8
 8010c2c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010c2e:	2301      	movs	r3, #1
 8010c30:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010c32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010c36:	4806      	ldr	r0, [pc, #24]	; (8010c50 <BSP_PlatformIsDetected+0x28>)
 8010c38:	f7fa f87e 	bl	800ad38 <HAL_GPIO_ReadPin>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d001      	beq.n	8010c46 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010c42:	2300      	movs	r3, #0
 8010c44:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010c46:	79fb      	ldrb	r3, [r7, #7]
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3708      	adds	r7, #8
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	40020000 	.word	0x40020000

08010c54 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b084      	sub	sp, #16
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010c5c:	f7f8 fde2 	bl	8009824 <HAL_GetTick>
 8010c60:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010c62:	e006      	b.n	8010c72 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010c64:	f7ff ff8a 	bl	8010b7c <BSP_SD_GetCardState>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d101      	bne.n	8010c72 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	e009      	b.n	8010c86 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010c72:	f7f8 fdd7 	bl	8009824 <HAL_GetTick>
 8010c76:	4602      	mov	r2, r0
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	1ad3      	subs	r3, r2, r3
 8010c7c:	687a      	ldr	r2, [r7, #4]
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d8f0      	bhi.n	8010c64 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3710      	adds	r7, #16
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}
	...

08010c90 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b082      	sub	sp, #8
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	4603      	mov	r3, r0
 8010c98:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010c9a:	4b0b      	ldr	r3, [pc, #44]	; (8010cc8 <SD_CheckStatus+0x38>)
 8010c9c:	2201      	movs	r2, #1
 8010c9e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010ca0:	f7ff ff6c 	bl	8010b7c <BSP_SD_GetCardState>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d107      	bne.n	8010cba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010caa:	4b07      	ldr	r3, [pc, #28]	; (8010cc8 <SD_CheckStatus+0x38>)
 8010cac:	781b      	ldrb	r3, [r3, #0]
 8010cae:	b2db      	uxtb	r3, r3
 8010cb0:	f023 0301 	bic.w	r3, r3, #1
 8010cb4:	b2da      	uxtb	r2, r3
 8010cb6:	4b04      	ldr	r3, [pc, #16]	; (8010cc8 <SD_CheckStatus+0x38>)
 8010cb8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010cba:	4b03      	ldr	r3, [pc, #12]	; (8010cc8 <SD_CheckStatus+0x38>)
 8010cbc:	781b      	ldrb	r3, [r3, #0]
 8010cbe:	b2db      	uxtb	r3, r3
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3708      	adds	r7, #8
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}
 8010cc8:	20000009 	.word	0x20000009

08010ccc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b082      	sub	sp, #8
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010cd6:	f7ff fef7 	bl	8010ac8 <BSP_SD_Init>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d107      	bne.n	8010cf0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010ce0:	79fb      	ldrb	r3, [r7, #7]
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f7ff ffd4 	bl	8010c90 <SD_CheckStatus>
 8010ce8:	4603      	mov	r3, r0
 8010cea:	461a      	mov	r2, r3
 8010cec:	4b04      	ldr	r3, [pc, #16]	; (8010d00 <SD_initialize+0x34>)
 8010cee:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010cf0:	4b03      	ldr	r3, [pc, #12]	; (8010d00 <SD_initialize+0x34>)
 8010cf2:	781b      	ldrb	r3, [r3, #0]
 8010cf4:	b2db      	uxtb	r3, r3
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3708      	adds	r7, #8
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	20000009 	.word	0x20000009

08010d04 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b082      	sub	sp, #8
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010d0e:	79fb      	ldrb	r3, [r7, #7]
 8010d10:	4618      	mov	r0, r3
 8010d12:	f7ff ffbd 	bl	8010c90 <SD_CheckStatus>
 8010d16:	4603      	mov	r3, r0
}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3708      	adds	r7, #8
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}

08010d20 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b086      	sub	sp, #24
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	60b9      	str	r1, [r7, #8]
 8010d28:	607a      	str	r2, [r7, #4]
 8010d2a:	603b      	str	r3, [r7, #0]
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010d30:	2301      	movs	r3, #1
 8010d32:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010d34:	f247 5030 	movw	r0, #30000	; 0x7530
 8010d38:	f7ff ff8c 	bl	8010c54 <SD_CheckStatusWithTimeout>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	da01      	bge.n	8010d46 <SD_read+0x26>
  {
    return res;
 8010d42:	7dfb      	ldrb	r3, [r7, #23]
 8010d44:	e03b      	b.n	8010dbe <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010d46:	683a      	ldr	r2, [r7, #0]
 8010d48:	6879      	ldr	r1, [r7, #4]
 8010d4a:	68b8      	ldr	r0, [r7, #8]
 8010d4c:	f7ff fee2 	bl	8010b14 <BSP_SD_ReadBlocks_DMA>
 8010d50:	4603      	mov	r3, r0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d132      	bne.n	8010dbc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010d56:	4b1c      	ldr	r3, [pc, #112]	; (8010dc8 <SD_read+0xa8>)
 8010d58:	2200      	movs	r2, #0
 8010d5a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010d5c:	f7f8 fd62 	bl	8009824 <HAL_GetTick>
 8010d60:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010d62:	bf00      	nop
 8010d64:	4b18      	ldr	r3, [pc, #96]	; (8010dc8 <SD_read+0xa8>)
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d108      	bne.n	8010d7e <SD_read+0x5e>
 8010d6c:	f7f8 fd5a 	bl	8009824 <HAL_GetTick>
 8010d70:	4602      	mov	r2, r0
 8010d72:	693b      	ldr	r3, [r7, #16]
 8010d74:	1ad3      	subs	r3, r2, r3
 8010d76:	f247 522f 	movw	r2, #29999	; 0x752f
 8010d7a:	4293      	cmp	r3, r2
 8010d7c:	d9f2      	bls.n	8010d64 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8010d7e:	4b12      	ldr	r3, [pc, #72]	; (8010dc8 <SD_read+0xa8>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d102      	bne.n	8010d8c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010d86:	2301      	movs	r3, #1
 8010d88:	75fb      	strb	r3, [r7, #23]
 8010d8a:	e017      	b.n	8010dbc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010d8c:	4b0e      	ldr	r3, [pc, #56]	; (8010dc8 <SD_read+0xa8>)
 8010d8e:	2200      	movs	r2, #0
 8010d90:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010d92:	f7f8 fd47 	bl	8009824 <HAL_GetTick>
 8010d96:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010d98:	e007      	b.n	8010daa <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010d9a:	f7ff feef 	bl	8010b7c <BSP_SD_GetCardState>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d102      	bne.n	8010daa <SD_read+0x8a>
          {
            res = RES_OK;
 8010da4:	2300      	movs	r3, #0
 8010da6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010da8:	e008      	b.n	8010dbc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010daa:	f7f8 fd3b 	bl	8009824 <HAL_GetTick>
 8010dae:	4602      	mov	r2, r0
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	1ad3      	subs	r3, r2, r3
 8010db4:	f247 522f 	movw	r2, #29999	; 0x752f
 8010db8:	4293      	cmp	r3, r2
 8010dba:	d9ee      	bls.n	8010d9a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3718      	adds	r7, #24
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
 8010dc6:	bf00      	nop
 8010dc8:	200422dc 	.word	0x200422dc

08010dcc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b086      	sub	sp, #24
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	60b9      	str	r1, [r7, #8]
 8010dd4:	607a      	str	r2, [r7, #4]
 8010dd6:	603b      	str	r3, [r7, #0]
 8010dd8:	4603      	mov	r3, r0
 8010dda:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010ddc:	2301      	movs	r3, #1
 8010dde:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010de0:	4b24      	ldr	r3, [pc, #144]	; (8010e74 <SD_write+0xa8>)
 8010de2:	2200      	movs	r2, #0
 8010de4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010de6:	f247 5030 	movw	r0, #30000	; 0x7530
 8010dea:	f7ff ff33 	bl	8010c54 <SD_CheckStatusWithTimeout>
 8010dee:	4603      	mov	r3, r0
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	da01      	bge.n	8010df8 <SD_write+0x2c>
  {
    return res;
 8010df4:	7dfb      	ldrb	r3, [r7, #23]
 8010df6:	e038      	b.n	8010e6a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010df8:	683a      	ldr	r2, [r7, #0]
 8010dfa:	6879      	ldr	r1, [r7, #4]
 8010dfc:	68b8      	ldr	r0, [r7, #8]
 8010dfe:	f7ff fea3 	bl	8010b48 <BSP_SD_WriteBlocks_DMA>
 8010e02:	4603      	mov	r3, r0
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d12f      	bne.n	8010e68 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010e08:	f7f8 fd0c 	bl	8009824 <HAL_GetTick>
 8010e0c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010e0e:	bf00      	nop
 8010e10:	4b18      	ldr	r3, [pc, #96]	; (8010e74 <SD_write+0xa8>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d108      	bne.n	8010e2a <SD_write+0x5e>
 8010e18:	f7f8 fd04 	bl	8009824 <HAL_GetTick>
 8010e1c:	4602      	mov	r2, r0
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	1ad3      	subs	r3, r2, r3
 8010e22:	f247 522f 	movw	r2, #29999	; 0x752f
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d9f2      	bls.n	8010e10 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8010e2a:	4b12      	ldr	r3, [pc, #72]	; (8010e74 <SD_write+0xa8>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d102      	bne.n	8010e38 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010e32:	2301      	movs	r3, #1
 8010e34:	75fb      	strb	r3, [r7, #23]
 8010e36:	e017      	b.n	8010e68 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010e38:	4b0e      	ldr	r3, [pc, #56]	; (8010e74 <SD_write+0xa8>)
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010e3e:	f7f8 fcf1 	bl	8009824 <HAL_GetTick>
 8010e42:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010e44:	e007      	b.n	8010e56 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010e46:	f7ff fe99 	bl	8010b7c <BSP_SD_GetCardState>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d102      	bne.n	8010e56 <SD_write+0x8a>
          {
            res = RES_OK;
 8010e50:	2300      	movs	r3, #0
 8010e52:	75fb      	strb	r3, [r7, #23]
            break;
 8010e54:	e008      	b.n	8010e68 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010e56:	f7f8 fce5 	bl	8009824 <HAL_GetTick>
 8010e5a:	4602      	mov	r2, r0
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	1ad3      	subs	r3, r2, r3
 8010e60:	f247 522f 	movw	r2, #29999	; 0x752f
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d9ee      	bls.n	8010e46 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3718      	adds	r7, #24
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	bf00      	nop
 8010e74:	200422d8 	.word	0x200422d8

08010e78 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b08c      	sub	sp, #48	; 0x30
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	4603      	mov	r3, r0
 8010e80:	603a      	str	r2, [r7, #0]
 8010e82:	71fb      	strb	r3, [r7, #7]
 8010e84:	460b      	mov	r3, r1
 8010e86:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010e88:	2301      	movs	r3, #1
 8010e8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010e8e:	4b25      	ldr	r3, [pc, #148]	; (8010f24 <SD_ioctl+0xac>)
 8010e90:	781b      	ldrb	r3, [r3, #0]
 8010e92:	b2db      	uxtb	r3, r3
 8010e94:	f003 0301 	and.w	r3, r3, #1
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d001      	beq.n	8010ea0 <SD_ioctl+0x28>
 8010e9c:	2303      	movs	r3, #3
 8010e9e:	e03c      	b.n	8010f1a <SD_ioctl+0xa2>

  switch (cmd)
 8010ea0:	79bb      	ldrb	r3, [r7, #6]
 8010ea2:	2b03      	cmp	r3, #3
 8010ea4:	d834      	bhi.n	8010f10 <SD_ioctl+0x98>
 8010ea6:	a201      	add	r2, pc, #4	; (adr r2, 8010eac <SD_ioctl+0x34>)
 8010ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eac:	08010ebd 	.word	0x08010ebd
 8010eb0:	08010ec5 	.word	0x08010ec5
 8010eb4:	08010edd 	.word	0x08010edd
 8010eb8:	08010ef7 	.word	0x08010ef7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010ec2:	e028      	b.n	8010f16 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010ec4:	f107 030c 	add.w	r3, r7, #12
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f7ff fe67 	bl	8010b9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010ece:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010eda:	e01c      	b.n	8010f16 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010edc:	f107 030c 	add.w	r3, r7, #12
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	f7ff fe5b 	bl	8010b9c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ee8:	b29a      	uxth	r2, r3
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010ef4:	e00f      	b.n	8010f16 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010ef6:	f107 030c 	add.w	r3, r7, #12
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7ff fe4e 	bl	8010b9c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f02:	0a5a      	lsrs	r2, r3, #9
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010f08:	2300      	movs	r3, #0
 8010f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010f0e:	e002      	b.n	8010f16 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010f10:	2304      	movs	r3, #4
 8010f12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010f16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	3730      	adds	r7, #48	; 0x30
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}
 8010f22:	bf00      	nop
 8010f24:	20000009 	.word	0x20000009

08010f28 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010f28:	b480      	push	{r7}
 8010f2a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010f2c:	4b03      	ldr	r3, [pc, #12]	; (8010f3c <BSP_SD_WriteCpltCallback+0x14>)
 8010f2e:	2201      	movs	r2, #1
 8010f30:	601a      	str	r2, [r3, #0]
}
 8010f32:	bf00      	nop
 8010f34:	46bd      	mov	sp, r7
 8010f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3a:	4770      	bx	lr
 8010f3c:	200422d8 	.word	0x200422d8

08010f40 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010f40:	b480      	push	{r7}
 8010f42:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010f44:	4b03      	ldr	r3, [pc, #12]	; (8010f54 <BSP_SD_ReadCpltCallback+0x14>)
 8010f46:	2201      	movs	r2, #1
 8010f48:	601a      	str	r2, [r3, #0]
}
 8010f4a:	bf00      	nop
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr
 8010f54:	200422dc 	.word	0x200422dc

08010f58 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b084      	sub	sp, #16
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	4603      	mov	r3, r0
 8010f60:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010f62:	79fb      	ldrb	r3, [r7, #7]
 8010f64:	4a08      	ldr	r2, [pc, #32]	; (8010f88 <disk_status+0x30>)
 8010f66:	009b      	lsls	r3, r3, #2
 8010f68:	4413      	add	r3, r2
 8010f6a:	685b      	ldr	r3, [r3, #4]
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	79fa      	ldrb	r2, [r7, #7]
 8010f70:	4905      	ldr	r1, [pc, #20]	; (8010f88 <disk_status+0x30>)
 8010f72:	440a      	add	r2, r1
 8010f74:	7a12      	ldrb	r2, [r2, #8]
 8010f76:	4610      	mov	r0, r2
 8010f78:	4798      	blx	r3
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	3710      	adds	r7, #16
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	20042308 	.word	0x20042308

08010f8c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	4603      	mov	r3, r0
 8010f94:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010f96:	2300      	movs	r3, #0
 8010f98:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010f9a:	79fb      	ldrb	r3, [r7, #7]
 8010f9c:	4a0d      	ldr	r2, [pc, #52]	; (8010fd4 <disk_initialize+0x48>)
 8010f9e:	5cd3      	ldrb	r3, [r2, r3]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d111      	bne.n	8010fc8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010fa4:	79fb      	ldrb	r3, [r7, #7]
 8010fa6:	4a0b      	ldr	r2, [pc, #44]	; (8010fd4 <disk_initialize+0x48>)
 8010fa8:	2101      	movs	r1, #1
 8010faa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010fac:	79fb      	ldrb	r3, [r7, #7]
 8010fae:	4a09      	ldr	r2, [pc, #36]	; (8010fd4 <disk_initialize+0x48>)
 8010fb0:	009b      	lsls	r3, r3, #2
 8010fb2:	4413      	add	r3, r2
 8010fb4:	685b      	ldr	r3, [r3, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	79fa      	ldrb	r2, [r7, #7]
 8010fba:	4906      	ldr	r1, [pc, #24]	; (8010fd4 <disk_initialize+0x48>)
 8010fbc:	440a      	add	r2, r1
 8010fbe:	7a12      	ldrb	r2, [r2, #8]
 8010fc0:	4610      	mov	r0, r2
 8010fc2:	4798      	blx	r3
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3710      	adds	r7, #16
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
 8010fd2:	bf00      	nop
 8010fd4:	20042308 	.word	0x20042308

08010fd8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010fd8:	b590      	push	{r4, r7, lr}
 8010fda:	b087      	sub	sp, #28
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	60b9      	str	r1, [r7, #8]
 8010fe0:	607a      	str	r2, [r7, #4]
 8010fe2:	603b      	str	r3, [r7, #0]
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010fe8:	7bfb      	ldrb	r3, [r7, #15]
 8010fea:	4a0a      	ldr	r2, [pc, #40]	; (8011014 <disk_read+0x3c>)
 8010fec:	009b      	lsls	r3, r3, #2
 8010fee:	4413      	add	r3, r2
 8010ff0:	685b      	ldr	r3, [r3, #4]
 8010ff2:	689c      	ldr	r4, [r3, #8]
 8010ff4:	7bfb      	ldrb	r3, [r7, #15]
 8010ff6:	4a07      	ldr	r2, [pc, #28]	; (8011014 <disk_read+0x3c>)
 8010ff8:	4413      	add	r3, r2
 8010ffa:	7a18      	ldrb	r0, [r3, #8]
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	687a      	ldr	r2, [r7, #4]
 8011000:	68b9      	ldr	r1, [r7, #8]
 8011002:	47a0      	blx	r4
 8011004:	4603      	mov	r3, r0
 8011006:	75fb      	strb	r3, [r7, #23]
  return res;
 8011008:	7dfb      	ldrb	r3, [r7, #23]
}
 801100a:	4618      	mov	r0, r3
 801100c:	371c      	adds	r7, #28
 801100e:	46bd      	mov	sp, r7
 8011010:	bd90      	pop	{r4, r7, pc}
 8011012:	bf00      	nop
 8011014:	20042308 	.word	0x20042308

08011018 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011018:	b590      	push	{r4, r7, lr}
 801101a:	b087      	sub	sp, #28
 801101c:	af00      	add	r7, sp, #0
 801101e:	60b9      	str	r1, [r7, #8]
 8011020:	607a      	str	r2, [r7, #4]
 8011022:	603b      	str	r3, [r7, #0]
 8011024:	4603      	mov	r3, r0
 8011026:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011028:	7bfb      	ldrb	r3, [r7, #15]
 801102a:	4a0a      	ldr	r2, [pc, #40]	; (8011054 <disk_write+0x3c>)
 801102c:	009b      	lsls	r3, r3, #2
 801102e:	4413      	add	r3, r2
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	68dc      	ldr	r4, [r3, #12]
 8011034:	7bfb      	ldrb	r3, [r7, #15]
 8011036:	4a07      	ldr	r2, [pc, #28]	; (8011054 <disk_write+0x3c>)
 8011038:	4413      	add	r3, r2
 801103a:	7a18      	ldrb	r0, [r3, #8]
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	687a      	ldr	r2, [r7, #4]
 8011040:	68b9      	ldr	r1, [r7, #8]
 8011042:	47a0      	blx	r4
 8011044:	4603      	mov	r3, r0
 8011046:	75fb      	strb	r3, [r7, #23]
  return res;
 8011048:	7dfb      	ldrb	r3, [r7, #23]
}
 801104a:	4618      	mov	r0, r3
 801104c:	371c      	adds	r7, #28
 801104e:	46bd      	mov	sp, r7
 8011050:	bd90      	pop	{r4, r7, pc}
 8011052:	bf00      	nop
 8011054:	20042308 	.word	0x20042308

08011058 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b084      	sub	sp, #16
 801105c:	af00      	add	r7, sp, #0
 801105e:	4603      	mov	r3, r0
 8011060:	603a      	str	r2, [r7, #0]
 8011062:	71fb      	strb	r3, [r7, #7]
 8011064:	460b      	mov	r3, r1
 8011066:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011068:	79fb      	ldrb	r3, [r7, #7]
 801106a:	4a09      	ldr	r2, [pc, #36]	; (8011090 <disk_ioctl+0x38>)
 801106c:	009b      	lsls	r3, r3, #2
 801106e:	4413      	add	r3, r2
 8011070:	685b      	ldr	r3, [r3, #4]
 8011072:	691b      	ldr	r3, [r3, #16]
 8011074:	79fa      	ldrb	r2, [r7, #7]
 8011076:	4906      	ldr	r1, [pc, #24]	; (8011090 <disk_ioctl+0x38>)
 8011078:	440a      	add	r2, r1
 801107a:	7a10      	ldrb	r0, [r2, #8]
 801107c:	79b9      	ldrb	r1, [r7, #6]
 801107e:	683a      	ldr	r2, [r7, #0]
 8011080:	4798      	blx	r3
 8011082:	4603      	mov	r3, r0
 8011084:	73fb      	strb	r3, [r7, #15]
  return res;
 8011086:	7bfb      	ldrb	r3, [r7, #15]
}
 8011088:	4618      	mov	r0, r3
 801108a:	3710      	adds	r7, #16
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}
 8011090:	20042308 	.word	0x20042308

08011094 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011094:	b480      	push	{r7}
 8011096:	b085      	sub	sp, #20
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	3301      	adds	r3, #1
 80110a0:	781b      	ldrb	r3, [r3, #0]
 80110a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80110a4:	89fb      	ldrh	r3, [r7, #14]
 80110a6:	021b      	lsls	r3, r3, #8
 80110a8:	b21a      	sxth	r2, r3
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	781b      	ldrb	r3, [r3, #0]
 80110ae:	b21b      	sxth	r3, r3
 80110b0:	4313      	orrs	r3, r2
 80110b2:	b21b      	sxth	r3, r3
 80110b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80110b6:	89fb      	ldrh	r3, [r7, #14]
}
 80110b8:	4618      	mov	r0, r3
 80110ba:	3714      	adds	r7, #20
 80110bc:	46bd      	mov	sp, r7
 80110be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c2:	4770      	bx	lr

080110c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80110c4:	b480      	push	{r7}
 80110c6:	b085      	sub	sp, #20
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	3303      	adds	r3, #3
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	021b      	lsls	r3, r3, #8
 80110d8:	687a      	ldr	r2, [r7, #4]
 80110da:	3202      	adds	r2, #2
 80110dc:	7812      	ldrb	r2, [r2, #0]
 80110de:	4313      	orrs	r3, r2
 80110e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	021b      	lsls	r3, r3, #8
 80110e6:	687a      	ldr	r2, [r7, #4]
 80110e8:	3201      	adds	r2, #1
 80110ea:	7812      	ldrb	r2, [r2, #0]
 80110ec:	4313      	orrs	r3, r2
 80110ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	021b      	lsls	r3, r3, #8
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	7812      	ldrb	r2, [r2, #0]
 80110f8:	4313      	orrs	r3, r2
 80110fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80110fc:	68fb      	ldr	r3, [r7, #12]
}
 80110fe:	4618      	mov	r0, r3
 8011100:	3714      	adds	r7, #20
 8011102:	46bd      	mov	sp, r7
 8011104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011108:	4770      	bx	lr

0801110a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801110a:	b480      	push	{r7}
 801110c:	b083      	sub	sp, #12
 801110e:	af00      	add	r7, sp, #0
 8011110:	6078      	str	r0, [r7, #4]
 8011112:	460b      	mov	r3, r1
 8011114:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	1c5a      	adds	r2, r3, #1
 801111a:	607a      	str	r2, [r7, #4]
 801111c:	887a      	ldrh	r2, [r7, #2]
 801111e:	b2d2      	uxtb	r2, r2
 8011120:	701a      	strb	r2, [r3, #0]
 8011122:	887b      	ldrh	r3, [r7, #2]
 8011124:	0a1b      	lsrs	r3, r3, #8
 8011126:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	1c5a      	adds	r2, r3, #1
 801112c:	607a      	str	r2, [r7, #4]
 801112e:	887a      	ldrh	r2, [r7, #2]
 8011130:	b2d2      	uxtb	r2, r2
 8011132:	701a      	strb	r2, [r3, #0]
}
 8011134:	bf00      	nop
 8011136:	370c      	adds	r7, #12
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr

08011140 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011140:	b480      	push	{r7}
 8011142:	b083      	sub	sp, #12
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	1c5a      	adds	r2, r3, #1
 801114e:	607a      	str	r2, [r7, #4]
 8011150:	683a      	ldr	r2, [r7, #0]
 8011152:	b2d2      	uxtb	r2, r2
 8011154:	701a      	strb	r2, [r3, #0]
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	0a1b      	lsrs	r3, r3, #8
 801115a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	1c5a      	adds	r2, r3, #1
 8011160:	607a      	str	r2, [r7, #4]
 8011162:	683a      	ldr	r2, [r7, #0]
 8011164:	b2d2      	uxtb	r2, r2
 8011166:	701a      	strb	r2, [r3, #0]
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	0a1b      	lsrs	r3, r3, #8
 801116c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	1c5a      	adds	r2, r3, #1
 8011172:	607a      	str	r2, [r7, #4]
 8011174:	683a      	ldr	r2, [r7, #0]
 8011176:	b2d2      	uxtb	r2, r2
 8011178:	701a      	strb	r2, [r3, #0]
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	0a1b      	lsrs	r3, r3, #8
 801117e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	1c5a      	adds	r2, r3, #1
 8011184:	607a      	str	r2, [r7, #4]
 8011186:	683a      	ldr	r2, [r7, #0]
 8011188:	b2d2      	uxtb	r2, r2
 801118a:	701a      	strb	r2, [r3, #0]
}
 801118c:	bf00      	nop
 801118e:	370c      	adds	r7, #12
 8011190:	46bd      	mov	sp, r7
 8011192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011196:	4770      	bx	lr

08011198 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011198:	b480      	push	{r7}
 801119a:	b087      	sub	sp, #28
 801119c:	af00      	add	r7, sp, #0
 801119e:	60f8      	str	r0, [r7, #12]
 80111a0:	60b9      	str	r1, [r7, #8]
 80111a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d00d      	beq.n	80111ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80111b2:	693a      	ldr	r2, [r7, #16]
 80111b4:	1c53      	adds	r3, r2, #1
 80111b6:	613b      	str	r3, [r7, #16]
 80111b8:	697b      	ldr	r3, [r7, #20]
 80111ba:	1c59      	adds	r1, r3, #1
 80111bc:	6179      	str	r1, [r7, #20]
 80111be:	7812      	ldrb	r2, [r2, #0]
 80111c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	3b01      	subs	r3, #1
 80111c6:	607b      	str	r3, [r7, #4]
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d1f1      	bne.n	80111b2 <mem_cpy+0x1a>
	}
}
 80111ce:	bf00      	nop
 80111d0:	371c      	adds	r7, #28
 80111d2:	46bd      	mov	sp, r7
 80111d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d8:	4770      	bx	lr

080111da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80111da:	b480      	push	{r7}
 80111dc:	b087      	sub	sp, #28
 80111de:	af00      	add	r7, sp, #0
 80111e0:	60f8      	str	r0, [r7, #12]
 80111e2:	60b9      	str	r1, [r7, #8]
 80111e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	1c5a      	adds	r2, r3, #1
 80111ee:	617a      	str	r2, [r7, #20]
 80111f0:	68ba      	ldr	r2, [r7, #8]
 80111f2:	b2d2      	uxtb	r2, r2
 80111f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	3b01      	subs	r3, #1
 80111fa:	607b      	str	r3, [r7, #4]
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d1f3      	bne.n	80111ea <mem_set+0x10>
}
 8011202:	bf00      	nop
 8011204:	371c      	adds	r7, #28
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr

0801120e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801120e:	b480      	push	{r7}
 8011210:	b089      	sub	sp, #36	; 0x24
 8011212:	af00      	add	r7, sp, #0
 8011214:	60f8      	str	r0, [r7, #12]
 8011216:	60b9      	str	r1, [r7, #8]
 8011218:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	61fb      	str	r3, [r7, #28]
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011222:	2300      	movs	r3, #0
 8011224:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011226:	69fb      	ldr	r3, [r7, #28]
 8011228:	1c5a      	adds	r2, r3, #1
 801122a:	61fa      	str	r2, [r7, #28]
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	4619      	mov	r1, r3
 8011230:	69bb      	ldr	r3, [r7, #24]
 8011232:	1c5a      	adds	r2, r3, #1
 8011234:	61ba      	str	r2, [r7, #24]
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	1acb      	subs	r3, r1, r3
 801123a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	3b01      	subs	r3, #1
 8011240:	607b      	str	r3, [r7, #4]
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d002      	beq.n	801124e <mem_cmp+0x40>
 8011248:	697b      	ldr	r3, [r7, #20]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d0eb      	beq.n	8011226 <mem_cmp+0x18>

	return r;
 801124e:	697b      	ldr	r3, [r7, #20]
}
 8011250:	4618      	mov	r0, r3
 8011252:	3724      	adds	r7, #36	; 0x24
 8011254:	46bd      	mov	sp, r7
 8011256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125a:	4770      	bx	lr

0801125c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801125c:	b480      	push	{r7}
 801125e:	b083      	sub	sp, #12
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
 8011264:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011266:	e002      	b.n	801126e <chk_chr+0x12>
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	3301      	adds	r3, #1
 801126c:	607b      	str	r3, [r7, #4]
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	781b      	ldrb	r3, [r3, #0]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d005      	beq.n	8011282 <chk_chr+0x26>
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	461a      	mov	r2, r3
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	4293      	cmp	r3, r2
 8011280:	d1f2      	bne.n	8011268 <chk_chr+0xc>
	return *str;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	781b      	ldrb	r3, [r3, #0]
}
 8011286:	4618      	mov	r0, r3
 8011288:	370c      	adds	r7, #12
 801128a:	46bd      	mov	sp, r7
 801128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011290:	4770      	bx	lr
	...

08011294 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011294:	b480      	push	{r7}
 8011296:	b085      	sub	sp, #20
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801129e:	2300      	movs	r3, #0
 80112a0:	60bb      	str	r3, [r7, #8]
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	60fb      	str	r3, [r7, #12]
 80112a6:	e029      	b.n	80112fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80112a8:	4a27      	ldr	r2, [pc, #156]	; (8011348 <chk_lock+0xb4>)
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	011b      	lsls	r3, r3, #4
 80112ae:	4413      	add	r3, r2
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d01d      	beq.n	80112f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80112b6:	4a24      	ldr	r2, [pc, #144]	; (8011348 <chk_lock+0xb4>)
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	011b      	lsls	r3, r3, #4
 80112bc:	4413      	add	r3, r2
 80112be:	681a      	ldr	r2, [r3, #0]
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	429a      	cmp	r2, r3
 80112c6:	d116      	bne.n	80112f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80112c8:	4a1f      	ldr	r2, [pc, #124]	; (8011348 <chk_lock+0xb4>)
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	011b      	lsls	r3, r3, #4
 80112ce:	4413      	add	r3, r2
 80112d0:	3304      	adds	r3, #4
 80112d2:	681a      	ldr	r2, [r3, #0]
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80112d8:	429a      	cmp	r2, r3
 80112da:	d10c      	bne.n	80112f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80112dc:	4a1a      	ldr	r2, [pc, #104]	; (8011348 <chk_lock+0xb4>)
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	011b      	lsls	r3, r3, #4
 80112e2:	4413      	add	r3, r2
 80112e4:	3308      	adds	r3, #8
 80112e6:	681a      	ldr	r2, [r3, #0]
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80112ec:	429a      	cmp	r2, r3
 80112ee:	d102      	bne.n	80112f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80112f0:	e007      	b.n	8011302 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80112f2:	2301      	movs	r3, #1
 80112f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	3301      	adds	r3, #1
 80112fa:	60fb      	str	r3, [r7, #12]
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	2b01      	cmp	r3, #1
 8011300:	d9d2      	bls.n	80112a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	2b02      	cmp	r3, #2
 8011306:	d109      	bne.n	801131c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d102      	bne.n	8011314 <chk_lock+0x80>
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	2b02      	cmp	r3, #2
 8011312:	d101      	bne.n	8011318 <chk_lock+0x84>
 8011314:	2300      	movs	r3, #0
 8011316:	e010      	b.n	801133a <chk_lock+0xa6>
 8011318:	2312      	movs	r3, #18
 801131a:	e00e      	b.n	801133a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d108      	bne.n	8011334 <chk_lock+0xa0>
 8011322:	4a09      	ldr	r2, [pc, #36]	; (8011348 <chk_lock+0xb4>)
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	011b      	lsls	r3, r3, #4
 8011328:	4413      	add	r3, r2
 801132a:	330c      	adds	r3, #12
 801132c:	881b      	ldrh	r3, [r3, #0]
 801132e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011332:	d101      	bne.n	8011338 <chk_lock+0xa4>
 8011334:	2310      	movs	r3, #16
 8011336:	e000      	b.n	801133a <chk_lock+0xa6>
 8011338:	2300      	movs	r3, #0
}
 801133a:	4618      	mov	r0, r3
 801133c:	3714      	adds	r7, #20
 801133e:	46bd      	mov	sp, r7
 8011340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011344:	4770      	bx	lr
 8011346:	bf00      	nop
 8011348:	200422e8 	.word	0x200422e8

0801134c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801134c:	b480      	push	{r7}
 801134e:	b083      	sub	sp, #12
 8011350:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011352:	2300      	movs	r3, #0
 8011354:	607b      	str	r3, [r7, #4]
 8011356:	e002      	b.n	801135e <enq_lock+0x12>
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	3301      	adds	r3, #1
 801135c:	607b      	str	r3, [r7, #4]
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	2b01      	cmp	r3, #1
 8011362:	d806      	bhi.n	8011372 <enq_lock+0x26>
 8011364:	4a09      	ldr	r2, [pc, #36]	; (801138c <enq_lock+0x40>)
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	011b      	lsls	r3, r3, #4
 801136a:	4413      	add	r3, r2
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d1f2      	bne.n	8011358 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2b02      	cmp	r3, #2
 8011376:	bf14      	ite	ne
 8011378:	2301      	movne	r3, #1
 801137a:	2300      	moveq	r3, #0
 801137c:	b2db      	uxtb	r3, r3
}
 801137e:	4618      	mov	r0, r3
 8011380:	370c      	adds	r7, #12
 8011382:	46bd      	mov	sp, r7
 8011384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011388:	4770      	bx	lr
 801138a:	bf00      	nop
 801138c:	200422e8 	.word	0x200422e8

08011390 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011390:	b480      	push	{r7}
 8011392:	b085      	sub	sp, #20
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801139a:	2300      	movs	r3, #0
 801139c:	60fb      	str	r3, [r7, #12]
 801139e:	e01f      	b.n	80113e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80113a0:	4a41      	ldr	r2, [pc, #260]	; (80114a8 <inc_lock+0x118>)
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	011b      	lsls	r3, r3, #4
 80113a6:	4413      	add	r3, r2
 80113a8:	681a      	ldr	r2, [r3, #0]
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	429a      	cmp	r2, r3
 80113b0:	d113      	bne.n	80113da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80113b2:	4a3d      	ldr	r2, [pc, #244]	; (80114a8 <inc_lock+0x118>)
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	011b      	lsls	r3, r3, #4
 80113b8:	4413      	add	r3, r2
 80113ba:	3304      	adds	r3, #4
 80113bc:	681a      	ldr	r2, [r3, #0]
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80113c2:	429a      	cmp	r2, r3
 80113c4:	d109      	bne.n	80113da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80113c6:	4a38      	ldr	r2, [pc, #224]	; (80114a8 <inc_lock+0x118>)
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	011b      	lsls	r3, r3, #4
 80113cc:	4413      	add	r3, r2
 80113ce:	3308      	adds	r3, #8
 80113d0:	681a      	ldr	r2, [r3, #0]
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d006      	beq.n	80113e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	3301      	adds	r3, #1
 80113de:	60fb      	str	r3, [r7, #12]
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	2b01      	cmp	r3, #1
 80113e4:	d9dc      	bls.n	80113a0 <inc_lock+0x10>
 80113e6:	e000      	b.n	80113ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80113e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	2b02      	cmp	r3, #2
 80113ee:	d132      	bne.n	8011456 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80113f0:	2300      	movs	r3, #0
 80113f2:	60fb      	str	r3, [r7, #12]
 80113f4:	e002      	b.n	80113fc <inc_lock+0x6c>
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	3301      	adds	r3, #1
 80113fa:	60fb      	str	r3, [r7, #12]
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	2b01      	cmp	r3, #1
 8011400:	d806      	bhi.n	8011410 <inc_lock+0x80>
 8011402:	4a29      	ldr	r2, [pc, #164]	; (80114a8 <inc_lock+0x118>)
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	011b      	lsls	r3, r3, #4
 8011408:	4413      	add	r3, r2
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d1f2      	bne.n	80113f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	2b02      	cmp	r3, #2
 8011414:	d101      	bne.n	801141a <inc_lock+0x8a>
 8011416:	2300      	movs	r3, #0
 8011418:	e040      	b.n	801149c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	681a      	ldr	r2, [r3, #0]
 801141e:	4922      	ldr	r1, [pc, #136]	; (80114a8 <inc_lock+0x118>)
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	011b      	lsls	r3, r3, #4
 8011424:	440b      	add	r3, r1
 8011426:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	689a      	ldr	r2, [r3, #8]
 801142c:	491e      	ldr	r1, [pc, #120]	; (80114a8 <inc_lock+0x118>)
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	011b      	lsls	r3, r3, #4
 8011432:	440b      	add	r3, r1
 8011434:	3304      	adds	r3, #4
 8011436:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	695a      	ldr	r2, [r3, #20]
 801143c:	491a      	ldr	r1, [pc, #104]	; (80114a8 <inc_lock+0x118>)
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	011b      	lsls	r3, r3, #4
 8011442:	440b      	add	r3, r1
 8011444:	3308      	adds	r3, #8
 8011446:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011448:	4a17      	ldr	r2, [pc, #92]	; (80114a8 <inc_lock+0x118>)
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	011b      	lsls	r3, r3, #4
 801144e:	4413      	add	r3, r2
 8011450:	330c      	adds	r3, #12
 8011452:	2200      	movs	r2, #0
 8011454:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d009      	beq.n	8011470 <inc_lock+0xe0>
 801145c:	4a12      	ldr	r2, [pc, #72]	; (80114a8 <inc_lock+0x118>)
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	011b      	lsls	r3, r3, #4
 8011462:	4413      	add	r3, r2
 8011464:	330c      	adds	r3, #12
 8011466:	881b      	ldrh	r3, [r3, #0]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d001      	beq.n	8011470 <inc_lock+0xe0>
 801146c:	2300      	movs	r3, #0
 801146e:	e015      	b.n	801149c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d108      	bne.n	8011488 <inc_lock+0xf8>
 8011476:	4a0c      	ldr	r2, [pc, #48]	; (80114a8 <inc_lock+0x118>)
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	011b      	lsls	r3, r3, #4
 801147c:	4413      	add	r3, r2
 801147e:	330c      	adds	r3, #12
 8011480:	881b      	ldrh	r3, [r3, #0]
 8011482:	3301      	adds	r3, #1
 8011484:	b29a      	uxth	r2, r3
 8011486:	e001      	b.n	801148c <inc_lock+0xfc>
 8011488:	f44f 7280 	mov.w	r2, #256	; 0x100
 801148c:	4906      	ldr	r1, [pc, #24]	; (80114a8 <inc_lock+0x118>)
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	011b      	lsls	r3, r3, #4
 8011492:	440b      	add	r3, r1
 8011494:	330c      	adds	r3, #12
 8011496:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	3301      	adds	r3, #1
}
 801149c:	4618      	mov	r0, r3
 801149e:	3714      	adds	r7, #20
 80114a0:	46bd      	mov	sp, r7
 80114a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a6:	4770      	bx	lr
 80114a8:	200422e8 	.word	0x200422e8

080114ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80114ac:	b480      	push	{r7}
 80114ae:	b085      	sub	sp, #20
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	3b01      	subs	r3, #1
 80114b8:	607b      	str	r3, [r7, #4]
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2b01      	cmp	r3, #1
 80114be:	d825      	bhi.n	801150c <dec_lock+0x60>
		n = Files[i].ctr;
 80114c0:	4a17      	ldr	r2, [pc, #92]	; (8011520 <dec_lock+0x74>)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	011b      	lsls	r3, r3, #4
 80114c6:	4413      	add	r3, r2
 80114c8:	330c      	adds	r3, #12
 80114ca:	881b      	ldrh	r3, [r3, #0]
 80114cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80114ce:	89fb      	ldrh	r3, [r7, #14]
 80114d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80114d4:	d101      	bne.n	80114da <dec_lock+0x2e>
 80114d6:	2300      	movs	r3, #0
 80114d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80114da:	89fb      	ldrh	r3, [r7, #14]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d002      	beq.n	80114e6 <dec_lock+0x3a>
 80114e0:	89fb      	ldrh	r3, [r7, #14]
 80114e2:	3b01      	subs	r3, #1
 80114e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80114e6:	4a0e      	ldr	r2, [pc, #56]	; (8011520 <dec_lock+0x74>)
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	011b      	lsls	r3, r3, #4
 80114ec:	4413      	add	r3, r2
 80114ee:	330c      	adds	r3, #12
 80114f0:	89fa      	ldrh	r2, [r7, #14]
 80114f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80114f4:	89fb      	ldrh	r3, [r7, #14]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d105      	bne.n	8011506 <dec_lock+0x5a>
 80114fa:	4a09      	ldr	r2, [pc, #36]	; (8011520 <dec_lock+0x74>)
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	011b      	lsls	r3, r3, #4
 8011500:	4413      	add	r3, r2
 8011502:	2200      	movs	r2, #0
 8011504:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011506:	2300      	movs	r3, #0
 8011508:	737b      	strb	r3, [r7, #13]
 801150a:	e001      	b.n	8011510 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801150c:	2302      	movs	r3, #2
 801150e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011510:	7b7b      	ldrb	r3, [r7, #13]
}
 8011512:	4618      	mov	r0, r3
 8011514:	3714      	adds	r7, #20
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr
 801151e:	bf00      	nop
 8011520:	200422e8 	.word	0x200422e8

08011524 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011524:	b480      	push	{r7}
 8011526:	b085      	sub	sp, #20
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801152c:	2300      	movs	r3, #0
 801152e:	60fb      	str	r3, [r7, #12]
 8011530:	e010      	b.n	8011554 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011532:	4a0d      	ldr	r2, [pc, #52]	; (8011568 <clear_lock+0x44>)
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	011b      	lsls	r3, r3, #4
 8011538:	4413      	add	r3, r2
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	687a      	ldr	r2, [r7, #4]
 801153e:	429a      	cmp	r2, r3
 8011540:	d105      	bne.n	801154e <clear_lock+0x2a>
 8011542:	4a09      	ldr	r2, [pc, #36]	; (8011568 <clear_lock+0x44>)
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	011b      	lsls	r3, r3, #4
 8011548:	4413      	add	r3, r2
 801154a:	2200      	movs	r2, #0
 801154c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	3301      	adds	r3, #1
 8011552:	60fb      	str	r3, [r7, #12]
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	2b01      	cmp	r3, #1
 8011558:	d9eb      	bls.n	8011532 <clear_lock+0xe>
	}
}
 801155a:	bf00      	nop
 801155c:	3714      	adds	r7, #20
 801155e:	46bd      	mov	sp, r7
 8011560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011564:	4770      	bx	lr
 8011566:	bf00      	nop
 8011568:	200422e8 	.word	0x200422e8

0801156c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b086      	sub	sp, #24
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011574:	2300      	movs	r3, #0
 8011576:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	78db      	ldrb	r3, [r3, #3]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d034      	beq.n	80115ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011584:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	7858      	ldrb	r0, [r3, #1]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011590:	2301      	movs	r3, #1
 8011592:	697a      	ldr	r2, [r7, #20]
 8011594:	f7ff fd40 	bl	8011018 <disk_write>
 8011598:	4603      	mov	r3, r0
 801159a:	2b00      	cmp	r3, #0
 801159c:	d002      	beq.n	80115a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 801159e:	2301      	movs	r3, #1
 80115a0:	73fb      	strb	r3, [r7, #15]
 80115a2:	e022      	b.n	80115ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2200      	movs	r2, #0
 80115a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115ae:	697a      	ldr	r2, [r7, #20]
 80115b0:	1ad2      	subs	r2, r2, r3
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	6a1b      	ldr	r3, [r3, #32]
 80115b6:	429a      	cmp	r2, r3
 80115b8:	d217      	bcs.n	80115ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	789b      	ldrb	r3, [r3, #2]
 80115be:	613b      	str	r3, [r7, #16]
 80115c0:	e010      	b.n	80115e4 <sync_window+0x78>
					wsect += fs->fsize;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6a1b      	ldr	r3, [r3, #32]
 80115c6:	697a      	ldr	r2, [r7, #20]
 80115c8:	4413      	add	r3, r2
 80115ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	7858      	ldrb	r0, [r3, #1]
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80115d6:	2301      	movs	r3, #1
 80115d8:	697a      	ldr	r2, [r7, #20]
 80115da:	f7ff fd1d 	bl	8011018 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80115de:	693b      	ldr	r3, [r7, #16]
 80115e0:	3b01      	subs	r3, #1
 80115e2:	613b      	str	r3, [r7, #16]
 80115e4:	693b      	ldr	r3, [r7, #16]
 80115e6:	2b01      	cmp	r3, #1
 80115e8:	d8eb      	bhi.n	80115c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80115ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	3718      	adds	r7, #24
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}

080115f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b084      	sub	sp, #16
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80115fe:	2300      	movs	r3, #0
 8011600:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011606:	683a      	ldr	r2, [r7, #0]
 8011608:	429a      	cmp	r2, r3
 801160a:	d01b      	beq.n	8011644 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801160c:	6878      	ldr	r0, [r7, #4]
 801160e:	f7ff ffad 	bl	801156c <sync_window>
 8011612:	4603      	mov	r3, r0
 8011614:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011616:	7bfb      	ldrb	r3, [r7, #15]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d113      	bne.n	8011644 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	7858      	ldrb	r0, [r3, #1]
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011626:	2301      	movs	r3, #1
 8011628:	683a      	ldr	r2, [r7, #0]
 801162a:	f7ff fcd5 	bl	8010fd8 <disk_read>
 801162e:	4603      	mov	r3, r0
 8011630:	2b00      	cmp	r3, #0
 8011632:	d004      	beq.n	801163e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011634:	f04f 33ff 	mov.w	r3, #4294967295
 8011638:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801163a:	2301      	movs	r3, #1
 801163c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	683a      	ldr	r2, [r7, #0]
 8011642:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011644:	7bfb      	ldrb	r3, [r7, #15]
}
 8011646:	4618      	mov	r0, r3
 8011648:	3710      	adds	r7, #16
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
	...

08011650 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b084      	sub	sp, #16
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011658:	6878      	ldr	r0, [r7, #4]
 801165a:	f7ff ff87 	bl	801156c <sync_window>
 801165e:	4603      	mov	r3, r0
 8011660:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011662:	7bfb      	ldrb	r3, [r7, #15]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d159      	bne.n	801171c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	781b      	ldrb	r3, [r3, #0]
 801166c:	2b03      	cmp	r3, #3
 801166e:	d149      	bne.n	8011704 <sync_fs+0xb4>
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	791b      	ldrb	r3, [r3, #4]
 8011674:	2b01      	cmp	r3, #1
 8011676:	d145      	bne.n	8011704 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	899b      	ldrh	r3, [r3, #12]
 8011682:	461a      	mov	r2, r3
 8011684:	2100      	movs	r1, #0
 8011686:	f7ff fda8 	bl	80111da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	3338      	adds	r3, #56	; 0x38
 801168e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011692:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011696:	4618      	mov	r0, r3
 8011698:	f7ff fd37 	bl	801110a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	3338      	adds	r3, #56	; 0x38
 80116a0:	4921      	ldr	r1, [pc, #132]	; (8011728 <sync_fs+0xd8>)
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7ff fd4c 	bl	8011140 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	3338      	adds	r3, #56	; 0x38
 80116ac:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80116b0:	491e      	ldr	r1, [pc, #120]	; (801172c <sync_fs+0xdc>)
 80116b2:	4618      	mov	r0, r3
 80116b4:	f7ff fd44 	bl	8011140 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	3338      	adds	r3, #56	; 0x38
 80116bc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	695b      	ldr	r3, [r3, #20]
 80116c4:	4619      	mov	r1, r3
 80116c6:	4610      	mov	r0, r2
 80116c8:	f7ff fd3a 	bl	8011140 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	3338      	adds	r3, #56	; 0x38
 80116d0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	691b      	ldr	r3, [r3, #16]
 80116d8:	4619      	mov	r1, r3
 80116da:	4610      	mov	r0, r2
 80116dc:	f7ff fd30 	bl	8011140 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116e4:	1c5a      	adds	r2, r3, #1
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	7858      	ldrb	r0, [r3, #1]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80116f8:	2301      	movs	r3, #1
 80116fa:	f7ff fc8d 	bl	8011018 <disk_write>
			fs->fsi_flag = 0;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2200      	movs	r2, #0
 8011702:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	785b      	ldrb	r3, [r3, #1]
 8011708:	2200      	movs	r2, #0
 801170a:	2100      	movs	r1, #0
 801170c:	4618      	mov	r0, r3
 801170e:	f7ff fca3 	bl	8011058 <disk_ioctl>
 8011712:	4603      	mov	r3, r0
 8011714:	2b00      	cmp	r3, #0
 8011716:	d001      	beq.n	801171c <sync_fs+0xcc>
 8011718:	2301      	movs	r3, #1
 801171a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801171c:	7bfb      	ldrb	r3, [r7, #15]
}
 801171e:	4618      	mov	r0, r3
 8011720:	3710      	adds	r7, #16
 8011722:	46bd      	mov	sp, r7
 8011724:	bd80      	pop	{r7, pc}
 8011726:	bf00      	nop
 8011728:	41615252 	.word	0x41615252
 801172c:	61417272 	.word	0x61417272

08011730 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011730:	b480      	push	{r7}
 8011732:	b083      	sub	sp, #12
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
 8011738:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	3b02      	subs	r3, #2
 801173e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	69db      	ldr	r3, [r3, #28]
 8011744:	3b02      	subs	r3, #2
 8011746:	683a      	ldr	r2, [r7, #0]
 8011748:	429a      	cmp	r2, r3
 801174a:	d301      	bcc.n	8011750 <clust2sect+0x20>
 801174c:	2300      	movs	r3, #0
 801174e:	e008      	b.n	8011762 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	895b      	ldrh	r3, [r3, #10]
 8011754:	461a      	mov	r2, r3
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	fb03 f202 	mul.w	r2, r3, r2
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011760:	4413      	add	r3, r2
}
 8011762:	4618      	mov	r0, r3
 8011764:	370c      	adds	r7, #12
 8011766:	46bd      	mov	sp, r7
 8011768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176c:	4770      	bx	lr

0801176e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801176e:	b580      	push	{r7, lr}
 8011770:	b086      	sub	sp, #24
 8011772:	af00      	add	r7, sp, #0
 8011774:	6078      	str	r0, [r7, #4]
 8011776:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	2b01      	cmp	r3, #1
 8011782:	d904      	bls.n	801178e <get_fat+0x20>
 8011784:	693b      	ldr	r3, [r7, #16]
 8011786:	69db      	ldr	r3, [r3, #28]
 8011788:	683a      	ldr	r2, [r7, #0]
 801178a:	429a      	cmp	r2, r3
 801178c:	d302      	bcc.n	8011794 <get_fat+0x26>
		val = 1;	/* Internal error */
 801178e:	2301      	movs	r3, #1
 8011790:	617b      	str	r3, [r7, #20]
 8011792:	e0b7      	b.n	8011904 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011794:	f04f 33ff 	mov.w	r3, #4294967295
 8011798:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	781b      	ldrb	r3, [r3, #0]
 801179e:	2b02      	cmp	r3, #2
 80117a0:	d05a      	beq.n	8011858 <get_fat+0xea>
 80117a2:	2b03      	cmp	r3, #3
 80117a4:	d07d      	beq.n	80118a2 <get_fat+0x134>
 80117a6:	2b01      	cmp	r3, #1
 80117a8:	f040 80a2 	bne.w	80118f0 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	60fb      	str	r3, [r7, #12]
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	085b      	lsrs	r3, r3, #1
 80117b4:	68fa      	ldr	r2, [r7, #12]
 80117b6:	4413      	add	r3, r2
 80117b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80117be:	693b      	ldr	r3, [r7, #16]
 80117c0:	899b      	ldrh	r3, [r3, #12]
 80117c2:	4619      	mov	r1, r3
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80117ca:	4413      	add	r3, r2
 80117cc:	4619      	mov	r1, r3
 80117ce:	6938      	ldr	r0, [r7, #16]
 80117d0:	f7ff ff10 	bl	80115f4 <move_window>
 80117d4:	4603      	mov	r3, r0
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	f040 808d 	bne.w	80118f6 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	1c5a      	adds	r2, r3, #1
 80117e0:	60fa      	str	r2, [r7, #12]
 80117e2:	693a      	ldr	r2, [r7, #16]
 80117e4:	8992      	ldrh	r2, [r2, #12]
 80117e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80117ea:	fb02 f201 	mul.w	r2, r2, r1
 80117ee:	1a9b      	subs	r3, r3, r2
 80117f0:	693a      	ldr	r2, [r7, #16]
 80117f2:	4413      	add	r3, r2
 80117f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80117f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80117fa:	693b      	ldr	r3, [r7, #16]
 80117fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80117fe:	693b      	ldr	r3, [r7, #16]
 8011800:	899b      	ldrh	r3, [r3, #12]
 8011802:	4619      	mov	r1, r3
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	fbb3 f3f1 	udiv	r3, r3, r1
 801180a:	4413      	add	r3, r2
 801180c:	4619      	mov	r1, r3
 801180e:	6938      	ldr	r0, [r7, #16]
 8011810:	f7ff fef0 	bl	80115f4 <move_window>
 8011814:	4603      	mov	r3, r0
 8011816:	2b00      	cmp	r3, #0
 8011818:	d16f      	bne.n	80118fa <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801181a:	693b      	ldr	r3, [r7, #16]
 801181c:	899b      	ldrh	r3, [r3, #12]
 801181e:	461a      	mov	r2, r3
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	fbb3 f1f2 	udiv	r1, r3, r2
 8011826:	fb02 f201 	mul.w	r2, r2, r1
 801182a:	1a9b      	subs	r3, r3, r2
 801182c:	693a      	ldr	r2, [r7, #16]
 801182e:	4413      	add	r3, r2
 8011830:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011834:	021b      	lsls	r3, r3, #8
 8011836:	461a      	mov	r2, r3
 8011838:	68bb      	ldr	r3, [r7, #8]
 801183a:	4313      	orrs	r3, r2
 801183c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	f003 0301 	and.w	r3, r3, #1
 8011844:	2b00      	cmp	r3, #0
 8011846:	d002      	beq.n	801184e <get_fat+0xe0>
 8011848:	68bb      	ldr	r3, [r7, #8]
 801184a:	091b      	lsrs	r3, r3, #4
 801184c:	e002      	b.n	8011854 <get_fat+0xe6>
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011854:	617b      	str	r3, [r7, #20]
			break;
 8011856:	e055      	b.n	8011904 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011858:	693b      	ldr	r3, [r7, #16]
 801185a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	899b      	ldrh	r3, [r3, #12]
 8011860:	085b      	lsrs	r3, r3, #1
 8011862:	b29b      	uxth	r3, r3
 8011864:	4619      	mov	r1, r3
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	fbb3 f3f1 	udiv	r3, r3, r1
 801186c:	4413      	add	r3, r2
 801186e:	4619      	mov	r1, r3
 8011870:	6938      	ldr	r0, [r7, #16]
 8011872:	f7ff febf 	bl	80115f4 <move_window>
 8011876:	4603      	mov	r3, r0
 8011878:	2b00      	cmp	r3, #0
 801187a:	d140      	bne.n	80118fe <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801187c:	693b      	ldr	r3, [r7, #16]
 801187e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	005b      	lsls	r3, r3, #1
 8011886:	693a      	ldr	r2, [r7, #16]
 8011888:	8992      	ldrh	r2, [r2, #12]
 801188a:	fbb3 f0f2 	udiv	r0, r3, r2
 801188e:	fb02 f200 	mul.w	r2, r2, r0
 8011892:	1a9b      	subs	r3, r3, r2
 8011894:	440b      	add	r3, r1
 8011896:	4618      	mov	r0, r3
 8011898:	f7ff fbfc 	bl	8011094 <ld_word>
 801189c:	4603      	mov	r3, r0
 801189e:	617b      	str	r3, [r7, #20]
			break;
 80118a0:	e030      	b.n	8011904 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80118a2:	693b      	ldr	r3, [r7, #16]
 80118a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80118a6:	693b      	ldr	r3, [r7, #16]
 80118a8:	899b      	ldrh	r3, [r3, #12]
 80118aa:	089b      	lsrs	r3, r3, #2
 80118ac:	b29b      	uxth	r3, r3
 80118ae:	4619      	mov	r1, r3
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80118b6:	4413      	add	r3, r2
 80118b8:	4619      	mov	r1, r3
 80118ba:	6938      	ldr	r0, [r7, #16]
 80118bc:	f7ff fe9a 	bl	80115f4 <move_window>
 80118c0:	4603      	mov	r3, r0
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d11d      	bne.n	8011902 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80118c6:	693b      	ldr	r3, [r7, #16]
 80118c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	009b      	lsls	r3, r3, #2
 80118d0:	693a      	ldr	r2, [r7, #16]
 80118d2:	8992      	ldrh	r2, [r2, #12]
 80118d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80118d8:	fb02 f200 	mul.w	r2, r2, r0
 80118dc:	1a9b      	subs	r3, r3, r2
 80118de:	440b      	add	r3, r1
 80118e0:	4618      	mov	r0, r3
 80118e2:	f7ff fbef 	bl	80110c4 <ld_dword>
 80118e6:	4603      	mov	r3, r0
 80118e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80118ec:	617b      	str	r3, [r7, #20]
			break;
 80118ee:	e009      	b.n	8011904 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80118f0:	2301      	movs	r3, #1
 80118f2:	617b      	str	r3, [r7, #20]
 80118f4:	e006      	b.n	8011904 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80118f6:	bf00      	nop
 80118f8:	e004      	b.n	8011904 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80118fa:	bf00      	nop
 80118fc:	e002      	b.n	8011904 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80118fe:	bf00      	nop
 8011900:	e000      	b.n	8011904 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011902:	bf00      	nop
		}
	}

	return val;
 8011904:	697b      	ldr	r3, [r7, #20]
}
 8011906:	4618      	mov	r0, r3
 8011908:	3718      	adds	r7, #24
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}

0801190e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801190e:	b590      	push	{r4, r7, lr}
 8011910:	b089      	sub	sp, #36	; 0x24
 8011912:	af00      	add	r7, sp, #0
 8011914:	60f8      	str	r0, [r7, #12]
 8011916:	60b9      	str	r1, [r7, #8]
 8011918:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801191a:	2302      	movs	r3, #2
 801191c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	2b01      	cmp	r3, #1
 8011922:	f240 8106 	bls.w	8011b32 <put_fat+0x224>
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	69db      	ldr	r3, [r3, #28]
 801192a:	68ba      	ldr	r2, [r7, #8]
 801192c:	429a      	cmp	r2, r3
 801192e:	f080 8100 	bcs.w	8011b32 <put_fat+0x224>
		switch (fs->fs_type) {
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	781b      	ldrb	r3, [r3, #0]
 8011936:	2b02      	cmp	r3, #2
 8011938:	f000 8088 	beq.w	8011a4c <put_fat+0x13e>
 801193c:	2b03      	cmp	r3, #3
 801193e:	f000 80b0 	beq.w	8011aa2 <put_fat+0x194>
 8011942:	2b01      	cmp	r3, #1
 8011944:	f040 80f5 	bne.w	8011b32 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	61bb      	str	r3, [r7, #24]
 801194c:	69bb      	ldr	r3, [r7, #24]
 801194e:	085b      	lsrs	r3, r3, #1
 8011950:	69ba      	ldr	r2, [r7, #24]
 8011952:	4413      	add	r3, r2
 8011954:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	899b      	ldrh	r3, [r3, #12]
 801195e:	4619      	mov	r1, r3
 8011960:	69bb      	ldr	r3, [r7, #24]
 8011962:	fbb3 f3f1 	udiv	r3, r3, r1
 8011966:	4413      	add	r3, r2
 8011968:	4619      	mov	r1, r3
 801196a:	68f8      	ldr	r0, [r7, #12]
 801196c:	f7ff fe42 	bl	80115f4 <move_window>
 8011970:	4603      	mov	r3, r0
 8011972:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011974:	7ffb      	ldrb	r3, [r7, #31]
 8011976:	2b00      	cmp	r3, #0
 8011978:	f040 80d4 	bne.w	8011b24 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011982:	69bb      	ldr	r3, [r7, #24]
 8011984:	1c5a      	adds	r2, r3, #1
 8011986:	61ba      	str	r2, [r7, #24]
 8011988:	68fa      	ldr	r2, [r7, #12]
 801198a:	8992      	ldrh	r2, [r2, #12]
 801198c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011990:	fb02 f200 	mul.w	r2, r2, r0
 8011994:	1a9b      	subs	r3, r3, r2
 8011996:	440b      	add	r3, r1
 8011998:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801199a:	68bb      	ldr	r3, [r7, #8]
 801199c:	f003 0301 	and.w	r3, r3, #1
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d00d      	beq.n	80119c0 <put_fat+0xb2>
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	781b      	ldrb	r3, [r3, #0]
 80119a8:	b25b      	sxtb	r3, r3
 80119aa:	f003 030f 	and.w	r3, r3, #15
 80119ae:	b25a      	sxtb	r2, r3
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	b2db      	uxtb	r3, r3
 80119b4:	011b      	lsls	r3, r3, #4
 80119b6:	b25b      	sxtb	r3, r3
 80119b8:	4313      	orrs	r3, r2
 80119ba:	b25b      	sxtb	r3, r3
 80119bc:	b2db      	uxtb	r3, r3
 80119be:	e001      	b.n	80119c4 <put_fat+0xb6>
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	b2db      	uxtb	r3, r3
 80119c4:	697a      	ldr	r2, [r7, #20]
 80119c6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	2201      	movs	r2, #1
 80119cc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	899b      	ldrh	r3, [r3, #12]
 80119d6:	4619      	mov	r1, r3
 80119d8:	69bb      	ldr	r3, [r7, #24]
 80119da:	fbb3 f3f1 	udiv	r3, r3, r1
 80119de:	4413      	add	r3, r2
 80119e0:	4619      	mov	r1, r3
 80119e2:	68f8      	ldr	r0, [r7, #12]
 80119e4:	f7ff fe06 	bl	80115f4 <move_window>
 80119e8:	4603      	mov	r3, r0
 80119ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80119ec:	7ffb      	ldrb	r3, [r7, #31]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	f040 809a 	bne.w	8011b28 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	899b      	ldrh	r3, [r3, #12]
 80119fe:	461a      	mov	r2, r3
 8011a00:	69bb      	ldr	r3, [r7, #24]
 8011a02:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a06:	fb02 f200 	mul.w	r2, r2, r0
 8011a0a:	1a9b      	subs	r3, r3, r2
 8011a0c:	440b      	add	r3, r1
 8011a0e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	f003 0301 	and.w	r3, r3, #1
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d003      	beq.n	8011a22 <put_fat+0x114>
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	091b      	lsrs	r3, r3, #4
 8011a1e:	b2db      	uxtb	r3, r3
 8011a20:	e00e      	b.n	8011a40 <put_fat+0x132>
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	781b      	ldrb	r3, [r3, #0]
 8011a26:	b25b      	sxtb	r3, r3
 8011a28:	f023 030f 	bic.w	r3, r3, #15
 8011a2c:	b25a      	sxtb	r2, r3
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	0a1b      	lsrs	r3, r3, #8
 8011a32:	b25b      	sxtb	r3, r3
 8011a34:	f003 030f 	and.w	r3, r3, #15
 8011a38:	b25b      	sxtb	r3, r3
 8011a3a:	4313      	orrs	r3, r2
 8011a3c:	b25b      	sxtb	r3, r3
 8011a3e:	b2db      	uxtb	r3, r3
 8011a40:	697a      	ldr	r2, [r7, #20]
 8011a42:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	2201      	movs	r2, #1
 8011a48:	70da      	strb	r2, [r3, #3]
			break;
 8011a4a:	e072      	b.n	8011b32 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	899b      	ldrh	r3, [r3, #12]
 8011a54:	085b      	lsrs	r3, r3, #1
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	4619      	mov	r1, r3
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011a60:	4413      	add	r3, r2
 8011a62:	4619      	mov	r1, r3
 8011a64:	68f8      	ldr	r0, [r7, #12]
 8011a66:	f7ff fdc5 	bl	80115f4 <move_window>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011a6e:	7ffb      	ldrb	r3, [r7, #31]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d15b      	bne.n	8011b2c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	005b      	lsls	r3, r3, #1
 8011a7e:	68fa      	ldr	r2, [r7, #12]
 8011a80:	8992      	ldrh	r2, [r2, #12]
 8011a82:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a86:	fb02 f200 	mul.w	r2, r2, r0
 8011a8a:	1a9b      	subs	r3, r3, r2
 8011a8c:	440b      	add	r3, r1
 8011a8e:	687a      	ldr	r2, [r7, #4]
 8011a90:	b292      	uxth	r2, r2
 8011a92:	4611      	mov	r1, r2
 8011a94:	4618      	mov	r0, r3
 8011a96:	f7ff fb38 	bl	801110a <st_word>
			fs->wflag = 1;
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	2201      	movs	r2, #1
 8011a9e:	70da      	strb	r2, [r3, #3]
			break;
 8011aa0:	e047      	b.n	8011b32 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	899b      	ldrh	r3, [r3, #12]
 8011aaa:	089b      	lsrs	r3, r3, #2
 8011aac:	b29b      	uxth	r3, r3
 8011aae:	4619      	mov	r1, r3
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ab6:	4413      	add	r3, r2
 8011ab8:	4619      	mov	r1, r3
 8011aba:	68f8      	ldr	r0, [r7, #12]
 8011abc:	f7ff fd9a 	bl	80115f4 <move_window>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ac4:	7ffb      	ldrb	r3, [r7, #31]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d132      	bne.n	8011b30 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	009b      	lsls	r3, r3, #2
 8011ada:	68fa      	ldr	r2, [r7, #12]
 8011adc:	8992      	ldrh	r2, [r2, #12]
 8011ade:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ae2:	fb02 f200 	mul.w	r2, r2, r0
 8011ae6:	1a9b      	subs	r3, r3, r2
 8011ae8:	440b      	add	r3, r1
 8011aea:	4618      	mov	r0, r3
 8011aec:	f7ff faea 	bl	80110c4 <ld_dword>
 8011af0:	4603      	mov	r3, r0
 8011af2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011af6:	4323      	orrs	r3, r4
 8011af8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	009b      	lsls	r3, r3, #2
 8011b04:	68fa      	ldr	r2, [r7, #12]
 8011b06:	8992      	ldrh	r2, [r2, #12]
 8011b08:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b0c:	fb02 f200 	mul.w	r2, r2, r0
 8011b10:	1a9b      	subs	r3, r3, r2
 8011b12:	440b      	add	r3, r1
 8011b14:	6879      	ldr	r1, [r7, #4]
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7ff fb12 	bl	8011140 <st_dword>
			fs->wflag = 1;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	2201      	movs	r2, #1
 8011b20:	70da      	strb	r2, [r3, #3]
			break;
 8011b22:	e006      	b.n	8011b32 <put_fat+0x224>
			if (res != FR_OK) break;
 8011b24:	bf00      	nop
 8011b26:	e004      	b.n	8011b32 <put_fat+0x224>
			if (res != FR_OK) break;
 8011b28:	bf00      	nop
 8011b2a:	e002      	b.n	8011b32 <put_fat+0x224>
			if (res != FR_OK) break;
 8011b2c:	bf00      	nop
 8011b2e:	e000      	b.n	8011b32 <put_fat+0x224>
			if (res != FR_OK) break;
 8011b30:	bf00      	nop
		}
	}
	return res;
 8011b32:	7ffb      	ldrb	r3, [r7, #31]
}
 8011b34:	4618      	mov	r0, r3
 8011b36:	3724      	adds	r7, #36	; 0x24
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd90      	pop	{r4, r7, pc}

08011b3c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b088      	sub	sp, #32
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	60f8      	str	r0, [r7, #12]
 8011b44:	60b9      	str	r1, [r7, #8]
 8011b46:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	2b01      	cmp	r3, #1
 8011b56:	d904      	bls.n	8011b62 <remove_chain+0x26>
 8011b58:	69bb      	ldr	r3, [r7, #24]
 8011b5a:	69db      	ldr	r3, [r3, #28]
 8011b5c:	68ba      	ldr	r2, [r7, #8]
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d301      	bcc.n	8011b66 <remove_chain+0x2a>
 8011b62:	2302      	movs	r3, #2
 8011b64:	e04b      	b.n	8011bfe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d00c      	beq.n	8011b86 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8011b70:	6879      	ldr	r1, [r7, #4]
 8011b72:	69b8      	ldr	r0, [r7, #24]
 8011b74:	f7ff fecb 	bl	801190e <put_fat>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011b7c:	7ffb      	ldrb	r3, [r7, #31]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d001      	beq.n	8011b86 <remove_chain+0x4a>
 8011b82:	7ffb      	ldrb	r3, [r7, #31]
 8011b84:	e03b      	b.n	8011bfe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011b86:	68b9      	ldr	r1, [r7, #8]
 8011b88:	68f8      	ldr	r0, [r7, #12]
 8011b8a:	f7ff fdf0 	bl	801176e <get_fat>
 8011b8e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d031      	beq.n	8011bfa <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	2b01      	cmp	r3, #1
 8011b9a:	d101      	bne.n	8011ba0 <remove_chain+0x64>
 8011b9c:	2302      	movs	r3, #2
 8011b9e:	e02e      	b.n	8011bfe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ba6:	d101      	bne.n	8011bac <remove_chain+0x70>
 8011ba8:	2301      	movs	r3, #1
 8011baa:	e028      	b.n	8011bfe <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011bac:	2200      	movs	r2, #0
 8011bae:	68b9      	ldr	r1, [r7, #8]
 8011bb0:	69b8      	ldr	r0, [r7, #24]
 8011bb2:	f7ff feac 	bl	801190e <put_fat>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011bba:	7ffb      	ldrb	r3, [r7, #31]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d001      	beq.n	8011bc4 <remove_chain+0x88>
 8011bc0:	7ffb      	ldrb	r3, [r7, #31]
 8011bc2:	e01c      	b.n	8011bfe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011bc4:	69bb      	ldr	r3, [r7, #24]
 8011bc6:	695a      	ldr	r2, [r3, #20]
 8011bc8:	69bb      	ldr	r3, [r7, #24]
 8011bca:	69db      	ldr	r3, [r3, #28]
 8011bcc:	3b02      	subs	r3, #2
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	d20b      	bcs.n	8011bea <remove_chain+0xae>
			fs->free_clst++;
 8011bd2:	69bb      	ldr	r3, [r7, #24]
 8011bd4:	695b      	ldr	r3, [r3, #20]
 8011bd6:	1c5a      	adds	r2, r3, #1
 8011bd8:	69bb      	ldr	r3, [r7, #24]
 8011bda:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011bdc:	69bb      	ldr	r3, [r7, #24]
 8011bde:	791b      	ldrb	r3, [r3, #4]
 8011be0:	f043 0301 	orr.w	r3, r3, #1
 8011be4:	b2da      	uxtb	r2, r3
 8011be6:	69bb      	ldr	r3, [r7, #24]
 8011be8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011bea:	697b      	ldr	r3, [r7, #20]
 8011bec:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011bee:	69bb      	ldr	r3, [r7, #24]
 8011bf0:	69db      	ldr	r3, [r3, #28]
 8011bf2:	68ba      	ldr	r2, [r7, #8]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d3c6      	bcc.n	8011b86 <remove_chain+0x4a>
 8011bf8:	e000      	b.n	8011bfc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011bfa:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011bfc:	2300      	movs	r3, #0
}
 8011bfe:	4618      	mov	r0, r3
 8011c00:	3720      	adds	r7, #32
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}

08011c06 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011c06:	b580      	push	{r7, lr}
 8011c08:	b088      	sub	sp, #32
 8011c0a:	af00      	add	r7, sp, #0
 8011c0c:	6078      	str	r0, [r7, #4]
 8011c0e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d10d      	bne.n	8011c38 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	691b      	ldr	r3, [r3, #16]
 8011c20:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011c22:	69bb      	ldr	r3, [r7, #24]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d004      	beq.n	8011c32 <create_chain+0x2c>
 8011c28:	693b      	ldr	r3, [r7, #16]
 8011c2a:	69db      	ldr	r3, [r3, #28]
 8011c2c:	69ba      	ldr	r2, [r7, #24]
 8011c2e:	429a      	cmp	r2, r3
 8011c30:	d31b      	bcc.n	8011c6a <create_chain+0x64>
 8011c32:	2301      	movs	r3, #1
 8011c34:	61bb      	str	r3, [r7, #24]
 8011c36:	e018      	b.n	8011c6a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011c38:	6839      	ldr	r1, [r7, #0]
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f7ff fd97 	bl	801176e <get_fat>
 8011c40:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	2b01      	cmp	r3, #1
 8011c46:	d801      	bhi.n	8011c4c <create_chain+0x46>
 8011c48:	2301      	movs	r3, #1
 8011c4a:	e070      	b.n	8011d2e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c52:	d101      	bne.n	8011c58 <create_chain+0x52>
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	e06a      	b.n	8011d2e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011c58:	693b      	ldr	r3, [r7, #16]
 8011c5a:	69db      	ldr	r3, [r3, #28]
 8011c5c:	68fa      	ldr	r2, [r7, #12]
 8011c5e:	429a      	cmp	r2, r3
 8011c60:	d201      	bcs.n	8011c66 <create_chain+0x60>
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	e063      	b.n	8011d2e <create_chain+0x128>
		scl = clst;
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011c6a:	69bb      	ldr	r3, [r7, #24]
 8011c6c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011c6e:	69fb      	ldr	r3, [r7, #28]
 8011c70:	3301      	adds	r3, #1
 8011c72:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011c74:	693b      	ldr	r3, [r7, #16]
 8011c76:	69db      	ldr	r3, [r3, #28]
 8011c78:	69fa      	ldr	r2, [r7, #28]
 8011c7a:	429a      	cmp	r2, r3
 8011c7c:	d307      	bcc.n	8011c8e <create_chain+0x88>
				ncl = 2;
 8011c7e:	2302      	movs	r3, #2
 8011c80:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011c82:	69fa      	ldr	r2, [r7, #28]
 8011c84:	69bb      	ldr	r3, [r7, #24]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d901      	bls.n	8011c8e <create_chain+0x88>
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	e04f      	b.n	8011d2e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011c8e:	69f9      	ldr	r1, [r7, #28]
 8011c90:	6878      	ldr	r0, [r7, #4]
 8011c92:	f7ff fd6c 	bl	801176e <get_fat>
 8011c96:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d00e      	beq.n	8011cbc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	2b01      	cmp	r3, #1
 8011ca2:	d003      	beq.n	8011cac <create_chain+0xa6>
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011caa:	d101      	bne.n	8011cb0 <create_chain+0xaa>
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	e03e      	b.n	8011d2e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011cb0:	69fa      	ldr	r2, [r7, #28]
 8011cb2:	69bb      	ldr	r3, [r7, #24]
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d1da      	bne.n	8011c6e <create_chain+0x68>
 8011cb8:	2300      	movs	r3, #0
 8011cba:	e038      	b.n	8011d2e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011cbc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8011cc2:	69f9      	ldr	r1, [r7, #28]
 8011cc4:	6938      	ldr	r0, [r7, #16]
 8011cc6:	f7ff fe22 	bl	801190e <put_fat>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011cce:	7dfb      	ldrb	r3, [r7, #23]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d109      	bne.n	8011ce8 <create_chain+0xe2>
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d006      	beq.n	8011ce8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011cda:	69fa      	ldr	r2, [r7, #28]
 8011cdc:	6839      	ldr	r1, [r7, #0]
 8011cde:	6938      	ldr	r0, [r7, #16]
 8011ce0:	f7ff fe15 	bl	801190e <put_fat>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011ce8:	7dfb      	ldrb	r3, [r7, #23]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d116      	bne.n	8011d1c <create_chain+0x116>
		fs->last_clst = ncl;
 8011cee:	693b      	ldr	r3, [r7, #16]
 8011cf0:	69fa      	ldr	r2, [r7, #28]
 8011cf2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011cf4:	693b      	ldr	r3, [r7, #16]
 8011cf6:	695a      	ldr	r2, [r3, #20]
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	69db      	ldr	r3, [r3, #28]
 8011cfc:	3b02      	subs	r3, #2
 8011cfe:	429a      	cmp	r2, r3
 8011d00:	d804      	bhi.n	8011d0c <create_chain+0x106>
 8011d02:	693b      	ldr	r3, [r7, #16]
 8011d04:	695b      	ldr	r3, [r3, #20]
 8011d06:	1e5a      	subs	r2, r3, #1
 8011d08:	693b      	ldr	r3, [r7, #16]
 8011d0a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011d0c:	693b      	ldr	r3, [r7, #16]
 8011d0e:	791b      	ldrb	r3, [r3, #4]
 8011d10:	f043 0301 	orr.w	r3, r3, #1
 8011d14:	b2da      	uxtb	r2, r3
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	711a      	strb	r2, [r3, #4]
 8011d1a:	e007      	b.n	8011d2c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011d1c:	7dfb      	ldrb	r3, [r7, #23]
 8011d1e:	2b01      	cmp	r3, #1
 8011d20:	d102      	bne.n	8011d28 <create_chain+0x122>
 8011d22:	f04f 33ff 	mov.w	r3, #4294967295
 8011d26:	e000      	b.n	8011d2a <create_chain+0x124>
 8011d28:	2301      	movs	r3, #1
 8011d2a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011d2c:	69fb      	ldr	r3, [r7, #28]
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3720      	adds	r7, #32
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}

08011d36 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011d36:	b480      	push	{r7}
 8011d38:	b087      	sub	sp, #28
 8011d3a:	af00      	add	r7, sp, #0
 8011d3c:	6078      	str	r0, [r7, #4]
 8011d3e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d4a:	3304      	adds	r3, #4
 8011d4c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	899b      	ldrh	r3, [r3, #12]
 8011d52:	461a      	mov	r2, r3
 8011d54:	683b      	ldr	r3, [r7, #0]
 8011d56:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d5a:	68fa      	ldr	r2, [r7, #12]
 8011d5c:	8952      	ldrh	r2, [r2, #10]
 8011d5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d62:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011d64:	693b      	ldr	r3, [r7, #16]
 8011d66:	1d1a      	adds	r2, r3, #4
 8011d68:	613a      	str	r2, [r7, #16]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d101      	bne.n	8011d78 <clmt_clust+0x42>
 8011d74:	2300      	movs	r3, #0
 8011d76:	e010      	b.n	8011d9a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011d78:	697a      	ldr	r2, [r7, #20]
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d307      	bcc.n	8011d90 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011d80:	697a      	ldr	r2, [r7, #20]
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	1ad3      	subs	r3, r2, r3
 8011d86:	617b      	str	r3, [r7, #20]
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	3304      	adds	r3, #4
 8011d8c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011d8e:	e7e9      	b.n	8011d64 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011d90:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011d92:	693b      	ldr	r3, [r7, #16]
 8011d94:	681a      	ldr	r2, [r3, #0]
 8011d96:	697b      	ldr	r3, [r7, #20]
 8011d98:	4413      	add	r3, r2
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	371c      	adds	r7, #28
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da4:	4770      	bx	lr

08011da6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011da6:	b580      	push	{r7, lr}
 8011da8:	b086      	sub	sp, #24
 8011daa:	af00      	add	r7, sp, #0
 8011dac:	6078      	str	r0, [r7, #4]
 8011dae:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011dbc:	d204      	bcs.n	8011dc8 <dir_sdi+0x22>
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	f003 031f 	and.w	r3, r3, #31
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d001      	beq.n	8011dcc <dir_sdi+0x26>
		return FR_INT_ERR;
 8011dc8:	2302      	movs	r3, #2
 8011dca:	e071      	b.n	8011eb0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	683a      	ldr	r2, [r7, #0]
 8011dd0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	689b      	ldr	r3, [r3, #8]
 8011dd6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d106      	bne.n	8011dec <dir_sdi+0x46>
 8011dde:	693b      	ldr	r3, [r7, #16]
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	2b02      	cmp	r3, #2
 8011de4:	d902      	bls.n	8011dec <dir_sdi+0x46>
		clst = fs->dirbase;
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dea:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011dec:	697b      	ldr	r3, [r7, #20]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d10c      	bne.n	8011e0c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	095b      	lsrs	r3, r3, #5
 8011df6:	693a      	ldr	r2, [r7, #16]
 8011df8:	8912      	ldrh	r2, [r2, #8]
 8011dfa:	4293      	cmp	r3, r2
 8011dfc:	d301      	bcc.n	8011e02 <dir_sdi+0x5c>
 8011dfe:	2302      	movs	r3, #2
 8011e00:	e056      	b.n	8011eb0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011e02:	693b      	ldr	r3, [r7, #16]
 8011e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	61da      	str	r2, [r3, #28]
 8011e0a:	e02d      	b.n	8011e68 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011e0c:	693b      	ldr	r3, [r7, #16]
 8011e0e:	895b      	ldrh	r3, [r3, #10]
 8011e10:	461a      	mov	r2, r3
 8011e12:	693b      	ldr	r3, [r7, #16]
 8011e14:	899b      	ldrh	r3, [r3, #12]
 8011e16:	fb03 f302 	mul.w	r3, r3, r2
 8011e1a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011e1c:	e019      	b.n	8011e52 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	6979      	ldr	r1, [r7, #20]
 8011e22:	4618      	mov	r0, r3
 8011e24:	f7ff fca3 	bl	801176e <get_fat>
 8011e28:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011e2a:	697b      	ldr	r3, [r7, #20]
 8011e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e30:	d101      	bne.n	8011e36 <dir_sdi+0x90>
 8011e32:	2301      	movs	r3, #1
 8011e34:	e03c      	b.n	8011eb0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	2b01      	cmp	r3, #1
 8011e3a:	d904      	bls.n	8011e46 <dir_sdi+0xa0>
 8011e3c:	693b      	ldr	r3, [r7, #16]
 8011e3e:	69db      	ldr	r3, [r3, #28]
 8011e40:	697a      	ldr	r2, [r7, #20]
 8011e42:	429a      	cmp	r2, r3
 8011e44:	d301      	bcc.n	8011e4a <dir_sdi+0xa4>
 8011e46:	2302      	movs	r3, #2
 8011e48:	e032      	b.n	8011eb0 <dir_sdi+0x10a>
			ofs -= csz;
 8011e4a:	683a      	ldr	r2, [r7, #0]
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	1ad3      	subs	r3, r2, r3
 8011e50:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011e52:	683a      	ldr	r2, [r7, #0]
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d2e1      	bcs.n	8011e1e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011e5a:	6979      	ldr	r1, [r7, #20]
 8011e5c:	6938      	ldr	r0, [r7, #16]
 8011e5e:	f7ff fc67 	bl	8011730 <clust2sect>
 8011e62:	4602      	mov	r2, r0
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	697a      	ldr	r2, [r7, #20]
 8011e6c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	69db      	ldr	r3, [r3, #28]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d101      	bne.n	8011e7a <dir_sdi+0xd4>
 8011e76:	2302      	movs	r3, #2
 8011e78:	e01a      	b.n	8011eb0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	69da      	ldr	r2, [r3, #28]
 8011e7e:	693b      	ldr	r3, [r7, #16]
 8011e80:	899b      	ldrh	r3, [r3, #12]
 8011e82:	4619      	mov	r1, r3
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e8a:	441a      	add	r2, r3
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e96:	693b      	ldr	r3, [r7, #16]
 8011e98:	899b      	ldrh	r3, [r3, #12]
 8011e9a:	461a      	mov	r2, r3
 8011e9c:	683b      	ldr	r3, [r7, #0]
 8011e9e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ea2:	fb02 f200 	mul.w	r2, r2, r0
 8011ea6:	1a9b      	subs	r3, r3, r2
 8011ea8:	18ca      	adds	r2, r1, r3
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011eae:	2300      	movs	r3, #0
}
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	3718      	adds	r7, #24
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	bd80      	pop	{r7, pc}

08011eb8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b086      	sub	sp, #24
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
 8011ec0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	695b      	ldr	r3, [r3, #20]
 8011ecc:	3320      	adds	r3, #32
 8011ece:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	69db      	ldr	r3, [r3, #28]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d003      	beq.n	8011ee0 <dir_next+0x28>
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011ede:	d301      	bcc.n	8011ee4 <dir_next+0x2c>
 8011ee0:	2304      	movs	r3, #4
 8011ee2:	e0bb      	b.n	801205c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	899b      	ldrh	r3, [r3, #12]
 8011ee8:	461a      	mov	r2, r3
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ef0:	fb02 f201 	mul.w	r2, r2, r1
 8011ef4:	1a9b      	subs	r3, r3, r2
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	f040 809d 	bne.w	8012036 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	69db      	ldr	r3, [r3, #28]
 8011f00:	1c5a      	adds	r2, r3, #1
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	699b      	ldr	r3, [r3, #24]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d10b      	bne.n	8011f26 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	095b      	lsrs	r3, r3, #5
 8011f12:	68fa      	ldr	r2, [r7, #12]
 8011f14:	8912      	ldrh	r2, [r2, #8]
 8011f16:	4293      	cmp	r3, r2
 8011f18:	f0c0 808d 	bcc.w	8012036 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2200      	movs	r2, #0
 8011f20:	61da      	str	r2, [r3, #28]
 8011f22:	2304      	movs	r3, #4
 8011f24:	e09a      	b.n	801205c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	899b      	ldrh	r3, [r3, #12]
 8011f2a:	461a      	mov	r2, r3
 8011f2c:	68bb      	ldr	r3, [r7, #8]
 8011f2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f32:	68fa      	ldr	r2, [r7, #12]
 8011f34:	8952      	ldrh	r2, [r2, #10]
 8011f36:	3a01      	subs	r2, #1
 8011f38:	4013      	ands	r3, r2
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d17b      	bne.n	8012036 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011f3e:	687a      	ldr	r2, [r7, #4]
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	699b      	ldr	r3, [r3, #24]
 8011f44:	4619      	mov	r1, r3
 8011f46:	4610      	mov	r0, r2
 8011f48:	f7ff fc11 	bl	801176e <get_fat>
 8011f4c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011f4e:	697b      	ldr	r3, [r7, #20]
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	d801      	bhi.n	8011f58 <dir_next+0xa0>
 8011f54:	2302      	movs	r3, #2
 8011f56:	e081      	b.n	801205c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011f58:	697b      	ldr	r3, [r7, #20]
 8011f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f5e:	d101      	bne.n	8011f64 <dir_next+0xac>
 8011f60:	2301      	movs	r3, #1
 8011f62:	e07b      	b.n	801205c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	69db      	ldr	r3, [r3, #28]
 8011f68:	697a      	ldr	r2, [r7, #20]
 8011f6a:	429a      	cmp	r2, r3
 8011f6c:	d359      	bcc.n	8012022 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d104      	bne.n	8011f7e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2200      	movs	r2, #0
 8011f78:	61da      	str	r2, [r3, #28]
 8011f7a:	2304      	movs	r3, #4
 8011f7c:	e06e      	b.n	801205c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011f7e:	687a      	ldr	r2, [r7, #4]
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	699b      	ldr	r3, [r3, #24]
 8011f84:	4619      	mov	r1, r3
 8011f86:	4610      	mov	r0, r2
 8011f88:	f7ff fe3d 	bl	8011c06 <create_chain>
 8011f8c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011f8e:	697b      	ldr	r3, [r7, #20]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d101      	bne.n	8011f98 <dir_next+0xe0>
 8011f94:	2307      	movs	r3, #7
 8011f96:	e061      	b.n	801205c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011f98:	697b      	ldr	r3, [r7, #20]
 8011f9a:	2b01      	cmp	r3, #1
 8011f9c:	d101      	bne.n	8011fa2 <dir_next+0xea>
 8011f9e:	2302      	movs	r3, #2
 8011fa0:	e05c      	b.n	801205c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011fa2:	697b      	ldr	r3, [r7, #20]
 8011fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fa8:	d101      	bne.n	8011fae <dir_next+0xf6>
 8011faa:	2301      	movs	r3, #1
 8011fac:	e056      	b.n	801205c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011fae:	68f8      	ldr	r0, [r7, #12]
 8011fb0:	f7ff fadc 	bl	801156c <sync_window>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d001      	beq.n	8011fbe <dir_next+0x106>
 8011fba:	2301      	movs	r3, #1
 8011fbc:	e04e      	b.n	801205c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	899b      	ldrh	r3, [r3, #12]
 8011fc8:	461a      	mov	r2, r3
 8011fca:	2100      	movs	r1, #0
 8011fcc:	f7ff f905 	bl	80111da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	613b      	str	r3, [r7, #16]
 8011fd4:	6979      	ldr	r1, [r7, #20]
 8011fd6:	68f8      	ldr	r0, [r7, #12]
 8011fd8:	f7ff fbaa 	bl	8011730 <clust2sect>
 8011fdc:	4602      	mov	r2, r0
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	635a      	str	r2, [r3, #52]	; 0x34
 8011fe2:	e012      	b.n	801200a <dir_next+0x152>
						fs->wflag = 1;
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	2201      	movs	r2, #1
 8011fe8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011fea:	68f8      	ldr	r0, [r7, #12]
 8011fec:	f7ff fabe 	bl	801156c <sync_window>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d001      	beq.n	8011ffa <dir_next+0x142>
 8011ff6:	2301      	movs	r3, #1
 8011ff8:	e030      	b.n	801205c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011ffa:	693b      	ldr	r3, [r7, #16]
 8011ffc:	3301      	adds	r3, #1
 8011ffe:	613b      	str	r3, [r7, #16]
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012004:	1c5a      	adds	r2, r3, #1
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	635a      	str	r2, [r3, #52]	; 0x34
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	895b      	ldrh	r3, [r3, #10]
 801200e:	461a      	mov	r2, r3
 8012010:	693b      	ldr	r3, [r7, #16]
 8012012:	4293      	cmp	r3, r2
 8012014:	d3e6      	bcc.n	8011fe4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801201a:	693b      	ldr	r3, [r7, #16]
 801201c:	1ad2      	subs	r2, r2, r3
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	697a      	ldr	r2, [r7, #20]
 8012026:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012028:	6979      	ldr	r1, [r7, #20]
 801202a:	68f8      	ldr	r0, [r7, #12]
 801202c:	f7ff fb80 	bl	8011730 <clust2sect>
 8012030:	4602      	mov	r2, r0
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	68ba      	ldr	r2, [r7, #8]
 801203a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	899b      	ldrh	r3, [r3, #12]
 8012046:	461a      	mov	r2, r3
 8012048:	68bb      	ldr	r3, [r7, #8]
 801204a:	fbb3 f0f2 	udiv	r0, r3, r2
 801204e:	fb02 f200 	mul.w	r2, r2, r0
 8012052:	1a9b      	subs	r3, r3, r2
 8012054:	18ca      	adds	r2, r1, r3
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801205a:	2300      	movs	r3, #0
}
 801205c:	4618      	mov	r0, r3
 801205e:	3718      	adds	r7, #24
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}

08012064 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b086      	sub	sp, #24
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]
 801206c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012074:	2100      	movs	r1, #0
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f7ff fe95 	bl	8011da6 <dir_sdi>
 801207c:	4603      	mov	r3, r0
 801207e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012080:	7dfb      	ldrb	r3, [r7, #23]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d12b      	bne.n	80120de <dir_alloc+0x7a>
		n = 0;
 8012086:	2300      	movs	r3, #0
 8012088:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	69db      	ldr	r3, [r3, #28]
 801208e:	4619      	mov	r1, r3
 8012090:	68f8      	ldr	r0, [r7, #12]
 8012092:	f7ff faaf 	bl	80115f4 <move_window>
 8012096:	4603      	mov	r3, r0
 8012098:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801209a:	7dfb      	ldrb	r3, [r7, #23]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d11d      	bne.n	80120dc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	6a1b      	ldr	r3, [r3, #32]
 80120a4:	781b      	ldrb	r3, [r3, #0]
 80120a6:	2be5      	cmp	r3, #229	; 0xe5
 80120a8:	d004      	beq.n	80120b4 <dir_alloc+0x50>
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6a1b      	ldr	r3, [r3, #32]
 80120ae:	781b      	ldrb	r3, [r3, #0]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d107      	bne.n	80120c4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80120b4:	693b      	ldr	r3, [r7, #16]
 80120b6:	3301      	adds	r3, #1
 80120b8:	613b      	str	r3, [r7, #16]
 80120ba:	693a      	ldr	r2, [r7, #16]
 80120bc:	683b      	ldr	r3, [r7, #0]
 80120be:	429a      	cmp	r2, r3
 80120c0:	d102      	bne.n	80120c8 <dir_alloc+0x64>
 80120c2:	e00c      	b.n	80120de <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80120c4:	2300      	movs	r3, #0
 80120c6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80120c8:	2101      	movs	r1, #1
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f7ff fef4 	bl	8011eb8 <dir_next>
 80120d0:	4603      	mov	r3, r0
 80120d2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80120d4:	7dfb      	ldrb	r3, [r7, #23]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d0d7      	beq.n	801208a <dir_alloc+0x26>
 80120da:	e000      	b.n	80120de <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80120dc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80120de:	7dfb      	ldrb	r3, [r7, #23]
 80120e0:	2b04      	cmp	r3, #4
 80120e2:	d101      	bne.n	80120e8 <dir_alloc+0x84>
 80120e4:	2307      	movs	r3, #7
 80120e6:	75fb      	strb	r3, [r7, #23]
	return res;
 80120e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80120ea:	4618      	mov	r0, r3
 80120ec:	3718      	adds	r7, #24
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}

080120f2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80120f2:	b580      	push	{r7, lr}
 80120f4:	b084      	sub	sp, #16
 80120f6:	af00      	add	r7, sp, #0
 80120f8:	6078      	str	r0, [r7, #4]
 80120fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	331a      	adds	r3, #26
 8012100:	4618      	mov	r0, r3
 8012102:	f7fe ffc7 	bl	8011094 <ld_word>
 8012106:	4603      	mov	r3, r0
 8012108:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	781b      	ldrb	r3, [r3, #0]
 801210e:	2b03      	cmp	r3, #3
 8012110:	d109      	bne.n	8012126 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	3314      	adds	r3, #20
 8012116:	4618      	mov	r0, r3
 8012118:	f7fe ffbc 	bl	8011094 <ld_word>
 801211c:	4603      	mov	r3, r0
 801211e:	041b      	lsls	r3, r3, #16
 8012120:	68fa      	ldr	r2, [r7, #12]
 8012122:	4313      	orrs	r3, r2
 8012124:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012126:	68fb      	ldr	r3, [r7, #12]
}
 8012128:	4618      	mov	r0, r3
 801212a:	3710      	adds	r7, #16
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}

08012130 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b084      	sub	sp, #16
 8012134:	af00      	add	r7, sp, #0
 8012136:	60f8      	str	r0, [r7, #12]
 8012138:	60b9      	str	r1, [r7, #8]
 801213a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	331a      	adds	r3, #26
 8012140:	687a      	ldr	r2, [r7, #4]
 8012142:	b292      	uxth	r2, r2
 8012144:	4611      	mov	r1, r2
 8012146:	4618      	mov	r0, r3
 8012148:	f7fe ffdf 	bl	801110a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	2b03      	cmp	r3, #3
 8012152:	d109      	bne.n	8012168 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	f103 0214 	add.w	r2, r3, #20
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	0c1b      	lsrs	r3, r3, #16
 801215e:	b29b      	uxth	r3, r3
 8012160:	4619      	mov	r1, r3
 8012162:	4610      	mov	r0, r2
 8012164:	f7fe ffd1 	bl	801110a <st_word>
	}
}
 8012168:	bf00      	nop
 801216a:	3710      	adds	r7, #16
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}

08012170 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b086      	sub	sp, #24
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
 8012178:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801217a:	2304      	movs	r3, #4
 801217c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012184:	e03c      	b.n	8012200 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	69db      	ldr	r3, [r3, #28]
 801218a:	4619      	mov	r1, r3
 801218c:	6938      	ldr	r0, [r7, #16]
 801218e:	f7ff fa31 	bl	80115f4 <move_window>
 8012192:	4603      	mov	r3, r0
 8012194:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012196:	7dfb      	ldrb	r3, [r7, #23]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d136      	bne.n	801220a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6a1b      	ldr	r3, [r3, #32]
 80121a0:	781b      	ldrb	r3, [r3, #0]
 80121a2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80121a4:	7bfb      	ldrb	r3, [r7, #15]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d102      	bne.n	80121b0 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80121aa:	2304      	movs	r3, #4
 80121ac:	75fb      	strb	r3, [r7, #23]
 80121ae:	e031      	b.n	8012214 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	6a1b      	ldr	r3, [r3, #32]
 80121b4:	330b      	adds	r3, #11
 80121b6:	781b      	ldrb	r3, [r3, #0]
 80121b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80121bc:	73bb      	strb	r3, [r7, #14]
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	7bba      	ldrb	r2, [r7, #14]
 80121c2:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80121c4:	7bfb      	ldrb	r3, [r7, #15]
 80121c6:	2be5      	cmp	r3, #229	; 0xe5
 80121c8:	d011      	beq.n	80121ee <dir_read+0x7e>
 80121ca:	7bfb      	ldrb	r3, [r7, #15]
 80121cc:	2b2e      	cmp	r3, #46	; 0x2e
 80121ce:	d00e      	beq.n	80121ee <dir_read+0x7e>
 80121d0:	7bbb      	ldrb	r3, [r7, #14]
 80121d2:	2b0f      	cmp	r3, #15
 80121d4:	d00b      	beq.n	80121ee <dir_read+0x7e>
 80121d6:	7bbb      	ldrb	r3, [r7, #14]
 80121d8:	f023 0320 	bic.w	r3, r3, #32
 80121dc:	2b08      	cmp	r3, #8
 80121de:	bf0c      	ite	eq
 80121e0:	2301      	moveq	r3, #1
 80121e2:	2300      	movne	r3, #0
 80121e4:	b2db      	uxtb	r3, r3
 80121e6:	461a      	mov	r2, r3
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	4293      	cmp	r3, r2
 80121ec:	d00f      	beq.n	801220e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80121ee:	2100      	movs	r1, #0
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	f7ff fe61 	bl	8011eb8 <dir_next>
 80121f6:	4603      	mov	r3, r0
 80121f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80121fa:	7dfb      	ldrb	r3, [r7, #23]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d108      	bne.n	8012212 <dir_read+0xa2>
	while (dp->sect) {
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	69db      	ldr	r3, [r3, #28]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d1be      	bne.n	8012186 <dir_read+0x16>
 8012208:	e004      	b.n	8012214 <dir_read+0xa4>
		if (res != FR_OK) break;
 801220a:	bf00      	nop
 801220c:	e002      	b.n	8012214 <dir_read+0xa4>
				break;
 801220e:	bf00      	nop
 8012210:	e000      	b.n	8012214 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012212:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012214:	7dfb      	ldrb	r3, [r7, #23]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d002      	beq.n	8012220 <dir_read+0xb0>
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2200      	movs	r2, #0
 801221e:	61da      	str	r2, [r3, #28]
	return res;
 8012220:	7dfb      	ldrb	r3, [r7, #23]
}
 8012222:	4618      	mov	r0, r3
 8012224:	3718      	adds	r7, #24
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}

0801222a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801222a:	b580      	push	{r7, lr}
 801222c:	b086      	sub	sp, #24
 801222e:	af00      	add	r7, sp, #0
 8012230:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012238:	2100      	movs	r1, #0
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f7ff fdb3 	bl	8011da6 <dir_sdi>
 8012240:	4603      	mov	r3, r0
 8012242:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012244:	7dfb      	ldrb	r3, [r7, #23]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d001      	beq.n	801224e <dir_find+0x24>
 801224a:	7dfb      	ldrb	r3, [r7, #23]
 801224c:	e03e      	b.n	80122cc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	69db      	ldr	r3, [r3, #28]
 8012252:	4619      	mov	r1, r3
 8012254:	6938      	ldr	r0, [r7, #16]
 8012256:	f7ff f9cd 	bl	80115f4 <move_window>
 801225a:	4603      	mov	r3, r0
 801225c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801225e:	7dfb      	ldrb	r3, [r7, #23]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d12f      	bne.n	80122c4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	6a1b      	ldr	r3, [r3, #32]
 8012268:	781b      	ldrb	r3, [r3, #0]
 801226a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801226c:	7bfb      	ldrb	r3, [r7, #15]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d102      	bne.n	8012278 <dir_find+0x4e>
 8012272:	2304      	movs	r3, #4
 8012274:	75fb      	strb	r3, [r7, #23]
 8012276:	e028      	b.n	80122ca <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	6a1b      	ldr	r3, [r3, #32]
 801227c:	330b      	adds	r3, #11
 801227e:	781b      	ldrb	r3, [r3, #0]
 8012280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012284:	b2da      	uxtb	r2, r3
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	6a1b      	ldr	r3, [r3, #32]
 801228e:	330b      	adds	r3, #11
 8012290:	781b      	ldrb	r3, [r3, #0]
 8012292:	f003 0308 	and.w	r3, r3, #8
 8012296:	2b00      	cmp	r3, #0
 8012298:	d10a      	bne.n	80122b0 <dir_find+0x86>
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	6a18      	ldr	r0, [r3, #32]
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	3324      	adds	r3, #36	; 0x24
 80122a2:	220b      	movs	r2, #11
 80122a4:	4619      	mov	r1, r3
 80122a6:	f7fe ffb2 	bl	801120e <mem_cmp>
 80122aa:	4603      	mov	r3, r0
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d00b      	beq.n	80122c8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80122b0:	2100      	movs	r1, #0
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	f7ff fe00 	bl	8011eb8 <dir_next>
 80122b8:	4603      	mov	r3, r0
 80122ba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80122bc:	7dfb      	ldrb	r3, [r7, #23]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d0c5      	beq.n	801224e <dir_find+0x24>
 80122c2:	e002      	b.n	80122ca <dir_find+0xa0>
		if (res != FR_OK) break;
 80122c4:	bf00      	nop
 80122c6:	e000      	b.n	80122ca <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80122c8:	bf00      	nop

	return res;
 80122ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80122cc:	4618      	mov	r0, r3
 80122ce:	3718      	adds	r7, #24
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}

080122d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b084      	sub	sp, #16
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80122e2:	2101      	movs	r1, #1
 80122e4:	6878      	ldr	r0, [r7, #4]
 80122e6:	f7ff febd 	bl	8012064 <dir_alloc>
 80122ea:	4603      	mov	r3, r0
 80122ec:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80122ee:	7bfb      	ldrb	r3, [r7, #15]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d11c      	bne.n	801232e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	69db      	ldr	r3, [r3, #28]
 80122f8:	4619      	mov	r1, r3
 80122fa:	68b8      	ldr	r0, [r7, #8]
 80122fc:	f7ff f97a 	bl	80115f4 <move_window>
 8012300:	4603      	mov	r3, r0
 8012302:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012304:	7bfb      	ldrb	r3, [r7, #15]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d111      	bne.n	801232e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6a1b      	ldr	r3, [r3, #32]
 801230e:	2220      	movs	r2, #32
 8012310:	2100      	movs	r1, #0
 8012312:	4618      	mov	r0, r3
 8012314:	f7fe ff61 	bl	80111da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6a18      	ldr	r0, [r3, #32]
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	3324      	adds	r3, #36	; 0x24
 8012320:	220b      	movs	r2, #11
 8012322:	4619      	mov	r1, r3
 8012324:	f7fe ff38 	bl	8011198 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	2201      	movs	r2, #1
 801232c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801232e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012330:	4618      	mov	r0, r3
 8012332:	3710      	adds	r7, #16
 8012334:	46bd      	mov	sp, r7
 8012336:	bd80      	pop	{r7, pc}

08012338 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012338:	b580      	push	{r7, lr}
 801233a:	b084      	sub	sp, #16
 801233c:	af00      	add	r7, sp, #0
 801233e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	69db      	ldr	r3, [r3, #28]
 801234a:	4619      	mov	r1, r3
 801234c:	68f8      	ldr	r0, [r7, #12]
 801234e:	f7ff f951 	bl	80115f4 <move_window>
 8012352:	4603      	mov	r3, r0
 8012354:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012356:	7afb      	ldrb	r3, [r7, #11]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d106      	bne.n	801236a <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	6a1b      	ldr	r3, [r3, #32]
 8012360:	22e5      	movs	r2, #229	; 0xe5
 8012362:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	2201      	movs	r2, #1
 8012368:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 801236a:	7afb      	ldrb	r3, [r7, #11]
}
 801236c:	4618      	mov	r0, r3
 801236e:	3710      	adds	r7, #16
 8012370:	46bd      	mov	sp, r7
 8012372:	bd80      	pop	{r7, pc}

08012374 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b088      	sub	sp, #32
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
 801237c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	60fb      	str	r3, [r7, #12]
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	3324      	adds	r3, #36	; 0x24
 8012388:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801238a:	220b      	movs	r2, #11
 801238c:	2120      	movs	r1, #32
 801238e:	68b8      	ldr	r0, [r7, #8]
 8012390:	f7fe ff23 	bl	80111da <mem_set>
	si = i = 0; ni = 8;
 8012394:	2300      	movs	r3, #0
 8012396:	613b      	str	r3, [r7, #16]
 8012398:	693b      	ldr	r3, [r7, #16]
 801239a:	617b      	str	r3, [r7, #20]
 801239c:	2308      	movs	r3, #8
 801239e:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80123a0:	68fa      	ldr	r2, [r7, #12]
 80123a2:	697b      	ldr	r3, [r7, #20]
 80123a4:	4413      	add	r3, r2
 80123a6:	781b      	ldrb	r3, [r3, #0]
 80123a8:	2b2e      	cmp	r3, #46	; 0x2e
 80123aa:	d12f      	bne.n	801240c <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	1c5a      	adds	r2, r3, #1
 80123b0:	617a      	str	r2, [r7, #20]
 80123b2:	68fa      	ldr	r2, [r7, #12]
 80123b4:	4413      	add	r3, r2
 80123b6:	781b      	ldrb	r3, [r3, #0]
 80123b8:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 80123ba:	7ffb      	ldrb	r3, [r7, #31]
 80123bc:	2b2e      	cmp	r3, #46	; 0x2e
 80123be:	d10a      	bne.n	80123d6 <create_name+0x62>
 80123c0:	697b      	ldr	r3, [r7, #20]
 80123c2:	2b02      	cmp	r3, #2
 80123c4:	d807      	bhi.n	80123d6 <create_name+0x62>
			sfn[i++] = c;
 80123c6:	693b      	ldr	r3, [r7, #16]
 80123c8:	1c5a      	adds	r2, r3, #1
 80123ca:	613a      	str	r2, [r7, #16]
 80123cc:	68ba      	ldr	r2, [r7, #8]
 80123ce:	4413      	add	r3, r2
 80123d0:	7ffa      	ldrb	r2, [r7, #31]
 80123d2:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80123d4:	e7ea      	b.n	80123ac <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80123d6:	7ffb      	ldrb	r3, [r7, #31]
 80123d8:	2b2f      	cmp	r3, #47	; 0x2f
 80123da:	d007      	beq.n	80123ec <create_name+0x78>
 80123dc:	7ffb      	ldrb	r3, [r7, #31]
 80123de:	2b5c      	cmp	r3, #92	; 0x5c
 80123e0:	d004      	beq.n	80123ec <create_name+0x78>
 80123e2:	7ffb      	ldrb	r3, [r7, #31]
 80123e4:	2b20      	cmp	r3, #32
 80123e6:	d901      	bls.n	80123ec <create_name+0x78>
 80123e8:	2306      	movs	r3, #6
 80123ea:	e084      	b.n	80124f6 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 80123ec:	68fa      	ldr	r2, [r7, #12]
 80123ee:	697b      	ldr	r3, [r7, #20]
 80123f0:	441a      	add	r2, r3
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80123f6:	7ffb      	ldrb	r3, [r7, #31]
 80123f8:	2b20      	cmp	r3, #32
 80123fa:	d801      	bhi.n	8012400 <create_name+0x8c>
 80123fc:	2224      	movs	r2, #36	; 0x24
 80123fe:	e000      	b.n	8012402 <create_name+0x8e>
 8012400:	2220      	movs	r2, #32
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	330b      	adds	r3, #11
 8012406:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012408:	2300      	movs	r3, #0
 801240a:	e074      	b.n	80124f6 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801240c:	697b      	ldr	r3, [r7, #20]
 801240e:	1c5a      	adds	r2, r3, #1
 8012410:	617a      	str	r2, [r7, #20]
 8012412:	68fa      	ldr	r2, [r7, #12]
 8012414:	4413      	add	r3, r2
 8012416:	781b      	ldrb	r3, [r3, #0]
 8012418:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801241a:	7ffb      	ldrb	r3, [r7, #31]
 801241c:	2b20      	cmp	r3, #32
 801241e:	d94e      	bls.n	80124be <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012420:	7ffb      	ldrb	r3, [r7, #31]
 8012422:	2b2f      	cmp	r3, #47	; 0x2f
 8012424:	d006      	beq.n	8012434 <create_name+0xc0>
 8012426:	7ffb      	ldrb	r3, [r7, #31]
 8012428:	2b5c      	cmp	r3, #92	; 0x5c
 801242a:	d110      	bne.n	801244e <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801242c:	e002      	b.n	8012434 <create_name+0xc0>
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	3301      	adds	r3, #1
 8012432:	617b      	str	r3, [r7, #20]
 8012434:	68fa      	ldr	r2, [r7, #12]
 8012436:	697b      	ldr	r3, [r7, #20]
 8012438:	4413      	add	r3, r2
 801243a:	781b      	ldrb	r3, [r3, #0]
 801243c:	2b2f      	cmp	r3, #47	; 0x2f
 801243e:	d0f6      	beq.n	801242e <create_name+0xba>
 8012440:	68fa      	ldr	r2, [r7, #12]
 8012442:	697b      	ldr	r3, [r7, #20]
 8012444:	4413      	add	r3, r2
 8012446:	781b      	ldrb	r3, [r3, #0]
 8012448:	2b5c      	cmp	r3, #92	; 0x5c
 801244a:	d0f0      	beq.n	801242e <create_name+0xba>
			break;
 801244c:	e038      	b.n	80124c0 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801244e:	7ffb      	ldrb	r3, [r7, #31]
 8012450:	2b2e      	cmp	r3, #46	; 0x2e
 8012452:	d003      	beq.n	801245c <create_name+0xe8>
 8012454:	693a      	ldr	r2, [r7, #16]
 8012456:	69bb      	ldr	r3, [r7, #24]
 8012458:	429a      	cmp	r2, r3
 801245a:	d30c      	bcc.n	8012476 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 801245c:	69bb      	ldr	r3, [r7, #24]
 801245e:	2b0b      	cmp	r3, #11
 8012460:	d002      	beq.n	8012468 <create_name+0xf4>
 8012462:	7ffb      	ldrb	r3, [r7, #31]
 8012464:	2b2e      	cmp	r3, #46	; 0x2e
 8012466:	d001      	beq.n	801246c <create_name+0xf8>
 8012468:	2306      	movs	r3, #6
 801246a:	e044      	b.n	80124f6 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 801246c:	2308      	movs	r3, #8
 801246e:	613b      	str	r3, [r7, #16]
 8012470:	230b      	movs	r3, #11
 8012472:	61bb      	str	r3, [r7, #24]
			continue;
 8012474:	e022      	b.n	80124bc <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012476:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801247a:	2b00      	cmp	r3, #0
 801247c:	da04      	bge.n	8012488 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801247e:	7ffb      	ldrb	r3, [r7, #31]
 8012480:	3b80      	subs	r3, #128	; 0x80
 8012482:	4a1f      	ldr	r2, [pc, #124]	; (8012500 <create_name+0x18c>)
 8012484:	5cd3      	ldrb	r3, [r2, r3]
 8012486:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012488:	7ffb      	ldrb	r3, [r7, #31]
 801248a:	4619      	mov	r1, r3
 801248c:	481d      	ldr	r0, [pc, #116]	; (8012504 <create_name+0x190>)
 801248e:	f7fe fee5 	bl	801125c <chk_chr>
 8012492:	4603      	mov	r3, r0
 8012494:	2b00      	cmp	r3, #0
 8012496:	d001      	beq.n	801249c <create_name+0x128>
 8012498:	2306      	movs	r3, #6
 801249a:	e02c      	b.n	80124f6 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801249c:	7ffb      	ldrb	r3, [r7, #31]
 801249e:	2b60      	cmp	r3, #96	; 0x60
 80124a0:	d905      	bls.n	80124ae <create_name+0x13a>
 80124a2:	7ffb      	ldrb	r3, [r7, #31]
 80124a4:	2b7a      	cmp	r3, #122	; 0x7a
 80124a6:	d802      	bhi.n	80124ae <create_name+0x13a>
 80124a8:	7ffb      	ldrb	r3, [r7, #31]
 80124aa:	3b20      	subs	r3, #32
 80124ac:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80124ae:	693b      	ldr	r3, [r7, #16]
 80124b0:	1c5a      	adds	r2, r3, #1
 80124b2:	613a      	str	r2, [r7, #16]
 80124b4:	68ba      	ldr	r2, [r7, #8]
 80124b6:	4413      	add	r3, r2
 80124b8:	7ffa      	ldrb	r2, [r7, #31]
 80124ba:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80124bc:	e7a6      	b.n	801240c <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80124be:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80124c0:	68fa      	ldr	r2, [r7, #12]
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	441a      	add	r2, r3
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80124ca:	693b      	ldr	r3, [r7, #16]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d101      	bne.n	80124d4 <create_name+0x160>
 80124d0:	2306      	movs	r3, #6
 80124d2:	e010      	b.n	80124f6 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80124d4:	68bb      	ldr	r3, [r7, #8]
 80124d6:	781b      	ldrb	r3, [r3, #0]
 80124d8:	2be5      	cmp	r3, #229	; 0xe5
 80124da:	d102      	bne.n	80124e2 <create_name+0x16e>
 80124dc:	68bb      	ldr	r3, [r7, #8]
 80124de:	2205      	movs	r2, #5
 80124e0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80124e2:	7ffb      	ldrb	r3, [r7, #31]
 80124e4:	2b20      	cmp	r3, #32
 80124e6:	d801      	bhi.n	80124ec <create_name+0x178>
 80124e8:	2204      	movs	r2, #4
 80124ea:	e000      	b.n	80124ee <create_name+0x17a>
 80124ec:	2200      	movs	r2, #0
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	330b      	adds	r3, #11
 80124f2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80124f4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80124f6:	4618      	mov	r0, r3
 80124f8:	3720      	adds	r7, #32
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd80      	pop	{r7, pc}
 80124fe:	bf00      	nop
 8012500:	08019d40 	.word	0x08019d40
 8012504:	08019cf0 	.word	0x08019cf0

08012508 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b086      	sub	sp, #24
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	781b      	ldrb	r3, [r3, #0]
 8012520:	2b2f      	cmp	r3, #47	; 0x2f
 8012522:	d00b      	beq.n	801253c <follow_path+0x34>
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	2b5c      	cmp	r3, #92	; 0x5c
 801252a:	d007      	beq.n	801253c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	699a      	ldr	r2, [r3, #24]
 8012530:	693b      	ldr	r3, [r7, #16]
 8012532:	609a      	str	r2, [r3, #8]
 8012534:	e00d      	b.n	8012552 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	3301      	adds	r3, #1
 801253a:	603b      	str	r3, [r7, #0]
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	2b2f      	cmp	r3, #47	; 0x2f
 8012542:	d0f8      	beq.n	8012536 <follow_path+0x2e>
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	781b      	ldrb	r3, [r3, #0]
 8012548:	2b5c      	cmp	r3, #92	; 0x5c
 801254a:	d0f4      	beq.n	8012536 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 801254c:	693b      	ldr	r3, [r7, #16]
 801254e:	2200      	movs	r2, #0
 8012550:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	781b      	ldrb	r3, [r3, #0]
 8012556:	2b1f      	cmp	r3, #31
 8012558:	d80a      	bhi.n	8012570 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	2280      	movs	r2, #128	; 0x80
 801255e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012562:	2100      	movs	r1, #0
 8012564:	6878      	ldr	r0, [r7, #4]
 8012566:	f7ff fc1e 	bl	8011da6 <dir_sdi>
 801256a:	4603      	mov	r3, r0
 801256c:	75fb      	strb	r3, [r7, #23]
 801256e:	e05b      	b.n	8012628 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012570:	463b      	mov	r3, r7
 8012572:	4619      	mov	r1, r3
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f7ff fefd 	bl	8012374 <create_name>
 801257a:	4603      	mov	r3, r0
 801257c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801257e:	7dfb      	ldrb	r3, [r7, #23]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d14c      	bne.n	801261e <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f7ff fe50 	bl	801222a <dir_find>
 801258a:	4603      	mov	r3, r0
 801258c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012594:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012596:	7dfb      	ldrb	r3, [r7, #23]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d01b      	beq.n	80125d4 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801259c:	7dfb      	ldrb	r3, [r7, #23]
 801259e:	2b04      	cmp	r3, #4
 80125a0:	d13f      	bne.n	8012622 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80125a2:	7afb      	ldrb	r3, [r7, #11]
 80125a4:	f003 0320 	and.w	r3, r3, #32
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d00b      	beq.n	80125c4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80125ac:	7afb      	ldrb	r3, [r7, #11]
 80125ae:	f003 0304 	and.w	r3, r3, #4
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d031      	beq.n	801261a <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2280      	movs	r2, #128	; 0x80
 80125ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80125be:	2300      	movs	r3, #0
 80125c0:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80125c2:	e02e      	b.n	8012622 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80125c4:	7afb      	ldrb	r3, [r7, #11]
 80125c6:	f003 0304 	and.w	r3, r3, #4
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d129      	bne.n	8012622 <follow_path+0x11a>
 80125ce:	2305      	movs	r3, #5
 80125d0:	75fb      	strb	r3, [r7, #23]
				break;
 80125d2:	e026      	b.n	8012622 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80125d4:	7afb      	ldrb	r3, [r7, #11]
 80125d6:	f003 0304 	and.w	r3, r3, #4
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d123      	bne.n	8012626 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80125de:	693b      	ldr	r3, [r7, #16]
 80125e0:	799b      	ldrb	r3, [r3, #6]
 80125e2:	f003 0310 	and.w	r3, r3, #16
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d102      	bne.n	80125f0 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 80125ea:	2305      	movs	r3, #5
 80125ec:	75fb      	strb	r3, [r7, #23]
 80125ee:	e01b      	b.n	8012628 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	695b      	ldr	r3, [r3, #20]
 80125fa:	68fa      	ldr	r2, [r7, #12]
 80125fc:	8992      	ldrh	r2, [r2, #12]
 80125fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8012602:	fb02 f200 	mul.w	r2, r2, r0
 8012606:	1a9b      	subs	r3, r3, r2
 8012608:	440b      	add	r3, r1
 801260a:	4619      	mov	r1, r3
 801260c:	68f8      	ldr	r0, [r7, #12]
 801260e:	f7ff fd70 	bl	80120f2 <ld_clust>
 8012612:	4602      	mov	r2, r0
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	609a      	str	r2, [r3, #8]
 8012618:	e7aa      	b.n	8012570 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801261a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801261c:	e7a8      	b.n	8012570 <follow_path+0x68>
			if (res != FR_OK) break;
 801261e:	bf00      	nop
 8012620:	e002      	b.n	8012628 <follow_path+0x120>
				break;
 8012622:	bf00      	nop
 8012624:	e000      	b.n	8012628 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012626:	bf00      	nop
			}
		}
	}

	return res;
 8012628:	7dfb      	ldrb	r3, [r7, #23]
}
 801262a:	4618      	mov	r0, r3
 801262c:	3718      	adds	r7, #24
 801262e:	46bd      	mov	sp, r7
 8012630:	bd80      	pop	{r7, pc}

08012632 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012632:	b480      	push	{r7}
 8012634:	b087      	sub	sp, #28
 8012636:	af00      	add	r7, sp, #0
 8012638:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801263a:	f04f 33ff 	mov.w	r3, #4294967295
 801263e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d031      	beq.n	80126ac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	617b      	str	r3, [r7, #20]
 801264e:	e002      	b.n	8012656 <get_ldnumber+0x24>
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	3301      	adds	r3, #1
 8012654:	617b      	str	r3, [r7, #20]
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	781b      	ldrb	r3, [r3, #0]
 801265a:	2b20      	cmp	r3, #32
 801265c:	d903      	bls.n	8012666 <get_ldnumber+0x34>
 801265e:	697b      	ldr	r3, [r7, #20]
 8012660:	781b      	ldrb	r3, [r3, #0]
 8012662:	2b3a      	cmp	r3, #58	; 0x3a
 8012664:	d1f4      	bne.n	8012650 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	781b      	ldrb	r3, [r3, #0]
 801266a:	2b3a      	cmp	r3, #58	; 0x3a
 801266c:	d11c      	bne.n	80126a8 <get_ldnumber+0x76>
			tp = *path;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	1c5a      	adds	r2, r3, #1
 8012678:	60fa      	str	r2, [r7, #12]
 801267a:	781b      	ldrb	r3, [r3, #0]
 801267c:	3b30      	subs	r3, #48	; 0x30
 801267e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012680:	68bb      	ldr	r3, [r7, #8]
 8012682:	2b09      	cmp	r3, #9
 8012684:	d80e      	bhi.n	80126a4 <get_ldnumber+0x72>
 8012686:	68fa      	ldr	r2, [r7, #12]
 8012688:	697b      	ldr	r3, [r7, #20]
 801268a:	429a      	cmp	r2, r3
 801268c:	d10a      	bne.n	80126a4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801268e:	68bb      	ldr	r3, [r7, #8]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d107      	bne.n	80126a4 <get_ldnumber+0x72>
					vol = (int)i;
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012698:	697b      	ldr	r3, [r7, #20]
 801269a:	3301      	adds	r3, #1
 801269c:	617b      	str	r3, [r7, #20]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	697a      	ldr	r2, [r7, #20]
 80126a2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80126a4:	693b      	ldr	r3, [r7, #16]
 80126a6:	e002      	b.n	80126ae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80126a8:	2300      	movs	r3, #0
 80126aa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80126ac:	693b      	ldr	r3, [r7, #16]
}
 80126ae:	4618      	mov	r0, r3
 80126b0:	371c      	adds	r7, #28
 80126b2:	46bd      	mov	sp, r7
 80126b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b8:	4770      	bx	lr
	...

080126bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80126bc:	b580      	push	{r7, lr}
 80126be:	b082      	sub	sp, #8
 80126c0:	af00      	add	r7, sp, #0
 80126c2:	6078      	str	r0, [r7, #4]
 80126c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2200      	movs	r2, #0
 80126ca:	70da      	strb	r2, [r3, #3]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	f04f 32ff 	mov.w	r2, #4294967295
 80126d2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80126d4:	6839      	ldr	r1, [r7, #0]
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f7fe ff8c 	bl	80115f4 <move_window>
 80126dc:	4603      	mov	r3, r0
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d001      	beq.n	80126e6 <check_fs+0x2a>
 80126e2:	2304      	movs	r3, #4
 80126e4:	e038      	b.n	8012758 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	3338      	adds	r3, #56	; 0x38
 80126ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80126ee:	4618      	mov	r0, r3
 80126f0:	f7fe fcd0 	bl	8011094 <ld_word>
 80126f4:	4603      	mov	r3, r0
 80126f6:	461a      	mov	r2, r3
 80126f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80126fc:	429a      	cmp	r2, r3
 80126fe:	d001      	beq.n	8012704 <check_fs+0x48>
 8012700:	2303      	movs	r3, #3
 8012702:	e029      	b.n	8012758 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801270a:	2be9      	cmp	r3, #233	; 0xe9
 801270c:	d009      	beq.n	8012722 <check_fs+0x66>
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012714:	2beb      	cmp	r3, #235	; 0xeb
 8012716:	d11e      	bne.n	8012756 <check_fs+0x9a>
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801271e:	2b90      	cmp	r3, #144	; 0x90
 8012720:	d119      	bne.n	8012756 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	3338      	adds	r3, #56	; 0x38
 8012726:	3336      	adds	r3, #54	; 0x36
 8012728:	4618      	mov	r0, r3
 801272a:	f7fe fccb 	bl	80110c4 <ld_dword>
 801272e:	4603      	mov	r3, r0
 8012730:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012734:	4a0a      	ldr	r2, [pc, #40]	; (8012760 <check_fs+0xa4>)
 8012736:	4293      	cmp	r3, r2
 8012738:	d101      	bne.n	801273e <check_fs+0x82>
 801273a:	2300      	movs	r3, #0
 801273c:	e00c      	b.n	8012758 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	3338      	adds	r3, #56	; 0x38
 8012742:	3352      	adds	r3, #82	; 0x52
 8012744:	4618      	mov	r0, r3
 8012746:	f7fe fcbd 	bl	80110c4 <ld_dword>
 801274a:	4602      	mov	r2, r0
 801274c:	4b05      	ldr	r3, [pc, #20]	; (8012764 <check_fs+0xa8>)
 801274e:	429a      	cmp	r2, r3
 8012750:	d101      	bne.n	8012756 <check_fs+0x9a>
 8012752:	2300      	movs	r3, #0
 8012754:	e000      	b.n	8012758 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012756:	2302      	movs	r3, #2
}
 8012758:	4618      	mov	r0, r3
 801275a:	3708      	adds	r7, #8
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}
 8012760:	00544146 	.word	0x00544146
 8012764:	33544146 	.word	0x33544146

08012768 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b096      	sub	sp, #88	; 0x58
 801276c:	af00      	add	r7, sp, #0
 801276e:	60f8      	str	r0, [r7, #12]
 8012770:	60b9      	str	r1, [r7, #8]
 8012772:	4613      	mov	r3, r2
 8012774:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	2200      	movs	r2, #0
 801277a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801277c:	68f8      	ldr	r0, [r7, #12]
 801277e:	f7ff ff58 	bl	8012632 <get_ldnumber>
 8012782:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012786:	2b00      	cmp	r3, #0
 8012788:	da01      	bge.n	801278e <find_volume+0x26>
 801278a:	230b      	movs	r3, #11
 801278c:	e268      	b.n	8012c60 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801278e:	4ab0      	ldr	r2, [pc, #704]	; (8012a50 <find_volume+0x2e8>)
 8012790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012796:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801279a:	2b00      	cmp	r3, #0
 801279c:	d101      	bne.n	80127a2 <find_volume+0x3a>
 801279e:	230c      	movs	r3, #12
 80127a0:	e25e      	b.n	8012c60 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80127a2:	68bb      	ldr	r3, [r7, #8]
 80127a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80127a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80127a8:	79fb      	ldrb	r3, [r7, #7]
 80127aa:	f023 0301 	bic.w	r3, r3, #1
 80127ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80127b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127b2:	781b      	ldrb	r3, [r3, #0]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d01a      	beq.n	80127ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 80127b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ba:	785b      	ldrb	r3, [r3, #1]
 80127bc:	4618      	mov	r0, r3
 80127be:	f7fe fbcb 	bl	8010f58 <disk_status>
 80127c2:	4603      	mov	r3, r0
 80127c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80127c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80127cc:	f003 0301 	and.w	r3, r3, #1
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d10c      	bne.n	80127ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80127d4:	79fb      	ldrb	r3, [r7, #7]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d007      	beq.n	80127ea <find_volume+0x82>
 80127da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80127de:	f003 0304 	and.w	r3, r3, #4
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d001      	beq.n	80127ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80127e6:	230a      	movs	r3, #10
 80127e8:	e23a      	b.n	8012c60 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 80127ea:	2300      	movs	r3, #0
 80127ec:	e238      	b.n	8012c60 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80127ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127f0:	2200      	movs	r2, #0
 80127f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80127f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80127f6:	b2da      	uxtb	r2, r3
 80127f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80127fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127fe:	785b      	ldrb	r3, [r3, #1]
 8012800:	4618      	mov	r0, r3
 8012802:	f7fe fbc3 	bl	8010f8c <disk_initialize>
 8012806:	4603      	mov	r3, r0
 8012808:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801280c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012810:	f003 0301 	and.w	r3, r3, #1
 8012814:	2b00      	cmp	r3, #0
 8012816:	d001      	beq.n	801281c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012818:	2303      	movs	r3, #3
 801281a:	e221      	b.n	8012c60 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801281c:	79fb      	ldrb	r3, [r7, #7]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d007      	beq.n	8012832 <find_volume+0xca>
 8012822:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012826:	f003 0304 	and.w	r3, r3, #4
 801282a:	2b00      	cmp	r3, #0
 801282c:	d001      	beq.n	8012832 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801282e:	230a      	movs	r3, #10
 8012830:	e216      	b.n	8012c60 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012834:	7858      	ldrb	r0, [r3, #1]
 8012836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012838:	330c      	adds	r3, #12
 801283a:	461a      	mov	r2, r3
 801283c:	2102      	movs	r1, #2
 801283e:	f7fe fc0b 	bl	8011058 <disk_ioctl>
 8012842:	4603      	mov	r3, r0
 8012844:	2b00      	cmp	r3, #0
 8012846:	d001      	beq.n	801284c <find_volume+0xe4>
 8012848:	2301      	movs	r3, #1
 801284a:	e209      	b.n	8012c60 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801284c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801284e:	899b      	ldrh	r3, [r3, #12]
 8012850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012854:	d80d      	bhi.n	8012872 <find_volume+0x10a>
 8012856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012858:	899b      	ldrh	r3, [r3, #12]
 801285a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801285e:	d308      	bcc.n	8012872 <find_volume+0x10a>
 8012860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012862:	899b      	ldrh	r3, [r3, #12]
 8012864:	461a      	mov	r2, r3
 8012866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012868:	899b      	ldrh	r3, [r3, #12]
 801286a:	3b01      	subs	r3, #1
 801286c:	4013      	ands	r3, r2
 801286e:	2b00      	cmp	r3, #0
 8012870:	d001      	beq.n	8012876 <find_volume+0x10e>
 8012872:	2301      	movs	r3, #1
 8012874:	e1f4      	b.n	8012c60 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012876:	2300      	movs	r3, #0
 8012878:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801287a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801287c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801287e:	f7ff ff1d 	bl	80126bc <check_fs>
 8012882:	4603      	mov	r3, r0
 8012884:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012888:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801288c:	2b02      	cmp	r3, #2
 801288e:	d14b      	bne.n	8012928 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012890:	2300      	movs	r3, #0
 8012892:	643b      	str	r3, [r7, #64]	; 0x40
 8012894:	e01f      	b.n	80128d6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012898:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801289c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801289e:	011b      	lsls	r3, r3, #4
 80128a0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80128a4:	4413      	add	r3, r2
 80128a6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80128a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128aa:	3304      	adds	r3, #4
 80128ac:	781b      	ldrb	r3, [r3, #0]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d006      	beq.n	80128c0 <find_volume+0x158>
 80128b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b4:	3308      	adds	r3, #8
 80128b6:	4618      	mov	r0, r3
 80128b8:	f7fe fc04 	bl	80110c4 <ld_dword>
 80128bc:	4602      	mov	r2, r0
 80128be:	e000      	b.n	80128c2 <find_volume+0x15a>
 80128c0:	2200      	movs	r2, #0
 80128c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128c4:	009b      	lsls	r3, r3, #2
 80128c6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80128ca:	440b      	add	r3, r1
 80128cc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80128d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128d2:	3301      	adds	r3, #1
 80128d4:	643b      	str	r3, [r7, #64]	; 0x40
 80128d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128d8:	2b03      	cmp	r3, #3
 80128da:	d9dc      	bls.n	8012896 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80128dc:	2300      	movs	r3, #0
 80128de:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80128e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d002      	beq.n	80128ec <find_volume+0x184>
 80128e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128e8:	3b01      	subs	r3, #1
 80128ea:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80128ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128ee:	009b      	lsls	r3, r3, #2
 80128f0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80128f4:	4413      	add	r3, r2
 80128f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80128fa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80128fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d005      	beq.n	801290e <find_volume+0x1a6>
 8012902:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012904:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012906:	f7ff fed9 	bl	80126bc <check_fs>
 801290a:	4603      	mov	r3, r0
 801290c:	e000      	b.n	8012910 <find_volume+0x1a8>
 801290e:	2303      	movs	r3, #3
 8012910:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012914:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012918:	2b01      	cmp	r3, #1
 801291a:	d905      	bls.n	8012928 <find_volume+0x1c0>
 801291c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801291e:	3301      	adds	r3, #1
 8012920:	643b      	str	r3, [r7, #64]	; 0x40
 8012922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012924:	2b03      	cmp	r3, #3
 8012926:	d9e1      	bls.n	80128ec <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012928:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801292c:	2b04      	cmp	r3, #4
 801292e:	d101      	bne.n	8012934 <find_volume+0x1cc>
 8012930:	2301      	movs	r3, #1
 8012932:	e195      	b.n	8012c60 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012934:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012938:	2b01      	cmp	r3, #1
 801293a:	d901      	bls.n	8012940 <find_volume+0x1d8>
 801293c:	230d      	movs	r3, #13
 801293e:	e18f      	b.n	8012c60 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012942:	3338      	adds	r3, #56	; 0x38
 8012944:	330b      	adds	r3, #11
 8012946:	4618      	mov	r0, r3
 8012948:	f7fe fba4 	bl	8011094 <ld_word>
 801294c:	4603      	mov	r3, r0
 801294e:	461a      	mov	r2, r3
 8012950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012952:	899b      	ldrh	r3, [r3, #12]
 8012954:	429a      	cmp	r2, r3
 8012956:	d001      	beq.n	801295c <find_volume+0x1f4>
 8012958:	230d      	movs	r3, #13
 801295a:	e181      	b.n	8012c60 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801295e:	3338      	adds	r3, #56	; 0x38
 8012960:	3316      	adds	r3, #22
 8012962:	4618      	mov	r0, r3
 8012964:	f7fe fb96 	bl	8011094 <ld_word>
 8012968:	4603      	mov	r3, r0
 801296a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801296c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801296e:	2b00      	cmp	r3, #0
 8012970:	d106      	bne.n	8012980 <find_volume+0x218>
 8012972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012974:	3338      	adds	r3, #56	; 0x38
 8012976:	3324      	adds	r3, #36	; 0x24
 8012978:	4618      	mov	r0, r3
 801297a:	f7fe fba3 	bl	80110c4 <ld_dword>
 801297e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012982:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012984:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012988:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801298c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801298e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012992:	789b      	ldrb	r3, [r3, #2]
 8012994:	2b01      	cmp	r3, #1
 8012996:	d005      	beq.n	80129a4 <find_volume+0x23c>
 8012998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801299a:	789b      	ldrb	r3, [r3, #2]
 801299c:	2b02      	cmp	r3, #2
 801299e:	d001      	beq.n	80129a4 <find_volume+0x23c>
 80129a0:	230d      	movs	r3, #13
 80129a2:	e15d      	b.n	8012c60 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80129a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129a6:	789b      	ldrb	r3, [r3, #2]
 80129a8:	461a      	mov	r2, r3
 80129aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129ac:	fb02 f303 	mul.w	r3, r2, r3
 80129b0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80129b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80129b8:	b29a      	uxth	r2, r3
 80129ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80129be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c0:	895b      	ldrh	r3, [r3, #10]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d008      	beq.n	80129d8 <find_volume+0x270>
 80129c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c8:	895b      	ldrh	r3, [r3, #10]
 80129ca:	461a      	mov	r2, r3
 80129cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ce:	895b      	ldrh	r3, [r3, #10]
 80129d0:	3b01      	subs	r3, #1
 80129d2:	4013      	ands	r3, r2
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d001      	beq.n	80129dc <find_volume+0x274>
 80129d8:	230d      	movs	r3, #13
 80129da:	e141      	b.n	8012c60 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80129dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129de:	3338      	adds	r3, #56	; 0x38
 80129e0:	3311      	adds	r3, #17
 80129e2:	4618      	mov	r0, r3
 80129e4:	f7fe fb56 	bl	8011094 <ld_word>
 80129e8:	4603      	mov	r3, r0
 80129ea:	461a      	mov	r2, r3
 80129ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80129f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f2:	891b      	ldrh	r3, [r3, #8]
 80129f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129f6:	8992      	ldrh	r2, [r2, #12]
 80129f8:	0952      	lsrs	r2, r2, #5
 80129fa:	b292      	uxth	r2, r2
 80129fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a00:	fb02 f201 	mul.w	r2, r2, r1
 8012a04:	1a9b      	subs	r3, r3, r2
 8012a06:	b29b      	uxth	r3, r3
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d001      	beq.n	8012a10 <find_volume+0x2a8>
 8012a0c:	230d      	movs	r3, #13
 8012a0e:	e127      	b.n	8012c60 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a12:	3338      	adds	r3, #56	; 0x38
 8012a14:	3313      	adds	r3, #19
 8012a16:	4618      	mov	r0, r3
 8012a18:	f7fe fb3c 	bl	8011094 <ld_word>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d106      	bne.n	8012a34 <find_volume+0x2cc>
 8012a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a28:	3338      	adds	r3, #56	; 0x38
 8012a2a:	3320      	adds	r3, #32
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f7fe fb49 	bl	80110c4 <ld_dword>
 8012a32:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a36:	3338      	adds	r3, #56	; 0x38
 8012a38:	330e      	adds	r3, #14
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7fe fb2a 	bl	8011094 <ld_word>
 8012a40:	4603      	mov	r3, r0
 8012a42:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012a44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d104      	bne.n	8012a54 <find_volume+0x2ec>
 8012a4a:	230d      	movs	r3, #13
 8012a4c:	e108      	b.n	8012c60 <find_volume+0x4f8>
 8012a4e:	bf00      	nop
 8012a50:	200422e0 	.word	0x200422e0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012a54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a58:	4413      	add	r3, r2
 8012a5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a5c:	8911      	ldrh	r1, [r2, #8]
 8012a5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a60:	8992      	ldrh	r2, [r2, #12]
 8012a62:	0952      	lsrs	r2, r2, #5
 8012a64:	b292      	uxth	r2, r2
 8012a66:	fbb1 f2f2 	udiv	r2, r1, r2
 8012a6a:	b292      	uxth	r2, r2
 8012a6c:	4413      	add	r3, r2
 8012a6e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012a70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d201      	bcs.n	8012a7c <find_volume+0x314>
 8012a78:	230d      	movs	r3, #13
 8012a7a:	e0f1      	b.n	8012c60 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012a7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a80:	1ad3      	subs	r3, r2, r3
 8012a82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a84:	8952      	ldrh	r2, [r2, #10]
 8012a86:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a8a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d101      	bne.n	8012a96 <find_volume+0x32e>
 8012a92:	230d      	movs	r3, #13
 8012a94:	e0e4      	b.n	8012c60 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012a96:	2303      	movs	r3, #3
 8012a98:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a9e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012aa2:	4293      	cmp	r3, r2
 8012aa4:	d802      	bhi.n	8012aac <find_volume+0x344>
 8012aa6:	2302      	movs	r3, #2
 8012aa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aae:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012ab2:	4293      	cmp	r3, r2
 8012ab4:	d802      	bhi.n	8012abc <find_volume+0x354>
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012abe:	1c9a      	adds	r2, r3, #2
 8012ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac2:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012ac8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012aca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012acc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ace:	441a      	add	r2, r3
 8012ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012ad4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ad8:	441a      	add	r2, r3
 8012ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012adc:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012ade:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ae2:	2b03      	cmp	r3, #3
 8012ae4:	d11e      	bne.n	8012b24 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae8:	3338      	adds	r3, #56	; 0x38
 8012aea:	332a      	adds	r3, #42	; 0x2a
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7fe fad1 	bl	8011094 <ld_word>
 8012af2:	4603      	mov	r3, r0
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d001      	beq.n	8012afc <find_volume+0x394>
 8012af8:	230d      	movs	r3, #13
 8012afa:	e0b1      	b.n	8012c60 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012afe:	891b      	ldrh	r3, [r3, #8]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d001      	beq.n	8012b08 <find_volume+0x3a0>
 8012b04:	230d      	movs	r3, #13
 8012b06:	e0ab      	b.n	8012c60 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b0a:	3338      	adds	r3, #56	; 0x38
 8012b0c:	332c      	adds	r3, #44	; 0x2c
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f7fe fad8 	bl	80110c4 <ld_dword>
 8012b14:	4602      	mov	r2, r0
 8012b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b18:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b1c:	69db      	ldr	r3, [r3, #28]
 8012b1e:	009b      	lsls	r3, r3, #2
 8012b20:	647b      	str	r3, [r7, #68]	; 0x44
 8012b22:	e01f      	b.n	8012b64 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b26:	891b      	ldrh	r3, [r3, #8]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d101      	bne.n	8012b30 <find_volume+0x3c8>
 8012b2c:	230d      	movs	r3, #13
 8012b2e:	e097      	b.n	8012c60 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b36:	441a      	add	r2, r3
 8012b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b3a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012b3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b40:	2b02      	cmp	r3, #2
 8012b42:	d103      	bne.n	8012b4c <find_volume+0x3e4>
 8012b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b46:	69db      	ldr	r3, [r3, #28]
 8012b48:	005b      	lsls	r3, r3, #1
 8012b4a:	e00a      	b.n	8012b62 <find_volume+0x3fa>
 8012b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b4e:	69da      	ldr	r2, [r3, #28]
 8012b50:	4613      	mov	r3, r2
 8012b52:	005b      	lsls	r3, r3, #1
 8012b54:	4413      	add	r3, r2
 8012b56:	085a      	lsrs	r2, r3, #1
 8012b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b5a:	69db      	ldr	r3, [r3, #28]
 8012b5c:	f003 0301 	and.w	r3, r3, #1
 8012b60:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012b62:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b66:	6a1a      	ldr	r2, [r3, #32]
 8012b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b6a:	899b      	ldrh	r3, [r3, #12]
 8012b6c:	4619      	mov	r1, r3
 8012b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b70:	440b      	add	r3, r1
 8012b72:	3b01      	subs	r3, #1
 8012b74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012b76:	8989      	ldrh	r1, [r1, #12]
 8012b78:	fbb3 f3f1 	udiv	r3, r3, r1
 8012b7c:	429a      	cmp	r2, r3
 8012b7e:	d201      	bcs.n	8012b84 <find_volume+0x41c>
 8012b80:	230d      	movs	r3, #13
 8012b82:	e06d      	b.n	8012c60 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b86:	f04f 32ff 	mov.w	r2, #4294967295
 8012b8a:	615a      	str	r2, [r3, #20]
 8012b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b8e:	695a      	ldr	r2, [r3, #20]
 8012b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b92:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b96:	2280      	movs	r2, #128	; 0x80
 8012b98:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012b9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b9e:	2b03      	cmp	r3, #3
 8012ba0:	d149      	bne.n	8012c36 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba4:	3338      	adds	r3, #56	; 0x38
 8012ba6:	3330      	adds	r3, #48	; 0x30
 8012ba8:	4618      	mov	r0, r3
 8012baa:	f7fe fa73 	bl	8011094 <ld_word>
 8012bae:	4603      	mov	r3, r0
 8012bb0:	2b01      	cmp	r3, #1
 8012bb2:	d140      	bne.n	8012c36 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012bb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bb6:	3301      	adds	r3, #1
 8012bb8:	4619      	mov	r1, r3
 8012bba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012bbc:	f7fe fd1a 	bl	80115f4 <move_window>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d137      	bne.n	8012c36 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bc8:	2200      	movs	r2, #0
 8012bca:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bce:	3338      	adds	r3, #56	; 0x38
 8012bd0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7fe fa5d 	bl	8011094 <ld_word>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	461a      	mov	r2, r3
 8012bde:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012be2:	429a      	cmp	r2, r3
 8012be4:	d127      	bne.n	8012c36 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be8:	3338      	adds	r3, #56	; 0x38
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7fe fa6a 	bl	80110c4 <ld_dword>
 8012bf0:	4602      	mov	r2, r0
 8012bf2:	4b1d      	ldr	r3, [pc, #116]	; (8012c68 <find_volume+0x500>)
 8012bf4:	429a      	cmp	r2, r3
 8012bf6:	d11e      	bne.n	8012c36 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bfa:	3338      	adds	r3, #56	; 0x38
 8012bfc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012c00:	4618      	mov	r0, r3
 8012c02:	f7fe fa5f 	bl	80110c4 <ld_dword>
 8012c06:	4602      	mov	r2, r0
 8012c08:	4b18      	ldr	r3, [pc, #96]	; (8012c6c <find_volume+0x504>)
 8012c0a:	429a      	cmp	r2, r3
 8012c0c:	d113      	bne.n	8012c36 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c10:	3338      	adds	r3, #56	; 0x38
 8012c12:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7fe fa54 	bl	80110c4 <ld_dword>
 8012c1c:	4602      	mov	r2, r0
 8012c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c20:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c24:	3338      	adds	r3, #56	; 0x38
 8012c26:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7fe fa4a 	bl	80110c4 <ld_dword>
 8012c30:	4602      	mov	r2, r0
 8012c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c34:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c38:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012c3c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012c3e:	4b0c      	ldr	r3, [pc, #48]	; (8012c70 <find_volume+0x508>)
 8012c40:	881b      	ldrh	r3, [r3, #0]
 8012c42:	3301      	adds	r3, #1
 8012c44:	b29a      	uxth	r2, r3
 8012c46:	4b0a      	ldr	r3, [pc, #40]	; (8012c70 <find_volume+0x508>)
 8012c48:	801a      	strh	r2, [r3, #0]
 8012c4a:	4b09      	ldr	r3, [pc, #36]	; (8012c70 <find_volume+0x508>)
 8012c4c:	881a      	ldrh	r2, [r3, #0]
 8012c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c50:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8012c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c54:	2200      	movs	r2, #0
 8012c56:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012c58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012c5a:	f7fe fc63 	bl	8011524 <clear_lock>
#endif
	return FR_OK;
 8012c5e:	2300      	movs	r3, #0
}
 8012c60:	4618      	mov	r0, r3
 8012c62:	3758      	adds	r7, #88	; 0x58
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd80      	pop	{r7, pc}
 8012c68:	41615252 	.word	0x41615252
 8012c6c:	61417272 	.word	0x61417272
 8012c70:	200422e4 	.word	0x200422e4

08012c74 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b084      	sub	sp, #16
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
 8012c7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012c7e:	2309      	movs	r3, #9
 8012c80:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d01c      	beq.n	8012cc2 <validate+0x4e>
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d018      	beq.n	8012cc2 <validate+0x4e>
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	781b      	ldrb	r3, [r3, #0]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d013      	beq.n	8012cc2 <validate+0x4e>
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	889a      	ldrh	r2, [r3, #4]
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	88db      	ldrh	r3, [r3, #6]
 8012ca4:	429a      	cmp	r2, r3
 8012ca6:	d10c      	bne.n	8012cc2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	785b      	ldrb	r3, [r3, #1]
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f7fe f952 	bl	8010f58 <disk_status>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	f003 0301 	and.w	r3, r3, #1
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d101      	bne.n	8012cc2 <validate+0x4e>
			res = FR_OK;
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012cc2:	7bfb      	ldrb	r3, [r7, #15]
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d102      	bne.n	8012cce <validate+0x5a>
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	e000      	b.n	8012cd0 <validate+0x5c>
 8012cce:	2300      	movs	r3, #0
 8012cd0:	683a      	ldr	r2, [r7, #0]
 8012cd2:	6013      	str	r3, [r2, #0]
	return res;
 8012cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	3710      	adds	r7, #16
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd80      	pop	{r7, pc}
	...

08012ce0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b088      	sub	sp, #32
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	60f8      	str	r0, [r7, #12]
 8012ce8:	60b9      	str	r1, [r7, #8]
 8012cea:	4613      	mov	r3, r2
 8012cec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012cee:	68bb      	ldr	r3, [r7, #8]
 8012cf0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012cf2:	f107 0310 	add.w	r3, r7, #16
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f7ff fc9b 	bl	8012632 <get_ldnumber>
 8012cfc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012cfe:	69fb      	ldr	r3, [r7, #28]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	da01      	bge.n	8012d08 <f_mount+0x28>
 8012d04:	230b      	movs	r3, #11
 8012d06:	e02b      	b.n	8012d60 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012d08:	4a17      	ldr	r2, [pc, #92]	; (8012d68 <f_mount+0x88>)
 8012d0a:	69fb      	ldr	r3, [r7, #28]
 8012d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d10:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012d12:	69bb      	ldr	r3, [r7, #24]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d005      	beq.n	8012d24 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012d18:	69b8      	ldr	r0, [r7, #24]
 8012d1a:	f7fe fc03 	bl	8011524 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012d1e:	69bb      	ldr	r3, [r7, #24]
 8012d20:	2200      	movs	r2, #0
 8012d22:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d002      	beq.n	8012d30 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012d30:	68fa      	ldr	r2, [r7, #12]
 8012d32:	490d      	ldr	r1, [pc, #52]	; (8012d68 <f_mount+0x88>)
 8012d34:	69fb      	ldr	r3, [r7, #28]
 8012d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d002      	beq.n	8012d46 <f_mount+0x66>
 8012d40:	79fb      	ldrb	r3, [r7, #7]
 8012d42:	2b01      	cmp	r3, #1
 8012d44:	d001      	beq.n	8012d4a <f_mount+0x6a>
 8012d46:	2300      	movs	r3, #0
 8012d48:	e00a      	b.n	8012d60 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012d4a:	f107 010c 	add.w	r1, r7, #12
 8012d4e:	f107 0308 	add.w	r3, r7, #8
 8012d52:	2200      	movs	r2, #0
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7ff fd07 	bl	8012768 <find_volume>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d60:	4618      	mov	r0, r3
 8012d62:	3720      	adds	r7, #32
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}
 8012d68:	200422e0 	.word	0x200422e0

08012d6c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b098      	sub	sp, #96	; 0x60
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	60f8      	str	r0, [r7, #12]
 8012d74:	60b9      	str	r1, [r7, #8]
 8012d76:	4613      	mov	r3, r2
 8012d78:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d101      	bne.n	8012d84 <f_open+0x18>
 8012d80:	2309      	movs	r3, #9
 8012d82:	e1ba      	b.n	80130fa <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012d84:	79fb      	ldrb	r3, [r7, #7]
 8012d86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012d8a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012d8c:	79fa      	ldrb	r2, [r7, #7]
 8012d8e:	f107 0110 	add.w	r1, r7, #16
 8012d92:	f107 0308 	add.w	r3, r7, #8
 8012d96:	4618      	mov	r0, r3
 8012d98:	f7ff fce6 	bl	8012768 <find_volume>
 8012d9c:	4603      	mov	r3, r0
 8012d9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012da2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	f040 819e 	bne.w	80130e8 <f_open+0x37c>
		dj.obj.fs = fs;
 8012dac:	693b      	ldr	r3, [r7, #16]
 8012dae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012db0:	68ba      	ldr	r2, [r7, #8]
 8012db2:	f107 0314 	add.w	r3, r7, #20
 8012db6:	4611      	mov	r1, r2
 8012db8:	4618      	mov	r0, r3
 8012dba:	f7ff fba5 	bl	8012508 <follow_path>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012dc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d11a      	bne.n	8012e02 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012dcc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012dd0:	b25b      	sxtb	r3, r3
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	da03      	bge.n	8012dde <f_open+0x72>
				res = FR_INVALID_NAME;
 8012dd6:	2306      	movs	r3, #6
 8012dd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012ddc:	e011      	b.n	8012e02 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012dde:	79fb      	ldrb	r3, [r7, #7]
 8012de0:	f023 0301 	bic.w	r3, r3, #1
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	bf14      	ite	ne
 8012de8:	2301      	movne	r3, #1
 8012dea:	2300      	moveq	r3, #0
 8012dec:	b2db      	uxtb	r3, r3
 8012dee:	461a      	mov	r2, r3
 8012df0:	f107 0314 	add.w	r3, r7, #20
 8012df4:	4611      	mov	r1, r2
 8012df6:	4618      	mov	r0, r3
 8012df8:	f7fe fa4c 	bl	8011294 <chk_lock>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012e02:	79fb      	ldrb	r3, [r7, #7]
 8012e04:	f003 031c 	and.w	r3, r3, #28
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d07e      	beq.n	8012f0a <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012e0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d017      	beq.n	8012e44 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012e14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e18:	2b04      	cmp	r3, #4
 8012e1a:	d10e      	bne.n	8012e3a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012e1c:	f7fe fa96 	bl	801134c <enq_lock>
 8012e20:	4603      	mov	r3, r0
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d006      	beq.n	8012e34 <f_open+0xc8>
 8012e26:	f107 0314 	add.w	r3, r7, #20
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f7ff fa52 	bl	80122d4 <dir_register>
 8012e30:	4603      	mov	r3, r0
 8012e32:	e000      	b.n	8012e36 <f_open+0xca>
 8012e34:	2312      	movs	r3, #18
 8012e36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012e3a:	79fb      	ldrb	r3, [r7, #7]
 8012e3c:	f043 0308 	orr.w	r3, r3, #8
 8012e40:	71fb      	strb	r3, [r7, #7]
 8012e42:	e010      	b.n	8012e66 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012e44:	7ebb      	ldrb	r3, [r7, #26]
 8012e46:	f003 0311 	and.w	r3, r3, #17
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d003      	beq.n	8012e56 <f_open+0xea>
					res = FR_DENIED;
 8012e4e:	2307      	movs	r3, #7
 8012e50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012e54:	e007      	b.n	8012e66 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012e56:	79fb      	ldrb	r3, [r7, #7]
 8012e58:	f003 0304 	and.w	r3, r3, #4
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d002      	beq.n	8012e66 <f_open+0xfa>
 8012e60:	2308      	movs	r3, #8
 8012e62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012e66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d167      	bne.n	8012f3e <f_open+0x1d2>
 8012e6e:	79fb      	ldrb	r3, [r7, #7]
 8012e70:	f003 0308 	and.w	r3, r3, #8
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d062      	beq.n	8012f3e <f_open+0x1d2>
				dw = GET_FATTIME();
 8012e78:	4ba2      	ldr	r3, [pc, #648]	; (8013104 <f_open+0x398>)
 8012e7a:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e7e:	330e      	adds	r3, #14
 8012e80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7fe f95c 	bl	8011140 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e8a:	3316      	adds	r3, #22
 8012e8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012e8e:	4618      	mov	r0, r3
 8012e90:	f7fe f956 	bl	8011140 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e96:	330b      	adds	r3, #11
 8012e98:	2220      	movs	r2, #32
 8012e9a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012e9c:	693b      	ldr	r3, [r7, #16]
 8012e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ea0:	4611      	mov	r1, r2
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f7ff f925 	bl	80120f2 <ld_clust>
 8012ea8:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012eae:	2200      	movs	r2, #0
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7ff f93d 	bl	8012130 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012eb8:	331c      	adds	r3, #28
 8012eba:	2100      	movs	r1, #0
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f7fe f93f 	bl	8011140 <st_dword>
					fs->wflag = 1;
 8012ec2:	693b      	ldr	r3, [r7, #16]
 8012ec4:	2201      	movs	r2, #1
 8012ec6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d037      	beq.n	8012f3e <f_open+0x1d2>
						dw = fs->winsect;
 8012ece:	693b      	ldr	r3, [r7, #16]
 8012ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ed2:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012ed4:	f107 0314 	add.w	r3, r7, #20
 8012ed8:	2200      	movs	r2, #0
 8012eda:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012edc:	4618      	mov	r0, r3
 8012ede:	f7fe fe2d 	bl	8011b3c <remove_chain>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012ee8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d126      	bne.n	8012f3e <f_open+0x1d2>
							res = move_window(fs, dw);
 8012ef0:	693b      	ldr	r3, [r7, #16]
 8012ef2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7fe fb7d 	bl	80115f4 <move_window>
 8012efa:	4603      	mov	r3, r0
 8012efc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012f00:	693b      	ldr	r3, [r7, #16]
 8012f02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012f04:	3a01      	subs	r2, #1
 8012f06:	611a      	str	r2, [r3, #16]
 8012f08:	e019      	b.n	8012f3e <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012f0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d115      	bne.n	8012f3e <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012f12:	7ebb      	ldrb	r3, [r7, #26]
 8012f14:	f003 0310 	and.w	r3, r3, #16
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d003      	beq.n	8012f24 <f_open+0x1b8>
					res = FR_NO_FILE;
 8012f1c:	2304      	movs	r3, #4
 8012f1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012f22:	e00c      	b.n	8012f3e <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012f24:	79fb      	ldrb	r3, [r7, #7]
 8012f26:	f003 0302 	and.w	r3, r3, #2
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d007      	beq.n	8012f3e <f_open+0x1d2>
 8012f2e:	7ebb      	ldrb	r3, [r7, #26]
 8012f30:	f003 0301 	and.w	r3, r3, #1
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d002      	beq.n	8012f3e <f_open+0x1d2>
						res = FR_DENIED;
 8012f38:	2307      	movs	r3, #7
 8012f3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012f3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d128      	bne.n	8012f98 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012f46:	79fb      	ldrb	r3, [r7, #7]
 8012f48:	f003 0308 	and.w	r3, r3, #8
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d003      	beq.n	8012f58 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8012f50:	79fb      	ldrb	r3, [r7, #7]
 8012f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f56:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012f58:	693b      	ldr	r3, [r7, #16]
 8012f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012f60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012f66:	79fb      	ldrb	r3, [r7, #7]
 8012f68:	f023 0301 	bic.w	r3, r3, #1
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	bf14      	ite	ne
 8012f70:	2301      	movne	r3, #1
 8012f72:	2300      	moveq	r3, #0
 8012f74:	b2db      	uxtb	r3, r3
 8012f76:	461a      	mov	r2, r3
 8012f78:	f107 0314 	add.w	r3, r7, #20
 8012f7c:	4611      	mov	r1, r2
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f7fe fa06 	bl	8011390 <inc_lock>
 8012f84:	4602      	mov	r2, r0
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	691b      	ldr	r3, [r3, #16]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d102      	bne.n	8012f98 <f_open+0x22c>
 8012f92:	2302      	movs	r3, #2
 8012f94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012f98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	f040 80a3 	bne.w	80130e8 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012fa2:	693b      	ldr	r3, [r7, #16]
 8012fa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012fa6:	4611      	mov	r1, r2
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f7ff f8a2 	bl	80120f2 <ld_clust>
 8012fae:	4602      	mov	r2, r0
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fb6:	331c      	adds	r3, #28
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f7fe f883 	bl	80110c4 <ld_dword>
 8012fbe:	4602      	mov	r2, r0
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012fca:	693a      	ldr	r2, [r7, #16]
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	88da      	ldrh	r2, [r3, #6]
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	79fa      	ldrb	r2, [r7, #7]
 8012fdc:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	2200      	movs	r2, #0
 8012fee:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	3330      	adds	r3, #48	; 0x30
 8012ff4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012ff8:	2100      	movs	r1, #0
 8012ffa:	4618      	mov	r0, r3
 8012ffc:	f7fe f8ed 	bl	80111da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013000:	79fb      	ldrb	r3, [r7, #7]
 8013002:	f003 0320 	and.w	r3, r3, #32
 8013006:	2b00      	cmp	r3, #0
 8013008:	d06e      	beq.n	80130e8 <f_open+0x37c>
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	68db      	ldr	r3, [r3, #12]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d06a      	beq.n	80130e8 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	68da      	ldr	r2, [r3, #12]
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801301a:	693b      	ldr	r3, [r7, #16]
 801301c:	895b      	ldrh	r3, [r3, #10]
 801301e:	461a      	mov	r2, r3
 8013020:	693b      	ldr	r3, [r7, #16]
 8013022:	899b      	ldrh	r3, [r3, #12]
 8013024:	fb03 f302 	mul.w	r3, r3, r2
 8013028:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	689b      	ldr	r3, [r3, #8]
 801302e:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	68db      	ldr	r3, [r3, #12]
 8013034:	657b      	str	r3, [r7, #84]	; 0x54
 8013036:	e016      	b.n	8013066 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801303c:	4618      	mov	r0, r3
 801303e:	f7fe fb96 	bl	801176e <get_fat>
 8013042:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013044:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013046:	2b01      	cmp	r3, #1
 8013048:	d802      	bhi.n	8013050 <f_open+0x2e4>
 801304a:	2302      	movs	r3, #2
 801304c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013050:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013056:	d102      	bne.n	801305e <f_open+0x2f2>
 8013058:	2301      	movs	r3, #1
 801305a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801305e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013062:	1ad3      	subs	r3, r2, r3
 8013064:	657b      	str	r3, [r7, #84]	; 0x54
 8013066:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801306a:	2b00      	cmp	r3, #0
 801306c:	d103      	bne.n	8013076 <f_open+0x30a>
 801306e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013072:	429a      	cmp	r2, r3
 8013074:	d8e0      	bhi.n	8013038 <f_open+0x2cc>
				}
				fp->clust = clst;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801307a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801307c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013080:	2b00      	cmp	r3, #0
 8013082:	d131      	bne.n	80130e8 <f_open+0x37c>
 8013084:	693b      	ldr	r3, [r7, #16]
 8013086:	899b      	ldrh	r3, [r3, #12]
 8013088:	461a      	mov	r2, r3
 801308a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801308c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013090:	fb02 f201 	mul.w	r2, r2, r1
 8013094:	1a9b      	subs	r3, r3, r2
 8013096:	2b00      	cmp	r3, #0
 8013098:	d026      	beq.n	80130e8 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801309a:	693b      	ldr	r3, [r7, #16]
 801309c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801309e:	4618      	mov	r0, r3
 80130a0:	f7fe fb46 	bl	8011730 <clust2sect>
 80130a4:	6478      	str	r0, [r7, #68]	; 0x44
 80130a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d103      	bne.n	80130b4 <f_open+0x348>
						res = FR_INT_ERR;
 80130ac:	2302      	movs	r3, #2
 80130ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80130b2:	e019      	b.n	80130e8 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	899b      	ldrh	r3, [r3, #12]
 80130b8:	461a      	mov	r2, r3
 80130ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80130bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80130c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80130c2:	441a      	add	r2, r3
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80130c8:	693b      	ldr	r3, [r7, #16]
 80130ca:	7858      	ldrb	r0, [r3, #1]
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	6a1a      	ldr	r2, [r3, #32]
 80130d6:	2301      	movs	r3, #1
 80130d8:	f7fd ff7e 	bl	8010fd8 <disk_read>
 80130dc:	4603      	mov	r3, r0
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d002      	beq.n	80130e8 <f_open+0x37c>
 80130e2:	2301      	movs	r3, #1
 80130e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80130e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d002      	beq.n	80130f6 <f_open+0x38a>
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	2200      	movs	r2, #0
 80130f4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80130f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80130fa:	4618      	mov	r0, r3
 80130fc:	3760      	adds	r7, #96	; 0x60
 80130fe:	46bd      	mov	sp, r7
 8013100:	bd80      	pop	{r7, pc}
 8013102:	bf00      	nop
 8013104:	274a0000 	.word	0x274a0000

08013108 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013108:	b580      	push	{r7, lr}
 801310a:	b08e      	sub	sp, #56	; 0x38
 801310c:	af00      	add	r7, sp, #0
 801310e:	60f8      	str	r0, [r7, #12]
 8013110:	60b9      	str	r1, [r7, #8]
 8013112:	607a      	str	r2, [r7, #4]
 8013114:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801311a:	683b      	ldr	r3, [r7, #0]
 801311c:	2200      	movs	r2, #0
 801311e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	f107 0214 	add.w	r2, r7, #20
 8013126:	4611      	mov	r1, r2
 8013128:	4618      	mov	r0, r3
 801312a:	f7ff fda3 	bl	8012c74 <validate>
 801312e:	4603      	mov	r3, r0
 8013130:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013134:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013138:	2b00      	cmp	r3, #0
 801313a:	d107      	bne.n	801314c <f_read+0x44>
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	7d5b      	ldrb	r3, [r3, #21]
 8013140:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013144:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013148:	2b00      	cmp	r3, #0
 801314a:	d002      	beq.n	8013152 <f_read+0x4a>
 801314c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013150:	e135      	b.n	80133be <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	7d1b      	ldrb	r3, [r3, #20]
 8013156:	f003 0301 	and.w	r3, r3, #1
 801315a:	2b00      	cmp	r3, #0
 801315c:	d101      	bne.n	8013162 <f_read+0x5a>
 801315e:	2307      	movs	r3, #7
 8013160:	e12d      	b.n	80133be <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	68da      	ldr	r2, [r3, #12]
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	699b      	ldr	r3, [r3, #24]
 801316a:	1ad3      	subs	r3, r2, r3
 801316c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801316e:	687a      	ldr	r2, [r7, #4]
 8013170:	6a3b      	ldr	r3, [r7, #32]
 8013172:	429a      	cmp	r2, r3
 8013174:	f240 811e 	bls.w	80133b4 <f_read+0x2ac>
 8013178:	6a3b      	ldr	r3, [r7, #32]
 801317a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801317c:	e11a      	b.n	80133b4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	699b      	ldr	r3, [r3, #24]
 8013182:	697a      	ldr	r2, [r7, #20]
 8013184:	8992      	ldrh	r2, [r2, #12]
 8013186:	fbb3 f1f2 	udiv	r1, r3, r2
 801318a:	fb02 f201 	mul.w	r2, r2, r1
 801318e:	1a9b      	subs	r3, r3, r2
 8013190:	2b00      	cmp	r3, #0
 8013192:	f040 80d5 	bne.w	8013340 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	699b      	ldr	r3, [r3, #24]
 801319a:	697a      	ldr	r2, [r7, #20]
 801319c:	8992      	ldrh	r2, [r2, #12]
 801319e:	fbb3 f3f2 	udiv	r3, r3, r2
 80131a2:	697a      	ldr	r2, [r7, #20]
 80131a4:	8952      	ldrh	r2, [r2, #10]
 80131a6:	3a01      	subs	r2, #1
 80131a8:	4013      	ands	r3, r2
 80131aa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80131ac:	69fb      	ldr	r3, [r7, #28]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d12f      	bne.n	8013212 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	699b      	ldr	r3, [r3, #24]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d103      	bne.n	80131c2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	689b      	ldr	r3, [r3, #8]
 80131be:	633b      	str	r3, [r7, #48]	; 0x30
 80131c0:	e013      	b.n	80131ea <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d007      	beq.n	80131da <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	699b      	ldr	r3, [r3, #24]
 80131ce:	4619      	mov	r1, r3
 80131d0:	68f8      	ldr	r0, [r7, #12]
 80131d2:	f7fe fdb0 	bl	8011d36 <clmt_clust>
 80131d6:	6338      	str	r0, [r7, #48]	; 0x30
 80131d8:	e007      	b.n	80131ea <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80131da:	68fa      	ldr	r2, [r7, #12]
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	69db      	ldr	r3, [r3, #28]
 80131e0:	4619      	mov	r1, r3
 80131e2:	4610      	mov	r0, r2
 80131e4:	f7fe fac3 	bl	801176e <get_fat>
 80131e8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80131ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ec:	2b01      	cmp	r3, #1
 80131ee:	d804      	bhi.n	80131fa <f_read+0xf2>
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	2202      	movs	r2, #2
 80131f4:	755a      	strb	r2, [r3, #21]
 80131f6:	2302      	movs	r3, #2
 80131f8:	e0e1      	b.n	80133be <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80131fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013200:	d104      	bne.n	801320c <f_read+0x104>
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	2201      	movs	r2, #1
 8013206:	755a      	strb	r2, [r3, #21]
 8013208:	2301      	movs	r3, #1
 801320a:	e0d8      	b.n	80133be <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013210:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013212:	697a      	ldr	r2, [r7, #20]
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	69db      	ldr	r3, [r3, #28]
 8013218:	4619      	mov	r1, r3
 801321a:	4610      	mov	r0, r2
 801321c:	f7fe fa88 	bl	8011730 <clust2sect>
 8013220:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013222:	69bb      	ldr	r3, [r7, #24]
 8013224:	2b00      	cmp	r3, #0
 8013226:	d104      	bne.n	8013232 <f_read+0x12a>
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	2202      	movs	r2, #2
 801322c:	755a      	strb	r2, [r3, #21]
 801322e:	2302      	movs	r3, #2
 8013230:	e0c5      	b.n	80133be <f_read+0x2b6>
			sect += csect;
 8013232:	69ba      	ldr	r2, [r7, #24]
 8013234:	69fb      	ldr	r3, [r7, #28]
 8013236:	4413      	add	r3, r2
 8013238:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801323a:	697b      	ldr	r3, [r7, #20]
 801323c:	899b      	ldrh	r3, [r3, #12]
 801323e:	461a      	mov	r2, r3
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	fbb3 f3f2 	udiv	r3, r3, r2
 8013246:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801324a:	2b00      	cmp	r3, #0
 801324c:	d041      	beq.n	80132d2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801324e:	69fa      	ldr	r2, [r7, #28]
 8013250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013252:	4413      	add	r3, r2
 8013254:	697a      	ldr	r2, [r7, #20]
 8013256:	8952      	ldrh	r2, [r2, #10]
 8013258:	4293      	cmp	r3, r2
 801325a:	d905      	bls.n	8013268 <f_read+0x160>
					cc = fs->csize - csect;
 801325c:	697b      	ldr	r3, [r7, #20]
 801325e:	895b      	ldrh	r3, [r3, #10]
 8013260:	461a      	mov	r2, r3
 8013262:	69fb      	ldr	r3, [r7, #28]
 8013264:	1ad3      	subs	r3, r2, r3
 8013266:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	7858      	ldrb	r0, [r3, #1]
 801326c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801326e:	69ba      	ldr	r2, [r7, #24]
 8013270:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013272:	f7fd feb1 	bl	8010fd8 <disk_read>
 8013276:	4603      	mov	r3, r0
 8013278:	2b00      	cmp	r3, #0
 801327a:	d004      	beq.n	8013286 <f_read+0x17e>
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	2201      	movs	r2, #1
 8013280:	755a      	strb	r2, [r3, #21]
 8013282:	2301      	movs	r3, #1
 8013284:	e09b      	b.n	80133be <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	7d1b      	ldrb	r3, [r3, #20]
 801328a:	b25b      	sxtb	r3, r3
 801328c:	2b00      	cmp	r3, #0
 801328e:	da18      	bge.n	80132c2 <f_read+0x1ba>
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	6a1a      	ldr	r2, [r3, #32]
 8013294:	69bb      	ldr	r3, [r7, #24]
 8013296:	1ad3      	subs	r3, r2, r3
 8013298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801329a:	429a      	cmp	r2, r3
 801329c:	d911      	bls.n	80132c2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	6a1a      	ldr	r2, [r3, #32]
 80132a2:	69bb      	ldr	r3, [r7, #24]
 80132a4:	1ad3      	subs	r3, r2, r3
 80132a6:	697a      	ldr	r2, [r7, #20]
 80132a8:	8992      	ldrh	r2, [r2, #12]
 80132aa:	fb02 f303 	mul.w	r3, r2, r3
 80132ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132b0:	18d0      	adds	r0, r2, r3
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	899b      	ldrh	r3, [r3, #12]
 80132bc:	461a      	mov	r2, r3
 80132be:	f7fd ff6b 	bl	8011198 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80132c2:	697b      	ldr	r3, [r7, #20]
 80132c4:	899b      	ldrh	r3, [r3, #12]
 80132c6:	461a      	mov	r2, r3
 80132c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ca:	fb02 f303 	mul.w	r3, r2, r3
 80132ce:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80132d0:	e05c      	b.n	801338c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	6a1b      	ldr	r3, [r3, #32]
 80132d6:	69ba      	ldr	r2, [r7, #24]
 80132d8:	429a      	cmp	r2, r3
 80132da:	d02e      	beq.n	801333a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	7d1b      	ldrb	r3, [r3, #20]
 80132e0:	b25b      	sxtb	r3, r3
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	da18      	bge.n	8013318 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80132e6:	697b      	ldr	r3, [r7, #20]
 80132e8:	7858      	ldrb	r0, [r3, #1]
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	6a1a      	ldr	r2, [r3, #32]
 80132f4:	2301      	movs	r3, #1
 80132f6:	f7fd fe8f 	bl	8011018 <disk_write>
 80132fa:	4603      	mov	r3, r0
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d004      	beq.n	801330a <f_read+0x202>
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	2201      	movs	r2, #1
 8013304:	755a      	strb	r2, [r3, #21]
 8013306:	2301      	movs	r3, #1
 8013308:	e059      	b.n	80133be <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	7d1b      	ldrb	r3, [r3, #20]
 801330e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013312:	b2da      	uxtb	r2, r3
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013318:	697b      	ldr	r3, [r7, #20]
 801331a:	7858      	ldrb	r0, [r3, #1]
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013322:	2301      	movs	r3, #1
 8013324:	69ba      	ldr	r2, [r7, #24]
 8013326:	f7fd fe57 	bl	8010fd8 <disk_read>
 801332a:	4603      	mov	r3, r0
 801332c:	2b00      	cmp	r3, #0
 801332e:	d004      	beq.n	801333a <f_read+0x232>
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	2201      	movs	r2, #1
 8013334:	755a      	strb	r2, [r3, #21]
 8013336:	2301      	movs	r3, #1
 8013338:	e041      	b.n	80133be <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	69ba      	ldr	r2, [r7, #24]
 801333e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013340:	697b      	ldr	r3, [r7, #20]
 8013342:	899b      	ldrh	r3, [r3, #12]
 8013344:	4618      	mov	r0, r3
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	699b      	ldr	r3, [r3, #24]
 801334a:	697a      	ldr	r2, [r7, #20]
 801334c:	8992      	ldrh	r2, [r2, #12]
 801334e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013352:	fb02 f201 	mul.w	r2, r2, r1
 8013356:	1a9b      	subs	r3, r3, r2
 8013358:	1ac3      	subs	r3, r0, r3
 801335a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801335c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	429a      	cmp	r2, r3
 8013362:	d901      	bls.n	8013368 <f_read+0x260>
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	699b      	ldr	r3, [r3, #24]
 8013372:	697a      	ldr	r2, [r7, #20]
 8013374:	8992      	ldrh	r2, [r2, #12]
 8013376:	fbb3 f0f2 	udiv	r0, r3, r2
 801337a:	fb02 f200 	mul.w	r2, r2, r0
 801337e:	1a9b      	subs	r3, r3, r2
 8013380:	440b      	add	r3, r1
 8013382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013384:	4619      	mov	r1, r3
 8013386:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013388:	f7fd ff06 	bl	8011198 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801338c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013390:	4413      	add	r3, r2
 8013392:	627b      	str	r3, [r7, #36]	; 0x24
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	699a      	ldr	r2, [r3, #24]
 8013398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801339a:	441a      	add	r2, r3
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	619a      	str	r2, [r3, #24]
 80133a0:	683b      	ldr	r3, [r7, #0]
 80133a2:	681a      	ldr	r2, [r3, #0]
 80133a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a6:	441a      	add	r2, r3
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	601a      	str	r2, [r3, #0]
 80133ac:	687a      	ldr	r2, [r7, #4]
 80133ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133b0:	1ad3      	subs	r3, r2, r3
 80133b2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	f47f aee1 	bne.w	801317e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80133bc:	2300      	movs	r3, #0
}
 80133be:	4618      	mov	r0, r3
 80133c0:	3738      	adds	r7, #56	; 0x38
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bd80      	pop	{r7, pc}

080133c6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80133c6:	b580      	push	{r7, lr}
 80133c8:	b08c      	sub	sp, #48	; 0x30
 80133ca:	af00      	add	r7, sp, #0
 80133cc:	60f8      	str	r0, [r7, #12]
 80133ce:	60b9      	str	r1, [r7, #8]
 80133d0:	607a      	str	r2, [r7, #4]
 80133d2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80133d4:	68bb      	ldr	r3, [r7, #8]
 80133d6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80133d8:	683b      	ldr	r3, [r7, #0]
 80133da:	2200      	movs	r2, #0
 80133dc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	f107 0210 	add.w	r2, r7, #16
 80133e4:	4611      	mov	r1, r2
 80133e6:	4618      	mov	r0, r3
 80133e8:	f7ff fc44 	bl	8012c74 <validate>
 80133ec:	4603      	mov	r3, r0
 80133ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80133f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d107      	bne.n	801340a <f_write+0x44>
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	7d5b      	ldrb	r3, [r3, #21]
 80133fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013402:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013406:	2b00      	cmp	r3, #0
 8013408:	d002      	beq.n	8013410 <f_write+0x4a>
 801340a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801340e:	e16a      	b.n	80136e6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	7d1b      	ldrb	r3, [r3, #20]
 8013414:	f003 0302 	and.w	r3, r3, #2
 8013418:	2b00      	cmp	r3, #0
 801341a:	d101      	bne.n	8013420 <f_write+0x5a>
 801341c:	2307      	movs	r3, #7
 801341e:	e162      	b.n	80136e6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	699a      	ldr	r2, [r3, #24]
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	441a      	add	r2, r3
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	699b      	ldr	r3, [r3, #24]
 801342c:	429a      	cmp	r2, r3
 801342e:	f080 814c 	bcs.w	80136ca <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	699b      	ldr	r3, [r3, #24]
 8013436:	43db      	mvns	r3, r3
 8013438:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801343a:	e146      	b.n	80136ca <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	699b      	ldr	r3, [r3, #24]
 8013440:	693a      	ldr	r2, [r7, #16]
 8013442:	8992      	ldrh	r2, [r2, #12]
 8013444:	fbb3 f1f2 	udiv	r1, r3, r2
 8013448:	fb02 f201 	mul.w	r2, r2, r1
 801344c:	1a9b      	subs	r3, r3, r2
 801344e:	2b00      	cmp	r3, #0
 8013450:	f040 80f1 	bne.w	8013636 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	699b      	ldr	r3, [r3, #24]
 8013458:	693a      	ldr	r2, [r7, #16]
 801345a:	8992      	ldrh	r2, [r2, #12]
 801345c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013460:	693a      	ldr	r2, [r7, #16]
 8013462:	8952      	ldrh	r2, [r2, #10]
 8013464:	3a01      	subs	r2, #1
 8013466:	4013      	ands	r3, r2
 8013468:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801346a:	69bb      	ldr	r3, [r7, #24]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d143      	bne.n	80134f8 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	699b      	ldr	r3, [r3, #24]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d10c      	bne.n	8013492 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	689b      	ldr	r3, [r3, #8]
 801347c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013480:	2b00      	cmp	r3, #0
 8013482:	d11a      	bne.n	80134ba <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	2100      	movs	r1, #0
 8013488:	4618      	mov	r0, r3
 801348a:	f7fe fbbc 	bl	8011c06 <create_chain>
 801348e:	62b8      	str	r0, [r7, #40]	; 0x28
 8013490:	e013      	b.n	80134ba <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013496:	2b00      	cmp	r3, #0
 8013498:	d007      	beq.n	80134aa <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	699b      	ldr	r3, [r3, #24]
 801349e:	4619      	mov	r1, r3
 80134a0:	68f8      	ldr	r0, [r7, #12]
 80134a2:	f7fe fc48 	bl	8011d36 <clmt_clust>
 80134a6:	62b8      	str	r0, [r7, #40]	; 0x28
 80134a8:	e007      	b.n	80134ba <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80134aa:	68fa      	ldr	r2, [r7, #12]
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	69db      	ldr	r3, [r3, #28]
 80134b0:	4619      	mov	r1, r3
 80134b2:	4610      	mov	r0, r2
 80134b4:	f7fe fba7 	bl	8011c06 <create_chain>
 80134b8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80134ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134bc:	2b00      	cmp	r3, #0
 80134be:	f000 8109 	beq.w	80136d4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80134c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134c4:	2b01      	cmp	r3, #1
 80134c6:	d104      	bne.n	80134d2 <f_write+0x10c>
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	2202      	movs	r2, #2
 80134cc:	755a      	strb	r2, [r3, #21]
 80134ce:	2302      	movs	r3, #2
 80134d0:	e109      	b.n	80136e6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80134d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134d8:	d104      	bne.n	80134e4 <f_write+0x11e>
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	2201      	movs	r2, #1
 80134de:	755a      	strb	r2, [r3, #21]
 80134e0:	2301      	movs	r3, #1
 80134e2:	e100      	b.n	80136e6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134e8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	689b      	ldr	r3, [r3, #8]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d102      	bne.n	80134f8 <f_write+0x132>
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134f6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	7d1b      	ldrb	r3, [r3, #20]
 80134fc:	b25b      	sxtb	r3, r3
 80134fe:	2b00      	cmp	r3, #0
 8013500:	da18      	bge.n	8013534 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013502:	693b      	ldr	r3, [r7, #16]
 8013504:	7858      	ldrb	r0, [r3, #1]
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	6a1a      	ldr	r2, [r3, #32]
 8013510:	2301      	movs	r3, #1
 8013512:	f7fd fd81 	bl	8011018 <disk_write>
 8013516:	4603      	mov	r3, r0
 8013518:	2b00      	cmp	r3, #0
 801351a:	d004      	beq.n	8013526 <f_write+0x160>
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	2201      	movs	r2, #1
 8013520:	755a      	strb	r2, [r3, #21]
 8013522:	2301      	movs	r3, #1
 8013524:	e0df      	b.n	80136e6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	7d1b      	ldrb	r3, [r3, #20]
 801352a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801352e:	b2da      	uxtb	r2, r3
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013534:	693a      	ldr	r2, [r7, #16]
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	69db      	ldr	r3, [r3, #28]
 801353a:	4619      	mov	r1, r3
 801353c:	4610      	mov	r0, r2
 801353e:	f7fe f8f7 	bl	8011730 <clust2sect>
 8013542:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013544:	697b      	ldr	r3, [r7, #20]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d104      	bne.n	8013554 <f_write+0x18e>
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	2202      	movs	r2, #2
 801354e:	755a      	strb	r2, [r3, #21]
 8013550:	2302      	movs	r3, #2
 8013552:	e0c8      	b.n	80136e6 <f_write+0x320>
			sect += csect;
 8013554:	697a      	ldr	r2, [r7, #20]
 8013556:	69bb      	ldr	r3, [r7, #24]
 8013558:	4413      	add	r3, r2
 801355a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801355c:	693b      	ldr	r3, [r7, #16]
 801355e:	899b      	ldrh	r3, [r3, #12]
 8013560:	461a      	mov	r2, r3
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	fbb3 f3f2 	udiv	r3, r3, r2
 8013568:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801356a:	6a3b      	ldr	r3, [r7, #32]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d043      	beq.n	80135f8 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013570:	69ba      	ldr	r2, [r7, #24]
 8013572:	6a3b      	ldr	r3, [r7, #32]
 8013574:	4413      	add	r3, r2
 8013576:	693a      	ldr	r2, [r7, #16]
 8013578:	8952      	ldrh	r2, [r2, #10]
 801357a:	4293      	cmp	r3, r2
 801357c:	d905      	bls.n	801358a <f_write+0x1c4>
					cc = fs->csize - csect;
 801357e:	693b      	ldr	r3, [r7, #16]
 8013580:	895b      	ldrh	r3, [r3, #10]
 8013582:	461a      	mov	r2, r3
 8013584:	69bb      	ldr	r3, [r7, #24]
 8013586:	1ad3      	subs	r3, r2, r3
 8013588:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801358a:	693b      	ldr	r3, [r7, #16]
 801358c:	7858      	ldrb	r0, [r3, #1]
 801358e:	6a3b      	ldr	r3, [r7, #32]
 8013590:	697a      	ldr	r2, [r7, #20]
 8013592:	69f9      	ldr	r1, [r7, #28]
 8013594:	f7fd fd40 	bl	8011018 <disk_write>
 8013598:	4603      	mov	r3, r0
 801359a:	2b00      	cmp	r3, #0
 801359c:	d004      	beq.n	80135a8 <f_write+0x1e2>
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	2201      	movs	r2, #1
 80135a2:	755a      	strb	r2, [r3, #21]
 80135a4:	2301      	movs	r3, #1
 80135a6:	e09e      	b.n	80136e6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	6a1a      	ldr	r2, [r3, #32]
 80135ac:	697b      	ldr	r3, [r7, #20]
 80135ae:	1ad3      	subs	r3, r2, r3
 80135b0:	6a3a      	ldr	r2, [r7, #32]
 80135b2:	429a      	cmp	r2, r3
 80135b4:	d918      	bls.n	80135e8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	6a1a      	ldr	r2, [r3, #32]
 80135c0:	697b      	ldr	r3, [r7, #20]
 80135c2:	1ad3      	subs	r3, r2, r3
 80135c4:	693a      	ldr	r2, [r7, #16]
 80135c6:	8992      	ldrh	r2, [r2, #12]
 80135c8:	fb02 f303 	mul.w	r3, r2, r3
 80135cc:	69fa      	ldr	r2, [r7, #28]
 80135ce:	18d1      	adds	r1, r2, r3
 80135d0:	693b      	ldr	r3, [r7, #16]
 80135d2:	899b      	ldrh	r3, [r3, #12]
 80135d4:	461a      	mov	r2, r3
 80135d6:	f7fd fddf 	bl	8011198 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	7d1b      	ldrb	r3, [r3, #20]
 80135de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80135e2:	b2da      	uxtb	r2, r3
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80135e8:	693b      	ldr	r3, [r7, #16]
 80135ea:	899b      	ldrh	r3, [r3, #12]
 80135ec:	461a      	mov	r2, r3
 80135ee:	6a3b      	ldr	r3, [r7, #32]
 80135f0:	fb02 f303 	mul.w	r3, r2, r3
 80135f4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80135f6:	e04b      	b.n	8013690 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	6a1b      	ldr	r3, [r3, #32]
 80135fc:	697a      	ldr	r2, [r7, #20]
 80135fe:	429a      	cmp	r2, r3
 8013600:	d016      	beq.n	8013630 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	699a      	ldr	r2, [r3, #24]
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801360a:	429a      	cmp	r2, r3
 801360c:	d210      	bcs.n	8013630 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801360e:	693b      	ldr	r3, [r7, #16]
 8013610:	7858      	ldrb	r0, [r3, #1]
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013618:	2301      	movs	r3, #1
 801361a:	697a      	ldr	r2, [r7, #20]
 801361c:	f7fd fcdc 	bl	8010fd8 <disk_read>
 8013620:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013622:	2b00      	cmp	r3, #0
 8013624:	d004      	beq.n	8013630 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	2201      	movs	r2, #1
 801362a:	755a      	strb	r2, [r3, #21]
 801362c:	2301      	movs	r3, #1
 801362e:	e05a      	b.n	80136e6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	697a      	ldr	r2, [r7, #20]
 8013634:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013636:	693b      	ldr	r3, [r7, #16]
 8013638:	899b      	ldrh	r3, [r3, #12]
 801363a:	4618      	mov	r0, r3
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	699b      	ldr	r3, [r3, #24]
 8013640:	693a      	ldr	r2, [r7, #16]
 8013642:	8992      	ldrh	r2, [r2, #12]
 8013644:	fbb3 f1f2 	udiv	r1, r3, r2
 8013648:	fb02 f201 	mul.w	r2, r2, r1
 801364c:	1a9b      	subs	r3, r3, r2
 801364e:	1ac3      	subs	r3, r0, r3
 8013650:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	429a      	cmp	r2, r3
 8013658:	d901      	bls.n	801365e <f_write+0x298>
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	699b      	ldr	r3, [r3, #24]
 8013668:	693a      	ldr	r2, [r7, #16]
 801366a:	8992      	ldrh	r2, [r2, #12]
 801366c:	fbb3 f0f2 	udiv	r0, r3, r2
 8013670:	fb02 f200 	mul.w	r2, r2, r0
 8013674:	1a9b      	subs	r3, r3, r2
 8013676:	440b      	add	r3, r1
 8013678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801367a:	69f9      	ldr	r1, [r7, #28]
 801367c:	4618      	mov	r0, r3
 801367e:	f7fd fd8b 	bl	8011198 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	7d1b      	ldrb	r3, [r3, #20]
 8013686:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801368a:	b2da      	uxtb	r2, r3
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013690:	69fa      	ldr	r2, [r7, #28]
 8013692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013694:	4413      	add	r3, r2
 8013696:	61fb      	str	r3, [r7, #28]
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	699a      	ldr	r2, [r3, #24]
 801369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801369e:	441a      	add	r2, r3
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	619a      	str	r2, [r3, #24]
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	68da      	ldr	r2, [r3, #12]
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	699b      	ldr	r3, [r3, #24]
 80136ac:	429a      	cmp	r2, r3
 80136ae:	bf38      	it	cc
 80136b0:	461a      	movcc	r2, r3
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	60da      	str	r2, [r3, #12]
 80136b6:	683b      	ldr	r3, [r7, #0]
 80136b8:	681a      	ldr	r2, [r3, #0]
 80136ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136bc:	441a      	add	r2, r3
 80136be:	683b      	ldr	r3, [r7, #0]
 80136c0:	601a      	str	r2, [r3, #0]
 80136c2:	687a      	ldr	r2, [r7, #4]
 80136c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136c6:	1ad3      	subs	r3, r2, r3
 80136c8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	f47f aeb5 	bne.w	801343c <f_write+0x76>
 80136d2:	e000      	b.n	80136d6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80136d4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	7d1b      	ldrb	r3, [r3, #20]
 80136da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80136de:	b2da      	uxtb	r2, r3
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80136e4:	2300      	movs	r3, #0
}
 80136e6:	4618      	mov	r0, r3
 80136e8:	3730      	adds	r7, #48	; 0x30
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}
	...

080136f0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b086      	sub	sp, #24
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	f107 0208 	add.w	r2, r7, #8
 80136fe:	4611      	mov	r1, r2
 8013700:	4618      	mov	r0, r3
 8013702:	f7ff fab7 	bl	8012c74 <validate>
 8013706:	4603      	mov	r3, r0
 8013708:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801370a:	7dfb      	ldrb	r3, [r7, #23]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d167      	bne.n	80137e0 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	7d1b      	ldrb	r3, [r3, #20]
 8013714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013718:	2b00      	cmp	r3, #0
 801371a:	d061      	beq.n	80137e0 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	7d1b      	ldrb	r3, [r3, #20]
 8013720:	b25b      	sxtb	r3, r3
 8013722:	2b00      	cmp	r3, #0
 8013724:	da15      	bge.n	8013752 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013726:	68bb      	ldr	r3, [r7, #8]
 8013728:	7858      	ldrb	r0, [r3, #1]
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	6a1a      	ldr	r2, [r3, #32]
 8013734:	2301      	movs	r3, #1
 8013736:	f7fd fc6f 	bl	8011018 <disk_write>
 801373a:	4603      	mov	r3, r0
 801373c:	2b00      	cmp	r3, #0
 801373e:	d001      	beq.n	8013744 <f_sync+0x54>
 8013740:	2301      	movs	r3, #1
 8013742:	e04e      	b.n	80137e2 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	7d1b      	ldrb	r3, [r3, #20]
 8013748:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801374c:	b2da      	uxtb	r2, r3
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013752:	4b26      	ldr	r3, [pc, #152]	; (80137ec <f_sync+0xfc>)
 8013754:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013756:	68ba      	ldr	r2, [r7, #8]
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801375c:	4619      	mov	r1, r3
 801375e:	4610      	mov	r0, r2
 8013760:	f7fd ff48 	bl	80115f4 <move_window>
 8013764:	4603      	mov	r3, r0
 8013766:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013768:	7dfb      	ldrb	r3, [r7, #23]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d138      	bne.n	80137e0 <f_sync+0xf0>
					dir = fp->dir_ptr;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013772:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	330b      	adds	r3, #11
 8013778:	781a      	ldrb	r2, [r3, #0]
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	330b      	adds	r3, #11
 801377e:	f042 0220 	orr.w	r2, r2, #32
 8013782:	b2d2      	uxtb	r2, r2
 8013784:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	6818      	ldr	r0, [r3, #0]
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	689b      	ldr	r3, [r3, #8]
 801378e:	461a      	mov	r2, r3
 8013790:	68f9      	ldr	r1, [r7, #12]
 8013792:	f7fe fccd 	bl	8012130 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	f103 021c 	add.w	r2, r3, #28
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	68db      	ldr	r3, [r3, #12]
 80137a0:	4619      	mov	r1, r3
 80137a2:	4610      	mov	r0, r2
 80137a4:	f7fd fccc 	bl	8011140 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	3316      	adds	r3, #22
 80137ac:	6939      	ldr	r1, [r7, #16]
 80137ae:	4618      	mov	r0, r3
 80137b0:	f7fd fcc6 	bl	8011140 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	3312      	adds	r3, #18
 80137b8:	2100      	movs	r1, #0
 80137ba:	4618      	mov	r0, r3
 80137bc:	f7fd fca5 	bl	801110a <st_word>
					fs->wflag = 1;
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	2201      	movs	r2, #1
 80137c4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80137c6:	68bb      	ldr	r3, [r7, #8]
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7fd ff41 	bl	8011650 <sync_fs>
 80137ce:	4603      	mov	r3, r0
 80137d0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	7d1b      	ldrb	r3, [r3, #20]
 80137d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80137da:	b2da      	uxtb	r2, r3
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80137e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80137e2:	4618      	mov	r0, r3
 80137e4:	3718      	adds	r7, #24
 80137e6:	46bd      	mov	sp, r7
 80137e8:	bd80      	pop	{r7, pc}
 80137ea:	bf00      	nop
 80137ec:	274a0000 	.word	0x274a0000

080137f0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b084      	sub	sp, #16
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80137f8:	6878      	ldr	r0, [r7, #4]
 80137fa:	f7ff ff79 	bl	80136f0 <f_sync>
 80137fe:	4603      	mov	r3, r0
 8013800:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013802:	7bfb      	ldrb	r3, [r7, #15]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d118      	bne.n	801383a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	f107 0208 	add.w	r2, r7, #8
 801380e:	4611      	mov	r1, r2
 8013810:	4618      	mov	r0, r3
 8013812:	f7ff fa2f 	bl	8012c74 <validate>
 8013816:	4603      	mov	r3, r0
 8013818:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801381a:	7bfb      	ldrb	r3, [r7, #15]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d10c      	bne.n	801383a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	691b      	ldr	r3, [r3, #16]
 8013824:	4618      	mov	r0, r3
 8013826:	f7fd fe41 	bl	80114ac <dec_lock>
 801382a:	4603      	mov	r3, r0
 801382c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801382e:	7bfb      	ldrb	r3, [r7, #15]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d102      	bne.n	801383a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2200      	movs	r2, #0
 8013838:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801383a:	7bfb      	ldrb	r3, [r7, #15]
}
 801383c:	4618      	mov	r0, r3
 801383e:	3710      	adds	r7, #16
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}

08013844 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013844:	b590      	push	{r4, r7, lr}
 8013846:	b091      	sub	sp, #68	; 0x44
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801384c:	f107 0108 	add.w	r1, r7, #8
 8013850:	1d3b      	adds	r3, r7, #4
 8013852:	2200      	movs	r2, #0
 8013854:	4618      	mov	r0, r3
 8013856:	f7fe ff87 	bl	8012768 <find_volume>
 801385a:	4603      	mov	r3, r0
 801385c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013860:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013864:	2b00      	cmp	r3, #0
 8013866:	d131      	bne.n	80138cc <f_chdir+0x88>
		dj.obj.fs = fs;
 8013868:	68bb      	ldr	r3, [r7, #8]
 801386a:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 801386c:	687a      	ldr	r2, [r7, #4]
 801386e:	f107 030c 	add.w	r3, r7, #12
 8013872:	4611      	mov	r1, r2
 8013874:	4618      	mov	r0, r3
 8013876:	f7fe fe47 	bl	8012508 <follow_path>
 801387a:	4603      	mov	r3, r0
 801387c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013880:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013884:	2b00      	cmp	r3, #0
 8013886:	d11a      	bne.n	80138be <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013888:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801388c:	b25b      	sxtb	r3, r3
 801388e:	2b00      	cmp	r3, #0
 8013890:	da03      	bge.n	801389a <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013892:	68bb      	ldr	r3, [r7, #8]
 8013894:	697a      	ldr	r2, [r7, #20]
 8013896:	619a      	str	r2, [r3, #24]
 8013898:	e011      	b.n	80138be <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 801389a:	7cbb      	ldrb	r3, [r7, #18]
 801389c:	f003 0310 	and.w	r3, r3, #16
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d009      	beq.n	80138b8 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80138a4:	68bb      	ldr	r3, [r7, #8]
 80138a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138a8:	68bc      	ldr	r4, [r7, #8]
 80138aa:	4611      	mov	r1, r2
 80138ac:	4618      	mov	r0, r3
 80138ae:	f7fe fc20 	bl	80120f2 <ld_clust>
 80138b2:	4603      	mov	r3, r0
 80138b4:	61a3      	str	r3, [r4, #24]
 80138b6:	e002      	b.n	80138be <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80138b8:	2305      	movs	r3, #5
 80138ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80138be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80138c2:	2b04      	cmp	r3, #4
 80138c4:	d102      	bne.n	80138cc <f_chdir+0x88>
 80138c6:	2305      	movs	r3, #5
 80138c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 80138cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80138d0:	4618      	mov	r0, r3
 80138d2:	3744      	adds	r7, #68	; 0x44
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd90      	pop	{r4, r7, pc}

080138d8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b090      	sub	sp, #64	; 0x40
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
 80138e0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	f107 0208 	add.w	r2, r7, #8
 80138e8:	4611      	mov	r1, r2
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7ff f9c2 	bl	8012c74 <validate>
 80138f0:	4603      	mov	r3, r0
 80138f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80138f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d103      	bne.n	8013906 <f_lseek+0x2e>
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	7d5b      	ldrb	r3, [r3, #21]
 8013902:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013906:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801390a:	2b00      	cmp	r3, #0
 801390c:	d002      	beq.n	8013914 <f_lseek+0x3c>
 801390e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013912:	e201      	b.n	8013d18 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013918:	2b00      	cmp	r3, #0
 801391a:	f000 80d9 	beq.w	8013ad0 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013924:	d15a      	bne.n	80139dc <f_lseek+0x104>
			tbl = fp->cltbl;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801392a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801392e:	1d1a      	adds	r2, r3, #4
 8013930:	627a      	str	r2, [r7, #36]	; 0x24
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	617b      	str	r3, [r7, #20]
 8013936:	2302      	movs	r3, #2
 8013938:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	689b      	ldr	r3, [r3, #8]
 801393e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013942:	2b00      	cmp	r3, #0
 8013944:	d03a      	beq.n	80139bc <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013948:	613b      	str	r3, [r7, #16]
 801394a:	2300      	movs	r3, #0
 801394c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013950:	3302      	adds	r3, #2
 8013952:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013956:	60fb      	str	r3, [r7, #12]
 8013958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801395a:	3301      	adds	r3, #1
 801395c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013962:	4618      	mov	r0, r3
 8013964:	f7fd ff03 	bl	801176e <get_fat>
 8013968:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396c:	2b01      	cmp	r3, #1
 801396e:	d804      	bhi.n	801397a <f_lseek+0xa2>
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	2202      	movs	r2, #2
 8013974:	755a      	strb	r2, [r3, #21]
 8013976:	2302      	movs	r3, #2
 8013978:	e1ce      	b.n	8013d18 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013980:	d104      	bne.n	801398c <f_lseek+0xb4>
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	2201      	movs	r2, #1
 8013986:	755a      	strb	r2, [r3, #21]
 8013988:	2301      	movs	r3, #1
 801398a:	e1c5      	b.n	8013d18 <f_lseek+0x440>
					} while (cl == pcl + 1);
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	3301      	adds	r3, #1
 8013990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013992:	429a      	cmp	r2, r3
 8013994:	d0de      	beq.n	8013954 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013998:	697b      	ldr	r3, [r7, #20]
 801399a:	429a      	cmp	r2, r3
 801399c:	d809      	bhi.n	80139b2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139a0:	1d1a      	adds	r2, r3, #4
 80139a2:	627a      	str	r2, [r7, #36]	; 0x24
 80139a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139a6:	601a      	str	r2, [r3, #0]
 80139a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139aa:	1d1a      	adds	r2, r3, #4
 80139ac:	627a      	str	r2, [r7, #36]	; 0x24
 80139ae:	693a      	ldr	r2, [r7, #16]
 80139b0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	69db      	ldr	r3, [r3, #28]
 80139b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139b8:	429a      	cmp	r2, r3
 80139ba:	d3c4      	bcc.n	8013946 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139c2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80139c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	429a      	cmp	r2, r3
 80139ca:	d803      	bhi.n	80139d4 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80139cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ce:	2200      	movs	r2, #0
 80139d0:	601a      	str	r2, [r3, #0]
 80139d2:	e19f      	b.n	8013d14 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80139d4:	2311      	movs	r3, #17
 80139d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80139da:	e19b      	b.n	8013d14 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	68db      	ldr	r3, [r3, #12]
 80139e0:	683a      	ldr	r2, [r7, #0]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d902      	bls.n	80139ec <f_lseek+0x114>
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	68db      	ldr	r3, [r3, #12]
 80139ea:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	683a      	ldr	r2, [r7, #0]
 80139f0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	f000 818d 	beq.w	8013d14 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80139fa:	683b      	ldr	r3, [r7, #0]
 80139fc:	3b01      	subs	r3, #1
 80139fe:	4619      	mov	r1, r3
 8013a00:	6878      	ldr	r0, [r7, #4]
 8013a02:	f7fe f998 	bl	8011d36 <clmt_clust>
 8013a06:	4602      	mov	r2, r0
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013a0c:	68ba      	ldr	r2, [r7, #8]
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	69db      	ldr	r3, [r3, #28]
 8013a12:	4619      	mov	r1, r3
 8013a14:	4610      	mov	r0, r2
 8013a16:	f7fd fe8b 	bl	8011730 <clust2sect>
 8013a1a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013a1c:	69bb      	ldr	r3, [r7, #24]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d104      	bne.n	8013a2c <f_lseek+0x154>
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	2202      	movs	r2, #2
 8013a26:	755a      	strb	r2, [r3, #21]
 8013a28:	2302      	movs	r3, #2
 8013a2a:	e175      	b.n	8013d18 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013a2c:	683b      	ldr	r3, [r7, #0]
 8013a2e:	3b01      	subs	r3, #1
 8013a30:	68ba      	ldr	r2, [r7, #8]
 8013a32:	8992      	ldrh	r2, [r2, #12]
 8013a34:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a38:	68ba      	ldr	r2, [r7, #8]
 8013a3a:	8952      	ldrh	r2, [r2, #10]
 8013a3c:	3a01      	subs	r2, #1
 8013a3e:	4013      	ands	r3, r2
 8013a40:	69ba      	ldr	r2, [r7, #24]
 8013a42:	4413      	add	r3, r2
 8013a44:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	699b      	ldr	r3, [r3, #24]
 8013a4a:	68ba      	ldr	r2, [r7, #8]
 8013a4c:	8992      	ldrh	r2, [r2, #12]
 8013a4e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a52:	fb02 f201 	mul.w	r2, r2, r1
 8013a56:	1a9b      	subs	r3, r3, r2
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	f000 815b 	beq.w	8013d14 <f_lseek+0x43c>
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	6a1b      	ldr	r3, [r3, #32]
 8013a62:	69ba      	ldr	r2, [r7, #24]
 8013a64:	429a      	cmp	r2, r3
 8013a66:	f000 8155 	beq.w	8013d14 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	7d1b      	ldrb	r3, [r3, #20]
 8013a6e:	b25b      	sxtb	r3, r3
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	da18      	bge.n	8013aa6 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a74:	68bb      	ldr	r3, [r7, #8]
 8013a76:	7858      	ldrb	r0, [r3, #1]
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	6a1a      	ldr	r2, [r3, #32]
 8013a82:	2301      	movs	r3, #1
 8013a84:	f7fd fac8 	bl	8011018 <disk_write>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d004      	beq.n	8013a98 <f_lseek+0x1c0>
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	2201      	movs	r2, #1
 8013a92:	755a      	strb	r2, [r3, #21]
 8013a94:	2301      	movs	r3, #1
 8013a96:	e13f      	b.n	8013d18 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	7d1b      	ldrb	r3, [r3, #20]
 8013a9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013aa0:	b2da      	uxtb	r2, r3
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013aa6:	68bb      	ldr	r3, [r7, #8]
 8013aa8:	7858      	ldrb	r0, [r3, #1]
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	69ba      	ldr	r2, [r7, #24]
 8013ab4:	f7fd fa90 	bl	8010fd8 <disk_read>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d004      	beq.n	8013ac8 <f_lseek+0x1f0>
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2201      	movs	r2, #1
 8013ac2:	755a      	strb	r2, [r3, #21]
 8013ac4:	2301      	movs	r3, #1
 8013ac6:	e127      	b.n	8013d18 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	69ba      	ldr	r2, [r7, #24]
 8013acc:	621a      	str	r2, [r3, #32]
 8013ace:	e121      	b.n	8013d14 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	68db      	ldr	r3, [r3, #12]
 8013ad4:	683a      	ldr	r2, [r7, #0]
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	d908      	bls.n	8013aec <f_lseek+0x214>
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	7d1b      	ldrb	r3, [r3, #20]
 8013ade:	f003 0302 	and.w	r3, r3, #2
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d102      	bne.n	8013aec <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	68db      	ldr	r3, [r3, #12]
 8013aea:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	699b      	ldr	r3, [r3, #24]
 8013af0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013af2:	2300      	movs	r3, #0
 8013af4:	637b      	str	r3, [r7, #52]	; 0x34
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013afa:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013afc:	683b      	ldr	r3, [r7, #0]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	f000 80b5 	beq.w	8013c6e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	895b      	ldrh	r3, [r3, #10]
 8013b08:	461a      	mov	r2, r3
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	899b      	ldrh	r3, [r3, #12]
 8013b0e:	fb03 f302 	mul.w	r3, r3, r2
 8013b12:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013b14:	6a3b      	ldr	r3, [r7, #32]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d01b      	beq.n	8013b52 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013b1a:	683b      	ldr	r3, [r7, #0]
 8013b1c:	1e5a      	subs	r2, r3, #1
 8013b1e:	69fb      	ldr	r3, [r7, #28]
 8013b20:	fbb2 f2f3 	udiv	r2, r2, r3
 8013b24:	6a3b      	ldr	r3, [r7, #32]
 8013b26:	1e59      	subs	r1, r3, #1
 8013b28:	69fb      	ldr	r3, [r7, #28]
 8013b2a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d30f      	bcc.n	8013b52 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013b32:	6a3b      	ldr	r3, [r7, #32]
 8013b34:	1e5a      	subs	r2, r3, #1
 8013b36:	69fb      	ldr	r3, [r7, #28]
 8013b38:	425b      	negs	r3, r3
 8013b3a:	401a      	ands	r2, r3
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	699b      	ldr	r3, [r3, #24]
 8013b44:	683a      	ldr	r2, [r7, #0]
 8013b46:	1ad3      	subs	r3, r2, r3
 8013b48:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	69db      	ldr	r3, [r3, #28]
 8013b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013b50:	e022      	b.n	8013b98 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	689b      	ldr	r3, [r3, #8]
 8013b56:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d119      	bne.n	8013b92 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2100      	movs	r1, #0
 8013b62:	4618      	mov	r0, r3
 8013b64:	f7fe f84f 	bl	8011c06 <create_chain>
 8013b68:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b6c:	2b01      	cmp	r3, #1
 8013b6e:	d104      	bne.n	8013b7a <f_lseek+0x2a2>
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	2202      	movs	r2, #2
 8013b74:	755a      	strb	r2, [r3, #21]
 8013b76:	2302      	movs	r3, #2
 8013b78:	e0ce      	b.n	8013d18 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b80:	d104      	bne.n	8013b8c <f_lseek+0x2b4>
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	2201      	movs	r2, #1
 8013b86:	755a      	strb	r2, [r3, #21]
 8013b88:	2301      	movs	r3, #1
 8013b8a:	e0c5      	b.n	8013d18 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b90:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b96:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d067      	beq.n	8013c6e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013b9e:	e03a      	b.n	8013c16 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013ba0:	683a      	ldr	r2, [r7, #0]
 8013ba2:	69fb      	ldr	r3, [r7, #28]
 8013ba4:	1ad3      	subs	r3, r2, r3
 8013ba6:	603b      	str	r3, [r7, #0]
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	699a      	ldr	r2, [r3, #24]
 8013bac:	69fb      	ldr	r3, [r7, #28]
 8013bae:	441a      	add	r2, r3
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	7d1b      	ldrb	r3, [r3, #20]
 8013bb8:	f003 0302 	and.w	r3, r3, #2
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d00b      	beq.n	8013bd8 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f7fe f81e 	bl	8011c06 <create_chain>
 8013bca:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d108      	bne.n	8013be4 <f_lseek+0x30c>
							ofs = 0; break;
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	603b      	str	r3, [r7, #0]
 8013bd6:	e022      	b.n	8013c1e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f7fd fdc6 	bl	801176e <get_fat>
 8013be2:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bea:	d104      	bne.n	8013bf6 <f_lseek+0x31e>
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2201      	movs	r2, #1
 8013bf0:	755a      	strb	r2, [r3, #21]
 8013bf2:	2301      	movs	r3, #1
 8013bf4:	e090      	b.n	8013d18 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bf8:	2b01      	cmp	r3, #1
 8013bfa:	d904      	bls.n	8013c06 <f_lseek+0x32e>
 8013bfc:	68bb      	ldr	r3, [r7, #8]
 8013bfe:	69db      	ldr	r3, [r3, #28]
 8013c00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013c02:	429a      	cmp	r2, r3
 8013c04:	d304      	bcc.n	8013c10 <f_lseek+0x338>
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	2202      	movs	r2, #2
 8013c0a:	755a      	strb	r2, [r3, #21]
 8013c0c:	2302      	movs	r3, #2
 8013c0e:	e083      	b.n	8013d18 <f_lseek+0x440>
					fp->clust = clst;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013c14:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013c16:	683a      	ldr	r2, [r7, #0]
 8013c18:	69fb      	ldr	r3, [r7, #28]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d8c0      	bhi.n	8013ba0 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	699a      	ldr	r2, [r3, #24]
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	441a      	add	r2, r3
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013c2a:	68bb      	ldr	r3, [r7, #8]
 8013c2c:	899b      	ldrh	r3, [r3, #12]
 8013c2e:	461a      	mov	r2, r3
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c36:	fb02 f201 	mul.w	r2, r2, r1
 8013c3a:	1a9b      	subs	r3, r3, r2
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d016      	beq.n	8013c6e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013c40:	68bb      	ldr	r3, [r7, #8]
 8013c42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013c44:	4618      	mov	r0, r3
 8013c46:	f7fd fd73 	bl	8011730 <clust2sect>
 8013c4a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d104      	bne.n	8013c5c <f_lseek+0x384>
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	2202      	movs	r2, #2
 8013c56:	755a      	strb	r2, [r3, #21]
 8013c58:	2302      	movs	r3, #2
 8013c5a:	e05d      	b.n	8013d18 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	899b      	ldrh	r3, [r3, #12]
 8013c60:	461a      	mov	r2, r3
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c6a:	4413      	add	r3, r2
 8013c6c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	699a      	ldr	r2, [r3, #24]
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	68db      	ldr	r3, [r3, #12]
 8013c76:	429a      	cmp	r2, r3
 8013c78:	d90a      	bls.n	8013c90 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	699a      	ldr	r2, [r3, #24]
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	7d1b      	ldrb	r3, [r3, #20]
 8013c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c8a:	b2da      	uxtb	r2, r3
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	699b      	ldr	r3, [r3, #24]
 8013c94:	68ba      	ldr	r2, [r7, #8]
 8013c96:	8992      	ldrh	r2, [r2, #12]
 8013c98:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c9c:	fb02 f201 	mul.w	r2, r2, r1
 8013ca0:	1a9b      	subs	r3, r3, r2
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d036      	beq.n	8013d14 <f_lseek+0x43c>
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	6a1b      	ldr	r3, [r3, #32]
 8013caa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013cac:	429a      	cmp	r2, r3
 8013cae:	d031      	beq.n	8013d14 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	7d1b      	ldrb	r3, [r3, #20]
 8013cb4:	b25b      	sxtb	r3, r3
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	da18      	bge.n	8013cec <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	7858      	ldrb	r0, [r3, #1]
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	6a1a      	ldr	r2, [r3, #32]
 8013cc8:	2301      	movs	r3, #1
 8013cca:	f7fd f9a5 	bl	8011018 <disk_write>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d004      	beq.n	8013cde <f_lseek+0x406>
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	2201      	movs	r2, #1
 8013cd8:	755a      	strb	r2, [r3, #21]
 8013cda:	2301      	movs	r3, #1
 8013cdc:	e01c      	b.n	8013d18 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	7d1b      	ldrb	r3, [r3, #20]
 8013ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ce6:	b2da      	uxtb	r2, r3
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013cec:	68bb      	ldr	r3, [r7, #8]
 8013cee:	7858      	ldrb	r0, [r3, #1]
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013cfa:	f7fd f96d 	bl	8010fd8 <disk_read>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d004      	beq.n	8013d0e <f_lseek+0x436>
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	2201      	movs	r2, #1
 8013d08:	755a      	strb	r2, [r3, #21]
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	e004      	b.n	8013d18 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d12:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013d14:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013d18:	4618      	mov	r0, r3
 8013d1a:	3740      	adds	r7, #64	; 0x40
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}

08013d20 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	b09e      	sub	sp, #120	; 0x78
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013d28:	2300      	movs	r3, #0
 8013d2a:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013d2c:	f107 010c 	add.w	r1, r7, #12
 8013d30:	1d3b      	adds	r3, r7, #4
 8013d32:	2202      	movs	r2, #2
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7fe fd17 	bl	8012768 <find_volume>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013d44:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	f040 80a4 	bne.w	8013e96 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013d4e:	687a      	ldr	r2, [r7, #4]
 8013d50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013d54:	4611      	mov	r1, r2
 8013d56:	4618      	mov	r0, r3
 8013d58:	f7fe fbd6 	bl	8012508 <follow_path>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8013d62:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d108      	bne.n	8013d7c <f_unlink+0x5c>
 8013d6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013d6e:	f003 0320 	and.w	r3, r3, #32
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d002      	beq.n	8013d7c <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013d76:	2306      	movs	r3, #6
 8013d78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013d7c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d108      	bne.n	8013d96 <f_unlink+0x76>
 8013d84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013d88:	2102      	movs	r1, #2
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7fd fa82 	bl	8011294 <chk_lock>
 8013d90:	4603      	mov	r3, r0
 8013d92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013d96:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d17b      	bne.n	8013e96 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013d9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013da2:	b25b      	sxtb	r3, r3
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	da03      	bge.n	8013db0 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013da8:	2306      	movs	r3, #6
 8013daa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013dae:	e008      	b.n	8013dc2 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013db0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013db4:	f003 0301 	and.w	r3, r3, #1
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d002      	beq.n	8013dc2 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013dbc:	2307      	movs	r3, #7
 8013dbe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013dc2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d13d      	bne.n	8013e46 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013dce:	4611      	mov	r1, r2
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	f7fe f98e 	bl	80120f2 <ld_clust>
 8013dd6:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013dd8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013ddc:	f003 0310 	and.w	r3, r3, #16
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d030      	beq.n	8013e46 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	699b      	ldr	r3, [r3, #24]
 8013de8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013dea:	429a      	cmp	r2, r3
 8013dec:	d103      	bne.n	8013df6 <f_unlink+0xd6>
						res = FR_DENIED;
 8013dee:	2307      	movs	r3, #7
 8013df0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013df4:	e027      	b.n	8013e46 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013dfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013dfc:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013dfe:	f107 0310 	add.w	r3, r7, #16
 8013e02:	2100      	movs	r1, #0
 8013e04:	4618      	mov	r0, r3
 8013e06:	f7fd ffce 	bl	8011da6 <dir_sdi>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013e10:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d116      	bne.n	8013e46 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013e18:	f107 0310 	add.w	r3, r7, #16
 8013e1c:	2100      	movs	r1, #0
 8013e1e:	4618      	mov	r0, r3
 8013e20:	f7fe f9a6 	bl	8012170 <dir_read>
 8013e24:	4603      	mov	r3, r0
 8013e26:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013e2a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d102      	bne.n	8013e38 <f_unlink+0x118>
 8013e32:	2307      	movs	r3, #7
 8013e34:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013e38:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013e3c:	2b04      	cmp	r3, #4
 8013e3e:	d102      	bne.n	8013e46 <f_unlink+0x126>
 8013e40:	2300      	movs	r3, #0
 8013e42:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013e46:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d123      	bne.n	8013e96 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013e4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013e52:	4618      	mov	r0, r3
 8013e54:	f7fe fa70 	bl	8012338 <dir_remove>
 8013e58:	4603      	mov	r3, r0
 8013e5a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013e5e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d10c      	bne.n	8013e80 <f_unlink+0x160>
 8013e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d009      	beq.n	8013e80 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013e6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013e70:	2200      	movs	r2, #0
 8013e72:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013e74:	4618      	mov	r0, r3
 8013e76:	f7fd fe61 	bl	8011b3c <remove_chain>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013e80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d106      	bne.n	8013e96 <f_unlink+0x176>
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7fd fbe0 	bl	8011650 <sync_fs>
 8013e90:	4603      	mov	r3, r0
 8013e92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013e96:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	3778      	adds	r7, #120	; 0x78
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	bd80      	pop	{r7, pc}
	...

08013ea4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b096      	sub	sp, #88	; 0x58
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013eac:	f107 0108 	add.w	r1, r7, #8
 8013eb0:	1d3b      	adds	r3, r7, #4
 8013eb2:	2202      	movs	r2, #2
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7fe fc57 	bl	8012768 <find_volume>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013ec4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	f040 80fe 	bne.w	80140ca <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013ece:	687a      	ldr	r2, [r7, #4]
 8013ed0:	f107 030c 	add.w	r3, r7, #12
 8013ed4:	4611      	mov	r1, r2
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	f7fe fb16 	bl	8012508 <follow_path>
 8013edc:	4603      	mov	r3, r0
 8013ede:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8013ee2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d102      	bne.n	8013ef0 <f_mkdir+0x4c>
 8013eea:	2308      	movs	r3, #8
 8013eec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8013ef0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ef4:	2b04      	cmp	r3, #4
 8013ef6:	d108      	bne.n	8013f0a <f_mkdir+0x66>
 8013ef8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013efc:	f003 0320 	and.w	r3, r3, #32
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d002      	beq.n	8013f0a <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8013f04:	2306      	movs	r3, #6
 8013f06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013f0a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f0e:	2b04      	cmp	r3, #4
 8013f10:	f040 80db 	bne.w	80140ca <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013f14:	f107 030c 	add.w	r3, r7, #12
 8013f18:	2100      	movs	r1, #0
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	f7fd fe73 	bl	8011c06 <create_chain>
 8013f20:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013f22:	68bb      	ldr	r3, [r7, #8]
 8013f24:	895b      	ldrh	r3, [r3, #10]
 8013f26:	461a      	mov	r2, r3
 8013f28:	68bb      	ldr	r3, [r7, #8]
 8013f2a:	899b      	ldrh	r3, [r3, #12]
 8013f2c:	fb03 f302 	mul.w	r3, r3, r2
 8013f30:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8013f32:	2300      	movs	r3, #0
 8013f34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d102      	bne.n	8013f44 <f_mkdir+0xa0>
 8013f3e:	2307      	movs	r3, #7
 8013f40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f46:	2b01      	cmp	r3, #1
 8013f48:	d102      	bne.n	8013f50 <f_mkdir+0xac>
 8013f4a:	2302      	movs	r3, #2
 8013f4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f56:	d102      	bne.n	8013f5e <f_mkdir+0xba>
 8013f58:	2301      	movs	r3, #1
 8013f5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013f5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d106      	bne.n	8013f74 <f_mkdir+0xd0>
 8013f66:	68bb      	ldr	r3, [r7, #8]
 8013f68:	4618      	mov	r0, r3
 8013f6a:	f7fd faff 	bl	801156c <sync_window>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8013f74:	4b58      	ldr	r3, [pc, #352]	; (80140d8 <f_mkdir+0x234>)
 8013f76:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013f78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d16c      	bne.n	801405a <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8013f80:	68bb      	ldr	r3, [r7, #8]
 8013f82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7fd fbd3 	bl	8011730 <clust2sect>
 8013f8a:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013f8c:	68bb      	ldr	r3, [r7, #8]
 8013f8e:	3338      	adds	r3, #56	; 0x38
 8013f90:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8013f92:	68bb      	ldr	r3, [r7, #8]
 8013f94:	899b      	ldrh	r3, [r3, #12]
 8013f96:	461a      	mov	r2, r3
 8013f98:	2100      	movs	r1, #0
 8013f9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013f9c:	f7fd f91d 	bl	80111da <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013fa0:	220b      	movs	r2, #11
 8013fa2:	2120      	movs	r1, #32
 8013fa4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013fa6:	f7fd f918 	bl	80111da <mem_set>
					dir[DIR_Name] = '.';
 8013faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fac:	222e      	movs	r2, #46	; 0x2e
 8013fae:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fb2:	330b      	adds	r3, #11
 8013fb4:	2210      	movs	r2, #16
 8013fb6:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fba:	3316      	adds	r3, #22
 8013fbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f7fd f8be 	bl	8011140 <st_dword>
					st_clust(fs, dir, dcl);
 8013fc4:	68bb      	ldr	r3, [r7, #8]
 8013fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013fc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f7fe f8b0 	bl	8012130 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fd2:	3320      	adds	r3, #32
 8013fd4:	2220      	movs	r2, #32
 8013fd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013fd8:	4618      	mov	r0, r3
 8013fda:	f7fd f8dd 	bl	8011198 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fe0:	3321      	adds	r3, #33	; 0x21
 8013fe2:	222e      	movs	r2, #46	; 0x2e
 8013fe4:	701a      	strb	r2, [r3, #0]
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013fea:	68bb      	ldr	r3, [r7, #8]
 8013fec:	781b      	ldrb	r3, [r3, #0]
 8013fee:	2b03      	cmp	r3, #3
 8013ff0:	d106      	bne.n	8014000 <f_mkdir+0x15c>
 8013ff2:	68bb      	ldr	r3, [r7, #8]
 8013ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d101      	bne.n	8014000 <f_mkdir+0x15c>
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8014000:	68b8      	ldr	r0, [r7, #8]
 8014002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014004:	3320      	adds	r3, #32
 8014006:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014008:	4619      	mov	r1, r3
 801400a:	f7fe f891 	bl	8012130 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801400e:	68bb      	ldr	r3, [r7, #8]
 8014010:	895b      	ldrh	r3, [r3, #10]
 8014012:	653b      	str	r3, [r7, #80]	; 0x50
 8014014:	e01c      	b.n	8014050 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8014016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014018:	1c5a      	adds	r2, r3, #1
 801401a:	64fa      	str	r2, [r7, #76]	; 0x4c
 801401c:	68ba      	ldr	r2, [r7, #8]
 801401e:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8014020:	68bb      	ldr	r3, [r7, #8]
 8014022:	2201      	movs	r2, #1
 8014024:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8014026:	68bb      	ldr	r3, [r7, #8]
 8014028:	4618      	mov	r0, r3
 801402a:	f7fd fa9f 	bl	801156c <sync_window>
 801402e:	4603      	mov	r3, r0
 8014030:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014034:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014038:	2b00      	cmp	r3, #0
 801403a:	d10d      	bne.n	8014058 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 801403c:	68bb      	ldr	r3, [r7, #8]
 801403e:	899b      	ldrh	r3, [r3, #12]
 8014040:	461a      	mov	r2, r3
 8014042:	2100      	movs	r1, #0
 8014044:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014046:	f7fd f8c8 	bl	80111da <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801404a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801404c:	3b01      	subs	r3, #1
 801404e:	653b      	str	r3, [r7, #80]	; 0x50
 8014050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014052:	2b00      	cmp	r3, #0
 8014054:	d1df      	bne.n	8014016 <f_mkdir+0x172>
 8014056:	e000      	b.n	801405a <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8014058:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801405a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801405e:	2b00      	cmp	r3, #0
 8014060:	d107      	bne.n	8014072 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014062:	f107 030c 	add.w	r3, r7, #12
 8014066:	4618      	mov	r0, r3
 8014068:	f7fe f934 	bl	80122d4 <dir_register>
 801406c:	4603      	mov	r3, r0
 801406e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8014072:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014076:	2b00      	cmp	r3, #0
 8014078:	d120      	bne.n	80140bc <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801407a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801407c:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801407e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014080:	3316      	adds	r3, #22
 8014082:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014084:	4618      	mov	r0, r3
 8014086:	f7fd f85b 	bl	8011140 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801408a:	68bb      	ldr	r3, [r7, #8]
 801408c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801408e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014090:	4618      	mov	r0, r3
 8014092:	f7fe f84d 	bl	8012130 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8014096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014098:	330b      	adds	r3, #11
 801409a:	2210      	movs	r2, #16
 801409c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	2201      	movs	r2, #1
 80140a2:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80140a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d10e      	bne.n	80140ca <f_mkdir+0x226>
					res = sync_fs(fs);
 80140ac:	68bb      	ldr	r3, [r7, #8]
 80140ae:	4618      	mov	r0, r3
 80140b0:	f7fd face 	bl	8011650 <sync_fs>
 80140b4:	4603      	mov	r3, r0
 80140b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80140ba:	e006      	b.n	80140ca <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80140bc:	f107 030c 	add.w	r3, r7, #12
 80140c0:	2200      	movs	r2, #0
 80140c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80140c4:	4618      	mov	r0, r3
 80140c6:	f7fd fd39 	bl	8011b3c <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80140ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80140ce:	4618      	mov	r0, r3
 80140d0:	3758      	adds	r7, #88	; 0x58
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bd80      	pop	{r7, pc}
 80140d6:	bf00      	nop
 80140d8:	274a0000 	.word	0x274a0000

080140dc <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b088      	sub	sp, #32
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	60f8      	str	r0, [r7, #12]
 80140e4:	60b9      	str	r1, [r7, #8]
 80140e6:	607a      	str	r2, [r7, #4]
	int n = 0;
 80140e8:	2300      	movs	r3, #0
 80140ea:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80140f0:	e017      	b.n	8014122 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80140f2:	f107 0310 	add.w	r3, r7, #16
 80140f6:	f107 0114 	add.w	r1, r7, #20
 80140fa:	2201      	movs	r2, #1
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f7ff f803 	bl	8013108 <f_read>
		if (rc != 1) break;
 8014102:	693b      	ldr	r3, [r7, #16]
 8014104:	2b01      	cmp	r3, #1
 8014106:	d112      	bne.n	801412e <f_gets+0x52>
		c = s[0];
 8014108:	7d3b      	ldrb	r3, [r7, #20]
 801410a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 801410c:	69bb      	ldr	r3, [r7, #24]
 801410e:	1c5a      	adds	r2, r3, #1
 8014110:	61ba      	str	r2, [r7, #24]
 8014112:	7dfa      	ldrb	r2, [r7, #23]
 8014114:	701a      	strb	r2, [r3, #0]
		n++;
 8014116:	69fb      	ldr	r3, [r7, #28]
 8014118:	3301      	adds	r3, #1
 801411a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 801411c:	7dfb      	ldrb	r3, [r7, #23]
 801411e:	2b0a      	cmp	r3, #10
 8014120:	d007      	beq.n	8014132 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014122:	68bb      	ldr	r3, [r7, #8]
 8014124:	3b01      	subs	r3, #1
 8014126:	69fa      	ldr	r2, [r7, #28]
 8014128:	429a      	cmp	r2, r3
 801412a:	dbe2      	blt.n	80140f2 <f_gets+0x16>
 801412c:	e002      	b.n	8014134 <f_gets+0x58>
		if (rc != 1) break;
 801412e:	bf00      	nop
 8014130:	e000      	b.n	8014134 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8014132:	bf00      	nop
	}
	*p = 0;
 8014134:	69bb      	ldr	r3, [r7, #24]
 8014136:	2200      	movs	r2, #0
 8014138:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801413a:	69fb      	ldr	r3, [r7, #28]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d001      	beq.n	8014144 <f_gets+0x68>
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	e000      	b.n	8014146 <f_gets+0x6a>
 8014144:	2300      	movs	r3, #0
}
 8014146:	4618      	mov	r0, r3
 8014148:	3720      	adds	r7, #32
 801414a:	46bd      	mov	sp, r7
 801414c:	bd80      	pop	{r7, pc}
	...

08014150 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014150:	b480      	push	{r7}
 8014152:	b087      	sub	sp, #28
 8014154:	af00      	add	r7, sp, #0
 8014156:	60f8      	str	r0, [r7, #12]
 8014158:	60b9      	str	r1, [r7, #8]
 801415a:	4613      	mov	r3, r2
 801415c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801415e:	2301      	movs	r3, #1
 8014160:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014162:	2300      	movs	r3, #0
 8014164:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014166:	4b1f      	ldr	r3, [pc, #124]	; (80141e4 <FATFS_LinkDriverEx+0x94>)
 8014168:	7a5b      	ldrb	r3, [r3, #9]
 801416a:	b2db      	uxtb	r3, r3
 801416c:	2b00      	cmp	r3, #0
 801416e:	d131      	bne.n	80141d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014170:	4b1c      	ldr	r3, [pc, #112]	; (80141e4 <FATFS_LinkDriverEx+0x94>)
 8014172:	7a5b      	ldrb	r3, [r3, #9]
 8014174:	b2db      	uxtb	r3, r3
 8014176:	461a      	mov	r2, r3
 8014178:	4b1a      	ldr	r3, [pc, #104]	; (80141e4 <FATFS_LinkDriverEx+0x94>)
 801417a:	2100      	movs	r1, #0
 801417c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801417e:	4b19      	ldr	r3, [pc, #100]	; (80141e4 <FATFS_LinkDriverEx+0x94>)
 8014180:	7a5b      	ldrb	r3, [r3, #9]
 8014182:	b2db      	uxtb	r3, r3
 8014184:	4a17      	ldr	r2, [pc, #92]	; (80141e4 <FATFS_LinkDriverEx+0x94>)
 8014186:	009b      	lsls	r3, r3, #2
 8014188:	4413      	add	r3, r2
 801418a:	68fa      	ldr	r2, [r7, #12]
 801418c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801418e:	4b15      	ldr	r3, [pc, #84]	; (80141e4 <FATFS_LinkDriverEx+0x94>)
 8014190:	7a5b      	ldrb	r3, [r3, #9]
 8014192:	b2db      	uxtb	r3, r3
 8014194:	461a      	mov	r2, r3
 8014196:	4b13      	ldr	r3, [pc, #76]	; (80141e4 <FATFS_LinkDriverEx+0x94>)
 8014198:	4413      	add	r3, r2
 801419a:	79fa      	ldrb	r2, [r7, #7]
 801419c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801419e:	4b11      	ldr	r3, [pc, #68]	; (80141e4 <FATFS_LinkDriverEx+0x94>)
 80141a0:	7a5b      	ldrb	r3, [r3, #9]
 80141a2:	b2db      	uxtb	r3, r3
 80141a4:	1c5a      	adds	r2, r3, #1
 80141a6:	b2d1      	uxtb	r1, r2
 80141a8:	4a0e      	ldr	r2, [pc, #56]	; (80141e4 <FATFS_LinkDriverEx+0x94>)
 80141aa:	7251      	strb	r1, [r2, #9]
 80141ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80141ae:	7dbb      	ldrb	r3, [r7, #22]
 80141b0:	3330      	adds	r3, #48	; 0x30
 80141b2:	b2da      	uxtb	r2, r3
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80141b8:	68bb      	ldr	r3, [r7, #8]
 80141ba:	3301      	adds	r3, #1
 80141bc:	223a      	movs	r2, #58	; 0x3a
 80141be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80141c0:	68bb      	ldr	r3, [r7, #8]
 80141c2:	3302      	adds	r3, #2
 80141c4:	222f      	movs	r2, #47	; 0x2f
 80141c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80141c8:	68bb      	ldr	r3, [r7, #8]
 80141ca:	3303      	adds	r3, #3
 80141cc:	2200      	movs	r2, #0
 80141ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80141d0:	2300      	movs	r3, #0
 80141d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80141d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80141d6:	4618      	mov	r0, r3
 80141d8:	371c      	adds	r7, #28
 80141da:	46bd      	mov	sp, r7
 80141dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e0:	4770      	bx	lr
 80141e2:	bf00      	nop
 80141e4:	20042308 	.word	0x20042308

080141e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b082      	sub	sp, #8
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
 80141f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80141f2:	2200      	movs	r2, #0
 80141f4:	6839      	ldr	r1, [r7, #0]
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f7ff ffaa 	bl	8014150 <FATFS_LinkDriverEx>
 80141fc:	4603      	mov	r3, r0
}
 80141fe:	4618      	mov	r0, r3
 8014200:	3708      	adds	r7, #8
 8014202:	46bd      	mov	sp, r7
 8014204:	bd80      	pop	{r7, pc}

08014206 <__cxa_guard_acquire>:
 8014206:	6803      	ldr	r3, [r0, #0]
 8014208:	07db      	lsls	r3, r3, #31
 801420a:	d406      	bmi.n	801421a <__cxa_guard_acquire+0x14>
 801420c:	7843      	ldrb	r3, [r0, #1]
 801420e:	b103      	cbz	r3, 8014212 <__cxa_guard_acquire+0xc>
 8014210:	deff      	udf	#255	; 0xff
 8014212:	2301      	movs	r3, #1
 8014214:	7043      	strb	r3, [r0, #1]
 8014216:	4618      	mov	r0, r3
 8014218:	4770      	bx	lr
 801421a:	2000      	movs	r0, #0
 801421c:	4770      	bx	lr

0801421e <__cxa_guard_release>:
 801421e:	2301      	movs	r3, #1
 8014220:	6003      	str	r3, [r0, #0]
 8014222:	4770      	bx	lr
 8014224:	0000      	movs	r0, r0
	...

08014228 <cos>:
 8014228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801422a:	ec51 0b10 	vmov	r0, r1, d0
 801422e:	4a1e      	ldr	r2, [pc, #120]	; (80142a8 <cos+0x80>)
 8014230:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014234:	4293      	cmp	r3, r2
 8014236:	dc06      	bgt.n	8014246 <cos+0x1e>
 8014238:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80142a0 <cos+0x78>
 801423c:	f000 fa74 	bl	8014728 <__kernel_cos>
 8014240:	ec51 0b10 	vmov	r0, r1, d0
 8014244:	e007      	b.n	8014256 <cos+0x2e>
 8014246:	4a19      	ldr	r2, [pc, #100]	; (80142ac <cos+0x84>)
 8014248:	4293      	cmp	r3, r2
 801424a:	dd09      	ble.n	8014260 <cos+0x38>
 801424c:	ee10 2a10 	vmov	r2, s0
 8014250:	460b      	mov	r3, r1
 8014252:	f7ec f831 	bl	80002b8 <__aeabi_dsub>
 8014256:	ec41 0b10 	vmov	d0, r0, r1
 801425a:	b005      	add	sp, #20
 801425c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014260:	4668      	mov	r0, sp
 8014262:	f000 f86d 	bl	8014340 <__ieee754_rem_pio2>
 8014266:	f000 0003 	and.w	r0, r0, #3
 801426a:	2801      	cmp	r0, #1
 801426c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014270:	ed9d 0b00 	vldr	d0, [sp]
 8014274:	d007      	beq.n	8014286 <cos+0x5e>
 8014276:	2802      	cmp	r0, #2
 8014278:	d00e      	beq.n	8014298 <cos+0x70>
 801427a:	2800      	cmp	r0, #0
 801427c:	d0de      	beq.n	801423c <cos+0x14>
 801427e:	2001      	movs	r0, #1
 8014280:	f000 fe5a 	bl	8014f38 <__kernel_sin>
 8014284:	e7dc      	b.n	8014240 <cos+0x18>
 8014286:	f000 fe57 	bl	8014f38 <__kernel_sin>
 801428a:	ec53 2b10 	vmov	r2, r3, d0
 801428e:	ee10 0a10 	vmov	r0, s0
 8014292:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014296:	e7de      	b.n	8014256 <cos+0x2e>
 8014298:	f000 fa46 	bl	8014728 <__kernel_cos>
 801429c:	e7f5      	b.n	801428a <cos+0x62>
 801429e:	bf00      	nop
	...
 80142a8:	3fe921fb 	.word	0x3fe921fb
 80142ac:	7fefffff 	.word	0x7fefffff

080142b0 <sin>:
 80142b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80142b2:	ec51 0b10 	vmov	r0, r1, d0
 80142b6:	4a20      	ldr	r2, [pc, #128]	; (8014338 <sin+0x88>)
 80142b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80142bc:	4293      	cmp	r3, r2
 80142be:	dc07      	bgt.n	80142d0 <sin+0x20>
 80142c0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014330 <sin+0x80>
 80142c4:	2000      	movs	r0, #0
 80142c6:	f000 fe37 	bl	8014f38 <__kernel_sin>
 80142ca:	ec51 0b10 	vmov	r0, r1, d0
 80142ce:	e007      	b.n	80142e0 <sin+0x30>
 80142d0:	4a1a      	ldr	r2, [pc, #104]	; (801433c <sin+0x8c>)
 80142d2:	4293      	cmp	r3, r2
 80142d4:	dd09      	ble.n	80142ea <sin+0x3a>
 80142d6:	ee10 2a10 	vmov	r2, s0
 80142da:	460b      	mov	r3, r1
 80142dc:	f7eb ffec 	bl	80002b8 <__aeabi_dsub>
 80142e0:	ec41 0b10 	vmov	d0, r0, r1
 80142e4:	b005      	add	sp, #20
 80142e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80142ea:	4668      	mov	r0, sp
 80142ec:	f000 f828 	bl	8014340 <__ieee754_rem_pio2>
 80142f0:	f000 0003 	and.w	r0, r0, #3
 80142f4:	2801      	cmp	r0, #1
 80142f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80142fa:	ed9d 0b00 	vldr	d0, [sp]
 80142fe:	d004      	beq.n	801430a <sin+0x5a>
 8014300:	2802      	cmp	r0, #2
 8014302:	d005      	beq.n	8014310 <sin+0x60>
 8014304:	b970      	cbnz	r0, 8014324 <sin+0x74>
 8014306:	2001      	movs	r0, #1
 8014308:	e7dd      	b.n	80142c6 <sin+0x16>
 801430a:	f000 fa0d 	bl	8014728 <__kernel_cos>
 801430e:	e7dc      	b.n	80142ca <sin+0x1a>
 8014310:	2001      	movs	r0, #1
 8014312:	f000 fe11 	bl	8014f38 <__kernel_sin>
 8014316:	ec53 2b10 	vmov	r2, r3, d0
 801431a:	ee10 0a10 	vmov	r0, s0
 801431e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014322:	e7dd      	b.n	80142e0 <sin+0x30>
 8014324:	f000 fa00 	bl	8014728 <__kernel_cos>
 8014328:	e7f5      	b.n	8014316 <sin+0x66>
 801432a:	bf00      	nop
 801432c:	f3af 8000 	nop.w
	...
 8014338:	3fe921fb 	.word	0x3fe921fb
 801433c:	7fefffff 	.word	0x7fefffff

08014340 <__ieee754_rem_pio2>:
 8014340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014344:	ec57 6b10 	vmov	r6, r7, d0
 8014348:	4bc3      	ldr	r3, [pc, #780]	; (8014658 <__ieee754_rem_pio2+0x318>)
 801434a:	b08d      	sub	sp, #52	; 0x34
 801434c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014350:	4598      	cmp	r8, r3
 8014352:	4604      	mov	r4, r0
 8014354:	9704      	str	r7, [sp, #16]
 8014356:	dc07      	bgt.n	8014368 <__ieee754_rem_pio2+0x28>
 8014358:	2200      	movs	r2, #0
 801435a:	2300      	movs	r3, #0
 801435c:	ed84 0b00 	vstr	d0, [r4]
 8014360:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014364:	2500      	movs	r5, #0
 8014366:	e027      	b.n	80143b8 <__ieee754_rem_pio2+0x78>
 8014368:	4bbc      	ldr	r3, [pc, #752]	; (801465c <__ieee754_rem_pio2+0x31c>)
 801436a:	4598      	cmp	r8, r3
 801436c:	dc75      	bgt.n	801445a <__ieee754_rem_pio2+0x11a>
 801436e:	9b04      	ldr	r3, [sp, #16]
 8014370:	4dbb      	ldr	r5, [pc, #748]	; (8014660 <__ieee754_rem_pio2+0x320>)
 8014372:	2b00      	cmp	r3, #0
 8014374:	ee10 0a10 	vmov	r0, s0
 8014378:	a3a9      	add	r3, pc, #676	; (adr r3, 8014620 <__ieee754_rem_pio2+0x2e0>)
 801437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801437e:	4639      	mov	r1, r7
 8014380:	dd36      	ble.n	80143f0 <__ieee754_rem_pio2+0xb0>
 8014382:	f7eb ff99 	bl	80002b8 <__aeabi_dsub>
 8014386:	45a8      	cmp	r8, r5
 8014388:	4606      	mov	r6, r0
 801438a:	460f      	mov	r7, r1
 801438c:	d018      	beq.n	80143c0 <__ieee754_rem_pio2+0x80>
 801438e:	a3a6      	add	r3, pc, #664	; (adr r3, 8014628 <__ieee754_rem_pio2+0x2e8>)
 8014390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014394:	f7eb ff90 	bl	80002b8 <__aeabi_dsub>
 8014398:	4602      	mov	r2, r0
 801439a:	460b      	mov	r3, r1
 801439c:	e9c4 2300 	strd	r2, r3, [r4]
 80143a0:	4630      	mov	r0, r6
 80143a2:	4639      	mov	r1, r7
 80143a4:	f7eb ff88 	bl	80002b8 <__aeabi_dsub>
 80143a8:	a39f      	add	r3, pc, #636	; (adr r3, 8014628 <__ieee754_rem_pio2+0x2e8>)
 80143aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ae:	f7eb ff83 	bl	80002b8 <__aeabi_dsub>
 80143b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80143b6:	2501      	movs	r5, #1
 80143b8:	4628      	mov	r0, r5
 80143ba:	b00d      	add	sp, #52	; 0x34
 80143bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143c0:	a39b      	add	r3, pc, #620	; (adr r3, 8014630 <__ieee754_rem_pio2+0x2f0>)
 80143c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c6:	f7eb ff77 	bl	80002b8 <__aeabi_dsub>
 80143ca:	a39b      	add	r3, pc, #620	; (adr r3, 8014638 <__ieee754_rem_pio2+0x2f8>)
 80143cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143d0:	4606      	mov	r6, r0
 80143d2:	460f      	mov	r7, r1
 80143d4:	f7eb ff70 	bl	80002b8 <__aeabi_dsub>
 80143d8:	4602      	mov	r2, r0
 80143da:	460b      	mov	r3, r1
 80143dc:	e9c4 2300 	strd	r2, r3, [r4]
 80143e0:	4630      	mov	r0, r6
 80143e2:	4639      	mov	r1, r7
 80143e4:	f7eb ff68 	bl	80002b8 <__aeabi_dsub>
 80143e8:	a393      	add	r3, pc, #588	; (adr r3, 8014638 <__ieee754_rem_pio2+0x2f8>)
 80143ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ee:	e7de      	b.n	80143ae <__ieee754_rem_pio2+0x6e>
 80143f0:	f7eb ff64 	bl	80002bc <__adddf3>
 80143f4:	45a8      	cmp	r8, r5
 80143f6:	4606      	mov	r6, r0
 80143f8:	460f      	mov	r7, r1
 80143fa:	d016      	beq.n	801442a <__ieee754_rem_pio2+0xea>
 80143fc:	a38a      	add	r3, pc, #552	; (adr r3, 8014628 <__ieee754_rem_pio2+0x2e8>)
 80143fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014402:	f7eb ff5b 	bl	80002bc <__adddf3>
 8014406:	4602      	mov	r2, r0
 8014408:	460b      	mov	r3, r1
 801440a:	e9c4 2300 	strd	r2, r3, [r4]
 801440e:	4630      	mov	r0, r6
 8014410:	4639      	mov	r1, r7
 8014412:	f7eb ff51 	bl	80002b8 <__aeabi_dsub>
 8014416:	a384      	add	r3, pc, #528	; (adr r3, 8014628 <__ieee754_rem_pio2+0x2e8>)
 8014418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801441c:	f7eb ff4e 	bl	80002bc <__adddf3>
 8014420:	f04f 35ff 	mov.w	r5, #4294967295
 8014424:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014428:	e7c6      	b.n	80143b8 <__ieee754_rem_pio2+0x78>
 801442a:	a381      	add	r3, pc, #516	; (adr r3, 8014630 <__ieee754_rem_pio2+0x2f0>)
 801442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014430:	f7eb ff44 	bl	80002bc <__adddf3>
 8014434:	a380      	add	r3, pc, #512	; (adr r3, 8014638 <__ieee754_rem_pio2+0x2f8>)
 8014436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801443a:	4606      	mov	r6, r0
 801443c:	460f      	mov	r7, r1
 801443e:	f7eb ff3d 	bl	80002bc <__adddf3>
 8014442:	4602      	mov	r2, r0
 8014444:	460b      	mov	r3, r1
 8014446:	e9c4 2300 	strd	r2, r3, [r4]
 801444a:	4630      	mov	r0, r6
 801444c:	4639      	mov	r1, r7
 801444e:	f7eb ff33 	bl	80002b8 <__aeabi_dsub>
 8014452:	a379      	add	r3, pc, #484	; (adr r3, 8014638 <__ieee754_rem_pio2+0x2f8>)
 8014454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014458:	e7e0      	b.n	801441c <__ieee754_rem_pio2+0xdc>
 801445a:	4b82      	ldr	r3, [pc, #520]	; (8014664 <__ieee754_rem_pio2+0x324>)
 801445c:	4598      	cmp	r8, r3
 801445e:	f300 80d0 	bgt.w	8014602 <__ieee754_rem_pio2+0x2c2>
 8014462:	f000 fe23 	bl	80150ac <fabs>
 8014466:	ec57 6b10 	vmov	r6, r7, d0
 801446a:	ee10 0a10 	vmov	r0, s0
 801446e:	a374      	add	r3, pc, #464	; (adr r3, 8014640 <__ieee754_rem_pio2+0x300>)
 8014470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014474:	4639      	mov	r1, r7
 8014476:	f7ec f8d7 	bl	8000628 <__aeabi_dmul>
 801447a:	2200      	movs	r2, #0
 801447c:	4b7a      	ldr	r3, [pc, #488]	; (8014668 <__ieee754_rem_pio2+0x328>)
 801447e:	f7eb ff1d 	bl	80002bc <__adddf3>
 8014482:	f7ec fb81 	bl	8000b88 <__aeabi_d2iz>
 8014486:	4605      	mov	r5, r0
 8014488:	f7ec f864 	bl	8000554 <__aeabi_i2d>
 801448c:	a364      	add	r3, pc, #400	; (adr r3, 8014620 <__ieee754_rem_pio2+0x2e0>)
 801448e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014492:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014496:	f7ec f8c7 	bl	8000628 <__aeabi_dmul>
 801449a:	4602      	mov	r2, r0
 801449c:	460b      	mov	r3, r1
 801449e:	4630      	mov	r0, r6
 80144a0:	4639      	mov	r1, r7
 80144a2:	f7eb ff09 	bl	80002b8 <__aeabi_dsub>
 80144a6:	a360      	add	r3, pc, #384	; (adr r3, 8014628 <__ieee754_rem_pio2+0x2e8>)
 80144a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ac:	4682      	mov	sl, r0
 80144ae:	468b      	mov	fp, r1
 80144b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144b4:	f7ec f8b8 	bl	8000628 <__aeabi_dmul>
 80144b8:	2d1f      	cmp	r5, #31
 80144ba:	4606      	mov	r6, r0
 80144bc:	460f      	mov	r7, r1
 80144be:	dc0c      	bgt.n	80144da <__ieee754_rem_pio2+0x19a>
 80144c0:	1e6a      	subs	r2, r5, #1
 80144c2:	4b6a      	ldr	r3, [pc, #424]	; (801466c <__ieee754_rem_pio2+0x32c>)
 80144c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144c8:	4543      	cmp	r3, r8
 80144ca:	d006      	beq.n	80144da <__ieee754_rem_pio2+0x19a>
 80144cc:	4632      	mov	r2, r6
 80144ce:	463b      	mov	r3, r7
 80144d0:	4650      	mov	r0, sl
 80144d2:	4659      	mov	r1, fp
 80144d4:	f7eb fef0 	bl	80002b8 <__aeabi_dsub>
 80144d8:	e00e      	b.n	80144f8 <__ieee754_rem_pio2+0x1b8>
 80144da:	4632      	mov	r2, r6
 80144dc:	463b      	mov	r3, r7
 80144de:	4650      	mov	r0, sl
 80144e0:	4659      	mov	r1, fp
 80144e2:	f7eb fee9 	bl	80002b8 <__aeabi_dsub>
 80144e6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80144ea:	9305      	str	r3, [sp, #20]
 80144ec:	9a05      	ldr	r2, [sp, #20]
 80144ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80144f2:	1ad3      	subs	r3, r2, r3
 80144f4:	2b10      	cmp	r3, #16
 80144f6:	dc02      	bgt.n	80144fe <__ieee754_rem_pio2+0x1be>
 80144f8:	e9c4 0100 	strd	r0, r1, [r4]
 80144fc:	e039      	b.n	8014572 <__ieee754_rem_pio2+0x232>
 80144fe:	a34c      	add	r3, pc, #304	; (adr r3, 8014630 <__ieee754_rem_pio2+0x2f0>)
 8014500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014504:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014508:	f7ec f88e 	bl	8000628 <__aeabi_dmul>
 801450c:	4606      	mov	r6, r0
 801450e:	460f      	mov	r7, r1
 8014510:	4602      	mov	r2, r0
 8014512:	460b      	mov	r3, r1
 8014514:	4650      	mov	r0, sl
 8014516:	4659      	mov	r1, fp
 8014518:	f7eb fece 	bl	80002b8 <__aeabi_dsub>
 801451c:	4602      	mov	r2, r0
 801451e:	460b      	mov	r3, r1
 8014520:	4680      	mov	r8, r0
 8014522:	4689      	mov	r9, r1
 8014524:	4650      	mov	r0, sl
 8014526:	4659      	mov	r1, fp
 8014528:	f7eb fec6 	bl	80002b8 <__aeabi_dsub>
 801452c:	4632      	mov	r2, r6
 801452e:	463b      	mov	r3, r7
 8014530:	f7eb fec2 	bl	80002b8 <__aeabi_dsub>
 8014534:	a340      	add	r3, pc, #256	; (adr r3, 8014638 <__ieee754_rem_pio2+0x2f8>)
 8014536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453a:	4606      	mov	r6, r0
 801453c:	460f      	mov	r7, r1
 801453e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014542:	f7ec f871 	bl	8000628 <__aeabi_dmul>
 8014546:	4632      	mov	r2, r6
 8014548:	463b      	mov	r3, r7
 801454a:	f7eb feb5 	bl	80002b8 <__aeabi_dsub>
 801454e:	4602      	mov	r2, r0
 8014550:	460b      	mov	r3, r1
 8014552:	4606      	mov	r6, r0
 8014554:	460f      	mov	r7, r1
 8014556:	4640      	mov	r0, r8
 8014558:	4649      	mov	r1, r9
 801455a:	f7eb fead 	bl	80002b8 <__aeabi_dsub>
 801455e:	9a05      	ldr	r2, [sp, #20]
 8014560:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014564:	1ad3      	subs	r3, r2, r3
 8014566:	2b31      	cmp	r3, #49	; 0x31
 8014568:	dc20      	bgt.n	80145ac <__ieee754_rem_pio2+0x26c>
 801456a:	e9c4 0100 	strd	r0, r1, [r4]
 801456e:	46c2      	mov	sl, r8
 8014570:	46cb      	mov	fp, r9
 8014572:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014576:	4650      	mov	r0, sl
 8014578:	4642      	mov	r2, r8
 801457a:	464b      	mov	r3, r9
 801457c:	4659      	mov	r1, fp
 801457e:	f7eb fe9b 	bl	80002b8 <__aeabi_dsub>
 8014582:	463b      	mov	r3, r7
 8014584:	4632      	mov	r2, r6
 8014586:	f7eb fe97 	bl	80002b8 <__aeabi_dsub>
 801458a:	9b04      	ldr	r3, [sp, #16]
 801458c:	2b00      	cmp	r3, #0
 801458e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014592:	f6bf af11 	bge.w	80143b8 <__ieee754_rem_pio2+0x78>
 8014596:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801459a:	6063      	str	r3, [r4, #4]
 801459c:	f8c4 8000 	str.w	r8, [r4]
 80145a0:	60a0      	str	r0, [r4, #8]
 80145a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80145a6:	60e3      	str	r3, [r4, #12]
 80145a8:	426d      	negs	r5, r5
 80145aa:	e705      	b.n	80143b8 <__ieee754_rem_pio2+0x78>
 80145ac:	a326      	add	r3, pc, #152	; (adr r3, 8014648 <__ieee754_rem_pio2+0x308>)
 80145ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80145b6:	f7ec f837 	bl	8000628 <__aeabi_dmul>
 80145ba:	4606      	mov	r6, r0
 80145bc:	460f      	mov	r7, r1
 80145be:	4602      	mov	r2, r0
 80145c0:	460b      	mov	r3, r1
 80145c2:	4640      	mov	r0, r8
 80145c4:	4649      	mov	r1, r9
 80145c6:	f7eb fe77 	bl	80002b8 <__aeabi_dsub>
 80145ca:	4602      	mov	r2, r0
 80145cc:	460b      	mov	r3, r1
 80145ce:	4682      	mov	sl, r0
 80145d0:	468b      	mov	fp, r1
 80145d2:	4640      	mov	r0, r8
 80145d4:	4649      	mov	r1, r9
 80145d6:	f7eb fe6f 	bl	80002b8 <__aeabi_dsub>
 80145da:	4632      	mov	r2, r6
 80145dc:	463b      	mov	r3, r7
 80145de:	f7eb fe6b 	bl	80002b8 <__aeabi_dsub>
 80145e2:	a31b      	add	r3, pc, #108	; (adr r3, 8014650 <__ieee754_rem_pio2+0x310>)
 80145e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145e8:	4606      	mov	r6, r0
 80145ea:	460f      	mov	r7, r1
 80145ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80145f0:	f7ec f81a 	bl	8000628 <__aeabi_dmul>
 80145f4:	4632      	mov	r2, r6
 80145f6:	463b      	mov	r3, r7
 80145f8:	f7eb fe5e 	bl	80002b8 <__aeabi_dsub>
 80145fc:	4606      	mov	r6, r0
 80145fe:	460f      	mov	r7, r1
 8014600:	e764      	b.n	80144cc <__ieee754_rem_pio2+0x18c>
 8014602:	4b1b      	ldr	r3, [pc, #108]	; (8014670 <__ieee754_rem_pio2+0x330>)
 8014604:	4598      	cmp	r8, r3
 8014606:	dd35      	ble.n	8014674 <__ieee754_rem_pio2+0x334>
 8014608:	ee10 2a10 	vmov	r2, s0
 801460c:	463b      	mov	r3, r7
 801460e:	4630      	mov	r0, r6
 8014610:	4639      	mov	r1, r7
 8014612:	f7eb fe51 	bl	80002b8 <__aeabi_dsub>
 8014616:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801461a:	e9c4 0100 	strd	r0, r1, [r4]
 801461e:	e6a1      	b.n	8014364 <__ieee754_rem_pio2+0x24>
 8014620:	54400000 	.word	0x54400000
 8014624:	3ff921fb 	.word	0x3ff921fb
 8014628:	1a626331 	.word	0x1a626331
 801462c:	3dd0b461 	.word	0x3dd0b461
 8014630:	1a600000 	.word	0x1a600000
 8014634:	3dd0b461 	.word	0x3dd0b461
 8014638:	2e037073 	.word	0x2e037073
 801463c:	3ba3198a 	.word	0x3ba3198a
 8014640:	6dc9c883 	.word	0x6dc9c883
 8014644:	3fe45f30 	.word	0x3fe45f30
 8014648:	2e000000 	.word	0x2e000000
 801464c:	3ba3198a 	.word	0x3ba3198a
 8014650:	252049c1 	.word	0x252049c1
 8014654:	397b839a 	.word	0x397b839a
 8014658:	3fe921fb 	.word	0x3fe921fb
 801465c:	4002d97b 	.word	0x4002d97b
 8014660:	3ff921fb 	.word	0x3ff921fb
 8014664:	413921fb 	.word	0x413921fb
 8014668:	3fe00000 	.word	0x3fe00000
 801466c:	08019dc0 	.word	0x08019dc0
 8014670:	7fefffff 	.word	0x7fefffff
 8014674:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014678:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801467c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014680:	4630      	mov	r0, r6
 8014682:	460f      	mov	r7, r1
 8014684:	f7ec fa80 	bl	8000b88 <__aeabi_d2iz>
 8014688:	f7eb ff64 	bl	8000554 <__aeabi_i2d>
 801468c:	4602      	mov	r2, r0
 801468e:	460b      	mov	r3, r1
 8014690:	4630      	mov	r0, r6
 8014692:	4639      	mov	r1, r7
 8014694:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014698:	f7eb fe0e 	bl	80002b8 <__aeabi_dsub>
 801469c:	2200      	movs	r2, #0
 801469e:	4b1f      	ldr	r3, [pc, #124]	; (801471c <__ieee754_rem_pio2+0x3dc>)
 80146a0:	f7eb ffc2 	bl	8000628 <__aeabi_dmul>
 80146a4:	460f      	mov	r7, r1
 80146a6:	4606      	mov	r6, r0
 80146a8:	f7ec fa6e 	bl	8000b88 <__aeabi_d2iz>
 80146ac:	f7eb ff52 	bl	8000554 <__aeabi_i2d>
 80146b0:	4602      	mov	r2, r0
 80146b2:	460b      	mov	r3, r1
 80146b4:	4630      	mov	r0, r6
 80146b6:	4639      	mov	r1, r7
 80146b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80146bc:	f7eb fdfc 	bl	80002b8 <__aeabi_dsub>
 80146c0:	2200      	movs	r2, #0
 80146c2:	4b16      	ldr	r3, [pc, #88]	; (801471c <__ieee754_rem_pio2+0x3dc>)
 80146c4:	f7eb ffb0 	bl	8000628 <__aeabi_dmul>
 80146c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80146cc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80146d0:	f04f 0803 	mov.w	r8, #3
 80146d4:	2600      	movs	r6, #0
 80146d6:	2700      	movs	r7, #0
 80146d8:	4632      	mov	r2, r6
 80146da:	463b      	mov	r3, r7
 80146dc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80146e0:	f108 3aff 	add.w	sl, r8, #4294967295
 80146e4:	f7ec fa08 	bl	8000af8 <__aeabi_dcmpeq>
 80146e8:	b9b0      	cbnz	r0, 8014718 <__ieee754_rem_pio2+0x3d8>
 80146ea:	4b0d      	ldr	r3, [pc, #52]	; (8014720 <__ieee754_rem_pio2+0x3e0>)
 80146ec:	9301      	str	r3, [sp, #4]
 80146ee:	2302      	movs	r3, #2
 80146f0:	9300      	str	r3, [sp, #0]
 80146f2:	462a      	mov	r2, r5
 80146f4:	4643      	mov	r3, r8
 80146f6:	4621      	mov	r1, r4
 80146f8:	a806      	add	r0, sp, #24
 80146fa:	f000 f8dd 	bl	80148b8 <__kernel_rem_pio2>
 80146fe:	9b04      	ldr	r3, [sp, #16]
 8014700:	2b00      	cmp	r3, #0
 8014702:	4605      	mov	r5, r0
 8014704:	f6bf ae58 	bge.w	80143b8 <__ieee754_rem_pio2+0x78>
 8014708:	6863      	ldr	r3, [r4, #4]
 801470a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801470e:	6063      	str	r3, [r4, #4]
 8014710:	68e3      	ldr	r3, [r4, #12]
 8014712:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014716:	e746      	b.n	80145a6 <__ieee754_rem_pio2+0x266>
 8014718:	46d0      	mov	r8, sl
 801471a:	e7dd      	b.n	80146d8 <__ieee754_rem_pio2+0x398>
 801471c:	41700000 	.word	0x41700000
 8014720:	08019e40 	.word	0x08019e40
 8014724:	00000000 	.word	0x00000000

08014728 <__kernel_cos>:
 8014728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801472c:	ec59 8b10 	vmov	r8, r9, d0
 8014730:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014734:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014738:	ed2d 8b02 	vpush	{d8}
 801473c:	eeb0 8a41 	vmov.f32	s16, s2
 8014740:	eef0 8a61 	vmov.f32	s17, s3
 8014744:	da07      	bge.n	8014756 <__kernel_cos+0x2e>
 8014746:	ee10 0a10 	vmov	r0, s0
 801474a:	4649      	mov	r1, r9
 801474c:	f7ec fa1c 	bl	8000b88 <__aeabi_d2iz>
 8014750:	2800      	cmp	r0, #0
 8014752:	f000 8089 	beq.w	8014868 <__kernel_cos+0x140>
 8014756:	4642      	mov	r2, r8
 8014758:	464b      	mov	r3, r9
 801475a:	4640      	mov	r0, r8
 801475c:	4649      	mov	r1, r9
 801475e:	f7eb ff63 	bl	8000628 <__aeabi_dmul>
 8014762:	2200      	movs	r2, #0
 8014764:	4b4e      	ldr	r3, [pc, #312]	; (80148a0 <__kernel_cos+0x178>)
 8014766:	4604      	mov	r4, r0
 8014768:	460d      	mov	r5, r1
 801476a:	f7eb ff5d 	bl	8000628 <__aeabi_dmul>
 801476e:	a340      	add	r3, pc, #256	; (adr r3, 8014870 <__kernel_cos+0x148>)
 8014770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014774:	4682      	mov	sl, r0
 8014776:	468b      	mov	fp, r1
 8014778:	4620      	mov	r0, r4
 801477a:	4629      	mov	r1, r5
 801477c:	f7eb ff54 	bl	8000628 <__aeabi_dmul>
 8014780:	a33d      	add	r3, pc, #244	; (adr r3, 8014878 <__kernel_cos+0x150>)
 8014782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014786:	f7eb fd99 	bl	80002bc <__adddf3>
 801478a:	4622      	mov	r2, r4
 801478c:	462b      	mov	r3, r5
 801478e:	f7eb ff4b 	bl	8000628 <__aeabi_dmul>
 8014792:	a33b      	add	r3, pc, #236	; (adr r3, 8014880 <__kernel_cos+0x158>)
 8014794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014798:	f7eb fd8e 	bl	80002b8 <__aeabi_dsub>
 801479c:	4622      	mov	r2, r4
 801479e:	462b      	mov	r3, r5
 80147a0:	f7eb ff42 	bl	8000628 <__aeabi_dmul>
 80147a4:	a338      	add	r3, pc, #224	; (adr r3, 8014888 <__kernel_cos+0x160>)
 80147a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147aa:	f7eb fd87 	bl	80002bc <__adddf3>
 80147ae:	4622      	mov	r2, r4
 80147b0:	462b      	mov	r3, r5
 80147b2:	f7eb ff39 	bl	8000628 <__aeabi_dmul>
 80147b6:	a336      	add	r3, pc, #216	; (adr r3, 8014890 <__kernel_cos+0x168>)
 80147b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147bc:	f7eb fd7c 	bl	80002b8 <__aeabi_dsub>
 80147c0:	4622      	mov	r2, r4
 80147c2:	462b      	mov	r3, r5
 80147c4:	f7eb ff30 	bl	8000628 <__aeabi_dmul>
 80147c8:	a333      	add	r3, pc, #204	; (adr r3, 8014898 <__kernel_cos+0x170>)
 80147ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ce:	f7eb fd75 	bl	80002bc <__adddf3>
 80147d2:	4622      	mov	r2, r4
 80147d4:	462b      	mov	r3, r5
 80147d6:	f7eb ff27 	bl	8000628 <__aeabi_dmul>
 80147da:	4622      	mov	r2, r4
 80147dc:	462b      	mov	r3, r5
 80147de:	f7eb ff23 	bl	8000628 <__aeabi_dmul>
 80147e2:	ec53 2b18 	vmov	r2, r3, d8
 80147e6:	4604      	mov	r4, r0
 80147e8:	460d      	mov	r5, r1
 80147ea:	4640      	mov	r0, r8
 80147ec:	4649      	mov	r1, r9
 80147ee:	f7eb ff1b 	bl	8000628 <__aeabi_dmul>
 80147f2:	460b      	mov	r3, r1
 80147f4:	4602      	mov	r2, r0
 80147f6:	4629      	mov	r1, r5
 80147f8:	4620      	mov	r0, r4
 80147fa:	f7eb fd5d 	bl	80002b8 <__aeabi_dsub>
 80147fe:	4b29      	ldr	r3, [pc, #164]	; (80148a4 <__kernel_cos+0x17c>)
 8014800:	429e      	cmp	r6, r3
 8014802:	4680      	mov	r8, r0
 8014804:	4689      	mov	r9, r1
 8014806:	dc11      	bgt.n	801482c <__kernel_cos+0x104>
 8014808:	4602      	mov	r2, r0
 801480a:	460b      	mov	r3, r1
 801480c:	4650      	mov	r0, sl
 801480e:	4659      	mov	r1, fp
 8014810:	f7eb fd52 	bl	80002b8 <__aeabi_dsub>
 8014814:	460b      	mov	r3, r1
 8014816:	4924      	ldr	r1, [pc, #144]	; (80148a8 <__kernel_cos+0x180>)
 8014818:	4602      	mov	r2, r0
 801481a:	2000      	movs	r0, #0
 801481c:	f7eb fd4c 	bl	80002b8 <__aeabi_dsub>
 8014820:	ecbd 8b02 	vpop	{d8}
 8014824:	ec41 0b10 	vmov	d0, r0, r1
 8014828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801482c:	4b1f      	ldr	r3, [pc, #124]	; (80148ac <__kernel_cos+0x184>)
 801482e:	491e      	ldr	r1, [pc, #120]	; (80148a8 <__kernel_cos+0x180>)
 8014830:	429e      	cmp	r6, r3
 8014832:	bfcc      	ite	gt
 8014834:	4d1e      	ldrgt	r5, [pc, #120]	; (80148b0 <__kernel_cos+0x188>)
 8014836:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801483a:	2400      	movs	r4, #0
 801483c:	4622      	mov	r2, r4
 801483e:	462b      	mov	r3, r5
 8014840:	2000      	movs	r0, #0
 8014842:	f7eb fd39 	bl	80002b8 <__aeabi_dsub>
 8014846:	4622      	mov	r2, r4
 8014848:	4606      	mov	r6, r0
 801484a:	460f      	mov	r7, r1
 801484c:	462b      	mov	r3, r5
 801484e:	4650      	mov	r0, sl
 8014850:	4659      	mov	r1, fp
 8014852:	f7eb fd31 	bl	80002b8 <__aeabi_dsub>
 8014856:	4642      	mov	r2, r8
 8014858:	464b      	mov	r3, r9
 801485a:	f7eb fd2d 	bl	80002b8 <__aeabi_dsub>
 801485e:	4602      	mov	r2, r0
 8014860:	460b      	mov	r3, r1
 8014862:	4630      	mov	r0, r6
 8014864:	4639      	mov	r1, r7
 8014866:	e7d9      	b.n	801481c <__kernel_cos+0xf4>
 8014868:	2000      	movs	r0, #0
 801486a:	490f      	ldr	r1, [pc, #60]	; (80148a8 <__kernel_cos+0x180>)
 801486c:	e7d8      	b.n	8014820 <__kernel_cos+0xf8>
 801486e:	bf00      	nop
 8014870:	be8838d4 	.word	0xbe8838d4
 8014874:	bda8fae9 	.word	0xbda8fae9
 8014878:	bdb4b1c4 	.word	0xbdb4b1c4
 801487c:	3e21ee9e 	.word	0x3e21ee9e
 8014880:	809c52ad 	.word	0x809c52ad
 8014884:	3e927e4f 	.word	0x3e927e4f
 8014888:	19cb1590 	.word	0x19cb1590
 801488c:	3efa01a0 	.word	0x3efa01a0
 8014890:	16c15177 	.word	0x16c15177
 8014894:	3f56c16c 	.word	0x3f56c16c
 8014898:	5555554c 	.word	0x5555554c
 801489c:	3fa55555 	.word	0x3fa55555
 80148a0:	3fe00000 	.word	0x3fe00000
 80148a4:	3fd33332 	.word	0x3fd33332
 80148a8:	3ff00000 	.word	0x3ff00000
 80148ac:	3fe90000 	.word	0x3fe90000
 80148b0:	3fd20000 	.word	0x3fd20000
 80148b4:	00000000 	.word	0x00000000

080148b8 <__kernel_rem_pio2>:
 80148b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148bc:	ed2d 8b02 	vpush	{d8}
 80148c0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80148c4:	1ed4      	subs	r4, r2, #3
 80148c6:	9308      	str	r3, [sp, #32]
 80148c8:	9101      	str	r1, [sp, #4]
 80148ca:	4bc5      	ldr	r3, [pc, #788]	; (8014be0 <__kernel_rem_pio2+0x328>)
 80148cc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80148ce:	9009      	str	r0, [sp, #36]	; 0x24
 80148d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80148d4:	9304      	str	r3, [sp, #16]
 80148d6:	9b08      	ldr	r3, [sp, #32]
 80148d8:	3b01      	subs	r3, #1
 80148da:	9307      	str	r3, [sp, #28]
 80148dc:	2318      	movs	r3, #24
 80148de:	fb94 f4f3 	sdiv	r4, r4, r3
 80148e2:	f06f 0317 	mvn.w	r3, #23
 80148e6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80148ea:	fb04 3303 	mla	r3, r4, r3, r3
 80148ee:	eb03 0a02 	add.w	sl, r3, r2
 80148f2:	9b04      	ldr	r3, [sp, #16]
 80148f4:	9a07      	ldr	r2, [sp, #28]
 80148f6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014bd0 <__kernel_rem_pio2+0x318>
 80148fa:	eb03 0802 	add.w	r8, r3, r2
 80148fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014900:	1aa7      	subs	r7, r4, r2
 8014902:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014906:	ae22      	add	r6, sp, #136	; 0x88
 8014908:	2500      	movs	r5, #0
 801490a:	4545      	cmp	r5, r8
 801490c:	dd13      	ble.n	8014936 <__kernel_rem_pio2+0x7e>
 801490e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8014bd0 <__kernel_rem_pio2+0x318>
 8014912:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014916:	2600      	movs	r6, #0
 8014918:	9b04      	ldr	r3, [sp, #16]
 801491a:	429e      	cmp	r6, r3
 801491c:	dc32      	bgt.n	8014984 <__kernel_rem_pio2+0xcc>
 801491e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014920:	9302      	str	r3, [sp, #8]
 8014922:	9b08      	ldr	r3, [sp, #32]
 8014924:	199d      	adds	r5, r3, r6
 8014926:	ab22      	add	r3, sp, #136	; 0x88
 8014928:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801492c:	9306      	str	r3, [sp, #24]
 801492e:	ec59 8b18 	vmov	r8, r9, d8
 8014932:	2700      	movs	r7, #0
 8014934:	e01f      	b.n	8014976 <__kernel_rem_pio2+0xbe>
 8014936:	42ef      	cmn	r7, r5
 8014938:	d407      	bmi.n	801494a <__kernel_rem_pio2+0x92>
 801493a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801493e:	f7eb fe09 	bl	8000554 <__aeabi_i2d>
 8014942:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014946:	3501      	adds	r5, #1
 8014948:	e7df      	b.n	801490a <__kernel_rem_pio2+0x52>
 801494a:	ec51 0b18 	vmov	r0, r1, d8
 801494e:	e7f8      	b.n	8014942 <__kernel_rem_pio2+0x8a>
 8014950:	9906      	ldr	r1, [sp, #24]
 8014952:	9d02      	ldr	r5, [sp, #8]
 8014954:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014958:	9106      	str	r1, [sp, #24]
 801495a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801495e:	9502      	str	r5, [sp, #8]
 8014960:	f7eb fe62 	bl	8000628 <__aeabi_dmul>
 8014964:	4602      	mov	r2, r0
 8014966:	460b      	mov	r3, r1
 8014968:	4640      	mov	r0, r8
 801496a:	4649      	mov	r1, r9
 801496c:	f7eb fca6 	bl	80002bc <__adddf3>
 8014970:	3701      	adds	r7, #1
 8014972:	4680      	mov	r8, r0
 8014974:	4689      	mov	r9, r1
 8014976:	9b07      	ldr	r3, [sp, #28]
 8014978:	429f      	cmp	r7, r3
 801497a:	dde9      	ble.n	8014950 <__kernel_rem_pio2+0x98>
 801497c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014980:	3601      	adds	r6, #1
 8014982:	e7c9      	b.n	8014918 <__kernel_rem_pio2+0x60>
 8014984:	9b04      	ldr	r3, [sp, #16]
 8014986:	aa0e      	add	r2, sp, #56	; 0x38
 8014988:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801498c:	930c      	str	r3, [sp, #48]	; 0x30
 801498e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014990:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014994:	9c04      	ldr	r4, [sp, #16]
 8014996:	930b      	str	r3, [sp, #44]	; 0x2c
 8014998:	ab9a      	add	r3, sp, #616	; 0x268
 801499a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801499e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80149a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80149a6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80149aa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80149ae:	ab9a      	add	r3, sp, #616	; 0x268
 80149b0:	445b      	add	r3, fp
 80149b2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80149b6:	2500      	movs	r5, #0
 80149b8:	1b63      	subs	r3, r4, r5
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	dc78      	bgt.n	8014ab0 <__kernel_rem_pio2+0x1f8>
 80149be:	4650      	mov	r0, sl
 80149c0:	ec49 8b10 	vmov	d0, r8, r9
 80149c4:	f000 fc00 	bl	80151c8 <scalbn>
 80149c8:	ec57 6b10 	vmov	r6, r7, d0
 80149cc:	2200      	movs	r2, #0
 80149ce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80149d2:	ee10 0a10 	vmov	r0, s0
 80149d6:	4639      	mov	r1, r7
 80149d8:	f7eb fe26 	bl	8000628 <__aeabi_dmul>
 80149dc:	ec41 0b10 	vmov	d0, r0, r1
 80149e0:	f000 fb6e 	bl	80150c0 <floor>
 80149e4:	2200      	movs	r2, #0
 80149e6:	ec51 0b10 	vmov	r0, r1, d0
 80149ea:	4b7e      	ldr	r3, [pc, #504]	; (8014be4 <__kernel_rem_pio2+0x32c>)
 80149ec:	f7eb fe1c 	bl	8000628 <__aeabi_dmul>
 80149f0:	4602      	mov	r2, r0
 80149f2:	460b      	mov	r3, r1
 80149f4:	4630      	mov	r0, r6
 80149f6:	4639      	mov	r1, r7
 80149f8:	f7eb fc5e 	bl	80002b8 <__aeabi_dsub>
 80149fc:	460f      	mov	r7, r1
 80149fe:	4606      	mov	r6, r0
 8014a00:	f7ec f8c2 	bl	8000b88 <__aeabi_d2iz>
 8014a04:	9006      	str	r0, [sp, #24]
 8014a06:	f7eb fda5 	bl	8000554 <__aeabi_i2d>
 8014a0a:	4602      	mov	r2, r0
 8014a0c:	460b      	mov	r3, r1
 8014a0e:	4630      	mov	r0, r6
 8014a10:	4639      	mov	r1, r7
 8014a12:	f7eb fc51 	bl	80002b8 <__aeabi_dsub>
 8014a16:	f1ba 0f00 	cmp.w	sl, #0
 8014a1a:	4606      	mov	r6, r0
 8014a1c:	460f      	mov	r7, r1
 8014a1e:	dd6c      	ble.n	8014afa <__kernel_rem_pio2+0x242>
 8014a20:	1e62      	subs	r2, r4, #1
 8014a22:	ab0e      	add	r3, sp, #56	; 0x38
 8014a24:	f1ca 0118 	rsb	r1, sl, #24
 8014a28:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014a2c:	9d06      	ldr	r5, [sp, #24]
 8014a2e:	fa40 f301 	asr.w	r3, r0, r1
 8014a32:	441d      	add	r5, r3
 8014a34:	408b      	lsls	r3, r1
 8014a36:	1ac0      	subs	r0, r0, r3
 8014a38:	ab0e      	add	r3, sp, #56	; 0x38
 8014a3a:	9506      	str	r5, [sp, #24]
 8014a3c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014a40:	f1ca 0317 	rsb	r3, sl, #23
 8014a44:	fa40 f303 	asr.w	r3, r0, r3
 8014a48:	9302      	str	r3, [sp, #8]
 8014a4a:	9b02      	ldr	r3, [sp, #8]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	dd62      	ble.n	8014b16 <__kernel_rem_pio2+0x25e>
 8014a50:	9b06      	ldr	r3, [sp, #24]
 8014a52:	2200      	movs	r2, #0
 8014a54:	3301      	adds	r3, #1
 8014a56:	9306      	str	r3, [sp, #24]
 8014a58:	4615      	mov	r5, r2
 8014a5a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014a5e:	4294      	cmp	r4, r2
 8014a60:	f300 8095 	bgt.w	8014b8e <__kernel_rem_pio2+0x2d6>
 8014a64:	f1ba 0f00 	cmp.w	sl, #0
 8014a68:	dd07      	ble.n	8014a7a <__kernel_rem_pio2+0x1c2>
 8014a6a:	f1ba 0f01 	cmp.w	sl, #1
 8014a6e:	f000 80a2 	beq.w	8014bb6 <__kernel_rem_pio2+0x2fe>
 8014a72:	f1ba 0f02 	cmp.w	sl, #2
 8014a76:	f000 80c1 	beq.w	8014bfc <__kernel_rem_pio2+0x344>
 8014a7a:	9b02      	ldr	r3, [sp, #8]
 8014a7c:	2b02      	cmp	r3, #2
 8014a7e:	d14a      	bne.n	8014b16 <__kernel_rem_pio2+0x25e>
 8014a80:	4632      	mov	r2, r6
 8014a82:	463b      	mov	r3, r7
 8014a84:	2000      	movs	r0, #0
 8014a86:	4958      	ldr	r1, [pc, #352]	; (8014be8 <__kernel_rem_pio2+0x330>)
 8014a88:	f7eb fc16 	bl	80002b8 <__aeabi_dsub>
 8014a8c:	4606      	mov	r6, r0
 8014a8e:	460f      	mov	r7, r1
 8014a90:	2d00      	cmp	r5, #0
 8014a92:	d040      	beq.n	8014b16 <__kernel_rem_pio2+0x25e>
 8014a94:	4650      	mov	r0, sl
 8014a96:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014bd8 <__kernel_rem_pio2+0x320>
 8014a9a:	f000 fb95 	bl	80151c8 <scalbn>
 8014a9e:	4630      	mov	r0, r6
 8014aa0:	4639      	mov	r1, r7
 8014aa2:	ec53 2b10 	vmov	r2, r3, d0
 8014aa6:	f7eb fc07 	bl	80002b8 <__aeabi_dsub>
 8014aaa:	4606      	mov	r6, r0
 8014aac:	460f      	mov	r7, r1
 8014aae:	e032      	b.n	8014b16 <__kernel_rem_pio2+0x25e>
 8014ab0:	2200      	movs	r2, #0
 8014ab2:	4b4e      	ldr	r3, [pc, #312]	; (8014bec <__kernel_rem_pio2+0x334>)
 8014ab4:	4640      	mov	r0, r8
 8014ab6:	4649      	mov	r1, r9
 8014ab8:	f7eb fdb6 	bl	8000628 <__aeabi_dmul>
 8014abc:	f7ec f864 	bl	8000b88 <__aeabi_d2iz>
 8014ac0:	f7eb fd48 	bl	8000554 <__aeabi_i2d>
 8014ac4:	2200      	movs	r2, #0
 8014ac6:	4b4a      	ldr	r3, [pc, #296]	; (8014bf0 <__kernel_rem_pio2+0x338>)
 8014ac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014acc:	f7eb fdac 	bl	8000628 <__aeabi_dmul>
 8014ad0:	4602      	mov	r2, r0
 8014ad2:	460b      	mov	r3, r1
 8014ad4:	4640      	mov	r0, r8
 8014ad6:	4649      	mov	r1, r9
 8014ad8:	f7eb fbee 	bl	80002b8 <__aeabi_dsub>
 8014adc:	f7ec f854 	bl	8000b88 <__aeabi_d2iz>
 8014ae0:	ab0e      	add	r3, sp, #56	; 0x38
 8014ae2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8014ae6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8014aea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014aee:	f7eb fbe5 	bl	80002bc <__adddf3>
 8014af2:	3501      	adds	r5, #1
 8014af4:	4680      	mov	r8, r0
 8014af6:	4689      	mov	r9, r1
 8014af8:	e75e      	b.n	80149b8 <__kernel_rem_pio2+0x100>
 8014afa:	d105      	bne.n	8014b08 <__kernel_rem_pio2+0x250>
 8014afc:	1e63      	subs	r3, r4, #1
 8014afe:	aa0e      	add	r2, sp, #56	; 0x38
 8014b00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014b04:	15c3      	asrs	r3, r0, #23
 8014b06:	e79f      	b.n	8014a48 <__kernel_rem_pio2+0x190>
 8014b08:	2200      	movs	r2, #0
 8014b0a:	4b3a      	ldr	r3, [pc, #232]	; (8014bf4 <__kernel_rem_pio2+0x33c>)
 8014b0c:	f7ec f812 	bl	8000b34 <__aeabi_dcmpge>
 8014b10:	2800      	cmp	r0, #0
 8014b12:	d139      	bne.n	8014b88 <__kernel_rem_pio2+0x2d0>
 8014b14:	9002      	str	r0, [sp, #8]
 8014b16:	2200      	movs	r2, #0
 8014b18:	2300      	movs	r3, #0
 8014b1a:	4630      	mov	r0, r6
 8014b1c:	4639      	mov	r1, r7
 8014b1e:	f7eb ffeb 	bl	8000af8 <__aeabi_dcmpeq>
 8014b22:	2800      	cmp	r0, #0
 8014b24:	f000 80c7 	beq.w	8014cb6 <__kernel_rem_pio2+0x3fe>
 8014b28:	1e65      	subs	r5, r4, #1
 8014b2a:	462b      	mov	r3, r5
 8014b2c:	2200      	movs	r2, #0
 8014b2e:	9904      	ldr	r1, [sp, #16]
 8014b30:	428b      	cmp	r3, r1
 8014b32:	da6a      	bge.n	8014c0a <__kernel_rem_pio2+0x352>
 8014b34:	2a00      	cmp	r2, #0
 8014b36:	f000 8088 	beq.w	8014c4a <__kernel_rem_pio2+0x392>
 8014b3a:	ab0e      	add	r3, sp, #56	; 0x38
 8014b3c:	f1aa 0a18 	sub.w	sl, sl, #24
 8014b40:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	f000 80b4 	beq.w	8014cb2 <__kernel_rem_pio2+0x3fa>
 8014b4a:	4650      	mov	r0, sl
 8014b4c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8014bd8 <__kernel_rem_pio2+0x320>
 8014b50:	f000 fb3a 	bl	80151c8 <scalbn>
 8014b54:	00ec      	lsls	r4, r5, #3
 8014b56:	ab72      	add	r3, sp, #456	; 0x1c8
 8014b58:	191e      	adds	r6, r3, r4
 8014b5a:	ec59 8b10 	vmov	r8, r9, d0
 8014b5e:	f106 0a08 	add.w	sl, r6, #8
 8014b62:	462f      	mov	r7, r5
 8014b64:	2f00      	cmp	r7, #0
 8014b66:	f280 80df 	bge.w	8014d28 <__kernel_rem_pio2+0x470>
 8014b6a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8014bd0 <__kernel_rem_pio2+0x318>
 8014b6e:	f04f 0a00 	mov.w	sl, #0
 8014b72:	eba5 030a 	sub.w	r3, r5, sl
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	f2c0 810a 	blt.w	8014d90 <__kernel_rem_pio2+0x4d8>
 8014b7c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8014bf8 <__kernel_rem_pio2+0x340>
 8014b80:	ec59 8b18 	vmov	r8, r9, d8
 8014b84:	2700      	movs	r7, #0
 8014b86:	e0f5      	b.n	8014d74 <__kernel_rem_pio2+0x4bc>
 8014b88:	2302      	movs	r3, #2
 8014b8a:	9302      	str	r3, [sp, #8]
 8014b8c:	e760      	b.n	8014a50 <__kernel_rem_pio2+0x198>
 8014b8e:	ab0e      	add	r3, sp, #56	; 0x38
 8014b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b94:	b94d      	cbnz	r5, 8014baa <__kernel_rem_pio2+0x2f2>
 8014b96:	b12b      	cbz	r3, 8014ba4 <__kernel_rem_pio2+0x2ec>
 8014b98:	a80e      	add	r0, sp, #56	; 0x38
 8014b9a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014b9e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014ba2:	2301      	movs	r3, #1
 8014ba4:	3201      	adds	r2, #1
 8014ba6:	461d      	mov	r5, r3
 8014ba8:	e759      	b.n	8014a5e <__kernel_rem_pio2+0x1a6>
 8014baa:	a80e      	add	r0, sp, #56	; 0x38
 8014bac:	1acb      	subs	r3, r1, r3
 8014bae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014bb2:	462b      	mov	r3, r5
 8014bb4:	e7f6      	b.n	8014ba4 <__kernel_rem_pio2+0x2ec>
 8014bb6:	1e62      	subs	r2, r4, #1
 8014bb8:	ab0e      	add	r3, sp, #56	; 0x38
 8014bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bbe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014bc2:	a90e      	add	r1, sp, #56	; 0x38
 8014bc4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014bc8:	e757      	b.n	8014a7a <__kernel_rem_pio2+0x1c2>
 8014bca:	bf00      	nop
 8014bcc:	f3af 8000 	nop.w
	...
 8014bdc:	3ff00000 	.word	0x3ff00000
 8014be0:	08019f88 	.word	0x08019f88
 8014be4:	40200000 	.word	0x40200000
 8014be8:	3ff00000 	.word	0x3ff00000
 8014bec:	3e700000 	.word	0x3e700000
 8014bf0:	41700000 	.word	0x41700000
 8014bf4:	3fe00000 	.word	0x3fe00000
 8014bf8:	08019f48 	.word	0x08019f48
 8014bfc:	1e62      	subs	r2, r4, #1
 8014bfe:	ab0e      	add	r3, sp, #56	; 0x38
 8014c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c04:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014c08:	e7db      	b.n	8014bc2 <__kernel_rem_pio2+0x30a>
 8014c0a:	a90e      	add	r1, sp, #56	; 0x38
 8014c0c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014c10:	3b01      	subs	r3, #1
 8014c12:	430a      	orrs	r2, r1
 8014c14:	e78b      	b.n	8014b2e <__kernel_rem_pio2+0x276>
 8014c16:	3301      	adds	r3, #1
 8014c18:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014c1c:	2900      	cmp	r1, #0
 8014c1e:	d0fa      	beq.n	8014c16 <__kernel_rem_pio2+0x35e>
 8014c20:	9a08      	ldr	r2, [sp, #32]
 8014c22:	4422      	add	r2, r4
 8014c24:	00d2      	lsls	r2, r2, #3
 8014c26:	a922      	add	r1, sp, #136	; 0x88
 8014c28:	18e3      	adds	r3, r4, r3
 8014c2a:	9206      	str	r2, [sp, #24]
 8014c2c:	440a      	add	r2, r1
 8014c2e:	9302      	str	r3, [sp, #8]
 8014c30:	f10b 0108 	add.w	r1, fp, #8
 8014c34:	f102 0308 	add.w	r3, r2, #8
 8014c38:	1c66      	adds	r6, r4, #1
 8014c3a:	910a      	str	r1, [sp, #40]	; 0x28
 8014c3c:	2500      	movs	r5, #0
 8014c3e:	930d      	str	r3, [sp, #52]	; 0x34
 8014c40:	9b02      	ldr	r3, [sp, #8]
 8014c42:	42b3      	cmp	r3, r6
 8014c44:	da04      	bge.n	8014c50 <__kernel_rem_pio2+0x398>
 8014c46:	461c      	mov	r4, r3
 8014c48:	e6a6      	b.n	8014998 <__kernel_rem_pio2+0xe0>
 8014c4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014c4c:	2301      	movs	r3, #1
 8014c4e:	e7e3      	b.n	8014c18 <__kernel_rem_pio2+0x360>
 8014c50:	9b06      	ldr	r3, [sp, #24]
 8014c52:	18ef      	adds	r7, r5, r3
 8014c54:	ab22      	add	r3, sp, #136	; 0x88
 8014c56:	441f      	add	r7, r3
 8014c58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c5a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014c5e:	f7eb fc79 	bl	8000554 <__aeabi_i2d>
 8014c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c64:	461c      	mov	r4, r3
 8014c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014c68:	e9c7 0100 	strd	r0, r1, [r7]
 8014c6c:	eb03 0b05 	add.w	fp, r3, r5
 8014c70:	2700      	movs	r7, #0
 8014c72:	f04f 0800 	mov.w	r8, #0
 8014c76:	f04f 0900 	mov.w	r9, #0
 8014c7a:	9b07      	ldr	r3, [sp, #28]
 8014c7c:	429f      	cmp	r7, r3
 8014c7e:	dd08      	ble.n	8014c92 <__kernel_rem_pio2+0x3da>
 8014c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c82:	aa72      	add	r2, sp, #456	; 0x1c8
 8014c84:	18eb      	adds	r3, r5, r3
 8014c86:	4413      	add	r3, r2
 8014c88:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8014c8c:	3601      	adds	r6, #1
 8014c8e:	3508      	adds	r5, #8
 8014c90:	e7d6      	b.n	8014c40 <__kernel_rem_pio2+0x388>
 8014c92:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014c96:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014c9a:	f7eb fcc5 	bl	8000628 <__aeabi_dmul>
 8014c9e:	4602      	mov	r2, r0
 8014ca0:	460b      	mov	r3, r1
 8014ca2:	4640      	mov	r0, r8
 8014ca4:	4649      	mov	r1, r9
 8014ca6:	f7eb fb09 	bl	80002bc <__adddf3>
 8014caa:	3701      	adds	r7, #1
 8014cac:	4680      	mov	r8, r0
 8014cae:	4689      	mov	r9, r1
 8014cb0:	e7e3      	b.n	8014c7a <__kernel_rem_pio2+0x3c2>
 8014cb2:	3d01      	subs	r5, #1
 8014cb4:	e741      	b.n	8014b3a <__kernel_rem_pio2+0x282>
 8014cb6:	f1ca 0000 	rsb	r0, sl, #0
 8014cba:	ec47 6b10 	vmov	d0, r6, r7
 8014cbe:	f000 fa83 	bl	80151c8 <scalbn>
 8014cc2:	ec57 6b10 	vmov	r6, r7, d0
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	4b99      	ldr	r3, [pc, #612]	; (8014f30 <__kernel_rem_pio2+0x678>)
 8014cca:	ee10 0a10 	vmov	r0, s0
 8014cce:	4639      	mov	r1, r7
 8014cd0:	f7eb ff30 	bl	8000b34 <__aeabi_dcmpge>
 8014cd4:	b1f8      	cbz	r0, 8014d16 <__kernel_rem_pio2+0x45e>
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	4b96      	ldr	r3, [pc, #600]	; (8014f34 <__kernel_rem_pio2+0x67c>)
 8014cda:	4630      	mov	r0, r6
 8014cdc:	4639      	mov	r1, r7
 8014cde:	f7eb fca3 	bl	8000628 <__aeabi_dmul>
 8014ce2:	f7eb ff51 	bl	8000b88 <__aeabi_d2iz>
 8014ce6:	4680      	mov	r8, r0
 8014ce8:	f7eb fc34 	bl	8000554 <__aeabi_i2d>
 8014cec:	2200      	movs	r2, #0
 8014cee:	4b90      	ldr	r3, [pc, #576]	; (8014f30 <__kernel_rem_pio2+0x678>)
 8014cf0:	f7eb fc9a 	bl	8000628 <__aeabi_dmul>
 8014cf4:	460b      	mov	r3, r1
 8014cf6:	4602      	mov	r2, r0
 8014cf8:	4639      	mov	r1, r7
 8014cfa:	4630      	mov	r0, r6
 8014cfc:	f7eb fadc 	bl	80002b8 <__aeabi_dsub>
 8014d00:	f7eb ff42 	bl	8000b88 <__aeabi_d2iz>
 8014d04:	1c65      	adds	r5, r4, #1
 8014d06:	ab0e      	add	r3, sp, #56	; 0x38
 8014d08:	f10a 0a18 	add.w	sl, sl, #24
 8014d0c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014d10:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014d14:	e719      	b.n	8014b4a <__kernel_rem_pio2+0x292>
 8014d16:	4630      	mov	r0, r6
 8014d18:	4639      	mov	r1, r7
 8014d1a:	f7eb ff35 	bl	8000b88 <__aeabi_d2iz>
 8014d1e:	ab0e      	add	r3, sp, #56	; 0x38
 8014d20:	4625      	mov	r5, r4
 8014d22:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014d26:	e710      	b.n	8014b4a <__kernel_rem_pio2+0x292>
 8014d28:	ab0e      	add	r3, sp, #56	; 0x38
 8014d2a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014d2e:	f7eb fc11 	bl	8000554 <__aeabi_i2d>
 8014d32:	4642      	mov	r2, r8
 8014d34:	464b      	mov	r3, r9
 8014d36:	f7eb fc77 	bl	8000628 <__aeabi_dmul>
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014d40:	4b7c      	ldr	r3, [pc, #496]	; (8014f34 <__kernel_rem_pio2+0x67c>)
 8014d42:	4640      	mov	r0, r8
 8014d44:	4649      	mov	r1, r9
 8014d46:	f7eb fc6f 	bl	8000628 <__aeabi_dmul>
 8014d4a:	3f01      	subs	r7, #1
 8014d4c:	4680      	mov	r8, r0
 8014d4e:	4689      	mov	r9, r1
 8014d50:	e708      	b.n	8014b64 <__kernel_rem_pio2+0x2ac>
 8014d52:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8014d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d5a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014d5e:	f7eb fc63 	bl	8000628 <__aeabi_dmul>
 8014d62:	4602      	mov	r2, r0
 8014d64:	460b      	mov	r3, r1
 8014d66:	4640      	mov	r0, r8
 8014d68:	4649      	mov	r1, r9
 8014d6a:	f7eb faa7 	bl	80002bc <__adddf3>
 8014d6e:	3701      	adds	r7, #1
 8014d70:	4680      	mov	r8, r0
 8014d72:	4689      	mov	r9, r1
 8014d74:	9b04      	ldr	r3, [sp, #16]
 8014d76:	429f      	cmp	r7, r3
 8014d78:	dc01      	bgt.n	8014d7e <__kernel_rem_pio2+0x4c6>
 8014d7a:	45ba      	cmp	sl, r7
 8014d7c:	dae9      	bge.n	8014d52 <__kernel_rem_pio2+0x49a>
 8014d7e:	ab4a      	add	r3, sp, #296	; 0x128
 8014d80:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014d84:	e9c3 8900 	strd	r8, r9, [r3]
 8014d88:	f10a 0a01 	add.w	sl, sl, #1
 8014d8c:	3e08      	subs	r6, #8
 8014d8e:	e6f0      	b.n	8014b72 <__kernel_rem_pio2+0x2ba>
 8014d90:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8014d92:	2b03      	cmp	r3, #3
 8014d94:	d85b      	bhi.n	8014e4e <__kernel_rem_pio2+0x596>
 8014d96:	e8df f003 	tbb	[pc, r3]
 8014d9a:	264a      	.short	0x264a
 8014d9c:	0226      	.short	0x0226
 8014d9e:	ab9a      	add	r3, sp, #616	; 0x268
 8014da0:	441c      	add	r4, r3
 8014da2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014da6:	46a2      	mov	sl, r4
 8014da8:	46ab      	mov	fp, r5
 8014daa:	f1bb 0f00 	cmp.w	fp, #0
 8014dae:	dc6c      	bgt.n	8014e8a <__kernel_rem_pio2+0x5d2>
 8014db0:	46a2      	mov	sl, r4
 8014db2:	46ab      	mov	fp, r5
 8014db4:	f1bb 0f01 	cmp.w	fp, #1
 8014db8:	f300 8086 	bgt.w	8014ec8 <__kernel_rem_pio2+0x610>
 8014dbc:	2000      	movs	r0, #0
 8014dbe:	2100      	movs	r1, #0
 8014dc0:	2d01      	cmp	r5, #1
 8014dc2:	f300 80a0 	bgt.w	8014f06 <__kernel_rem_pio2+0x64e>
 8014dc6:	9b02      	ldr	r3, [sp, #8]
 8014dc8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014dcc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	f040 809e 	bne.w	8014f12 <__kernel_rem_pio2+0x65a>
 8014dd6:	9b01      	ldr	r3, [sp, #4]
 8014dd8:	e9c3 7800 	strd	r7, r8, [r3]
 8014ddc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014de0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014de4:	e033      	b.n	8014e4e <__kernel_rem_pio2+0x596>
 8014de6:	3408      	adds	r4, #8
 8014de8:	ab4a      	add	r3, sp, #296	; 0x128
 8014dea:	441c      	add	r4, r3
 8014dec:	462e      	mov	r6, r5
 8014dee:	2000      	movs	r0, #0
 8014df0:	2100      	movs	r1, #0
 8014df2:	2e00      	cmp	r6, #0
 8014df4:	da3a      	bge.n	8014e6c <__kernel_rem_pio2+0x5b4>
 8014df6:	9b02      	ldr	r3, [sp, #8]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d03d      	beq.n	8014e78 <__kernel_rem_pio2+0x5c0>
 8014dfc:	4602      	mov	r2, r0
 8014dfe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014e02:	9c01      	ldr	r4, [sp, #4]
 8014e04:	e9c4 2300 	strd	r2, r3, [r4]
 8014e08:	4602      	mov	r2, r0
 8014e0a:	460b      	mov	r3, r1
 8014e0c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8014e10:	f7eb fa52 	bl	80002b8 <__aeabi_dsub>
 8014e14:	ae4c      	add	r6, sp, #304	; 0x130
 8014e16:	2401      	movs	r4, #1
 8014e18:	42a5      	cmp	r5, r4
 8014e1a:	da30      	bge.n	8014e7e <__kernel_rem_pio2+0x5c6>
 8014e1c:	9b02      	ldr	r3, [sp, #8]
 8014e1e:	b113      	cbz	r3, 8014e26 <__kernel_rem_pio2+0x56e>
 8014e20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014e24:	4619      	mov	r1, r3
 8014e26:	9b01      	ldr	r3, [sp, #4]
 8014e28:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014e2c:	e00f      	b.n	8014e4e <__kernel_rem_pio2+0x596>
 8014e2e:	ab9a      	add	r3, sp, #616	; 0x268
 8014e30:	441c      	add	r4, r3
 8014e32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014e36:	2000      	movs	r0, #0
 8014e38:	2100      	movs	r1, #0
 8014e3a:	2d00      	cmp	r5, #0
 8014e3c:	da10      	bge.n	8014e60 <__kernel_rem_pio2+0x5a8>
 8014e3e:	9b02      	ldr	r3, [sp, #8]
 8014e40:	b113      	cbz	r3, 8014e48 <__kernel_rem_pio2+0x590>
 8014e42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014e46:	4619      	mov	r1, r3
 8014e48:	9b01      	ldr	r3, [sp, #4]
 8014e4a:	e9c3 0100 	strd	r0, r1, [r3]
 8014e4e:	9b06      	ldr	r3, [sp, #24]
 8014e50:	f003 0007 	and.w	r0, r3, #7
 8014e54:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014e58:	ecbd 8b02 	vpop	{d8}
 8014e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e60:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014e64:	f7eb fa2a 	bl	80002bc <__adddf3>
 8014e68:	3d01      	subs	r5, #1
 8014e6a:	e7e6      	b.n	8014e3a <__kernel_rem_pio2+0x582>
 8014e6c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014e70:	f7eb fa24 	bl	80002bc <__adddf3>
 8014e74:	3e01      	subs	r6, #1
 8014e76:	e7bc      	b.n	8014df2 <__kernel_rem_pio2+0x53a>
 8014e78:	4602      	mov	r2, r0
 8014e7a:	460b      	mov	r3, r1
 8014e7c:	e7c1      	b.n	8014e02 <__kernel_rem_pio2+0x54a>
 8014e7e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8014e82:	f7eb fa1b 	bl	80002bc <__adddf3>
 8014e86:	3401      	adds	r4, #1
 8014e88:	e7c6      	b.n	8014e18 <__kernel_rem_pio2+0x560>
 8014e8a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8014e8e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014e92:	4640      	mov	r0, r8
 8014e94:	ec53 2b17 	vmov	r2, r3, d7
 8014e98:	4649      	mov	r1, r9
 8014e9a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014e9e:	f7eb fa0d 	bl	80002bc <__adddf3>
 8014ea2:	4602      	mov	r2, r0
 8014ea4:	460b      	mov	r3, r1
 8014ea6:	4606      	mov	r6, r0
 8014ea8:	460f      	mov	r7, r1
 8014eaa:	4640      	mov	r0, r8
 8014eac:	4649      	mov	r1, r9
 8014eae:	f7eb fa03 	bl	80002b8 <__aeabi_dsub>
 8014eb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014eb6:	f7eb fa01 	bl	80002bc <__adddf3>
 8014eba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014ebe:	e9ca 0100 	strd	r0, r1, [sl]
 8014ec2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8014ec6:	e770      	b.n	8014daa <__kernel_rem_pio2+0x4f2>
 8014ec8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8014ecc:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014ed0:	4630      	mov	r0, r6
 8014ed2:	ec53 2b17 	vmov	r2, r3, d7
 8014ed6:	4639      	mov	r1, r7
 8014ed8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014edc:	f7eb f9ee 	bl	80002bc <__adddf3>
 8014ee0:	4602      	mov	r2, r0
 8014ee2:	460b      	mov	r3, r1
 8014ee4:	4680      	mov	r8, r0
 8014ee6:	4689      	mov	r9, r1
 8014ee8:	4630      	mov	r0, r6
 8014eea:	4639      	mov	r1, r7
 8014eec:	f7eb f9e4 	bl	80002b8 <__aeabi_dsub>
 8014ef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ef4:	f7eb f9e2 	bl	80002bc <__adddf3>
 8014ef8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014efc:	e9ca 0100 	strd	r0, r1, [sl]
 8014f00:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8014f04:	e756      	b.n	8014db4 <__kernel_rem_pio2+0x4fc>
 8014f06:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014f0a:	f7eb f9d7 	bl	80002bc <__adddf3>
 8014f0e:	3d01      	subs	r5, #1
 8014f10:	e756      	b.n	8014dc0 <__kernel_rem_pio2+0x508>
 8014f12:	9b01      	ldr	r3, [sp, #4]
 8014f14:	9a01      	ldr	r2, [sp, #4]
 8014f16:	601f      	str	r7, [r3, #0]
 8014f18:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8014f1c:	605c      	str	r4, [r3, #4]
 8014f1e:	609d      	str	r5, [r3, #8]
 8014f20:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014f24:	60d3      	str	r3, [r2, #12]
 8014f26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014f2a:	6110      	str	r0, [r2, #16]
 8014f2c:	6153      	str	r3, [r2, #20]
 8014f2e:	e78e      	b.n	8014e4e <__kernel_rem_pio2+0x596>
 8014f30:	41700000 	.word	0x41700000
 8014f34:	3e700000 	.word	0x3e700000

08014f38 <__kernel_sin>:
 8014f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f3c:	ec55 4b10 	vmov	r4, r5, d0
 8014f40:	b085      	sub	sp, #20
 8014f42:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014f46:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014f4a:	ed8d 1b00 	vstr	d1, [sp]
 8014f4e:	9002      	str	r0, [sp, #8]
 8014f50:	da06      	bge.n	8014f60 <__kernel_sin+0x28>
 8014f52:	ee10 0a10 	vmov	r0, s0
 8014f56:	4629      	mov	r1, r5
 8014f58:	f7eb fe16 	bl	8000b88 <__aeabi_d2iz>
 8014f5c:	2800      	cmp	r0, #0
 8014f5e:	d051      	beq.n	8015004 <__kernel_sin+0xcc>
 8014f60:	4622      	mov	r2, r4
 8014f62:	462b      	mov	r3, r5
 8014f64:	4620      	mov	r0, r4
 8014f66:	4629      	mov	r1, r5
 8014f68:	f7eb fb5e 	bl	8000628 <__aeabi_dmul>
 8014f6c:	4682      	mov	sl, r0
 8014f6e:	468b      	mov	fp, r1
 8014f70:	4602      	mov	r2, r0
 8014f72:	460b      	mov	r3, r1
 8014f74:	4620      	mov	r0, r4
 8014f76:	4629      	mov	r1, r5
 8014f78:	f7eb fb56 	bl	8000628 <__aeabi_dmul>
 8014f7c:	a341      	add	r3, pc, #260	; (adr r3, 8015084 <__kernel_sin+0x14c>)
 8014f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f82:	4680      	mov	r8, r0
 8014f84:	4689      	mov	r9, r1
 8014f86:	4650      	mov	r0, sl
 8014f88:	4659      	mov	r1, fp
 8014f8a:	f7eb fb4d 	bl	8000628 <__aeabi_dmul>
 8014f8e:	a33f      	add	r3, pc, #252	; (adr r3, 801508c <__kernel_sin+0x154>)
 8014f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f94:	f7eb f990 	bl	80002b8 <__aeabi_dsub>
 8014f98:	4652      	mov	r2, sl
 8014f9a:	465b      	mov	r3, fp
 8014f9c:	f7eb fb44 	bl	8000628 <__aeabi_dmul>
 8014fa0:	a33c      	add	r3, pc, #240	; (adr r3, 8015094 <__kernel_sin+0x15c>)
 8014fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fa6:	f7eb f989 	bl	80002bc <__adddf3>
 8014faa:	4652      	mov	r2, sl
 8014fac:	465b      	mov	r3, fp
 8014fae:	f7eb fb3b 	bl	8000628 <__aeabi_dmul>
 8014fb2:	a33a      	add	r3, pc, #232	; (adr r3, 801509c <__kernel_sin+0x164>)
 8014fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fb8:	f7eb f97e 	bl	80002b8 <__aeabi_dsub>
 8014fbc:	4652      	mov	r2, sl
 8014fbe:	465b      	mov	r3, fp
 8014fc0:	f7eb fb32 	bl	8000628 <__aeabi_dmul>
 8014fc4:	a337      	add	r3, pc, #220	; (adr r3, 80150a4 <__kernel_sin+0x16c>)
 8014fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fca:	f7eb f977 	bl	80002bc <__adddf3>
 8014fce:	9b02      	ldr	r3, [sp, #8]
 8014fd0:	4606      	mov	r6, r0
 8014fd2:	460f      	mov	r7, r1
 8014fd4:	b9db      	cbnz	r3, 801500e <__kernel_sin+0xd6>
 8014fd6:	4602      	mov	r2, r0
 8014fd8:	460b      	mov	r3, r1
 8014fda:	4650      	mov	r0, sl
 8014fdc:	4659      	mov	r1, fp
 8014fde:	f7eb fb23 	bl	8000628 <__aeabi_dmul>
 8014fe2:	a325      	add	r3, pc, #148	; (adr r3, 8015078 <__kernel_sin+0x140>)
 8014fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fe8:	f7eb f966 	bl	80002b8 <__aeabi_dsub>
 8014fec:	4642      	mov	r2, r8
 8014fee:	464b      	mov	r3, r9
 8014ff0:	f7eb fb1a 	bl	8000628 <__aeabi_dmul>
 8014ff4:	4602      	mov	r2, r0
 8014ff6:	460b      	mov	r3, r1
 8014ff8:	4620      	mov	r0, r4
 8014ffa:	4629      	mov	r1, r5
 8014ffc:	f7eb f95e 	bl	80002bc <__adddf3>
 8015000:	4604      	mov	r4, r0
 8015002:	460d      	mov	r5, r1
 8015004:	ec45 4b10 	vmov	d0, r4, r5
 8015008:	b005      	add	sp, #20
 801500a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801500e:	2200      	movs	r2, #0
 8015010:	4b1b      	ldr	r3, [pc, #108]	; (8015080 <__kernel_sin+0x148>)
 8015012:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015016:	f7eb fb07 	bl	8000628 <__aeabi_dmul>
 801501a:	4632      	mov	r2, r6
 801501c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015020:	463b      	mov	r3, r7
 8015022:	4640      	mov	r0, r8
 8015024:	4649      	mov	r1, r9
 8015026:	f7eb faff 	bl	8000628 <__aeabi_dmul>
 801502a:	4602      	mov	r2, r0
 801502c:	460b      	mov	r3, r1
 801502e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015032:	f7eb f941 	bl	80002b8 <__aeabi_dsub>
 8015036:	4652      	mov	r2, sl
 8015038:	465b      	mov	r3, fp
 801503a:	f7eb faf5 	bl	8000628 <__aeabi_dmul>
 801503e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015042:	f7eb f939 	bl	80002b8 <__aeabi_dsub>
 8015046:	a30c      	add	r3, pc, #48	; (adr r3, 8015078 <__kernel_sin+0x140>)
 8015048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801504c:	4606      	mov	r6, r0
 801504e:	460f      	mov	r7, r1
 8015050:	4640      	mov	r0, r8
 8015052:	4649      	mov	r1, r9
 8015054:	f7eb fae8 	bl	8000628 <__aeabi_dmul>
 8015058:	4602      	mov	r2, r0
 801505a:	460b      	mov	r3, r1
 801505c:	4630      	mov	r0, r6
 801505e:	4639      	mov	r1, r7
 8015060:	f7eb f92c 	bl	80002bc <__adddf3>
 8015064:	4602      	mov	r2, r0
 8015066:	460b      	mov	r3, r1
 8015068:	4620      	mov	r0, r4
 801506a:	4629      	mov	r1, r5
 801506c:	f7eb f924 	bl	80002b8 <__aeabi_dsub>
 8015070:	e7c6      	b.n	8015000 <__kernel_sin+0xc8>
 8015072:	bf00      	nop
 8015074:	f3af 8000 	nop.w
 8015078:	55555549 	.word	0x55555549
 801507c:	3fc55555 	.word	0x3fc55555
 8015080:	3fe00000 	.word	0x3fe00000
 8015084:	5acfd57c 	.word	0x5acfd57c
 8015088:	3de5d93a 	.word	0x3de5d93a
 801508c:	8a2b9ceb 	.word	0x8a2b9ceb
 8015090:	3e5ae5e6 	.word	0x3e5ae5e6
 8015094:	57b1fe7d 	.word	0x57b1fe7d
 8015098:	3ec71de3 	.word	0x3ec71de3
 801509c:	19c161d5 	.word	0x19c161d5
 80150a0:	3f2a01a0 	.word	0x3f2a01a0
 80150a4:	1110f8a6 	.word	0x1110f8a6
 80150a8:	3f811111 	.word	0x3f811111

080150ac <fabs>:
 80150ac:	ec51 0b10 	vmov	r0, r1, d0
 80150b0:	ee10 2a10 	vmov	r2, s0
 80150b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80150b8:	ec43 2b10 	vmov	d0, r2, r3
 80150bc:	4770      	bx	lr
	...

080150c0 <floor>:
 80150c0:	ec51 0b10 	vmov	r0, r1, d0
 80150c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80150cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80150d0:	2e13      	cmp	r6, #19
 80150d2:	460c      	mov	r4, r1
 80150d4:	ee10 5a10 	vmov	r5, s0
 80150d8:	4680      	mov	r8, r0
 80150da:	dc34      	bgt.n	8015146 <floor+0x86>
 80150dc:	2e00      	cmp	r6, #0
 80150de:	da16      	bge.n	801510e <floor+0x4e>
 80150e0:	a335      	add	r3, pc, #212	; (adr r3, 80151b8 <floor+0xf8>)
 80150e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150e6:	f7eb f8e9 	bl	80002bc <__adddf3>
 80150ea:	2200      	movs	r2, #0
 80150ec:	2300      	movs	r3, #0
 80150ee:	f7eb fd2b 	bl	8000b48 <__aeabi_dcmpgt>
 80150f2:	b148      	cbz	r0, 8015108 <floor+0x48>
 80150f4:	2c00      	cmp	r4, #0
 80150f6:	da59      	bge.n	80151ac <floor+0xec>
 80150f8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80150fc:	4a30      	ldr	r2, [pc, #192]	; (80151c0 <floor+0x100>)
 80150fe:	432b      	orrs	r3, r5
 8015100:	2500      	movs	r5, #0
 8015102:	42ab      	cmp	r3, r5
 8015104:	bf18      	it	ne
 8015106:	4614      	movne	r4, r2
 8015108:	4621      	mov	r1, r4
 801510a:	4628      	mov	r0, r5
 801510c:	e025      	b.n	801515a <floor+0x9a>
 801510e:	4f2d      	ldr	r7, [pc, #180]	; (80151c4 <floor+0x104>)
 8015110:	4137      	asrs	r7, r6
 8015112:	ea01 0307 	and.w	r3, r1, r7
 8015116:	4303      	orrs	r3, r0
 8015118:	d01f      	beq.n	801515a <floor+0x9a>
 801511a:	a327      	add	r3, pc, #156	; (adr r3, 80151b8 <floor+0xf8>)
 801511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015120:	f7eb f8cc 	bl	80002bc <__adddf3>
 8015124:	2200      	movs	r2, #0
 8015126:	2300      	movs	r3, #0
 8015128:	f7eb fd0e 	bl	8000b48 <__aeabi_dcmpgt>
 801512c:	2800      	cmp	r0, #0
 801512e:	d0eb      	beq.n	8015108 <floor+0x48>
 8015130:	2c00      	cmp	r4, #0
 8015132:	bfbe      	ittt	lt
 8015134:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015138:	fa43 f606 	asrlt.w	r6, r3, r6
 801513c:	19a4      	addlt	r4, r4, r6
 801513e:	ea24 0407 	bic.w	r4, r4, r7
 8015142:	2500      	movs	r5, #0
 8015144:	e7e0      	b.n	8015108 <floor+0x48>
 8015146:	2e33      	cmp	r6, #51	; 0x33
 8015148:	dd0b      	ble.n	8015162 <floor+0xa2>
 801514a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801514e:	d104      	bne.n	801515a <floor+0x9a>
 8015150:	ee10 2a10 	vmov	r2, s0
 8015154:	460b      	mov	r3, r1
 8015156:	f7eb f8b1 	bl	80002bc <__adddf3>
 801515a:	ec41 0b10 	vmov	d0, r0, r1
 801515e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015162:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015166:	f04f 33ff 	mov.w	r3, #4294967295
 801516a:	fa23 f707 	lsr.w	r7, r3, r7
 801516e:	4207      	tst	r7, r0
 8015170:	d0f3      	beq.n	801515a <floor+0x9a>
 8015172:	a311      	add	r3, pc, #68	; (adr r3, 80151b8 <floor+0xf8>)
 8015174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015178:	f7eb f8a0 	bl	80002bc <__adddf3>
 801517c:	2200      	movs	r2, #0
 801517e:	2300      	movs	r3, #0
 8015180:	f7eb fce2 	bl	8000b48 <__aeabi_dcmpgt>
 8015184:	2800      	cmp	r0, #0
 8015186:	d0bf      	beq.n	8015108 <floor+0x48>
 8015188:	2c00      	cmp	r4, #0
 801518a:	da02      	bge.n	8015192 <floor+0xd2>
 801518c:	2e14      	cmp	r6, #20
 801518e:	d103      	bne.n	8015198 <floor+0xd8>
 8015190:	3401      	adds	r4, #1
 8015192:	ea25 0507 	bic.w	r5, r5, r7
 8015196:	e7b7      	b.n	8015108 <floor+0x48>
 8015198:	2301      	movs	r3, #1
 801519a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801519e:	fa03 f606 	lsl.w	r6, r3, r6
 80151a2:	4435      	add	r5, r6
 80151a4:	4545      	cmp	r5, r8
 80151a6:	bf38      	it	cc
 80151a8:	18e4      	addcc	r4, r4, r3
 80151aa:	e7f2      	b.n	8015192 <floor+0xd2>
 80151ac:	2500      	movs	r5, #0
 80151ae:	462c      	mov	r4, r5
 80151b0:	e7aa      	b.n	8015108 <floor+0x48>
 80151b2:	bf00      	nop
 80151b4:	f3af 8000 	nop.w
 80151b8:	8800759c 	.word	0x8800759c
 80151bc:	7e37e43c 	.word	0x7e37e43c
 80151c0:	bff00000 	.word	0xbff00000
 80151c4:	000fffff 	.word	0x000fffff

080151c8 <scalbn>:
 80151c8:	b570      	push	{r4, r5, r6, lr}
 80151ca:	ec55 4b10 	vmov	r4, r5, d0
 80151ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80151d2:	4606      	mov	r6, r0
 80151d4:	462b      	mov	r3, r5
 80151d6:	b9aa      	cbnz	r2, 8015204 <scalbn+0x3c>
 80151d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80151dc:	4323      	orrs	r3, r4
 80151de:	d03b      	beq.n	8015258 <scalbn+0x90>
 80151e0:	4b31      	ldr	r3, [pc, #196]	; (80152a8 <scalbn+0xe0>)
 80151e2:	4629      	mov	r1, r5
 80151e4:	2200      	movs	r2, #0
 80151e6:	ee10 0a10 	vmov	r0, s0
 80151ea:	f7eb fa1d 	bl	8000628 <__aeabi_dmul>
 80151ee:	4b2f      	ldr	r3, [pc, #188]	; (80152ac <scalbn+0xe4>)
 80151f0:	429e      	cmp	r6, r3
 80151f2:	4604      	mov	r4, r0
 80151f4:	460d      	mov	r5, r1
 80151f6:	da12      	bge.n	801521e <scalbn+0x56>
 80151f8:	a327      	add	r3, pc, #156	; (adr r3, 8015298 <scalbn+0xd0>)
 80151fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151fe:	f7eb fa13 	bl	8000628 <__aeabi_dmul>
 8015202:	e009      	b.n	8015218 <scalbn+0x50>
 8015204:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015208:	428a      	cmp	r2, r1
 801520a:	d10c      	bne.n	8015226 <scalbn+0x5e>
 801520c:	ee10 2a10 	vmov	r2, s0
 8015210:	4620      	mov	r0, r4
 8015212:	4629      	mov	r1, r5
 8015214:	f7eb f852 	bl	80002bc <__adddf3>
 8015218:	4604      	mov	r4, r0
 801521a:	460d      	mov	r5, r1
 801521c:	e01c      	b.n	8015258 <scalbn+0x90>
 801521e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015222:	460b      	mov	r3, r1
 8015224:	3a36      	subs	r2, #54	; 0x36
 8015226:	4432      	add	r2, r6
 8015228:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801522c:	428a      	cmp	r2, r1
 801522e:	dd0b      	ble.n	8015248 <scalbn+0x80>
 8015230:	ec45 4b11 	vmov	d1, r4, r5
 8015234:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80152a0 <scalbn+0xd8>
 8015238:	f000 f83c 	bl	80152b4 <copysign>
 801523c:	a318      	add	r3, pc, #96	; (adr r3, 80152a0 <scalbn+0xd8>)
 801523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015242:	ec51 0b10 	vmov	r0, r1, d0
 8015246:	e7da      	b.n	80151fe <scalbn+0x36>
 8015248:	2a00      	cmp	r2, #0
 801524a:	dd08      	ble.n	801525e <scalbn+0x96>
 801524c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015250:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015254:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015258:	ec45 4b10 	vmov	d0, r4, r5
 801525c:	bd70      	pop	{r4, r5, r6, pc}
 801525e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015262:	da0d      	bge.n	8015280 <scalbn+0xb8>
 8015264:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015268:	429e      	cmp	r6, r3
 801526a:	ec45 4b11 	vmov	d1, r4, r5
 801526e:	dce1      	bgt.n	8015234 <scalbn+0x6c>
 8015270:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015298 <scalbn+0xd0>
 8015274:	f000 f81e 	bl	80152b4 <copysign>
 8015278:	a307      	add	r3, pc, #28	; (adr r3, 8015298 <scalbn+0xd0>)
 801527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801527e:	e7e0      	b.n	8015242 <scalbn+0x7a>
 8015280:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015284:	3236      	adds	r2, #54	; 0x36
 8015286:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801528a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801528e:	4620      	mov	r0, r4
 8015290:	4629      	mov	r1, r5
 8015292:	2200      	movs	r2, #0
 8015294:	4b06      	ldr	r3, [pc, #24]	; (80152b0 <scalbn+0xe8>)
 8015296:	e7b2      	b.n	80151fe <scalbn+0x36>
 8015298:	c2f8f359 	.word	0xc2f8f359
 801529c:	01a56e1f 	.word	0x01a56e1f
 80152a0:	8800759c 	.word	0x8800759c
 80152a4:	7e37e43c 	.word	0x7e37e43c
 80152a8:	43500000 	.word	0x43500000
 80152ac:	ffff3cb0 	.word	0xffff3cb0
 80152b0:	3c900000 	.word	0x3c900000

080152b4 <copysign>:
 80152b4:	ec51 0b10 	vmov	r0, r1, d0
 80152b8:	ee11 0a90 	vmov	r0, s3
 80152bc:	ee10 2a10 	vmov	r2, s0
 80152c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80152c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80152c8:	ea41 0300 	orr.w	r3, r1, r0
 80152cc:	ec43 2b10 	vmov	d0, r2, r3
 80152d0:	4770      	bx	lr
	...

080152d4 <__errno>:
 80152d4:	4b01      	ldr	r3, [pc, #4]	; (80152dc <__errno+0x8>)
 80152d6:	6818      	ldr	r0, [r3, #0]
 80152d8:	4770      	bx	lr
 80152da:	bf00      	nop
 80152dc:	2000000c 	.word	0x2000000c

080152e0 <__libc_init_array>:
 80152e0:	b570      	push	{r4, r5, r6, lr}
 80152e2:	4e0d      	ldr	r6, [pc, #52]	; (8015318 <__libc_init_array+0x38>)
 80152e4:	4c0d      	ldr	r4, [pc, #52]	; (801531c <__libc_init_array+0x3c>)
 80152e6:	1ba4      	subs	r4, r4, r6
 80152e8:	10a4      	asrs	r4, r4, #2
 80152ea:	2500      	movs	r5, #0
 80152ec:	42a5      	cmp	r5, r4
 80152ee:	d109      	bne.n	8015304 <__libc_init_array+0x24>
 80152f0:	4e0b      	ldr	r6, [pc, #44]	; (8015320 <__libc_init_array+0x40>)
 80152f2:	4c0c      	ldr	r4, [pc, #48]	; (8015324 <__libc_init_array+0x44>)
 80152f4:	f004 f9e8 	bl	80196c8 <_init>
 80152f8:	1ba4      	subs	r4, r4, r6
 80152fa:	10a4      	asrs	r4, r4, #2
 80152fc:	2500      	movs	r5, #0
 80152fe:	42a5      	cmp	r5, r4
 8015300:	d105      	bne.n	801530e <__libc_init_array+0x2e>
 8015302:	bd70      	pop	{r4, r5, r6, pc}
 8015304:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015308:	4798      	blx	r3
 801530a:	3501      	adds	r5, #1
 801530c:	e7ee      	b.n	80152ec <__libc_init_array+0xc>
 801530e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015312:	4798      	blx	r3
 8015314:	3501      	adds	r5, #1
 8015316:	e7f2      	b.n	80152fe <__libc_init_array+0x1e>
 8015318:	0801a2cc 	.word	0x0801a2cc
 801531c:	0801a2cc 	.word	0x0801a2cc
 8015320:	0801a2cc 	.word	0x0801a2cc
 8015324:	0801a2d4 	.word	0x0801a2d4

08015328 <memcpy>:
 8015328:	b510      	push	{r4, lr}
 801532a:	1e43      	subs	r3, r0, #1
 801532c:	440a      	add	r2, r1
 801532e:	4291      	cmp	r1, r2
 8015330:	d100      	bne.n	8015334 <memcpy+0xc>
 8015332:	bd10      	pop	{r4, pc}
 8015334:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015338:	f803 4f01 	strb.w	r4, [r3, #1]!
 801533c:	e7f7      	b.n	801532e <memcpy+0x6>

0801533e <memset>:
 801533e:	4402      	add	r2, r0
 8015340:	4603      	mov	r3, r0
 8015342:	4293      	cmp	r3, r2
 8015344:	d100      	bne.n	8015348 <memset+0xa>
 8015346:	4770      	bx	lr
 8015348:	f803 1b01 	strb.w	r1, [r3], #1
 801534c:	e7f9      	b.n	8015342 <memset+0x4>

0801534e <__cvt>:
 801534e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015352:	ec55 4b10 	vmov	r4, r5, d0
 8015356:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015358:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801535c:	2d00      	cmp	r5, #0
 801535e:	460e      	mov	r6, r1
 8015360:	4691      	mov	r9, r2
 8015362:	4619      	mov	r1, r3
 8015364:	bfb8      	it	lt
 8015366:	4622      	movlt	r2, r4
 8015368:	462b      	mov	r3, r5
 801536a:	f027 0720 	bic.w	r7, r7, #32
 801536e:	bfbb      	ittet	lt
 8015370:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015374:	461d      	movlt	r5, r3
 8015376:	2300      	movge	r3, #0
 8015378:	232d      	movlt	r3, #45	; 0x2d
 801537a:	bfb8      	it	lt
 801537c:	4614      	movlt	r4, r2
 801537e:	2f46      	cmp	r7, #70	; 0x46
 8015380:	700b      	strb	r3, [r1, #0]
 8015382:	d004      	beq.n	801538e <__cvt+0x40>
 8015384:	2f45      	cmp	r7, #69	; 0x45
 8015386:	d100      	bne.n	801538a <__cvt+0x3c>
 8015388:	3601      	adds	r6, #1
 801538a:	2102      	movs	r1, #2
 801538c:	e000      	b.n	8015390 <__cvt+0x42>
 801538e:	2103      	movs	r1, #3
 8015390:	ab03      	add	r3, sp, #12
 8015392:	9301      	str	r3, [sp, #4]
 8015394:	ab02      	add	r3, sp, #8
 8015396:	9300      	str	r3, [sp, #0]
 8015398:	4632      	mov	r2, r6
 801539a:	4653      	mov	r3, sl
 801539c:	ec45 4b10 	vmov	d0, r4, r5
 80153a0:	f001 fdfe 	bl	8016fa0 <_dtoa_r>
 80153a4:	2f47      	cmp	r7, #71	; 0x47
 80153a6:	4680      	mov	r8, r0
 80153a8:	d102      	bne.n	80153b0 <__cvt+0x62>
 80153aa:	f019 0f01 	tst.w	r9, #1
 80153ae:	d026      	beq.n	80153fe <__cvt+0xb0>
 80153b0:	2f46      	cmp	r7, #70	; 0x46
 80153b2:	eb08 0906 	add.w	r9, r8, r6
 80153b6:	d111      	bne.n	80153dc <__cvt+0x8e>
 80153b8:	f898 3000 	ldrb.w	r3, [r8]
 80153bc:	2b30      	cmp	r3, #48	; 0x30
 80153be:	d10a      	bne.n	80153d6 <__cvt+0x88>
 80153c0:	2200      	movs	r2, #0
 80153c2:	2300      	movs	r3, #0
 80153c4:	4620      	mov	r0, r4
 80153c6:	4629      	mov	r1, r5
 80153c8:	f7eb fb96 	bl	8000af8 <__aeabi_dcmpeq>
 80153cc:	b918      	cbnz	r0, 80153d6 <__cvt+0x88>
 80153ce:	f1c6 0601 	rsb	r6, r6, #1
 80153d2:	f8ca 6000 	str.w	r6, [sl]
 80153d6:	f8da 3000 	ldr.w	r3, [sl]
 80153da:	4499      	add	r9, r3
 80153dc:	2200      	movs	r2, #0
 80153de:	2300      	movs	r3, #0
 80153e0:	4620      	mov	r0, r4
 80153e2:	4629      	mov	r1, r5
 80153e4:	f7eb fb88 	bl	8000af8 <__aeabi_dcmpeq>
 80153e8:	b938      	cbnz	r0, 80153fa <__cvt+0xac>
 80153ea:	2230      	movs	r2, #48	; 0x30
 80153ec:	9b03      	ldr	r3, [sp, #12]
 80153ee:	454b      	cmp	r3, r9
 80153f0:	d205      	bcs.n	80153fe <__cvt+0xb0>
 80153f2:	1c59      	adds	r1, r3, #1
 80153f4:	9103      	str	r1, [sp, #12]
 80153f6:	701a      	strb	r2, [r3, #0]
 80153f8:	e7f8      	b.n	80153ec <__cvt+0x9e>
 80153fa:	f8cd 900c 	str.w	r9, [sp, #12]
 80153fe:	9b03      	ldr	r3, [sp, #12]
 8015400:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015402:	eba3 0308 	sub.w	r3, r3, r8
 8015406:	4640      	mov	r0, r8
 8015408:	6013      	str	r3, [r2, #0]
 801540a:	b004      	add	sp, #16
 801540c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015410 <__exponent>:
 8015410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015412:	2900      	cmp	r1, #0
 8015414:	4604      	mov	r4, r0
 8015416:	bfba      	itte	lt
 8015418:	4249      	neglt	r1, r1
 801541a:	232d      	movlt	r3, #45	; 0x2d
 801541c:	232b      	movge	r3, #43	; 0x2b
 801541e:	2909      	cmp	r1, #9
 8015420:	f804 2b02 	strb.w	r2, [r4], #2
 8015424:	7043      	strb	r3, [r0, #1]
 8015426:	dd20      	ble.n	801546a <__exponent+0x5a>
 8015428:	f10d 0307 	add.w	r3, sp, #7
 801542c:	461f      	mov	r7, r3
 801542e:	260a      	movs	r6, #10
 8015430:	fb91 f5f6 	sdiv	r5, r1, r6
 8015434:	fb06 1115 	mls	r1, r6, r5, r1
 8015438:	3130      	adds	r1, #48	; 0x30
 801543a:	2d09      	cmp	r5, #9
 801543c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015440:	f103 32ff 	add.w	r2, r3, #4294967295
 8015444:	4629      	mov	r1, r5
 8015446:	dc09      	bgt.n	801545c <__exponent+0x4c>
 8015448:	3130      	adds	r1, #48	; 0x30
 801544a:	3b02      	subs	r3, #2
 801544c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015450:	42bb      	cmp	r3, r7
 8015452:	4622      	mov	r2, r4
 8015454:	d304      	bcc.n	8015460 <__exponent+0x50>
 8015456:	1a10      	subs	r0, r2, r0
 8015458:	b003      	add	sp, #12
 801545a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801545c:	4613      	mov	r3, r2
 801545e:	e7e7      	b.n	8015430 <__exponent+0x20>
 8015460:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015464:	f804 2b01 	strb.w	r2, [r4], #1
 8015468:	e7f2      	b.n	8015450 <__exponent+0x40>
 801546a:	2330      	movs	r3, #48	; 0x30
 801546c:	4419      	add	r1, r3
 801546e:	7083      	strb	r3, [r0, #2]
 8015470:	1d02      	adds	r2, r0, #4
 8015472:	70c1      	strb	r1, [r0, #3]
 8015474:	e7ef      	b.n	8015456 <__exponent+0x46>
	...

08015478 <_printf_float>:
 8015478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801547c:	b08d      	sub	sp, #52	; 0x34
 801547e:	460c      	mov	r4, r1
 8015480:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015484:	4616      	mov	r6, r2
 8015486:	461f      	mov	r7, r3
 8015488:	4605      	mov	r5, r0
 801548a:	f002 fe7b 	bl	8018184 <_localeconv_r>
 801548e:	6803      	ldr	r3, [r0, #0]
 8015490:	9304      	str	r3, [sp, #16]
 8015492:	4618      	mov	r0, r3
 8015494:	f7ea feb4 	bl	8000200 <strlen>
 8015498:	2300      	movs	r3, #0
 801549a:	930a      	str	r3, [sp, #40]	; 0x28
 801549c:	f8d8 3000 	ldr.w	r3, [r8]
 80154a0:	9005      	str	r0, [sp, #20]
 80154a2:	3307      	adds	r3, #7
 80154a4:	f023 0307 	bic.w	r3, r3, #7
 80154a8:	f103 0208 	add.w	r2, r3, #8
 80154ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80154b0:	f8d4 b000 	ldr.w	fp, [r4]
 80154b4:	f8c8 2000 	str.w	r2, [r8]
 80154b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154bc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80154c0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80154c4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80154c8:	9307      	str	r3, [sp, #28]
 80154ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80154ce:	f04f 32ff 	mov.w	r2, #4294967295
 80154d2:	4ba7      	ldr	r3, [pc, #668]	; (8015770 <_printf_float+0x2f8>)
 80154d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80154d8:	f7eb fb40 	bl	8000b5c <__aeabi_dcmpun>
 80154dc:	bb70      	cbnz	r0, 801553c <_printf_float+0xc4>
 80154de:	f04f 32ff 	mov.w	r2, #4294967295
 80154e2:	4ba3      	ldr	r3, [pc, #652]	; (8015770 <_printf_float+0x2f8>)
 80154e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80154e8:	f7eb fb1a 	bl	8000b20 <__aeabi_dcmple>
 80154ec:	bb30      	cbnz	r0, 801553c <_printf_float+0xc4>
 80154ee:	2200      	movs	r2, #0
 80154f0:	2300      	movs	r3, #0
 80154f2:	4640      	mov	r0, r8
 80154f4:	4649      	mov	r1, r9
 80154f6:	f7eb fb09 	bl	8000b0c <__aeabi_dcmplt>
 80154fa:	b110      	cbz	r0, 8015502 <_printf_float+0x8a>
 80154fc:	232d      	movs	r3, #45	; 0x2d
 80154fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015502:	4a9c      	ldr	r2, [pc, #624]	; (8015774 <_printf_float+0x2fc>)
 8015504:	4b9c      	ldr	r3, [pc, #624]	; (8015778 <_printf_float+0x300>)
 8015506:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801550a:	bf8c      	ite	hi
 801550c:	4690      	movhi	r8, r2
 801550e:	4698      	movls	r8, r3
 8015510:	2303      	movs	r3, #3
 8015512:	f02b 0204 	bic.w	r2, fp, #4
 8015516:	6123      	str	r3, [r4, #16]
 8015518:	6022      	str	r2, [r4, #0]
 801551a:	f04f 0900 	mov.w	r9, #0
 801551e:	9700      	str	r7, [sp, #0]
 8015520:	4633      	mov	r3, r6
 8015522:	aa0b      	add	r2, sp, #44	; 0x2c
 8015524:	4621      	mov	r1, r4
 8015526:	4628      	mov	r0, r5
 8015528:	f000 f9e6 	bl	80158f8 <_printf_common>
 801552c:	3001      	adds	r0, #1
 801552e:	f040 808d 	bne.w	801564c <_printf_float+0x1d4>
 8015532:	f04f 30ff 	mov.w	r0, #4294967295
 8015536:	b00d      	add	sp, #52	; 0x34
 8015538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801553c:	4642      	mov	r2, r8
 801553e:	464b      	mov	r3, r9
 8015540:	4640      	mov	r0, r8
 8015542:	4649      	mov	r1, r9
 8015544:	f7eb fb0a 	bl	8000b5c <__aeabi_dcmpun>
 8015548:	b110      	cbz	r0, 8015550 <_printf_float+0xd8>
 801554a:	4a8c      	ldr	r2, [pc, #560]	; (801577c <_printf_float+0x304>)
 801554c:	4b8c      	ldr	r3, [pc, #560]	; (8015780 <_printf_float+0x308>)
 801554e:	e7da      	b.n	8015506 <_printf_float+0x8e>
 8015550:	6861      	ldr	r1, [r4, #4]
 8015552:	1c4b      	adds	r3, r1, #1
 8015554:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015558:	a80a      	add	r0, sp, #40	; 0x28
 801555a:	d13e      	bne.n	80155da <_printf_float+0x162>
 801555c:	2306      	movs	r3, #6
 801555e:	6063      	str	r3, [r4, #4]
 8015560:	2300      	movs	r3, #0
 8015562:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015566:	ab09      	add	r3, sp, #36	; 0x24
 8015568:	9300      	str	r3, [sp, #0]
 801556a:	ec49 8b10 	vmov	d0, r8, r9
 801556e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015572:	6022      	str	r2, [r4, #0]
 8015574:	f8cd a004 	str.w	sl, [sp, #4]
 8015578:	6861      	ldr	r1, [r4, #4]
 801557a:	4628      	mov	r0, r5
 801557c:	f7ff fee7 	bl	801534e <__cvt>
 8015580:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015584:	2b47      	cmp	r3, #71	; 0x47
 8015586:	4680      	mov	r8, r0
 8015588:	d109      	bne.n	801559e <_printf_float+0x126>
 801558a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801558c:	1cd8      	adds	r0, r3, #3
 801558e:	db02      	blt.n	8015596 <_printf_float+0x11e>
 8015590:	6862      	ldr	r2, [r4, #4]
 8015592:	4293      	cmp	r3, r2
 8015594:	dd47      	ble.n	8015626 <_printf_float+0x1ae>
 8015596:	f1aa 0a02 	sub.w	sl, sl, #2
 801559a:	fa5f fa8a 	uxtb.w	sl, sl
 801559e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80155a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80155a4:	d824      	bhi.n	80155f0 <_printf_float+0x178>
 80155a6:	3901      	subs	r1, #1
 80155a8:	4652      	mov	r2, sl
 80155aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80155ae:	9109      	str	r1, [sp, #36]	; 0x24
 80155b0:	f7ff ff2e 	bl	8015410 <__exponent>
 80155b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80155b6:	1813      	adds	r3, r2, r0
 80155b8:	2a01      	cmp	r2, #1
 80155ba:	4681      	mov	r9, r0
 80155bc:	6123      	str	r3, [r4, #16]
 80155be:	dc02      	bgt.n	80155c6 <_printf_float+0x14e>
 80155c0:	6822      	ldr	r2, [r4, #0]
 80155c2:	07d1      	lsls	r1, r2, #31
 80155c4:	d501      	bpl.n	80155ca <_printf_float+0x152>
 80155c6:	3301      	adds	r3, #1
 80155c8:	6123      	str	r3, [r4, #16]
 80155ca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d0a5      	beq.n	801551e <_printf_float+0xa6>
 80155d2:	232d      	movs	r3, #45	; 0x2d
 80155d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80155d8:	e7a1      	b.n	801551e <_printf_float+0xa6>
 80155da:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80155de:	f000 8177 	beq.w	80158d0 <_printf_float+0x458>
 80155e2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80155e6:	d1bb      	bne.n	8015560 <_printf_float+0xe8>
 80155e8:	2900      	cmp	r1, #0
 80155ea:	d1b9      	bne.n	8015560 <_printf_float+0xe8>
 80155ec:	2301      	movs	r3, #1
 80155ee:	e7b6      	b.n	801555e <_printf_float+0xe6>
 80155f0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80155f4:	d119      	bne.n	801562a <_printf_float+0x1b2>
 80155f6:	2900      	cmp	r1, #0
 80155f8:	6863      	ldr	r3, [r4, #4]
 80155fa:	dd0c      	ble.n	8015616 <_printf_float+0x19e>
 80155fc:	6121      	str	r1, [r4, #16]
 80155fe:	b913      	cbnz	r3, 8015606 <_printf_float+0x18e>
 8015600:	6822      	ldr	r2, [r4, #0]
 8015602:	07d2      	lsls	r2, r2, #31
 8015604:	d502      	bpl.n	801560c <_printf_float+0x194>
 8015606:	3301      	adds	r3, #1
 8015608:	440b      	add	r3, r1
 801560a:	6123      	str	r3, [r4, #16]
 801560c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801560e:	65a3      	str	r3, [r4, #88]	; 0x58
 8015610:	f04f 0900 	mov.w	r9, #0
 8015614:	e7d9      	b.n	80155ca <_printf_float+0x152>
 8015616:	b913      	cbnz	r3, 801561e <_printf_float+0x1a6>
 8015618:	6822      	ldr	r2, [r4, #0]
 801561a:	07d0      	lsls	r0, r2, #31
 801561c:	d501      	bpl.n	8015622 <_printf_float+0x1aa>
 801561e:	3302      	adds	r3, #2
 8015620:	e7f3      	b.n	801560a <_printf_float+0x192>
 8015622:	2301      	movs	r3, #1
 8015624:	e7f1      	b.n	801560a <_printf_float+0x192>
 8015626:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801562a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801562e:	4293      	cmp	r3, r2
 8015630:	db05      	blt.n	801563e <_printf_float+0x1c6>
 8015632:	6822      	ldr	r2, [r4, #0]
 8015634:	6123      	str	r3, [r4, #16]
 8015636:	07d1      	lsls	r1, r2, #31
 8015638:	d5e8      	bpl.n	801560c <_printf_float+0x194>
 801563a:	3301      	adds	r3, #1
 801563c:	e7e5      	b.n	801560a <_printf_float+0x192>
 801563e:	2b00      	cmp	r3, #0
 8015640:	bfd4      	ite	le
 8015642:	f1c3 0302 	rsble	r3, r3, #2
 8015646:	2301      	movgt	r3, #1
 8015648:	4413      	add	r3, r2
 801564a:	e7de      	b.n	801560a <_printf_float+0x192>
 801564c:	6823      	ldr	r3, [r4, #0]
 801564e:	055a      	lsls	r2, r3, #21
 8015650:	d407      	bmi.n	8015662 <_printf_float+0x1ea>
 8015652:	6923      	ldr	r3, [r4, #16]
 8015654:	4642      	mov	r2, r8
 8015656:	4631      	mov	r1, r6
 8015658:	4628      	mov	r0, r5
 801565a:	47b8      	blx	r7
 801565c:	3001      	adds	r0, #1
 801565e:	d12b      	bne.n	80156b8 <_printf_float+0x240>
 8015660:	e767      	b.n	8015532 <_printf_float+0xba>
 8015662:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015666:	f240 80dc 	bls.w	8015822 <_printf_float+0x3aa>
 801566a:	2200      	movs	r2, #0
 801566c:	2300      	movs	r3, #0
 801566e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015672:	f7eb fa41 	bl	8000af8 <__aeabi_dcmpeq>
 8015676:	2800      	cmp	r0, #0
 8015678:	d033      	beq.n	80156e2 <_printf_float+0x26a>
 801567a:	2301      	movs	r3, #1
 801567c:	4a41      	ldr	r2, [pc, #260]	; (8015784 <_printf_float+0x30c>)
 801567e:	4631      	mov	r1, r6
 8015680:	4628      	mov	r0, r5
 8015682:	47b8      	blx	r7
 8015684:	3001      	adds	r0, #1
 8015686:	f43f af54 	beq.w	8015532 <_printf_float+0xba>
 801568a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801568e:	429a      	cmp	r2, r3
 8015690:	db02      	blt.n	8015698 <_printf_float+0x220>
 8015692:	6823      	ldr	r3, [r4, #0]
 8015694:	07d8      	lsls	r0, r3, #31
 8015696:	d50f      	bpl.n	80156b8 <_printf_float+0x240>
 8015698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801569c:	4631      	mov	r1, r6
 801569e:	4628      	mov	r0, r5
 80156a0:	47b8      	blx	r7
 80156a2:	3001      	adds	r0, #1
 80156a4:	f43f af45 	beq.w	8015532 <_printf_float+0xba>
 80156a8:	f04f 0800 	mov.w	r8, #0
 80156ac:	f104 091a 	add.w	r9, r4, #26
 80156b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156b2:	3b01      	subs	r3, #1
 80156b4:	4543      	cmp	r3, r8
 80156b6:	dc09      	bgt.n	80156cc <_printf_float+0x254>
 80156b8:	6823      	ldr	r3, [r4, #0]
 80156ba:	079b      	lsls	r3, r3, #30
 80156bc:	f100 8103 	bmi.w	80158c6 <_printf_float+0x44e>
 80156c0:	68e0      	ldr	r0, [r4, #12]
 80156c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156c4:	4298      	cmp	r0, r3
 80156c6:	bfb8      	it	lt
 80156c8:	4618      	movlt	r0, r3
 80156ca:	e734      	b.n	8015536 <_printf_float+0xbe>
 80156cc:	2301      	movs	r3, #1
 80156ce:	464a      	mov	r2, r9
 80156d0:	4631      	mov	r1, r6
 80156d2:	4628      	mov	r0, r5
 80156d4:	47b8      	blx	r7
 80156d6:	3001      	adds	r0, #1
 80156d8:	f43f af2b 	beq.w	8015532 <_printf_float+0xba>
 80156dc:	f108 0801 	add.w	r8, r8, #1
 80156e0:	e7e6      	b.n	80156b0 <_printf_float+0x238>
 80156e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	dc2b      	bgt.n	8015740 <_printf_float+0x2c8>
 80156e8:	2301      	movs	r3, #1
 80156ea:	4a26      	ldr	r2, [pc, #152]	; (8015784 <_printf_float+0x30c>)
 80156ec:	4631      	mov	r1, r6
 80156ee:	4628      	mov	r0, r5
 80156f0:	47b8      	blx	r7
 80156f2:	3001      	adds	r0, #1
 80156f4:	f43f af1d 	beq.w	8015532 <_printf_float+0xba>
 80156f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156fa:	b923      	cbnz	r3, 8015706 <_printf_float+0x28e>
 80156fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156fe:	b913      	cbnz	r3, 8015706 <_printf_float+0x28e>
 8015700:	6823      	ldr	r3, [r4, #0]
 8015702:	07d9      	lsls	r1, r3, #31
 8015704:	d5d8      	bpl.n	80156b8 <_printf_float+0x240>
 8015706:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801570a:	4631      	mov	r1, r6
 801570c:	4628      	mov	r0, r5
 801570e:	47b8      	blx	r7
 8015710:	3001      	adds	r0, #1
 8015712:	f43f af0e 	beq.w	8015532 <_printf_float+0xba>
 8015716:	f04f 0900 	mov.w	r9, #0
 801571a:	f104 0a1a 	add.w	sl, r4, #26
 801571e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015720:	425b      	negs	r3, r3
 8015722:	454b      	cmp	r3, r9
 8015724:	dc01      	bgt.n	801572a <_printf_float+0x2b2>
 8015726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015728:	e794      	b.n	8015654 <_printf_float+0x1dc>
 801572a:	2301      	movs	r3, #1
 801572c:	4652      	mov	r2, sl
 801572e:	4631      	mov	r1, r6
 8015730:	4628      	mov	r0, r5
 8015732:	47b8      	blx	r7
 8015734:	3001      	adds	r0, #1
 8015736:	f43f aefc 	beq.w	8015532 <_printf_float+0xba>
 801573a:	f109 0901 	add.w	r9, r9, #1
 801573e:	e7ee      	b.n	801571e <_printf_float+0x2a6>
 8015740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015742:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015744:	429a      	cmp	r2, r3
 8015746:	bfa8      	it	ge
 8015748:	461a      	movge	r2, r3
 801574a:	2a00      	cmp	r2, #0
 801574c:	4691      	mov	r9, r2
 801574e:	dd07      	ble.n	8015760 <_printf_float+0x2e8>
 8015750:	4613      	mov	r3, r2
 8015752:	4631      	mov	r1, r6
 8015754:	4642      	mov	r2, r8
 8015756:	4628      	mov	r0, r5
 8015758:	47b8      	blx	r7
 801575a:	3001      	adds	r0, #1
 801575c:	f43f aee9 	beq.w	8015532 <_printf_float+0xba>
 8015760:	f104 031a 	add.w	r3, r4, #26
 8015764:	f04f 0b00 	mov.w	fp, #0
 8015768:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801576c:	9306      	str	r3, [sp, #24]
 801576e:	e015      	b.n	801579c <_printf_float+0x324>
 8015770:	7fefffff 	.word	0x7fefffff
 8015774:	08019f9c 	.word	0x08019f9c
 8015778:	08019f98 	.word	0x08019f98
 801577c:	08019fa4 	.word	0x08019fa4
 8015780:	08019fa0 	.word	0x08019fa0
 8015784:	0801a15b 	.word	0x0801a15b
 8015788:	2301      	movs	r3, #1
 801578a:	9a06      	ldr	r2, [sp, #24]
 801578c:	4631      	mov	r1, r6
 801578e:	4628      	mov	r0, r5
 8015790:	47b8      	blx	r7
 8015792:	3001      	adds	r0, #1
 8015794:	f43f aecd 	beq.w	8015532 <_printf_float+0xba>
 8015798:	f10b 0b01 	add.w	fp, fp, #1
 801579c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80157a0:	ebaa 0309 	sub.w	r3, sl, r9
 80157a4:	455b      	cmp	r3, fp
 80157a6:	dcef      	bgt.n	8015788 <_printf_float+0x310>
 80157a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80157ac:	429a      	cmp	r2, r3
 80157ae:	44d0      	add	r8, sl
 80157b0:	db15      	blt.n	80157de <_printf_float+0x366>
 80157b2:	6823      	ldr	r3, [r4, #0]
 80157b4:	07da      	lsls	r2, r3, #31
 80157b6:	d412      	bmi.n	80157de <_printf_float+0x366>
 80157b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80157bc:	eba3 020a 	sub.w	r2, r3, sl
 80157c0:	eba3 0a01 	sub.w	sl, r3, r1
 80157c4:	4592      	cmp	sl, r2
 80157c6:	bfa8      	it	ge
 80157c8:	4692      	movge	sl, r2
 80157ca:	f1ba 0f00 	cmp.w	sl, #0
 80157ce:	dc0e      	bgt.n	80157ee <_printf_float+0x376>
 80157d0:	f04f 0800 	mov.w	r8, #0
 80157d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80157d8:	f104 091a 	add.w	r9, r4, #26
 80157dc:	e019      	b.n	8015812 <_printf_float+0x39a>
 80157de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80157e2:	4631      	mov	r1, r6
 80157e4:	4628      	mov	r0, r5
 80157e6:	47b8      	blx	r7
 80157e8:	3001      	adds	r0, #1
 80157ea:	d1e5      	bne.n	80157b8 <_printf_float+0x340>
 80157ec:	e6a1      	b.n	8015532 <_printf_float+0xba>
 80157ee:	4653      	mov	r3, sl
 80157f0:	4642      	mov	r2, r8
 80157f2:	4631      	mov	r1, r6
 80157f4:	4628      	mov	r0, r5
 80157f6:	47b8      	blx	r7
 80157f8:	3001      	adds	r0, #1
 80157fa:	d1e9      	bne.n	80157d0 <_printf_float+0x358>
 80157fc:	e699      	b.n	8015532 <_printf_float+0xba>
 80157fe:	2301      	movs	r3, #1
 8015800:	464a      	mov	r2, r9
 8015802:	4631      	mov	r1, r6
 8015804:	4628      	mov	r0, r5
 8015806:	47b8      	blx	r7
 8015808:	3001      	adds	r0, #1
 801580a:	f43f ae92 	beq.w	8015532 <_printf_float+0xba>
 801580e:	f108 0801 	add.w	r8, r8, #1
 8015812:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015816:	1a9b      	subs	r3, r3, r2
 8015818:	eba3 030a 	sub.w	r3, r3, sl
 801581c:	4543      	cmp	r3, r8
 801581e:	dcee      	bgt.n	80157fe <_printf_float+0x386>
 8015820:	e74a      	b.n	80156b8 <_printf_float+0x240>
 8015822:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015824:	2a01      	cmp	r2, #1
 8015826:	dc01      	bgt.n	801582c <_printf_float+0x3b4>
 8015828:	07db      	lsls	r3, r3, #31
 801582a:	d53a      	bpl.n	80158a2 <_printf_float+0x42a>
 801582c:	2301      	movs	r3, #1
 801582e:	4642      	mov	r2, r8
 8015830:	4631      	mov	r1, r6
 8015832:	4628      	mov	r0, r5
 8015834:	47b8      	blx	r7
 8015836:	3001      	adds	r0, #1
 8015838:	f43f ae7b 	beq.w	8015532 <_printf_float+0xba>
 801583c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015840:	4631      	mov	r1, r6
 8015842:	4628      	mov	r0, r5
 8015844:	47b8      	blx	r7
 8015846:	3001      	adds	r0, #1
 8015848:	f108 0801 	add.w	r8, r8, #1
 801584c:	f43f ae71 	beq.w	8015532 <_printf_float+0xba>
 8015850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015852:	2200      	movs	r2, #0
 8015854:	f103 3aff 	add.w	sl, r3, #4294967295
 8015858:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801585c:	2300      	movs	r3, #0
 801585e:	f7eb f94b 	bl	8000af8 <__aeabi_dcmpeq>
 8015862:	b9c8      	cbnz	r0, 8015898 <_printf_float+0x420>
 8015864:	4653      	mov	r3, sl
 8015866:	4642      	mov	r2, r8
 8015868:	4631      	mov	r1, r6
 801586a:	4628      	mov	r0, r5
 801586c:	47b8      	blx	r7
 801586e:	3001      	adds	r0, #1
 8015870:	d10e      	bne.n	8015890 <_printf_float+0x418>
 8015872:	e65e      	b.n	8015532 <_printf_float+0xba>
 8015874:	2301      	movs	r3, #1
 8015876:	4652      	mov	r2, sl
 8015878:	4631      	mov	r1, r6
 801587a:	4628      	mov	r0, r5
 801587c:	47b8      	blx	r7
 801587e:	3001      	adds	r0, #1
 8015880:	f43f ae57 	beq.w	8015532 <_printf_float+0xba>
 8015884:	f108 0801 	add.w	r8, r8, #1
 8015888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801588a:	3b01      	subs	r3, #1
 801588c:	4543      	cmp	r3, r8
 801588e:	dcf1      	bgt.n	8015874 <_printf_float+0x3fc>
 8015890:	464b      	mov	r3, r9
 8015892:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015896:	e6de      	b.n	8015656 <_printf_float+0x1de>
 8015898:	f04f 0800 	mov.w	r8, #0
 801589c:	f104 0a1a 	add.w	sl, r4, #26
 80158a0:	e7f2      	b.n	8015888 <_printf_float+0x410>
 80158a2:	2301      	movs	r3, #1
 80158a4:	e7df      	b.n	8015866 <_printf_float+0x3ee>
 80158a6:	2301      	movs	r3, #1
 80158a8:	464a      	mov	r2, r9
 80158aa:	4631      	mov	r1, r6
 80158ac:	4628      	mov	r0, r5
 80158ae:	47b8      	blx	r7
 80158b0:	3001      	adds	r0, #1
 80158b2:	f43f ae3e 	beq.w	8015532 <_printf_float+0xba>
 80158b6:	f108 0801 	add.w	r8, r8, #1
 80158ba:	68e3      	ldr	r3, [r4, #12]
 80158bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80158be:	1a9b      	subs	r3, r3, r2
 80158c0:	4543      	cmp	r3, r8
 80158c2:	dcf0      	bgt.n	80158a6 <_printf_float+0x42e>
 80158c4:	e6fc      	b.n	80156c0 <_printf_float+0x248>
 80158c6:	f04f 0800 	mov.w	r8, #0
 80158ca:	f104 0919 	add.w	r9, r4, #25
 80158ce:	e7f4      	b.n	80158ba <_printf_float+0x442>
 80158d0:	2900      	cmp	r1, #0
 80158d2:	f43f ae8b 	beq.w	80155ec <_printf_float+0x174>
 80158d6:	2300      	movs	r3, #0
 80158d8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80158dc:	ab09      	add	r3, sp, #36	; 0x24
 80158de:	9300      	str	r3, [sp, #0]
 80158e0:	ec49 8b10 	vmov	d0, r8, r9
 80158e4:	6022      	str	r2, [r4, #0]
 80158e6:	f8cd a004 	str.w	sl, [sp, #4]
 80158ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80158ee:	4628      	mov	r0, r5
 80158f0:	f7ff fd2d 	bl	801534e <__cvt>
 80158f4:	4680      	mov	r8, r0
 80158f6:	e648      	b.n	801558a <_printf_float+0x112>

080158f8 <_printf_common>:
 80158f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80158fc:	4691      	mov	r9, r2
 80158fe:	461f      	mov	r7, r3
 8015900:	688a      	ldr	r2, [r1, #8]
 8015902:	690b      	ldr	r3, [r1, #16]
 8015904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015908:	4293      	cmp	r3, r2
 801590a:	bfb8      	it	lt
 801590c:	4613      	movlt	r3, r2
 801590e:	f8c9 3000 	str.w	r3, [r9]
 8015912:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015916:	4606      	mov	r6, r0
 8015918:	460c      	mov	r4, r1
 801591a:	b112      	cbz	r2, 8015922 <_printf_common+0x2a>
 801591c:	3301      	adds	r3, #1
 801591e:	f8c9 3000 	str.w	r3, [r9]
 8015922:	6823      	ldr	r3, [r4, #0]
 8015924:	0699      	lsls	r1, r3, #26
 8015926:	bf42      	ittt	mi
 8015928:	f8d9 3000 	ldrmi.w	r3, [r9]
 801592c:	3302      	addmi	r3, #2
 801592e:	f8c9 3000 	strmi.w	r3, [r9]
 8015932:	6825      	ldr	r5, [r4, #0]
 8015934:	f015 0506 	ands.w	r5, r5, #6
 8015938:	d107      	bne.n	801594a <_printf_common+0x52>
 801593a:	f104 0a19 	add.w	sl, r4, #25
 801593e:	68e3      	ldr	r3, [r4, #12]
 8015940:	f8d9 2000 	ldr.w	r2, [r9]
 8015944:	1a9b      	subs	r3, r3, r2
 8015946:	42ab      	cmp	r3, r5
 8015948:	dc28      	bgt.n	801599c <_printf_common+0xa4>
 801594a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801594e:	6822      	ldr	r2, [r4, #0]
 8015950:	3300      	adds	r3, #0
 8015952:	bf18      	it	ne
 8015954:	2301      	movne	r3, #1
 8015956:	0692      	lsls	r2, r2, #26
 8015958:	d42d      	bmi.n	80159b6 <_printf_common+0xbe>
 801595a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801595e:	4639      	mov	r1, r7
 8015960:	4630      	mov	r0, r6
 8015962:	47c0      	blx	r8
 8015964:	3001      	adds	r0, #1
 8015966:	d020      	beq.n	80159aa <_printf_common+0xb2>
 8015968:	6823      	ldr	r3, [r4, #0]
 801596a:	68e5      	ldr	r5, [r4, #12]
 801596c:	f8d9 2000 	ldr.w	r2, [r9]
 8015970:	f003 0306 	and.w	r3, r3, #6
 8015974:	2b04      	cmp	r3, #4
 8015976:	bf08      	it	eq
 8015978:	1aad      	subeq	r5, r5, r2
 801597a:	68a3      	ldr	r3, [r4, #8]
 801597c:	6922      	ldr	r2, [r4, #16]
 801597e:	bf0c      	ite	eq
 8015980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015984:	2500      	movne	r5, #0
 8015986:	4293      	cmp	r3, r2
 8015988:	bfc4      	itt	gt
 801598a:	1a9b      	subgt	r3, r3, r2
 801598c:	18ed      	addgt	r5, r5, r3
 801598e:	f04f 0900 	mov.w	r9, #0
 8015992:	341a      	adds	r4, #26
 8015994:	454d      	cmp	r5, r9
 8015996:	d11a      	bne.n	80159ce <_printf_common+0xd6>
 8015998:	2000      	movs	r0, #0
 801599a:	e008      	b.n	80159ae <_printf_common+0xb6>
 801599c:	2301      	movs	r3, #1
 801599e:	4652      	mov	r2, sl
 80159a0:	4639      	mov	r1, r7
 80159a2:	4630      	mov	r0, r6
 80159a4:	47c0      	blx	r8
 80159a6:	3001      	adds	r0, #1
 80159a8:	d103      	bne.n	80159b2 <_printf_common+0xba>
 80159aa:	f04f 30ff 	mov.w	r0, #4294967295
 80159ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159b2:	3501      	adds	r5, #1
 80159b4:	e7c3      	b.n	801593e <_printf_common+0x46>
 80159b6:	18e1      	adds	r1, r4, r3
 80159b8:	1c5a      	adds	r2, r3, #1
 80159ba:	2030      	movs	r0, #48	; 0x30
 80159bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80159c0:	4422      	add	r2, r4
 80159c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80159c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80159ca:	3302      	adds	r3, #2
 80159cc:	e7c5      	b.n	801595a <_printf_common+0x62>
 80159ce:	2301      	movs	r3, #1
 80159d0:	4622      	mov	r2, r4
 80159d2:	4639      	mov	r1, r7
 80159d4:	4630      	mov	r0, r6
 80159d6:	47c0      	blx	r8
 80159d8:	3001      	adds	r0, #1
 80159da:	d0e6      	beq.n	80159aa <_printf_common+0xb2>
 80159dc:	f109 0901 	add.w	r9, r9, #1
 80159e0:	e7d8      	b.n	8015994 <_printf_common+0x9c>
	...

080159e4 <_printf_i>:
 80159e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80159e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80159ec:	460c      	mov	r4, r1
 80159ee:	7e09      	ldrb	r1, [r1, #24]
 80159f0:	b085      	sub	sp, #20
 80159f2:	296e      	cmp	r1, #110	; 0x6e
 80159f4:	4617      	mov	r7, r2
 80159f6:	4606      	mov	r6, r0
 80159f8:	4698      	mov	r8, r3
 80159fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80159fc:	f000 80b3 	beq.w	8015b66 <_printf_i+0x182>
 8015a00:	d822      	bhi.n	8015a48 <_printf_i+0x64>
 8015a02:	2963      	cmp	r1, #99	; 0x63
 8015a04:	d036      	beq.n	8015a74 <_printf_i+0x90>
 8015a06:	d80a      	bhi.n	8015a1e <_printf_i+0x3a>
 8015a08:	2900      	cmp	r1, #0
 8015a0a:	f000 80b9 	beq.w	8015b80 <_printf_i+0x19c>
 8015a0e:	2958      	cmp	r1, #88	; 0x58
 8015a10:	f000 8083 	beq.w	8015b1a <_printf_i+0x136>
 8015a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015a18:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015a1c:	e032      	b.n	8015a84 <_printf_i+0xa0>
 8015a1e:	2964      	cmp	r1, #100	; 0x64
 8015a20:	d001      	beq.n	8015a26 <_printf_i+0x42>
 8015a22:	2969      	cmp	r1, #105	; 0x69
 8015a24:	d1f6      	bne.n	8015a14 <_printf_i+0x30>
 8015a26:	6820      	ldr	r0, [r4, #0]
 8015a28:	6813      	ldr	r3, [r2, #0]
 8015a2a:	0605      	lsls	r5, r0, #24
 8015a2c:	f103 0104 	add.w	r1, r3, #4
 8015a30:	d52a      	bpl.n	8015a88 <_printf_i+0xa4>
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	6011      	str	r1, [r2, #0]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	da03      	bge.n	8015a42 <_printf_i+0x5e>
 8015a3a:	222d      	movs	r2, #45	; 0x2d
 8015a3c:	425b      	negs	r3, r3
 8015a3e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015a42:	486f      	ldr	r0, [pc, #444]	; (8015c00 <_printf_i+0x21c>)
 8015a44:	220a      	movs	r2, #10
 8015a46:	e039      	b.n	8015abc <_printf_i+0xd8>
 8015a48:	2973      	cmp	r1, #115	; 0x73
 8015a4a:	f000 809d 	beq.w	8015b88 <_printf_i+0x1a4>
 8015a4e:	d808      	bhi.n	8015a62 <_printf_i+0x7e>
 8015a50:	296f      	cmp	r1, #111	; 0x6f
 8015a52:	d020      	beq.n	8015a96 <_printf_i+0xb2>
 8015a54:	2970      	cmp	r1, #112	; 0x70
 8015a56:	d1dd      	bne.n	8015a14 <_printf_i+0x30>
 8015a58:	6823      	ldr	r3, [r4, #0]
 8015a5a:	f043 0320 	orr.w	r3, r3, #32
 8015a5e:	6023      	str	r3, [r4, #0]
 8015a60:	e003      	b.n	8015a6a <_printf_i+0x86>
 8015a62:	2975      	cmp	r1, #117	; 0x75
 8015a64:	d017      	beq.n	8015a96 <_printf_i+0xb2>
 8015a66:	2978      	cmp	r1, #120	; 0x78
 8015a68:	d1d4      	bne.n	8015a14 <_printf_i+0x30>
 8015a6a:	2378      	movs	r3, #120	; 0x78
 8015a6c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015a70:	4864      	ldr	r0, [pc, #400]	; (8015c04 <_printf_i+0x220>)
 8015a72:	e055      	b.n	8015b20 <_printf_i+0x13c>
 8015a74:	6813      	ldr	r3, [r2, #0]
 8015a76:	1d19      	adds	r1, r3, #4
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	6011      	str	r1, [r2, #0]
 8015a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015a80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015a84:	2301      	movs	r3, #1
 8015a86:	e08c      	b.n	8015ba2 <_printf_i+0x1be>
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	6011      	str	r1, [r2, #0]
 8015a8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015a90:	bf18      	it	ne
 8015a92:	b21b      	sxthne	r3, r3
 8015a94:	e7cf      	b.n	8015a36 <_printf_i+0x52>
 8015a96:	6813      	ldr	r3, [r2, #0]
 8015a98:	6825      	ldr	r5, [r4, #0]
 8015a9a:	1d18      	adds	r0, r3, #4
 8015a9c:	6010      	str	r0, [r2, #0]
 8015a9e:	0628      	lsls	r0, r5, #24
 8015aa0:	d501      	bpl.n	8015aa6 <_printf_i+0xc2>
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	e002      	b.n	8015aac <_printf_i+0xc8>
 8015aa6:	0668      	lsls	r0, r5, #25
 8015aa8:	d5fb      	bpl.n	8015aa2 <_printf_i+0xbe>
 8015aaa:	881b      	ldrh	r3, [r3, #0]
 8015aac:	4854      	ldr	r0, [pc, #336]	; (8015c00 <_printf_i+0x21c>)
 8015aae:	296f      	cmp	r1, #111	; 0x6f
 8015ab0:	bf14      	ite	ne
 8015ab2:	220a      	movne	r2, #10
 8015ab4:	2208      	moveq	r2, #8
 8015ab6:	2100      	movs	r1, #0
 8015ab8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015abc:	6865      	ldr	r5, [r4, #4]
 8015abe:	60a5      	str	r5, [r4, #8]
 8015ac0:	2d00      	cmp	r5, #0
 8015ac2:	f2c0 8095 	blt.w	8015bf0 <_printf_i+0x20c>
 8015ac6:	6821      	ldr	r1, [r4, #0]
 8015ac8:	f021 0104 	bic.w	r1, r1, #4
 8015acc:	6021      	str	r1, [r4, #0]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d13d      	bne.n	8015b4e <_printf_i+0x16a>
 8015ad2:	2d00      	cmp	r5, #0
 8015ad4:	f040 808e 	bne.w	8015bf4 <_printf_i+0x210>
 8015ad8:	4665      	mov	r5, ip
 8015ada:	2a08      	cmp	r2, #8
 8015adc:	d10b      	bne.n	8015af6 <_printf_i+0x112>
 8015ade:	6823      	ldr	r3, [r4, #0]
 8015ae0:	07db      	lsls	r3, r3, #31
 8015ae2:	d508      	bpl.n	8015af6 <_printf_i+0x112>
 8015ae4:	6923      	ldr	r3, [r4, #16]
 8015ae6:	6862      	ldr	r2, [r4, #4]
 8015ae8:	429a      	cmp	r2, r3
 8015aea:	bfde      	ittt	le
 8015aec:	2330      	movle	r3, #48	; 0x30
 8015aee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015af2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015af6:	ebac 0305 	sub.w	r3, ip, r5
 8015afa:	6123      	str	r3, [r4, #16]
 8015afc:	f8cd 8000 	str.w	r8, [sp]
 8015b00:	463b      	mov	r3, r7
 8015b02:	aa03      	add	r2, sp, #12
 8015b04:	4621      	mov	r1, r4
 8015b06:	4630      	mov	r0, r6
 8015b08:	f7ff fef6 	bl	80158f8 <_printf_common>
 8015b0c:	3001      	adds	r0, #1
 8015b0e:	d14d      	bne.n	8015bac <_printf_i+0x1c8>
 8015b10:	f04f 30ff 	mov.w	r0, #4294967295
 8015b14:	b005      	add	sp, #20
 8015b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b1a:	4839      	ldr	r0, [pc, #228]	; (8015c00 <_printf_i+0x21c>)
 8015b1c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015b20:	6813      	ldr	r3, [r2, #0]
 8015b22:	6821      	ldr	r1, [r4, #0]
 8015b24:	1d1d      	adds	r5, r3, #4
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	6015      	str	r5, [r2, #0]
 8015b2a:	060a      	lsls	r2, r1, #24
 8015b2c:	d50b      	bpl.n	8015b46 <_printf_i+0x162>
 8015b2e:	07ca      	lsls	r2, r1, #31
 8015b30:	bf44      	itt	mi
 8015b32:	f041 0120 	orrmi.w	r1, r1, #32
 8015b36:	6021      	strmi	r1, [r4, #0]
 8015b38:	b91b      	cbnz	r3, 8015b42 <_printf_i+0x15e>
 8015b3a:	6822      	ldr	r2, [r4, #0]
 8015b3c:	f022 0220 	bic.w	r2, r2, #32
 8015b40:	6022      	str	r2, [r4, #0]
 8015b42:	2210      	movs	r2, #16
 8015b44:	e7b7      	b.n	8015ab6 <_printf_i+0xd2>
 8015b46:	064d      	lsls	r5, r1, #25
 8015b48:	bf48      	it	mi
 8015b4a:	b29b      	uxthmi	r3, r3
 8015b4c:	e7ef      	b.n	8015b2e <_printf_i+0x14a>
 8015b4e:	4665      	mov	r5, ip
 8015b50:	fbb3 f1f2 	udiv	r1, r3, r2
 8015b54:	fb02 3311 	mls	r3, r2, r1, r3
 8015b58:	5cc3      	ldrb	r3, [r0, r3]
 8015b5a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015b5e:	460b      	mov	r3, r1
 8015b60:	2900      	cmp	r1, #0
 8015b62:	d1f5      	bne.n	8015b50 <_printf_i+0x16c>
 8015b64:	e7b9      	b.n	8015ada <_printf_i+0xf6>
 8015b66:	6813      	ldr	r3, [r2, #0]
 8015b68:	6825      	ldr	r5, [r4, #0]
 8015b6a:	6961      	ldr	r1, [r4, #20]
 8015b6c:	1d18      	adds	r0, r3, #4
 8015b6e:	6010      	str	r0, [r2, #0]
 8015b70:	0628      	lsls	r0, r5, #24
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	d501      	bpl.n	8015b7a <_printf_i+0x196>
 8015b76:	6019      	str	r1, [r3, #0]
 8015b78:	e002      	b.n	8015b80 <_printf_i+0x19c>
 8015b7a:	066a      	lsls	r2, r5, #25
 8015b7c:	d5fb      	bpl.n	8015b76 <_printf_i+0x192>
 8015b7e:	8019      	strh	r1, [r3, #0]
 8015b80:	2300      	movs	r3, #0
 8015b82:	6123      	str	r3, [r4, #16]
 8015b84:	4665      	mov	r5, ip
 8015b86:	e7b9      	b.n	8015afc <_printf_i+0x118>
 8015b88:	6813      	ldr	r3, [r2, #0]
 8015b8a:	1d19      	adds	r1, r3, #4
 8015b8c:	6011      	str	r1, [r2, #0]
 8015b8e:	681d      	ldr	r5, [r3, #0]
 8015b90:	6862      	ldr	r2, [r4, #4]
 8015b92:	2100      	movs	r1, #0
 8015b94:	4628      	mov	r0, r5
 8015b96:	f7ea fb3b 	bl	8000210 <memchr>
 8015b9a:	b108      	cbz	r0, 8015ba0 <_printf_i+0x1bc>
 8015b9c:	1b40      	subs	r0, r0, r5
 8015b9e:	6060      	str	r0, [r4, #4]
 8015ba0:	6863      	ldr	r3, [r4, #4]
 8015ba2:	6123      	str	r3, [r4, #16]
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015baa:	e7a7      	b.n	8015afc <_printf_i+0x118>
 8015bac:	6923      	ldr	r3, [r4, #16]
 8015bae:	462a      	mov	r2, r5
 8015bb0:	4639      	mov	r1, r7
 8015bb2:	4630      	mov	r0, r6
 8015bb4:	47c0      	blx	r8
 8015bb6:	3001      	adds	r0, #1
 8015bb8:	d0aa      	beq.n	8015b10 <_printf_i+0x12c>
 8015bba:	6823      	ldr	r3, [r4, #0]
 8015bbc:	079b      	lsls	r3, r3, #30
 8015bbe:	d413      	bmi.n	8015be8 <_printf_i+0x204>
 8015bc0:	68e0      	ldr	r0, [r4, #12]
 8015bc2:	9b03      	ldr	r3, [sp, #12]
 8015bc4:	4298      	cmp	r0, r3
 8015bc6:	bfb8      	it	lt
 8015bc8:	4618      	movlt	r0, r3
 8015bca:	e7a3      	b.n	8015b14 <_printf_i+0x130>
 8015bcc:	2301      	movs	r3, #1
 8015bce:	464a      	mov	r2, r9
 8015bd0:	4639      	mov	r1, r7
 8015bd2:	4630      	mov	r0, r6
 8015bd4:	47c0      	blx	r8
 8015bd6:	3001      	adds	r0, #1
 8015bd8:	d09a      	beq.n	8015b10 <_printf_i+0x12c>
 8015bda:	3501      	adds	r5, #1
 8015bdc:	68e3      	ldr	r3, [r4, #12]
 8015bde:	9a03      	ldr	r2, [sp, #12]
 8015be0:	1a9b      	subs	r3, r3, r2
 8015be2:	42ab      	cmp	r3, r5
 8015be4:	dcf2      	bgt.n	8015bcc <_printf_i+0x1e8>
 8015be6:	e7eb      	b.n	8015bc0 <_printf_i+0x1dc>
 8015be8:	2500      	movs	r5, #0
 8015bea:	f104 0919 	add.w	r9, r4, #25
 8015bee:	e7f5      	b.n	8015bdc <_printf_i+0x1f8>
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d1ac      	bne.n	8015b4e <_printf_i+0x16a>
 8015bf4:	7803      	ldrb	r3, [r0, #0]
 8015bf6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015bfa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015bfe:	e76c      	b.n	8015ada <_printf_i+0xf6>
 8015c00:	08019fa8 	.word	0x08019fa8
 8015c04:	08019fb9 	.word	0x08019fb9

08015c08 <_scanf_float>:
 8015c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c0c:	469a      	mov	sl, r3
 8015c0e:	688b      	ldr	r3, [r1, #8]
 8015c10:	4616      	mov	r6, r2
 8015c12:	1e5a      	subs	r2, r3, #1
 8015c14:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015c18:	b087      	sub	sp, #28
 8015c1a:	bf83      	ittte	hi
 8015c1c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015c20:	189b      	addhi	r3, r3, r2
 8015c22:	9301      	strhi	r3, [sp, #4]
 8015c24:	2300      	movls	r3, #0
 8015c26:	bf86      	itte	hi
 8015c28:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015c2c:	608b      	strhi	r3, [r1, #8]
 8015c2e:	9301      	strls	r3, [sp, #4]
 8015c30:	680b      	ldr	r3, [r1, #0]
 8015c32:	4688      	mov	r8, r1
 8015c34:	f04f 0b00 	mov.w	fp, #0
 8015c38:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015c3c:	f848 3b1c 	str.w	r3, [r8], #28
 8015c40:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015c44:	4607      	mov	r7, r0
 8015c46:	460c      	mov	r4, r1
 8015c48:	4645      	mov	r5, r8
 8015c4a:	465a      	mov	r2, fp
 8015c4c:	46d9      	mov	r9, fp
 8015c4e:	f8cd b008 	str.w	fp, [sp, #8]
 8015c52:	68a1      	ldr	r1, [r4, #8]
 8015c54:	b181      	cbz	r1, 8015c78 <_scanf_float+0x70>
 8015c56:	6833      	ldr	r3, [r6, #0]
 8015c58:	781b      	ldrb	r3, [r3, #0]
 8015c5a:	2b49      	cmp	r3, #73	; 0x49
 8015c5c:	d071      	beq.n	8015d42 <_scanf_float+0x13a>
 8015c5e:	d84d      	bhi.n	8015cfc <_scanf_float+0xf4>
 8015c60:	2b39      	cmp	r3, #57	; 0x39
 8015c62:	d840      	bhi.n	8015ce6 <_scanf_float+0xde>
 8015c64:	2b31      	cmp	r3, #49	; 0x31
 8015c66:	f080 8088 	bcs.w	8015d7a <_scanf_float+0x172>
 8015c6a:	2b2d      	cmp	r3, #45	; 0x2d
 8015c6c:	f000 8090 	beq.w	8015d90 <_scanf_float+0x188>
 8015c70:	d815      	bhi.n	8015c9e <_scanf_float+0x96>
 8015c72:	2b2b      	cmp	r3, #43	; 0x2b
 8015c74:	f000 808c 	beq.w	8015d90 <_scanf_float+0x188>
 8015c78:	f1b9 0f00 	cmp.w	r9, #0
 8015c7c:	d003      	beq.n	8015c86 <_scanf_float+0x7e>
 8015c7e:	6823      	ldr	r3, [r4, #0]
 8015c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015c84:	6023      	str	r3, [r4, #0]
 8015c86:	3a01      	subs	r2, #1
 8015c88:	2a01      	cmp	r2, #1
 8015c8a:	f200 80ea 	bhi.w	8015e62 <_scanf_float+0x25a>
 8015c8e:	4545      	cmp	r5, r8
 8015c90:	f200 80dc 	bhi.w	8015e4c <_scanf_float+0x244>
 8015c94:	2601      	movs	r6, #1
 8015c96:	4630      	mov	r0, r6
 8015c98:	b007      	add	sp, #28
 8015c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c9e:	2b2e      	cmp	r3, #46	; 0x2e
 8015ca0:	f000 809f 	beq.w	8015de2 <_scanf_float+0x1da>
 8015ca4:	2b30      	cmp	r3, #48	; 0x30
 8015ca6:	d1e7      	bne.n	8015c78 <_scanf_float+0x70>
 8015ca8:	6820      	ldr	r0, [r4, #0]
 8015caa:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015cae:	d064      	beq.n	8015d7a <_scanf_float+0x172>
 8015cb0:	9b01      	ldr	r3, [sp, #4]
 8015cb2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015cb6:	6020      	str	r0, [r4, #0]
 8015cb8:	f109 0901 	add.w	r9, r9, #1
 8015cbc:	b11b      	cbz	r3, 8015cc6 <_scanf_float+0xbe>
 8015cbe:	3b01      	subs	r3, #1
 8015cc0:	3101      	adds	r1, #1
 8015cc2:	9301      	str	r3, [sp, #4]
 8015cc4:	60a1      	str	r1, [r4, #8]
 8015cc6:	68a3      	ldr	r3, [r4, #8]
 8015cc8:	3b01      	subs	r3, #1
 8015cca:	60a3      	str	r3, [r4, #8]
 8015ccc:	6923      	ldr	r3, [r4, #16]
 8015cce:	3301      	adds	r3, #1
 8015cd0:	6123      	str	r3, [r4, #16]
 8015cd2:	6873      	ldr	r3, [r6, #4]
 8015cd4:	3b01      	subs	r3, #1
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	6073      	str	r3, [r6, #4]
 8015cda:	f340 80ac 	ble.w	8015e36 <_scanf_float+0x22e>
 8015cde:	6833      	ldr	r3, [r6, #0]
 8015ce0:	3301      	adds	r3, #1
 8015ce2:	6033      	str	r3, [r6, #0]
 8015ce4:	e7b5      	b.n	8015c52 <_scanf_float+0x4a>
 8015ce6:	2b45      	cmp	r3, #69	; 0x45
 8015ce8:	f000 8085 	beq.w	8015df6 <_scanf_float+0x1ee>
 8015cec:	2b46      	cmp	r3, #70	; 0x46
 8015cee:	d06a      	beq.n	8015dc6 <_scanf_float+0x1be>
 8015cf0:	2b41      	cmp	r3, #65	; 0x41
 8015cf2:	d1c1      	bne.n	8015c78 <_scanf_float+0x70>
 8015cf4:	2a01      	cmp	r2, #1
 8015cf6:	d1bf      	bne.n	8015c78 <_scanf_float+0x70>
 8015cf8:	2202      	movs	r2, #2
 8015cfa:	e046      	b.n	8015d8a <_scanf_float+0x182>
 8015cfc:	2b65      	cmp	r3, #101	; 0x65
 8015cfe:	d07a      	beq.n	8015df6 <_scanf_float+0x1ee>
 8015d00:	d818      	bhi.n	8015d34 <_scanf_float+0x12c>
 8015d02:	2b54      	cmp	r3, #84	; 0x54
 8015d04:	d066      	beq.n	8015dd4 <_scanf_float+0x1cc>
 8015d06:	d811      	bhi.n	8015d2c <_scanf_float+0x124>
 8015d08:	2b4e      	cmp	r3, #78	; 0x4e
 8015d0a:	d1b5      	bne.n	8015c78 <_scanf_float+0x70>
 8015d0c:	2a00      	cmp	r2, #0
 8015d0e:	d146      	bne.n	8015d9e <_scanf_float+0x196>
 8015d10:	f1b9 0f00 	cmp.w	r9, #0
 8015d14:	d145      	bne.n	8015da2 <_scanf_float+0x19a>
 8015d16:	6821      	ldr	r1, [r4, #0]
 8015d18:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015d1c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015d20:	d13f      	bne.n	8015da2 <_scanf_float+0x19a>
 8015d22:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015d26:	6021      	str	r1, [r4, #0]
 8015d28:	2201      	movs	r2, #1
 8015d2a:	e02e      	b.n	8015d8a <_scanf_float+0x182>
 8015d2c:	2b59      	cmp	r3, #89	; 0x59
 8015d2e:	d01e      	beq.n	8015d6e <_scanf_float+0x166>
 8015d30:	2b61      	cmp	r3, #97	; 0x61
 8015d32:	e7de      	b.n	8015cf2 <_scanf_float+0xea>
 8015d34:	2b6e      	cmp	r3, #110	; 0x6e
 8015d36:	d0e9      	beq.n	8015d0c <_scanf_float+0x104>
 8015d38:	d815      	bhi.n	8015d66 <_scanf_float+0x15e>
 8015d3a:	2b66      	cmp	r3, #102	; 0x66
 8015d3c:	d043      	beq.n	8015dc6 <_scanf_float+0x1be>
 8015d3e:	2b69      	cmp	r3, #105	; 0x69
 8015d40:	d19a      	bne.n	8015c78 <_scanf_float+0x70>
 8015d42:	f1bb 0f00 	cmp.w	fp, #0
 8015d46:	d138      	bne.n	8015dba <_scanf_float+0x1b2>
 8015d48:	f1b9 0f00 	cmp.w	r9, #0
 8015d4c:	d197      	bne.n	8015c7e <_scanf_float+0x76>
 8015d4e:	6821      	ldr	r1, [r4, #0]
 8015d50:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015d54:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015d58:	d195      	bne.n	8015c86 <_scanf_float+0x7e>
 8015d5a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015d5e:	6021      	str	r1, [r4, #0]
 8015d60:	f04f 0b01 	mov.w	fp, #1
 8015d64:	e011      	b.n	8015d8a <_scanf_float+0x182>
 8015d66:	2b74      	cmp	r3, #116	; 0x74
 8015d68:	d034      	beq.n	8015dd4 <_scanf_float+0x1cc>
 8015d6a:	2b79      	cmp	r3, #121	; 0x79
 8015d6c:	d184      	bne.n	8015c78 <_scanf_float+0x70>
 8015d6e:	f1bb 0f07 	cmp.w	fp, #7
 8015d72:	d181      	bne.n	8015c78 <_scanf_float+0x70>
 8015d74:	f04f 0b08 	mov.w	fp, #8
 8015d78:	e007      	b.n	8015d8a <_scanf_float+0x182>
 8015d7a:	eb12 0f0b 	cmn.w	r2, fp
 8015d7e:	f47f af7b 	bne.w	8015c78 <_scanf_float+0x70>
 8015d82:	6821      	ldr	r1, [r4, #0]
 8015d84:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015d88:	6021      	str	r1, [r4, #0]
 8015d8a:	702b      	strb	r3, [r5, #0]
 8015d8c:	3501      	adds	r5, #1
 8015d8e:	e79a      	b.n	8015cc6 <_scanf_float+0xbe>
 8015d90:	6821      	ldr	r1, [r4, #0]
 8015d92:	0608      	lsls	r0, r1, #24
 8015d94:	f57f af70 	bpl.w	8015c78 <_scanf_float+0x70>
 8015d98:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015d9c:	e7f4      	b.n	8015d88 <_scanf_float+0x180>
 8015d9e:	2a02      	cmp	r2, #2
 8015da0:	d047      	beq.n	8015e32 <_scanf_float+0x22a>
 8015da2:	f1bb 0f01 	cmp.w	fp, #1
 8015da6:	d003      	beq.n	8015db0 <_scanf_float+0x1a8>
 8015da8:	f1bb 0f04 	cmp.w	fp, #4
 8015dac:	f47f af64 	bne.w	8015c78 <_scanf_float+0x70>
 8015db0:	f10b 0b01 	add.w	fp, fp, #1
 8015db4:	fa5f fb8b 	uxtb.w	fp, fp
 8015db8:	e7e7      	b.n	8015d8a <_scanf_float+0x182>
 8015dba:	f1bb 0f03 	cmp.w	fp, #3
 8015dbe:	d0f7      	beq.n	8015db0 <_scanf_float+0x1a8>
 8015dc0:	f1bb 0f05 	cmp.w	fp, #5
 8015dc4:	e7f2      	b.n	8015dac <_scanf_float+0x1a4>
 8015dc6:	f1bb 0f02 	cmp.w	fp, #2
 8015dca:	f47f af55 	bne.w	8015c78 <_scanf_float+0x70>
 8015dce:	f04f 0b03 	mov.w	fp, #3
 8015dd2:	e7da      	b.n	8015d8a <_scanf_float+0x182>
 8015dd4:	f1bb 0f06 	cmp.w	fp, #6
 8015dd8:	f47f af4e 	bne.w	8015c78 <_scanf_float+0x70>
 8015ddc:	f04f 0b07 	mov.w	fp, #7
 8015de0:	e7d3      	b.n	8015d8a <_scanf_float+0x182>
 8015de2:	6821      	ldr	r1, [r4, #0]
 8015de4:	0588      	lsls	r0, r1, #22
 8015de6:	f57f af47 	bpl.w	8015c78 <_scanf_float+0x70>
 8015dea:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015dee:	6021      	str	r1, [r4, #0]
 8015df0:	f8cd 9008 	str.w	r9, [sp, #8]
 8015df4:	e7c9      	b.n	8015d8a <_scanf_float+0x182>
 8015df6:	6821      	ldr	r1, [r4, #0]
 8015df8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015dfc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015e00:	d006      	beq.n	8015e10 <_scanf_float+0x208>
 8015e02:	0548      	lsls	r0, r1, #21
 8015e04:	f57f af38 	bpl.w	8015c78 <_scanf_float+0x70>
 8015e08:	f1b9 0f00 	cmp.w	r9, #0
 8015e0c:	f43f af3b 	beq.w	8015c86 <_scanf_float+0x7e>
 8015e10:	0588      	lsls	r0, r1, #22
 8015e12:	bf58      	it	pl
 8015e14:	9802      	ldrpl	r0, [sp, #8]
 8015e16:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015e1a:	bf58      	it	pl
 8015e1c:	eba9 0000 	subpl.w	r0, r9, r0
 8015e20:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015e24:	bf58      	it	pl
 8015e26:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015e2a:	6021      	str	r1, [r4, #0]
 8015e2c:	f04f 0900 	mov.w	r9, #0
 8015e30:	e7ab      	b.n	8015d8a <_scanf_float+0x182>
 8015e32:	2203      	movs	r2, #3
 8015e34:	e7a9      	b.n	8015d8a <_scanf_float+0x182>
 8015e36:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015e3a:	9205      	str	r2, [sp, #20]
 8015e3c:	4631      	mov	r1, r6
 8015e3e:	4638      	mov	r0, r7
 8015e40:	4798      	blx	r3
 8015e42:	9a05      	ldr	r2, [sp, #20]
 8015e44:	2800      	cmp	r0, #0
 8015e46:	f43f af04 	beq.w	8015c52 <_scanf_float+0x4a>
 8015e4a:	e715      	b.n	8015c78 <_scanf_float+0x70>
 8015e4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e50:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015e54:	4632      	mov	r2, r6
 8015e56:	4638      	mov	r0, r7
 8015e58:	4798      	blx	r3
 8015e5a:	6923      	ldr	r3, [r4, #16]
 8015e5c:	3b01      	subs	r3, #1
 8015e5e:	6123      	str	r3, [r4, #16]
 8015e60:	e715      	b.n	8015c8e <_scanf_float+0x86>
 8015e62:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015e66:	2b06      	cmp	r3, #6
 8015e68:	d80a      	bhi.n	8015e80 <_scanf_float+0x278>
 8015e6a:	f1bb 0f02 	cmp.w	fp, #2
 8015e6e:	d968      	bls.n	8015f42 <_scanf_float+0x33a>
 8015e70:	f1ab 0b03 	sub.w	fp, fp, #3
 8015e74:	fa5f fb8b 	uxtb.w	fp, fp
 8015e78:	eba5 0b0b 	sub.w	fp, r5, fp
 8015e7c:	455d      	cmp	r5, fp
 8015e7e:	d14b      	bne.n	8015f18 <_scanf_float+0x310>
 8015e80:	6823      	ldr	r3, [r4, #0]
 8015e82:	05da      	lsls	r2, r3, #23
 8015e84:	d51f      	bpl.n	8015ec6 <_scanf_float+0x2be>
 8015e86:	055b      	lsls	r3, r3, #21
 8015e88:	d468      	bmi.n	8015f5c <_scanf_float+0x354>
 8015e8a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015e8e:	6923      	ldr	r3, [r4, #16]
 8015e90:	2965      	cmp	r1, #101	; 0x65
 8015e92:	f103 33ff 	add.w	r3, r3, #4294967295
 8015e96:	f105 3bff 	add.w	fp, r5, #4294967295
 8015e9a:	6123      	str	r3, [r4, #16]
 8015e9c:	d00d      	beq.n	8015eba <_scanf_float+0x2b2>
 8015e9e:	2945      	cmp	r1, #69	; 0x45
 8015ea0:	d00b      	beq.n	8015eba <_scanf_float+0x2b2>
 8015ea2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ea6:	4632      	mov	r2, r6
 8015ea8:	4638      	mov	r0, r7
 8015eaa:	4798      	blx	r3
 8015eac:	6923      	ldr	r3, [r4, #16]
 8015eae:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8015eb2:	3b01      	subs	r3, #1
 8015eb4:	f1a5 0b02 	sub.w	fp, r5, #2
 8015eb8:	6123      	str	r3, [r4, #16]
 8015eba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ebe:	4632      	mov	r2, r6
 8015ec0:	4638      	mov	r0, r7
 8015ec2:	4798      	blx	r3
 8015ec4:	465d      	mov	r5, fp
 8015ec6:	6826      	ldr	r6, [r4, #0]
 8015ec8:	f016 0610 	ands.w	r6, r6, #16
 8015ecc:	d17a      	bne.n	8015fc4 <_scanf_float+0x3bc>
 8015ece:	702e      	strb	r6, [r5, #0]
 8015ed0:	6823      	ldr	r3, [r4, #0]
 8015ed2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015eda:	d142      	bne.n	8015f62 <_scanf_float+0x35a>
 8015edc:	9b02      	ldr	r3, [sp, #8]
 8015ede:	eba9 0303 	sub.w	r3, r9, r3
 8015ee2:	425a      	negs	r2, r3
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d149      	bne.n	8015f7c <_scanf_float+0x374>
 8015ee8:	2200      	movs	r2, #0
 8015eea:	4641      	mov	r1, r8
 8015eec:	4638      	mov	r0, r7
 8015eee:	f000 ff0b 	bl	8016d08 <_strtod_r>
 8015ef2:	6825      	ldr	r5, [r4, #0]
 8015ef4:	f8da 3000 	ldr.w	r3, [sl]
 8015ef8:	f015 0f02 	tst.w	r5, #2
 8015efc:	f103 0204 	add.w	r2, r3, #4
 8015f00:	ec59 8b10 	vmov	r8, r9, d0
 8015f04:	f8ca 2000 	str.w	r2, [sl]
 8015f08:	d043      	beq.n	8015f92 <_scanf_float+0x38a>
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	e9c3 8900 	strd	r8, r9, [r3]
 8015f10:	68e3      	ldr	r3, [r4, #12]
 8015f12:	3301      	adds	r3, #1
 8015f14:	60e3      	str	r3, [r4, #12]
 8015f16:	e6be      	b.n	8015c96 <_scanf_float+0x8e>
 8015f18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015f1c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015f20:	4632      	mov	r2, r6
 8015f22:	4638      	mov	r0, r7
 8015f24:	4798      	blx	r3
 8015f26:	6923      	ldr	r3, [r4, #16]
 8015f28:	3b01      	subs	r3, #1
 8015f2a:	6123      	str	r3, [r4, #16]
 8015f2c:	e7a6      	b.n	8015e7c <_scanf_float+0x274>
 8015f2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015f32:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015f36:	4632      	mov	r2, r6
 8015f38:	4638      	mov	r0, r7
 8015f3a:	4798      	blx	r3
 8015f3c:	6923      	ldr	r3, [r4, #16]
 8015f3e:	3b01      	subs	r3, #1
 8015f40:	6123      	str	r3, [r4, #16]
 8015f42:	4545      	cmp	r5, r8
 8015f44:	d8f3      	bhi.n	8015f2e <_scanf_float+0x326>
 8015f46:	e6a5      	b.n	8015c94 <_scanf_float+0x8c>
 8015f48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015f4c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015f50:	4632      	mov	r2, r6
 8015f52:	4638      	mov	r0, r7
 8015f54:	4798      	blx	r3
 8015f56:	6923      	ldr	r3, [r4, #16]
 8015f58:	3b01      	subs	r3, #1
 8015f5a:	6123      	str	r3, [r4, #16]
 8015f5c:	4545      	cmp	r5, r8
 8015f5e:	d8f3      	bhi.n	8015f48 <_scanf_float+0x340>
 8015f60:	e698      	b.n	8015c94 <_scanf_float+0x8c>
 8015f62:	9b03      	ldr	r3, [sp, #12]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d0bf      	beq.n	8015ee8 <_scanf_float+0x2e0>
 8015f68:	9904      	ldr	r1, [sp, #16]
 8015f6a:	230a      	movs	r3, #10
 8015f6c:	4632      	mov	r2, r6
 8015f6e:	3101      	adds	r1, #1
 8015f70:	4638      	mov	r0, r7
 8015f72:	f000 ff55 	bl	8016e20 <_strtol_r>
 8015f76:	9b03      	ldr	r3, [sp, #12]
 8015f78:	9d04      	ldr	r5, [sp, #16]
 8015f7a:	1ac2      	subs	r2, r0, r3
 8015f7c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015f80:	429d      	cmp	r5, r3
 8015f82:	bf28      	it	cs
 8015f84:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015f88:	490f      	ldr	r1, [pc, #60]	; (8015fc8 <_scanf_float+0x3c0>)
 8015f8a:	4628      	mov	r0, r5
 8015f8c:	f000 f858 	bl	8016040 <siprintf>
 8015f90:	e7aa      	b.n	8015ee8 <_scanf_float+0x2e0>
 8015f92:	f015 0504 	ands.w	r5, r5, #4
 8015f96:	d1b8      	bne.n	8015f0a <_scanf_float+0x302>
 8015f98:	681f      	ldr	r7, [r3, #0]
 8015f9a:	ee10 2a10 	vmov	r2, s0
 8015f9e:	464b      	mov	r3, r9
 8015fa0:	ee10 0a10 	vmov	r0, s0
 8015fa4:	4649      	mov	r1, r9
 8015fa6:	f7ea fdd9 	bl	8000b5c <__aeabi_dcmpun>
 8015faa:	b128      	cbz	r0, 8015fb8 <_scanf_float+0x3b0>
 8015fac:	4628      	mov	r0, r5
 8015fae:	f000 f80d 	bl	8015fcc <nanf>
 8015fb2:	ed87 0a00 	vstr	s0, [r7]
 8015fb6:	e7ab      	b.n	8015f10 <_scanf_float+0x308>
 8015fb8:	4640      	mov	r0, r8
 8015fba:	4649      	mov	r1, r9
 8015fbc:	f7ea fe2c 	bl	8000c18 <__aeabi_d2f>
 8015fc0:	6038      	str	r0, [r7, #0]
 8015fc2:	e7a5      	b.n	8015f10 <_scanf_float+0x308>
 8015fc4:	2600      	movs	r6, #0
 8015fc6:	e666      	b.n	8015c96 <_scanf_float+0x8e>
 8015fc8:	08019fca 	.word	0x08019fca

08015fcc <nanf>:
 8015fcc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015fd4 <nanf+0x8>
 8015fd0:	4770      	bx	lr
 8015fd2:	bf00      	nop
 8015fd4:	7fc00000 	.word	0x7fc00000

08015fd8 <sniprintf>:
 8015fd8:	b40c      	push	{r2, r3}
 8015fda:	b530      	push	{r4, r5, lr}
 8015fdc:	4b17      	ldr	r3, [pc, #92]	; (801603c <sniprintf+0x64>)
 8015fde:	1e0c      	subs	r4, r1, #0
 8015fe0:	b09d      	sub	sp, #116	; 0x74
 8015fe2:	681d      	ldr	r5, [r3, #0]
 8015fe4:	da08      	bge.n	8015ff8 <sniprintf+0x20>
 8015fe6:	238b      	movs	r3, #139	; 0x8b
 8015fe8:	602b      	str	r3, [r5, #0]
 8015fea:	f04f 30ff 	mov.w	r0, #4294967295
 8015fee:	b01d      	add	sp, #116	; 0x74
 8015ff0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015ff4:	b002      	add	sp, #8
 8015ff6:	4770      	bx	lr
 8015ff8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015ffc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016000:	bf14      	ite	ne
 8016002:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016006:	4623      	moveq	r3, r4
 8016008:	9304      	str	r3, [sp, #16]
 801600a:	9307      	str	r3, [sp, #28]
 801600c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016010:	9002      	str	r0, [sp, #8]
 8016012:	9006      	str	r0, [sp, #24]
 8016014:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016018:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801601a:	ab21      	add	r3, sp, #132	; 0x84
 801601c:	a902      	add	r1, sp, #8
 801601e:	4628      	mov	r0, r5
 8016020:	9301      	str	r3, [sp, #4]
 8016022:	f002 fde7 	bl	8018bf4 <_svfiprintf_r>
 8016026:	1c43      	adds	r3, r0, #1
 8016028:	bfbc      	itt	lt
 801602a:	238b      	movlt	r3, #139	; 0x8b
 801602c:	602b      	strlt	r3, [r5, #0]
 801602e:	2c00      	cmp	r4, #0
 8016030:	d0dd      	beq.n	8015fee <sniprintf+0x16>
 8016032:	9b02      	ldr	r3, [sp, #8]
 8016034:	2200      	movs	r2, #0
 8016036:	701a      	strb	r2, [r3, #0]
 8016038:	e7d9      	b.n	8015fee <sniprintf+0x16>
 801603a:	bf00      	nop
 801603c:	2000000c 	.word	0x2000000c

08016040 <siprintf>:
 8016040:	b40e      	push	{r1, r2, r3}
 8016042:	b500      	push	{lr}
 8016044:	b09c      	sub	sp, #112	; 0x70
 8016046:	ab1d      	add	r3, sp, #116	; 0x74
 8016048:	9002      	str	r0, [sp, #8]
 801604a:	9006      	str	r0, [sp, #24]
 801604c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016050:	4809      	ldr	r0, [pc, #36]	; (8016078 <siprintf+0x38>)
 8016052:	9107      	str	r1, [sp, #28]
 8016054:	9104      	str	r1, [sp, #16]
 8016056:	4909      	ldr	r1, [pc, #36]	; (801607c <siprintf+0x3c>)
 8016058:	f853 2b04 	ldr.w	r2, [r3], #4
 801605c:	9105      	str	r1, [sp, #20]
 801605e:	6800      	ldr	r0, [r0, #0]
 8016060:	9301      	str	r3, [sp, #4]
 8016062:	a902      	add	r1, sp, #8
 8016064:	f002 fdc6 	bl	8018bf4 <_svfiprintf_r>
 8016068:	9b02      	ldr	r3, [sp, #8]
 801606a:	2200      	movs	r2, #0
 801606c:	701a      	strb	r2, [r3, #0]
 801606e:	b01c      	add	sp, #112	; 0x70
 8016070:	f85d eb04 	ldr.w	lr, [sp], #4
 8016074:	b003      	add	sp, #12
 8016076:	4770      	bx	lr
 8016078:	2000000c 	.word	0x2000000c
 801607c:	ffff0208 	.word	0xffff0208

08016080 <siscanf>:
 8016080:	b40e      	push	{r1, r2, r3}
 8016082:	b530      	push	{r4, r5, lr}
 8016084:	b09c      	sub	sp, #112	; 0x70
 8016086:	ac1f      	add	r4, sp, #124	; 0x7c
 8016088:	f44f 7201 	mov.w	r2, #516	; 0x204
 801608c:	f854 5b04 	ldr.w	r5, [r4], #4
 8016090:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016094:	9002      	str	r0, [sp, #8]
 8016096:	9006      	str	r0, [sp, #24]
 8016098:	f7ea f8b2 	bl	8000200 <strlen>
 801609c:	4b0b      	ldr	r3, [pc, #44]	; (80160cc <siscanf+0x4c>)
 801609e:	9003      	str	r0, [sp, #12]
 80160a0:	9007      	str	r0, [sp, #28]
 80160a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80160a4:	480a      	ldr	r0, [pc, #40]	; (80160d0 <siscanf+0x50>)
 80160a6:	9401      	str	r4, [sp, #4]
 80160a8:	2300      	movs	r3, #0
 80160aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80160ac:	9314      	str	r3, [sp, #80]	; 0x50
 80160ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80160b2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80160b6:	462a      	mov	r2, r5
 80160b8:	4623      	mov	r3, r4
 80160ba:	a902      	add	r1, sp, #8
 80160bc:	6800      	ldr	r0, [r0, #0]
 80160be:	f002 feeb 	bl	8018e98 <__ssvfiscanf_r>
 80160c2:	b01c      	add	sp, #112	; 0x70
 80160c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80160c8:	b003      	add	sp, #12
 80160ca:	4770      	bx	lr
 80160cc:	080160d5 	.word	0x080160d5
 80160d0:	2000000c 	.word	0x2000000c

080160d4 <__seofread>:
 80160d4:	2000      	movs	r0, #0
 80160d6:	4770      	bx	lr

080160d8 <strcpy>:
 80160d8:	4603      	mov	r3, r0
 80160da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80160de:	f803 2b01 	strb.w	r2, [r3], #1
 80160e2:	2a00      	cmp	r2, #0
 80160e4:	d1f9      	bne.n	80160da <strcpy+0x2>
 80160e6:	4770      	bx	lr

080160e8 <sulp>:
 80160e8:	b570      	push	{r4, r5, r6, lr}
 80160ea:	4604      	mov	r4, r0
 80160ec:	460d      	mov	r5, r1
 80160ee:	ec45 4b10 	vmov	d0, r4, r5
 80160f2:	4616      	mov	r6, r2
 80160f4:	f002 fb3a 	bl	801876c <__ulp>
 80160f8:	ec51 0b10 	vmov	r0, r1, d0
 80160fc:	b17e      	cbz	r6, 801611e <sulp+0x36>
 80160fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016102:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016106:	2b00      	cmp	r3, #0
 8016108:	dd09      	ble.n	801611e <sulp+0x36>
 801610a:	051b      	lsls	r3, r3, #20
 801610c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016110:	2400      	movs	r4, #0
 8016112:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8016116:	4622      	mov	r2, r4
 8016118:	462b      	mov	r3, r5
 801611a:	f7ea fa85 	bl	8000628 <__aeabi_dmul>
 801611e:	bd70      	pop	{r4, r5, r6, pc}

08016120 <_strtod_l>:
 8016120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016124:	461f      	mov	r7, r3
 8016126:	b0a1      	sub	sp, #132	; 0x84
 8016128:	2300      	movs	r3, #0
 801612a:	4681      	mov	r9, r0
 801612c:	4638      	mov	r0, r7
 801612e:	460e      	mov	r6, r1
 8016130:	9217      	str	r2, [sp, #92]	; 0x5c
 8016132:	931c      	str	r3, [sp, #112]	; 0x70
 8016134:	f002 f824 	bl	8018180 <__localeconv_l>
 8016138:	4680      	mov	r8, r0
 801613a:	6800      	ldr	r0, [r0, #0]
 801613c:	f7ea f860 	bl	8000200 <strlen>
 8016140:	f04f 0a00 	mov.w	sl, #0
 8016144:	4604      	mov	r4, r0
 8016146:	f04f 0b00 	mov.w	fp, #0
 801614a:	961b      	str	r6, [sp, #108]	; 0x6c
 801614c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801614e:	781a      	ldrb	r2, [r3, #0]
 8016150:	2a0d      	cmp	r2, #13
 8016152:	d832      	bhi.n	80161ba <_strtod_l+0x9a>
 8016154:	2a09      	cmp	r2, #9
 8016156:	d236      	bcs.n	80161c6 <_strtod_l+0xa6>
 8016158:	2a00      	cmp	r2, #0
 801615a:	d03e      	beq.n	80161da <_strtod_l+0xba>
 801615c:	2300      	movs	r3, #0
 801615e:	930d      	str	r3, [sp, #52]	; 0x34
 8016160:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016162:	782b      	ldrb	r3, [r5, #0]
 8016164:	2b30      	cmp	r3, #48	; 0x30
 8016166:	f040 80ac 	bne.w	80162c2 <_strtod_l+0x1a2>
 801616a:	786b      	ldrb	r3, [r5, #1]
 801616c:	2b58      	cmp	r3, #88	; 0x58
 801616e:	d001      	beq.n	8016174 <_strtod_l+0x54>
 8016170:	2b78      	cmp	r3, #120	; 0x78
 8016172:	d167      	bne.n	8016244 <_strtod_l+0x124>
 8016174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016176:	9301      	str	r3, [sp, #4]
 8016178:	ab1c      	add	r3, sp, #112	; 0x70
 801617a:	9300      	str	r3, [sp, #0]
 801617c:	9702      	str	r7, [sp, #8]
 801617e:	ab1d      	add	r3, sp, #116	; 0x74
 8016180:	4a88      	ldr	r2, [pc, #544]	; (80163a4 <_strtod_l+0x284>)
 8016182:	a91b      	add	r1, sp, #108	; 0x6c
 8016184:	4648      	mov	r0, r9
 8016186:	f001 fd12 	bl	8017bae <__gethex>
 801618a:	f010 0407 	ands.w	r4, r0, #7
 801618e:	4606      	mov	r6, r0
 8016190:	d005      	beq.n	801619e <_strtod_l+0x7e>
 8016192:	2c06      	cmp	r4, #6
 8016194:	d12b      	bne.n	80161ee <_strtod_l+0xce>
 8016196:	3501      	adds	r5, #1
 8016198:	2300      	movs	r3, #0
 801619a:	951b      	str	r5, [sp, #108]	; 0x6c
 801619c:	930d      	str	r3, [sp, #52]	; 0x34
 801619e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	f040 859a 	bne.w	8016cda <_strtod_l+0xbba>
 80161a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161a8:	b1e3      	cbz	r3, 80161e4 <_strtod_l+0xc4>
 80161aa:	4652      	mov	r2, sl
 80161ac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80161b0:	ec43 2b10 	vmov	d0, r2, r3
 80161b4:	b021      	add	sp, #132	; 0x84
 80161b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161ba:	2a2b      	cmp	r2, #43	; 0x2b
 80161bc:	d015      	beq.n	80161ea <_strtod_l+0xca>
 80161be:	2a2d      	cmp	r2, #45	; 0x2d
 80161c0:	d004      	beq.n	80161cc <_strtod_l+0xac>
 80161c2:	2a20      	cmp	r2, #32
 80161c4:	d1ca      	bne.n	801615c <_strtod_l+0x3c>
 80161c6:	3301      	adds	r3, #1
 80161c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80161ca:	e7bf      	b.n	801614c <_strtod_l+0x2c>
 80161cc:	2201      	movs	r2, #1
 80161ce:	920d      	str	r2, [sp, #52]	; 0x34
 80161d0:	1c5a      	adds	r2, r3, #1
 80161d2:	921b      	str	r2, [sp, #108]	; 0x6c
 80161d4:	785b      	ldrb	r3, [r3, #1]
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d1c2      	bne.n	8016160 <_strtod_l+0x40>
 80161da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80161dc:	961b      	str	r6, [sp, #108]	; 0x6c
 80161de:	2b00      	cmp	r3, #0
 80161e0:	f040 8579 	bne.w	8016cd6 <_strtod_l+0xbb6>
 80161e4:	4652      	mov	r2, sl
 80161e6:	465b      	mov	r3, fp
 80161e8:	e7e2      	b.n	80161b0 <_strtod_l+0x90>
 80161ea:	2200      	movs	r2, #0
 80161ec:	e7ef      	b.n	80161ce <_strtod_l+0xae>
 80161ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80161f0:	b13a      	cbz	r2, 8016202 <_strtod_l+0xe2>
 80161f2:	2135      	movs	r1, #53	; 0x35
 80161f4:	a81e      	add	r0, sp, #120	; 0x78
 80161f6:	f002 fbb1 	bl	801895c <__copybits>
 80161fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80161fc:	4648      	mov	r0, r9
 80161fe:	f002 f81d 	bl	801823c <_Bfree>
 8016202:	3c01      	subs	r4, #1
 8016204:	2c04      	cmp	r4, #4
 8016206:	d806      	bhi.n	8016216 <_strtod_l+0xf6>
 8016208:	e8df f004 	tbb	[pc, r4]
 801620c:	1714030a 	.word	0x1714030a
 8016210:	0a          	.byte	0x0a
 8016211:	00          	.byte	0x00
 8016212:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8016216:	0730      	lsls	r0, r6, #28
 8016218:	d5c1      	bpl.n	801619e <_strtod_l+0x7e>
 801621a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801621e:	e7be      	b.n	801619e <_strtod_l+0x7e>
 8016220:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016224:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016226:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801622a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801622e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016232:	e7f0      	b.n	8016216 <_strtod_l+0xf6>
 8016234:	f8df b170 	ldr.w	fp, [pc, #368]	; 80163a8 <_strtod_l+0x288>
 8016238:	e7ed      	b.n	8016216 <_strtod_l+0xf6>
 801623a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801623e:	f04f 3aff 	mov.w	sl, #4294967295
 8016242:	e7e8      	b.n	8016216 <_strtod_l+0xf6>
 8016244:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016246:	1c5a      	adds	r2, r3, #1
 8016248:	921b      	str	r2, [sp, #108]	; 0x6c
 801624a:	785b      	ldrb	r3, [r3, #1]
 801624c:	2b30      	cmp	r3, #48	; 0x30
 801624e:	d0f9      	beq.n	8016244 <_strtod_l+0x124>
 8016250:	2b00      	cmp	r3, #0
 8016252:	d0a4      	beq.n	801619e <_strtod_l+0x7e>
 8016254:	2301      	movs	r3, #1
 8016256:	2500      	movs	r5, #0
 8016258:	9306      	str	r3, [sp, #24]
 801625a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801625c:	9308      	str	r3, [sp, #32]
 801625e:	9507      	str	r5, [sp, #28]
 8016260:	9505      	str	r5, [sp, #20]
 8016262:	220a      	movs	r2, #10
 8016264:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016266:	7807      	ldrb	r7, [r0, #0]
 8016268:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801626c:	b2d9      	uxtb	r1, r3
 801626e:	2909      	cmp	r1, #9
 8016270:	d929      	bls.n	80162c6 <_strtod_l+0x1a6>
 8016272:	4622      	mov	r2, r4
 8016274:	f8d8 1000 	ldr.w	r1, [r8]
 8016278:	f003 f8f8 	bl	801946c <strncmp>
 801627c:	2800      	cmp	r0, #0
 801627e:	d031      	beq.n	80162e4 <_strtod_l+0x1c4>
 8016280:	2000      	movs	r0, #0
 8016282:	9c05      	ldr	r4, [sp, #20]
 8016284:	9004      	str	r0, [sp, #16]
 8016286:	463b      	mov	r3, r7
 8016288:	4602      	mov	r2, r0
 801628a:	2b65      	cmp	r3, #101	; 0x65
 801628c:	d001      	beq.n	8016292 <_strtod_l+0x172>
 801628e:	2b45      	cmp	r3, #69	; 0x45
 8016290:	d114      	bne.n	80162bc <_strtod_l+0x19c>
 8016292:	b924      	cbnz	r4, 801629e <_strtod_l+0x17e>
 8016294:	b910      	cbnz	r0, 801629c <_strtod_l+0x17c>
 8016296:	9b06      	ldr	r3, [sp, #24]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d09e      	beq.n	80161da <_strtod_l+0xba>
 801629c:	2400      	movs	r4, #0
 801629e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80162a0:	1c73      	adds	r3, r6, #1
 80162a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80162a4:	7873      	ldrb	r3, [r6, #1]
 80162a6:	2b2b      	cmp	r3, #43	; 0x2b
 80162a8:	d078      	beq.n	801639c <_strtod_l+0x27c>
 80162aa:	2b2d      	cmp	r3, #45	; 0x2d
 80162ac:	d070      	beq.n	8016390 <_strtod_l+0x270>
 80162ae:	f04f 0c00 	mov.w	ip, #0
 80162b2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80162b6:	2f09      	cmp	r7, #9
 80162b8:	d97c      	bls.n	80163b4 <_strtod_l+0x294>
 80162ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80162bc:	f04f 0e00 	mov.w	lr, #0
 80162c0:	e09a      	b.n	80163f8 <_strtod_l+0x2d8>
 80162c2:	2300      	movs	r3, #0
 80162c4:	e7c7      	b.n	8016256 <_strtod_l+0x136>
 80162c6:	9905      	ldr	r1, [sp, #20]
 80162c8:	2908      	cmp	r1, #8
 80162ca:	bfdd      	ittte	le
 80162cc:	9907      	ldrle	r1, [sp, #28]
 80162ce:	fb02 3301 	mlale	r3, r2, r1, r3
 80162d2:	9307      	strle	r3, [sp, #28]
 80162d4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80162d8:	9b05      	ldr	r3, [sp, #20]
 80162da:	3001      	adds	r0, #1
 80162dc:	3301      	adds	r3, #1
 80162de:	9305      	str	r3, [sp, #20]
 80162e0:	901b      	str	r0, [sp, #108]	; 0x6c
 80162e2:	e7bf      	b.n	8016264 <_strtod_l+0x144>
 80162e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80162e6:	191a      	adds	r2, r3, r4
 80162e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80162ea:	9a05      	ldr	r2, [sp, #20]
 80162ec:	5d1b      	ldrb	r3, [r3, r4]
 80162ee:	2a00      	cmp	r2, #0
 80162f0:	d037      	beq.n	8016362 <_strtod_l+0x242>
 80162f2:	9c05      	ldr	r4, [sp, #20]
 80162f4:	4602      	mov	r2, r0
 80162f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80162fa:	2909      	cmp	r1, #9
 80162fc:	d913      	bls.n	8016326 <_strtod_l+0x206>
 80162fe:	2101      	movs	r1, #1
 8016300:	9104      	str	r1, [sp, #16]
 8016302:	e7c2      	b.n	801628a <_strtod_l+0x16a>
 8016304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016306:	1c5a      	adds	r2, r3, #1
 8016308:	921b      	str	r2, [sp, #108]	; 0x6c
 801630a:	785b      	ldrb	r3, [r3, #1]
 801630c:	3001      	adds	r0, #1
 801630e:	2b30      	cmp	r3, #48	; 0x30
 8016310:	d0f8      	beq.n	8016304 <_strtod_l+0x1e4>
 8016312:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8016316:	2a08      	cmp	r2, #8
 8016318:	f200 84e4 	bhi.w	8016ce4 <_strtod_l+0xbc4>
 801631c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801631e:	9208      	str	r2, [sp, #32]
 8016320:	4602      	mov	r2, r0
 8016322:	2000      	movs	r0, #0
 8016324:	4604      	mov	r4, r0
 8016326:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801632a:	f100 0101 	add.w	r1, r0, #1
 801632e:	d012      	beq.n	8016356 <_strtod_l+0x236>
 8016330:	440a      	add	r2, r1
 8016332:	eb00 0c04 	add.w	ip, r0, r4
 8016336:	4621      	mov	r1, r4
 8016338:	270a      	movs	r7, #10
 801633a:	458c      	cmp	ip, r1
 801633c:	d113      	bne.n	8016366 <_strtod_l+0x246>
 801633e:	1821      	adds	r1, r4, r0
 8016340:	2908      	cmp	r1, #8
 8016342:	f104 0401 	add.w	r4, r4, #1
 8016346:	4404      	add	r4, r0
 8016348:	dc19      	bgt.n	801637e <_strtod_l+0x25e>
 801634a:	9b07      	ldr	r3, [sp, #28]
 801634c:	210a      	movs	r1, #10
 801634e:	fb01 e303 	mla	r3, r1, r3, lr
 8016352:	9307      	str	r3, [sp, #28]
 8016354:	2100      	movs	r1, #0
 8016356:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016358:	1c58      	adds	r0, r3, #1
 801635a:	901b      	str	r0, [sp, #108]	; 0x6c
 801635c:	785b      	ldrb	r3, [r3, #1]
 801635e:	4608      	mov	r0, r1
 8016360:	e7c9      	b.n	80162f6 <_strtod_l+0x1d6>
 8016362:	9805      	ldr	r0, [sp, #20]
 8016364:	e7d3      	b.n	801630e <_strtod_l+0x1ee>
 8016366:	2908      	cmp	r1, #8
 8016368:	f101 0101 	add.w	r1, r1, #1
 801636c:	dc03      	bgt.n	8016376 <_strtod_l+0x256>
 801636e:	9b07      	ldr	r3, [sp, #28]
 8016370:	437b      	muls	r3, r7
 8016372:	9307      	str	r3, [sp, #28]
 8016374:	e7e1      	b.n	801633a <_strtod_l+0x21a>
 8016376:	2910      	cmp	r1, #16
 8016378:	bfd8      	it	le
 801637a:	437d      	mulle	r5, r7
 801637c:	e7dd      	b.n	801633a <_strtod_l+0x21a>
 801637e:	2c10      	cmp	r4, #16
 8016380:	bfdc      	itt	le
 8016382:	210a      	movle	r1, #10
 8016384:	fb01 e505 	mlale	r5, r1, r5, lr
 8016388:	e7e4      	b.n	8016354 <_strtod_l+0x234>
 801638a:	2301      	movs	r3, #1
 801638c:	9304      	str	r3, [sp, #16]
 801638e:	e781      	b.n	8016294 <_strtod_l+0x174>
 8016390:	f04f 0c01 	mov.w	ip, #1
 8016394:	1cb3      	adds	r3, r6, #2
 8016396:	931b      	str	r3, [sp, #108]	; 0x6c
 8016398:	78b3      	ldrb	r3, [r6, #2]
 801639a:	e78a      	b.n	80162b2 <_strtod_l+0x192>
 801639c:	f04f 0c00 	mov.w	ip, #0
 80163a0:	e7f8      	b.n	8016394 <_strtod_l+0x274>
 80163a2:	bf00      	nop
 80163a4:	08019fd0 	.word	0x08019fd0
 80163a8:	7ff00000 	.word	0x7ff00000
 80163ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80163ae:	1c5f      	adds	r7, r3, #1
 80163b0:	971b      	str	r7, [sp, #108]	; 0x6c
 80163b2:	785b      	ldrb	r3, [r3, #1]
 80163b4:	2b30      	cmp	r3, #48	; 0x30
 80163b6:	d0f9      	beq.n	80163ac <_strtod_l+0x28c>
 80163b8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80163bc:	2f08      	cmp	r7, #8
 80163be:	f63f af7d 	bhi.w	80162bc <_strtod_l+0x19c>
 80163c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80163c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80163c8:	930a      	str	r3, [sp, #40]	; 0x28
 80163ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80163cc:	1c5f      	adds	r7, r3, #1
 80163ce:	971b      	str	r7, [sp, #108]	; 0x6c
 80163d0:	785b      	ldrb	r3, [r3, #1]
 80163d2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80163d6:	f1b8 0f09 	cmp.w	r8, #9
 80163da:	d937      	bls.n	801644c <_strtod_l+0x32c>
 80163dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80163de:	1a7f      	subs	r7, r7, r1
 80163e0:	2f08      	cmp	r7, #8
 80163e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80163e6:	dc37      	bgt.n	8016458 <_strtod_l+0x338>
 80163e8:	45be      	cmp	lr, r7
 80163ea:	bfa8      	it	ge
 80163ec:	46be      	movge	lr, r7
 80163ee:	f1bc 0f00 	cmp.w	ip, #0
 80163f2:	d001      	beq.n	80163f8 <_strtod_l+0x2d8>
 80163f4:	f1ce 0e00 	rsb	lr, lr, #0
 80163f8:	2c00      	cmp	r4, #0
 80163fa:	d151      	bne.n	80164a0 <_strtod_l+0x380>
 80163fc:	2800      	cmp	r0, #0
 80163fe:	f47f aece 	bne.w	801619e <_strtod_l+0x7e>
 8016402:	9a06      	ldr	r2, [sp, #24]
 8016404:	2a00      	cmp	r2, #0
 8016406:	f47f aeca 	bne.w	801619e <_strtod_l+0x7e>
 801640a:	9a04      	ldr	r2, [sp, #16]
 801640c:	2a00      	cmp	r2, #0
 801640e:	f47f aee4 	bne.w	80161da <_strtod_l+0xba>
 8016412:	2b4e      	cmp	r3, #78	; 0x4e
 8016414:	d027      	beq.n	8016466 <_strtod_l+0x346>
 8016416:	dc21      	bgt.n	801645c <_strtod_l+0x33c>
 8016418:	2b49      	cmp	r3, #73	; 0x49
 801641a:	f47f aede 	bne.w	80161da <_strtod_l+0xba>
 801641e:	49a0      	ldr	r1, [pc, #640]	; (80166a0 <_strtod_l+0x580>)
 8016420:	a81b      	add	r0, sp, #108	; 0x6c
 8016422:	f001 fdf7 	bl	8018014 <__match>
 8016426:	2800      	cmp	r0, #0
 8016428:	f43f aed7 	beq.w	80161da <_strtod_l+0xba>
 801642c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801642e:	499d      	ldr	r1, [pc, #628]	; (80166a4 <_strtod_l+0x584>)
 8016430:	3b01      	subs	r3, #1
 8016432:	a81b      	add	r0, sp, #108	; 0x6c
 8016434:	931b      	str	r3, [sp, #108]	; 0x6c
 8016436:	f001 fded 	bl	8018014 <__match>
 801643a:	b910      	cbnz	r0, 8016442 <_strtod_l+0x322>
 801643c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801643e:	3301      	adds	r3, #1
 8016440:	931b      	str	r3, [sp, #108]	; 0x6c
 8016442:	f8df b274 	ldr.w	fp, [pc, #628]	; 80166b8 <_strtod_l+0x598>
 8016446:	f04f 0a00 	mov.w	sl, #0
 801644a:	e6a8      	b.n	801619e <_strtod_l+0x7e>
 801644c:	210a      	movs	r1, #10
 801644e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016452:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016456:	e7b8      	b.n	80163ca <_strtod_l+0x2aa>
 8016458:	46be      	mov	lr, r7
 801645a:	e7c8      	b.n	80163ee <_strtod_l+0x2ce>
 801645c:	2b69      	cmp	r3, #105	; 0x69
 801645e:	d0de      	beq.n	801641e <_strtod_l+0x2fe>
 8016460:	2b6e      	cmp	r3, #110	; 0x6e
 8016462:	f47f aeba 	bne.w	80161da <_strtod_l+0xba>
 8016466:	4990      	ldr	r1, [pc, #576]	; (80166a8 <_strtod_l+0x588>)
 8016468:	a81b      	add	r0, sp, #108	; 0x6c
 801646a:	f001 fdd3 	bl	8018014 <__match>
 801646e:	2800      	cmp	r0, #0
 8016470:	f43f aeb3 	beq.w	80161da <_strtod_l+0xba>
 8016474:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016476:	781b      	ldrb	r3, [r3, #0]
 8016478:	2b28      	cmp	r3, #40	; 0x28
 801647a:	d10e      	bne.n	801649a <_strtod_l+0x37a>
 801647c:	aa1e      	add	r2, sp, #120	; 0x78
 801647e:	498b      	ldr	r1, [pc, #556]	; (80166ac <_strtod_l+0x58c>)
 8016480:	a81b      	add	r0, sp, #108	; 0x6c
 8016482:	f001 fddb 	bl	801803c <__hexnan>
 8016486:	2805      	cmp	r0, #5
 8016488:	d107      	bne.n	801649a <_strtod_l+0x37a>
 801648a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801648c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016490:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016494:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016498:	e681      	b.n	801619e <_strtod_l+0x7e>
 801649a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80166c0 <_strtod_l+0x5a0>
 801649e:	e7d2      	b.n	8016446 <_strtod_l+0x326>
 80164a0:	ebae 0302 	sub.w	r3, lr, r2
 80164a4:	9306      	str	r3, [sp, #24]
 80164a6:	9b05      	ldr	r3, [sp, #20]
 80164a8:	9807      	ldr	r0, [sp, #28]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	bf08      	it	eq
 80164ae:	4623      	moveq	r3, r4
 80164b0:	2c10      	cmp	r4, #16
 80164b2:	9305      	str	r3, [sp, #20]
 80164b4:	46a0      	mov	r8, r4
 80164b6:	bfa8      	it	ge
 80164b8:	f04f 0810 	movge.w	r8, #16
 80164bc:	f7ea f83a 	bl	8000534 <__aeabi_ui2d>
 80164c0:	2c09      	cmp	r4, #9
 80164c2:	4682      	mov	sl, r0
 80164c4:	468b      	mov	fp, r1
 80164c6:	dc13      	bgt.n	80164f0 <_strtod_l+0x3d0>
 80164c8:	9b06      	ldr	r3, [sp, #24]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	f43f ae67 	beq.w	801619e <_strtod_l+0x7e>
 80164d0:	9b06      	ldr	r3, [sp, #24]
 80164d2:	dd7a      	ble.n	80165ca <_strtod_l+0x4aa>
 80164d4:	2b16      	cmp	r3, #22
 80164d6:	dc61      	bgt.n	801659c <_strtod_l+0x47c>
 80164d8:	4a75      	ldr	r2, [pc, #468]	; (80166b0 <_strtod_l+0x590>)
 80164da:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80164de:	e9de 0100 	ldrd	r0, r1, [lr]
 80164e2:	4652      	mov	r2, sl
 80164e4:	465b      	mov	r3, fp
 80164e6:	f7ea f89f 	bl	8000628 <__aeabi_dmul>
 80164ea:	4682      	mov	sl, r0
 80164ec:	468b      	mov	fp, r1
 80164ee:	e656      	b.n	801619e <_strtod_l+0x7e>
 80164f0:	4b6f      	ldr	r3, [pc, #444]	; (80166b0 <_strtod_l+0x590>)
 80164f2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80164f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80164fa:	f7ea f895 	bl	8000628 <__aeabi_dmul>
 80164fe:	4606      	mov	r6, r0
 8016500:	4628      	mov	r0, r5
 8016502:	460f      	mov	r7, r1
 8016504:	f7ea f816 	bl	8000534 <__aeabi_ui2d>
 8016508:	4602      	mov	r2, r0
 801650a:	460b      	mov	r3, r1
 801650c:	4630      	mov	r0, r6
 801650e:	4639      	mov	r1, r7
 8016510:	f7e9 fed4 	bl	80002bc <__adddf3>
 8016514:	2c0f      	cmp	r4, #15
 8016516:	4682      	mov	sl, r0
 8016518:	468b      	mov	fp, r1
 801651a:	ddd5      	ble.n	80164c8 <_strtod_l+0x3a8>
 801651c:	9b06      	ldr	r3, [sp, #24]
 801651e:	eba4 0808 	sub.w	r8, r4, r8
 8016522:	4498      	add	r8, r3
 8016524:	f1b8 0f00 	cmp.w	r8, #0
 8016528:	f340 8096 	ble.w	8016658 <_strtod_l+0x538>
 801652c:	f018 030f 	ands.w	r3, r8, #15
 8016530:	d00a      	beq.n	8016548 <_strtod_l+0x428>
 8016532:	495f      	ldr	r1, [pc, #380]	; (80166b0 <_strtod_l+0x590>)
 8016534:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016538:	4652      	mov	r2, sl
 801653a:	465b      	mov	r3, fp
 801653c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016540:	f7ea f872 	bl	8000628 <__aeabi_dmul>
 8016544:	4682      	mov	sl, r0
 8016546:	468b      	mov	fp, r1
 8016548:	f038 080f 	bics.w	r8, r8, #15
 801654c:	d073      	beq.n	8016636 <_strtod_l+0x516>
 801654e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016552:	dd47      	ble.n	80165e4 <_strtod_l+0x4c4>
 8016554:	2400      	movs	r4, #0
 8016556:	46a0      	mov	r8, r4
 8016558:	9407      	str	r4, [sp, #28]
 801655a:	9405      	str	r4, [sp, #20]
 801655c:	2322      	movs	r3, #34	; 0x22
 801655e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80166b8 <_strtod_l+0x598>
 8016562:	f8c9 3000 	str.w	r3, [r9]
 8016566:	f04f 0a00 	mov.w	sl, #0
 801656a:	9b07      	ldr	r3, [sp, #28]
 801656c:	2b00      	cmp	r3, #0
 801656e:	f43f ae16 	beq.w	801619e <_strtod_l+0x7e>
 8016572:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016574:	4648      	mov	r0, r9
 8016576:	f001 fe61 	bl	801823c <_Bfree>
 801657a:	9905      	ldr	r1, [sp, #20]
 801657c:	4648      	mov	r0, r9
 801657e:	f001 fe5d 	bl	801823c <_Bfree>
 8016582:	4641      	mov	r1, r8
 8016584:	4648      	mov	r0, r9
 8016586:	f001 fe59 	bl	801823c <_Bfree>
 801658a:	9907      	ldr	r1, [sp, #28]
 801658c:	4648      	mov	r0, r9
 801658e:	f001 fe55 	bl	801823c <_Bfree>
 8016592:	4621      	mov	r1, r4
 8016594:	4648      	mov	r0, r9
 8016596:	f001 fe51 	bl	801823c <_Bfree>
 801659a:	e600      	b.n	801619e <_strtod_l+0x7e>
 801659c:	9a06      	ldr	r2, [sp, #24]
 801659e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80165a2:	4293      	cmp	r3, r2
 80165a4:	dbba      	blt.n	801651c <_strtod_l+0x3fc>
 80165a6:	4d42      	ldr	r5, [pc, #264]	; (80166b0 <_strtod_l+0x590>)
 80165a8:	f1c4 040f 	rsb	r4, r4, #15
 80165ac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80165b0:	4652      	mov	r2, sl
 80165b2:	465b      	mov	r3, fp
 80165b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80165b8:	f7ea f836 	bl	8000628 <__aeabi_dmul>
 80165bc:	9b06      	ldr	r3, [sp, #24]
 80165be:	1b1c      	subs	r4, r3, r4
 80165c0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80165c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80165c8:	e78d      	b.n	80164e6 <_strtod_l+0x3c6>
 80165ca:	f113 0f16 	cmn.w	r3, #22
 80165ce:	dba5      	blt.n	801651c <_strtod_l+0x3fc>
 80165d0:	4a37      	ldr	r2, [pc, #220]	; (80166b0 <_strtod_l+0x590>)
 80165d2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80165d6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80165da:	4650      	mov	r0, sl
 80165dc:	4659      	mov	r1, fp
 80165de:	f7ea f94d 	bl	800087c <__aeabi_ddiv>
 80165e2:	e782      	b.n	80164ea <_strtod_l+0x3ca>
 80165e4:	2300      	movs	r3, #0
 80165e6:	4e33      	ldr	r6, [pc, #204]	; (80166b4 <_strtod_l+0x594>)
 80165e8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80165ec:	4650      	mov	r0, sl
 80165ee:	4659      	mov	r1, fp
 80165f0:	461d      	mov	r5, r3
 80165f2:	f1b8 0f01 	cmp.w	r8, #1
 80165f6:	dc21      	bgt.n	801663c <_strtod_l+0x51c>
 80165f8:	b10b      	cbz	r3, 80165fe <_strtod_l+0x4de>
 80165fa:	4682      	mov	sl, r0
 80165fc:	468b      	mov	fp, r1
 80165fe:	4b2d      	ldr	r3, [pc, #180]	; (80166b4 <_strtod_l+0x594>)
 8016600:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016604:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016608:	4652      	mov	r2, sl
 801660a:	465b      	mov	r3, fp
 801660c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016610:	f7ea f80a 	bl	8000628 <__aeabi_dmul>
 8016614:	4b28      	ldr	r3, [pc, #160]	; (80166b8 <_strtod_l+0x598>)
 8016616:	460a      	mov	r2, r1
 8016618:	400b      	ands	r3, r1
 801661a:	4928      	ldr	r1, [pc, #160]	; (80166bc <_strtod_l+0x59c>)
 801661c:	428b      	cmp	r3, r1
 801661e:	4682      	mov	sl, r0
 8016620:	d898      	bhi.n	8016554 <_strtod_l+0x434>
 8016622:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016626:	428b      	cmp	r3, r1
 8016628:	bf86      	itte	hi
 801662a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80166c4 <_strtod_l+0x5a4>
 801662e:	f04f 3aff 	movhi.w	sl, #4294967295
 8016632:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016636:	2300      	movs	r3, #0
 8016638:	9304      	str	r3, [sp, #16]
 801663a:	e077      	b.n	801672c <_strtod_l+0x60c>
 801663c:	f018 0f01 	tst.w	r8, #1
 8016640:	d006      	beq.n	8016650 <_strtod_l+0x530>
 8016642:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801664a:	f7e9 ffed 	bl	8000628 <__aeabi_dmul>
 801664e:	2301      	movs	r3, #1
 8016650:	3501      	adds	r5, #1
 8016652:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016656:	e7cc      	b.n	80165f2 <_strtod_l+0x4d2>
 8016658:	d0ed      	beq.n	8016636 <_strtod_l+0x516>
 801665a:	f1c8 0800 	rsb	r8, r8, #0
 801665e:	f018 020f 	ands.w	r2, r8, #15
 8016662:	d00a      	beq.n	801667a <_strtod_l+0x55a>
 8016664:	4b12      	ldr	r3, [pc, #72]	; (80166b0 <_strtod_l+0x590>)
 8016666:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801666a:	4650      	mov	r0, sl
 801666c:	4659      	mov	r1, fp
 801666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016672:	f7ea f903 	bl	800087c <__aeabi_ddiv>
 8016676:	4682      	mov	sl, r0
 8016678:	468b      	mov	fp, r1
 801667a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801667e:	d0da      	beq.n	8016636 <_strtod_l+0x516>
 8016680:	f1b8 0f1f 	cmp.w	r8, #31
 8016684:	dd20      	ble.n	80166c8 <_strtod_l+0x5a8>
 8016686:	2400      	movs	r4, #0
 8016688:	46a0      	mov	r8, r4
 801668a:	9407      	str	r4, [sp, #28]
 801668c:	9405      	str	r4, [sp, #20]
 801668e:	2322      	movs	r3, #34	; 0x22
 8016690:	f04f 0a00 	mov.w	sl, #0
 8016694:	f04f 0b00 	mov.w	fp, #0
 8016698:	f8c9 3000 	str.w	r3, [r9]
 801669c:	e765      	b.n	801656a <_strtod_l+0x44a>
 801669e:	bf00      	nop
 80166a0:	08019f9d 	.word	0x08019f9d
 80166a4:	0801a023 	.word	0x0801a023
 80166a8:	08019fa5 	.word	0x08019fa5
 80166ac:	08019fe4 	.word	0x08019fe4
 80166b0:	0801a060 	.word	0x0801a060
 80166b4:	0801a038 	.word	0x0801a038
 80166b8:	7ff00000 	.word	0x7ff00000
 80166bc:	7ca00000 	.word	0x7ca00000
 80166c0:	fff80000 	.word	0xfff80000
 80166c4:	7fefffff 	.word	0x7fefffff
 80166c8:	f018 0310 	ands.w	r3, r8, #16
 80166cc:	bf18      	it	ne
 80166ce:	236a      	movne	r3, #106	; 0x6a
 80166d0:	4da0      	ldr	r5, [pc, #640]	; (8016954 <_strtod_l+0x834>)
 80166d2:	9304      	str	r3, [sp, #16]
 80166d4:	4650      	mov	r0, sl
 80166d6:	4659      	mov	r1, fp
 80166d8:	2300      	movs	r3, #0
 80166da:	f1b8 0f00 	cmp.w	r8, #0
 80166de:	f300 810a 	bgt.w	80168f6 <_strtod_l+0x7d6>
 80166e2:	b10b      	cbz	r3, 80166e8 <_strtod_l+0x5c8>
 80166e4:	4682      	mov	sl, r0
 80166e6:	468b      	mov	fp, r1
 80166e8:	9b04      	ldr	r3, [sp, #16]
 80166ea:	b1bb      	cbz	r3, 801671c <_strtod_l+0x5fc>
 80166ec:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80166f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	4659      	mov	r1, fp
 80166f8:	dd10      	ble.n	801671c <_strtod_l+0x5fc>
 80166fa:	2b1f      	cmp	r3, #31
 80166fc:	f340 8107 	ble.w	801690e <_strtod_l+0x7ee>
 8016700:	2b34      	cmp	r3, #52	; 0x34
 8016702:	bfde      	ittt	le
 8016704:	3b20      	suble	r3, #32
 8016706:	f04f 32ff 	movle.w	r2, #4294967295
 801670a:	fa02 f303 	lslle.w	r3, r2, r3
 801670e:	f04f 0a00 	mov.w	sl, #0
 8016712:	bfcc      	ite	gt
 8016714:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016718:	ea03 0b01 	andle.w	fp, r3, r1
 801671c:	2200      	movs	r2, #0
 801671e:	2300      	movs	r3, #0
 8016720:	4650      	mov	r0, sl
 8016722:	4659      	mov	r1, fp
 8016724:	f7ea f9e8 	bl	8000af8 <__aeabi_dcmpeq>
 8016728:	2800      	cmp	r0, #0
 801672a:	d1ac      	bne.n	8016686 <_strtod_l+0x566>
 801672c:	9b07      	ldr	r3, [sp, #28]
 801672e:	9300      	str	r3, [sp, #0]
 8016730:	9a05      	ldr	r2, [sp, #20]
 8016732:	9908      	ldr	r1, [sp, #32]
 8016734:	4623      	mov	r3, r4
 8016736:	4648      	mov	r0, r9
 8016738:	f001 fdd2 	bl	80182e0 <__s2b>
 801673c:	9007      	str	r0, [sp, #28]
 801673e:	2800      	cmp	r0, #0
 8016740:	f43f af08 	beq.w	8016554 <_strtod_l+0x434>
 8016744:	9a06      	ldr	r2, [sp, #24]
 8016746:	9b06      	ldr	r3, [sp, #24]
 8016748:	2a00      	cmp	r2, #0
 801674a:	f1c3 0300 	rsb	r3, r3, #0
 801674e:	bfa8      	it	ge
 8016750:	2300      	movge	r3, #0
 8016752:	930e      	str	r3, [sp, #56]	; 0x38
 8016754:	2400      	movs	r4, #0
 8016756:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801675a:	9316      	str	r3, [sp, #88]	; 0x58
 801675c:	46a0      	mov	r8, r4
 801675e:	9b07      	ldr	r3, [sp, #28]
 8016760:	4648      	mov	r0, r9
 8016762:	6859      	ldr	r1, [r3, #4]
 8016764:	f001 fd36 	bl	80181d4 <_Balloc>
 8016768:	9005      	str	r0, [sp, #20]
 801676a:	2800      	cmp	r0, #0
 801676c:	f43f aef6 	beq.w	801655c <_strtod_l+0x43c>
 8016770:	9b07      	ldr	r3, [sp, #28]
 8016772:	691a      	ldr	r2, [r3, #16]
 8016774:	3202      	adds	r2, #2
 8016776:	f103 010c 	add.w	r1, r3, #12
 801677a:	0092      	lsls	r2, r2, #2
 801677c:	300c      	adds	r0, #12
 801677e:	f7fe fdd3 	bl	8015328 <memcpy>
 8016782:	aa1e      	add	r2, sp, #120	; 0x78
 8016784:	a91d      	add	r1, sp, #116	; 0x74
 8016786:	ec4b ab10 	vmov	d0, sl, fp
 801678a:	4648      	mov	r0, r9
 801678c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016790:	f002 f862 	bl	8018858 <__d2b>
 8016794:	901c      	str	r0, [sp, #112]	; 0x70
 8016796:	2800      	cmp	r0, #0
 8016798:	f43f aee0 	beq.w	801655c <_strtod_l+0x43c>
 801679c:	2101      	movs	r1, #1
 801679e:	4648      	mov	r0, r9
 80167a0:	f001 fe2a 	bl	80183f8 <__i2b>
 80167a4:	4680      	mov	r8, r0
 80167a6:	2800      	cmp	r0, #0
 80167a8:	f43f aed8 	beq.w	801655c <_strtod_l+0x43c>
 80167ac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80167ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80167b0:	2e00      	cmp	r6, #0
 80167b2:	bfab      	itete	ge
 80167b4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80167b6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80167b8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80167ba:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80167bc:	bfac      	ite	ge
 80167be:	18f7      	addge	r7, r6, r3
 80167c0:	1b9d      	sublt	r5, r3, r6
 80167c2:	9b04      	ldr	r3, [sp, #16]
 80167c4:	1af6      	subs	r6, r6, r3
 80167c6:	4416      	add	r6, r2
 80167c8:	4b63      	ldr	r3, [pc, #396]	; (8016958 <_strtod_l+0x838>)
 80167ca:	3e01      	subs	r6, #1
 80167cc:	429e      	cmp	r6, r3
 80167ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80167d2:	f280 80af 	bge.w	8016934 <_strtod_l+0x814>
 80167d6:	1b9b      	subs	r3, r3, r6
 80167d8:	2b1f      	cmp	r3, #31
 80167da:	eba2 0203 	sub.w	r2, r2, r3
 80167de:	f04f 0101 	mov.w	r1, #1
 80167e2:	f300 809b 	bgt.w	801691c <_strtod_l+0x7fc>
 80167e6:	fa01 f303 	lsl.w	r3, r1, r3
 80167ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80167ec:	2300      	movs	r3, #0
 80167ee:	930a      	str	r3, [sp, #40]	; 0x28
 80167f0:	18be      	adds	r6, r7, r2
 80167f2:	9b04      	ldr	r3, [sp, #16]
 80167f4:	42b7      	cmp	r7, r6
 80167f6:	4415      	add	r5, r2
 80167f8:	441d      	add	r5, r3
 80167fa:	463b      	mov	r3, r7
 80167fc:	bfa8      	it	ge
 80167fe:	4633      	movge	r3, r6
 8016800:	42ab      	cmp	r3, r5
 8016802:	bfa8      	it	ge
 8016804:	462b      	movge	r3, r5
 8016806:	2b00      	cmp	r3, #0
 8016808:	bfc2      	ittt	gt
 801680a:	1af6      	subgt	r6, r6, r3
 801680c:	1aed      	subgt	r5, r5, r3
 801680e:	1aff      	subgt	r7, r7, r3
 8016810:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016812:	b1bb      	cbz	r3, 8016844 <_strtod_l+0x724>
 8016814:	4641      	mov	r1, r8
 8016816:	461a      	mov	r2, r3
 8016818:	4648      	mov	r0, r9
 801681a:	f001 fe8d 	bl	8018538 <__pow5mult>
 801681e:	4680      	mov	r8, r0
 8016820:	2800      	cmp	r0, #0
 8016822:	f43f ae9b 	beq.w	801655c <_strtod_l+0x43c>
 8016826:	4601      	mov	r1, r0
 8016828:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801682a:	4648      	mov	r0, r9
 801682c:	f001 fded 	bl	801840a <__multiply>
 8016830:	900c      	str	r0, [sp, #48]	; 0x30
 8016832:	2800      	cmp	r0, #0
 8016834:	f43f ae92 	beq.w	801655c <_strtod_l+0x43c>
 8016838:	991c      	ldr	r1, [sp, #112]	; 0x70
 801683a:	4648      	mov	r0, r9
 801683c:	f001 fcfe 	bl	801823c <_Bfree>
 8016840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016842:	931c      	str	r3, [sp, #112]	; 0x70
 8016844:	2e00      	cmp	r6, #0
 8016846:	dc7a      	bgt.n	801693e <_strtod_l+0x81e>
 8016848:	9b06      	ldr	r3, [sp, #24]
 801684a:	2b00      	cmp	r3, #0
 801684c:	dd08      	ble.n	8016860 <_strtod_l+0x740>
 801684e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016850:	9905      	ldr	r1, [sp, #20]
 8016852:	4648      	mov	r0, r9
 8016854:	f001 fe70 	bl	8018538 <__pow5mult>
 8016858:	9005      	str	r0, [sp, #20]
 801685a:	2800      	cmp	r0, #0
 801685c:	f43f ae7e 	beq.w	801655c <_strtod_l+0x43c>
 8016860:	2d00      	cmp	r5, #0
 8016862:	dd08      	ble.n	8016876 <_strtod_l+0x756>
 8016864:	462a      	mov	r2, r5
 8016866:	9905      	ldr	r1, [sp, #20]
 8016868:	4648      	mov	r0, r9
 801686a:	f001 feb3 	bl	80185d4 <__lshift>
 801686e:	9005      	str	r0, [sp, #20]
 8016870:	2800      	cmp	r0, #0
 8016872:	f43f ae73 	beq.w	801655c <_strtod_l+0x43c>
 8016876:	2f00      	cmp	r7, #0
 8016878:	dd08      	ble.n	801688c <_strtod_l+0x76c>
 801687a:	4641      	mov	r1, r8
 801687c:	463a      	mov	r2, r7
 801687e:	4648      	mov	r0, r9
 8016880:	f001 fea8 	bl	80185d4 <__lshift>
 8016884:	4680      	mov	r8, r0
 8016886:	2800      	cmp	r0, #0
 8016888:	f43f ae68 	beq.w	801655c <_strtod_l+0x43c>
 801688c:	9a05      	ldr	r2, [sp, #20]
 801688e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016890:	4648      	mov	r0, r9
 8016892:	f001 ff0d 	bl	80186b0 <__mdiff>
 8016896:	4604      	mov	r4, r0
 8016898:	2800      	cmp	r0, #0
 801689a:	f43f ae5f 	beq.w	801655c <_strtod_l+0x43c>
 801689e:	68c3      	ldr	r3, [r0, #12]
 80168a0:	930c      	str	r3, [sp, #48]	; 0x30
 80168a2:	2300      	movs	r3, #0
 80168a4:	60c3      	str	r3, [r0, #12]
 80168a6:	4641      	mov	r1, r8
 80168a8:	f001 fee8 	bl	801867c <__mcmp>
 80168ac:	2800      	cmp	r0, #0
 80168ae:	da55      	bge.n	801695c <_strtod_l+0x83c>
 80168b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168b2:	b9e3      	cbnz	r3, 80168ee <_strtod_l+0x7ce>
 80168b4:	f1ba 0f00 	cmp.w	sl, #0
 80168b8:	d119      	bne.n	80168ee <_strtod_l+0x7ce>
 80168ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80168be:	b9b3      	cbnz	r3, 80168ee <_strtod_l+0x7ce>
 80168c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80168c4:	0d1b      	lsrs	r3, r3, #20
 80168c6:	051b      	lsls	r3, r3, #20
 80168c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80168cc:	d90f      	bls.n	80168ee <_strtod_l+0x7ce>
 80168ce:	6963      	ldr	r3, [r4, #20]
 80168d0:	b913      	cbnz	r3, 80168d8 <_strtod_l+0x7b8>
 80168d2:	6923      	ldr	r3, [r4, #16]
 80168d4:	2b01      	cmp	r3, #1
 80168d6:	dd0a      	ble.n	80168ee <_strtod_l+0x7ce>
 80168d8:	4621      	mov	r1, r4
 80168da:	2201      	movs	r2, #1
 80168dc:	4648      	mov	r0, r9
 80168de:	f001 fe79 	bl	80185d4 <__lshift>
 80168e2:	4641      	mov	r1, r8
 80168e4:	4604      	mov	r4, r0
 80168e6:	f001 fec9 	bl	801867c <__mcmp>
 80168ea:	2800      	cmp	r0, #0
 80168ec:	dc67      	bgt.n	80169be <_strtod_l+0x89e>
 80168ee:	9b04      	ldr	r3, [sp, #16]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d171      	bne.n	80169d8 <_strtod_l+0x8b8>
 80168f4:	e63d      	b.n	8016572 <_strtod_l+0x452>
 80168f6:	f018 0f01 	tst.w	r8, #1
 80168fa:	d004      	beq.n	8016906 <_strtod_l+0x7e6>
 80168fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016900:	f7e9 fe92 	bl	8000628 <__aeabi_dmul>
 8016904:	2301      	movs	r3, #1
 8016906:	ea4f 0868 	mov.w	r8, r8, asr #1
 801690a:	3508      	adds	r5, #8
 801690c:	e6e5      	b.n	80166da <_strtod_l+0x5ba>
 801690e:	f04f 32ff 	mov.w	r2, #4294967295
 8016912:	fa02 f303 	lsl.w	r3, r2, r3
 8016916:	ea03 0a0a 	and.w	sl, r3, sl
 801691a:	e6ff      	b.n	801671c <_strtod_l+0x5fc>
 801691c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016920:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016924:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016928:	36e2      	adds	r6, #226	; 0xe2
 801692a:	fa01 f306 	lsl.w	r3, r1, r6
 801692e:	930a      	str	r3, [sp, #40]	; 0x28
 8016930:	910f      	str	r1, [sp, #60]	; 0x3c
 8016932:	e75d      	b.n	80167f0 <_strtod_l+0x6d0>
 8016934:	2300      	movs	r3, #0
 8016936:	930a      	str	r3, [sp, #40]	; 0x28
 8016938:	2301      	movs	r3, #1
 801693a:	930f      	str	r3, [sp, #60]	; 0x3c
 801693c:	e758      	b.n	80167f0 <_strtod_l+0x6d0>
 801693e:	4632      	mov	r2, r6
 8016940:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016942:	4648      	mov	r0, r9
 8016944:	f001 fe46 	bl	80185d4 <__lshift>
 8016948:	901c      	str	r0, [sp, #112]	; 0x70
 801694a:	2800      	cmp	r0, #0
 801694c:	f47f af7c 	bne.w	8016848 <_strtod_l+0x728>
 8016950:	e604      	b.n	801655c <_strtod_l+0x43c>
 8016952:	bf00      	nop
 8016954:	08019ff8 	.word	0x08019ff8
 8016958:	fffffc02 	.word	0xfffffc02
 801695c:	465d      	mov	r5, fp
 801695e:	f040 8086 	bne.w	8016a6e <_strtod_l+0x94e>
 8016962:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016964:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016968:	b32a      	cbz	r2, 80169b6 <_strtod_l+0x896>
 801696a:	4aaf      	ldr	r2, [pc, #700]	; (8016c28 <_strtod_l+0xb08>)
 801696c:	4293      	cmp	r3, r2
 801696e:	d153      	bne.n	8016a18 <_strtod_l+0x8f8>
 8016970:	9b04      	ldr	r3, [sp, #16]
 8016972:	4650      	mov	r0, sl
 8016974:	b1d3      	cbz	r3, 80169ac <_strtod_l+0x88c>
 8016976:	4aad      	ldr	r2, [pc, #692]	; (8016c2c <_strtod_l+0xb0c>)
 8016978:	402a      	ands	r2, r5
 801697a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801697e:	f04f 31ff 	mov.w	r1, #4294967295
 8016982:	d816      	bhi.n	80169b2 <_strtod_l+0x892>
 8016984:	0d12      	lsrs	r2, r2, #20
 8016986:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801698a:	fa01 f303 	lsl.w	r3, r1, r3
 801698e:	4298      	cmp	r0, r3
 8016990:	d142      	bne.n	8016a18 <_strtod_l+0x8f8>
 8016992:	4ba7      	ldr	r3, [pc, #668]	; (8016c30 <_strtod_l+0xb10>)
 8016994:	429d      	cmp	r5, r3
 8016996:	d102      	bne.n	801699e <_strtod_l+0x87e>
 8016998:	3001      	adds	r0, #1
 801699a:	f43f addf 	beq.w	801655c <_strtod_l+0x43c>
 801699e:	4ba3      	ldr	r3, [pc, #652]	; (8016c2c <_strtod_l+0xb0c>)
 80169a0:	402b      	ands	r3, r5
 80169a2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80169a6:	f04f 0a00 	mov.w	sl, #0
 80169aa:	e7a0      	b.n	80168ee <_strtod_l+0x7ce>
 80169ac:	f04f 33ff 	mov.w	r3, #4294967295
 80169b0:	e7ed      	b.n	801698e <_strtod_l+0x86e>
 80169b2:	460b      	mov	r3, r1
 80169b4:	e7eb      	b.n	801698e <_strtod_l+0x86e>
 80169b6:	bb7b      	cbnz	r3, 8016a18 <_strtod_l+0x8f8>
 80169b8:	f1ba 0f00 	cmp.w	sl, #0
 80169bc:	d12c      	bne.n	8016a18 <_strtod_l+0x8f8>
 80169be:	9904      	ldr	r1, [sp, #16]
 80169c0:	4a9a      	ldr	r2, [pc, #616]	; (8016c2c <_strtod_l+0xb0c>)
 80169c2:	465b      	mov	r3, fp
 80169c4:	b1f1      	cbz	r1, 8016a04 <_strtod_l+0x8e4>
 80169c6:	ea02 010b 	and.w	r1, r2, fp
 80169ca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80169ce:	dc19      	bgt.n	8016a04 <_strtod_l+0x8e4>
 80169d0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80169d4:	f77f ae5b 	ble.w	801668e <_strtod_l+0x56e>
 80169d8:	4a96      	ldr	r2, [pc, #600]	; (8016c34 <_strtod_l+0xb14>)
 80169da:	2300      	movs	r3, #0
 80169dc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80169e0:	4650      	mov	r0, sl
 80169e2:	4659      	mov	r1, fp
 80169e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80169e8:	f7e9 fe1e 	bl	8000628 <__aeabi_dmul>
 80169ec:	4682      	mov	sl, r0
 80169ee:	468b      	mov	fp, r1
 80169f0:	2900      	cmp	r1, #0
 80169f2:	f47f adbe 	bne.w	8016572 <_strtod_l+0x452>
 80169f6:	2800      	cmp	r0, #0
 80169f8:	f47f adbb 	bne.w	8016572 <_strtod_l+0x452>
 80169fc:	2322      	movs	r3, #34	; 0x22
 80169fe:	f8c9 3000 	str.w	r3, [r9]
 8016a02:	e5b6      	b.n	8016572 <_strtod_l+0x452>
 8016a04:	4013      	ands	r3, r2
 8016a06:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016a0a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016a0e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016a12:	f04f 3aff 	mov.w	sl, #4294967295
 8016a16:	e76a      	b.n	80168ee <_strtod_l+0x7ce>
 8016a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a1a:	b193      	cbz	r3, 8016a42 <_strtod_l+0x922>
 8016a1c:	422b      	tst	r3, r5
 8016a1e:	f43f af66 	beq.w	80168ee <_strtod_l+0x7ce>
 8016a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a24:	9a04      	ldr	r2, [sp, #16]
 8016a26:	4650      	mov	r0, sl
 8016a28:	4659      	mov	r1, fp
 8016a2a:	b173      	cbz	r3, 8016a4a <_strtod_l+0x92a>
 8016a2c:	f7ff fb5c 	bl	80160e8 <sulp>
 8016a30:	4602      	mov	r2, r0
 8016a32:	460b      	mov	r3, r1
 8016a34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016a38:	f7e9 fc40 	bl	80002bc <__adddf3>
 8016a3c:	4682      	mov	sl, r0
 8016a3e:	468b      	mov	fp, r1
 8016a40:	e755      	b.n	80168ee <_strtod_l+0x7ce>
 8016a42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a44:	ea13 0f0a 	tst.w	r3, sl
 8016a48:	e7e9      	b.n	8016a1e <_strtod_l+0x8fe>
 8016a4a:	f7ff fb4d 	bl	80160e8 <sulp>
 8016a4e:	4602      	mov	r2, r0
 8016a50:	460b      	mov	r3, r1
 8016a52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016a56:	f7e9 fc2f 	bl	80002b8 <__aeabi_dsub>
 8016a5a:	2200      	movs	r2, #0
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	4682      	mov	sl, r0
 8016a60:	468b      	mov	fp, r1
 8016a62:	f7ea f849 	bl	8000af8 <__aeabi_dcmpeq>
 8016a66:	2800      	cmp	r0, #0
 8016a68:	f47f ae11 	bne.w	801668e <_strtod_l+0x56e>
 8016a6c:	e73f      	b.n	80168ee <_strtod_l+0x7ce>
 8016a6e:	4641      	mov	r1, r8
 8016a70:	4620      	mov	r0, r4
 8016a72:	f001 ff40 	bl	80188f6 <__ratio>
 8016a76:	ec57 6b10 	vmov	r6, r7, d0
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016a80:	ee10 0a10 	vmov	r0, s0
 8016a84:	4639      	mov	r1, r7
 8016a86:	f7ea f84b 	bl	8000b20 <__aeabi_dcmple>
 8016a8a:	2800      	cmp	r0, #0
 8016a8c:	d077      	beq.n	8016b7e <_strtod_l+0xa5e>
 8016a8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d04a      	beq.n	8016b2a <_strtod_l+0xa0a>
 8016a94:	4b68      	ldr	r3, [pc, #416]	; (8016c38 <_strtod_l+0xb18>)
 8016a96:	2200      	movs	r2, #0
 8016a98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016a9c:	4f66      	ldr	r7, [pc, #408]	; (8016c38 <_strtod_l+0xb18>)
 8016a9e:	2600      	movs	r6, #0
 8016aa0:	4b62      	ldr	r3, [pc, #392]	; (8016c2c <_strtod_l+0xb0c>)
 8016aa2:	402b      	ands	r3, r5
 8016aa4:	930f      	str	r3, [sp, #60]	; 0x3c
 8016aa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016aa8:	4b64      	ldr	r3, [pc, #400]	; (8016c3c <_strtod_l+0xb1c>)
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	f040 80ce 	bne.w	8016c4c <_strtod_l+0xb2c>
 8016ab0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016ab4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016ab8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016abc:	ec4b ab10 	vmov	d0, sl, fp
 8016ac0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016ac4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016ac8:	f001 fe50 	bl	801876c <__ulp>
 8016acc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016ad0:	ec53 2b10 	vmov	r2, r3, d0
 8016ad4:	f7e9 fda8 	bl	8000628 <__aeabi_dmul>
 8016ad8:	4652      	mov	r2, sl
 8016ada:	465b      	mov	r3, fp
 8016adc:	f7e9 fbee 	bl	80002bc <__adddf3>
 8016ae0:	460b      	mov	r3, r1
 8016ae2:	4952      	ldr	r1, [pc, #328]	; (8016c2c <_strtod_l+0xb0c>)
 8016ae4:	4a56      	ldr	r2, [pc, #344]	; (8016c40 <_strtod_l+0xb20>)
 8016ae6:	4019      	ands	r1, r3
 8016ae8:	4291      	cmp	r1, r2
 8016aea:	4682      	mov	sl, r0
 8016aec:	d95b      	bls.n	8016ba6 <_strtod_l+0xa86>
 8016aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016af0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016af4:	4293      	cmp	r3, r2
 8016af6:	d103      	bne.n	8016b00 <_strtod_l+0x9e0>
 8016af8:	9b08      	ldr	r3, [sp, #32]
 8016afa:	3301      	adds	r3, #1
 8016afc:	f43f ad2e 	beq.w	801655c <_strtod_l+0x43c>
 8016b00:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016c30 <_strtod_l+0xb10>
 8016b04:	f04f 3aff 	mov.w	sl, #4294967295
 8016b08:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016b0a:	4648      	mov	r0, r9
 8016b0c:	f001 fb96 	bl	801823c <_Bfree>
 8016b10:	9905      	ldr	r1, [sp, #20]
 8016b12:	4648      	mov	r0, r9
 8016b14:	f001 fb92 	bl	801823c <_Bfree>
 8016b18:	4641      	mov	r1, r8
 8016b1a:	4648      	mov	r0, r9
 8016b1c:	f001 fb8e 	bl	801823c <_Bfree>
 8016b20:	4621      	mov	r1, r4
 8016b22:	4648      	mov	r0, r9
 8016b24:	f001 fb8a 	bl	801823c <_Bfree>
 8016b28:	e619      	b.n	801675e <_strtod_l+0x63e>
 8016b2a:	f1ba 0f00 	cmp.w	sl, #0
 8016b2e:	d11a      	bne.n	8016b66 <_strtod_l+0xa46>
 8016b30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016b34:	b9eb      	cbnz	r3, 8016b72 <_strtod_l+0xa52>
 8016b36:	2200      	movs	r2, #0
 8016b38:	4b3f      	ldr	r3, [pc, #252]	; (8016c38 <_strtod_l+0xb18>)
 8016b3a:	4630      	mov	r0, r6
 8016b3c:	4639      	mov	r1, r7
 8016b3e:	f7e9 ffe5 	bl	8000b0c <__aeabi_dcmplt>
 8016b42:	b9c8      	cbnz	r0, 8016b78 <_strtod_l+0xa58>
 8016b44:	4630      	mov	r0, r6
 8016b46:	4639      	mov	r1, r7
 8016b48:	2200      	movs	r2, #0
 8016b4a:	4b3e      	ldr	r3, [pc, #248]	; (8016c44 <_strtod_l+0xb24>)
 8016b4c:	f7e9 fd6c 	bl	8000628 <__aeabi_dmul>
 8016b50:	4606      	mov	r6, r0
 8016b52:	460f      	mov	r7, r1
 8016b54:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016b58:	9618      	str	r6, [sp, #96]	; 0x60
 8016b5a:	9319      	str	r3, [sp, #100]	; 0x64
 8016b5c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016b60:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016b64:	e79c      	b.n	8016aa0 <_strtod_l+0x980>
 8016b66:	f1ba 0f01 	cmp.w	sl, #1
 8016b6a:	d102      	bne.n	8016b72 <_strtod_l+0xa52>
 8016b6c:	2d00      	cmp	r5, #0
 8016b6e:	f43f ad8e 	beq.w	801668e <_strtod_l+0x56e>
 8016b72:	2200      	movs	r2, #0
 8016b74:	4b34      	ldr	r3, [pc, #208]	; (8016c48 <_strtod_l+0xb28>)
 8016b76:	e78f      	b.n	8016a98 <_strtod_l+0x978>
 8016b78:	2600      	movs	r6, #0
 8016b7a:	4f32      	ldr	r7, [pc, #200]	; (8016c44 <_strtod_l+0xb24>)
 8016b7c:	e7ea      	b.n	8016b54 <_strtod_l+0xa34>
 8016b7e:	4b31      	ldr	r3, [pc, #196]	; (8016c44 <_strtod_l+0xb24>)
 8016b80:	4630      	mov	r0, r6
 8016b82:	4639      	mov	r1, r7
 8016b84:	2200      	movs	r2, #0
 8016b86:	f7e9 fd4f 	bl	8000628 <__aeabi_dmul>
 8016b8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b8c:	4606      	mov	r6, r0
 8016b8e:	460f      	mov	r7, r1
 8016b90:	b933      	cbnz	r3, 8016ba0 <_strtod_l+0xa80>
 8016b92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016b96:	9010      	str	r0, [sp, #64]	; 0x40
 8016b98:	9311      	str	r3, [sp, #68]	; 0x44
 8016b9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016b9e:	e7df      	b.n	8016b60 <_strtod_l+0xa40>
 8016ba0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016ba4:	e7f9      	b.n	8016b9a <_strtod_l+0xa7a>
 8016ba6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016baa:	9b04      	ldr	r3, [sp, #16]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d1ab      	bne.n	8016b08 <_strtod_l+0x9e8>
 8016bb0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016bb4:	0d1b      	lsrs	r3, r3, #20
 8016bb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016bb8:	051b      	lsls	r3, r3, #20
 8016bba:	429a      	cmp	r2, r3
 8016bbc:	465d      	mov	r5, fp
 8016bbe:	d1a3      	bne.n	8016b08 <_strtod_l+0x9e8>
 8016bc0:	4639      	mov	r1, r7
 8016bc2:	4630      	mov	r0, r6
 8016bc4:	f7e9 ffe0 	bl	8000b88 <__aeabi_d2iz>
 8016bc8:	f7e9 fcc4 	bl	8000554 <__aeabi_i2d>
 8016bcc:	460b      	mov	r3, r1
 8016bce:	4602      	mov	r2, r0
 8016bd0:	4639      	mov	r1, r7
 8016bd2:	4630      	mov	r0, r6
 8016bd4:	f7e9 fb70 	bl	80002b8 <__aeabi_dsub>
 8016bd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016bda:	4606      	mov	r6, r0
 8016bdc:	460f      	mov	r7, r1
 8016bde:	b933      	cbnz	r3, 8016bee <_strtod_l+0xace>
 8016be0:	f1ba 0f00 	cmp.w	sl, #0
 8016be4:	d103      	bne.n	8016bee <_strtod_l+0xace>
 8016be6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016bea:	2d00      	cmp	r5, #0
 8016bec:	d06d      	beq.n	8016cca <_strtod_l+0xbaa>
 8016bee:	a30a      	add	r3, pc, #40	; (adr r3, 8016c18 <_strtod_l+0xaf8>)
 8016bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bf4:	4630      	mov	r0, r6
 8016bf6:	4639      	mov	r1, r7
 8016bf8:	f7e9 ff88 	bl	8000b0c <__aeabi_dcmplt>
 8016bfc:	2800      	cmp	r0, #0
 8016bfe:	f47f acb8 	bne.w	8016572 <_strtod_l+0x452>
 8016c02:	a307      	add	r3, pc, #28	; (adr r3, 8016c20 <_strtod_l+0xb00>)
 8016c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c08:	4630      	mov	r0, r6
 8016c0a:	4639      	mov	r1, r7
 8016c0c:	f7e9 ff9c 	bl	8000b48 <__aeabi_dcmpgt>
 8016c10:	2800      	cmp	r0, #0
 8016c12:	f43f af79 	beq.w	8016b08 <_strtod_l+0x9e8>
 8016c16:	e4ac      	b.n	8016572 <_strtod_l+0x452>
 8016c18:	94a03595 	.word	0x94a03595
 8016c1c:	3fdfffff 	.word	0x3fdfffff
 8016c20:	35afe535 	.word	0x35afe535
 8016c24:	3fe00000 	.word	0x3fe00000
 8016c28:	000fffff 	.word	0x000fffff
 8016c2c:	7ff00000 	.word	0x7ff00000
 8016c30:	7fefffff 	.word	0x7fefffff
 8016c34:	39500000 	.word	0x39500000
 8016c38:	3ff00000 	.word	0x3ff00000
 8016c3c:	7fe00000 	.word	0x7fe00000
 8016c40:	7c9fffff 	.word	0x7c9fffff
 8016c44:	3fe00000 	.word	0x3fe00000
 8016c48:	bff00000 	.word	0xbff00000
 8016c4c:	9b04      	ldr	r3, [sp, #16]
 8016c4e:	b333      	cbz	r3, 8016c9e <_strtod_l+0xb7e>
 8016c50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c52:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016c56:	d822      	bhi.n	8016c9e <_strtod_l+0xb7e>
 8016c58:	a327      	add	r3, pc, #156	; (adr r3, 8016cf8 <_strtod_l+0xbd8>)
 8016c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c5e:	4630      	mov	r0, r6
 8016c60:	4639      	mov	r1, r7
 8016c62:	f7e9 ff5d 	bl	8000b20 <__aeabi_dcmple>
 8016c66:	b1a0      	cbz	r0, 8016c92 <_strtod_l+0xb72>
 8016c68:	4639      	mov	r1, r7
 8016c6a:	4630      	mov	r0, r6
 8016c6c:	f7e9 ffb4 	bl	8000bd8 <__aeabi_d2uiz>
 8016c70:	2800      	cmp	r0, #0
 8016c72:	bf08      	it	eq
 8016c74:	2001      	moveq	r0, #1
 8016c76:	f7e9 fc5d 	bl	8000534 <__aeabi_ui2d>
 8016c7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c7c:	4606      	mov	r6, r0
 8016c7e:	460f      	mov	r7, r1
 8016c80:	bb03      	cbnz	r3, 8016cc4 <_strtod_l+0xba4>
 8016c82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016c86:	9012      	str	r0, [sp, #72]	; 0x48
 8016c88:	9313      	str	r3, [sp, #76]	; 0x4c
 8016c8a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016c8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016c96:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016c9a:	1a9b      	subs	r3, r3, r2
 8016c9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8016c9e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016ca2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8016ca6:	f001 fd61 	bl	801876c <__ulp>
 8016caa:	4650      	mov	r0, sl
 8016cac:	ec53 2b10 	vmov	r2, r3, d0
 8016cb0:	4659      	mov	r1, fp
 8016cb2:	f7e9 fcb9 	bl	8000628 <__aeabi_dmul>
 8016cb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016cba:	f7e9 faff 	bl	80002bc <__adddf3>
 8016cbe:	4682      	mov	sl, r0
 8016cc0:	468b      	mov	fp, r1
 8016cc2:	e772      	b.n	8016baa <_strtod_l+0xa8a>
 8016cc4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016cc8:	e7df      	b.n	8016c8a <_strtod_l+0xb6a>
 8016cca:	a30d      	add	r3, pc, #52	; (adr r3, 8016d00 <_strtod_l+0xbe0>)
 8016ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cd0:	f7e9 ff1c 	bl	8000b0c <__aeabi_dcmplt>
 8016cd4:	e79c      	b.n	8016c10 <_strtod_l+0xaf0>
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	930d      	str	r3, [sp, #52]	; 0x34
 8016cda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016cdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016cde:	6013      	str	r3, [r2, #0]
 8016ce0:	f7ff ba61 	b.w	80161a6 <_strtod_l+0x86>
 8016ce4:	2b65      	cmp	r3, #101	; 0x65
 8016ce6:	f04f 0200 	mov.w	r2, #0
 8016cea:	f43f ab4e 	beq.w	801638a <_strtod_l+0x26a>
 8016cee:	2101      	movs	r1, #1
 8016cf0:	4614      	mov	r4, r2
 8016cf2:	9104      	str	r1, [sp, #16]
 8016cf4:	f7ff bacb 	b.w	801628e <_strtod_l+0x16e>
 8016cf8:	ffc00000 	.word	0xffc00000
 8016cfc:	41dfffff 	.word	0x41dfffff
 8016d00:	94a03595 	.word	0x94a03595
 8016d04:	3fcfffff 	.word	0x3fcfffff

08016d08 <_strtod_r>:
 8016d08:	4b05      	ldr	r3, [pc, #20]	; (8016d20 <_strtod_r+0x18>)
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	b410      	push	{r4}
 8016d0e:	6a1b      	ldr	r3, [r3, #32]
 8016d10:	4c04      	ldr	r4, [pc, #16]	; (8016d24 <_strtod_r+0x1c>)
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	bf08      	it	eq
 8016d16:	4623      	moveq	r3, r4
 8016d18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d1c:	f7ff ba00 	b.w	8016120 <_strtod_l>
 8016d20:	2000000c 	.word	0x2000000c
 8016d24:	20000070 	.word	0x20000070

08016d28 <_strtol_l.isra.0>:
 8016d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d2c:	4680      	mov	r8, r0
 8016d2e:	4689      	mov	r9, r1
 8016d30:	4692      	mov	sl, r2
 8016d32:	461e      	mov	r6, r3
 8016d34:	460f      	mov	r7, r1
 8016d36:	463d      	mov	r5, r7
 8016d38:	9808      	ldr	r0, [sp, #32]
 8016d3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016d3e:	f001 fa0d 	bl	801815c <__locale_ctype_ptr_l>
 8016d42:	4420      	add	r0, r4
 8016d44:	7843      	ldrb	r3, [r0, #1]
 8016d46:	f013 0308 	ands.w	r3, r3, #8
 8016d4a:	d132      	bne.n	8016db2 <_strtol_l.isra.0+0x8a>
 8016d4c:	2c2d      	cmp	r4, #45	; 0x2d
 8016d4e:	d132      	bne.n	8016db6 <_strtol_l.isra.0+0x8e>
 8016d50:	787c      	ldrb	r4, [r7, #1]
 8016d52:	1cbd      	adds	r5, r7, #2
 8016d54:	2201      	movs	r2, #1
 8016d56:	2e00      	cmp	r6, #0
 8016d58:	d05d      	beq.n	8016e16 <_strtol_l.isra.0+0xee>
 8016d5a:	2e10      	cmp	r6, #16
 8016d5c:	d109      	bne.n	8016d72 <_strtol_l.isra.0+0x4a>
 8016d5e:	2c30      	cmp	r4, #48	; 0x30
 8016d60:	d107      	bne.n	8016d72 <_strtol_l.isra.0+0x4a>
 8016d62:	782b      	ldrb	r3, [r5, #0]
 8016d64:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016d68:	2b58      	cmp	r3, #88	; 0x58
 8016d6a:	d14f      	bne.n	8016e0c <_strtol_l.isra.0+0xe4>
 8016d6c:	786c      	ldrb	r4, [r5, #1]
 8016d6e:	2610      	movs	r6, #16
 8016d70:	3502      	adds	r5, #2
 8016d72:	2a00      	cmp	r2, #0
 8016d74:	bf14      	ite	ne
 8016d76:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016d7a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016d7e:	2700      	movs	r7, #0
 8016d80:	fbb1 fcf6 	udiv	ip, r1, r6
 8016d84:	4638      	mov	r0, r7
 8016d86:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016d8a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016d8e:	2b09      	cmp	r3, #9
 8016d90:	d817      	bhi.n	8016dc2 <_strtol_l.isra.0+0x9a>
 8016d92:	461c      	mov	r4, r3
 8016d94:	42a6      	cmp	r6, r4
 8016d96:	dd23      	ble.n	8016de0 <_strtol_l.isra.0+0xb8>
 8016d98:	1c7b      	adds	r3, r7, #1
 8016d9a:	d007      	beq.n	8016dac <_strtol_l.isra.0+0x84>
 8016d9c:	4584      	cmp	ip, r0
 8016d9e:	d31c      	bcc.n	8016dda <_strtol_l.isra.0+0xb2>
 8016da0:	d101      	bne.n	8016da6 <_strtol_l.isra.0+0x7e>
 8016da2:	45a6      	cmp	lr, r4
 8016da4:	db19      	blt.n	8016dda <_strtol_l.isra.0+0xb2>
 8016da6:	fb00 4006 	mla	r0, r0, r6, r4
 8016daa:	2701      	movs	r7, #1
 8016dac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016db0:	e7eb      	b.n	8016d8a <_strtol_l.isra.0+0x62>
 8016db2:	462f      	mov	r7, r5
 8016db4:	e7bf      	b.n	8016d36 <_strtol_l.isra.0+0xe>
 8016db6:	2c2b      	cmp	r4, #43	; 0x2b
 8016db8:	bf04      	itt	eq
 8016dba:	1cbd      	addeq	r5, r7, #2
 8016dbc:	787c      	ldrbeq	r4, [r7, #1]
 8016dbe:	461a      	mov	r2, r3
 8016dc0:	e7c9      	b.n	8016d56 <_strtol_l.isra.0+0x2e>
 8016dc2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016dc6:	2b19      	cmp	r3, #25
 8016dc8:	d801      	bhi.n	8016dce <_strtol_l.isra.0+0xa6>
 8016dca:	3c37      	subs	r4, #55	; 0x37
 8016dcc:	e7e2      	b.n	8016d94 <_strtol_l.isra.0+0x6c>
 8016dce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016dd2:	2b19      	cmp	r3, #25
 8016dd4:	d804      	bhi.n	8016de0 <_strtol_l.isra.0+0xb8>
 8016dd6:	3c57      	subs	r4, #87	; 0x57
 8016dd8:	e7dc      	b.n	8016d94 <_strtol_l.isra.0+0x6c>
 8016dda:	f04f 37ff 	mov.w	r7, #4294967295
 8016dde:	e7e5      	b.n	8016dac <_strtol_l.isra.0+0x84>
 8016de0:	1c7b      	adds	r3, r7, #1
 8016de2:	d108      	bne.n	8016df6 <_strtol_l.isra.0+0xce>
 8016de4:	2322      	movs	r3, #34	; 0x22
 8016de6:	f8c8 3000 	str.w	r3, [r8]
 8016dea:	4608      	mov	r0, r1
 8016dec:	f1ba 0f00 	cmp.w	sl, #0
 8016df0:	d107      	bne.n	8016e02 <_strtol_l.isra.0+0xda>
 8016df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016df6:	b102      	cbz	r2, 8016dfa <_strtol_l.isra.0+0xd2>
 8016df8:	4240      	negs	r0, r0
 8016dfa:	f1ba 0f00 	cmp.w	sl, #0
 8016dfe:	d0f8      	beq.n	8016df2 <_strtol_l.isra.0+0xca>
 8016e00:	b10f      	cbz	r7, 8016e06 <_strtol_l.isra.0+0xde>
 8016e02:	f105 39ff 	add.w	r9, r5, #4294967295
 8016e06:	f8ca 9000 	str.w	r9, [sl]
 8016e0a:	e7f2      	b.n	8016df2 <_strtol_l.isra.0+0xca>
 8016e0c:	2430      	movs	r4, #48	; 0x30
 8016e0e:	2e00      	cmp	r6, #0
 8016e10:	d1af      	bne.n	8016d72 <_strtol_l.isra.0+0x4a>
 8016e12:	2608      	movs	r6, #8
 8016e14:	e7ad      	b.n	8016d72 <_strtol_l.isra.0+0x4a>
 8016e16:	2c30      	cmp	r4, #48	; 0x30
 8016e18:	d0a3      	beq.n	8016d62 <_strtol_l.isra.0+0x3a>
 8016e1a:	260a      	movs	r6, #10
 8016e1c:	e7a9      	b.n	8016d72 <_strtol_l.isra.0+0x4a>
	...

08016e20 <_strtol_r>:
 8016e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016e22:	4c06      	ldr	r4, [pc, #24]	; (8016e3c <_strtol_r+0x1c>)
 8016e24:	4d06      	ldr	r5, [pc, #24]	; (8016e40 <_strtol_r+0x20>)
 8016e26:	6824      	ldr	r4, [r4, #0]
 8016e28:	6a24      	ldr	r4, [r4, #32]
 8016e2a:	2c00      	cmp	r4, #0
 8016e2c:	bf08      	it	eq
 8016e2e:	462c      	moveq	r4, r5
 8016e30:	9400      	str	r4, [sp, #0]
 8016e32:	f7ff ff79 	bl	8016d28 <_strtol_l.isra.0>
 8016e36:	b003      	add	sp, #12
 8016e38:	bd30      	pop	{r4, r5, pc}
 8016e3a:	bf00      	nop
 8016e3c:	2000000c 	.word	0x2000000c
 8016e40:	20000070 	.word	0x20000070

08016e44 <_vsiprintf_r>:
 8016e44:	b500      	push	{lr}
 8016e46:	b09b      	sub	sp, #108	; 0x6c
 8016e48:	9100      	str	r1, [sp, #0]
 8016e4a:	9104      	str	r1, [sp, #16]
 8016e4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016e50:	9105      	str	r1, [sp, #20]
 8016e52:	9102      	str	r1, [sp, #8]
 8016e54:	4905      	ldr	r1, [pc, #20]	; (8016e6c <_vsiprintf_r+0x28>)
 8016e56:	9103      	str	r1, [sp, #12]
 8016e58:	4669      	mov	r1, sp
 8016e5a:	f001 fecb 	bl	8018bf4 <_svfiprintf_r>
 8016e5e:	9b00      	ldr	r3, [sp, #0]
 8016e60:	2200      	movs	r2, #0
 8016e62:	701a      	strb	r2, [r3, #0]
 8016e64:	b01b      	add	sp, #108	; 0x6c
 8016e66:	f85d fb04 	ldr.w	pc, [sp], #4
 8016e6a:	bf00      	nop
 8016e6c:	ffff0208 	.word	0xffff0208

08016e70 <vsiprintf>:
 8016e70:	4613      	mov	r3, r2
 8016e72:	460a      	mov	r2, r1
 8016e74:	4601      	mov	r1, r0
 8016e76:	4802      	ldr	r0, [pc, #8]	; (8016e80 <vsiprintf+0x10>)
 8016e78:	6800      	ldr	r0, [r0, #0]
 8016e7a:	f7ff bfe3 	b.w	8016e44 <_vsiprintf_r>
 8016e7e:	bf00      	nop
 8016e80:	2000000c 	.word	0x2000000c

08016e84 <quorem>:
 8016e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e88:	6903      	ldr	r3, [r0, #16]
 8016e8a:	690c      	ldr	r4, [r1, #16]
 8016e8c:	42a3      	cmp	r3, r4
 8016e8e:	4680      	mov	r8, r0
 8016e90:	f2c0 8082 	blt.w	8016f98 <quorem+0x114>
 8016e94:	3c01      	subs	r4, #1
 8016e96:	f101 0714 	add.w	r7, r1, #20
 8016e9a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016e9e:	f100 0614 	add.w	r6, r0, #20
 8016ea2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016ea6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016eaa:	eb06 030c 	add.w	r3, r6, ip
 8016eae:	3501      	adds	r5, #1
 8016eb0:	eb07 090c 	add.w	r9, r7, ip
 8016eb4:	9301      	str	r3, [sp, #4]
 8016eb6:	fbb0 f5f5 	udiv	r5, r0, r5
 8016eba:	b395      	cbz	r5, 8016f22 <quorem+0x9e>
 8016ebc:	f04f 0a00 	mov.w	sl, #0
 8016ec0:	4638      	mov	r0, r7
 8016ec2:	46b6      	mov	lr, r6
 8016ec4:	46d3      	mov	fp, sl
 8016ec6:	f850 2b04 	ldr.w	r2, [r0], #4
 8016eca:	b293      	uxth	r3, r2
 8016ecc:	fb05 a303 	mla	r3, r5, r3, sl
 8016ed0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016ed4:	b29b      	uxth	r3, r3
 8016ed6:	ebab 0303 	sub.w	r3, fp, r3
 8016eda:	0c12      	lsrs	r2, r2, #16
 8016edc:	f8de b000 	ldr.w	fp, [lr]
 8016ee0:	fb05 a202 	mla	r2, r5, r2, sl
 8016ee4:	fa13 f38b 	uxtah	r3, r3, fp
 8016ee8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016eec:	fa1f fb82 	uxth.w	fp, r2
 8016ef0:	f8de 2000 	ldr.w	r2, [lr]
 8016ef4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016ef8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016efc:	b29b      	uxth	r3, r3
 8016efe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016f02:	4581      	cmp	r9, r0
 8016f04:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016f08:	f84e 3b04 	str.w	r3, [lr], #4
 8016f0c:	d2db      	bcs.n	8016ec6 <quorem+0x42>
 8016f0e:	f856 300c 	ldr.w	r3, [r6, ip]
 8016f12:	b933      	cbnz	r3, 8016f22 <quorem+0x9e>
 8016f14:	9b01      	ldr	r3, [sp, #4]
 8016f16:	3b04      	subs	r3, #4
 8016f18:	429e      	cmp	r6, r3
 8016f1a:	461a      	mov	r2, r3
 8016f1c:	d330      	bcc.n	8016f80 <quorem+0xfc>
 8016f1e:	f8c8 4010 	str.w	r4, [r8, #16]
 8016f22:	4640      	mov	r0, r8
 8016f24:	f001 fbaa 	bl	801867c <__mcmp>
 8016f28:	2800      	cmp	r0, #0
 8016f2a:	db25      	blt.n	8016f78 <quorem+0xf4>
 8016f2c:	3501      	adds	r5, #1
 8016f2e:	4630      	mov	r0, r6
 8016f30:	f04f 0c00 	mov.w	ip, #0
 8016f34:	f857 2b04 	ldr.w	r2, [r7], #4
 8016f38:	f8d0 e000 	ldr.w	lr, [r0]
 8016f3c:	b293      	uxth	r3, r2
 8016f3e:	ebac 0303 	sub.w	r3, ip, r3
 8016f42:	0c12      	lsrs	r2, r2, #16
 8016f44:	fa13 f38e 	uxtah	r3, r3, lr
 8016f48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016f4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016f50:	b29b      	uxth	r3, r3
 8016f52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016f56:	45b9      	cmp	r9, r7
 8016f58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016f5c:	f840 3b04 	str.w	r3, [r0], #4
 8016f60:	d2e8      	bcs.n	8016f34 <quorem+0xb0>
 8016f62:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016f66:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016f6a:	b92a      	cbnz	r2, 8016f78 <quorem+0xf4>
 8016f6c:	3b04      	subs	r3, #4
 8016f6e:	429e      	cmp	r6, r3
 8016f70:	461a      	mov	r2, r3
 8016f72:	d30b      	bcc.n	8016f8c <quorem+0x108>
 8016f74:	f8c8 4010 	str.w	r4, [r8, #16]
 8016f78:	4628      	mov	r0, r5
 8016f7a:	b003      	add	sp, #12
 8016f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f80:	6812      	ldr	r2, [r2, #0]
 8016f82:	3b04      	subs	r3, #4
 8016f84:	2a00      	cmp	r2, #0
 8016f86:	d1ca      	bne.n	8016f1e <quorem+0x9a>
 8016f88:	3c01      	subs	r4, #1
 8016f8a:	e7c5      	b.n	8016f18 <quorem+0x94>
 8016f8c:	6812      	ldr	r2, [r2, #0]
 8016f8e:	3b04      	subs	r3, #4
 8016f90:	2a00      	cmp	r2, #0
 8016f92:	d1ef      	bne.n	8016f74 <quorem+0xf0>
 8016f94:	3c01      	subs	r4, #1
 8016f96:	e7ea      	b.n	8016f6e <quorem+0xea>
 8016f98:	2000      	movs	r0, #0
 8016f9a:	e7ee      	b.n	8016f7a <quorem+0xf6>
 8016f9c:	0000      	movs	r0, r0
	...

08016fa0 <_dtoa_r>:
 8016fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fa4:	ec57 6b10 	vmov	r6, r7, d0
 8016fa8:	b097      	sub	sp, #92	; 0x5c
 8016faa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016fac:	9106      	str	r1, [sp, #24]
 8016fae:	4604      	mov	r4, r0
 8016fb0:	920b      	str	r2, [sp, #44]	; 0x2c
 8016fb2:	9312      	str	r3, [sp, #72]	; 0x48
 8016fb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016fb8:	e9cd 6700 	strd	r6, r7, [sp]
 8016fbc:	b93d      	cbnz	r5, 8016fce <_dtoa_r+0x2e>
 8016fbe:	2010      	movs	r0, #16
 8016fc0:	f001 f8ee 	bl	80181a0 <malloc>
 8016fc4:	6260      	str	r0, [r4, #36]	; 0x24
 8016fc6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016fca:	6005      	str	r5, [r0, #0]
 8016fcc:	60c5      	str	r5, [r0, #12]
 8016fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016fd0:	6819      	ldr	r1, [r3, #0]
 8016fd2:	b151      	cbz	r1, 8016fea <_dtoa_r+0x4a>
 8016fd4:	685a      	ldr	r2, [r3, #4]
 8016fd6:	604a      	str	r2, [r1, #4]
 8016fd8:	2301      	movs	r3, #1
 8016fda:	4093      	lsls	r3, r2
 8016fdc:	608b      	str	r3, [r1, #8]
 8016fde:	4620      	mov	r0, r4
 8016fe0:	f001 f92c 	bl	801823c <_Bfree>
 8016fe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016fe6:	2200      	movs	r2, #0
 8016fe8:	601a      	str	r2, [r3, #0]
 8016fea:	1e3b      	subs	r3, r7, #0
 8016fec:	bfbb      	ittet	lt
 8016fee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016ff2:	9301      	strlt	r3, [sp, #4]
 8016ff4:	2300      	movge	r3, #0
 8016ff6:	2201      	movlt	r2, #1
 8016ff8:	bfac      	ite	ge
 8016ffa:	f8c8 3000 	strge.w	r3, [r8]
 8016ffe:	f8c8 2000 	strlt.w	r2, [r8]
 8017002:	4baf      	ldr	r3, [pc, #700]	; (80172c0 <_dtoa_r+0x320>)
 8017004:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017008:	ea33 0308 	bics.w	r3, r3, r8
 801700c:	d114      	bne.n	8017038 <_dtoa_r+0x98>
 801700e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017010:	f242 730f 	movw	r3, #9999	; 0x270f
 8017014:	6013      	str	r3, [r2, #0]
 8017016:	9b00      	ldr	r3, [sp, #0]
 8017018:	b923      	cbnz	r3, 8017024 <_dtoa_r+0x84>
 801701a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801701e:	2800      	cmp	r0, #0
 8017020:	f000 8542 	beq.w	8017aa8 <_dtoa_r+0xb08>
 8017024:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017026:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80172d4 <_dtoa_r+0x334>
 801702a:	2b00      	cmp	r3, #0
 801702c:	f000 8544 	beq.w	8017ab8 <_dtoa_r+0xb18>
 8017030:	f10b 0303 	add.w	r3, fp, #3
 8017034:	f000 bd3e 	b.w	8017ab4 <_dtoa_r+0xb14>
 8017038:	e9dd 6700 	ldrd	r6, r7, [sp]
 801703c:	2200      	movs	r2, #0
 801703e:	2300      	movs	r3, #0
 8017040:	4630      	mov	r0, r6
 8017042:	4639      	mov	r1, r7
 8017044:	f7e9 fd58 	bl	8000af8 <__aeabi_dcmpeq>
 8017048:	4681      	mov	r9, r0
 801704a:	b168      	cbz	r0, 8017068 <_dtoa_r+0xc8>
 801704c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801704e:	2301      	movs	r3, #1
 8017050:	6013      	str	r3, [r2, #0]
 8017052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017054:	2b00      	cmp	r3, #0
 8017056:	f000 8524 	beq.w	8017aa2 <_dtoa_r+0xb02>
 801705a:	4b9a      	ldr	r3, [pc, #616]	; (80172c4 <_dtoa_r+0x324>)
 801705c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801705e:	f103 3bff 	add.w	fp, r3, #4294967295
 8017062:	6013      	str	r3, [r2, #0]
 8017064:	f000 bd28 	b.w	8017ab8 <_dtoa_r+0xb18>
 8017068:	aa14      	add	r2, sp, #80	; 0x50
 801706a:	a915      	add	r1, sp, #84	; 0x54
 801706c:	ec47 6b10 	vmov	d0, r6, r7
 8017070:	4620      	mov	r0, r4
 8017072:	f001 fbf1 	bl	8018858 <__d2b>
 8017076:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801707a:	9004      	str	r0, [sp, #16]
 801707c:	2d00      	cmp	r5, #0
 801707e:	d07c      	beq.n	801717a <_dtoa_r+0x1da>
 8017080:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017084:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017088:	46b2      	mov	sl, r6
 801708a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801708e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017092:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8017096:	2200      	movs	r2, #0
 8017098:	4b8b      	ldr	r3, [pc, #556]	; (80172c8 <_dtoa_r+0x328>)
 801709a:	4650      	mov	r0, sl
 801709c:	4659      	mov	r1, fp
 801709e:	f7e9 f90b 	bl	80002b8 <__aeabi_dsub>
 80170a2:	a381      	add	r3, pc, #516	; (adr r3, 80172a8 <_dtoa_r+0x308>)
 80170a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170a8:	f7e9 fabe 	bl	8000628 <__aeabi_dmul>
 80170ac:	a380      	add	r3, pc, #512	; (adr r3, 80172b0 <_dtoa_r+0x310>)
 80170ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170b2:	f7e9 f903 	bl	80002bc <__adddf3>
 80170b6:	4606      	mov	r6, r0
 80170b8:	4628      	mov	r0, r5
 80170ba:	460f      	mov	r7, r1
 80170bc:	f7e9 fa4a 	bl	8000554 <__aeabi_i2d>
 80170c0:	a37d      	add	r3, pc, #500	; (adr r3, 80172b8 <_dtoa_r+0x318>)
 80170c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170c6:	f7e9 faaf 	bl	8000628 <__aeabi_dmul>
 80170ca:	4602      	mov	r2, r0
 80170cc:	460b      	mov	r3, r1
 80170ce:	4630      	mov	r0, r6
 80170d0:	4639      	mov	r1, r7
 80170d2:	f7e9 f8f3 	bl	80002bc <__adddf3>
 80170d6:	4606      	mov	r6, r0
 80170d8:	460f      	mov	r7, r1
 80170da:	f7e9 fd55 	bl	8000b88 <__aeabi_d2iz>
 80170de:	2200      	movs	r2, #0
 80170e0:	4682      	mov	sl, r0
 80170e2:	2300      	movs	r3, #0
 80170e4:	4630      	mov	r0, r6
 80170e6:	4639      	mov	r1, r7
 80170e8:	f7e9 fd10 	bl	8000b0c <__aeabi_dcmplt>
 80170ec:	b148      	cbz	r0, 8017102 <_dtoa_r+0x162>
 80170ee:	4650      	mov	r0, sl
 80170f0:	f7e9 fa30 	bl	8000554 <__aeabi_i2d>
 80170f4:	4632      	mov	r2, r6
 80170f6:	463b      	mov	r3, r7
 80170f8:	f7e9 fcfe 	bl	8000af8 <__aeabi_dcmpeq>
 80170fc:	b908      	cbnz	r0, 8017102 <_dtoa_r+0x162>
 80170fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017102:	f1ba 0f16 	cmp.w	sl, #22
 8017106:	d859      	bhi.n	80171bc <_dtoa_r+0x21c>
 8017108:	4970      	ldr	r1, [pc, #448]	; (80172cc <_dtoa_r+0x32c>)
 801710a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801710e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017112:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017116:	f7e9 fd17 	bl	8000b48 <__aeabi_dcmpgt>
 801711a:	2800      	cmp	r0, #0
 801711c:	d050      	beq.n	80171c0 <_dtoa_r+0x220>
 801711e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017122:	2300      	movs	r3, #0
 8017124:	930f      	str	r3, [sp, #60]	; 0x3c
 8017126:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017128:	1b5d      	subs	r5, r3, r5
 801712a:	f1b5 0801 	subs.w	r8, r5, #1
 801712e:	bf49      	itett	mi
 8017130:	f1c5 0301 	rsbmi	r3, r5, #1
 8017134:	2300      	movpl	r3, #0
 8017136:	9305      	strmi	r3, [sp, #20]
 8017138:	f04f 0800 	movmi.w	r8, #0
 801713c:	bf58      	it	pl
 801713e:	9305      	strpl	r3, [sp, #20]
 8017140:	f1ba 0f00 	cmp.w	sl, #0
 8017144:	db3e      	blt.n	80171c4 <_dtoa_r+0x224>
 8017146:	2300      	movs	r3, #0
 8017148:	44d0      	add	r8, sl
 801714a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801714e:	9307      	str	r3, [sp, #28]
 8017150:	9b06      	ldr	r3, [sp, #24]
 8017152:	2b09      	cmp	r3, #9
 8017154:	f200 8090 	bhi.w	8017278 <_dtoa_r+0x2d8>
 8017158:	2b05      	cmp	r3, #5
 801715a:	bfc4      	itt	gt
 801715c:	3b04      	subgt	r3, #4
 801715e:	9306      	strgt	r3, [sp, #24]
 8017160:	9b06      	ldr	r3, [sp, #24]
 8017162:	f1a3 0302 	sub.w	r3, r3, #2
 8017166:	bfcc      	ite	gt
 8017168:	2500      	movgt	r5, #0
 801716a:	2501      	movle	r5, #1
 801716c:	2b03      	cmp	r3, #3
 801716e:	f200 808f 	bhi.w	8017290 <_dtoa_r+0x2f0>
 8017172:	e8df f003 	tbb	[pc, r3]
 8017176:	7f7d      	.short	0x7f7d
 8017178:	7131      	.short	0x7131
 801717a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801717e:	441d      	add	r5, r3
 8017180:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017184:	2820      	cmp	r0, #32
 8017186:	dd13      	ble.n	80171b0 <_dtoa_r+0x210>
 8017188:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801718c:	9b00      	ldr	r3, [sp, #0]
 801718e:	fa08 f800 	lsl.w	r8, r8, r0
 8017192:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017196:	fa23 f000 	lsr.w	r0, r3, r0
 801719a:	ea48 0000 	orr.w	r0, r8, r0
 801719e:	f7e9 f9c9 	bl	8000534 <__aeabi_ui2d>
 80171a2:	2301      	movs	r3, #1
 80171a4:	4682      	mov	sl, r0
 80171a6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80171aa:	3d01      	subs	r5, #1
 80171ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80171ae:	e772      	b.n	8017096 <_dtoa_r+0xf6>
 80171b0:	9b00      	ldr	r3, [sp, #0]
 80171b2:	f1c0 0020 	rsb	r0, r0, #32
 80171b6:	fa03 f000 	lsl.w	r0, r3, r0
 80171ba:	e7f0      	b.n	801719e <_dtoa_r+0x1fe>
 80171bc:	2301      	movs	r3, #1
 80171be:	e7b1      	b.n	8017124 <_dtoa_r+0x184>
 80171c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80171c2:	e7b0      	b.n	8017126 <_dtoa_r+0x186>
 80171c4:	9b05      	ldr	r3, [sp, #20]
 80171c6:	eba3 030a 	sub.w	r3, r3, sl
 80171ca:	9305      	str	r3, [sp, #20]
 80171cc:	f1ca 0300 	rsb	r3, sl, #0
 80171d0:	9307      	str	r3, [sp, #28]
 80171d2:	2300      	movs	r3, #0
 80171d4:	930e      	str	r3, [sp, #56]	; 0x38
 80171d6:	e7bb      	b.n	8017150 <_dtoa_r+0x1b0>
 80171d8:	2301      	movs	r3, #1
 80171da:	930a      	str	r3, [sp, #40]	; 0x28
 80171dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80171de:	2b00      	cmp	r3, #0
 80171e0:	dd59      	ble.n	8017296 <_dtoa_r+0x2f6>
 80171e2:	9302      	str	r3, [sp, #8]
 80171e4:	4699      	mov	r9, r3
 80171e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80171e8:	2200      	movs	r2, #0
 80171ea:	6072      	str	r2, [r6, #4]
 80171ec:	2204      	movs	r2, #4
 80171ee:	f102 0014 	add.w	r0, r2, #20
 80171f2:	4298      	cmp	r0, r3
 80171f4:	6871      	ldr	r1, [r6, #4]
 80171f6:	d953      	bls.n	80172a0 <_dtoa_r+0x300>
 80171f8:	4620      	mov	r0, r4
 80171fa:	f000 ffeb 	bl	80181d4 <_Balloc>
 80171fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017200:	6030      	str	r0, [r6, #0]
 8017202:	f1b9 0f0e 	cmp.w	r9, #14
 8017206:	f8d3 b000 	ldr.w	fp, [r3]
 801720a:	f200 80e6 	bhi.w	80173da <_dtoa_r+0x43a>
 801720e:	2d00      	cmp	r5, #0
 8017210:	f000 80e3 	beq.w	80173da <_dtoa_r+0x43a>
 8017214:	ed9d 7b00 	vldr	d7, [sp]
 8017218:	f1ba 0f00 	cmp.w	sl, #0
 801721c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017220:	dd74      	ble.n	801730c <_dtoa_r+0x36c>
 8017222:	4a2a      	ldr	r2, [pc, #168]	; (80172cc <_dtoa_r+0x32c>)
 8017224:	f00a 030f 	and.w	r3, sl, #15
 8017228:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801722c:	ed93 7b00 	vldr	d7, [r3]
 8017230:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017234:	06f0      	lsls	r0, r6, #27
 8017236:	ed8d 7b08 	vstr	d7, [sp, #32]
 801723a:	d565      	bpl.n	8017308 <_dtoa_r+0x368>
 801723c:	4b24      	ldr	r3, [pc, #144]	; (80172d0 <_dtoa_r+0x330>)
 801723e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017242:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017246:	f7e9 fb19 	bl	800087c <__aeabi_ddiv>
 801724a:	e9cd 0100 	strd	r0, r1, [sp]
 801724e:	f006 060f 	and.w	r6, r6, #15
 8017252:	2503      	movs	r5, #3
 8017254:	4f1e      	ldr	r7, [pc, #120]	; (80172d0 <_dtoa_r+0x330>)
 8017256:	e04c      	b.n	80172f2 <_dtoa_r+0x352>
 8017258:	2301      	movs	r3, #1
 801725a:	930a      	str	r3, [sp, #40]	; 0x28
 801725c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801725e:	4453      	add	r3, sl
 8017260:	f103 0901 	add.w	r9, r3, #1
 8017264:	9302      	str	r3, [sp, #8]
 8017266:	464b      	mov	r3, r9
 8017268:	2b01      	cmp	r3, #1
 801726a:	bfb8      	it	lt
 801726c:	2301      	movlt	r3, #1
 801726e:	e7ba      	b.n	80171e6 <_dtoa_r+0x246>
 8017270:	2300      	movs	r3, #0
 8017272:	e7b2      	b.n	80171da <_dtoa_r+0x23a>
 8017274:	2300      	movs	r3, #0
 8017276:	e7f0      	b.n	801725a <_dtoa_r+0x2ba>
 8017278:	2501      	movs	r5, #1
 801727a:	2300      	movs	r3, #0
 801727c:	9306      	str	r3, [sp, #24]
 801727e:	950a      	str	r5, [sp, #40]	; 0x28
 8017280:	f04f 33ff 	mov.w	r3, #4294967295
 8017284:	9302      	str	r3, [sp, #8]
 8017286:	4699      	mov	r9, r3
 8017288:	2200      	movs	r2, #0
 801728a:	2312      	movs	r3, #18
 801728c:	920b      	str	r2, [sp, #44]	; 0x2c
 801728e:	e7aa      	b.n	80171e6 <_dtoa_r+0x246>
 8017290:	2301      	movs	r3, #1
 8017292:	930a      	str	r3, [sp, #40]	; 0x28
 8017294:	e7f4      	b.n	8017280 <_dtoa_r+0x2e0>
 8017296:	2301      	movs	r3, #1
 8017298:	9302      	str	r3, [sp, #8]
 801729a:	4699      	mov	r9, r3
 801729c:	461a      	mov	r2, r3
 801729e:	e7f5      	b.n	801728c <_dtoa_r+0x2ec>
 80172a0:	3101      	adds	r1, #1
 80172a2:	6071      	str	r1, [r6, #4]
 80172a4:	0052      	lsls	r2, r2, #1
 80172a6:	e7a2      	b.n	80171ee <_dtoa_r+0x24e>
 80172a8:	636f4361 	.word	0x636f4361
 80172ac:	3fd287a7 	.word	0x3fd287a7
 80172b0:	8b60c8b3 	.word	0x8b60c8b3
 80172b4:	3fc68a28 	.word	0x3fc68a28
 80172b8:	509f79fb 	.word	0x509f79fb
 80172bc:	3fd34413 	.word	0x3fd34413
 80172c0:	7ff00000 	.word	0x7ff00000
 80172c4:	0801a15c 	.word	0x0801a15c
 80172c8:	3ff80000 	.word	0x3ff80000
 80172cc:	0801a060 	.word	0x0801a060
 80172d0:	0801a038 	.word	0x0801a038
 80172d4:	0801a029 	.word	0x0801a029
 80172d8:	07f1      	lsls	r1, r6, #31
 80172da:	d508      	bpl.n	80172ee <_dtoa_r+0x34e>
 80172dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80172e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80172e4:	f7e9 f9a0 	bl	8000628 <__aeabi_dmul>
 80172e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80172ec:	3501      	adds	r5, #1
 80172ee:	1076      	asrs	r6, r6, #1
 80172f0:	3708      	adds	r7, #8
 80172f2:	2e00      	cmp	r6, #0
 80172f4:	d1f0      	bne.n	80172d8 <_dtoa_r+0x338>
 80172f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80172fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172fe:	f7e9 fabd 	bl	800087c <__aeabi_ddiv>
 8017302:	e9cd 0100 	strd	r0, r1, [sp]
 8017306:	e01a      	b.n	801733e <_dtoa_r+0x39e>
 8017308:	2502      	movs	r5, #2
 801730a:	e7a3      	b.n	8017254 <_dtoa_r+0x2b4>
 801730c:	f000 80a0 	beq.w	8017450 <_dtoa_r+0x4b0>
 8017310:	f1ca 0600 	rsb	r6, sl, #0
 8017314:	4b9f      	ldr	r3, [pc, #636]	; (8017594 <_dtoa_r+0x5f4>)
 8017316:	4fa0      	ldr	r7, [pc, #640]	; (8017598 <_dtoa_r+0x5f8>)
 8017318:	f006 020f 	and.w	r2, r6, #15
 801731c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017324:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017328:	f7e9 f97e 	bl	8000628 <__aeabi_dmul>
 801732c:	e9cd 0100 	strd	r0, r1, [sp]
 8017330:	1136      	asrs	r6, r6, #4
 8017332:	2300      	movs	r3, #0
 8017334:	2502      	movs	r5, #2
 8017336:	2e00      	cmp	r6, #0
 8017338:	d17f      	bne.n	801743a <_dtoa_r+0x49a>
 801733a:	2b00      	cmp	r3, #0
 801733c:	d1e1      	bne.n	8017302 <_dtoa_r+0x362>
 801733e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017340:	2b00      	cmp	r3, #0
 8017342:	f000 8087 	beq.w	8017454 <_dtoa_r+0x4b4>
 8017346:	e9dd 6700 	ldrd	r6, r7, [sp]
 801734a:	2200      	movs	r2, #0
 801734c:	4b93      	ldr	r3, [pc, #588]	; (801759c <_dtoa_r+0x5fc>)
 801734e:	4630      	mov	r0, r6
 8017350:	4639      	mov	r1, r7
 8017352:	f7e9 fbdb 	bl	8000b0c <__aeabi_dcmplt>
 8017356:	2800      	cmp	r0, #0
 8017358:	d07c      	beq.n	8017454 <_dtoa_r+0x4b4>
 801735a:	f1b9 0f00 	cmp.w	r9, #0
 801735e:	d079      	beq.n	8017454 <_dtoa_r+0x4b4>
 8017360:	9b02      	ldr	r3, [sp, #8]
 8017362:	2b00      	cmp	r3, #0
 8017364:	dd35      	ble.n	80173d2 <_dtoa_r+0x432>
 8017366:	f10a 33ff 	add.w	r3, sl, #4294967295
 801736a:	9308      	str	r3, [sp, #32]
 801736c:	4639      	mov	r1, r7
 801736e:	2200      	movs	r2, #0
 8017370:	4b8b      	ldr	r3, [pc, #556]	; (80175a0 <_dtoa_r+0x600>)
 8017372:	4630      	mov	r0, r6
 8017374:	f7e9 f958 	bl	8000628 <__aeabi_dmul>
 8017378:	e9cd 0100 	strd	r0, r1, [sp]
 801737c:	9f02      	ldr	r7, [sp, #8]
 801737e:	3501      	adds	r5, #1
 8017380:	4628      	mov	r0, r5
 8017382:	f7e9 f8e7 	bl	8000554 <__aeabi_i2d>
 8017386:	e9dd 2300 	ldrd	r2, r3, [sp]
 801738a:	f7e9 f94d 	bl	8000628 <__aeabi_dmul>
 801738e:	2200      	movs	r2, #0
 8017390:	4b84      	ldr	r3, [pc, #528]	; (80175a4 <_dtoa_r+0x604>)
 8017392:	f7e8 ff93 	bl	80002bc <__adddf3>
 8017396:	4605      	mov	r5, r0
 8017398:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801739c:	2f00      	cmp	r7, #0
 801739e:	d15d      	bne.n	801745c <_dtoa_r+0x4bc>
 80173a0:	2200      	movs	r2, #0
 80173a2:	4b81      	ldr	r3, [pc, #516]	; (80175a8 <_dtoa_r+0x608>)
 80173a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173a8:	f7e8 ff86 	bl	80002b8 <__aeabi_dsub>
 80173ac:	462a      	mov	r2, r5
 80173ae:	4633      	mov	r3, r6
 80173b0:	e9cd 0100 	strd	r0, r1, [sp]
 80173b4:	f7e9 fbc8 	bl	8000b48 <__aeabi_dcmpgt>
 80173b8:	2800      	cmp	r0, #0
 80173ba:	f040 8288 	bne.w	80178ce <_dtoa_r+0x92e>
 80173be:	462a      	mov	r2, r5
 80173c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80173c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173c8:	f7e9 fba0 	bl	8000b0c <__aeabi_dcmplt>
 80173cc:	2800      	cmp	r0, #0
 80173ce:	f040 827c 	bne.w	80178ca <_dtoa_r+0x92a>
 80173d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80173d6:	e9cd 2300 	strd	r2, r3, [sp]
 80173da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80173dc:	2b00      	cmp	r3, #0
 80173de:	f2c0 8150 	blt.w	8017682 <_dtoa_r+0x6e2>
 80173e2:	f1ba 0f0e 	cmp.w	sl, #14
 80173e6:	f300 814c 	bgt.w	8017682 <_dtoa_r+0x6e2>
 80173ea:	4b6a      	ldr	r3, [pc, #424]	; (8017594 <_dtoa_r+0x5f4>)
 80173ec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80173f0:	ed93 7b00 	vldr	d7, [r3]
 80173f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80173fc:	f280 80d8 	bge.w	80175b0 <_dtoa_r+0x610>
 8017400:	f1b9 0f00 	cmp.w	r9, #0
 8017404:	f300 80d4 	bgt.w	80175b0 <_dtoa_r+0x610>
 8017408:	f040 825e 	bne.w	80178c8 <_dtoa_r+0x928>
 801740c:	2200      	movs	r2, #0
 801740e:	4b66      	ldr	r3, [pc, #408]	; (80175a8 <_dtoa_r+0x608>)
 8017410:	ec51 0b17 	vmov	r0, r1, d7
 8017414:	f7e9 f908 	bl	8000628 <__aeabi_dmul>
 8017418:	e9dd 2300 	ldrd	r2, r3, [sp]
 801741c:	f7e9 fb8a 	bl	8000b34 <__aeabi_dcmpge>
 8017420:	464f      	mov	r7, r9
 8017422:	464e      	mov	r6, r9
 8017424:	2800      	cmp	r0, #0
 8017426:	f040 8234 	bne.w	8017892 <_dtoa_r+0x8f2>
 801742a:	2331      	movs	r3, #49	; 0x31
 801742c:	f10b 0501 	add.w	r5, fp, #1
 8017430:	f88b 3000 	strb.w	r3, [fp]
 8017434:	f10a 0a01 	add.w	sl, sl, #1
 8017438:	e22f      	b.n	801789a <_dtoa_r+0x8fa>
 801743a:	07f2      	lsls	r2, r6, #31
 801743c:	d505      	bpl.n	801744a <_dtoa_r+0x4aa>
 801743e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017442:	f7e9 f8f1 	bl	8000628 <__aeabi_dmul>
 8017446:	3501      	adds	r5, #1
 8017448:	2301      	movs	r3, #1
 801744a:	1076      	asrs	r6, r6, #1
 801744c:	3708      	adds	r7, #8
 801744e:	e772      	b.n	8017336 <_dtoa_r+0x396>
 8017450:	2502      	movs	r5, #2
 8017452:	e774      	b.n	801733e <_dtoa_r+0x39e>
 8017454:	f8cd a020 	str.w	sl, [sp, #32]
 8017458:	464f      	mov	r7, r9
 801745a:	e791      	b.n	8017380 <_dtoa_r+0x3e0>
 801745c:	4b4d      	ldr	r3, [pc, #308]	; (8017594 <_dtoa_r+0x5f4>)
 801745e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017462:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017468:	2b00      	cmp	r3, #0
 801746a:	d047      	beq.n	80174fc <_dtoa_r+0x55c>
 801746c:	4602      	mov	r2, r0
 801746e:	460b      	mov	r3, r1
 8017470:	2000      	movs	r0, #0
 8017472:	494e      	ldr	r1, [pc, #312]	; (80175ac <_dtoa_r+0x60c>)
 8017474:	f7e9 fa02 	bl	800087c <__aeabi_ddiv>
 8017478:	462a      	mov	r2, r5
 801747a:	4633      	mov	r3, r6
 801747c:	f7e8 ff1c 	bl	80002b8 <__aeabi_dsub>
 8017480:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017484:	465d      	mov	r5, fp
 8017486:	e9dd 0100 	ldrd	r0, r1, [sp]
 801748a:	f7e9 fb7d 	bl	8000b88 <__aeabi_d2iz>
 801748e:	4606      	mov	r6, r0
 8017490:	f7e9 f860 	bl	8000554 <__aeabi_i2d>
 8017494:	4602      	mov	r2, r0
 8017496:	460b      	mov	r3, r1
 8017498:	e9dd 0100 	ldrd	r0, r1, [sp]
 801749c:	f7e8 ff0c 	bl	80002b8 <__aeabi_dsub>
 80174a0:	3630      	adds	r6, #48	; 0x30
 80174a2:	f805 6b01 	strb.w	r6, [r5], #1
 80174a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80174aa:	e9cd 0100 	strd	r0, r1, [sp]
 80174ae:	f7e9 fb2d 	bl	8000b0c <__aeabi_dcmplt>
 80174b2:	2800      	cmp	r0, #0
 80174b4:	d163      	bne.n	801757e <_dtoa_r+0x5de>
 80174b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80174ba:	2000      	movs	r0, #0
 80174bc:	4937      	ldr	r1, [pc, #220]	; (801759c <_dtoa_r+0x5fc>)
 80174be:	f7e8 fefb 	bl	80002b8 <__aeabi_dsub>
 80174c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80174c6:	f7e9 fb21 	bl	8000b0c <__aeabi_dcmplt>
 80174ca:	2800      	cmp	r0, #0
 80174cc:	f040 80b7 	bne.w	801763e <_dtoa_r+0x69e>
 80174d0:	eba5 030b 	sub.w	r3, r5, fp
 80174d4:	429f      	cmp	r7, r3
 80174d6:	f77f af7c 	ble.w	80173d2 <_dtoa_r+0x432>
 80174da:	2200      	movs	r2, #0
 80174dc:	4b30      	ldr	r3, [pc, #192]	; (80175a0 <_dtoa_r+0x600>)
 80174de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80174e2:	f7e9 f8a1 	bl	8000628 <__aeabi_dmul>
 80174e6:	2200      	movs	r2, #0
 80174e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80174ec:	4b2c      	ldr	r3, [pc, #176]	; (80175a0 <_dtoa_r+0x600>)
 80174ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80174f2:	f7e9 f899 	bl	8000628 <__aeabi_dmul>
 80174f6:	e9cd 0100 	strd	r0, r1, [sp]
 80174fa:	e7c4      	b.n	8017486 <_dtoa_r+0x4e6>
 80174fc:	462a      	mov	r2, r5
 80174fe:	4633      	mov	r3, r6
 8017500:	f7e9 f892 	bl	8000628 <__aeabi_dmul>
 8017504:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017508:	eb0b 0507 	add.w	r5, fp, r7
 801750c:	465e      	mov	r6, fp
 801750e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017512:	f7e9 fb39 	bl	8000b88 <__aeabi_d2iz>
 8017516:	4607      	mov	r7, r0
 8017518:	f7e9 f81c 	bl	8000554 <__aeabi_i2d>
 801751c:	3730      	adds	r7, #48	; 0x30
 801751e:	4602      	mov	r2, r0
 8017520:	460b      	mov	r3, r1
 8017522:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017526:	f7e8 fec7 	bl	80002b8 <__aeabi_dsub>
 801752a:	f806 7b01 	strb.w	r7, [r6], #1
 801752e:	42ae      	cmp	r6, r5
 8017530:	e9cd 0100 	strd	r0, r1, [sp]
 8017534:	f04f 0200 	mov.w	r2, #0
 8017538:	d126      	bne.n	8017588 <_dtoa_r+0x5e8>
 801753a:	4b1c      	ldr	r3, [pc, #112]	; (80175ac <_dtoa_r+0x60c>)
 801753c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017540:	f7e8 febc 	bl	80002bc <__adddf3>
 8017544:	4602      	mov	r2, r0
 8017546:	460b      	mov	r3, r1
 8017548:	e9dd 0100 	ldrd	r0, r1, [sp]
 801754c:	f7e9 fafc 	bl	8000b48 <__aeabi_dcmpgt>
 8017550:	2800      	cmp	r0, #0
 8017552:	d174      	bne.n	801763e <_dtoa_r+0x69e>
 8017554:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017558:	2000      	movs	r0, #0
 801755a:	4914      	ldr	r1, [pc, #80]	; (80175ac <_dtoa_r+0x60c>)
 801755c:	f7e8 feac 	bl	80002b8 <__aeabi_dsub>
 8017560:	4602      	mov	r2, r0
 8017562:	460b      	mov	r3, r1
 8017564:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017568:	f7e9 fad0 	bl	8000b0c <__aeabi_dcmplt>
 801756c:	2800      	cmp	r0, #0
 801756e:	f43f af30 	beq.w	80173d2 <_dtoa_r+0x432>
 8017572:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017576:	2b30      	cmp	r3, #48	; 0x30
 8017578:	f105 32ff 	add.w	r2, r5, #4294967295
 801757c:	d002      	beq.n	8017584 <_dtoa_r+0x5e4>
 801757e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017582:	e04a      	b.n	801761a <_dtoa_r+0x67a>
 8017584:	4615      	mov	r5, r2
 8017586:	e7f4      	b.n	8017572 <_dtoa_r+0x5d2>
 8017588:	4b05      	ldr	r3, [pc, #20]	; (80175a0 <_dtoa_r+0x600>)
 801758a:	f7e9 f84d 	bl	8000628 <__aeabi_dmul>
 801758e:	e9cd 0100 	strd	r0, r1, [sp]
 8017592:	e7bc      	b.n	801750e <_dtoa_r+0x56e>
 8017594:	0801a060 	.word	0x0801a060
 8017598:	0801a038 	.word	0x0801a038
 801759c:	3ff00000 	.word	0x3ff00000
 80175a0:	40240000 	.word	0x40240000
 80175a4:	401c0000 	.word	0x401c0000
 80175a8:	40140000 	.word	0x40140000
 80175ac:	3fe00000 	.word	0x3fe00000
 80175b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80175b4:	465d      	mov	r5, fp
 80175b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80175ba:	4630      	mov	r0, r6
 80175bc:	4639      	mov	r1, r7
 80175be:	f7e9 f95d 	bl	800087c <__aeabi_ddiv>
 80175c2:	f7e9 fae1 	bl	8000b88 <__aeabi_d2iz>
 80175c6:	4680      	mov	r8, r0
 80175c8:	f7e8 ffc4 	bl	8000554 <__aeabi_i2d>
 80175cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80175d0:	f7e9 f82a 	bl	8000628 <__aeabi_dmul>
 80175d4:	4602      	mov	r2, r0
 80175d6:	460b      	mov	r3, r1
 80175d8:	4630      	mov	r0, r6
 80175da:	4639      	mov	r1, r7
 80175dc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80175e0:	f7e8 fe6a 	bl	80002b8 <__aeabi_dsub>
 80175e4:	f805 6b01 	strb.w	r6, [r5], #1
 80175e8:	eba5 060b 	sub.w	r6, r5, fp
 80175ec:	45b1      	cmp	r9, r6
 80175ee:	4602      	mov	r2, r0
 80175f0:	460b      	mov	r3, r1
 80175f2:	d139      	bne.n	8017668 <_dtoa_r+0x6c8>
 80175f4:	f7e8 fe62 	bl	80002bc <__adddf3>
 80175f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80175fc:	4606      	mov	r6, r0
 80175fe:	460f      	mov	r7, r1
 8017600:	f7e9 faa2 	bl	8000b48 <__aeabi_dcmpgt>
 8017604:	b9c8      	cbnz	r0, 801763a <_dtoa_r+0x69a>
 8017606:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801760a:	4630      	mov	r0, r6
 801760c:	4639      	mov	r1, r7
 801760e:	f7e9 fa73 	bl	8000af8 <__aeabi_dcmpeq>
 8017612:	b110      	cbz	r0, 801761a <_dtoa_r+0x67a>
 8017614:	f018 0f01 	tst.w	r8, #1
 8017618:	d10f      	bne.n	801763a <_dtoa_r+0x69a>
 801761a:	9904      	ldr	r1, [sp, #16]
 801761c:	4620      	mov	r0, r4
 801761e:	f000 fe0d 	bl	801823c <_Bfree>
 8017622:	2300      	movs	r3, #0
 8017624:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017626:	702b      	strb	r3, [r5, #0]
 8017628:	f10a 0301 	add.w	r3, sl, #1
 801762c:	6013      	str	r3, [r2, #0]
 801762e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017630:	2b00      	cmp	r3, #0
 8017632:	f000 8241 	beq.w	8017ab8 <_dtoa_r+0xb18>
 8017636:	601d      	str	r5, [r3, #0]
 8017638:	e23e      	b.n	8017ab8 <_dtoa_r+0xb18>
 801763a:	f8cd a020 	str.w	sl, [sp, #32]
 801763e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017642:	2a39      	cmp	r2, #57	; 0x39
 8017644:	f105 33ff 	add.w	r3, r5, #4294967295
 8017648:	d108      	bne.n	801765c <_dtoa_r+0x6bc>
 801764a:	459b      	cmp	fp, r3
 801764c:	d10a      	bne.n	8017664 <_dtoa_r+0x6c4>
 801764e:	9b08      	ldr	r3, [sp, #32]
 8017650:	3301      	adds	r3, #1
 8017652:	9308      	str	r3, [sp, #32]
 8017654:	2330      	movs	r3, #48	; 0x30
 8017656:	f88b 3000 	strb.w	r3, [fp]
 801765a:	465b      	mov	r3, fp
 801765c:	781a      	ldrb	r2, [r3, #0]
 801765e:	3201      	adds	r2, #1
 8017660:	701a      	strb	r2, [r3, #0]
 8017662:	e78c      	b.n	801757e <_dtoa_r+0x5de>
 8017664:	461d      	mov	r5, r3
 8017666:	e7ea      	b.n	801763e <_dtoa_r+0x69e>
 8017668:	2200      	movs	r2, #0
 801766a:	4b9b      	ldr	r3, [pc, #620]	; (80178d8 <_dtoa_r+0x938>)
 801766c:	f7e8 ffdc 	bl	8000628 <__aeabi_dmul>
 8017670:	2200      	movs	r2, #0
 8017672:	2300      	movs	r3, #0
 8017674:	4606      	mov	r6, r0
 8017676:	460f      	mov	r7, r1
 8017678:	f7e9 fa3e 	bl	8000af8 <__aeabi_dcmpeq>
 801767c:	2800      	cmp	r0, #0
 801767e:	d09a      	beq.n	80175b6 <_dtoa_r+0x616>
 8017680:	e7cb      	b.n	801761a <_dtoa_r+0x67a>
 8017682:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017684:	2a00      	cmp	r2, #0
 8017686:	f000 808b 	beq.w	80177a0 <_dtoa_r+0x800>
 801768a:	9a06      	ldr	r2, [sp, #24]
 801768c:	2a01      	cmp	r2, #1
 801768e:	dc6e      	bgt.n	801776e <_dtoa_r+0x7ce>
 8017690:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017692:	2a00      	cmp	r2, #0
 8017694:	d067      	beq.n	8017766 <_dtoa_r+0x7c6>
 8017696:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801769a:	9f07      	ldr	r7, [sp, #28]
 801769c:	9d05      	ldr	r5, [sp, #20]
 801769e:	9a05      	ldr	r2, [sp, #20]
 80176a0:	2101      	movs	r1, #1
 80176a2:	441a      	add	r2, r3
 80176a4:	4620      	mov	r0, r4
 80176a6:	9205      	str	r2, [sp, #20]
 80176a8:	4498      	add	r8, r3
 80176aa:	f000 fea5 	bl	80183f8 <__i2b>
 80176ae:	4606      	mov	r6, r0
 80176b0:	2d00      	cmp	r5, #0
 80176b2:	dd0c      	ble.n	80176ce <_dtoa_r+0x72e>
 80176b4:	f1b8 0f00 	cmp.w	r8, #0
 80176b8:	dd09      	ble.n	80176ce <_dtoa_r+0x72e>
 80176ba:	4545      	cmp	r5, r8
 80176bc:	9a05      	ldr	r2, [sp, #20]
 80176be:	462b      	mov	r3, r5
 80176c0:	bfa8      	it	ge
 80176c2:	4643      	movge	r3, r8
 80176c4:	1ad2      	subs	r2, r2, r3
 80176c6:	9205      	str	r2, [sp, #20]
 80176c8:	1aed      	subs	r5, r5, r3
 80176ca:	eba8 0803 	sub.w	r8, r8, r3
 80176ce:	9b07      	ldr	r3, [sp, #28]
 80176d0:	b1eb      	cbz	r3, 801770e <_dtoa_r+0x76e>
 80176d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d067      	beq.n	80177a8 <_dtoa_r+0x808>
 80176d8:	b18f      	cbz	r7, 80176fe <_dtoa_r+0x75e>
 80176da:	4631      	mov	r1, r6
 80176dc:	463a      	mov	r2, r7
 80176de:	4620      	mov	r0, r4
 80176e0:	f000 ff2a 	bl	8018538 <__pow5mult>
 80176e4:	9a04      	ldr	r2, [sp, #16]
 80176e6:	4601      	mov	r1, r0
 80176e8:	4606      	mov	r6, r0
 80176ea:	4620      	mov	r0, r4
 80176ec:	f000 fe8d 	bl	801840a <__multiply>
 80176f0:	9904      	ldr	r1, [sp, #16]
 80176f2:	9008      	str	r0, [sp, #32]
 80176f4:	4620      	mov	r0, r4
 80176f6:	f000 fda1 	bl	801823c <_Bfree>
 80176fa:	9b08      	ldr	r3, [sp, #32]
 80176fc:	9304      	str	r3, [sp, #16]
 80176fe:	9b07      	ldr	r3, [sp, #28]
 8017700:	1bda      	subs	r2, r3, r7
 8017702:	d004      	beq.n	801770e <_dtoa_r+0x76e>
 8017704:	9904      	ldr	r1, [sp, #16]
 8017706:	4620      	mov	r0, r4
 8017708:	f000 ff16 	bl	8018538 <__pow5mult>
 801770c:	9004      	str	r0, [sp, #16]
 801770e:	2101      	movs	r1, #1
 8017710:	4620      	mov	r0, r4
 8017712:	f000 fe71 	bl	80183f8 <__i2b>
 8017716:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017718:	4607      	mov	r7, r0
 801771a:	2b00      	cmp	r3, #0
 801771c:	f000 81d0 	beq.w	8017ac0 <_dtoa_r+0xb20>
 8017720:	461a      	mov	r2, r3
 8017722:	4601      	mov	r1, r0
 8017724:	4620      	mov	r0, r4
 8017726:	f000 ff07 	bl	8018538 <__pow5mult>
 801772a:	9b06      	ldr	r3, [sp, #24]
 801772c:	2b01      	cmp	r3, #1
 801772e:	4607      	mov	r7, r0
 8017730:	dc40      	bgt.n	80177b4 <_dtoa_r+0x814>
 8017732:	9b00      	ldr	r3, [sp, #0]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d139      	bne.n	80177ac <_dtoa_r+0x80c>
 8017738:	9b01      	ldr	r3, [sp, #4]
 801773a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801773e:	2b00      	cmp	r3, #0
 8017740:	d136      	bne.n	80177b0 <_dtoa_r+0x810>
 8017742:	9b01      	ldr	r3, [sp, #4]
 8017744:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017748:	0d1b      	lsrs	r3, r3, #20
 801774a:	051b      	lsls	r3, r3, #20
 801774c:	b12b      	cbz	r3, 801775a <_dtoa_r+0x7ba>
 801774e:	9b05      	ldr	r3, [sp, #20]
 8017750:	3301      	adds	r3, #1
 8017752:	9305      	str	r3, [sp, #20]
 8017754:	f108 0801 	add.w	r8, r8, #1
 8017758:	2301      	movs	r3, #1
 801775a:	9307      	str	r3, [sp, #28]
 801775c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801775e:	2b00      	cmp	r3, #0
 8017760:	d12a      	bne.n	80177b8 <_dtoa_r+0x818>
 8017762:	2001      	movs	r0, #1
 8017764:	e030      	b.n	80177c8 <_dtoa_r+0x828>
 8017766:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017768:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801776c:	e795      	b.n	801769a <_dtoa_r+0x6fa>
 801776e:	9b07      	ldr	r3, [sp, #28]
 8017770:	f109 37ff 	add.w	r7, r9, #4294967295
 8017774:	42bb      	cmp	r3, r7
 8017776:	bfbf      	itttt	lt
 8017778:	9b07      	ldrlt	r3, [sp, #28]
 801777a:	9707      	strlt	r7, [sp, #28]
 801777c:	1afa      	sublt	r2, r7, r3
 801777e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017780:	bfbb      	ittet	lt
 8017782:	189b      	addlt	r3, r3, r2
 8017784:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017786:	1bdf      	subge	r7, r3, r7
 8017788:	2700      	movlt	r7, #0
 801778a:	f1b9 0f00 	cmp.w	r9, #0
 801778e:	bfb5      	itete	lt
 8017790:	9b05      	ldrlt	r3, [sp, #20]
 8017792:	9d05      	ldrge	r5, [sp, #20]
 8017794:	eba3 0509 	sublt.w	r5, r3, r9
 8017798:	464b      	movge	r3, r9
 801779a:	bfb8      	it	lt
 801779c:	2300      	movlt	r3, #0
 801779e:	e77e      	b.n	801769e <_dtoa_r+0x6fe>
 80177a0:	9f07      	ldr	r7, [sp, #28]
 80177a2:	9d05      	ldr	r5, [sp, #20]
 80177a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80177a6:	e783      	b.n	80176b0 <_dtoa_r+0x710>
 80177a8:	9a07      	ldr	r2, [sp, #28]
 80177aa:	e7ab      	b.n	8017704 <_dtoa_r+0x764>
 80177ac:	2300      	movs	r3, #0
 80177ae:	e7d4      	b.n	801775a <_dtoa_r+0x7ba>
 80177b0:	9b00      	ldr	r3, [sp, #0]
 80177b2:	e7d2      	b.n	801775a <_dtoa_r+0x7ba>
 80177b4:	2300      	movs	r3, #0
 80177b6:	9307      	str	r3, [sp, #28]
 80177b8:	693b      	ldr	r3, [r7, #16]
 80177ba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80177be:	6918      	ldr	r0, [r3, #16]
 80177c0:	f000 fdcc 	bl	801835c <__hi0bits>
 80177c4:	f1c0 0020 	rsb	r0, r0, #32
 80177c8:	4440      	add	r0, r8
 80177ca:	f010 001f 	ands.w	r0, r0, #31
 80177ce:	d047      	beq.n	8017860 <_dtoa_r+0x8c0>
 80177d0:	f1c0 0320 	rsb	r3, r0, #32
 80177d4:	2b04      	cmp	r3, #4
 80177d6:	dd3b      	ble.n	8017850 <_dtoa_r+0x8b0>
 80177d8:	9b05      	ldr	r3, [sp, #20]
 80177da:	f1c0 001c 	rsb	r0, r0, #28
 80177de:	4403      	add	r3, r0
 80177e0:	9305      	str	r3, [sp, #20]
 80177e2:	4405      	add	r5, r0
 80177e4:	4480      	add	r8, r0
 80177e6:	9b05      	ldr	r3, [sp, #20]
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	dd05      	ble.n	80177f8 <_dtoa_r+0x858>
 80177ec:	461a      	mov	r2, r3
 80177ee:	9904      	ldr	r1, [sp, #16]
 80177f0:	4620      	mov	r0, r4
 80177f2:	f000 feef 	bl	80185d4 <__lshift>
 80177f6:	9004      	str	r0, [sp, #16]
 80177f8:	f1b8 0f00 	cmp.w	r8, #0
 80177fc:	dd05      	ble.n	801780a <_dtoa_r+0x86a>
 80177fe:	4639      	mov	r1, r7
 8017800:	4642      	mov	r2, r8
 8017802:	4620      	mov	r0, r4
 8017804:	f000 fee6 	bl	80185d4 <__lshift>
 8017808:	4607      	mov	r7, r0
 801780a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801780c:	b353      	cbz	r3, 8017864 <_dtoa_r+0x8c4>
 801780e:	4639      	mov	r1, r7
 8017810:	9804      	ldr	r0, [sp, #16]
 8017812:	f000 ff33 	bl	801867c <__mcmp>
 8017816:	2800      	cmp	r0, #0
 8017818:	da24      	bge.n	8017864 <_dtoa_r+0x8c4>
 801781a:	2300      	movs	r3, #0
 801781c:	220a      	movs	r2, #10
 801781e:	9904      	ldr	r1, [sp, #16]
 8017820:	4620      	mov	r0, r4
 8017822:	f000 fd22 	bl	801826a <__multadd>
 8017826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017828:	9004      	str	r0, [sp, #16]
 801782a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801782e:	2b00      	cmp	r3, #0
 8017830:	f000 814d 	beq.w	8017ace <_dtoa_r+0xb2e>
 8017834:	2300      	movs	r3, #0
 8017836:	4631      	mov	r1, r6
 8017838:	220a      	movs	r2, #10
 801783a:	4620      	mov	r0, r4
 801783c:	f000 fd15 	bl	801826a <__multadd>
 8017840:	9b02      	ldr	r3, [sp, #8]
 8017842:	2b00      	cmp	r3, #0
 8017844:	4606      	mov	r6, r0
 8017846:	dc4f      	bgt.n	80178e8 <_dtoa_r+0x948>
 8017848:	9b06      	ldr	r3, [sp, #24]
 801784a:	2b02      	cmp	r3, #2
 801784c:	dd4c      	ble.n	80178e8 <_dtoa_r+0x948>
 801784e:	e011      	b.n	8017874 <_dtoa_r+0x8d4>
 8017850:	d0c9      	beq.n	80177e6 <_dtoa_r+0x846>
 8017852:	9a05      	ldr	r2, [sp, #20]
 8017854:	331c      	adds	r3, #28
 8017856:	441a      	add	r2, r3
 8017858:	9205      	str	r2, [sp, #20]
 801785a:	441d      	add	r5, r3
 801785c:	4498      	add	r8, r3
 801785e:	e7c2      	b.n	80177e6 <_dtoa_r+0x846>
 8017860:	4603      	mov	r3, r0
 8017862:	e7f6      	b.n	8017852 <_dtoa_r+0x8b2>
 8017864:	f1b9 0f00 	cmp.w	r9, #0
 8017868:	dc38      	bgt.n	80178dc <_dtoa_r+0x93c>
 801786a:	9b06      	ldr	r3, [sp, #24]
 801786c:	2b02      	cmp	r3, #2
 801786e:	dd35      	ble.n	80178dc <_dtoa_r+0x93c>
 8017870:	f8cd 9008 	str.w	r9, [sp, #8]
 8017874:	9b02      	ldr	r3, [sp, #8]
 8017876:	b963      	cbnz	r3, 8017892 <_dtoa_r+0x8f2>
 8017878:	4639      	mov	r1, r7
 801787a:	2205      	movs	r2, #5
 801787c:	4620      	mov	r0, r4
 801787e:	f000 fcf4 	bl	801826a <__multadd>
 8017882:	4601      	mov	r1, r0
 8017884:	4607      	mov	r7, r0
 8017886:	9804      	ldr	r0, [sp, #16]
 8017888:	f000 fef8 	bl	801867c <__mcmp>
 801788c:	2800      	cmp	r0, #0
 801788e:	f73f adcc 	bgt.w	801742a <_dtoa_r+0x48a>
 8017892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017894:	465d      	mov	r5, fp
 8017896:	ea6f 0a03 	mvn.w	sl, r3
 801789a:	f04f 0900 	mov.w	r9, #0
 801789e:	4639      	mov	r1, r7
 80178a0:	4620      	mov	r0, r4
 80178a2:	f000 fccb 	bl	801823c <_Bfree>
 80178a6:	2e00      	cmp	r6, #0
 80178a8:	f43f aeb7 	beq.w	801761a <_dtoa_r+0x67a>
 80178ac:	f1b9 0f00 	cmp.w	r9, #0
 80178b0:	d005      	beq.n	80178be <_dtoa_r+0x91e>
 80178b2:	45b1      	cmp	r9, r6
 80178b4:	d003      	beq.n	80178be <_dtoa_r+0x91e>
 80178b6:	4649      	mov	r1, r9
 80178b8:	4620      	mov	r0, r4
 80178ba:	f000 fcbf 	bl	801823c <_Bfree>
 80178be:	4631      	mov	r1, r6
 80178c0:	4620      	mov	r0, r4
 80178c2:	f000 fcbb 	bl	801823c <_Bfree>
 80178c6:	e6a8      	b.n	801761a <_dtoa_r+0x67a>
 80178c8:	2700      	movs	r7, #0
 80178ca:	463e      	mov	r6, r7
 80178cc:	e7e1      	b.n	8017892 <_dtoa_r+0x8f2>
 80178ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80178d2:	463e      	mov	r6, r7
 80178d4:	e5a9      	b.n	801742a <_dtoa_r+0x48a>
 80178d6:	bf00      	nop
 80178d8:	40240000 	.word	0x40240000
 80178dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178de:	f8cd 9008 	str.w	r9, [sp, #8]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	f000 80fa 	beq.w	8017adc <_dtoa_r+0xb3c>
 80178e8:	2d00      	cmp	r5, #0
 80178ea:	dd05      	ble.n	80178f8 <_dtoa_r+0x958>
 80178ec:	4631      	mov	r1, r6
 80178ee:	462a      	mov	r2, r5
 80178f0:	4620      	mov	r0, r4
 80178f2:	f000 fe6f 	bl	80185d4 <__lshift>
 80178f6:	4606      	mov	r6, r0
 80178f8:	9b07      	ldr	r3, [sp, #28]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d04c      	beq.n	8017998 <_dtoa_r+0x9f8>
 80178fe:	6871      	ldr	r1, [r6, #4]
 8017900:	4620      	mov	r0, r4
 8017902:	f000 fc67 	bl	80181d4 <_Balloc>
 8017906:	6932      	ldr	r2, [r6, #16]
 8017908:	3202      	adds	r2, #2
 801790a:	4605      	mov	r5, r0
 801790c:	0092      	lsls	r2, r2, #2
 801790e:	f106 010c 	add.w	r1, r6, #12
 8017912:	300c      	adds	r0, #12
 8017914:	f7fd fd08 	bl	8015328 <memcpy>
 8017918:	2201      	movs	r2, #1
 801791a:	4629      	mov	r1, r5
 801791c:	4620      	mov	r0, r4
 801791e:	f000 fe59 	bl	80185d4 <__lshift>
 8017922:	9b00      	ldr	r3, [sp, #0]
 8017924:	f8cd b014 	str.w	fp, [sp, #20]
 8017928:	f003 0301 	and.w	r3, r3, #1
 801792c:	46b1      	mov	r9, r6
 801792e:	9307      	str	r3, [sp, #28]
 8017930:	4606      	mov	r6, r0
 8017932:	4639      	mov	r1, r7
 8017934:	9804      	ldr	r0, [sp, #16]
 8017936:	f7ff faa5 	bl	8016e84 <quorem>
 801793a:	4649      	mov	r1, r9
 801793c:	4605      	mov	r5, r0
 801793e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017942:	9804      	ldr	r0, [sp, #16]
 8017944:	f000 fe9a 	bl	801867c <__mcmp>
 8017948:	4632      	mov	r2, r6
 801794a:	9000      	str	r0, [sp, #0]
 801794c:	4639      	mov	r1, r7
 801794e:	4620      	mov	r0, r4
 8017950:	f000 feae 	bl	80186b0 <__mdiff>
 8017954:	68c3      	ldr	r3, [r0, #12]
 8017956:	4602      	mov	r2, r0
 8017958:	bb03      	cbnz	r3, 801799c <_dtoa_r+0x9fc>
 801795a:	4601      	mov	r1, r0
 801795c:	9008      	str	r0, [sp, #32]
 801795e:	9804      	ldr	r0, [sp, #16]
 8017960:	f000 fe8c 	bl	801867c <__mcmp>
 8017964:	9a08      	ldr	r2, [sp, #32]
 8017966:	4603      	mov	r3, r0
 8017968:	4611      	mov	r1, r2
 801796a:	4620      	mov	r0, r4
 801796c:	9308      	str	r3, [sp, #32]
 801796e:	f000 fc65 	bl	801823c <_Bfree>
 8017972:	9b08      	ldr	r3, [sp, #32]
 8017974:	b9a3      	cbnz	r3, 80179a0 <_dtoa_r+0xa00>
 8017976:	9a06      	ldr	r2, [sp, #24]
 8017978:	b992      	cbnz	r2, 80179a0 <_dtoa_r+0xa00>
 801797a:	9a07      	ldr	r2, [sp, #28]
 801797c:	b982      	cbnz	r2, 80179a0 <_dtoa_r+0xa00>
 801797e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017982:	d029      	beq.n	80179d8 <_dtoa_r+0xa38>
 8017984:	9b00      	ldr	r3, [sp, #0]
 8017986:	2b00      	cmp	r3, #0
 8017988:	dd01      	ble.n	801798e <_dtoa_r+0x9ee>
 801798a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801798e:	9b05      	ldr	r3, [sp, #20]
 8017990:	1c5d      	adds	r5, r3, #1
 8017992:	f883 8000 	strb.w	r8, [r3]
 8017996:	e782      	b.n	801789e <_dtoa_r+0x8fe>
 8017998:	4630      	mov	r0, r6
 801799a:	e7c2      	b.n	8017922 <_dtoa_r+0x982>
 801799c:	2301      	movs	r3, #1
 801799e:	e7e3      	b.n	8017968 <_dtoa_r+0x9c8>
 80179a0:	9a00      	ldr	r2, [sp, #0]
 80179a2:	2a00      	cmp	r2, #0
 80179a4:	db04      	blt.n	80179b0 <_dtoa_r+0xa10>
 80179a6:	d125      	bne.n	80179f4 <_dtoa_r+0xa54>
 80179a8:	9a06      	ldr	r2, [sp, #24]
 80179aa:	bb1a      	cbnz	r2, 80179f4 <_dtoa_r+0xa54>
 80179ac:	9a07      	ldr	r2, [sp, #28]
 80179ae:	bb0a      	cbnz	r2, 80179f4 <_dtoa_r+0xa54>
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	ddec      	ble.n	801798e <_dtoa_r+0x9ee>
 80179b4:	2201      	movs	r2, #1
 80179b6:	9904      	ldr	r1, [sp, #16]
 80179b8:	4620      	mov	r0, r4
 80179ba:	f000 fe0b 	bl	80185d4 <__lshift>
 80179be:	4639      	mov	r1, r7
 80179c0:	9004      	str	r0, [sp, #16]
 80179c2:	f000 fe5b 	bl	801867c <__mcmp>
 80179c6:	2800      	cmp	r0, #0
 80179c8:	dc03      	bgt.n	80179d2 <_dtoa_r+0xa32>
 80179ca:	d1e0      	bne.n	801798e <_dtoa_r+0x9ee>
 80179cc:	f018 0f01 	tst.w	r8, #1
 80179d0:	d0dd      	beq.n	801798e <_dtoa_r+0x9ee>
 80179d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80179d6:	d1d8      	bne.n	801798a <_dtoa_r+0x9ea>
 80179d8:	9b05      	ldr	r3, [sp, #20]
 80179da:	9a05      	ldr	r2, [sp, #20]
 80179dc:	1c5d      	adds	r5, r3, #1
 80179de:	2339      	movs	r3, #57	; 0x39
 80179e0:	7013      	strb	r3, [r2, #0]
 80179e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80179e6:	2b39      	cmp	r3, #57	; 0x39
 80179e8:	f105 32ff 	add.w	r2, r5, #4294967295
 80179ec:	d04f      	beq.n	8017a8e <_dtoa_r+0xaee>
 80179ee:	3301      	adds	r3, #1
 80179f0:	7013      	strb	r3, [r2, #0]
 80179f2:	e754      	b.n	801789e <_dtoa_r+0x8fe>
 80179f4:	9a05      	ldr	r2, [sp, #20]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	f102 0501 	add.w	r5, r2, #1
 80179fc:	dd06      	ble.n	8017a0c <_dtoa_r+0xa6c>
 80179fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017a02:	d0e9      	beq.n	80179d8 <_dtoa_r+0xa38>
 8017a04:	f108 0801 	add.w	r8, r8, #1
 8017a08:	9b05      	ldr	r3, [sp, #20]
 8017a0a:	e7c2      	b.n	8017992 <_dtoa_r+0x9f2>
 8017a0c:	9a02      	ldr	r2, [sp, #8]
 8017a0e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017a12:	eba5 030b 	sub.w	r3, r5, fp
 8017a16:	4293      	cmp	r3, r2
 8017a18:	d021      	beq.n	8017a5e <_dtoa_r+0xabe>
 8017a1a:	2300      	movs	r3, #0
 8017a1c:	220a      	movs	r2, #10
 8017a1e:	9904      	ldr	r1, [sp, #16]
 8017a20:	4620      	mov	r0, r4
 8017a22:	f000 fc22 	bl	801826a <__multadd>
 8017a26:	45b1      	cmp	r9, r6
 8017a28:	9004      	str	r0, [sp, #16]
 8017a2a:	f04f 0300 	mov.w	r3, #0
 8017a2e:	f04f 020a 	mov.w	r2, #10
 8017a32:	4649      	mov	r1, r9
 8017a34:	4620      	mov	r0, r4
 8017a36:	d105      	bne.n	8017a44 <_dtoa_r+0xaa4>
 8017a38:	f000 fc17 	bl	801826a <__multadd>
 8017a3c:	4681      	mov	r9, r0
 8017a3e:	4606      	mov	r6, r0
 8017a40:	9505      	str	r5, [sp, #20]
 8017a42:	e776      	b.n	8017932 <_dtoa_r+0x992>
 8017a44:	f000 fc11 	bl	801826a <__multadd>
 8017a48:	4631      	mov	r1, r6
 8017a4a:	4681      	mov	r9, r0
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	220a      	movs	r2, #10
 8017a50:	4620      	mov	r0, r4
 8017a52:	f000 fc0a 	bl	801826a <__multadd>
 8017a56:	4606      	mov	r6, r0
 8017a58:	e7f2      	b.n	8017a40 <_dtoa_r+0xaa0>
 8017a5a:	f04f 0900 	mov.w	r9, #0
 8017a5e:	2201      	movs	r2, #1
 8017a60:	9904      	ldr	r1, [sp, #16]
 8017a62:	4620      	mov	r0, r4
 8017a64:	f000 fdb6 	bl	80185d4 <__lshift>
 8017a68:	4639      	mov	r1, r7
 8017a6a:	9004      	str	r0, [sp, #16]
 8017a6c:	f000 fe06 	bl	801867c <__mcmp>
 8017a70:	2800      	cmp	r0, #0
 8017a72:	dcb6      	bgt.n	80179e2 <_dtoa_r+0xa42>
 8017a74:	d102      	bne.n	8017a7c <_dtoa_r+0xadc>
 8017a76:	f018 0f01 	tst.w	r8, #1
 8017a7a:	d1b2      	bne.n	80179e2 <_dtoa_r+0xa42>
 8017a7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017a80:	2b30      	cmp	r3, #48	; 0x30
 8017a82:	f105 32ff 	add.w	r2, r5, #4294967295
 8017a86:	f47f af0a 	bne.w	801789e <_dtoa_r+0x8fe>
 8017a8a:	4615      	mov	r5, r2
 8017a8c:	e7f6      	b.n	8017a7c <_dtoa_r+0xadc>
 8017a8e:	4593      	cmp	fp, r2
 8017a90:	d105      	bne.n	8017a9e <_dtoa_r+0xafe>
 8017a92:	2331      	movs	r3, #49	; 0x31
 8017a94:	f10a 0a01 	add.w	sl, sl, #1
 8017a98:	f88b 3000 	strb.w	r3, [fp]
 8017a9c:	e6ff      	b.n	801789e <_dtoa_r+0x8fe>
 8017a9e:	4615      	mov	r5, r2
 8017aa0:	e79f      	b.n	80179e2 <_dtoa_r+0xa42>
 8017aa2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017b08 <_dtoa_r+0xb68>
 8017aa6:	e007      	b.n	8017ab8 <_dtoa_r+0xb18>
 8017aa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017aaa:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017b0c <_dtoa_r+0xb6c>
 8017aae:	b11b      	cbz	r3, 8017ab8 <_dtoa_r+0xb18>
 8017ab0:	f10b 0308 	add.w	r3, fp, #8
 8017ab4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017ab6:	6013      	str	r3, [r2, #0]
 8017ab8:	4658      	mov	r0, fp
 8017aba:	b017      	add	sp, #92	; 0x5c
 8017abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ac0:	9b06      	ldr	r3, [sp, #24]
 8017ac2:	2b01      	cmp	r3, #1
 8017ac4:	f77f ae35 	ble.w	8017732 <_dtoa_r+0x792>
 8017ac8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017aca:	9307      	str	r3, [sp, #28]
 8017acc:	e649      	b.n	8017762 <_dtoa_r+0x7c2>
 8017ace:	9b02      	ldr	r3, [sp, #8]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	dc03      	bgt.n	8017adc <_dtoa_r+0xb3c>
 8017ad4:	9b06      	ldr	r3, [sp, #24]
 8017ad6:	2b02      	cmp	r3, #2
 8017ad8:	f73f aecc 	bgt.w	8017874 <_dtoa_r+0x8d4>
 8017adc:	465d      	mov	r5, fp
 8017ade:	4639      	mov	r1, r7
 8017ae0:	9804      	ldr	r0, [sp, #16]
 8017ae2:	f7ff f9cf 	bl	8016e84 <quorem>
 8017ae6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017aea:	f805 8b01 	strb.w	r8, [r5], #1
 8017aee:	9a02      	ldr	r2, [sp, #8]
 8017af0:	eba5 030b 	sub.w	r3, r5, fp
 8017af4:	429a      	cmp	r2, r3
 8017af6:	ddb0      	ble.n	8017a5a <_dtoa_r+0xaba>
 8017af8:	2300      	movs	r3, #0
 8017afa:	220a      	movs	r2, #10
 8017afc:	9904      	ldr	r1, [sp, #16]
 8017afe:	4620      	mov	r0, r4
 8017b00:	f000 fbb3 	bl	801826a <__multadd>
 8017b04:	9004      	str	r0, [sp, #16]
 8017b06:	e7ea      	b.n	8017ade <_dtoa_r+0xb3e>
 8017b08:	0801a15b 	.word	0x0801a15b
 8017b0c:	0801a020 	.word	0x0801a020

08017b10 <rshift>:
 8017b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b12:	6906      	ldr	r6, [r0, #16]
 8017b14:	114b      	asrs	r3, r1, #5
 8017b16:	429e      	cmp	r6, r3
 8017b18:	f100 0414 	add.w	r4, r0, #20
 8017b1c:	dd30      	ble.n	8017b80 <rshift+0x70>
 8017b1e:	f011 011f 	ands.w	r1, r1, #31
 8017b22:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017b26:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017b2a:	d108      	bne.n	8017b3e <rshift+0x2e>
 8017b2c:	4621      	mov	r1, r4
 8017b2e:	42b2      	cmp	r2, r6
 8017b30:	460b      	mov	r3, r1
 8017b32:	d211      	bcs.n	8017b58 <rshift+0x48>
 8017b34:	f852 3b04 	ldr.w	r3, [r2], #4
 8017b38:	f841 3b04 	str.w	r3, [r1], #4
 8017b3c:	e7f7      	b.n	8017b2e <rshift+0x1e>
 8017b3e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8017b42:	f1c1 0c20 	rsb	ip, r1, #32
 8017b46:	40cd      	lsrs	r5, r1
 8017b48:	3204      	adds	r2, #4
 8017b4a:	4623      	mov	r3, r4
 8017b4c:	42b2      	cmp	r2, r6
 8017b4e:	4617      	mov	r7, r2
 8017b50:	d30c      	bcc.n	8017b6c <rshift+0x5c>
 8017b52:	601d      	str	r5, [r3, #0]
 8017b54:	b105      	cbz	r5, 8017b58 <rshift+0x48>
 8017b56:	3304      	adds	r3, #4
 8017b58:	1b1a      	subs	r2, r3, r4
 8017b5a:	42a3      	cmp	r3, r4
 8017b5c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017b60:	bf08      	it	eq
 8017b62:	2300      	moveq	r3, #0
 8017b64:	6102      	str	r2, [r0, #16]
 8017b66:	bf08      	it	eq
 8017b68:	6143      	streq	r3, [r0, #20]
 8017b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017b6c:	683f      	ldr	r7, [r7, #0]
 8017b6e:	fa07 f70c 	lsl.w	r7, r7, ip
 8017b72:	433d      	orrs	r5, r7
 8017b74:	f843 5b04 	str.w	r5, [r3], #4
 8017b78:	f852 5b04 	ldr.w	r5, [r2], #4
 8017b7c:	40cd      	lsrs	r5, r1
 8017b7e:	e7e5      	b.n	8017b4c <rshift+0x3c>
 8017b80:	4623      	mov	r3, r4
 8017b82:	e7e9      	b.n	8017b58 <rshift+0x48>

08017b84 <__hexdig_fun>:
 8017b84:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017b88:	2b09      	cmp	r3, #9
 8017b8a:	d802      	bhi.n	8017b92 <__hexdig_fun+0xe>
 8017b8c:	3820      	subs	r0, #32
 8017b8e:	b2c0      	uxtb	r0, r0
 8017b90:	4770      	bx	lr
 8017b92:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017b96:	2b05      	cmp	r3, #5
 8017b98:	d801      	bhi.n	8017b9e <__hexdig_fun+0x1a>
 8017b9a:	3847      	subs	r0, #71	; 0x47
 8017b9c:	e7f7      	b.n	8017b8e <__hexdig_fun+0xa>
 8017b9e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017ba2:	2b05      	cmp	r3, #5
 8017ba4:	d801      	bhi.n	8017baa <__hexdig_fun+0x26>
 8017ba6:	3827      	subs	r0, #39	; 0x27
 8017ba8:	e7f1      	b.n	8017b8e <__hexdig_fun+0xa>
 8017baa:	2000      	movs	r0, #0
 8017bac:	4770      	bx	lr

08017bae <__gethex>:
 8017bae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bb2:	b08b      	sub	sp, #44	; 0x2c
 8017bb4:	468a      	mov	sl, r1
 8017bb6:	9002      	str	r0, [sp, #8]
 8017bb8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017bba:	9306      	str	r3, [sp, #24]
 8017bbc:	4690      	mov	r8, r2
 8017bbe:	f000 fadf 	bl	8018180 <__localeconv_l>
 8017bc2:	6803      	ldr	r3, [r0, #0]
 8017bc4:	9303      	str	r3, [sp, #12]
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	f7e8 fb1a 	bl	8000200 <strlen>
 8017bcc:	9b03      	ldr	r3, [sp, #12]
 8017bce:	9001      	str	r0, [sp, #4]
 8017bd0:	4403      	add	r3, r0
 8017bd2:	f04f 0b00 	mov.w	fp, #0
 8017bd6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017bda:	9307      	str	r3, [sp, #28]
 8017bdc:	f8da 3000 	ldr.w	r3, [sl]
 8017be0:	3302      	adds	r3, #2
 8017be2:	461f      	mov	r7, r3
 8017be4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017be8:	2830      	cmp	r0, #48	; 0x30
 8017bea:	d06c      	beq.n	8017cc6 <__gethex+0x118>
 8017bec:	f7ff ffca 	bl	8017b84 <__hexdig_fun>
 8017bf0:	4604      	mov	r4, r0
 8017bf2:	2800      	cmp	r0, #0
 8017bf4:	d16a      	bne.n	8017ccc <__gethex+0x11e>
 8017bf6:	9a01      	ldr	r2, [sp, #4]
 8017bf8:	9903      	ldr	r1, [sp, #12]
 8017bfa:	4638      	mov	r0, r7
 8017bfc:	f001 fc36 	bl	801946c <strncmp>
 8017c00:	2800      	cmp	r0, #0
 8017c02:	d166      	bne.n	8017cd2 <__gethex+0x124>
 8017c04:	9b01      	ldr	r3, [sp, #4]
 8017c06:	5cf8      	ldrb	r0, [r7, r3]
 8017c08:	18fe      	adds	r6, r7, r3
 8017c0a:	f7ff ffbb 	bl	8017b84 <__hexdig_fun>
 8017c0e:	2800      	cmp	r0, #0
 8017c10:	d062      	beq.n	8017cd8 <__gethex+0x12a>
 8017c12:	4633      	mov	r3, r6
 8017c14:	7818      	ldrb	r0, [r3, #0]
 8017c16:	2830      	cmp	r0, #48	; 0x30
 8017c18:	461f      	mov	r7, r3
 8017c1a:	f103 0301 	add.w	r3, r3, #1
 8017c1e:	d0f9      	beq.n	8017c14 <__gethex+0x66>
 8017c20:	f7ff ffb0 	bl	8017b84 <__hexdig_fun>
 8017c24:	fab0 f580 	clz	r5, r0
 8017c28:	096d      	lsrs	r5, r5, #5
 8017c2a:	4634      	mov	r4, r6
 8017c2c:	f04f 0b01 	mov.w	fp, #1
 8017c30:	463a      	mov	r2, r7
 8017c32:	4616      	mov	r6, r2
 8017c34:	3201      	adds	r2, #1
 8017c36:	7830      	ldrb	r0, [r6, #0]
 8017c38:	f7ff ffa4 	bl	8017b84 <__hexdig_fun>
 8017c3c:	2800      	cmp	r0, #0
 8017c3e:	d1f8      	bne.n	8017c32 <__gethex+0x84>
 8017c40:	9a01      	ldr	r2, [sp, #4]
 8017c42:	9903      	ldr	r1, [sp, #12]
 8017c44:	4630      	mov	r0, r6
 8017c46:	f001 fc11 	bl	801946c <strncmp>
 8017c4a:	b950      	cbnz	r0, 8017c62 <__gethex+0xb4>
 8017c4c:	b954      	cbnz	r4, 8017c64 <__gethex+0xb6>
 8017c4e:	9b01      	ldr	r3, [sp, #4]
 8017c50:	18f4      	adds	r4, r6, r3
 8017c52:	4622      	mov	r2, r4
 8017c54:	4616      	mov	r6, r2
 8017c56:	3201      	adds	r2, #1
 8017c58:	7830      	ldrb	r0, [r6, #0]
 8017c5a:	f7ff ff93 	bl	8017b84 <__hexdig_fun>
 8017c5e:	2800      	cmp	r0, #0
 8017c60:	d1f8      	bne.n	8017c54 <__gethex+0xa6>
 8017c62:	b10c      	cbz	r4, 8017c68 <__gethex+0xba>
 8017c64:	1ba4      	subs	r4, r4, r6
 8017c66:	00a4      	lsls	r4, r4, #2
 8017c68:	7833      	ldrb	r3, [r6, #0]
 8017c6a:	2b50      	cmp	r3, #80	; 0x50
 8017c6c:	d001      	beq.n	8017c72 <__gethex+0xc4>
 8017c6e:	2b70      	cmp	r3, #112	; 0x70
 8017c70:	d140      	bne.n	8017cf4 <__gethex+0x146>
 8017c72:	7873      	ldrb	r3, [r6, #1]
 8017c74:	2b2b      	cmp	r3, #43	; 0x2b
 8017c76:	d031      	beq.n	8017cdc <__gethex+0x12e>
 8017c78:	2b2d      	cmp	r3, #45	; 0x2d
 8017c7a:	d033      	beq.n	8017ce4 <__gethex+0x136>
 8017c7c:	1c71      	adds	r1, r6, #1
 8017c7e:	f04f 0900 	mov.w	r9, #0
 8017c82:	7808      	ldrb	r0, [r1, #0]
 8017c84:	f7ff ff7e 	bl	8017b84 <__hexdig_fun>
 8017c88:	1e43      	subs	r3, r0, #1
 8017c8a:	b2db      	uxtb	r3, r3
 8017c8c:	2b18      	cmp	r3, #24
 8017c8e:	d831      	bhi.n	8017cf4 <__gethex+0x146>
 8017c90:	f1a0 0210 	sub.w	r2, r0, #16
 8017c94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017c98:	f7ff ff74 	bl	8017b84 <__hexdig_fun>
 8017c9c:	1e43      	subs	r3, r0, #1
 8017c9e:	b2db      	uxtb	r3, r3
 8017ca0:	2b18      	cmp	r3, #24
 8017ca2:	d922      	bls.n	8017cea <__gethex+0x13c>
 8017ca4:	f1b9 0f00 	cmp.w	r9, #0
 8017ca8:	d000      	beq.n	8017cac <__gethex+0xfe>
 8017caa:	4252      	negs	r2, r2
 8017cac:	4414      	add	r4, r2
 8017cae:	f8ca 1000 	str.w	r1, [sl]
 8017cb2:	b30d      	cbz	r5, 8017cf8 <__gethex+0x14a>
 8017cb4:	f1bb 0f00 	cmp.w	fp, #0
 8017cb8:	bf0c      	ite	eq
 8017cba:	2706      	moveq	r7, #6
 8017cbc:	2700      	movne	r7, #0
 8017cbe:	4638      	mov	r0, r7
 8017cc0:	b00b      	add	sp, #44	; 0x2c
 8017cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cc6:	f10b 0b01 	add.w	fp, fp, #1
 8017cca:	e78a      	b.n	8017be2 <__gethex+0x34>
 8017ccc:	2500      	movs	r5, #0
 8017cce:	462c      	mov	r4, r5
 8017cd0:	e7ae      	b.n	8017c30 <__gethex+0x82>
 8017cd2:	463e      	mov	r6, r7
 8017cd4:	2501      	movs	r5, #1
 8017cd6:	e7c7      	b.n	8017c68 <__gethex+0xba>
 8017cd8:	4604      	mov	r4, r0
 8017cda:	e7fb      	b.n	8017cd4 <__gethex+0x126>
 8017cdc:	f04f 0900 	mov.w	r9, #0
 8017ce0:	1cb1      	adds	r1, r6, #2
 8017ce2:	e7ce      	b.n	8017c82 <__gethex+0xd4>
 8017ce4:	f04f 0901 	mov.w	r9, #1
 8017ce8:	e7fa      	b.n	8017ce0 <__gethex+0x132>
 8017cea:	230a      	movs	r3, #10
 8017cec:	fb03 0202 	mla	r2, r3, r2, r0
 8017cf0:	3a10      	subs	r2, #16
 8017cf2:	e7cf      	b.n	8017c94 <__gethex+0xe6>
 8017cf4:	4631      	mov	r1, r6
 8017cf6:	e7da      	b.n	8017cae <__gethex+0x100>
 8017cf8:	1bf3      	subs	r3, r6, r7
 8017cfa:	3b01      	subs	r3, #1
 8017cfc:	4629      	mov	r1, r5
 8017cfe:	2b07      	cmp	r3, #7
 8017d00:	dc49      	bgt.n	8017d96 <__gethex+0x1e8>
 8017d02:	9802      	ldr	r0, [sp, #8]
 8017d04:	f000 fa66 	bl	80181d4 <_Balloc>
 8017d08:	9b01      	ldr	r3, [sp, #4]
 8017d0a:	f100 0914 	add.w	r9, r0, #20
 8017d0e:	f04f 0b00 	mov.w	fp, #0
 8017d12:	f1c3 0301 	rsb	r3, r3, #1
 8017d16:	4605      	mov	r5, r0
 8017d18:	f8cd 9010 	str.w	r9, [sp, #16]
 8017d1c:	46da      	mov	sl, fp
 8017d1e:	9308      	str	r3, [sp, #32]
 8017d20:	42b7      	cmp	r7, r6
 8017d22:	d33b      	bcc.n	8017d9c <__gethex+0x1ee>
 8017d24:	9804      	ldr	r0, [sp, #16]
 8017d26:	f840 ab04 	str.w	sl, [r0], #4
 8017d2a:	eba0 0009 	sub.w	r0, r0, r9
 8017d2e:	1080      	asrs	r0, r0, #2
 8017d30:	6128      	str	r0, [r5, #16]
 8017d32:	0147      	lsls	r7, r0, #5
 8017d34:	4650      	mov	r0, sl
 8017d36:	f000 fb11 	bl	801835c <__hi0bits>
 8017d3a:	f8d8 6000 	ldr.w	r6, [r8]
 8017d3e:	1a3f      	subs	r7, r7, r0
 8017d40:	42b7      	cmp	r7, r6
 8017d42:	dd64      	ble.n	8017e0e <__gethex+0x260>
 8017d44:	1bbf      	subs	r7, r7, r6
 8017d46:	4639      	mov	r1, r7
 8017d48:	4628      	mov	r0, r5
 8017d4a:	f000 fe21 	bl	8018990 <__any_on>
 8017d4e:	4682      	mov	sl, r0
 8017d50:	b178      	cbz	r0, 8017d72 <__gethex+0x1c4>
 8017d52:	1e7b      	subs	r3, r7, #1
 8017d54:	1159      	asrs	r1, r3, #5
 8017d56:	f003 021f 	and.w	r2, r3, #31
 8017d5a:	f04f 0a01 	mov.w	sl, #1
 8017d5e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017d62:	fa0a f202 	lsl.w	r2, sl, r2
 8017d66:	420a      	tst	r2, r1
 8017d68:	d003      	beq.n	8017d72 <__gethex+0x1c4>
 8017d6a:	4553      	cmp	r3, sl
 8017d6c:	dc46      	bgt.n	8017dfc <__gethex+0x24e>
 8017d6e:	f04f 0a02 	mov.w	sl, #2
 8017d72:	4639      	mov	r1, r7
 8017d74:	4628      	mov	r0, r5
 8017d76:	f7ff fecb 	bl	8017b10 <rshift>
 8017d7a:	443c      	add	r4, r7
 8017d7c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017d80:	42a3      	cmp	r3, r4
 8017d82:	da52      	bge.n	8017e2a <__gethex+0x27c>
 8017d84:	4629      	mov	r1, r5
 8017d86:	9802      	ldr	r0, [sp, #8]
 8017d88:	f000 fa58 	bl	801823c <_Bfree>
 8017d8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017d8e:	2300      	movs	r3, #0
 8017d90:	6013      	str	r3, [r2, #0]
 8017d92:	27a3      	movs	r7, #163	; 0xa3
 8017d94:	e793      	b.n	8017cbe <__gethex+0x110>
 8017d96:	3101      	adds	r1, #1
 8017d98:	105b      	asrs	r3, r3, #1
 8017d9a:	e7b0      	b.n	8017cfe <__gethex+0x150>
 8017d9c:	1e73      	subs	r3, r6, #1
 8017d9e:	9305      	str	r3, [sp, #20]
 8017da0:	9a07      	ldr	r2, [sp, #28]
 8017da2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017da6:	4293      	cmp	r3, r2
 8017da8:	d018      	beq.n	8017ddc <__gethex+0x22e>
 8017daa:	f1bb 0f20 	cmp.w	fp, #32
 8017dae:	d107      	bne.n	8017dc0 <__gethex+0x212>
 8017db0:	9b04      	ldr	r3, [sp, #16]
 8017db2:	f8c3 a000 	str.w	sl, [r3]
 8017db6:	3304      	adds	r3, #4
 8017db8:	f04f 0a00 	mov.w	sl, #0
 8017dbc:	9304      	str	r3, [sp, #16]
 8017dbe:	46d3      	mov	fp, sl
 8017dc0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017dc4:	f7ff fede 	bl	8017b84 <__hexdig_fun>
 8017dc8:	f000 000f 	and.w	r0, r0, #15
 8017dcc:	fa00 f00b 	lsl.w	r0, r0, fp
 8017dd0:	ea4a 0a00 	orr.w	sl, sl, r0
 8017dd4:	f10b 0b04 	add.w	fp, fp, #4
 8017dd8:	9b05      	ldr	r3, [sp, #20]
 8017dda:	e00d      	b.n	8017df8 <__gethex+0x24a>
 8017ddc:	9b05      	ldr	r3, [sp, #20]
 8017dde:	9a08      	ldr	r2, [sp, #32]
 8017de0:	4413      	add	r3, r2
 8017de2:	42bb      	cmp	r3, r7
 8017de4:	d3e1      	bcc.n	8017daa <__gethex+0x1fc>
 8017de6:	4618      	mov	r0, r3
 8017de8:	9a01      	ldr	r2, [sp, #4]
 8017dea:	9903      	ldr	r1, [sp, #12]
 8017dec:	9309      	str	r3, [sp, #36]	; 0x24
 8017dee:	f001 fb3d 	bl	801946c <strncmp>
 8017df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017df4:	2800      	cmp	r0, #0
 8017df6:	d1d8      	bne.n	8017daa <__gethex+0x1fc>
 8017df8:	461e      	mov	r6, r3
 8017dfa:	e791      	b.n	8017d20 <__gethex+0x172>
 8017dfc:	1eb9      	subs	r1, r7, #2
 8017dfe:	4628      	mov	r0, r5
 8017e00:	f000 fdc6 	bl	8018990 <__any_on>
 8017e04:	2800      	cmp	r0, #0
 8017e06:	d0b2      	beq.n	8017d6e <__gethex+0x1c0>
 8017e08:	f04f 0a03 	mov.w	sl, #3
 8017e0c:	e7b1      	b.n	8017d72 <__gethex+0x1c4>
 8017e0e:	da09      	bge.n	8017e24 <__gethex+0x276>
 8017e10:	1bf7      	subs	r7, r6, r7
 8017e12:	4629      	mov	r1, r5
 8017e14:	463a      	mov	r2, r7
 8017e16:	9802      	ldr	r0, [sp, #8]
 8017e18:	f000 fbdc 	bl	80185d4 <__lshift>
 8017e1c:	1be4      	subs	r4, r4, r7
 8017e1e:	4605      	mov	r5, r0
 8017e20:	f100 0914 	add.w	r9, r0, #20
 8017e24:	f04f 0a00 	mov.w	sl, #0
 8017e28:	e7a8      	b.n	8017d7c <__gethex+0x1ce>
 8017e2a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017e2e:	42a0      	cmp	r0, r4
 8017e30:	dd6a      	ble.n	8017f08 <__gethex+0x35a>
 8017e32:	1b04      	subs	r4, r0, r4
 8017e34:	42a6      	cmp	r6, r4
 8017e36:	dc2e      	bgt.n	8017e96 <__gethex+0x2e8>
 8017e38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017e3c:	2b02      	cmp	r3, #2
 8017e3e:	d022      	beq.n	8017e86 <__gethex+0x2d8>
 8017e40:	2b03      	cmp	r3, #3
 8017e42:	d024      	beq.n	8017e8e <__gethex+0x2e0>
 8017e44:	2b01      	cmp	r3, #1
 8017e46:	d115      	bne.n	8017e74 <__gethex+0x2c6>
 8017e48:	42a6      	cmp	r6, r4
 8017e4a:	d113      	bne.n	8017e74 <__gethex+0x2c6>
 8017e4c:	2e01      	cmp	r6, #1
 8017e4e:	dc0b      	bgt.n	8017e68 <__gethex+0x2ba>
 8017e50:	9a06      	ldr	r2, [sp, #24]
 8017e52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017e56:	6013      	str	r3, [r2, #0]
 8017e58:	2301      	movs	r3, #1
 8017e5a:	612b      	str	r3, [r5, #16]
 8017e5c:	f8c9 3000 	str.w	r3, [r9]
 8017e60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017e62:	2762      	movs	r7, #98	; 0x62
 8017e64:	601d      	str	r5, [r3, #0]
 8017e66:	e72a      	b.n	8017cbe <__gethex+0x110>
 8017e68:	1e71      	subs	r1, r6, #1
 8017e6a:	4628      	mov	r0, r5
 8017e6c:	f000 fd90 	bl	8018990 <__any_on>
 8017e70:	2800      	cmp	r0, #0
 8017e72:	d1ed      	bne.n	8017e50 <__gethex+0x2a2>
 8017e74:	4629      	mov	r1, r5
 8017e76:	9802      	ldr	r0, [sp, #8]
 8017e78:	f000 f9e0 	bl	801823c <_Bfree>
 8017e7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017e7e:	2300      	movs	r3, #0
 8017e80:	6013      	str	r3, [r2, #0]
 8017e82:	2750      	movs	r7, #80	; 0x50
 8017e84:	e71b      	b.n	8017cbe <__gethex+0x110>
 8017e86:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d0e1      	beq.n	8017e50 <__gethex+0x2a2>
 8017e8c:	e7f2      	b.n	8017e74 <__gethex+0x2c6>
 8017e8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d1dd      	bne.n	8017e50 <__gethex+0x2a2>
 8017e94:	e7ee      	b.n	8017e74 <__gethex+0x2c6>
 8017e96:	1e67      	subs	r7, r4, #1
 8017e98:	f1ba 0f00 	cmp.w	sl, #0
 8017e9c:	d131      	bne.n	8017f02 <__gethex+0x354>
 8017e9e:	b127      	cbz	r7, 8017eaa <__gethex+0x2fc>
 8017ea0:	4639      	mov	r1, r7
 8017ea2:	4628      	mov	r0, r5
 8017ea4:	f000 fd74 	bl	8018990 <__any_on>
 8017ea8:	4682      	mov	sl, r0
 8017eaa:	117a      	asrs	r2, r7, #5
 8017eac:	2301      	movs	r3, #1
 8017eae:	f007 071f 	and.w	r7, r7, #31
 8017eb2:	fa03 f707 	lsl.w	r7, r3, r7
 8017eb6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017eba:	4621      	mov	r1, r4
 8017ebc:	421f      	tst	r7, r3
 8017ebe:	4628      	mov	r0, r5
 8017ec0:	bf18      	it	ne
 8017ec2:	f04a 0a02 	orrne.w	sl, sl, #2
 8017ec6:	1b36      	subs	r6, r6, r4
 8017ec8:	f7ff fe22 	bl	8017b10 <rshift>
 8017ecc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017ed0:	2702      	movs	r7, #2
 8017ed2:	f1ba 0f00 	cmp.w	sl, #0
 8017ed6:	d048      	beq.n	8017f6a <__gethex+0x3bc>
 8017ed8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017edc:	2b02      	cmp	r3, #2
 8017ede:	d015      	beq.n	8017f0c <__gethex+0x35e>
 8017ee0:	2b03      	cmp	r3, #3
 8017ee2:	d017      	beq.n	8017f14 <__gethex+0x366>
 8017ee4:	2b01      	cmp	r3, #1
 8017ee6:	d109      	bne.n	8017efc <__gethex+0x34e>
 8017ee8:	f01a 0f02 	tst.w	sl, #2
 8017eec:	d006      	beq.n	8017efc <__gethex+0x34e>
 8017eee:	f8d9 3000 	ldr.w	r3, [r9]
 8017ef2:	ea4a 0a03 	orr.w	sl, sl, r3
 8017ef6:	f01a 0f01 	tst.w	sl, #1
 8017efa:	d10e      	bne.n	8017f1a <__gethex+0x36c>
 8017efc:	f047 0710 	orr.w	r7, r7, #16
 8017f00:	e033      	b.n	8017f6a <__gethex+0x3bc>
 8017f02:	f04f 0a01 	mov.w	sl, #1
 8017f06:	e7d0      	b.n	8017eaa <__gethex+0x2fc>
 8017f08:	2701      	movs	r7, #1
 8017f0a:	e7e2      	b.n	8017ed2 <__gethex+0x324>
 8017f0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017f0e:	f1c3 0301 	rsb	r3, r3, #1
 8017f12:	9315      	str	r3, [sp, #84]	; 0x54
 8017f14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d0f0      	beq.n	8017efc <__gethex+0x34e>
 8017f1a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017f1e:	f105 0314 	add.w	r3, r5, #20
 8017f22:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017f26:	eb03 010a 	add.w	r1, r3, sl
 8017f2a:	f04f 0c00 	mov.w	ip, #0
 8017f2e:	4618      	mov	r0, r3
 8017f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f34:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017f38:	d01c      	beq.n	8017f74 <__gethex+0x3c6>
 8017f3a:	3201      	adds	r2, #1
 8017f3c:	6002      	str	r2, [r0, #0]
 8017f3e:	2f02      	cmp	r7, #2
 8017f40:	f105 0314 	add.w	r3, r5, #20
 8017f44:	d138      	bne.n	8017fb8 <__gethex+0x40a>
 8017f46:	f8d8 2000 	ldr.w	r2, [r8]
 8017f4a:	3a01      	subs	r2, #1
 8017f4c:	42b2      	cmp	r2, r6
 8017f4e:	d10a      	bne.n	8017f66 <__gethex+0x3b8>
 8017f50:	1171      	asrs	r1, r6, #5
 8017f52:	2201      	movs	r2, #1
 8017f54:	f006 061f 	and.w	r6, r6, #31
 8017f58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017f5c:	fa02 f606 	lsl.w	r6, r2, r6
 8017f60:	421e      	tst	r6, r3
 8017f62:	bf18      	it	ne
 8017f64:	4617      	movne	r7, r2
 8017f66:	f047 0720 	orr.w	r7, r7, #32
 8017f6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017f6c:	601d      	str	r5, [r3, #0]
 8017f6e:	9b06      	ldr	r3, [sp, #24]
 8017f70:	601c      	str	r4, [r3, #0]
 8017f72:	e6a4      	b.n	8017cbe <__gethex+0x110>
 8017f74:	4299      	cmp	r1, r3
 8017f76:	f843 cc04 	str.w	ip, [r3, #-4]
 8017f7a:	d8d8      	bhi.n	8017f2e <__gethex+0x380>
 8017f7c:	68ab      	ldr	r3, [r5, #8]
 8017f7e:	4599      	cmp	r9, r3
 8017f80:	db12      	blt.n	8017fa8 <__gethex+0x3fa>
 8017f82:	6869      	ldr	r1, [r5, #4]
 8017f84:	9802      	ldr	r0, [sp, #8]
 8017f86:	3101      	adds	r1, #1
 8017f88:	f000 f924 	bl	80181d4 <_Balloc>
 8017f8c:	692a      	ldr	r2, [r5, #16]
 8017f8e:	3202      	adds	r2, #2
 8017f90:	f105 010c 	add.w	r1, r5, #12
 8017f94:	4683      	mov	fp, r0
 8017f96:	0092      	lsls	r2, r2, #2
 8017f98:	300c      	adds	r0, #12
 8017f9a:	f7fd f9c5 	bl	8015328 <memcpy>
 8017f9e:	4629      	mov	r1, r5
 8017fa0:	9802      	ldr	r0, [sp, #8]
 8017fa2:	f000 f94b 	bl	801823c <_Bfree>
 8017fa6:	465d      	mov	r5, fp
 8017fa8:	692b      	ldr	r3, [r5, #16]
 8017faa:	1c5a      	adds	r2, r3, #1
 8017fac:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017fb0:	612a      	str	r2, [r5, #16]
 8017fb2:	2201      	movs	r2, #1
 8017fb4:	615a      	str	r2, [r3, #20]
 8017fb6:	e7c2      	b.n	8017f3e <__gethex+0x390>
 8017fb8:	692a      	ldr	r2, [r5, #16]
 8017fba:	454a      	cmp	r2, r9
 8017fbc:	dd0b      	ble.n	8017fd6 <__gethex+0x428>
 8017fbe:	2101      	movs	r1, #1
 8017fc0:	4628      	mov	r0, r5
 8017fc2:	f7ff fda5 	bl	8017b10 <rshift>
 8017fc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017fca:	3401      	adds	r4, #1
 8017fcc:	42a3      	cmp	r3, r4
 8017fce:	f6ff aed9 	blt.w	8017d84 <__gethex+0x1d6>
 8017fd2:	2701      	movs	r7, #1
 8017fd4:	e7c7      	b.n	8017f66 <__gethex+0x3b8>
 8017fd6:	f016 061f 	ands.w	r6, r6, #31
 8017fda:	d0fa      	beq.n	8017fd2 <__gethex+0x424>
 8017fdc:	449a      	add	sl, r3
 8017fde:	f1c6 0620 	rsb	r6, r6, #32
 8017fe2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017fe6:	f000 f9b9 	bl	801835c <__hi0bits>
 8017fea:	42b0      	cmp	r0, r6
 8017fec:	dbe7      	blt.n	8017fbe <__gethex+0x410>
 8017fee:	e7f0      	b.n	8017fd2 <__gethex+0x424>

08017ff0 <L_shift>:
 8017ff0:	f1c2 0208 	rsb	r2, r2, #8
 8017ff4:	0092      	lsls	r2, r2, #2
 8017ff6:	b570      	push	{r4, r5, r6, lr}
 8017ff8:	f1c2 0620 	rsb	r6, r2, #32
 8017ffc:	6843      	ldr	r3, [r0, #4]
 8017ffe:	6804      	ldr	r4, [r0, #0]
 8018000:	fa03 f506 	lsl.w	r5, r3, r6
 8018004:	432c      	orrs	r4, r5
 8018006:	40d3      	lsrs	r3, r2
 8018008:	6004      	str	r4, [r0, #0]
 801800a:	f840 3f04 	str.w	r3, [r0, #4]!
 801800e:	4288      	cmp	r0, r1
 8018010:	d3f4      	bcc.n	8017ffc <L_shift+0xc>
 8018012:	bd70      	pop	{r4, r5, r6, pc}

08018014 <__match>:
 8018014:	b530      	push	{r4, r5, lr}
 8018016:	6803      	ldr	r3, [r0, #0]
 8018018:	3301      	adds	r3, #1
 801801a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801801e:	b914      	cbnz	r4, 8018026 <__match+0x12>
 8018020:	6003      	str	r3, [r0, #0]
 8018022:	2001      	movs	r0, #1
 8018024:	bd30      	pop	{r4, r5, pc}
 8018026:	f813 2b01 	ldrb.w	r2, [r3], #1
 801802a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801802e:	2d19      	cmp	r5, #25
 8018030:	bf98      	it	ls
 8018032:	3220      	addls	r2, #32
 8018034:	42a2      	cmp	r2, r4
 8018036:	d0f0      	beq.n	801801a <__match+0x6>
 8018038:	2000      	movs	r0, #0
 801803a:	e7f3      	b.n	8018024 <__match+0x10>

0801803c <__hexnan>:
 801803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018040:	680b      	ldr	r3, [r1, #0]
 8018042:	6801      	ldr	r1, [r0, #0]
 8018044:	115f      	asrs	r7, r3, #5
 8018046:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801804a:	f013 031f 	ands.w	r3, r3, #31
 801804e:	b087      	sub	sp, #28
 8018050:	bf18      	it	ne
 8018052:	3704      	addne	r7, #4
 8018054:	2500      	movs	r5, #0
 8018056:	1f3e      	subs	r6, r7, #4
 8018058:	4682      	mov	sl, r0
 801805a:	4690      	mov	r8, r2
 801805c:	9301      	str	r3, [sp, #4]
 801805e:	f847 5c04 	str.w	r5, [r7, #-4]
 8018062:	46b1      	mov	r9, r6
 8018064:	4634      	mov	r4, r6
 8018066:	9502      	str	r5, [sp, #8]
 8018068:	46ab      	mov	fp, r5
 801806a:	784a      	ldrb	r2, [r1, #1]
 801806c:	1c4b      	adds	r3, r1, #1
 801806e:	9303      	str	r3, [sp, #12]
 8018070:	b342      	cbz	r2, 80180c4 <__hexnan+0x88>
 8018072:	4610      	mov	r0, r2
 8018074:	9105      	str	r1, [sp, #20]
 8018076:	9204      	str	r2, [sp, #16]
 8018078:	f7ff fd84 	bl	8017b84 <__hexdig_fun>
 801807c:	2800      	cmp	r0, #0
 801807e:	d143      	bne.n	8018108 <__hexnan+0xcc>
 8018080:	9a04      	ldr	r2, [sp, #16]
 8018082:	9905      	ldr	r1, [sp, #20]
 8018084:	2a20      	cmp	r2, #32
 8018086:	d818      	bhi.n	80180ba <__hexnan+0x7e>
 8018088:	9b02      	ldr	r3, [sp, #8]
 801808a:	459b      	cmp	fp, r3
 801808c:	dd13      	ble.n	80180b6 <__hexnan+0x7a>
 801808e:	454c      	cmp	r4, r9
 8018090:	d206      	bcs.n	80180a0 <__hexnan+0x64>
 8018092:	2d07      	cmp	r5, #7
 8018094:	dc04      	bgt.n	80180a0 <__hexnan+0x64>
 8018096:	462a      	mov	r2, r5
 8018098:	4649      	mov	r1, r9
 801809a:	4620      	mov	r0, r4
 801809c:	f7ff ffa8 	bl	8017ff0 <L_shift>
 80180a0:	4544      	cmp	r4, r8
 80180a2:	d944      	bls.n	801812e <__hexnan+0xf2>
 80180a4:	2300      	movs	r3, #0
 80180a6:	f1a4 0904 	sub.w	r9, r4, #4
 80180aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80180ae:	f8cd b008 	str.w	fp, [sp, #8]
 80180b2:	464c      	mov	r4, r9
 80180b4:	461d      	mov	r5, r3
 80180b6:	9903      	ldr	r1, [sp, #12]
 80180b8:	e7d7      	b.n	801806a <__hexnan+0x2e>
 80180ba:	2a29      	cmp	r2, #41	; 0x29
 80180bc:	d14a      	bne.n	8018154 <__hexnan+0x118>
 80180be:	3102      	adds	r1, #2
 80180c0:	f8ca 1000 	str.w	r1, [sl]
 80180c4:	f1bb 0f00 	cmp.w	fp, #0
 80180c8:	d044      	beq.n	8018154 <__hexnan+0x118>
 80180ca:	454c      	cmp	r4, r9
 80180cc:	d206      	bcs.n	80180dc <__hexnan+0xa0>
 80180ce:	2d07      	cmp	r5, #7
 80180d0:	dc04      	bgt.n	80180dc <__hexnan+0xa0>
 80180d2:	462a      	mov	r2, r5
 80180d4:	4649      	mov	r1, r9
 80180d6:	4620      	mov	r0, r4
 80180d8:	f7ff ff8a 	bl	8017ff0 <L_shift>
 80180dc:	4544      	cmp	r4, r8
 80180de:	d928      	bls.n	8018132 <__hexnan+0xf6>
 80180e0:	4643      	mov	r3, r8
 80180e2:	f854 2b04 	ldr.w	r2, [r4], #4
 80180e6:	f843 2b04 	str.w	r2, [r3], #4
 80180ea:	42a6      	cmp	r6, r4
 80180ec:	d2f9      	bcs.n	80180e2 <__hexnan+0xa6>
 80180ee:	2200      	movs	r2, #0
 80180f0:	f843 2b04 	str.w	r2, [r3], #4
 80180f4:	429e      	cmp	r6, r3
 80180f6:	d2fb      	bcs.n	80180f0 <__hexnan+0xb4>
 80180f8:	6833      	ldr	r3, [r6, #0]
 80180fa:	b91b      	cbnz	r3, 8018104 <__hexnan+0xc8>
 80180fc:	4546      	cmp	r6, r8
 80180fe:	d127      	bne.n	8018150 <__hexnan+0x114>
 8018100:	2301      	movs	r3, #1
 8018102:	6033      	str	r3, [r6, #0]
 8018104:	2005      	movs	r0, #5
 8018106:	e026      	b.n	8018156 <__hexnan+0x11a>
 8018108:	3501      	adds	r5, #1
 801810a:	2d08      	cmp	r5, #8
 801810c:	f10b 0b01 	add.w	fp, fp, #1
 8018110:	dd06      	ble.n	8018120 <__hexnan+0xe4>
 8018112:	4544      	cmp	r4, r8
 8018114:	d9cf      	bls.n	80180b6 <__hexnan+0x7a>
 8018116:	2300      	movs	r3, #0
 8018118:	f844 3c04 	str.w	r3, [r4, #-4]
 801811c:	2501      	movs	r5, #1
 801811e:	3c04      	subs	r4, #4
 8018120:	6822      	ldr	r2, [r4, #0]
 8018122:	f000 000f 	and.w	r0, r0, #15
 8018126:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801812a:	6020      	str	r0, [r4, #0]
 801812c:	e7c3      	b.n	80180b6 <__hexnan+0x7a>
 801812e:	2508      	movs	r5, #8
 8018130:	e7c1      	b.n	80180b6 <__hexnan+0x7a>
 8018132:	9b01      	ldr	r3, [sp, #4]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d0df      	beq.n	80180f8 <__hexnan+0xbc>
 8018138:	f04f 32ff 	mov.w	r2, #4294967295
 801813c:	f1c3 0320 	rsb	r3, r3, #32
 8018140:	fa22 f303 	lsr.w	r3, r2, r3
 8018144:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018148:	401a      	ands	r2, r3
 801814a:	f847 2c04 	str.w	r2, [r7, #-4]
 801814e:	e7d3      	b.n	80180f8 <__hexnan+0xbc>
 8018150:	3e04      	subs	r6, #4
 8018152:	e7d1      	b.n	80180f8 <__hexnan+0xbc>
 8018154:	2004      	movs	r0, #4
 8018156:	b007      	add	sp, #28
 8018158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801815c <__locale_ctype_ptr_l>:
 801815c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018160:	4770      	bx	lr
	...

08018164 <__locale_ctype_ptr>:
 8018164:	4b04      	ldr	r3, [pc, #16]	; (8018178 <__locale_ctype_ptr+0x14>)
 8018166:	4a05      	ldr	r2, [pc, #20]	; (801817c <__locale_ctype_ptr+0x18>)
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	6a1b      	ldr	r3, [r3, #32]
 801816c:	2b00      	cmp	r3, #0
 801816e:	bf08      	it	eq
 8018170:	4613      	moveq	r3, r2
 8018172:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8018176:	4770      	bx	lr
 8018178:	2000000c 	.word	0x2000000c
 801817c:	20000070 	.word	0x20000070

08018180 <__localeconv_l>:
 8018180:	30f0      	adds	r0, #240	; 0xf0
 8018182:	4770      	bx	lr

08018184 <_localeconv_r>:
 8018184:	4b04      	ldr	r3, [pc, #16]	; (8018198 <_localeconv_r+0x14>)
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	6a18      	ldr	r0, [r3, #32]
 801818a:	4b04      	ldr	r3, [pc, #16]	; (801819c <_localeconv_r+0x18>)
 801818c:	2800      	cmp	r0, #0
 801818e:	bf08      	it	eq
 8018190:	4618      	moveq	r0, r3
 8018192:	30f0      	adds	r0, #240	; 0xf0
 8018194:	4770      	bx	lr
 8018196:	bf00      	nop
 8018198:	2000000c 	.word	0x2000000c
 801819c:	20000070 	.word	0x20000070

080181a0 <malloc>:
 80181a0:	4b02      	ldr	r3, [pc, #8]	; (80181ac <malloc+0xc>)
 80181a2:	4601      	mov	r1, r0
 80181a4:	6818      	ldr	r0, [r3, #0]
 80181a6:	f000 bc71 	b.w	8018a8c <_malloc_r>
 80181aa:	bf00      	nop
 80181ac:	2000000c 	.word	0x2000000c

080181b0 <__ascii_mbtowc>:
 80181b0:	b082      	sub	sp, #8
 80181b2:	b901      	cbnz	r1, 80181b6 <__ascii_mbtowc+0x6>
 80181b4:	a901      	add	r1, sp, #4
 80181b6:	b142      	cbz	r2, 80181ca <__ascii_mbtowc+0x1a>
 80181b8:	b14b      	cbz	r3, 80181ce <__ascii_mbtowc+0x1e>
 80181ba:	7813      	ldrb	r3, [r2, #0]
 80181bc:	600b      	str	r3, [r1, #0]
 80181be:	7812      	ldrb	r2, [r2, #0]
 80181c0:	1c10      	adds	r0, r2, #0
 80181c2:	bf18      	it	ne
 80181c4:	2001      	movne	r0, #1
 80181c6:	b002      	add	sp, #8
 80181c8:	4770      	bx	lr
 80181ca:	4610      	mov	r0, r2
 80181cc:	e7fb      	b.n	80181c6 <__ascii_mbtowc+0x16>
 80181ce:	f06f 0001 	mvn.w	r0, #1
 80181d2:	e7f8      	b.n	80181c6 <__ascii_mbtowc+0x16>

080181d4 <_Balloc>:
 80181d4:	b570      	push	{r4, r5, r6, lr}
 80181d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80181d8:	4604      	mov	r4, r0
 80181da:	460e      	mov	r6, r1
 80181dc:	b93d      	cbnz	r5, 80181ee <_Balloc+0x1a>
 80181de:	2010      	movs	r0, #16
 80181e0:	f7ff ffde 	bl	80181a0 <malloc>
 80181e4:	6260      	str	r0, [r4, #36]	; 0x24
 80181e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80181ea:	6005      	str	r5, [r0, #0]
 80181ec:	60c5      	str	r5, [r0, #12]
 80181ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80181f0:	68eb      	ldr	r3, [r5, #12]
 80181f2:	b183      	cbz	r3, 8018216 <_Balloc+0x42>
 80181f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80181f6:	68db      	ldr	r3, [r3, #12]
 80181f8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80181fc:	b9b8      	cbnz	r0, 801822e <_Balloc+0x5a>
 80181fe:	2101      	movs	r1, #1
 8018200:	fa01 f506 	lsl.w	r5, r1, r6
 8018204:	1d6a      	adds	r2, r5, #5
 8018206:	0092      	lsls	r2, r2, #2
 8018208:	4620      	mov	r0, r4
 801820a:	f000 fbe2 	bl	80189d2 <_calloc_r>
 801820e:	b160      	cbz	r0, 801822a <_Balloc+0x56>
 8018210:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018214:	e00e      	b.n	8018234 <_Balloc+0x60>
 8018216:	2221      	movs	r2, #33	; 0x21
 8018218:	2104      	movs	r1, #4
 801821a:	4620      	mov	r0, r4
 801821c:	f000 fbd9 	bl	80189d2 <_calloc_r>
 8018220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018222:	60e8      	str	r0, [r5, #12]
 8018224:	68db      	ldr	r3, [r3, #12]
 8018226:	2b00      	cmp	r3, #0
 8018228:	d1e4      	bne.n	80181f4 <_Balloc+0x20>
 801822a:	2000      	movs	r0, #0
 801822c:	bd70      	pop	{r4, r5, r6, pc}
 801822e:	6802      	ldr	r2, [r0, #0]
 8018230:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018234:	2300      	movs	r3, #0
 8018236:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801823a:	e7f7      	b.n	801822c <_Balloc+0x58>

0801823c <_Bfree>:
 801823c:	b570      	push	{r4, r5, r6, lr}
 801823e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018240:	4606      	mov	r6, r0
 8018242:	460d      	mov	r5, r1
 8018244:	b93c      	cbnz	r4, 8018256 <_Bfree+0x1a>
 8018246:	2010      	movs	r0, #16
 8018248:	f7ff ffaa 	bl	80181a0 <malloc>
 801824c:	6270      	str	r0, [r6, #36]	; 0x24
 801824e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018252:	6004      	str	r4, [r0, #0]
 8018254:	60c4      	str	r4, [r0, #12]
 8018256:	b13d      	cbz	r5, 8018268 <_Bfree+0x2c>
 8018258:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801825a:	686a      	ldr	r2, [r5, #4]
 801825c:	68db      	ldr	r3, [r3, #12]
 801825e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018262:	6029      	str	r1, [r5, #0]
 8018264:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018268:	bd70      	pop	{r4, r5, r6, pc}

0801826a <__multadd>:
 801826a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801826e:	690d      	ldr	r5, [r1, #16]
 8018270:	461f      	mov	r7, r3
 8018272:	4606      	mov	r6, r0
 8018274:	460c      	mov	r4, r1
 8018276:	f101 0c14 	add.w	ip, r1, #20
 801827a:	2300      	movs	r3, #0
 801827c:	f8dc 0000 	ldr.w	r0, [ip]
 8018280:	b281      	uxth	r1, r0
 8018282:	fb02 7101 	mla	r1, r2, r1, r7
 8018286:	0c0f      	lsrs	r7, r1, #16
 8018288:	0c00      	lsrs	r0, r0, #16
 801828a:	fb02 7000 	mla	r0, r2, r0, r7
 801828e:	b289      	uxth	r1, r1
 8018290:	3301      	adds	r3, #1
 8018292:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018296:	429d      	cmp	r5, r3
 8018298:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801829c:	f84c 1b04 	str.w	r1, [ip], #4
 80182a0:	dcec      	bgt.n	801827c <__multadd+0x12>
 80182a2:	b1d7      	cbz	r7, 80182da <__multadd+0x70>
 80182a4:	68a3      	ldr	r3, [r4, #8]
 80182a6:	42ab      	cmp	r3, r5
 80182a8:	dc12      	bgt.n	80182d0 <__multadd+0x66>
 80182aa:	6861      	ldr	r1, [r4, #4]
 80182ac:	4630      	mov	r0, r6
 80182ae:	3101      	adds	r1, #1
 80182b0:	f7ff ff90 	bl	80181d4 <_Balloc>
 80182b4:	6922      	ldr	r2, [r4, #16]
 80182b6:	3202      	adds	r2, #2
 80182b8:	f104 010c 	add.w	r1, r4, #12
 80182bc:	4680      	mov	r8, r0
 80182be:	0092      	lsls	r2, r2, #2
 80182c0:	300c      	adds	r0, #12
 80182c2:	f7fd f831 	bl	8015328 <memcpy>
 80182c6:	4621      	mov	r1, r4
 80182c8:	4630      	mov	r0, r6
 80182ca:	f7ff ffb7 	bl	801823c <_Bfree>
 80182ce:	4644      	mov	r4, r8
 80182d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80182d4:	3501      	adds	r5, #1
 80182d6:	615f      	str	r7, [r3, #20]
 80182d8:	6125      	str	r5, [r4, #16]
 80182da:	4620      	mov	r0, r4
 80182dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080182e0 <__s2b>:
 80182e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182e4:	460c      	mov	r4, r1
 80182e6:	4615      	mov	r5, r2
 80182e8:	461f      	mov	r7, r3
 80182ea:	2209      	movs	r2, #9
 80182ec:	3308      	adds	r3, #8
 80182ee:	4606      	mov	r6, r0
 80182f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80182f4:	2100      	movs	r1, #0
 80182f6:	2201      	movs	r2, #1
 80182f8:	429a      	cmp	r2, r3
 80182fa:	db20      	blt.n	801833e <__s2b+0x5e>
 80182fc:	4630      	mov	r0, r6
 80182fe:	f7ff ff69 	bl	80181d4 <_Balloc>
 8018302:	9b08      	ldr	r3, [sp, #32]
 8018304:	6143      	str	r3, [r0, #20]
 8018306:	2d09      	cmp	r5, #9
 8018308:	f04f 0301 	mov.w	r3, #1
 801830c:	6103      	str	r3, [r0, #16]
 801830e:	dd19      	ble.n	8018344 <__s2b+0x64>
 8018310:	f104 0809 	add.w	r8, r4, #9
 8018314:	46c1      	mov	r9, r8
 8018316:	442c      	add	r4, r5
 8018318:	f819 3b01 	ldrb.w	r3, [r9], #1
 801831c:	4601      	mov	r1, r0
 801831e:	3b30      	subs	r3, #48	; 0x30
 8018320:	220a      	movs	r2, #10
 8018322:	4630      	mov	r0, r6
 8018324:	f7ff ffa1 	bl	801826a <__multadd>
 8018328:	45a1      	cmp	r9, r4
 801832a:	d1f5      	bne.n	8018318 <__s2b+0x38>
 801832c:	eb08 0405 	add.w	r4, r8, r5
 8018330:	3c08      	subs	r4, #8
 8018332:	1b2d      	subs	r5, r5, r4
 8018334:	1963      	adds	r3, r4, r5
 8018336:	42bb      	cmp	r3, r7
 8018338:	db07      	blt.n	801834a <__s2b+0x6a>
 801833a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801833e:	0052      	lsls	r2, r2, #1
 8018340:	3101      	adds	r1, #1
 8018342:	e7d9      	b.n	80182f8 <__s2b+0x18>
 8018344:	340a      	adds	r4, #10
 8018346:	2509      	movs	r5, #9
 8018348:	e7f3      	b.n	8018332 <__s2b+0x52>
 801834a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801834e:	4601      	mov	r1, r0
 8018350:	3b30      	subs	r3, #48	; 0x30
 8018352:	220a      	movs	r2, #10
 8018354:	4630      	mov	r0, r6
 8018356:	f7ff ff88 	bl	801826a <__multadd>
 801835a:	e7eb      	b.n	8018334 <__s2b+0x54>

0801835c <__hi0bits>:
 801835c:	0c02      	lsrs	r2, r0, #16
 801835e:	0412      	lsls	r2, r2, #16
 8018360:	4603      	mov	r3, r0
 8018362:	b9b2      	cbnz	r2, 8018392 <__hi0bits+0x36>
 8018364:	0403      	lsls	r3, r0, #16
 8018366:	2010      	movs	r0, #16
 8018368:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801836c:	bf04      	itt	eq
 801836e:	021b      	lsleq	r3, r3, #8
 8018370:	3008      	addeq	r0, #8
 8018372:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018376:	bf04      	itt	eq
 8018378:	011b      	lsleq	r3, r3, #4
 801837a:	3004      	addeq	r0, #4
 801837c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018380:	bf04      	itt	eq
 8018382:	009b      	lsleq	r3, r3, #2
 8018384:	3002      	addeq	r0, #2
 8018386:	2b00      	cmp	r3, #0
 8018388:	db06      	blt.n	8018398 <__hi0bits+0x3c>
 801838a:	005b      	lsls	r3, r3, #1
 801838c:	d503      	bpl.n	8018396 <__hi0bits+0x3a>
 801838e:	3001      	adds	r0, #1
 8018390:	4770      	bx	lr
 8018392:	2000      	movs	r0, #0
 8018394:	e7e8      	b.n	8018368 <__hi0bits+0xc>
 8018396:	2020      	movs	r0, #32
 8018398:	4770      	bx	lr

0801839a <__lo0bits>:
 801839a:	6803      	ldr	r3, [r0, #0]
 801839c:	f013 0207 	ands.w	r2, r3, #7
 80183a0:	4601      	mov	r1, r0
 80183a2:	d00b      	beq.n	80183bc <__lo0bits+0x22>
 80183a4:	07da      	lsls	r2, r3, #31
 80183a6:	d423      	bmi.n	80183f0 <__lo0bits+0x56>
 80183a8:	0798      	lsls	r0, r3, #30
 80183aa:	bf49      	itett	mi
 80183ac:	085b      	lsrmi	r3, r3, #1
 80183ae:	089b      	lsrpl	r3, r3, #2
 80183b0:	2001      	movmi	r0, #1
 80183b2:	600b      	strmi	r3, [r1, #0]
 80183b4:	bf5c      	itt	pl
 80183b6:	600b      	strpl	r3, [r1, #0]
 80183b8:	2002      	movpl	r0, #2
 80183ba:	4770      	bx	lr
 80183bc:	b298      	uxth	r0, r3
 80183be:	b9a8      	cbnz	r0, 80183ec <__lo0bits+0x52>
 80183c0:	0c1b      	lsrs	r3, r3, #16
 80183c2:	2010      	movs	r0, #16
 80183c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80183c8:	bf04      	itt	eq
 80183ca:	0a1b      	lsreq	r3, r3, #8
 80183cc:	3008      	addeq	r0, #8
 80183ce:	071a      	lsls	r2, r3, #28
 80183d0:	bf04      	itt	eq
 80183d2:	091b      	lsreq	r3, r3, #4
 80183d4:	3004      	addeq	r0, #4
 80183d6:	079a      	lsls	r2, r3, #30
 80183d8:	bf04      	itt	eq
 80183da:	089b      	lsreq	r3, r3, #2
 80183dc:	3002      	addeq	r0, #2
 80183de:	07da      	lsls	r2, r3, #31
 80183e0:	d402      	bmi.n	80183e8 <__lo0bits+0x4e>
 80183e2:	085b      	lsrs	r3, r3, #1
 80183e4:	d006      	beq.n	80183f4 <__lo0bits+0x5a>
 80183e6:	3001      	adds	r0, #1
 80183e8:	600b      	str	r3, [r1, #0]
 80183ea:	4770      	bx	lr
 80183ec:	4610      	mov	r0, r2
 80183ee:	e7e9      	b.n	80183c4 <__lo0bits+0x2a>
 80183f0:	2000      	movs	r0, #0
 80183f2:	4770      	bx	lr
 80183f4:	2020      	movs	r0, #32
 80183f6:	4770      	bx	lr

080183f8 <__i2b>:
 80183f8:	b510      	push	{r4, lr}
 80183fa:	460c      	mov	r4, r1
 80183fc:	2101      	movs	r1, #1
 80183fe:	f7ff fee9 	bl	80181d4 <_Balloc>
 8018402:	2201      	movs	r2, #1
 8018404:	6144      	str	r4, [r0, #20]
 8018406:	6102      	str	r2, [r0, #16]
 8018408:	bd10      	pop	{r4, pc}

0801840a <__multiply>:
 801840a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801840e:	4614      	mov	r4, r2
 8018410:	690a      	ldr	r2, [r1, #16]
 8018412:	6923      	ldr	r3, [r4, #16]
 8018414:	429a      	cmp	r2, r3
 8018416:	bfb8      	it	lt
 8018418:	460b      	movlt	r3, r1
 801841a:	4688      	mov	r8, r1
 801841c:	bfbc      	itt	lt
 801841e:	46a0      	movlt	r8, r4
 8018420:	461c      	movlt	r4, r3
 8018422:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018426:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801842a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801842e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018432:	eb07 0609 	add.w	r6, r7, r9
 8018436:	42b3      	cmp	r3, r6
 8018438:	bfb8      	it	lt
 801843a:	3101      	addlt	r1, #1
 801843c:	f7ff feca 	bl	80181d4 <_Balloc>
 8018440:	f100 0514 	add.w	r5, r0, #20
 8018444:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018448:	462b      	mov	r3, r5
 801844a:	2200      	movs	r2, #0
 801844c:	4573      	cmp	r3, lr
 801844e:	d316      	bcc.n	801847e <__multiply+0x74>
 8018450:	f104 0214 	add.w	r2, r4, #20
 8018454:	f108 0114 	add.w	r1, r8, #20
 8018458:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801845c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018460:	9300      	str	r3, [sp, #0]
 8018462:	9b00      	ldr	r3, [sp, #0]
 8018464:	9201      	str	r2, [sp, #4]
 8018466:	4293      	cmp	r3, r2
 8018468:	d80c      	bhi.n	8018484 <__multiply+0x7a>
 801846a:	2e00      	cmp	r6, #0
 801846c:	dd03      	ble.n	8018476 <__multiply+0x6c>
 801846e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018472:	2b00      	cmp	r3, #0
 8018474:	d05d      	beq.n	8018532 <__multiply+0x128>
 8018476:	6106      	str	r6, [r0, #16]
 8018478:	b003      	add	sp, #12
 801847a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801847e:	f843 2b04 	str.w	r2, [r3], #4
 8018482:	e7e3      	b.n	801844c <__multiply+0x42>
 8018484:	f8b2 b000 	ldrh.w	fp, [r2]
 8018488:	f1bb 0f00 	cmp.w	fp, #0
 801848c:	d023      	beq.n	80184d6 <__multiply+0xcc>
 801848e:	4689      	mov	r9, r1
 8018490:	46ac      	mov	ip, r5
 8018492:	f04f 0800 	mov.w	r8, #0
 8018496:	f859 4b04 	ldr.w	r4, [r9], #4
 801849a:	f8dc a000 	ldr.w	sl, [ip]
 801849e:	b2a3      	uxth	r3, r4
 80184a0:	fa1f fa8a 	uxth.w	sl, sl
 80184a4:	fb0b a303 	mla	r3, fp, r3, sl
 80184a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80184ac:	f8dc 4000 	ldr.w	r4, [ip]
 80184b0:	4443      	add	r3, r8
 80184b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80184b6:	fb0b 840a 	mla	r4, fp, sl, r8
 80184ba:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80184be:	46e2      	mov	sl, ip
 80184c0:	b29b      	uxth	r3, r3
 80184c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80184c6:	454f      	cmp	r7, r9
 80184c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80184cc:	f84a 3b04 	str.w	r3, [sl], #4
 80184d0:	d82b      	bhi.n	801852a <__multiply+0x120>
 80184d2:	f8cc 8004 	str.w	r8, [ip, #4]
 80184d6:	9b01      	ldr	r3, [sp, #4]
 80184d8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80184dc:	3204      	adds	r2, #4
 80184de:	f1ba 0f00 	cmp.w	sl, #0
 80184e2:	d020      	beq.n	8018526 <__multiply+0x11c>
 80184e4:	682b      	ldr	r3, [r5, #0]
 80184e6:	4689      	mov	r9, r1
 80184e8:	46a8      	mov	r8, r5
 80184ea:	f04f 0b00 	mov.w	fp, #0
 80184ee:	f8b9 c000 	ldrh.w	ip, [r9]
 80184f2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80184f6:	fb0a 440c 	mla	r4, sl, ip, r4
 80184fa:	445c      	add	r4, fp
 80184fc:	46c4      	mov	ip, r8
 80184fe:	b29b      	uxth	r3, r3
 8018500:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018504:	f84c 3b04 	str.w	r3, [ip], #4
 8018508:	f859 3b04 	ldr.w	r3, [r9], #4
 801850c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018510:	0c1b      	lsrs	r3, r3, #16
 8018512:	fb0a b303 	mla	r3, sl, r3, fp
 8018516:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801851a:	454f      	cmp	r7, r9
 801851c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018520:	d805      	bhi.n	801852e <__multiply+0x124>
 8018522:	f8c8 3004 	str.w	r3, [r8, #4]
 8018526:	3504      	adds	r5, #4
 8018528:	e79b      	b.n	8018462 <__multiply+0x58>
 801852a:	46d4      	mov	ip, sl
 801852c:	e7b3      	b.n	8018496 <__multiply+0x8c>
 801852e:	46e0      	mov	r8, ip
 8018530:	e7dd      	b.n	80184ee <__multiply+0xe4>
 8018532:	3e01      	subs	r6, #1
 8018534:	e799      	b.n	801846a <__multiply+0x60>
	...

08018538 <__pow5mult>:
 8018538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801853c:	4615      	mov	r5, r2
 801853e:	f012 0203 	ands.w	r2, r2, #3
 8018542:	4606      	mov	r6, r0
 8018544:	460f      	mov	r7, r1
 8018546:	d007      	beq.n	8018558 <__pow5mult+0x20>
 8018548:	3a01      	subs	r2, #1
 801854a:	4c21      	ldr	r4, [pc, #132]	; (80185d0 <__pow5mult+0x98>)
 801854c:	2300      	movs	r3, #0
 801854e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018552:	f7ff fe8a 	bl	801826a <__multadd>
 8018556:	4607      	mov	r7, r0
 8018558:	10ad      	asrs	r5, r5, #2
 801855a:	d035      	beq.n	80185c8 <__pow5mult+0x90>
 801855c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801855e:	b93c      	cbnz	r4, 8018570 <__pow5mult+0x38>
 8018560:	2010      	movs	r0, #16
 8018562:	f7ff fe1d 	bl	80181a0 <malloc>
 8018566:	6270      	str	r0, [r6, #36]	; 0x24
 8018568:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801856c:	6004      	str	r4, [r0, #0]
 801856e:	60c4      	str	r4, [r0, #12]
 8018570:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018574:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018578:	b94c      	cbnz	r4, 801858e <__pow5mult+0x56>
 801857a:	f240 2171 	movw	r1, #625	; 0x271
 801857e:	4630      	mov	r0, r6
 8018580:	f7ff ff3a 	bl	80183f8 <__i2b>
 8018584:	2300      	movs	r3, #0
 8018586:	f8c8 0008 	str.w	r0, [r8, #8]
 801858a:	4604      	mov	r4, r0
 801858c:	6003      	str	r3, [r0, #0]
 801858e:	f04f 0800 	mov.w	r8, #0
 8018592:	07eb      	lsls	r3, r5, #31
 8018594:	d50a      	bpl.n	80185ac <__pow5mult+0x74>
 8018596:	4639      	mov	r1, r7
 8018598:	4622      	mov	r2, r4
 801859a:	4630      	mov	r0, r6
 801859c:	f7ff ff35 	bl	801840a <__multiply>
 80185a0:	4639      	mov	r1, r7
 80185a2:	4681      	mov	r9, r0
 80185a4:	4630      	mov	r0, r6
 80185a6:	f7ff fe49 	bl	801823c <_Bfree>
 80185aa:	464f      	mov	r7, r9
 80185ac:	106d      	asrs	r5, r5, #1
 80185ae:	d00b      	beq.n	80185c8 <__pow5mult+0x90>
 80185b0:	6820      	ldr	r0, [r4, #0]
 80185b2:	b938      	cbnz	r0, 80185c4 <__pow5mult+0x8c>
 80185b4:	4622      	mov	r2, r4
 80185b6:	4621      	mov	r1, r4
 80185b8:	4630      	mov	r0, r6
 80185ba:	f7ff ff26 	bl	801840a <__multiply>
 80185be:	6020      	str	r0, [r4, #0]
 80185c0:	f8c0 8000 	str.w	r8, [r0]
 80185c4:	4604      	mov	r4, r0
 80185c6:	e7e4      	b.n	8018592 <__pow5mult+0x5a>
 80185c8:	4638      	mov	r0, r7
 80185ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80185ce:	bf00      	nop
 80185d0:	0801a128 	.word	0x0801a128

080185d4 <__lshift>:
 80185d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185d8:	460c      	mov	r4, r1
 80185da:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80185de:	6923      	ldr	r3, [r4, #16]
 80185e0:	6849      	ldr	r1, [r1, #4]
 80185e2:	eb0a 0903 	add.w	r9, sl, r3
 80185e6:	68a3      	ldr	r3, [r4, #8]
 80185e8:	4607      	mov	r7, r0
 80185ea:	4616      	mov	r6, r2
 80185ec:	f109 0501 	add.w	r5, r9, #1
 80185f0:	42ab      	cmp	r3, r5
 80185f2:	db32      	blt.n	801865a <__lshift+0x86>
 80185f4:	4638      	mov	r0, r7
 80185f6:	f7ff fded 	bl	80181d4 <_Balloc>
 80185fa:	2300      	movs	r3, #0
 80185fc:	4680      	mov	r8, r0
 80185fe:	f100 0114 	add.w	r1, r0, #20
 8018602:	461a      	mov	r2, r3
 8018604:	4553      	cmp	r3, sl
 8018606:	db2b      	blt.n	8018660 <__lshift+0x8c>
 8018608:	6920      	ldr	r0, [r4, #16]
 801860a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801860e:	f104 0314 	add.w	r3, r4, #20
 8018612:	f016 021f 	ands.w	r2, r6, #31
 8018616:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801861a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801861e:	d025      	beq.n	801866c <__lshift+0x98>
 8018620:	f1c2 0e20 	rsb	lr, r2, #32
 8018624:	2000      	movs	r0, #0
 8018626:	681e      	ldr	r6, [r3, #0]
 8018628:	468a      	mov	sl, r1
 801862a:	4096      	lsls	r6, r2
 801862c:	4330      	orrs	r0, r6
 801862e:	f84a 0b04 	str.w	r0, [sl], #4
 8018632:	f853 0b04 	ldr.w	r0, [r3], #4
 8018636:	459c      	cmp	ip, r3
 8018638:	fa20 f00e 	lsr.w	r0, r0, lr
 801863c:	d814      	bhi.n	8018668 <__lshift+0x94>
 801863e:	6048      	str	r0, [r1, #4]
 8018640:	b108      	cbz	r0, 8018646 <__lshift+0x72>
 8018642:	f109 0502 	add.w	r5, r9, #2
 8018646:	3d01      	subs	r5, #1
 8018648:	4638      	mov	r0, r7
 801864a:	f8c8 5010 	str.w	r5, [r8, #16]
 801864e:	4621      	mov	r1, r4
 8018650:	f7ff fdf4 	bl	801823c <_Bfree>
 8018654:	4640      	mov	r0, r8
 8018656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801865a:	3101      	adds	r1, #1
 801865c:	005b      	lsls	r3, r3, #1
 801865e:	e7c7      	b.n	80185f0 <__lshift+0x1c>
 8018660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018664:	3301      	adds	r3, #1
 8018666:	e7cd      	b.n	8018604 <__lshift+0x30>
 8018668:	4651      	mov	r1, sl
 801866a:	e7dc      	b.n	8018626 <__lshift+0x52>
 801866c:	3904      	subs	r1, #4
 801866e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018672:	f841 2f04 	str.w	r2, [r1, #4]!
 8018676:	459c      	cmp	ip, r3
 8018678:	d8f9      	bhi.n	801866e <__lshift+0x9a>
 801867a:	e7e4      	b.n	8018646 <__lshift+0x72>

0801867c <__mcmp>:
 801867c:	6903      	ldr	r3, [r0, #16]
 801867e:	690a      	ldr	r2, [r1, #16]
 8018680:	1a9b      	subs	r3, r3, r2
 8018682:	b530      	push	{r4, r5, lr}
 8018684:	d10c      	bne.n	80186a0 <__mcmp+0x24>
 8018686:	0092      	lsls	r2, r2, #2
 8018688:	3014      	adds	r0, #20
 801868a:	3114      	adds	r1, #20
 801868c:	1884      	adds	r4, r0, r2
 801868e:	4411      	add	r1, r2
 8018690:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018694:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018698:	4295      	cmp	r5, r2
 801869a:	d003      	beq.n	80186a4 <__mcmp+0x28>
 801869c:	d305      	bcc.n	80186aa <__mcmp+0x2e>
 801869e:	2301      	movs	r3, #1
 80186a0:	4618      	mov	r0, r3
 80186a2:	bd30      	pop	{r4, r5, pc}
 80186a4:	42a0      	cmp	r0, r4
 80186a6:	d3f3      	bcc.n	8018690 <__mcmp+0x14>
 80186a8:	e7fa      	b.n	80186a0 <__mcmp+0x24>
 80186aa:	f04f 33ff 	mov.w	r3, #4294967295
 80186ae:	e7f7      	b.n	80186a0 <__mcmp+0x24>

080186b0 <__mdiff>:
 80186b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186b4:	460d      	mov	r5, r1
 80186b6:	4607      	mov	r7, r0
 80186b8:	4611      	mov	r1, r2
 80186ba:	4628      	mov	r0, r5
 80186bc:	4614      	mov	r4, r2
 80186be:	f7ff ffdd 	bl	801867c <__mcmp>
 80186c2:	1e06      	subs	r6, r0, #0
 80186c4:	d108      	bne.n	80186d8 <__mdiff+0x28>
 80186c6:	4631      	mov	r1, r6
 80186c8:	4638      	mov	r0, r7
 80186ca:	f7ff fd83 	bl	80181d4 <_Balloc>
 80186ce:	2301      	movs	r3, #1
 80186d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80186d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186d8:	bfa4      	itt	ge
 80186da:	4623      	movge	r3, r4
 80186dc:	462c      	movge	r4, r5
 80186de:	4638      	mov	r0, r7
 80186e0:	6861      	ldr	r1, [r4, #4]
 80186e2:	bfa6      	itte	ge
 80186e4:	461d      	movge	r5, r3
 80186e6:	2600      	movge	r6, #0
 80186e8:	2601      	movlt	r6, #1
 80186ea:	f7ff fd73 	bl	80181d4 <_Balloc>
 80186ee:	692b      	ldr	r3, [r5, #16]
 80186f0:	60c6      	str	r6, [r0, #12]
 80186f2:	6926      	ldr	r6, [r4, #16]
 80186f4:	f105 0914 	add.w	r9, r5, #20
 80186f8:	f104 0214 	add.w	r2, r4, #20
 80186fc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018700:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018704:	f100 0514 	add.w	r5, r0, #20
 8018708:	f04f 0e00 	mov.w	lr, #0
 801870c:	f852 ab04 	ldr.w	sl, [r2], #4
 8018710:	f859 4b04 	ldr.w	r4, [r9], #4
 8018714:	fa1e f18a 	uxtah	r1, lr, sl
 8018718:	b2a3      	uxth	r3, r4
 801871a:	1ac9      	subs	r1, r1, r3
 801871c:	0c23      	lsrs	r3, r4, #16
 801871e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018722:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018726:	b289      	uxth	r1, r1
 8018728:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801872c:	45c8      	cmp	r8, r9
 801872e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018732:	4694      	mov	ip, r2
 8018734:	f845 3b04 	str.w	r3, [r5], #4
 8018738:	d8e8      	bhi.n	801870c <__mdiff+0x5c>
 801873a:	45bc      	cmp	ip, r7
 801873c:	d304      	bcc.n	8018748 <__mdiff+0x98>
 801873e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018742:	b183      	cbz	r3, 8018766 <__mdiff+0xb6>
 8018744:	6106      	str	r6, [r0, #16]
 8018746:	e7c5      	b.n	80186d4 <__mdiff+0x24>
 8018748:	f85c 1b04 	ldr.w	r1, [ip], #4
 801874c:	fa1e f381 	uxtah	r3, lr, r1
 8018750:	141a      	asrs	r2, r3, #16
 8018752:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018756:	b29b      	uxth	r3, r3
 8018758:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801875c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018760:	f845 3b04 	str.w	r3, [r5], #4
 8018764:	e7e9      	b.n	801873a <__mdiff+0x8a>
 8018766:	3e01      	subs	r6, #1
 8018768:	e7e9      	b.n	801873e <__mdiff+0x8e>
	...

0801876c <__ulp>:
 801876c:	4b12      	ldr	r3, [pc, #72]	; (80187b8 <__ulp+0x4c>)
 801876e:	ee10 2a90 	vmov	r2, s1
 8018772:	401a      	ands	r2, r3
 8018774:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018778:	2b00      	cmp	r3, #0
 801877a:	dd04      	ble.n	8018786 <__ulp+0x1a>
 801877c:	2000      	movs	r0, #0
 801877e:	4619      	mov	r1, r3
 8018780:	ec41 0b10 	vmov	d0, r0, r1
 8018784:	4770      	bx	lr
 8018786:	425b      	negs	r3, r3
 8018788:	151b      	asrs	r3, r3, #20
 801878a:	2b13      	cmp	r3, #19
 801878c:	f04f 0000 	mov.w	r0, #0
 8018790:	f04f 0100 	mov.w	r1, #0
 8018794:	dc04      	bgt.n	80187a0 <__ulp+0x34>
 8018796:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801879a:	fa42 f103 	asr.w	r1, r2, r3
 801879e:	e7ef      	b.n	8018780 <__ulp+0x14>
 80187a0:	3b14      	subs	r3, #20
 80187a2:	2b1e      	cmp	r3, #30
 80187a4:	f04f 0201 	mov.w	r2, #1
 80187a8:	bfda      	itte	le
 80187aa:	f1c3 031f 	rsble	r3, r3, #31
 80187ae:	fa02 f303 	lslle.w	r3, r2, r3
 80187b2:	4613      	movgt	r3, r2
 80187b4:	4618      	mov	r0, r3
 80187b6:	e7e3      	b.n	8018780 <__ulp+0x14>
 80187b8:	7ff00000 	.word	0x7ff00000

080187bc <__b2d>:
 80187bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187be:	6905      	ldr	r5, [r0, #16]
 80187c0:	f100 0714 	add.w	r7, r0, #20
 80187c4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80187c8:	1f2e      	subs	r6, r5, #4
 80187ca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80187ce:	4620      	mov	r0, r4
 80187d0:	f7ff fdc4 	bl	801835c <__hi0bits>
 80187d4:	f1c0 0320 	rsb	r3, r0, #32
 80187d8:	280a      	cmp	r0, #10
 80187da:	600b      	str	r3, [r1, #0]
 80187dc:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018854 <__b2d+0x98>
 80187e0:	dc14      	bgt.n	801880c <__b2d+0x50>
 80187e2:	f1c0 0e0b 	rsb	lr, r0, #11
 80187e6:	fa24 f10e 	lsr.w	r1, r4, lr
 80187ea:	42b7      	cmp	r7, r6
 80187ec:	ea41 030c 	orr.w	r3, r1, ip
 80187f0:	bf34      	ite	cc
 80187f2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80187f6:	2100      	movcs	r1, #0
 80187f8:	3015      	adds	r0, #21
 80187fa:	fa04 f000 	lsl.w	r0, r4, r0
 80187fe:	fa21 f10e 	lsr.w	r1, r1, lr
 8018802:	ea40 0201 	orr.w	r2, r0, r1
 8018806:	ec43 2b10 	vmov	d0, r2, r3
 801880a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801880c:	42b7      	cmp	r7, r6
 801880e:	bf3a      	itte	cc
 8018810:	f1a5 0608 	subcc.w	r6, r5, #8
 8018814:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018818:	2100      	movcs	r1, #0
 801881a:	380b      	subs	r0, #11
 801881c:	d015      	beq.n	801884a <__b2d+0x8e>
 801881e:	4084      	lsls	r4, r0
 8018820:	f1c0 0520 	rsb	r5, r0, #32
 8018824:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018828:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801882c:	42be      	cmp	r6, r7
 801882e:	fa21 fc05 	lsr.w	ip, r1, r5
 8018832:	ea44 030c 	orr.w	r3, r4, ip
 8018836:	bf8c      	ite	hi
 8018838:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801883c:	2400      	movls	r4, #0
 801883e:	fa01 f000 	lsl.w	r0, r1, r0
 8018842:	40ec      	lsrs	r4, r5
 8018844:	ea40 0204 	orr.w	r2, r0, r4
 8018848:	e7dd      	b.n	8018806 <__b2d+0x4a>
 801884a:	ea44 030c 	orr.w	r3, r4, ip
 801884e:	460a      	mov	r2, r1
 8018850:	e7d9      	b.n	8018806 <__b2d+0x4a>
 8018852:	bf00      	nop
 8018854:	3ff00000 	.word	0x3ff00000

08018858 <__d2b>:
 8018858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801885c:	460e      	mov	r6, r1
 801885e:	2101      	movs	r1, #1
 8018860:	ec59 8b10 	vmov	r8, r9, d0
 8018864:	4615      	mov	r5, r2
 8018866:	f7ff fcb5 	bl	80181d4 <_Balloc>
 801886a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801886e:	4607      	mov	r7, r0
 8018870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018874:	bb34      	cbnz	r4, 80188c4 <__d2b+0x6c>
 8018876:	9301      	str	r3, [sp, #4]
 8018878:	f1b8 0300 	subs.w	r3, r8, #0
 801887c:	d027      	beq.n	80188ce <__d2b+0x76>
 801887e:	a802      	add	r0, sp, #8
 8018880:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018884:	f7ff fd89 	bl	801839a <__lo0bits>
 8018888:	9900      	ldr	r1, [sp, #0]
 801888a:	b1f0      	cbz	r0, 80188ca <__d2b+0x72>
 801888c:	9a01      	ldr	r2, [sp, #4]
 801888e:	f1c0 0320 	rsb	r3, r0, #32
 8018892:	fa02 f303 	lsl.w	r3, r2, r3
 8018896:	430b      	orrs	r3, r1
 8018898:	40c2      	lsrs	r2, r0
 801889a:	617b      	str	r3, [r7, #20]
 801889c:	9201      	str	r2, [sp, #4]
 801889e:	9b01      	ldr	r3, [sp, #4]
 80188a0:	61bb      	str	r3, [r7, #24]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	bf14      	ite	ne
 80188a6:	2102      	movne	r1, #2
 80188a8:	2101      	moveq	r1, #1
 80188aa:	6139      	str	r1, [r7, #16]
 80188ac:	b1c4      	cbz	r4, 80188e0 <__d2b+0x88>
 80188ae:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80188b2:	4404      	add	r4, r0
 80188b4:	6034      	str	r4, [r6, #0]
 80188b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80188ba:	6028      	str	r0, [r5, #0]
 80188bc:	4638      	mov	r0, r7
 80188be:	b003      	add	sp, #12
 80188c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80188c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80188c8:	e7d5      	b.n	8018876 <__d2b+0x1e>
 80188ca:	6179      	str	r1, [r7, #20]
 80188cc:	e7e7      	b.n	801889e <__d2b+0x46>
 80188ce:	a801      	add	r0, sp, #4
 80188d0:	f7ff fd63 	bl	801839a <__lo0bits>
 80188d4:	9b01      	ldr	r3, [sp, #4]
 80188d6:	617b      	str	r3, [r7, #20]
 80188d8:	2101      	movs	r1, #1
 80188da:	6139      	str	r1, [r7, #16]
 80188dc:	3020      	adds	r0, #32
 80188de:	e7e5      	b.n	80188ac <__d2b+0x54>
 80188e0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80188e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80188e8:	6030      	str	r0, [r6, #0]
 80188ea:	6918      	ldr	r0, [r3, #16]
 80188ec:	f7ff fd36 	bl	801835c <__hi0bits>
 80188f0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80188f4:	e7e1      	b.n	80188ba <__d2b+0x62>

080188f6 <__ratio>:
 80188f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188fa:	4688      	mov	r8, r1
 80188fc:	4669      	mov	r1, sp
 80188fe:	4681      	mov	r9, r0
 8018900:	f7ff ff5c 	bl	80187bc <__b2d>
 8018904:	a901      	add	r1, sp, #4
 8018906:	4640      	mov	r0, r8
 8018908:	ec57 6b10 	vmov	r6, r7, d0
 801890c:	f7ff ff56 	bl	80187bc <__b2d>
 8018910:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018914:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018918:	eba3 0c02 	sub.w	ip, r3, r2
 801891c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018920:	1a9b      	subs	r3, r3, r2
 8018922:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018926:	ec5b ab10 	vmov	sl, fp, d0
 801892a:	2b00      	cmp	r3, #0
 801892c:	bfce      	itee	gt
 801892e:	463a      	movgt	r2, r7
 8018930:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018934:	465a      	movle	r2, fp
 8018936:	4659      	mov	r1, fp
 8018938:	463d      	mov	r5, r7
 801893a:	bfd4      	ite	le
 801893c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018940:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018944:	4630      	mov	r0, r6
 8018946:	ee10 2a10 	vmov	r2, s0
 801894a:	460b      	mov	r3, r1
 801894c:	4629      	mov	r1, r5
 801894e:	f7e7 ff95 	bl	800087c <__aeabi_ddiv>
 8018952:	ec41 0b10 	vmov	d0, r0, r1
 8018956:	b003      	add	sp, #12
 8018958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801895c <__copybits>:
 801895c:	3901      	subs	r1, #1
 801895e:	b510      	push	{r4, lr}
 8018960:	1149      	asrs	r1, r1, #5
 8018962:	6914      	ldr	r4, [r2, #16]
 8018964:	3101      	adds	r1, #1
 8018966:	f102 0314 	add.w	r3, r2, #20
 801896a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801896e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018972:	42a3      	cmp	r3, r4
 8018974:	4602      	mov	r2, r0
 8018976:	d303      	bcc.n	8018980 <__copybits+0x24>
 8018978:	2300      	movs	r3, #0
 801897a:	428a      	cmp	r2, r1
 801897c:	d305      	bcc.n	801898a <__copybits+0x2e>
 801897e:	bd10      	pop	{r4, pc}
 8018980:	f853 2b04 	ldr.w	r2, [r3], #4
 8018984:	f840 2b04 	str.w	r2, [r0], #4
 8018988:	e7f3      	b.n	8018972 <__copybits+0x16>
 801898a:	f842 3b04 	str.w	r3, [r2], #4
 801898e:	e7f4      	b.n	801897a <__copybits+0x1e>

08018990 <__any_on>:
 8018990:	f100 0214 	add.w	r2, r0, #20
 8018994:	6900      	ldr	r0, [r0, #16]
 8018996:	114b      	asrs	r3, r1, #5
 8018998:	4298      	cmp	r0, r3
 801899a:	b510      	push	{r4, lr}
 801899c:	db11      	blt.n	80189c2 <__any_on+0x32>
 801899e:	dd0a      	ble.n	80189b6 <__any_on+0x26>
 80189a0:	f011 011f 	ands.w	r1, r1, #31
 80189a4:	d007      	beq.n	80189b6 <__any_on+0x26>
 80189a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80189aa:	fa24 f001 	lsr.w	r0, r4, r1
 80189ae:	fa00 f101 	lsl.w	r1, r0, r1
 80189b2:	428c      	cmp	r4, r1
 80189b4:	d10b      	bne.n	80189ce <__any_on+0x3e>
 80189b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80189ba:	4293      	cmp	r3, r2
 80189bc:	d803      	bhi.n	80189c6 <__any_on+0x36>
 80189be:	2000      	movs	r0, #0
 80189c0:	bd10      	pop	{r4, pc}
 80189c2:	4603      	mov	r3, r0
 80189c4:	e7f7      	b.n	80189b6 <__any_on+0x26>
 80189c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80189ca:	2900      	cmp	r1, #0
 80189cc:	d0f5      	beq.n	80189ba <__any_on+0x2a>
 80189ce:	2001      	movs	r0, #1
 80189d0:	e7f6      	b.n	80189c0 <__any_on+0x30>

080189d2 <_calloc_r>:
 80189d2:	b538      	push	{r3, r4, r5, lr}
 80189d4:	fb02 f401 	mul.w	r4, r2, r1
 80189d8:	4621      	mov	r1, r4
 80189da:	f000 f857 	bl	8018a8c <_malloc_r>
 80189de:	4605      	mov	r5, r0
 80189e0:	b118      	cbz	r0, 80189ea <_calloc_r+0x18>
 80189e2:	4622      	mov	r2, r4
 80189e4:	2100      	movs	r1, #0
 80189e6:	f7fc fcaa 	bl	801533e <memset>
 80189ea:	4628      	mov	r0, r5
 80189ec:	bd38      	pop	{r3, r4, r5, pc}
	...

080189f0 <_free_r>:
 80189f0:	b538      	push	{r3, r4, r5, lr}
 80189f2:	4605      	mov	r5, r0
 80189f4:	2900      	cmp	r1, #0
 80189f6:	d045      	beq.n	8018a84 <_free_r+0x94>
 80189f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80189fc:	1f0c      	subs	r4, r1, #4
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	bfb8      	it	lt
 8018a02:	18e4      	addlt	r4, r4, r3
 8018a04:	f000 fe30 	bl	8019668 <__malloc_lock>
 8018a08:	4a1f      	ldr	r2, [pc, #124]	; (8018a88 <_free_r+0x98>)
 8018a0a:	6813      	ldr	r3, [r2, #0]
 8018a0c:	4610      	mov	r0, r2
 8018a0e:	b933      	cbnz	r3, 8018a1e <_free_r+0x2e>
 8018a10:	6063      	str	r3, [r4, #4]
 8018a12:	6014      	str	r4, [r2, #0]
 8018a14:	4628      	mov	r0, r5
 8018a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018a1a:	f000 be26 	b.w	801966a <__malloc_unlock>
 8018a1e:	42a3      	cmp	r3, r4
 8018a20:	d90c      	bls.n	8018a3c <_free_r+0x4c>
 8018a22:	6821      	ldr	r1, [r4, #0]
 8018a24:	1862      	adds	r2, r4, r1
 8018a26:	4293      	cmp	r3, r2
 8018a28:	bf04      	itt	eq
 8018a2a:	681a      	ldreq	r2, [r3, #0]
 8018a2c:	685b      	ldreq	r3, [r3, #4]
 8018a2e:	6063      	str	r3, [r4, #4]
 8018a30:	bf04      	itt	eq
 8018a32:	1852      	addeq	r2, r2, r1
 8018a34:	6022      	streq	r2, [r4, #0]
 8018a36:	6004      	str	r4, [r0, #0]
 8018a38:	e7ec      	b.n	8018a14 <_free_r+0x24>
 8018a3a:	4613      	mov	r3, r2
 8018a3c:	685a      	ldr	r2, [r3, #4]
 8018a3e:	b10a      	cbz	r2, 8018a44 <_free_r+0x54>
 8018a40:	42a2      	cmp	r2, r4
 8018a42:	d9fa      	bls.n	8018a3a <_free_r+0x4a>
 8018a44:	6819      	ldr	r1, [r3, #0]
 8018a46:	1858      	adds	r0, r3, r1
 8018a48:	42a0      	cmp	r0, r4
 8018a4a:	d10b      	bne.n	8018a64 <_free_r+0x74>
 8018a4c:	6820      	ldr	r0, [r4, #0]
 8018a4e:	4401      	add	r1, r0
 8018a50:	1858      	adds	r0, r3, r1
 8018a52:	4282      	cmp	r2, r0
 8018a54:	6019      	str	r1, [r3, #0]
 8018a56:	d1dd      	bne.n	8018a14 <_free_r+0x24>
 8018a58:	6810      	ldr	r0, [r2, #0]
 8018a5a:	6852      	ldr	r2, [r2, #4]
 8018a5c:	605a      	str	r2, [r3, #4]
 8018a5e:	4401      	add	r1, r0
 8018a60:	6019      	str	r1, [r3, #0]
 8018a62:	e7d7      	b.n	8018a14 <_free_r+0x24>
 8018a64:	d902      	bls.n	8018a6c <_free_r+0x7c>
 8018a66:	230c      	movs	r3, #12
 8018a68:	602b      	str	r3, [r5, #0]
 8018a6a:	e7d3      	b.n	8018a14 <_free_r+0x24>
 8018a6c:	6820      	ldr	r0, [r4, #0]
 8018a6e:	1821      	adds	r1, r4, r0
 8018a70:	428a      	cmp	r2, r1
 8018a72:	bf04      	itt	eq
 8018a74:	6811      	ldreq	r1, [r2, #0]
 8018a76:	6852      	ldreq	r2, [r2, #4]
 8018a78:	6062      	str	r2, [r4, #4]
 8018a7a:	bf04      	itt	eq
 8018a7c:	1809      	addeq	r1, r1, r0
 8018a7e:	6021      	streq	r1, [r4, #0]
 8018a80:	605c      	str	r4, [r3, #4]
 8018a82:	e7c7      	b.n	8018a14 <_free_r+0x24>
 8018a84:	bd38      	pop	{r3, r4, r5, pc}
 8018a86:	bf00      	nop
 8018a88:	20042314 	.word	0x20042314

08018a8c <_malloc_r>:
 8018a8c:	b570      	push	{r4, r5, r6, lr}
 8018a8e:	1ccd      	adds	r5, r1, #3
 8018a90:	f025 0503 	bic.w	r5, r5, #3
 8018a94:	3508      	adds	r5, #8
 8018a96:	2d0c      	cmp	r5, #12
 8018a98:	bf38      	it	cc
 8018a9a:	250c      	movcc	r5, #12
 8018a9c:	2d00      	cmp	r5, #0
 8018a9e:	4606      	mov	r6, r0
 8018aa0:	db01      	blt.n	8018aa6 <_malloc_r+0x1a>
 8018aa2:	42a9      	cmp	r1, r5
 8018aa4:	d903      	bls.n	8018aae <_malloc_r+0x22>
 8018aa6:	230c      	movs	r3, #12
 8018aa8:	6033      	str	r3, [r6, #0]
 8018aaa:	2000      	movs	r0, #0
 8018aac:	bd70      	pop	{r4, r5, r6, pc}
 8018aae:	f000 fddb 	bl	8019668 <__malloc_lock>
 8018ab2:	4a21      	ldr	r2, [pc, #132]	; (8018b38 <_malloc_r+0xac>)
 8018ab4:	6814      	ldr	r4, [r2, #0]
 8018ab6:	4621      	mov	r1, r4
 8018ab8:	b991      	cbnz	r1, 8018ae0 <_malloc_r+0x54>
 8018aba:	4c20      	ldr	r4, [pc, #128]	; (8018b3c <_malloc_r+0xb0>)
 8018abc:	6823      	ldr	r3, [r4, #0]
 8018abe:	b91b      	cbnz	r3, 8018ac8 <_malloc_r+0x3c>
 8018ac0:	4630      	mov	r0, r6
 8018ac2:	f000 fc91 	bl	80193e8 <_sbrk_r>
 8018ac6:	6020      	str	r0, [r4, #0]
 8018ac8:	4629      	mov	r1, r5
 8018aca:	4630      	mov	r0, r6
 8018acc:	f000 fc8c 	bl	80193e8 <_sbrk_r>
 8018ad0:	1c43      	adds	r3, r0, #1
 8018ad2:	d124      	bne.n	8018b1e <_malloc_r+0x92>
 8018ad4:	230c      	movs	r3, #12
 8018ad6:	6033      	str	r3, [r6, #0]
 8018ad8:	4630      	mov	r0, r6
 8018ada:	f000 fdc6 	bl	801966a <__malloc_unlock>
 8018ade:	e7e4      	b.n	8018aaa <_malloc_r+0x1e>
 8018ae0:	680b      	ldr	r3, [r1, #0]
 8018ae2:	1b5b      	subs	r3, r3, r5
 8018ae4:	d418      	bmi.n	8018b18 <_malloc_r+0x8c>
 8018ae6:	2b0b      	cmp	r3, #11
 8018ae8:	d90f      	bls.n	8018b0a <_malloc_r+0x7e>
 8018aea:	600b      	str	r3, [r1, #0]
 8018aec:	50cd      	str	r5, [r1, r3]
 8018aee:	18cc      	adds	r4, r1, r3
 8018af0:	4630      	mov	r0, r6
 8018af2:	f000 fdba 	bl	801966a <__malloc_unlock>
 8018af6:	f104 000b 	add.w	r0, r4, #11
 8018afa:	1d23      	adds	r3, r4, #4
 8018afc:	f020 0007 	bic.w	r0, r0, #7
 8018b00:	1ac3      	subs	r3, r0, r3
 8018b02:	d0d3      	beq.n	8018aac <_malloc_r+0x20>
 8018b04:	425a      	negs	r2, r3
 8018b06:	50e2      	str	r2, [r4, r3]
 8018b08:	e7d0      	b.n	8018aac <_malloc_r+0x20>
 8018b0a:	428c      	cmp	r4, r1
 8018b0c:	684b      	ldr	r3, [r1, #4]
 8018b0e:	bf16      	itet	ne
 8018b10:	6063      	strne	r3, [r4, #4]
 8018b12:	6013      	streq	r3, [r2, #0]
 8018b14:	460c      	movne	r4, r1
 8018b16:	e7eb      	b.n	8018af0 <_malloc_r+0x64>
 8018b18:	460c      	mov	r4, r1
 8018b1a:	6849      	ldr	r1, [r1, #4]
 8018b1c:	e7cc      	b.n	8018ab8 <_malloc_r+0x2c>
 8018b1e:	1cc4      	adds	r4, r0, #3
 8018b20:	f024 0403 	bic.w	r4, r4, #3
 8018b24:	42a0      	cmp	r0, r4
 8018b26:	d005      	beq.n	8018b34 <_malloc_r+0xa8>
 8018b28:	1a21      	subs	r1, r4, r0
 8018b2a:	4630      	mov	r0, r6
 8018b2c:	f000 fc5c 	bl	80193e8 <_sbrk_r>
 8018b30:	3001      	adds	r0, #1
 8018b32:	d0cf      	beq.n	8018ad4 <_malloc_r+0x48>
 8018b34:	6025      	str	r5, [r4, #0]
 8018b36:	e7db      	b.n	8018af0 <_malloc_r+0x64>
 8018b38:	20042314 	.word	0x20042314
 8018b3c:	20042318 	.word	0x20042318

08018b40 <__ssputs_r>:
 8018b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b44:	688e      	ldr	r6, [r1, #8]
 8018b46:	429e      	cmp	r6, r3
 8018b48:	4682      	mov	sl, r0
 8018b4a:	460c      	mov	r4, r1
 8018b4c:	4690      	mov	r8, r2
 8018b4e:	4699      	mov	r9, r3
 8018b50:	d837      	bhi.n	8018bc2 <__ssputs_r+0x82>
 8018b52:	898a      	ldrh	r2, [r1, #12]
 8018b54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018b58:	d031      	beq.n	8018bbe <__ssputs_r+0x7e>
 8018b5a:	6825      	ldr	r5, [r4, #0]
 8018b5c:	6909      	ldr	r1, [r1, #16]
 8018b5e:	1a6f      	subs	r7, r5, r1
 8018b60:	6965      	ldr	r5, [r4, #20]
 8018b62:	2302      	movs	r3, #2
 8018b64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018b68:	fb95 f5f3 	sdiv	r5, r5, r3
 8018b6c:	f109 0301 	add.w	r3, r9, #1
 8018b70:	443b      	add	r3, r7
 8018b72:	429d      	cmp	r5, r3
 8018b74:	bf38      	it	cc
 8018b76:	461d      	movcc	r5, r3
 8018b78:	0553      	lsls	r3, r2, #21
 8018b7a:	d530      	bpl.n	8018bde <__ssputs_r+0x9e>
 8018b7c:	4629      	mov	r1, r5
 8018b7e:	f7ff ff85 	bl	8018a8c <_malloc_r>
 8018b82:	4606      	mov	r6, r0
 8018b84:	b950      	cbnz	r0, 8018b9c <__ssputs_r+0x5c>
 8018b86:	230c      	movs	r3, #12
 8018b88:	f8ca 3000 	str.w	r3, [sl]
 8018b8c:	89a3      	ldrh	r3, [r4, #12]
 8018b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b92:	81a3      	strh	r3, [r4, #12]
 8018b94:	f04f 30ff 	mov.w	r0, #4294967295
 8018b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b9c:	463a      	mov	r2, r7
 8018b9e:	6921      	ldr	r1, [r4, #16]
 8018ba0:	f7fc fbc2 	bl	8015328 <memcpy>
 8018ba4:	89a3      	ldrh	r3, [r4, #12]
 8018ba6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018bae:	81a3      	strh	r3, [r4, #12]
 8018bb0:	6126      	str	r6, [r4, #16]
 8018bb2:	6165      	str	r5, [r4, #20]
 8018bb4:	443e      	add	r6, r7
 8018bb6:	1bed      	subs	r5, r5, r7
 8018bb8:	6026      	str	r6, [r4, #0]
 8018bba:	60a5      	str	r5, [r4, #8]
 8018bbc:	464e      	mov	r6, r9
 8018bbe:	454e      	cmp	r6, r9
 8018bc0:	d900      	bls.n	8018bc4 <__ssputs_r+0x84>
 8018bc2:	464e      	mov	r6, r9
 8018bc4:	4632      	mov	r2, r6
 8018bc6:	4641      	mov	r1, r8
 8018bc8:	6820      	ldr	r0, [r4, #0]
 8018bca:	f000 fd34 	bl	8019636 <memmove>
 8018bce:	68a3      	ldr	r3, [r4, #8]
 8018bd0:	1b9b      	subs	r3, r3, r6
 8018bd2:	60a3      	str	r3, [r4, #8]
 8018bd4:	6823      	ldr	r3, [r4, #0]
 8018bd6:	441e      	add	r6, r3
 8018bd8:	6026      	str	r6, [r4, #0]
 8018bda:	2000      	movs	r0, #0
 8018bdc:	e7dc      	b.n	8018b98 <__ssputs_r+0x58>
 8018bde:	462a      	mov	r2, r5
 8018be0:	f000 fd44 	bl	801966c <_realloc_r>
 8018be4:	4606      	mov	r6, r0
 8018be6:	2800      	cmp	r0, #0
 8018be8:	d1e2      	bne.n	8018bb0 <__ssputs_r+0x70>
 8018bea:	6921      	ldr	r1, [r4, #16]
 8018bec:	4650      	mov	r0, sl
 8018bee:	f7ff feff 	bl	80189f0 <_free_r>
 8018bf2:	e7c8      	b.n	8018b86 <__ssputs_r+0x46>

08018bf4 <_svfiprintf_r>:
 8018bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018bf8:	461d      	mov	r5, r3
 8018bfa:	898b      	ldrh	r3, [r1, #12]
 8018bfc:	061f      	lsls	r7, r3, #24
 8018bfe:	b09d      	sub	sp, #116	; 0x74
 8018c00:	4680      	mov	r8, r0
 8018c02:	460c      	mov	r4, r1
 8018c04:	4616      	mov	r6, r2
 8018c06:	d50f      	bpl.n	8018c28 <_svfiprintf_r+0x34>
 8018c08:	690b      	ldr	r3, [r1, #16]
 8018c0a:	b96b      	cbnz	r3, 8018c28 <_svfiprintf_r+0x34>
 8018c0c:	2140      	movs	r1, #64	; 0x40
 8018c0e:	f7ff ff3d 	bl	8018a8c <_malloc_r>
 8018c12:	6020      	str	r0, [r4, #0]
 8018c14:	6120      	str	r0, [r4, #16]
 8018c16:	b928      	cbnz	r0, 8018c24 <_svfiprintf_r+0x30>
 8018c18:	230c      	movs	r3, #12
 8018c1a:	f8c8 3000 	str.w	r3, [r8]
 8018c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8018c22:	e0c8      	b.n	8018db6 <_svfiprintf_r+0x1c2>
 8018c24:	2340      	movs	r3, #64	; 0x40
 8018c26:	6163      	str	r3, [r4, #20]
 8018c28:	2300      	movs	r3, #0
 8018c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8018c2c:	2320      	movs	r3, #32
 8018c2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018c32:	2330      	movs	r3, #48	; 0x30
 8018c34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018c38:	9503      	str	r5, [sp, #12]
 8018c3a:	f04f 0b01 	mov.w	fp, #1
 8018c3e:	4637      	mov	r7, r6
 8018c40:	463d      	mov	r5, r7
 8018c42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018c46:	b10b      	cbz	r3, 8018c4c <_svfiprintf_r+0x58>
 8018c48:	2b25      	cmp	r3, #37	; 0x25
 8018c4a:	d13e      	bne.n	8018cca <_svfiprintf_r+0xd6>
 8018c4c:	ebb7 0a06 	subs.w	sl, r7, r6
 8018c50:	d00b      	beq.n	8018c6a <_svfiprintf_r+0x76>
 8018c52:	4653      	mov	r3, sl
 8018c54:	4632      	mov	r2, r6
 8018c56:	4621      	mov	r1, r4
 8018c58:	4640      	mov	r0, r8
 8018c5a:	f7ff ff71 	bl	8018b40 <__ssputs_r>
 8018c5e:	3001      	adds	r0, #1
 8018c60:	f000 80a4 	beq.w	8018dac <_svfiprintf_r+0x1b8>
 8018c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c66:	4453      	add	r3, sl
 8018c68:	9309      	str	r3, [sp, #36]	; 0x24
 8018c6a:	783b      	ldrb	r3, [r7, #0]
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	f000 809d 	beq.w	8018dac <_svfiprintf_r+0x1b8>
 8018c72:	2300      	movs	r3, #0
 8018c74:	f04f 32ff 	mov.w	r2, #4294967295
 8018c78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018c7c:	9304      	str	r3, [sp, #16]
 8018c7e:	9307      	str	r3, [sp, #28]
 8018c80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018c84:	931a      	str	r3, [sp, #104]	; 0x68
 8018c86:	462f      	mov	r7, r5
 8018c88:	2205      	movs	r2, #5
 8018c8a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018c8e:	4850      	ldr	r0, [pc, #320]	; (8018dd0 <_svfiprintf_r+0x1dc>)
 8018c90:	f7e7 fabe 	bl	8000210 <memchr>
 8018c94:	9b04      	ldr	r3, [sp, #16]
 8018c96:	b9d0      	cbnz	r0, 8018cce <_svfiprintf_r+0xda>
 8018c98:	06d9      	lsls	r1, r3, #27
 8018c9a:	bf44      	itt	mi
 8018c9c:	2220      	movmi	r2, #32
 8018c9e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018ca2:	071a      	lsls	r2, r3, #28
 8018ca4:	bf44      	itt	mi
 8018ca6:	222b      	movmi	r2, #43	; 0x2b
 8018ca8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018cac:	782a      	ldrb	r2, [r5, #0]
 8018cae:	2a2a      	cmp	r2, #42	; 0x2a
 8018cb0:	d015      	beq.n	8018cde <_svfiprintf_r+0xea>
 8018cb2:	9a07      	ldr	r2, [sp, #28]
 8018cb4:	462f      	mov	r7, r5
 8018cb6:	2000      	movs	r0, #0
 8018cb8:	250a      	movs	r5, #10
 8018cba:	4639      	mov	r1, r7
 8018cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018cc0:	3b30      	subs	r3, #48	; 0x30
 8018cc2:	2b09      	cmp	r3, #9
 8018cc4:	d94d      	bls.n	8018d62 <_svfiprintf_r+0x16e>
 8018cc6:	b1b8      	cbz	r0, 8018cf8 <_svfiprintf_r+0x104>
 8018cc8:	e00f      	b.n	8018cea <_svfiprintf_r+0xf6>
 8018cca:	462f      	mov	r7, r5
 8018ccc:	e7b8      	b.n	8018c40 <_svfiprintf_r+0x4c>
 8018cce:	4a40      	ldr	r2, [pc, #256]	; (8018dd0 <_svfiprintf_r+0x1dc>)
 8018cd0:	1a80      	subs	r0, r0, r2
 8018cd2:	fa0b f000 	lsl.w	r0, fp, r0
 8018cd6:	4318      	orrs	r0, r3
 8018cd8:	9004      	str	r0, [sp, #16]
 8018cda:	463d      	mov	r5, r7
 8018cdc:	e7d3      	b.n	8018c86 <_svfiprintf_r+0x92>
 8018cde:	9a03      	ldr	r2, [sp, #12]
 8018ce0:	1d11      	adds	r1, r2, #4
 8018ce2:	6812      	ldr	r2, [r2, #0]
 8018ce4:	9103      	str	r1, [sp, #12]
 8018ce6:	2a00      	cmp	r2, #0
 8018ce8:	db01      	blt.n	8018cee <_svfiprintf_r+0xfa>
 8018cea:	9207      	str	r2, [sp, #28]
 8018cec:	e004      	b.n	8018cf8 <_svfiprintf_r+0x104>
 8018cee:	4252      	negs	r2, r2
 8018cf0:	f043 0302 	orr.w	r3, r3, #2
 8018cf4:	9207      	str	r2, [sp, #28]
 8018cf6:	9304      	str	r3, [sp, #16]
 8018cf8:	783b      	ldrb	r3, [r7, #0]
 8018cfa:	2b2e      	cmp	r3, #46	; 0x2e
 8018cfc:	d10c      	bne.n	8018d18 <_svfiprintf_r+0x124>
 8018cfe:	787b      	ldrb	r3, [r7, #1]
 8018d00:	2b2a      	cmp	r3, #42	; 0x2a
 8018d02:	d133      	bne.n	8018d6c <_svfiprintf_r+0x178>
 8018d04:	9b03      	ldr	r3, [sp, #12]
 8018d06:	1d1a      	adds	r2, r3, #4
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	9203      	str	r2, [sp, #12]
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	bfb8      	it	lt
 8018d10:	f04f 33ff 	movlt.w	r3, #4294967295
 8018d14:	3702      	adds	r7, #2
 8018d16:	9305      	str	r3, [sp, #20]
 8018d18:	4d2e      	ldr	r5, [pc, #184]	; (8018dd4 <_svfiprintf_r+0x1e0>)
 8018d1a:	7839      	ldrb	r1, [r7, #0]
 8018d1c:	2203      	movs	r2, #3
 8018d1e:	4628      	mov	r0, r5
 8018d20:	f7e7 fa76 	bl	8000210 <memchr>
 8018d24:	b138      	cbz	r0, 8018d36 <_svfiprintf_r+0x142>
 8018d26:	2340      	movs	r3, #64	; 0x40
 8018d28:	1b40      	subs	r0, r0, r5
 8018d2a:	fa03 f000 	lsl.w	r0, r3, r0
 8018d2e:	9b04      	ldr	r3, [sp, #16]
 8018d30:	4303      	orrs	r3, r0
 8018d32:	3701      	adds	r7, #1
 8018d34:	9304      	str	r3, [sp, #16]
 8018d36:	7839      	ldrb	r1, [r7, #0]
 8018d38:	4827      	ldr	r0, [pc, #156]	; (8018dd8 <_svfiprintf_r+0x1e4>)
 8018d3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018d3e:	2206      	movs	r2, #6
 8018d40:	1c7e      	adds	r6, r7, #1
 8018d42:	f7e7 fa65 	bl	8000210 <memchr>
 8018d46:	2800      	cmp	r0, #0
 8018d48:	d038      	beq.n	8018dbc <_svfiprintf_r+0x1c8>
 8018d4a:	4b24      	ldr	r3, [pc, #144]	; (8018ddc <_svfiprintf_r+0x1e8>)
 8018d4c:	bb13      	cbnz	r3, 8018d94 <_svfiprintf_r+0x1a0>
 8018d4e:	9b03      	ldr	r3, [sp, #12]
 8018d50:	3307      	adds	r3, #7
 8018d52:	f023 0307 	bic.w	r3, r3, #7
 8018d56:	3308      	adds	r3, #8
 8018d58:	9303      	str	r3, [sp, #12]
 8018d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d5c:	444b      	add	r3, r9
 8018d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8018d60:	e76d      	b.n	8018c3e <_svfiprintf_r+0x4a>
 8018d62:	fb05 3202 	mla	r2, r5, r2, r3
 8018d66:	2001      	movs	r0, #1
 8018d68:	460f      	mov	r7, r1
 8018d6a:	e7a6      	b.n	8018cba <_svfiprintf_r+0xc6>
 8018d6c:	2300      	movs	r3, #0
 8018d6e:	3701      	adds	r7, #1
 8018d70:	9305      	str	r3, [sp, #20]
 8018d72:	4619      	mov	r1, r3
 8018d74:	250a      	movs	r5, #10
 8018d76:	4638      	mov	r0, r7
 8018d78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d7c:	3a30      	subs	r2, #48	; 0x30
 8018d7e:	2a09      	cmp	r2, #9
 8018d80:	d903      	bls.n	8018d8a <_svfiprintf_r+0x196>
 8018d82:	2b00      	cmp	r3, #0
 8018d84:	d0c8      	beq.n	8018d18 <_svfiprintf_r+0x124>
 8018d86:	9105      	str	r1, [sp, #20]
 8018d88:	e7c6      	b.n	8018d18 <_svfiprintf_r+0x124>
 8018d8a:	fb05 2101 	mla	r1, r5, r1, r2
 8018d8e:	2301      	movs	r3, #1
 8018d90:	4607      	mov	r7, r0
 8018d92:	e7f0      	b.n	8018d76 <_svfiprintf_r+0x182>
 8018d94:	ab03      	add	r3, sp, #12
 8018d96:	9300      	str	r3, [sp, #0]
 8018d98:	4622      	mov	r2, r4
 8018d9a:	4b11      	ldr	r3, [pc, #68]	; (8018de0 <_svfiprintf_r+0x1ec>)
 8018d9c:	a904      	add	r1, sp, #16
 8018d9e:	4640      	mov	r0, r8
 8018da0:	f7fc fb6a 	bl	8015478 <_printf_float>
 8018da4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018da8:	4681      	mov	r9, r0
 8018daa:	d1d6      	bne.n	8018d5a <_svfiprintf_r+0x166>
 8018dac:	89a3      	ldrh	r3, [r4, #12]
 8018dae:	065b      	lsls	r3, r3, #25
 8018db0:	f53f af35 	bmi.w	8018c1e <_svfiprintf_r+0x2a>
 8018db4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018db6:	b01d      	add	sp, #116	; 0x74
 8018db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dbc:	ab03      	add	r3, sp, #12
 8018dbe:	9300      	str	r3, [sp, #0]
 8018dc0:	4622      	mov	r2, r4
 8018dc2:	4b07      	ldr	r3, [pc, #28]	; (8018de0 <_svfiprintf_r+0x1ec>)
 8018dc4:	a904      	add	r1, sp, #16
 8018dc6:	4640      	mov	r0, r8
 8018dc8:	f7fc fe0c 	bl	80159e4 <_printf_i>
 8018dcc:	e7ea      	b.n	8018da4 <_svfiprintf_r+0x1b0>
 8018dce:	bf00      	nop
 8018dd0:	0801a134 	.word	0x0801a134
 8018dd4:	0801a13a 	.word	0x0801a13a
 8018dd8:	0801a13e 	.word	0x0801a13e
 8018ddc:	08015479 	.word	0x08015479
 8018de0:	08018b41 	.word	0x08018b41

08018de4 <_sungetc_r>:
 8018de4:	b538      	push	{r3, r4, r5, lr}
 8018de6:	1c4b      	adds	r3, r1, #1
 8018de8:	4614      	mov	r4, r2
 8018dea:	d103      	bne.n	8018df4 <_sungetc_r+0x10>
 8018dec:	f04f 35ff 	mov.w	r5, #4294967295
 8018df0:	4628      	mov	r0, r5
 8018df2:	bd38      	pop	{r3, r4, r5, pc}
 8018df4:	8993      	ldrh	r3, [r2, #12]
 8018df6:	f023 0320 	bic.w	r3, r3, #32
 8018dfa:	8193      	strh	r3, [r2, #12]
 8018dfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018dfe:	6852      	ldr	r2, [r2, #4]
 8018e00:	b2cd      	uxtb	r5, r1
 8018e02:	b18b      	cbz	r3, 8018e28 <_sungetc_r+0x44>
 8018e04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018e06:	4293      	cmp	r3, r2
 8018e08:	dd08      	ble.n	8018e1c <_sungetc_r+0x38>
 8018e0a:	6823      	ldr	r3, [r4, #0]
 8018e0c:	1e5a      	subs	r2, r3, #1
 8018e0e:	6022      	str	r2, [r4, #0]
 8018e10:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018e14:	6863      	ldr	r3, [r4, #4]
 8018e16:	3301      	adds	r3, #1
 8018e18:	6063      	str	r3, [r4, #4]
 8018e1a:	e7e9      	b.n	8018df0 <_sungetc_r+0xc>
 8018e1c:	4621      	mov	r1, r4
 8018e1e:	f000 fbc3 	bl	80195a8 <__submore>
 8018e22:	2800      	cmp	r0, #0
 8018e24:	d0f1      	beq.n	8018e0a <_sungetc_r+0x26>
 8018e26:	e7e1      	b.n	8018dec <_sungetc_r+0x8>
 8018e28:	6921      	ldr	r1, [r4, #16]
 8018e2a:	6823      	ldr	r3, [r4, #0]
 8018e2c:	b151      	cbz	r1, 8018e44 <_sungetc_r+0x60>
 8018e2e:	4299      	cmp	r1, r3
 8018e30:	d208      	bcs.n	8018e44 <_sungetc_r+0x60>
 8018e32:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018e36:	42a9      	cmp	r1, r5
 8018e38:	d104      	bne.n	8018e44 <_sungetc_r+0x60>
 8018e3a:	3b01      	subs	r3, #1
 8018e3c:	3201      	adds	r2, #1
 8018e3e:	6023      	str	r3, [r4, #0]
 8018e40:	6062      	str	r2, [r4, #4]
 8018e42:	e7d5      	b.n	8018df0 <_sungetc_r+0xc>
 8018e44:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018e48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018e4c:	6363      	str	r3, [r4, #52]	; 0x34
 8018e4e:	2303      	movs	r3, #3
 8018e50:	63a3      	str	r3, [r4, #56]	; 0x38
 8018e52:	4623      	mov	r3, r4
 8018e54:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018e58:	6023      	str	r3, [r4, #0]
 8018e5a:	2301      	movs	r3, #1
 8018e5c:	e7dc      	b.n	8018e18 <_sungetc_r+0x34>

08018e5e <__ssrefill_r>:
 8018e5e:	b510      	push	{r4, lr}
 8018e60:	460c      	mov	r4, r1
 8018e62:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018e64:	b169      	cbz	r1, 8018e82 <__ssrefill_r+0x24>
 8018e66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018e6a:	4299      	cmp	r1, r3
 8018e6c:	d001      	beq.n	8018e72 <__ssrefill_r+0x14>
 8018e6e:	f7ff fdbf 	bl	80189f0 <_free_r>
 8018e72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018e74:	6063      	str	r3, [r4, #4]
 8018e76:	2000      	movs	r0, #0
 8018e78:	6360      	str	r0, [r4, #52]	; 0x34
 8018e7a:	b113      	cbz	r3, 8018e82 <__ssrefill_r+0x24>
 8018e7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018e7e:	6023      	str	r3, [r4, #0]
 8018e80:	bd10      	pop	{r4, pc}
 8018e82:	6923      	ldr	r3, [r4, #16]
 8018e84:	6023      	str	r3, [r4, #0]
 8018e86:	2300      	movs	r3, #0
 8018e88:	6063      	str	r3, [r4, #4]
 8018e8a:	89a3      	ldrh	r3, [r4, #12]
 8018e8c:	f043 0320 	orr.w	r3, r3, #32
 8018e90:	81a3      	strh	r3, [r4, #12]
 8018e92:	f04f 30ff 	mov.w	r0, #4294967295
 8018e96:	e7f3      	b.n	8018e80 <__ssrefill_r+0x22>

08018e98 <__ssvfiscanf_r>:
 8018e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e9c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018ea0:	460c      	mov	r4, r1
 8018ea2:	2100      	movs	r1, #0
 8018ea4:	9144      	str	r1, [sp, #272]	; 0x110
 8018ea6:	9145      	str	r1, [sp, #276]	; 0x114
 8018ea8:	499f      	ldr	r1, [pc, #636]	; (8019128 <__ssvfiscanf_r+0x290>)
 8018eaa:	91a0      	str	r1, [sp, #640]	; 0x280
 8018eac:	f10d 0804 	add.w	r8, sp, #4
 8018eb0:	499e      	ldr	r1, [pc, #632]	; (801912c <__ssvfiscanf_r+0x294>)
 8018eb2:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8019130 <__ssvfiscanf_r+0x298>
 8018eb6:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018eba:	4606      	mov	r6, r0
 8018ebc:	4692      	mov	sl, r2
 8018ebe:	91a1      	str	r1, [sp, #644]	; 0x284
 8018ec0:	9300      	str	r3, [sp, #0]
 8018ec2:	270a      	movs	r7, #10
 8018ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	f000 812a 	beq.w	8019122 <__ssvfiscanf_r+0x28a>
 8018ece:	4655      	mov	r5, sl
 8018ed0:	f7ff f948 	bl	8018164 <__locale_ctype_ptr>
 8018ed4:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018ed8:	4458      	add	r0, fp
 8018eda:	7843      	ldrb	r3, [r0, #1]
 8018edc:	f013 0308 	ands.w	r3, r3, #8
 8018ee0:	d01c      	beq.n	8018f1c <__ssvfiscanf_r+0x84>
 8018ee2:	6863      	ldr	r3, [r4, #4]
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	dd12      	ble.n	8018f0e <__ssvfiscanf_r+0x76>
 8018ee8:	f7ff f93c 	bl	8018164 <__locale_ctype_ptr>
 8018eec:	6823      	ldr	r3, [r4, #0]
 8018eee:	781a      	ldrb	r2, [r3, #0]
 8018ef0:	4410      	add	r0, r2
 8018ef2:	7842      	ldrb	r2, [r0, #1]
 8018ef4:	0712      	lsls	r2, r2, #28
 8018ef6:	d401      	bmi.n	8018efc <__ssvfiscanf_r+0x64>
 8018ef8:	46aa      	mov	sl, r5
 8018efa:	e7e3      	b.n	8018ec4 <__ssvfiscanf_r+0x2c>
 8018efc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018efe:	3201      	adds	r2, #1
 8018f00:	9245      	str	r2, [sp, #276]	; 0x114
 8018f02:	6862      	ldr	r2, [r4, #4]
 8018f04:	3301      	adds	r3, #1
 8018f06:	3a01      	subs	r2, #1
 8018f08:	6062      	str	r2, [r4, #4]
 8018f0a:	6023      	str	r3, [r4, #0]
 8018f0c:	e7e9      	b.n	8018ee2 <__ssvfiscanf_r+0x4a>
 8018f0e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018f10:	4621      	mov	r1, r4
 8018f12:	4630      	mov	r0, r6
 8018f14:	4798      	blx	r3
 8018f16:	2800      	cmp	r0, #0
 8018f18:	d0e6      	beq.n	8018ee8 <__ssvfiscanf_r+0x50>
 8018f1a:	e7ed      	b.n	8018ef8 <__ssvfiscanf_r+0x60>
 8018f1c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8018f20:	f040 8082 	bne.w	8019028 <__ssvfiscanf_r+0x190>
 8018f24:	9343      	str	r3, [sp, #268]	; 0x10c
 8018f26:	9341      	str	r3, [sp, #260]	; 0x104
 8018f28:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8018f2e:	d103      	bne.n	8018f38 <__ssvfiscanf_r+0xa0>
 8018f30:	2310      	movs	r3, #16
 8018f32:	9341      	str	r3, [sp, #260]	; 0x104
 8018f34:	f10a 0502 	add.w	r5, sl, #2
 8018f38:	46aa      	mov	sl, r5
 8018f3a:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018f3e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018f42:	2a09      	cmp	r2, #9
 8018f44:	d922      	bls.n	8018f8c <__ssvfiscanf_r+0xf4>
 8018f46:	2203      	movs	r2, #3
 8018f48:	4879      	ldr	r0, [pc, #484]	; (8019130 <__ssvfiscanf_r+0x298>)
 8018f4a:	f7e7 f961 	bl	8000210 <memchr>
 8018f4e:	b138      	cbz	r0, 8018f60 <__ssvfiscanf_r+0xc8>
 8018f50:	eba0 0309 	sub.w	r3, r0, r9
 8018f54:	2001      	movs	r0, #1
 8018f56:	4098      	lsls	r0, r3
 8018f58:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018f5a:	4318      	orrs	r0, r3
 8018f5c:	9041      	str	r0, [sp, #260]	; 0x104
 8018f5e:	46aa      	mov	sl, r5
 8018f60:	f89a 3000 	ldrb.w	r3, [sl]
 8018f64:	2b67      	cmp	r3, #103	; 0x67
 8018f66:	f10a 0501 	add.w	r5, sl, #1
 8018f6a:	d82b      	bhi.n	8018fc4 <__ssvfiscanf_r+0x12c>
 8018f6c:	2b65      	cmp	r3, #101	; 0x65
 8018f6e:	f080 809f 	bcs.w	80190b0 <__ssvfiscanf_r+0x218>
 8018f72:	2b47      	cmp	r3, #71	; 0x47
 8018f74:	d810      	bhi.n	8018f98 <__ssvfiscanf_r+0x100>
 8018f76:	2b45      	cmp	r3, #69	; 0x45
 8018f78:	f080 809a 	bcs.w	80190b0 <__ssvfiscanf_r+0x218>
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d06c      	beq.n	801905a <__ssvfiscanf_r+0x1c2>
 8018f80:	2b25      	cmp	r3, #37	; 0x25
 8018f82:	d051      	beq.n	8019028 <__ssvfiscanf_r+0x190>
 8018f84:	2303      	movs	r3, #3
 8018f86:	9347      	str	r3, [sp, #284]	; 0x11c
 8018f88:	9742      	str	r7, [sp, #264]	; 0x108
 8018f8a:	e027      	b.n	8018fdc <__ssvfiscanf_r+0x144>
 8018f8c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018f8e:	fb07 1303 	mla	r3, r7, r3, r1
 8018f92:	3b30      	subs	r3, #48	; 0x30
 8018f94:	9343      	str	r3, [sp, #268]	; 0x10c
 8018f96:	e7cf      	b.n	8018f38 <__ssvfiscanf_r+0xa0>
 8018f98:	2b5b      	cmp	r3, #91	; 0x5b
 8018f9a:	d06a      	beq.n	8019072 <__ssvfiscanf_r+0x1da>
 8018f9c:	d80c      	bhi.n	8018fb8 <__ssvfiscanf_r+0x120>
 8018f9e:	2b58      	cmp	r3, #88	; 0x58
 8018fa0:	d1f0      	bne.n	8018f84 <__ssvfiscanf_r+0xec>
 8018fa2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018fa8:	9241      	str	r2, [sp, #260]	; 0x104
 8018faa:	2210      	movs	r2, #16
 8018fac:	9242      	str	r2, [sp, #264]	; 0x108
 8018fae:	2b6e      	cmp	r3, #110	; 0x6e
 8018fb0:	bf8c      	ite	hi
 8018fb2:	2304      	movhi	r3, #4
 8018fb4:	2303      	movls	r3, #3
 8018fb6:	e010      	b.n	8018fda <__ssvfiscanf_r+0x142>
 8018fb8:	2b63      	cmp	r3, #99	; 0x63
 8018fba:	d065      	beq.n	8019088 <__ssvfiscanf_r+0x1f0>
 8018fbc:	2b64      	cmp	r3, #100	; 0x64
 8018fbe:	d1e1      	bne.n	8018f84 <__ssvfiscanf_r+0xec>
 8018fc0:	9742      	str	r7, [sp, #264]	; 0x108
 8018fc2:	e7f4      	b.n	8018fae <__ssvfiscanf_r+0x116>
 8018fc4:	2b70      	cmp	r3, #112	; 0x70
 8018fc6:	d04b      	beq.n	8019060 <__ssvfiscanf_r+0x1c8>
 8018fc8:	d826      	bhi.n	8019018 <__ssvfiscanf_r+0x180>
 8018fca:	2b6e      	cmp	r3, #110	; 0x6e
 8018fcc:	d062      	beq.n	8019094 <__ssvfiscanf_r+0x1fc>
 8018fce:	d84c      	bhi.n	801906a <__ssvfiscanf_r+0x1d2>
 8018fd0:	2b69      	cmp	r3, #105	; 0x69
 8018fd2:	d1d7      	bne.n	8018f84 <__ssvfiscanf_r+0xec>
 8018fd4:	2300      	movs	r3, #0
 8018fd6:	9342      	str	r3, [sp, #264]	; 0x108
 8018fd8:	2303      	movs	r3, #3
 8018fda:	9347      	str	r3, [sp, #284]	; 0x11c
 8018fdc:	6863      	ldr	r3, [r4, #4]
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	dd68      	ble.n	80190b4 <__ssvfiscanf_r+0x21c>
 8018fe2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018fe4:	0659      	lsls	r1, r3, #25
 8018fe6:	d407      	bmi.n	8018ff8 <__ssvfiscanf_r+0x160>
 8018fe8:	f7ff f8bc 	bl	8018164 <__locale_ctype_ptr>
 8018fec:	6823      	ldr	r3, [r4, #0]
 8018fee:	781a      	ldrb	r2, [r3, #0]
 8018ff0:	4410      	add	r0, r2
 8018ff2:	7842      	ldrb	r2, [r0, #1]
 8018ff4:	0712      	lsls	r2, r2, #28
 8018ff6:	d464      	bmi.n	80190c2 <__ssvfiscanf_r+0x22a>
 8018ff8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018ffa:	2b02      	cmp	r3, #2
 8018ffc:	dc73      	bgt.n	80190e6 <__ssvfiscanf_r+0x24e>
 8018ffe:	466b      	mov	r3, sp
 8019000:	4622      	mov	r2, r4
 8019002:	a941      	add	r1, sp, #260	; 0x104
 8019004:	4630      	mov	r0, r6
 8019006:	f000 f897 	bl	8019138 <_scanf_chars>
 801900a:	2801      	cmp	r0, #1
 801900c:	f000 8089 	beq.w	8019122 <__ssvfiscanf_r+0x28a>
 8019010:	2802      	cmp	r0, #2
 8019012:	f47f af71 	bne.w	8018ef8 <__ssvfiscanf_r+0x60>
 8019016:	e01d      	b.n	8019054 <__ssvfiscanf_r+0x1bc>
 8019018:	2b75      	cmp	r3, #117	; 0x75
 801901a:	d0d1      	beq.n	8018fc0 <__ssvfiscanf_r+0x128>
 801901c:	2b78      	cmp	r3, #120	; 0x78
 801901e:	d0c0      	beq.n	8018fa2 <__ssvfiscanf_r+0x10a>
 8019020:	2b73      	cmp	r3, #115	; 0x73
 8019022:	d1af      	bne.n	8018f84 <__ssvfiscanf_r+0xec>
 8019024:	2302      	movs	r3, #2
 8019026:	e7d8      	b.n	8018fda <__ssvfiscanf_r+0x142>
 8019028:	6863      	ldr	r3, [r4, #4]
 801902a:	2b00      	cmp	r3, #0
 801902c:	dd0c      	ble.n	8019048 <__ssvfiscanf_r+0x1b0>
 801902e:	6823      	ldr	r3, [r4, #0]
 8019030:	781a      	ldrb	r2, [r3, #0]
 8019032:	455a      	cmp	r2, fp
 8019034:	d175      	bne.n	8019122 <__ssvfiscanf_r+0x28a>
 8019036:	3301      	adds	r3, #1
 8019038:	6862      	ldr	r2, [r4, #4]
 801903a:	6023      	str	r3, [r4, #0]
 801903c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801903e:	3a01      	subs	r2, #1
 8019040:	3301      	adds	r3, #1
 8019042:	6062      	str	r2, [r4, #4]
 8019044:	9345      	str	r3, [sp, #276]	; 0x114
 8019046:	e757      	b.n	8018ef8 <__ssvfiscanf_r+0x60>
 8019048:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801904a:	4621      	mov	r1, r4
 801904c:	4630      	mov	r0, r6
 801904e:	4798      	blx	r3
 8019050:	2800      	cmp	r0, #0
 8019052:	d0ec      	beq.n	801902e <__ssvfiscanf_r+0x196>
 8019054:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019056:	2800      	cmp	r0, #0
 8019058:	d159      	bne.n	801910e <__ssvfiscanf_r+0x276>
 801905a:	f04f 30ff 	mov.w	r0, #4294967295
 801905e:	e05c      	b.n	801911a <__ssvfiscanf_r+0x282>
 8019060:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019062:	f042 0220 	orr.w	r2, r2, #32
 8019066:	9241      	str	r2, [sp, #260]	; 0x104
 8019068:	e79b      	b.n	8018fa2 <__ssvfiscanf_r+0x10a>
 801906a:	2308      	movs	r3, #8
 801906c:	9342      	str	r3, [sp, #264]	; 0x108
 801906e:	2304      	movs	r3, #4
 8019070:	e7b3      	b.n	8018fda <__ssvfiscanf_r+0x142>
 8019072:	4629      	mov	r1, r5
 8019074:	4640      	mov	r0, r8
 8019076:	f000 f9c7 	bl	8019408 <__sccl>
 801907a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801907c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019080:	9341      	str	r3, [sp, #260]	; 0x104
 8019082:	4605      	mov	r5, r0
 8019084:	2301      	movs	r3, #1
 8019086:	e7a8      	b.n	8018fda <__ssvfiscanf_r+0x142>
 8019088:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801908a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801908e:	9341      	str	r3, [sp, #260]	; 0x104
 8019090:	2300      	movs	r3, #0
 8019092:	e7a2      	b.n	8018fda <__ssvfiscanf_r+0x142>
 8019094:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019096:	06c3      	lsls	r3, r0, #27
 8019098:	f53f af2e 	bmi.w	8018ef8 <__ssvfiscanf_r+0x60>
 801909c:	9b00      	ldr	r3, [sp, #0]
 801909e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80190a0:	1d19      	adds	r1, r3, #4
 80190a2:	9100      	str	r1, [sp, #0]
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	07c0      	lsls	r0, r0, #31
 80190a8:	bf4c      	ite	mi
 80190aa:	801a      	strhmi	r2, [r3, #0]
 80190ac:	601a      	strpl	r2, [r3, #0]
 80190ae:	e723      	b.n	8018ef8 <__ssvfiscanf_r+0x60>
 80190b0:	2305      	movs	r3, #5
 80190b2:	e792      	b.n	8018fda <__ssvfiscanf_r+0x142>
 80190b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80190b6:	4621      	mov	r1, r4
 80190b8:	4630      	mov	r0, r6
 80190ba:	4798      	blx	r3
 80190bc:	2800      	cmp	r0, #0
 80190be:	d090      	beq.n	8018fe2 <__ssvfiscanf_r+0x14a>
 80190c0:	e7c8      	b.n	8019054 <__ssvfiscanf_r+0x1bc>
 80190c2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80190c4:	3201      	adds	r2, #1
 80190c6:	9245      	str	r2, [sp, #276]	; 0x114
 80190c8:	6862      	ldr	r2, [r4, #4]
 80190ca:	3a01      	subs	r2, #1
 80190cc:	2a00      	cmp	r2, #0
 80190ce:	6062      	str	r2, [r4, #4]
 80190d0:	dd02      	ble.n	80190d8 <__ssvfiscanf_r+0x240>
 80190d2:	3301      	adds	r3, #1
 80190d4:	6023      	str	r3, [r4, #0]
 80190d6:	e787      	b.n	8018fe8 <__ssvfiscanf_r+0x150>
 80190d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80190da:	4621      	mov	r1, r4
 80190dc:	4630      	mov	r0, r6
 80190de:	4798      	blx	r3
 80190e0:	2800      	cmp	r0, #0
 80190e2:	d081      	beq.n	8018fe8 <__ssvfiscanf_r+0x150>
 80190e4:	e7b6      	b.n	8019054 <__ssvfiscanf_r+0x1bc>
 80190e6:	2b04      	cmp	r3, #4
 80190e8:	dc06      	bgt.n	80190f8 <__ssvfiscanf_r+0x260>
 80190ea:	466b      	mov	r3, sp
 80190ec:	4622      	mov	r2, r4
 80190ee:	a941      	add	r1, sp, #260	; 0x104
 80190f0:	4630      	mov	r0, r6
 80190f2:	f000 f885 	bl	8019200 <_scanf_i>
 80190f6:	e788      	b.n	801900a <__ssvfiscanf_r+0x172>
 80190f8:	4b0e      	ldr	r3, [pc, #56]	; (8019134 <__ssvfiscanf_r+0x29c>)
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	f43f aefc 	beq.w	8018ef8 <__ssvfiscanf_r+0x60>
 8019100:	466b      	mov	r3, sp
 8019102:	4622      	mov	r2, r4
 8019104:	a941      	add	r1, sp, #260	; 0x104
 8019106:	4630      	mov	r0, r6
 8019108:	f7fc fd7e 	bl	8015c08 <_scanf_float>
 801910c:	e77d      	b.n	801900a <__ssvfiscanf_r+0x172>
 801910e:	89a3      	ldrh	r3, [r4, #12]
 8019110:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019114:	bf18      	it	ne
 8019116:	f04f 30ff 	movne.w	r0, #4294967295
 801911a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801911e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019122:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019124:	e7f9      	b.n	801911a <__ssvfiscanf_r+0x282>
 8019126:	bf00      	nop
 8019128:	08018de5 	.word	0x08018de5
 801912c:	08018e5f 	.word	0x08018e5f
 8019130:	0801a13a 	.word	0x0801a13a
 8019134:	08015c09 	.word	0x08015c09

08019138 <_scanf_chars>:
 8019138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801913c:	4615      	mov	r5, r2
 801913e:	688a      	ldr	r2, [r1, #8]
 8019140:	4680      	mov	r8, r0
 8019142:	460c      	mov	r4, r1
 8019144:	b932      	cbnz	r2, 8019154 <_scanf_chars+0x1c>
 8019146:	698a      	ldr	r2, [r1, #24]
 8019148:	2a00      	cmp	r2, #0
 801914a:	bf14      	ite	ne
 801914c:	f04f 32ff 	movne.w	r2, #4294967295
 8019150:	2201      	moveq	r2, #1
 8019152:	608a      	str	r2, [r1, #8]
 8019154:	6822      	ldr	r2, [r4, #0]
 8019156:	06d1      	lsls	r1, r2, #27
 8019158:	bf5f      	itttt	pl
 801915a:	681a      	ldrpl	r2, [r3, #0]
 801915c:	1d11      	addpl	r1, r2, #4
 801915e:	6019      	strpl	r1, [r3, #0]
 8019160:	6817      	ldrpl	r7, [r2, #0]
 8019162:	2600      	movs	r6, #0
 8019164:	69a3      	ldr	r3, [r4, #24]
 8019166:	b1db      	cbz	r3, 80191a0 <_scanf_chars+0x68>
 8019168:	2b01      	cmp	r3, #1
 801916a:	d107      	bne.n	801917c <_scanf_chars+0x44>
 801916c:	682b      	ldr	r3, [r5, #0]
 801916e:	6962      	ldr	r2, [r4, #20]
 8019170:	781b      	ldrb	r3, [r3, #0]
 8019172:	5cd3      	ldrb	r3, [r2, r3]
 8019174:	b9a3      	cbnz	r3, 80191a0 <_scanf_chars+0x68>
 8019176:	2e00      	cmp	r6, #0
 8019178:	d132      	bne.n	80191e0 <_scanf_chars+0xa8>
 801917a:	e006      	b.n	801918a <_scanf_chars+0x52>
 801917c:	2b02      	cmp	r3, #2
 801917e:	d007      	beq.n	8019190 <_scanf_chars+0x58>
 8019180:	2e00      	cmp	r6, #0
 8019182:	d12d      	bne.n	80191e0 <_scanf_chars+0xa8>
 8019184:	69a3      	ldr	r3, [r4, #24]
 8019186:	2b01      	cmp	r3, #1
 8019188:	d12a      	bne.n	80191e0 <_scanf_chars+0xa8>
 801918a:	2001      	movs	r0, #1
 801918c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019190:	f7fe ffe8 	bl	8018164 <__locale_ctype_ptr>
 8019194:	682b      	ldr	r3, [r5, #0]
 8019196:	781b      	ldrb	r3, [r3, #0]
 8019198:	4418      	add	r0, r3
 801919a:	7843      	ldrb	r3, [r0, #1]
 801919c:	071b      	lsls	r3, r3, #28
 801919e:	d4ef      	bmi.n	8019180 <_scanf_chars+0x48>
 80191a0:	6823      	ldr	r3, [r4, #0]
 80191a2:	06da      	lsls	r2, r3, #27
 80191a4:	bf5e      	ittt	pl
 80191a6:	682b      	ldrpl	r3, [r5, #0]
 80191a8:	781b      	ldrbpl	r3, [r3, #0]
 80191aa:	703b      	strbpl	r3, [r7, #0]
 80191ac:	682a      	ldr	r2, [r5, #0]
 80191ae:	686b      	ldr	r3, [r5, #4]
 80191b0:	f102 0201 	add.w	r2, r2, #1
 80191b4:	602a      	str	r2, [r5, #0]
 80191b6:	68a2      	ldr	r2, [r4, #8]
 80191b8:	f103 33ff 	add.w	r3, r3, #4294967295
 80191bc:	f102 32ff 	add.w	r2, r2, #4294967295
 80191c0:	606b      	str	r3, [r5, #4]
 80191c2:	f106 0601 	add.w	r6, r6, #1
 80191c6:	bf58      	it	pl
 80191c8:	3701      	addpl	r7, #1
 80191ca:	60a2      	str	r2, [r4, #8]
 80191cc:	b142      	cbz	r2, 80191e0 <_scanf_chars+0xa8>
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	dcc8      	bgt.n	8019164 <_scanf_chars+0x2c>
 80191d2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80191d6:	4629      	mov	r1, r5
 80191d8:	4640      	mov	r0, r8
 80191da:	4798      	blx	r3
 80191dc:	2800      	cmp	r0, #0
 80191de:	d0c1      	beq.n	8019164 <_scanf_chars+0x2c>
 80191e0:	6823      	ldr	r3, [r4, #0]
 80191e2:	f013 0310 	ands.w	r3, r3, #16
 80191e6:	d105      	bne.n	80191f4 <_scanf_chars+0xbc>
 80191e8:	68e2      	ldr	r2, [r4, #12]
 80191ea:	3201      	adds	r2, #1
 80191ec:	60e2      	str	r2, [r4, #12]
 80191ee:	69a2      	ldr	r2, [r4, #24]
 80191f0:	b102      	cbz	r2, 80191f4 <_scanf_chars+0xbc>
 80191f2:	703b      	strb	r3, [r7, #0]
 80191f4:	6923      	ldr	r3, [r4, #16]
 80191f6:	441e      	add	r6, r3
 80191f8:	6126      	str	r6, [r4, #16]
 80191fa:	2000      	movs	r0, #0
 80191fc:	e7c6      	b.n	801918c <_scanf_chars+0x54>
	...

08019200 <_scanf_i>:
 8019200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019204:	469a      	mov	sl, r3
 8019206:	4b74      	ldr	r3, [pc, #464]	; (80193d8 <_scanf_i+0x1d8>)
 8019208:	460c      	mov	r4, r1
 801920a:	4683      	mov	fp, r0
 801920c:	4616      	mov	r6, r2
 801920e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019212:	b087      	sub	sp, #28
 8019214:	ab03      	add	r3, sp, #12
 8019216:	68a7      	ldr	r7, [r4, #8]
 8019218:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801921c:	4b6f      	ldr	r3, [pc, #444]	; (80193dc <_scanf_i+0x1dc>)
 801921e:	69a1      	ldr	r1, [r4, #24]
 8019220:	4a6f      	ldr	r2, [pc, #444]	; (80193e0 <_scanf_i+0x1e0>)
 8019222:	2903      	cmp	r1, #3
 8019224:	bf08      	it	eq
 8019226:	461a      	moveq	r2, r3
 8019228:	1e7b      	subs	r3, r7, #1
 801922a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801922e:	bf84      	itt	hi
 8019230:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019234:	60a3      	strhi	r3, [r4, #8]
 8019236:	6823      	ldr	r3, [r4, #0]
 8019238:	9200      	str	r2, [sp, #0]
 801923a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801923e:	bf88      	it	hi
 8019240:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019244:	f104 091c 	add.w	r9, r4, #28
 8019248:	6023      	str	r3, [r4, #0]
 801924a:	bf8c      	ite	hi
 801924c:	197f      	addhi	r7, r7, r5
 801924e:	2700      	movls	r7, #0
 8019250:	464b      	mov	r3, r9
 8019252:	f04f 0800 	mov.w	r8, #0
 8019256:	9301      	str	r3, [sp, #4]
 8019258:	6831      	ldr	r1, [r6, #0]
 801925a:	ab03      	add	r3, sp, #12
 801925c:	2202      	movs	r2, #2
 801925e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8019262:	7809      	ldrb	r1, [r1, #0]
 8019264:	f7e6 ffd4 	bl	8000210 <memchr>
 8019268:	9b01      	ldr	r3, [sp, #4]
 801926a:	b330      	cbz	r0, 80192ba <_scanf_i+0xba>
 801926c:	f1b8 0f01 	cmp.w	r8, #1
 8019270:	d15a      	bne.n	8019328 <_scanf_i+0x128>
 8019272:	6862      	ldr	r2, [r4, #4]
 8019274:	b92a      	cbnz	r2, 8019282 <_scanf_i+0x82>
 8019276:	6822      	ldr	r2, [r4, #0]
 8019278:	2108      	movs	r1, #8
 801927a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801927e:	6061      	str	r1, [r4, #4]
 8019280:	6022      	str	r2, [r4, #0]
 8019282:	6822      	ldr	r2, [r4, #0]
 8019284:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019288:	6022      	str	r2, [r4, #0]
 801928a:	68a2      	ldr	r2, [r4, #8]
 801928c:	1e51      	subs	r1, r2, #1
 801928e:	60a1      	str	r1, [r4, #8]
 8019290:	b19a      	cbz	r2, 80192ba <_scanf_i+0xba>
 8019292:	6832      	ldr	r2, [r6, #0]
 8019294:	1c51      	adds	r1, r2, #1
 8019296:	6031      	str	r1, [r6, #0]
 8019298:	7812      	ldrb	r2, [r2, #0]
 801929a:	701a      	strb	r2, [r3, #0]
 801929c:	1c5d      	adds	r5, r3, #1
 801929e:	6873      	ldr	r3, [r6, #4]
 80192a0:	3b01      	subs	r3, #1
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	6073      	str	r3, [r6, #4]
 80192a6:	dc07      	bgt.n	80192b8 <_scanf_i+0xb8>
 80192a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80192ac:	4631      	mov	r1, r6
 80192ae:	4658      	mov	r0, fp
 80192b0:	4798      	blx	r3
 80192b2:	2800      	cmp	r0, #0
 80192b4:	f040 8086 	bne.w	80193c4 <_scanf_i+0x1c4>
 80192b8:	462b      	mov	r3, r5
 80192ba:	f108 0801 	add.w	r8, r8, #1
 80192be:	f1b8 0f03 	cmp.w	r8, #3
 80192c2:	d1c8      	bne.n	8019256 <_scanf_i+0x56>
 80192c4:	6862      	ldr	r2, [r4, #4]
 80192c6:	b90a      	cbnz	r2, 80192cc <_scanf_i+0xcc>
 80192c8:	220a      	movs	r2, #10
 80192ca:	6062      	str	r2, [r4, #4]
 80192cc:	6862      	ldr	r2, [r4, #4]
 80192ce:	4945      	ldr	r1, [pc, #276]	; (80193e4 <_scanf_i+0x1e4>)
 80192d0:	6960      	ldr	r0, [r4, #20]
 80192d2:	9301      	str	r3, [sp, #4]
 80192d4:	1a89      	subs	r1, r1, r2
 80192d6:	f000 f897 	bl	8019408 <__sccl>
 80192da:	9b01      	ldr	r3, [sp, #4]
 80192dc:	f04f 0800 	mov.w	r8, #0
 80192e0:	461d      	mov	r5, r3
 80192e2:	68a3      	ldr	r3, [r4, #8]
 80192e4:	6822      	ldr	r2, [r4, #0]
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d03a      	beq.n	8019360 <_scanf_i+0x160>
 80192ea:	6831      	ldr	r1, [r6, #0]
 80192ec:	6960      	ldr	r0, [r4, #20]
 80192ee:	f891 c000 	ldrb.w	ip, [r1]
 80192f2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80192f6:	2800      	cmp	r0, #0
 80192f8:	d032      	beq.n	8019360 <_scanf_i+0x160>
 80192fa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80192fe:	d121      	bne.n	8019344 <_scanf_i+0x144>
 8019300:	0510      	lsls	r0, r2, #20
 8019302:	d51f      	bpl.n	8019344 <_scanf_i+0x144>
 8019304:	f108 0801 	add.w	r8, r8, #1
 8019308:	b117      	cbz	r7, 8019310 <_scanf_i+0x110>
 801930a:	3301      	adds	r3, #1
 801930c:	3f01      	subs	r7, #1
 801930e:	60a3      	str	r3, [r4, #8]
 8019310:	6873      	ldr	r3, [r6, #4]
 8019312:	3b01      	subs	r3, #1
 8019314:	2b00      	cmp	r3, #0
 8019316:	6073      	str	r3, [r6, #4]
 8019318:	dd1b      	ble.n	8019352 <_scanf_i+0x152>
 801931a:	6833      	ldr	r3, [r6, #0]
 801931c:	3301      	adds	r3, #1
 801931e:	6033      	str	r3, [r6, #0]
 8019320:	68a3      	ldr	r3, [r4, #8]
 8019322:	3b01      	subs	r3, #1
 8019324:	60a3      	str	r3, [r4, #8]
 8019326:	e7dc      	b.n	80192e2 <_scanf_i+0xe2>
 8019328:	f1b8 0f02 	cmp.w	r8, #2
 801932c:	d1ad      	bne.n	801928a <_scanf_i+0x8a>
 801932e:	6822      	ldr	r2, [r4, #0]
 8019330:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019334:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019338:	d1bf      	bne.n	80192ba <_scanf_i+0xba>
 801933a:	2110      	movs	r1, #16
 801933c:	6061      	str	r1, [r4, #4]
 801933e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019342:	e7a1      	b.n	8019288 <_scanf_i+0x88>
 8019344:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019348:	6022      	str	r2, [r4, #0]
 801934a:	780b      	ldrb	r3, [r1, #0]
 801934c:	702b      	strb	r3, [r5, #0]
 801934e:	3501      	adds	r5, #1
 8019350:	e7de      	b.n	8019310 <_scanf_i+0x110>
 8019352:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019356:	4631      	mov	r1, r6
 8019358:	4658      	mov	r0, fp
 801935a:	4798      	blx	r3
 801935c:	2800      	cmp	r0, #0
 801935e:	d0df      	beq.n	8019320 <_scanf_i+0x120>
 8019360:	6823      	ldr	r3, [r4, #0]
 8019362:	05d9      	lsls	r1, r3, #23
 8019364:	d50c      	bpl.n	8019380 <_scanf_i+0x180>
 8019366:	454d      	cmp	r5, r9
 8019368:	d908      	bls.n	801937c <_scanf_i+0x17c>
 801936a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801936e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019372:	4632      	mov	r2, r6
 8019374:	4658      	mov	r0, fp
 8019376:	4798      	blx	r3
 8019378:	1e6f      	subs	r7, r5, #1
 801937a:	463d      	mov	r5, r7
 801937c:	454d      	cmp	r5, r9
 801937e:	d029      	beq.n	80193d4 <_scanf_i+0x1d4>
 8019380:	6822      	ldr	r2, [r4, #0]
 8019382:	f012 0210 	ands.w	r2, r2, #16
 8019386:	d113      	bne.n	80193b0 <_scanf_i+0x1b0>
 8019388:	702a      	strb	r2, [r5, #0]
 801938a:	6863      	ldr	r3, [r4, #4]
 801938c:	9e00      	ldr	r6, [sp, #0]
 801938e:	4649      	mov	r1, r9
 8019390:	4658      	mov	r0, fp
 8019392:	47b0      	blx	r6
 8019394:	f8da 3000 	ldr.w	r3, [sl]
 8019398:	6821      	ldr	r1, [r4, #0]
 801939a:	1d1a      	adds	r2, r3, #4
 801939c:	f8ca 2000 	str.w	r2, [sl]
 80193a0:	f011 0f20 	tst.w	r1, #32
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	d010      	beq.n	80193ca <_scanf_i+0x1ca>
 80193a8:	6018      	str	r0, [r3, #0]
 80193aa:	68e3      	ldr	r3, [r4, #12]
 80193ac:	3301      	adds	r3, #1
 80193ae:	60e3      	str	r3, [r4, #12]
 80193b0:	eba5 0509 	sub.w	r5, r5, r9
 80193b4:	44a8      	add	r8, r5
 80193b6:	6925      	ldr	r5, [r4, #16]
 80193b8:	4445      	add	r5, r8
 80193ba:	6125      	str	r5, [r4, #16]
 80193bc:	2000      	movs	r0, #0
 80193be:	b007      	add	sp, #28
 80193c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193c4:	f04f 0800 	mov.w	r8, #0
 80193c8:	e7ca      	b.n	8019360 <_scanf_i+0x160>
 80193ca:	07ca      	lsls	r2, r1, #31
 80193cc:	bf4c      	ite	mi
 80193ce:	8018      	strhmi	r0, [r3, #0]
 80193d0:	6018      	strpl	r0, [r3, #0]
 80193d2:	e7ea      	b.n	80193aa <_scanf_i+0x1aa>
 80193d4:	2001      	movs	r0, #1
 80193d6:	e7f2      	b.n	80193be <_scanf_i+0x1be>
 80193d8:	08019d00 	.word	0x08019d00
 80193dc:	08016e21 	.word	0x08016e21
 80193e0:	08019585 	.word	0x08019585
 80193e4:	0801a155 	.word	0x0801a155

080193e8 <_sbrk_r>:
 80193e8:	b538      	push	{r3, r4, r5, lr}
 80193ea:	4c06      	ldr	r4, [pc, #24]	; (8019404 <_sbrk_r+0x1c>)
 80193ec:	2300      	movs	r3, #0
 80193ee:	4605      	mov	r5, r0
 80193f0:	4608      	mov	r0, r1
 80193f2:	6023      	str	r3, [r4, #0]
 80193f4:	f7ee f9c4 	bl	8007780 <_sbrk>
 80193f8:	1c43      	adds	r3, r0, #1
 80193fa:	d102      	bne.n	8019402 <_sbrk_r+0x1a>
 80193fc:	6823      	ldr	r3, [r4, #0]
 80193fe:	b103      	cbz	r3, 8019402 <_sbrk_r+0x1a>
 8019400:	602b      	str	r3, [r5, #0]
 8019402:	bd38      	pop	{r3, r4, r5, pc}
 8019404:	20046cb4 	.word	0x20046cb4

08019408 <__sccl>:
 8019408:	b570      	push	{r4, r5, r6, lr}
 801940a:	780b      	ldrb	r3, [r1, #0]
 801940c:	2b5e      	cmp	r3, #94	; 0x5e
 801940e:	bf13      	iteet	ne
 8019410:	1c4a      	addne	r2, r1, #1
 8019412:	1c8a      	addeq	r2, r1, #2
 8019414:	784b      	ldrbeq	r3, [r1, #1]
 8019416:	2100      	movne	r1, #0
 8019418:	bf08      	it	eq
 801941a:	2101      	moveq	r1, #1
 801941c:	1e44      	subs	r4, r0, #1
 801941e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019422:	f804 1f01 	strb.w	r1, [r4, #1]!
 8019426:	42ac      	cmp	r4, r5
 8019428:	d1fb      	bne.n	8019422 <__sccl+0x1a>
 801942a:	b913      	cbnz	r3, 8019432 <__sccl+0x2a>
 801942c:	3a01      	subs	r2, #1
 801942e:	4610      	mov	r0, r2
 8019430:	bd70      	pop	{r4, r5, r6, pc}
 8019432:	f081 0401 	eor.w	r4, r1, #1
 8019436:	54c4      	strb	r4, [r0, r3]
 8019438:	1c51      	adds	r1, r2, #1
 801943a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801943e:	2d2d      	cmp	r5, #45	; 0x2d
 8019440:	f101 36ff 	add.w	r6, r1, #4294967295
 8019444:	460a      	mov	r2, r1
 8019446:	d006      	beq.n	8019456 <__sccl+0x4e>
 8019448:	2d5d      	cmp	r5, #93	; 0x5d
 801944a:	d0f0      	beq.n	801942e <__sccl+0x26>
 801944c:	b90d      	cbnz	r5, 8019452 <__sccl+0x4a>
 801944e:	4632      	mov	r2, r6
 8019450:	e7ed      	b.n	801942e <__sccl+0x26>
 8019452:	462b      	mov	r3, r5
 8019454:	e7ef      	b.n	8019436 <__sccl+0x2e>
 8019456:	780e      	ldrb	r6, [r1, #0]
 8019458:	2e5d      	cmp	r6, #93	; 0x5d
 801945a:	d0fa      	beq.n	8019452 <__sccl+0x4a>
 801945c:	42b3      	cmp	r3, r6
 801945e:	dcf8      	bgt.n	8019452 <__sccl+0x4a>
 8019460:	3301      	adds	r3, #1
 8019462:	429e      	cmp	r6, r3
 8019464:	54c4      	strb	r4, [r0, r3]
 8019466:	dcfb      	bgt.n	8019460 <__sccl+0x58>
 8019468:	3102      	adds	r1, #2
 801946a:	e7e6      	b.n	801943a <__sccl+0x32>

0801946c <strncmp>:
 801946c:	b510      	push	{r4, lr}
 801946e:	b16a      	cbz	r2, 801948c <strncmp+0x20>
 8019470:	3901      	subs	r1, #1
 8019472:	1884      	adds	r4, r0, r2
 8019474:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019478:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801947c:	4293      	cmp	r3, r2
 801947e:	d103      	bne.n	8019488 <strncmp+0x1c>
 8019480:	42a0      	cmp	r0, r4
 8019482:	d001      	beq.n	8019488 <strncmp+0x1c>
 8019484:	2b00      	cmp	r3, #0
 8019486:	d1f5      	bne.n	8019474 <strncmp+0x8>
 8019488:	1a98      	subs	r0, r3, r2
 801948a:	bd10      	pop	{r4, pc}
 801948c:	4610      	mov	r0, r2
 801948e:	e7fc      	b.n	801948a <strncmp+0x1e>

08019490 <_strtoul_l.isra.0>:
 8019490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019494:	4680      	mov	r8, r0
 8019496:	4689      	mov	r9, r1
 8019498:	4692      	mov	sl, r2
 801949a:	461e      	mov	r6, r3
 801949c:	460f      	mov	r7, r1
 801949e:	463d      	mov	r5, r7
 80194a0:	9808      	ldr	r0, [sp, #32]
 80194a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80194a6:	f7fe fe59 	bl	801815c <__locale_ctype_ptr_l>
 80194aa:	4420      	add	r0, r4
 80194ac:	7843      	ldrb	r3, [r0, #1]
 80194ae:	f013 0308 	ands.w	r3, r3, #8
 80194b2:	d130      	bne.n	8019516 <_strtoul_l.isra.0+0x86>
 80194b4:	2c2d      	cmp	r4, #45	; 0x2d
 80194b6:	d130      	bne.n	801951a <_strtoul_l.isra.0+0x8a>
 80194b8:	787c      	ldrb	r4, [r7, #1]
 80194ba:	1cbd      	adds	r5, r7, #2
 80194bc:	2101      	movs	r1, #1
 80194be:	2e00      	cmp	r6, #0
 80194c0:	d05c      	beq.n	801957c <_strtoul_l.isra.0+0xec>
 80194c2:	2e10      	cmp	r6, #16
 80194c4:	d109      	bne.n	80194da <_strtoul_l.isra.0+0x4a>
 80194c6:	2c30      	cmp	r4, #48	; 0x30
 80194c8:	d107      	bne.n	80194da <_strtoul_l.isra.0+0x4a>
 80194ca:	782b      	ldrb	r3, [r5, #0]
 80194cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80194d0:	2b58      	cmp	r3, #88	; 0x58
 80194d2:	d14e      	bne.n	8019572 <_strtoul_l.isra.0+0xe2>
 80194d4:	786c      	ldrb	r4, [r5, #1]
 80194d6:	2610      	movs	r6, #16
 80194d8:	3502      	adds	r5, #2
 80194da:	f04f 32ff 	mov.w	r2, #4294967295
 80194de:	2300      	movs	r3, #0
 80194e0:	fbb2 f2f6 	udiv	r2, r2, r6
 80194e4:	fb06 fc02 	mul.w	ip, r6, r2
 80194e8:	ea6f 0c0c 	mvn.w	ip, ip
 80194ec:	4618      	mov	r0, r3
 80194ee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80194f2:	2f09      	cmp	r7, #9
 80194f4:	d817      	bhi.n	8019526 <_strtoul_l.isra.0+0x96>
 80194f6:	463c      	mov	r4, r7
 80194f8:	42a6      	cmp	r6, r4
 80194fa:	dd23      	ble.n	8019544 <_strtoul_l.isra.0+0xb4>
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	db1e      	blt.n	801953e <_strtoul_l.isra.0+0xae>
 8019500:	4282      	cmp	r2, r0
 8019502:	d31c      	bcc.n	801953e <_strtoul_l.isra.0+0xae>
 8019504:	d101      	bne.n	801950a <_strtoul_l.isra.0+0x7a>
 8019506:	45a4      	cmp	ip, r4
 8019508:	db19      	blt.n	801953e <_strtoul_l.isra.0+0xae>
 801950a:	fb00 4006 	mla	r0, r0, r6, r4
 801950e:	2301      	movs	r3, #1
 8019510:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019514:	e7eb      	b.n	80194ee <_strtoul_l.isra.0+0x5e>
 8019516:	462f      	mov	r7, r5
 8019518:	e7c1      	b.n	801949e <_strtoul_l.isra.0+0xe>
 801951a:	2c2b      	cmp	r4, #43	; 0x2b
 801951c:	bf04      	itt	eq
 801951e:	1cbd      	addeq	r5, r7, #2
 8019520:	787c      	ldrbeq	r4, [r7, #1]
 8019522:	4619      	mov	r1, r3
 8019524:	e7cb      	b.n	80194be <_strtoul_l.isra.0+0x2e>
 8019526:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801952a:	2f19      	cmp	r7, #25
 801952c:	d801      	bhi.n	8019532 <_strtoul_l.isra.0+0xa2>
 801952e:	3c37      	subs	r4, #55	; 0x37
 8019530:	e7e2      	b.n	80194f8 <_strtoul_l.isra.0+0x68>
 8019532:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019536:	2f19      	cmp	r7, #25
 8019538:	d804      	bhi.n	8019544 <_strtoul_l.isra.0+0xb4>
 801953a:	3c57      	subs	r4, #87	; 0x57
 801953c:	e7dc      	b.n	80194f8 <_strtoul_l.isra.0+0x68>
 801953e:	f04f 33ff 	mov.w	r3, #4294967295
 8019542:	e7e5      	b.n	8019510 <_strtoul_l.isra.0+0x80>
 8019544:	2b00      	cmp	r3, #0
 8019546:	da09      	bge.n	801955c <_strtoul_l.isra.0+0xcc>
 8019548:	2322      	movs	r3, #34	; 0x22
 801954a:	f8c8 3000 	str.w	r3, [r8]
 801954e:	f04f 30ff 	mov.w	r0, #4294967295
 8019552:	f1ba 0f00 	cmp.w	sl, #0
 8019556:	d107      	bne.n	8019568 <_strtoul_l.isra.0+0xd8>
 8019558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801955c:	b101      	cbz	r1, 8019560 <_strtoul_l.isra.0+0xd0>
 801955e:	4240      	negs	r0, r0
 8019560:	f1ba 0f00 	cmp.w	sl, #0
 8019564:	d0f8      	beq.n	8019558 <_strtoul_l.isra.0+0xc8>
 8019566:	b10b      	cbz	r3, 801956c <_strtoul_l.isra.0+0xdc>
 8019568:	f105 39ff 	add.w	r9, r5, #4294967295
 801956c:	f8ca 9000 	str.w	r9, [sl]
 8019570:	e7f2      	b.n	8019558 <_strtoul_l.isra.0+0xc8>
 8019572:	2430      	movs	r4, #48	; 0x30
 8019574:	2e00      	cmp	r6, #0
 8019576:	d1b0      	bne.n	80194da <_strtoul_l.isra.0+0x4a>
 8019578:	2608      	movs	r6, #8
 801957a:	e7ae      	b.n	80194da <_strtoul_l.isra.0+0x4a>
 801957c:	2c30      	cmp	r4, #48	; 0x30
 801957e:	d0a4      	beq.n	80194ca <_strtoul_l.isra.0+0x3a>
 8019580:	260a      	movs	r6, #10
 8019582:	e7aa      	b.n	80194da <_strtoul_l.isra.0+0x4a>

08019584 <_strtoul_r>:
 8019584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019586:	4c06      	ldr	r4, [pc, #24]	; (80195a0 <_strtoul_r+0x1c>)
 8019588:	4d06      	ldr	r5, [pc, #24]	; (80195a4 <_strtoul_r+0x20>)
 801958a:	6824      	ldr	r4, [r4, #0]
 801958c:	6a24      	ldr	r4, [r4, #32]
 801958e:	2c00      	cmp	r4, #0
 8019590:	bf08      	it	eq
 8019592:	462c      	moveq	r4, r5
 8019594:	9400      	str	r4, [sp, #0]
 8019596:	f7ff ff7b 	bl	8019490 <_strtoul_l.isra.0>
 801959a:	b003      	add	sp, #12
 801959c:	bd30      	pop	{r4, r5, pc}
 801959e:	bf00      	nop
 80195a0:	2000000c 	.word	0x2000000c
 80195a4:	20000070 	.word	0x20000070

080195a8 <__submore>:
 80195a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195ac:	460c      	mov	r4, r1
 80195ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80195b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80195b4:	4299      	cmp	r1, r3
 80195b6:	d11d      	bne.n	80195f4 <__submore+0x4c>
 80195b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80195bc:	f7ff fa66 	bl	8018a8c <_malloc_r>
 80195c0:	b918      	cbnz	r0, 80195ca <__submore+0x22>
 80195c2:	f04f 30ff 	mov.w	r0, #4294967295
 80195c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80195ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80195d0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80195d4:	6360      	str	r0, [r4, #52]	; 0x34
 80195d6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80195da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80195de:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80195e2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80195e6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80195ea:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80195ee:	6020      	str	r0, [r4, #0]
 80195f0:	2000      	movs	r0, #0
 80195f2:	e7e8      	b.n	80195c6 <__submore+0x1e>
 80195f4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80195f6:	0077      	lsls	r7, r6, #1
 80195f8:	463a      	mov	r2, r7
 80195fa:	f000 f837 	bl	801966c <_realloc_r>
 80195fe:	4605      	mov	r5, r0
 8019600:	2800      	cmp	r0, #0
 8019602:	d0de      	beq.n	80195c2 <__submore+0x1a>
 8019604:	eb00 0806 	add.w	r8, r0, r6
 8019608:	4601      	mov	r1, r0
 801960a:	4632      	mov	r2, r6
 801960c:	4640      	mov	r0, r8
 801960e:	f7fb fe8b 	bl	8015328 <memcpy>
 8019612:	f8c4 8000 	str.w	r8, [r4]
 8019616:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801961a:	e7e9      	b.n	80195f0 <__submore+0x48>

0801961c <__ascii_wctomb>:
 801961c:	b149      	cbz	r1, 8019632 <__ascii_wctomb+0x16>
 801961e:	2aff      	cmp	r2, #255	; 0xff
 8019620:	bf85      	ittet	hi
 8019622:	238a      	movhi	r3, #138	; 0x8a
 8019624:	6003      	strhi	r3, [r0, #0]
 8019626:	700a      	strbls	r2, [r1, #0]
 8019628:	f04f 30ff 	movhi.w	r0, #4294967295
 801962c:	bf98      	it	ls
 801962e:	2001      	movls	r0, #1
 8019630:	4770      	bx	lr
 8019632:	4608      	mov	r0, r1
 8019634:	4770      	bx	lr

08019636 <memmove>:
 8019636:	4288      	cmp	r0, r1
 8019638:	b510      	push	{r4, lr}
 801963a:	eb01 0302 	add.w	r3, r1, r2
 801963e:	d807      	bhi.n	8019650 <memmove+0x1a>
 8019640:	1e42      	subs	r2, r0, #1
 8019642:	4299      	cmp	r1, r3
 8019644:	d00a      	beq.n	801965c <memmove+0x26>
 8019646:	f811 4b01 	ldrb.w	r4, [r1], #1
 801964a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801964e:	e7f8      	b.n	8019642 <memmove+0xc>
 8019650:	4283      	cmp	r3, r0
 8019652:	d9f5      	bls.n	8019640 <memmove+0xa>
 8019654:	1881      	adds	r1, r0, r2
 8019656:	1ad2      	subs	r2, r2, r3
 8019658:	42d3      	cmn	r3, r2
 801965a:	d100      	bne.n	801965e <memmove+0x28>
 801965c:	bd10      	pop	{r4, pc}
 801965e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019662:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019666:	e7f7      	b.n	8019658 <memmove+0x22>

08019668 <__malloc_lock>:
 8019668:	4770      	bx	lr

0801966a <__malloc_unlock>:
 801966a:	4770      	bx	lr

0801966c <_realloc_r>:
 801966c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801966e:	4607      	mov	r7, r0
 8019670:	4614      	mov	r4, r2
 8019672:	460e      	mov	r6, r1
 8019674:	b921      	cbnz	r1, 8019680 <_realloc_r+0x14>
 8019676:	4611      	mov	r1, r2
 8019678:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801967c:	f7ff ba06 	b.w	8018a8c <_malloc_r>
 8019680:	b922      	cbnz	r2, 801968c <_realloc_r+0x20>
 8019682:	f7ff f9b5 	bl	80189f0 <_free_r>
 8019686:	4625      	mov	r5, r4
 8019688:	4628      	mov	r0, r5
 801968a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801968c:	f000 f814 	bl	80196b8 <_malloc_usable_size_r>
 8019690:	42a0      	cmp	r0, r4
 8019692:	d20f      	bcs.n	80196b4 <_realloc_r+0x48>
 8019694:	4621      	mov	r1, r4
 8019696:	4638      	mov	r0, r7
 8019698:	f7ff f9f8 	bl	8018a8c <_malloc_r>
 801969c:	4605      	mov	r5, r0
 801969e:	2800      	cmp	r0, #0
 80196a0:	d0f2      	beq.n	8019688 <_realloc_r+0x1c>
 80196a2:	4631      	mov	r1, r6
 80196a4:	4622      	mov	r2, r4
 80196a6:	f7fb fe3f 	bl	8015328 <memcpy>
 80196aa:	4631      	mov	r1, r6
 80196ac:	4638      	mov	r0, r7
 80196ae:	f7ff f99f 	bl	80189f0 <_free_r>
 80196b2:	e7e9      	b.n	8019688 <_realloc_r+0x1c>
 80196b4:	4635      	mov	r5, r6
 80196b6:	e7e7      	b.n	8019688 <_realloc_r+0x1c>

080196b8 <_malloc_usable_size_r>:
 80196b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80196bc:	1f18      	subs	r0, r3, #4
 80196be:	2b00      	cmp	r3, #0
 80196c0:	bfbc      	itt	lt
 80196c2:	580b      	ldrlt	r3, [r1, r0]
 80196c4:	18c0      	addlt	r0, r0, r3
 80196c6:	4770      	bx	lr

080196c8 <_init>:
 80196c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196ca:	bf00      	nop
 80196cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196ce:	bc08      	pop	{r3}
 80196d0:	469e      	mov	lr, r3
 80196d2:	4770      	bx	lr

080196d4 <_fini>:
 80196d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196d6:	bf00      	nop
 80196d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80196da:	bc08      	pop	{r3}
 80196dc:	469e      	mov	lr, r3
 80196de:	4770      	bx	lr
