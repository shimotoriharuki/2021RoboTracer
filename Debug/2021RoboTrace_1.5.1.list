
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019aec  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009fc  08019cb0  08019cb0  00029cb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a6ac  0801a6ac  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a6ac  0801a6ac  0002a6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a6b4  0801a6b4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a6b4  0801a6b4  0002a6b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a6bc  0801a6bc  0002a6bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a6c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00046ac0  200001e0  0801a89c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20046ca0  0801a89c  00036ca0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b156  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c2f  00000000  00000000  0006b362  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002340  00000000  00000000  00072f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002070  00000000  00000000  000752d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354b4  00000000  00000000  00077348  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000265c9  00000000  00000000  000ac7fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001110a4  00000000  00000000  000d2dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3e69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a764  00000000  00000000  001e3ee4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019c94 	.word	0x08019c94

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019c94 	.word	0x08019c94

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a fb02 	bl	800b5e0 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20044798 	.word	0x20044798

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a faea 	bl	800b5e0 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20044798 	.word	0x20044798

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a f98b 	bl	800b33c <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fef2 	bl	8009e10 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 feec 	bl	8009e10 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fee6 	bl	8009e10 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fee0 	bl	8009e10 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 feda 	bl	8009e10 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fed4 	bl	8009e10 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fece 	bl	8009e10 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fec8 	bl	8009e10 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fec2 	bl	8009e10 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 febc 	bl	8009e10 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 feb0 	bl	8009e10 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 feaa 	bl	8009e10 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 f97d 	bl	8017428 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d ffba 	bl	800f170 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d ffb6 	bl	800f170 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d ffb2 	bl	800f170 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d ffae 	bl	800f170 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20044884 	.word	0x20044884
 8001248:	200447ec 	.word	0x200447ec
 800124c:	2004490c 	.word	0x2004490c

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20044884 	.word	0x20044884
 800137c:	2004490c 	.word	0x2004490c
 8001380:	200447ec 	.word	0x200447ec

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20044884 	.word	0x20044884
 80013c4:	200447ec 	.word	0x200447ec
 80013c8:	2004490c 	.word	0x2004490c

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d ff6e 	bl	800f310 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d ff6a 	bl	800f310 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200449ec 	.word	0x200449ec
 8001458:	200446d0 	.word	0x200446d0
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	ee07 3a90 	vmov	s15, r3
}
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f9d8 	bl	8001b58 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80017a8:	f000 f9ec 	bl	8001b84 <fopen_folder_and_file>

	return ret;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <user_fclose+0x1c>)
 80017c4:	f012 fafe 	bl	8013dc4 <f_close>

	return ret;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200435dc 	.word	0x200435dc

080017d8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
 80017f0:	e030      	b.n	8001854 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feba 	bl	8000578 <__aeabi_f2d>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	e9cd 3400 	strd	r3, r4, [sp]
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <sd_write_float+0x94>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <sd_write_float+0x98>)
 8001812:	f014 febd 	bl	8016590 <sniprintf>

		if(state == ADD_WRITE){
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <sd_write_float+0x9c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <sd_write_float+0x9c>)
 8001824:	f012 fb42 	bl	8013eac <f_lseek>
 8001828:	e003      	b.n	8001832 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800182a:	2100      	movs	r1, #0
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <sd_write_float+0x9c>)
 800182e:	f012 fb3d 	bl	8013eac <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <sd_write_float+0x98>)
 8001834:	f7fe fce4 	bl	8000200 <strlen>
 8001838:	4602      	mov	r2, r0
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <sd_write_float+0xa0>)
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <sd_write_float+0x98>)
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <sd_write_float+0x9c>)
 8001840:	f012 f8ab 	bl	801399a <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001844:	f000 f9b8 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184c:	b29b      	uxth	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	81fb      	strh	r3, [r7, #14]
 8001854:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbc8      	blt.n	80017f2 <sd_write_float+0x1a>
	}
	return ret;
 8001860:	7b7b      	ldrb	r3, [r7, #13]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	08019cb0 	.word	0x08019cb0
 8001870:	2004354c 	.word	0x2004354c
 8001874:	200435dc 	.word	0x200435dc
 8001878:	200435cc 	.word	0x200435cc

0800187c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f960 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d108      	bne.n	80018b2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80018a0:	4822      	ldr	r0, [pc, #136]	; (800192c <sd_write_array_float+0xb0>)
 80018a2:	f012 fab9 	bl	8013e18 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80018a6:	4822      	ldr	r0, [pc, #136]	; (8001930 <sd_write_array_float+0xb4>)
 80018a8:	f012 fd24 	bl	80142f4 <f_unlink>
		f_chdir("..");
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <sd_write_array_float+0xb8>)
 80018ae:	f012 fab3 	bl	8013e18 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80018b2:	f000 f967 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80018b6:	2300      	movs	r3, #0
 80018b8:	82fb      	strh	r3, [r7, #22]
 80018ba:	e028      	b.n	800190e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80018bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe55 	bl	8000578 <__aeabi_f2d>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	e9cd 3400 	strd	r3, r4, [sp]
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <sd_write_array_float+0xbc>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <sd_write_array_float+0xc0>)
 80018dc:	f014 fe58 	bl	8016590 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <sd_write_array_float+0xc4>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4816      	ldr	r0, [pc, #88]	; (8001940 <sd_write_array_float+0xc4>)
 80018e8:	f012 fae0 	bl	8013eac <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <sd_write_array_float+0xc0>)
 80018ee:	f7fe fc87 	bl	8000200 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <sd_write_array_float+0xc8>)
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <sd_write_array_float+0xc0>)
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <sd_write_array_float+0xc4>)
 80018fa:	f012 f84e 	bl	801399a <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018fe:	f000 f95b 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001902:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
 800190e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbd0      	blt.n	80018bc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <sd_write_array_float+0xc4>)
 800191c:	f012 fa52 	bl	8013dc4 <f_close>

	return ret;
 8001920:	7d7b      	ldrb	r3, [r7, #21]
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	2004344c 	.word	0x2004344c
 8001930:	2004230c 	.word	0x2004230c
 8001934:	08019ccc 	.word	0x08019ccc
 8001938:	08019cb0 	.word	0x08019cb0
 800193c:	2004354c 	.word	0x2004354c
 8001940:	200435dc 	.word	0x200435dc
 8001944:	200435cc 	.word	0x200435cc

08001948 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f8f8 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001968:	f000 f90c 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800196c:	e019      	b.n	80019a2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800196e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4913      	ldr	r1, [pc, #76]	; (80019c8 <sd_read_array_float+0x80>)
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <sd_read_array_float+0x84>)
 800197e:	f014 fe5b 	bl	8016638 <siscanf>
		i++;
 8001982:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001986:	b29b      	uxth	r3, r3
 8001988:	3301      	adds	r3, #1
 800198a:	b29b      	uxth	r3, r3
 800198c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800198e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	db03      	blt.n	80019a2 <sd_read_array_float+0x5a>
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3b01      	subs	r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <sd_read_array_float+0x88>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <sd_read_array_float+0x84>)
 80019a8:	f012 fe82 	bl	80146b0 <f_gets>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1dd      	bne.n	800196e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019b2:	f000 f901 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <sd_read_array_float+0x88>)
 80019b8:	f012 fa04 	bl	8013dc4 <f_close>

	return ret;
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08019cbc 	.word	0x08019cbc
 80019cc:	2004354c 	.word	0x2004354c
 80019d0:	200435dc 	.word	0x200435dc

080019d4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f8b2 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019f4:	f000 f8c6 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019f8:	e019      	b.n	8001a2e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4913      	ldr	r1, [pc, #76]	; (8001a54 <sd_read_array_double+0x80>)
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <sd_read_array_double+0x84>)
 8001a0a:	f014 fe15 	bl	8016638 <siscanf>
		i++;
 8001a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	db03      	blt.n	8001a2e <sd_read_array_double+0x5a>
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <sd_read_array_double+0x88>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4809      	ldr	r0, [pc, #36]	; (8001a58 <sd_read_array_double+0x84>)
 8001a34:	f012 fe3c 	bl	80146b0 <f_gets>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1dd      	bne.n	80019fa <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a3e:	f000 f8bb 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <sd_read_array_double+0x88>)
 8001a44:	f012 f9be 	bl	8013dc4 <f_close>

	return ret;
 8001a48:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08019cc8 	.word	0x08019cc8
 8001a58:	2004354c 	.word	0x2004354c
 8001a5c:	200435dc 	.word	0x200435dc

08001a60 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int16_t *data, char state){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f86e 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001a7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d108      	bne.n	8001a96 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001a84:	481f      	ldr	r0, [pc, #124]	; (8001b04 <sd_write_array_int+0xa4>)
 8001a86:	f012 f9c7 	bl	8013e18 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001a8a:	481f      	ldr	r0, [pc, #124]	; (8001b08 <sd_write_array_int+0xa8>)
 8001a8c:	f012 fc32 	bl	80142f4 <f_unlink>
		f_chdir("..");
 8001a90:	481e      	ldr	r0, [pc, #120]	; (8001b0c <sd_write_array_int+0xac>)
 8001a92:	f012 f9c1 	bl	8013e18 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001a96:	f000 f875 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	82fb      	strh	r3, [r7, #22]
 8001a9e:	e022      	b.n	8001ae6 <sd_write_array_int+0x86>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001aa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <sd_write_array_int+0xb0>)
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	4818      	ldr	r0, [pc, #96]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ab4:	f014 fd6c 	bl	8016590 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <sd_write_array_int+0xb8>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4816      	ldr	r0, [pc, #88]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ac0:	f012 f9f4 	bl	8013eac <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001ac4:	4813      	ldr	r0, [pc, #76]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ac6:	f7fe fb9b 	bl	8000200 <strlen>
 8001aca:	4602      	mov	r2, r0
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <sd_write_array_int+0xbc>)
 8001ace:	4911      	ldr	r1, [pc, #68]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ad0:	4811      	ldr	r0, [pc, #68]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ad2:	f011 ff62 	bl	801399a <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001ad6:	f000 f86f 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001ada:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	82fb      	strh	r3, [r7, #22]
 8001ae6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbd6      	blt.n	8001aa0 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <sd_write_array_int+0xb8>)
 8001af4:	f012 f966 	bl	8013dc4 <f_close>

	return ret;
 8001af8:	7d7b      	ldrb	r3, [r7, #21]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2004344c 	.word	0x2004344c
 8001b08:	2004230c 	.word	0x2004230c
 8001b0c:	08019ccc 	.word	0x08019ccc
 8001b10:	08019cd0 	.word	0x08019cd0
 8001b14:	2004354c 	.word	0x2004354c
 8001b18:	200435dc 	.word	0x200435dc
 8001b1c:	200435cc 	.word	0x200435cc

08001b20 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4908      	ldr	r1, [pc, #32]	; (8001b50 <sd_mount+0x30>)
 8001b2e:	4809      	ldr	r0, [pc, #36]	; (8001b54 <sd_mount+0x34>)
 8001b30:	f011 fbc0 	bl	80132b4 <f_mount>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <sd_mount+0x20>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	e001      	b.n	8001b44 <sd_mount+0x24>
	else ret = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001b44:	79fb      	ldrb	r3, [r7, #7]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	08019cd8 	.word	0x08019cd8
 8001b54:	2004240c 	.word	0x2004240c

08001b58 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <create_path+0x24>)
 8001b66:	f014 fd93 	bl	8016690 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <create_path+0x28>)
 8001b6e:	f014 fd8f 	bl	8016690 <strcpy>

}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2004344c 	.word	0x2004344c
 8001b80:	2004230c 	.word	0x2004230c

08001b84 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b8a:	f012 fc75 	bl	8014478 <f_mkdir>

	f_chdir(dirpath);
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b90:	f012 f942 	bl	8013e18 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001b94:	2213      	movs	r2, #19
 8001b96:	4905      	ldr	r1, [pc, #20]	; (8001bac <fopen_folder_and_file+0x28>)
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <fopen_folder_and_file+0x2c>)
 8001b9a:	f011 fbd1 	bl	8013340 <f_open>

	f_chdir("..");
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <fopen_folder_and_file+0x30>)
 8001ba0:	f012 f93a 	bl	8013e18 <f_chdir>


}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	2004344c 	.word	0x2004344c
 8001bac:	2004230c 	.word	0x2004230c
 8001bb0:	200435dc 	.word	0x200435dc
 8001bb4:	08019ccc 	.word	0x08019ccc

08001bb8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	e007      	b.n	8001bd4 <bufclear+0x1c>
		buffer[i] = '\0';
 8001bc4:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <bufclear+0x30>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8001bd8:	ddf4      	ble.n	8001bc4 <bufclear+0xc>
	}
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	2004354c 	.word	0x2004354c

08001bec <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c06:	480e      	ldr	r0, [pc, #56]	; (8001c40 <read_byte+0x54>)
 8001c08:	f009 fb98 	bl	800b33c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c0c:	f107 010f 	add.w	r1, r7, #15
 8001c10:	2364      	movs	r3, #100	; 0x64
 8001c12:	2201      	movs	r2, #1
 8001c14:	480b      	ldr	r0, [pc, #44]	; (8001c44 <read_byte+0x58>)
 8001c16:	f00c fd41 	bl	800e69c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001c1a:	f107 010e 	add.w	r1, r7, #14
 8001c1e:	2364      	movs	r3, #100	; 0x64
 8001c20:	2201      	movs	r2, #1
 8001c22:	4808      	ldr	r0, [pc, #32]	; (8001c44 <read_byte+0x58>)
 8001c24:	f00c fe6e 	bl	800e904 <HAL_SPI_Receive>
	CS_SET;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2e:	4804      	ldr	r0, [pc, #16]	; (8001c40 <read_byte+0x54>)
 8001c30:	f009 fb84 	bl	800b33c <HAL_GPIO_WritePin>

	return val;
 8001c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020400 	.word	0x40020400
 8001c44:	20044678 	.word	0x20044678

08001c48 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <write_byte+0x54>)
 8001c6a:	f009 fb67 	bl	800b33c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c6e:	f107 010f 	add.w	r1, r7, #15
 8001c72:	2364      	movs	r3, #100	; 0x64
 8001c74:	2201      	movs	r2, #1
 8001c76:	480a      	ldr	r0, [pc, #40]	; (8001ca0 <write_byte+0x58>)
 8001c78:	f00c fd10 	bl	800e69c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001c7c:	1db9      	adds	r1, r7, #6
 8001c7e:	2364      	movs	r3, #100	; 0x64
 8001c80:	2201      	movs	r2, #1
 8001c82:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <write_byte+0x58>)
 8001c84:	f00c fd0a 	bl	800e69c <HAL_SPI_Transmit>
	CS_SET;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8e:	4803      	ldr	r0, [pc, #12]	; (8001c9c <write_byte+0x54>)
 8001c90:	f009 fb54 	bl	800b33c <HAL_GPIO_WritePin>
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	20044678 	.word	0x20044678

08001ca4 <IMU_init>:

uint16_t IMU_init() {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff ff9c 	bl	8001bec <read_byte>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001cb8:	797b      	ldrb	r3, [r7, #5]
 8001cba:	2be0      	cmp	r3, #224	; 0xe0
 8001cbc:	d119      	bne.n	8001cf2 <IMU_init+0x4e>
		ret = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2006      	movs	r0, #6
 8001cc6:	f7ff ffbf 	bl	8001c48 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001cca:	2110      	movs	r1, #16
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f7ff ffbb 	bl	8001c48 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	207f      	movs	r0, #127	; 0x7f
 8001cd6:	f7ff ffb7 	bl	8001c48 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001cda:	2106      	movs	r1, #6
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff ffb3 	bl	8001c48 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001ce2:	2106      	movs	r1, #6
 8001ce4:	2014      	movs	r0, #20
 8001ce6:	f7ff ffaf 	bl	8001c48 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001cea:	2100      	movs	r1, #0
 8001cec:	207f      	movs	r0, #127	; 0x7f
 8001cee:	f7ff ffab 	bl	8001c48 <write_byte>
	}
	return ret;
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <read_gyro_data>:

void read_gyro_data() {
 8001cfc:	b598      	push	{r3, r4, r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001d00:	2033      	movs	r0, #51	; 0x33
 8001d02:	f7ff ff73 	bl	8001bec <read_byte>
 8001d06:	4603      	mov	r3, r0
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21c      	sxth	r4, r3
 8001d0c:	2034      	movs	r0, #52	; 0x34
 8001d0e:	f7ff ff6d 	bl	8001bec <read_byte>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4323      	orrs	r3, r4
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <read_gyro_data+0x64>)
 8001d1c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001d1e:	2035      	movs	r0, #53	; 0x35
 8001d20:	f7ff ff64 	bl	8001bec <read_byte>
 8001d24:	4603      	mov	r3, r0
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	b21c      	sxth	r4, r3
 8001d2a:	2036      	movs	r0, #54	; 0x36
 8001d2c:	f7ff ff5e 	bl	8001bec <read_byte>
 8001d30:	4603      	mov	r3, r0
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	4323      	orrs	r3, r4
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <read_gyro_data+0x68>)
 8001d3a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001d3c:	2037      	movs	r0, #55	; 0x37
 8001d3e:	f7ff ff55 	bl	8001bec <read_byte>
 8001d42:	4603      	mov	r3, r0
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b21c      	sxth	r4, r3
 8001d48:	2038      	movs	r0, #56	; 0x38
 8001d4a:	f7ff ff4f 	bl	8001bec <read_byte>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	4323      	orrs	r3, r4
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <read_gyro_data+0x6c>)
 8001d58:	801a      	strh	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	bd98      	pop	{r3, r4, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20044614 	.word	0x20044614
 8001d64:	20044612 	.word	0x20044612
 8001d68:	2004460c 	.word	0x2004460c

08001d6c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	805a      	strh	r2, [r3, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	809a      	strh	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	80da      	strh	r2, [r3, #6]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	811a      	strh	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	815a      	strh	r2, [r3, #10]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
{

}
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001db8:	f7ff ff74 	bl	8001ca4 <IMU_init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001dc0:	f7ff f96e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff f97a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001dcc:	4809      	ldr	r0, [pc, #36]	; (8001df4 <_ZN3IMU4initEv+0x44>)
 8001dce:	f7ff f9a1 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff f973 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <_ZN3IMU4initEv+0x48>)
 8001de0:	f7ff f998 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001de8:	f008 f812 	bl	8009e10 <HAL_Delay>

}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	08019cdc 	.word	0x08019cdc
 8001df8:	08019ce8 	.word	0x08019ce8
 8001dfc:	00000000 	.word	0x00000000

08001e00 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001e08:	f7ff ff78 	bl	8001cfc <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <_ZN3IMU12updateValuesEv+0xb8>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	b21a      	sxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001e16:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <_ZN3IMU12updateValuesEv+0xbc>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	b21a      	sxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001e20:	4b27      	ldr	r3, [pc, #156]	; (8001ec0 <_ZN3IMU12updateValuesEv+0xc0>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb8f 	bl	8000554 <__aeabi_i2d>
 8001e36:	a31c      	add	r3, pc, #112	; (adr r3, 8001ea8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fbf4 	bl	8000628 <__aeabi_dmul>
 8001e40:	4603      	mov	r3, r0
 8001e42:	460c      	mov	r4, r1
 8001e44:	4625      	mov	r5, r4
 8001e46:	461c      	mov	r4, r3
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb80 	bl	8000554 <__aeabi_i2d>
 8001e54:	a316      	add	r3, pc, #88	; (adr r3, 8001eb0 <_ZN3IMU12updateValuesEv+0xb0>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fbe5 	bl	8000628 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4620      	mov	r0, r4
 8001e64:	4629      	mov	r1, r5
 8001e66:	f7fe fa29 	bl	80002bc <__adddf3>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460c      	mov	r4, r1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4621      	mov	r1, r4
 8001e72:	f7fe fe89 	bl	8000b88 <__aeabi_d2iz>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001e84:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <_ZN3IMU12updateValuesEv+0xc4>)
 8001e86:	801a      	strh	r2, [r3, #0]
	mon_zg= zg_;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <_ZN3IMU12updateValuesEv+0xc8>)
 8001e98:	edc3 7a00 	vstr	s15, [r3]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	eb851eb8 	.word	0xeb851eb8
 8001eac:	3f9eb851 	.word	0x3f9eb851
 8001eb0:	70a3d70a 	.word	0x70a3d70a
 8001eb4:	3fef0a3d 	.word	0x3fef0a3d
 8001eb8:	20044614 	.word	0x20044614
 8001ebc:	20044612 	.word	0x20044612
 8001ec0:	2004460c 	.word	0x2004460c
 8001ec4:	20000214 	.word	0x20000214
 8001ec8:	20000210 	.word	0x20000210
 8001ecc:	00000000 	.word	0x00000000

08001ed0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001ed0:	b5b0      	push	{r4, r5, r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef0:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f7fe fb3f 	bl	8000578 <__aeabi_f2d>
 8001efa:	a316      	add	r3, pc, #88	; (adr r3, 8001f54 <_ZN3IMU8getOmegaEv+0x84>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe fcbc 	bl	800087c <__aeabi_ddiv>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4614      	mov	r4, r2
 8001f0a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f0e:	a313      	add	r3, pc, #76	; (adr r3, 8001f5c <_ZN3IMU8getOmegaEv+0x8c>)
 8001f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe fb86 	bl	8000628 <__aeabi_dmul>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	460c      	mov	r4, r1
 8001f20:	4618      	mov	r0, r3
 8001f22:	4621      	mov	r1, r4
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <_ZN3IMU8getOmegaEv+0x80>)
 8001f2a:	f7fe fca7 	bl	800087c <__aeabi_ddiv>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	460c      	mov	r4, r1
 8001f32:	4618      	mov	r0, r3
 8001f34:	4621      	mov	r1, r4
 8001f36:	f7fe fe6f 	bl	8000c18 <__aeabi_d2f>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	60bb      	str	r3, [r7, #8]

	return omega;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	ee07 3a90 	vmov	s15, r3
}
 8001f44:	eeb0 0a67 	vmov.f32	s0, s15
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40668000 	.word	0x40668000
 8001f54:	66666666 	.word	0x66666666
 8001f58:	40306666 	.word	0x40306666
 8001f5c:	54411744 	.word	0x54411744
 8001f60:	400921fb 	.word	0x400921fb

08001f64 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f66:	b08b      	sub	sp, #44	; 0x2c
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001f6c:	466b      	mov	r3, sp
 8001f6e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f74:	f007 ff4c 	bl	8009e10 <HAL_Delay>
	lcd_clear();
 8001f78:	f7ff f892 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7ff f89e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001f84:	4840      	ldr	r0, [pc, #256]	; (8002088 <_ZN3IMU11calibrationEv+0x124>)
 8001f86:	f7ff f8c5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f7ff f897 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001f92:	483e      	ldr	r0, [pc, #248]	; (800208c <_ZN3IMU11calibrationEv+0x128>)
 8001f94:	f7ff f8be 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001f98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f9c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001f9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fa2:	1e5d      	subs	r5, r3, #1
 8001fa4:	61bd      	str	r5, [r7, #24]
 8001fa6:	462b      	mov	r3, r5
 8001fa8:	3301      	adds	r3, #1
 8001faa:	4619      	mov	r1, r3
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	f04f 0400 	mov.w	r4, #0
 8001fb8:	0154      	lsls	r4, r2, #5
 8001fba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fbe:	014b      	lsls	r3, r1, #5
 8001fc0:	462b      	mov	r3, r5
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 0300 	mov.w	r3, #0
 8001fce:	f04f 0400 	mov.w	r4, #0
 8001fd2:	0154      	lsls	r4, r2, #5
 8001fd4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fd8:	014b      	lsls	r3, r1, #5
 8001fda:	462b      	mov	r3, r5
 8001fdc:	3301      	adds	r3, #1
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	3303      	adds	r3, #3
 8001fe2:	3307      	adds	r3, #7
 8001fe4:	08db      	lsrs	r3, r3, #3
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	ebad 0d03 	sub.w	sp, sp, r3
 8001fec:	466b      	mov	r3, sp
 8001fee:	3303      	adds	r3, #3
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	83fb      	strh	r3, [r7, #30]
 8001ffa:	8bfa      	ldrh	r2, [r7, #30]
 8001ffc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002000:	429a      	cmp	r2, r3
 8002002:	da13      	bge.n	800202c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800200a:	8bfb      	ldrh	r3, [r7, #30]
 800200c:	ee07 2a90 	vmov	s15, r2
 8002010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 800201e:	2002      	movs	r0, #2
 8002020:	f007 fef6 	bl	8009e10 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8002024:	8bfb      	ldrh	r3, [r7, #30]
 8002026:	3301      	adds	r3, #1
 8002028:	83fb      	strh	r3, [r7, #30]
 800202a:	e7e6      	b.n	8001ffa <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	462b      	mov	r3, r5
 8002034:	3301      	adds	r3, #1
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	429a      	cmp	r2, r3
 8002042:	d00e      	beq.n	8002062 <_ZN3IMU11calibrationEv+0xfe>
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	60fb      	str	r3, [r7, #12]
		sum += v;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002056:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	3304      	adds	r3, #4
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
 8002060:	e7ec      	b.n	800203c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8002062:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002066:	ee07 3a90 	vmov	s15, r3
 800206a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800206e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	edc3 7a03 	vstr	s15, [r3, #12]
 800207c:	46b5      	mov	sp, r6
}
 800207e:	bf00      	nop
 8002080:	372c      	adds	r7, #44	; 0x2c
 8002082:	46bd      	mov	sp, r7
 8002084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002086:	bf00      	nop
 8002088:	08019cec 	.word	0x08019cec
 800208c:	08019cf8 	.word	0x08019cf8

08002090 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	4603      	mov	r3, r0
 8002098:	460a      	mov	r2, r1
 800209a:	71fb      	strb	r3, [r7, #7]
 800209c:	4613      	mov	r3, r2
 800209e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 80020a0:	79bb      	ldrb	r3, [r7, #6]
 80020a2:	b299      	uxth	r1, r3
 80020a4:	1dfa      	adds	r2, r7, #7
 80020a6:	2364      	movs	r3, #100	; 0x64
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2301      	movs	r3, #1
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <INA260_read+0x50>)
 80020ae:	f009 fa97 	bl	800b5e0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 80020b2:	79bb      	ldrb	r3, [r7, #6]
 80020b4:	b299      	uxth	r1, r3
 80020b6:	f107 020c 	add.w	r2, r7, #12
 80020ba:	2364      	movs	r3, #100	; 0x64
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2302      	movs	r3, #2
 80020c0:	4807      	ldr	r0, [pc, #28]	; (80020e0 <INA260_read+0x50>)
 80020c2:	f009 fb8b 	bl	800b7dc <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 80020c6:	7b3b      	ldrb	r3, [r7, #12]
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	b21a      	sxth	r2, r3
 80020cc:	7b7b      	ldrb	r3, [r7, #13]
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	4313      	orrs	r3, r2
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	81fb      	strh	r3, [r7, #14]
	return val;
 80020d6:	89fb      	ldrh	r3, [r7, #14]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	2004482c 	.word	0x2004482c

080020e4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b087      	sub	sp, #28
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	4604      	mov	r4, r0
 80020ec:	4608      	mov	r0, r1
 80020ee:	4611      	mov	r1, r2
 80020f0:	461a      	mov	r2, r3
 80020f2:	4623      	mov	r3, r4
 80020f4:	71fb      	strb	r3, [r7, #7]
 80020f6:	4603      	mov	r3, r0
 80020f8:	71bb      	strb	r3, [r7, #6]
 80020fa:	460b      	mov	r3, r1
 80020fc:	717b      	strb	r3, [r7, #5]
 80020fe:	4613      	mov	r3, r2
 8002100:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	733b      	strb	r3, [r7, #12]
 8002106:	79bb      	ldrb	r3, [r7, #6]
 8002108:	737b      	strb	r3, [r7, #13]
 800210a:	797b      	ldrb	r3, [r7, #5]
 800210c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 800210e:	793b      	ldrb	r3, [r7, #4]
 8002110:	b299      	uxth	r1, r3
 8002112:	f107 020c 	add.w	r2, r7, #12
 8002116:	2364      	movs	r3, #100	; 0x64
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2303      	movs	r3, #3
 800211c:	4803      	ldr	r0, [pc, #12]	; (800212c <INA260_write+0x48>)
 800211e:	f009 fa5f 	bl	800b5e0 <HAL_I2C_Master_Transmit>
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bd90      	pop	{r4, r7, pc}
 800212a:	bf00      	nop
 800212c:	2004482c 	.word	0x2004482c

08002130 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
 800213a:	460b      	mov	r3, r1
 800213c:	71bb      	strb	r3, [r7, #6]
 800213e:	4613      	mov	r3, r2
 8002140:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002142:	797b      	ldrb	r3, [r7, #5]
 8002144:	79ba      	ldrb	r2, [r7, #6]
 8002146:	79f9      	ldrb	r1, [r7, #7]
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff ffcb 	bl	80020e4 <INA260_write>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	461a      	mov	r2, r3
 8002164:	21df      	movs	r1, #223	; 0xdf
 8002166:	2000      	movs	r0, #0
 8002168:	f7ff ffe2 	bl	8002130 <setConfig>
}
 800216c:	bf00      	nop
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
{

}
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002198:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800219c:	482a      	ldr	r0, [pc, #168]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 800219e:	f009 f8b5 	bl	800b30c <HAL_GPIO_ReadPin>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <_ZN8JoyStick8getValueEv+0x2e>
 80021b2:	89fb      	ldrh	r3, [r7, #14]
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80021ba:	2101      	movs	r1, #1
 80021bc:	4823      	ldr	r0, [pc, #140]	; (800224c <_ZN8JoyStick8getValueEv+0xc0>)
 80021be:	f009 f8a5 	bl	800b30c <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d003      	beq.n	80021da <_ZN8JoyStick8getValueEv+0x4e>
 80021d2:	89fb      	ldrh	r3, [r7, #14]
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80021da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021de:	481a      	ldr	r0, [pc, #104]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 80021e0:	f009 f894 	bl	800b30c <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <_ZN8JoyStick8getValueEv+0x70>
 80021f4:	89fb      	ldrh	r3, [r7, #14]
 80021f6:	f043 0304 	orr.w	r3, r3, #4
 80021fa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80021fc:	2104      	movs	r1, #4
 80021fe:	4814      	ldr	r0, [pc, #80]	; (8002250 <_ZN8JoyStick8getValueEv+0xc4>)
 8002200:	f009 f884 	bl	800b30c <HAL_GPIO_ReadPin>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <_ZN8JoyStick8getValueEv+0x90>
 8002214:	89fb      	ldrh	r3, [r7, #14]
 8002216:	f043 0308 	orr.w	r3, r3, #8
 800221a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800221c:	2180      	movs	r1, #128	; 0x80
 800221e:	480a      	ldr	r0, [pc, #40]	; (8002248 <_ZN8JoyStick8getValueEv+0xbc>)
 8002220:	f009 f874 	bl	800b30c <HAL_GPIO_ReadPin>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf0c      	ite	eq
 800222a:	2301      	moveq	r3, #1
 800222c:	2300      	movne	r3, #0
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <_ZN8JoyStick8getValueEv+0xb0>
 8002234:	89fb      	ldrh	r3, [r7, #14]
 8002236:	f043 0310 	orr.w	r3, r3, #16
 800223a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800223c:	89fb      	ldrh	r3, [r7, #14]
}
 800223e:	4618      	mov	r0, r3
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000
 800224c:	40020c00 	.word	0x40020c00
 8002250:	40020400 	.word	0x40020400

08002254 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	2b52      	cmp	r3, #82	; 0x52
 8002264:	d112      	bne.n	800228c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800226c:	4856      	ldr	r0, [pc, #344]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800226e:	f009 f865 	bl	800b33c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002272:	2201      	movs	r2, #1
 8002274:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002278:	4853      	ldr	r0, [pc, #332]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800227a:	f009 f85f 	bl	800b33c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800227e:	2201      	movs	r2, #1
 8002280:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002284:	4850      	ldr	r0, [pc, #320]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002286:	f009 f859 	bl	800b33c <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800228a:	e098      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	2b47      	cmp	r3, #71	; 0x47
 8002290:	d112      	bne.n	80022b8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002292:	2201      	movs	r2, #1
 8002294:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002298:	484b      	ldr	r0, [pc, #300]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800229a:	f009 f84f 	bl	800b33c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
 80022a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a4:	4848      	ldr	r0, [pc, #288]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022a6:	f009 f849 	bl	800b33c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022b0:	4845      	ldr	r0, [pc, #276]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022b2:	f009 f843 	bl	800b33c <HAL_GPIO_WritePin>
}
 80022b6:	e082      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	2b42      	cmp	r3, #66	; 0x42
 80022bc:	d112      	bne.n	80022e4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022be:	2201      	movs	r2, #1
 80022c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c4:	4840      	ldr	r0, [pc, #256]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022c6:	f009 f839 	bl	800b33c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022d0:	483d      	ldr	r0, [pc, #244]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022d2:	f009 f833 	bl	800b33c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022dc:	483a      	ldr	r0, [pc, #232]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022de:	f009 f82d 	bl	800b33c <HAL_GPIO_WritePin>
}
 80022e2:	e06c      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80022e4:	78fb      	ldrb	r3, [r7, #3]
 80022e6:	2b43      	cmp	r3, #67	; 0x43
 80022e8:	d112      	bne.n	8002310 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022ea:	2201      	movs	r2, #1
 80022ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022f0:	4835      	ldr	r0, [pc, #212]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022f2:	f009 f823 	bl	800b33c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022fc:	4832      	ldr	r0, [pc, #200]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80022fe:	f009 f81d 	bl	800b33c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002302:	2200      	movs	r2, #0
 8002304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002308:	482f      	ldr	r0, [pc, #188]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800230a:	f009 f817 	bl	800b33c <HAL_GPIO_WritePin>
}
 800230e:	e056      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	2b4d      	cmp	r3, #77	; 0x4d
 8002314:	d112      	bne.n	800233c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002316:	2200      	movs	r2, #0
 8002318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800231c:	482a      	ldr	r0, [pc, #168]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800231e:	f009 f80d 	bl	800b33c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002322:	2201      	movs	r2, #1
 8002324:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002328:	4827      	ldr	r0, [pc, #156]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800232a:	f009 f807 	bl	800b33c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002334:	4824      	ldr	r0, [pc, #144]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002336:	f009 f801 	bl	800b33c <HAL_GPIO_WritePin>
}
 800233a:	e040      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	2b59      	cmp	r3, #89	; 0x59
 8002340:	d112      	bne.n	8002368 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002342:	2200      	movs	r2, #0
 8002344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002348:	481f      	ldr	r0, [pc, #124]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800234a:	f008 fff7 	bl	800b33c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002354:	481c      	ldr	r0, [pc, #112]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002356:	f008 fff1 	bl	800b33c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002360:	4819      	ldr	r0, [pc, #100]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002362:	f008 ffeb 	bl	800b33c <HAL_GPIO_WritePin>
}
 8002366:	e02a      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	2b57      	cmp	r3, #87	; 0x57
 800236c:	d112      	bne.n	8002394 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002374:	4814      	ldr	r0, [pc, #80]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002376:	f008 ffe1 	bl	800b33c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800237a:	2200      	movs	r2, #0
 800237c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002380:	4811      	ldr	r0, [pc, #68]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 8002382:	f008 ffdb 	bl	800b33c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002386:	2200      	movs	r2, #0
 8002388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800238c:	480e      	ldr	r0, [pc, #56]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 800238e:	f008 ffd5 	bl	800b33c <HAL_GPIO_WritePin>
}
 8002392:	e014      	b.n	80023be <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	2b7e      	cmp	r3, #126	; 0x7e
 8002398:	d111      	bne.n	80023be <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800239a:	2201      	movs	r2, #1
 800239c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023a0:	4809      	ldr	r0, [pc, #36]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023a2:	f008 ffcb 	bl	800b33c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80023a6:	2201      	movs	r2, #1
 80023a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ac:	4806      	ldr	r0, [pc, #24]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023ae:	f008 ffc5 	bl	800b33c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80023b2:	2201      	movs	r2, #1
 80023b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023b8:	4803      	ldr	r0, [pc, #12]	; (80023c8 <_ZN3LED9fullColorEc+0x174>)
 80023ba:	f008 ffbf 	bl	800b33c <HAL_GPIO_WritePin>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40020000 	.word	0x40020000

080023cc <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	460b      	mov	r3, r1
 80023d6:	70fb      	strb	r3, [r7, #3]
 80023d8:	4613      	mov	r3, r2
 80023da:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80023dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80023e4:	2201      	movs	r2, #1
 80023e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ea:	4813      	ldr	r0, [pc, #76]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 80023ec:	f008 ffa6 	bl	800b33c <HAL_GPIO_WritePin>
 80023f0:	e009      	b.n	8002406 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80023f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d105      	bne.n	8002406 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80023fa:	2200      	movs	r2, #0
 80023fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002400:	480d      	ldr	r0, [pc, #52]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 8002402:	f008 ff9b 	bl	800b33c <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002406:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d106      	bne.n	800241c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800240e:	2201      	movs	r2, #1
 8002410:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002414:	4808      	ldr	r0, [pc, #32]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 8002416:	f008 ff91 	bl	800b33c <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800241a:	e009      	b.n	8002430 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800241c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002424:	2200      	movs	r2, #0
 8002426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800242a:	4803      	ldr	r0, [pc, #12]	; (8002438 <_ZN3LED2LREaa+0x6c>)
 800242c:	f008 ff86 	bl	800b33c <HAL_GPIO_WritePin>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40020000 	.word	0x40020000

0800243c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800243c:	b580      	push	{r7, lr}
 800243e:	b092      	sub	sp, #72	; 0x48
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff fe92 	bl	8002174 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
 8002454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002456:	647b      	str	r3, [r7, #68]	; 0x44
 8002458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800245a:	331c      	adds	r3, #28
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
 800245e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002462:	429a      	cmp	r2, r3
 8002464:	d008      	beq.n	8002478 <_ZN10LineSensorC1Ev+0x3c>
 8002466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	2200      	movs	r2, #0
 800246e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002472:	3302      	adds	r3, #2
 8002474:	647b      	str	r3, [r7, #68]	; 0x44
 8002476:	e7f2      	b.n	800245e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002482:	643b      	str	r3, [r7, #64]	; 0x40
 8002484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002486:	3338      	adds	r3, #56	; 0x38
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
 800248a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	429a      	cmp	r2, r3
 8002490:	d009      	beq.n	80024a6 <_ZN10LineSensorC1Ev+0x6a>
 8002492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002494:	623b      	str	r3, [r7, #32]
		s = 0;
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800249e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024a0:	3304      	adds	r3, #4
 80024a2:	643b      	str	r3, [r7, #64]	; 0x40
 80024a4:	e7f1      	b.n	800248a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3338      	adds	r3, #56	; 0x38
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d009      	beq.n	80024d4 <_ZN10LineSensorC1Ev+0x98>
 80024c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c2:	617b      	str	r3, [r7, #20]
		m = 0;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80024cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ce:	3304      	adds	r3, #4
 80024d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024d2:	e7f1      	b.n	80024b8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	3338      	adds	r3, #56	; 0x38
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d009      	beq.n	8002502 <_ZN10LineSensorC1Ev+0xc6>
 80024ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024f0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024f8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80024fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fc:	3304      	adds	r3, #4
 80024fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002500:	e7f1      	b.n	80024e6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4618      	mov	r0, r3
 8002506:	3748      	adds	r7, #72	; 0x48
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	220e      	movs	r2, #14
 8002518:	4619      	mov	r1, r3
 800251a:	4803      	ldr	r0, [pc, #12]	; (8002528 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800251c:	f007 fcde 	bl	8009edc <HAL_ADC_Start_DMA>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20044750 	.word	0x20044750

0800252c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002534:	2300      	movs	r3, #0
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b0d      	cmp	r3, #13
 800253c:	dc2f      	bgt.n	800259e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3392      	adds	r3, #146	; 0x92
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	3304      	adds	r3, #4
 800254a:	ed93 7a00 	vldr	s14, [r3]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	33a0      	adds	r3, #160	; 0xa0
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	3304      	adds	r3, #4
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	4619      	mov	r1, r3
 8002578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	460b      	mov	r3, r1
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	1a5b      	subs	r3, r3, r1
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	440b      	add	r3, r1
 800258a:	3306      	adds	r3, #6
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	3304      	adds	r3, #4
 8002592:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3301      	adds	r3, #1
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	e7cc      	b.n	8002538 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	3301      	adds	r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b07      	ldr	r3, [pc, #28]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025a8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b09      	cmp	r3, #9
 80025b0:	d902      	bls.n	80025b8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	701a      	strb	r2, [r3, #0]


}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	20000254 	.word	0x20000254

080025c8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80025c8:	b490      	push	{r4, r7}
 80025ca:	b08e      	sub	sp, #56	; 0x38
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80025d0:	2300      	movs	r3, #0
 80025d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025da:	2b0d      	cmp	r3, #13
 80025dc:	f200 8087 	bhi.w	80026ee <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80025e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025ea:	2b09      	cmp	r3, #9
 80025ec:	d81c      	bhi.n	8002628 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80025ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80025f2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80025f6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4423      	add	r3, r4
 8002606:	3306      	adds	r3, #6
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4403      	add	r3, r0
 800260c:	3304      	adds	r3, #4
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	008b      	lsls	r3, r1, #2
 8002612:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002616:	440b      	add	r3, r1
 8002618:	3b30      	subs	r3, #48	; 0x30
 800261a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800261c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002620:	3301      	adds	r3, #1
 8002622:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002626:	e7de      	b.n	80025e6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002628:	2300      	movs	r3, #0
 800262a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800262e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002632:	2b09      	cmp	r3, #9
 8002634:	d84d      	bhi.n	80026d2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002636:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800263a:	3301      	adds	r3, #1
 800263c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002640:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002644:	2b09      	cmp	r3, #9
 8002646:	d83e      	bhi.n	80026c6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002648:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002652:	4413      	add	r3, r2
 8002654:	3b30      	subs	r3, #48	; 0x30
 8002656:	ed93 7a00 	vldr	s14, [r3]
 800265a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002664:	4413      	add	r3, r2
 8002666:	3b30      	subs	r3, #48	; 0x30
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002674:	d521      	bpl.n	80026ba <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002676:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002680:	4413      	add	r3, r2
 8002682:	3b30      	subs	r3, #48	; 0x30
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002688:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800268c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002690:	0092      	lsls	r2, r2, #2
 8002692:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002696:	440a      	add	r2, r1
 8002698:	3a30      	subs	r2, #48	; 0x30
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80026a2:	440b      	add	r3, r1
 80026a4:	3b30      	subs	r3, #48	; 0x30
 80026a6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80026a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80026b2:	4413      	add	r3, r2
 80026b4:	3b30      	subs	r3, #48	; 0x30
 80026b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026b8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80026ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80026be:	3301      	adds	r3, #1
 80026c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80026c4:	e7bc      	b.n	8002640 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80026c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80026ca:	3301      	adds	r3, #1
 80026cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80026d0:	e7ad      	b.n	800262e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		//sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
		sensor[ad_cnt] = temp_val[5];
 80026d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	33b0      	adds	r3, #176	; 0xb0
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80026e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026e6:	3301      	adds	r3, #1
 80026e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80026ec:	e773      	b.n	80025d6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80026f4:	4a26      	ldr	r2, [pc, #152]	; (8002790 <_ZN10LineSensor18updateSensorValuesEv+0x1c8>)
 80026f6:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80026fe:	4a25      	ldr	r2, [pc, #148]	; (8002794 <_ZN10LineSensor18updateSensorValuesEv+0x1cc>)
 8002700:	6013      	str	r3, [r2, #0]

	mon_sens0 = sensor[0];
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002708:	4a23      	ldr	r2, [pc, #140]	; (8002798 <_ZN10LineSensor18updateSensorValuesEv+0x1d0>)
 800270a:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor[1];
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002712:	4a22      	ldr	r2, [pc, #136]	; (800279c <_ZN10LineSensor18updateSensorValuesEv+0x1d4>)
 8002714:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor[2];
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800271c:	4a20      	ldr	r2, [pc, #128]	; (80027a0 <_ZN10LineSensor18updateSensorValuesEv+0x1d8>)
 800271e:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor[3];
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8002726:	4a1f      	ldr	r2, [pc, #124]	; (80027a4 <_ZN10LineSensor18updateSensorValuesEv+0x1dc>)
 8002728:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor[4];
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8002730:	4a1d      	ldr	r2, [pc, #116]	; (80027a8 <_ZN10LineSensor18updateSensorValuesEv+0x1e0>)
 8002732:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor[5];
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800273a:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <_ZN10LineSensor18updateSensorValuesEv+0x1e4>)
 800273c:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor[6];
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8002744:	4a1a      	ldr	r2, [pc, #104]	; (80027b0 <_ZN10LineSensor18updateSensorValuesEv+0x1e8>)
 8002746:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor[7];
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800274e:	4a19      	ldr	r2, [pc, #100]	; (80027b4 <_ZN10LineSensor18updateSensorValuesEv+0x1ec>)
 8002750:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor[8];
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002758:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <_ZN10LineSensor18updateSensorValuesEv+0x1f0>)
 800275a:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor[9];
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8002762:	4a16      	ldr	r2, [pc, #88]	; (80027bc <_ZN10LineSensor18updateSensorValuesEv+0x1f4>)
 8002764:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor[10];
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800276c:	4a14      	ldr	r2, [pc, #80]	; (80027c0 <_ZN10LineSensor18updateSensorValuesEv+0x1f8>)
 800276e:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor[11];
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8002776:	4a13      	ldr	r2, [pc, #76]	; (80027c4 <_ZN10LineSensor18updateSensorValuesEv+0x1fc>)
 8002778:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor[12];
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8002780:	4a11      	ldr	r2, [pc, #68]	; (80027c8 <_ZN10LineSensor18updateSensorValuesEv+0x200>)
 8002782:	6013      	str	r3, [r2, #0]
}
 8002784:	bf00      	nop
 8002786:	3738      	adds	r7, #56	; 0x38
 8002788:	46bd      	mov	sp, r7
 800278a:	bc90      	pop	{r4, r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000218 	.word	0x20000218
 8002794:	2000021c 	.word	0x2000021c
 8002798:	20000220 	.word	0x20000220
 800279c:	20000224 	.word	0x20000224
 80027a0:	20000228 	.word	0x20000228
 80027a4:	2000022c 	.word	0x2000022c
 80027a8:	20000230 	.word	0x20000230
 80027ac:	20000234 	.word	0x20000234
 80027b0:	20000238 	.word	0x20000238
 80027b4:	2000023c 	.word	0x2000023c
 80027b8:	20000240 	.word	0x20000240
 80027bc:	20000244 	.word	0x20000244
 80027c0:	20000248 	.word	0x20000248
 80027c4:	2000024c 	.word	0x2000024c
 80027c8:	20000250 	.word	0x20000250

080027cc <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b0a0      	sub	sp, #128	; 0x80
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80027d4:	2064      	movs	r0, #100	; 0x64
 80027d6:	f007 fb1b 	bl	8009e10 <HAL_Delay>

	lcd_clear();
 80027da:	f7fe fc61 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80027de:	2100      	movs	r1, #0
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7fe fc6d 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80027e6:	4886      	ldr	r0, [pc, #536]	; (8002a00 <_ZN10LineSensor11calibrationEv+0x234>)
 80027e8:	f7fe fc94 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80027ec:	2101      	movs	r1, #1
 80027ee:	2000      	movs	r0, #0
 80027f0:	f7fe fc66 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80027f4:	4883      	ldr	r0, [pc, #524]	; (8002a04 <_ZN10LineSensor11calibrationEv+0x238>)
 80027f6:	f7fe fc8d 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027fa:	2300      	movs	r3, #0
 80027fc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002800:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002804:	2b0d      	cmp	r3, #13
 8002806:	d823      	bhi.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002808:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800280c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	32b0      	adds	r2, #176	; 0xb0
 8002814:	0092      	lsls	r2, r2, #2
 8002816:	440a      	add	r2, r1
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002820:	440b      	add	r3, r1
 8002822:	3b40      	subs	r3, #64	; 0x40
 8002824:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002826:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800282a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	32b0      	adds	r2, #176	; 0xb0
 8002832:	0092      	lsls	r2, r2, #2
 8002834:	440a      	add	r2, r1
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800283e:	440b      	add	r3, r1
 8002840:	3b78      	subs	r3, #120	; 0x78
 8002842:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002844:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002848:	3301      	adds	r3, #1
 800284a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800284e:	e7d7      	b.n	8002800 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fc98 	bl	800218c <_ZN8JoyStick8getValueEv>
 800285c:	4603      	mov	r3, r0
 800285e:	2b02      	cmp	r3, #2
 8002860:	bf14      	ite	ne
 8002862:	2301      	movne	r3, #1
 8002864:	2300      	moveq	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d079      	beq.n	8002960 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800286c:	2300      	movs	r3, #0
 800286e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002872:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002876:	2b0d      	cmp	r3, #13
 8002878:	d850      	bhi.n	800291c <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800287a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002884:	4413      	add	r3, r2
 8002886:	3b40      	subs	r3, #64	; 0x40
 8002888:	ed93 7a00 	vldr	s14, [r3]
 800288c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	33b0      	adds	r3, #176	; 0xb0
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a4:	d50f      	bpl.n	80028c6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80028a6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028aa:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	32b0      	adds	r2, #176	; 0xb0
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	440a      	add	r2, r1
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80028be:	440b      	add	r3, r1
 80028c0:	3b40      	subs	r3, #64	; 0x40
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e024      	b.n	8002910 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80028c6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028d0:	4413      	add	r3, r2
 80028d2:	3b78      	subs	r3, #120	; 0x78
 80028d4:	ed93 7a00 	vldr	s14, [r3]
 80028d8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	33b0      	adds	r3, #176	; 0xb0
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f0:	dd0e      	ble.n	8002910 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80028f2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028f6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	32b0      	adds	r2, #176	; 0xb0
 80028fe:	0092      	lsls	r2, r2, #2
 8002900:	440a      	add	r2, r1
 8002902:	6812      	ldr	r2, [r2, #0]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800290a:	440b      	add	r3, r1
 800290c:	3b78      	subs	r3, #120	; 0x78
 800290e:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002910:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002914:	3301      	adds	r3, #1
 8002916:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800291a:	e7aa      	b.n	8002872 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002922:	4618      	mov	r0, r3
 8002924:	f002 fd8a 	bl	800543c <_ZN12RotarySwitch8getValueEv>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	bf0c      	ite	eq
 800292e:	2301      	moveq	r3, #1
 8002930:	2300      	movne	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d009      	beq.n	800294c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800293e:	2201      	movs	r2, #1
 8002940:	f04f 31ff 	mov.w	r1, #4294967295
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fd41 	bl	80023cc <_ZN3LED2LREaa>
 800294a:	e781      	b.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002952:	2200      	movs	r2, #0
 8002954:	f04f 31ff 	mov.w	r1, #4294967295
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fd37 	bl	80023cc <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800295e:	e777      	b.n	8002850 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002960:	2300      	movs	r3, #0
 8002962:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002966:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800296a:	2b0d      	cmp	r3, #13
 800296c:	d826      	bhi.n	80029bc <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800296e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002978:	4413      	add	r3, r2
 800297a:	3b40      	subs	r3, #64	; 0x40
 800297c:	ed93 7a00 	vldr	s14, [r3]
 8002980:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800298a:	4413      	add	r3, r2
 800298c:	3b78      	subs	r3, #120	; 0x78
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002996:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800299a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002a08 <_ZN10LineSensor11calibrationEv+0x23c>
 800299e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	3392      	adds	r3, #146	; 0x92
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	3304      	adds	r3, #4
 80029ac:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029b0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029b4:	3301      	adds	r3, #1
 80029b6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80029ba:	e7d4      	b.n	8002966 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029bc:	2300      	movs	r3, #0
 80029be:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029c2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029c6:	2b0d      	cmp	r3, #13
 80029c8:	d815      	bhi.n	80029f6 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80029ca:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80029ce:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029d2:	0092      	lsls	r2, r2, #2
 80029d4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80029d8:	440a      	add	r2, r1
 80029da:	3a78      	subs	r2, #120	; 0x78
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	33a0      	adds	r3, #160	; 0xa0
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3304      	adds	r3, #4
 80029e8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029ea:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029ee:	3301      	adds	r3, #1
 80029f0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029f4:	e7e5      	b.n	80029c2 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80029f6:	bf00      	nop
 80029f8:	3780      	adds	r7, #128	; 0x80
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	08019d04 	.word	0x08019d04
 8002a04:	08019d10 	.word	0x08019d10
 8002a08:	447a0000 	.word	0x447a0000

08002a0c <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002a18:	2303      	movs	r3, #3
 8002a1a:	81bb      	strh	r3, [r7, #12]
 8002a1c:	89bb      	ldrh	r3, [r7, #12]
 8002a1e:	2b0a      	cmp	r3, #10
 8002a20:	d814      	bhi.n	8002a4c <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 8002a22:	89bb      	ldrh	r3, [r7, #12]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	33b0      	adds	r3, #176	; 0xb0
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	edd3 7a00 	vldr	s15, [r3]
 8002a30:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002aa0 <_ZN10LineSensor13emergencyStopEv+0x94>
 8002a34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	db02      	blt.n	8002a44 <_ZN10LineSensor13emergencyStopEv+0x38>
 8002a3e:	89fb      	ldrh	r3, [r7, #14]
 8002a40:	3301      	adds	r3, #1
 8002a42:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002a44:	89bb      	ldrh	r3, [r7, #12]
 8002a46:	3301      	adds	r3, #1
 8002a48:	81bb      	strh	r3, [r7, #12]
 8002a4a:	e7e7      	b.n	8002a1c <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002a4c:	89fb      	ldrh	r3, [r7, #14]
 8002a4e:	2b07      	cmp	r3, #7
 8002a50:	d906      	bls.n	8002a60 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	3301      	adds	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a5c:	801a      	strh	r2, [r3, #0]
 8002a5e:	e002      	b.n	8002a66 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002a66:	4b0f      	ldr	r3, [pc, #60]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a68:	881b      	ldrh	r3, [r3, #0]
 8002a6a:	2b63      	cmp	r3, #99	; 0x63
 8002a6c:	d903      	bls.n	8002a76 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e002      	b.n	8002a7c <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d903      	bls.n	8002a90 <_ZN10LineSensor13emergencyStopEv+0x84>
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a8e:	801a      	strh	r2, [r3, #0]

	return flag;
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a92:	781b      	ldrb	r3, [r3, #0]

}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	44098000 	.word	0x44098000
 8002aa4:	20000256 	.word	0x20000256
 8002aa8:	20000258 	.word	0x20000258

08002aac <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ab6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aba:	eef0 7ae7 	vabs.f32	s15, s15
 8002abe:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002acc:	b480      	push	{r7}
 8002ace:	b087      	sub	sp, #28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002b4a:	330c      	adds	r3, #12
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b58:	3350      	adds	r3, #80	; 0x50
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b64:	3352      	adds	r3, #82	; 0x52
 8002b66:	2200      	movs	r2, #0
 8002b68:	801a      	strh	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b70:	3354      	adds	r3, #84	; 0x54
 8002b72:	2200      	movs	r2, #0
 8002b74:	801a      	strh	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b7c:	3388      	adds	r3, #136	; 0x88
 8002b7e:	2200      	movs	r2, #0
 8002b80:	801a      	strh	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b88:	338a      	adds	r3, #138	; 0x8a
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b94:	338c      	adds	r3, #140	; 0x8c
 8002b96:	2200      	movs	r2, #0
 8002b98:	801a      	strh	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ba0:	338e      	adds	r3, #142	; 0x8e
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bac:	338f      	adds	r3, #143	; 0x8f
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bb8:	3390      	adds	r3, #144	; 0x90
 8002bba:	2200      	movs	r2, #0
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bc4:	3394      	adds	r3, #148	; 0x94
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bd2:	3398      	adds	r3, #152	; 0x98
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002be0:	339c      	adds	r3, #156	; 0x9c
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bee:	33a0      	adds	r3, #160	; 0xa0
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bfc:	33a4      	adds	r3, #164	; 0xa4
 8002bfe:	2200      	movs	r2, #0
 8002c00:	801a      	strh	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002c08:	33a6      	adds	r3, #166	; 0xa6
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6a3a      	ldr	r2, [r7, #32]
 8002c24:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2a:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c30:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c36:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3c:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c44:	2300      	movs	r3, #0
 8002c46:	82fb      	strh	r3, [r7, #22]
 8002c48:	8afb      	ldrh	r3, [r7, #22]
 8002c4a:	f241 726f 	movw	r2, #5999	; 0x176f
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d80d      	bhi.n	8002c6e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a2>
		velocity_table_[i] = 0;
 8002c52:	8afb      	ldrh	r3, [r7, #22]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	f04f 0200 	mov.w	r2, #0
 8002c64:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c66:	8afb      	ldrh	r3, [r7, #22]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	82fb      	strh	r3, [r7, #22]
 8002c6c:	e7ec      	b.n	8002c48 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x17c>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c6e:	2300      	movs	r3, #0
 8002c70:	82bb      	strh	r3, [r7, #20]
 8002c72:	8abb      	ldrh	r3, [r7, #20]
 8002c74:	2b63      	cmp	r3, #99	; 0x63
 8002c76:	d80d      	bhi.n	8002c94 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1c8>
		crossline_distance_[i] = 0;
 8002c78:	8abb      	ldrh	r3, [r7, #20]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002c80:	3316      	adds	r3, #22
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c8c:	8abb      	ldrh	r3, [r7, #20]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	82bb      	strh	r3, [r7, #20]
 8002c92:	e7ee      	b.n	8002c72 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a6>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c94:	2300      	movs	r3, #0
 8002c96:	827b      	strh	r3, [r7, #18]
 8002c98:	8a7b      	ldrh	r3, [r7, #18]
 8002c9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c9e:	d20d      	bcs.n	8002cbc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f0>
		sideline_distance_[i] = 0;
 8002ca0:	8a7b      	ldrh	r3, [r7, #18]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002ca8:	333a      	adds	r3, #58	; 0x3a
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cb4:	8a7b      	ldrh	r3, [r7, #18]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	827b      	strh	r3, [r7, #18]
 8002cba:	e7ed      	b.n	8002c98 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1cc>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	823b      	strh	r3, [r7, #16]
 8002cc0:	8a3b      	ldrh	r3, [r7, #16]
 8002cc2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cc6:	d20d      	bcs.n	8002ce4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x218>
		all_sideline_distance_[i] = 0;
 8002cc8:	8a3b      	ldrh	r3, [r7, #16]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8002cd0:	332e      	adds	r3, #46	; 0x2e
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cdc:	8a3b      	ldrh	r3, [r7, #16]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	823b      	strh	r3, [r7, #16]
 8002ce2:	e7ed      	b.n	8002cc0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f4>
	}
}
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002d18:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002d2c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d40:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002d44:	4a06      	ldr	r2, [pc, #24]	; (8002d60 <_ZN9LineTrace9calcErrorEv+0x6c>)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6013      	str	r3, [r2, #0]

	//diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
	//mon_diff_lpf = diff;

	return diff;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	ee07 3a90 	vmov	s15, r3

}
 8002d50:	eeb0 0a67 	vmov.f32	s0, s15
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	2000025c 	.word	0x2000025c
 8002d64:	00000000 	.word	0x00000000

08002d68 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002d68:	b5b0      	push	{r4, r5, r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ffbf 	bl	8002cf4 <_ZN9LineTrace9calcErrorEv>
 8002d76:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002d84:	4b66      	ldr	r3, [pc, #408]	; (8002f20 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d9a:	3354      	adds	r3, #84	; 0x54
 8002d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d14c      	bne.n	8002e3e <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002daa:	ed97 7a03 	vldr	s14, [r7, #12]
 8002dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db2:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002dbc:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002dbe:	edd3 7a00 	vldr	s15, [r3]
 8002dc2:	edd7 6a03 	vldr	s13, [r7, #12]
 8002dc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dce:	ee17 0a90 	vmov	r0, s15
 8002dd2:	f7fd fbd1 	bl	8000578 <__aeabi_f2d>
 8002dd6:	a350      	add	r3, pc, #320	; (adr r3, 8002f18 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ddc:	f7fd fd4e 	bl	800087c <__aeabi_ddiv>
 8002de0:	4603      	mov	r3, r0
 8002de2:	460c      	mov	r4, r1
 8002de4:	4618      	mov	r0, r3
 8002de6:	4621      	mov	r1, r4
 8002de8:	f7fd ff16 	bl	8000c18 <__aeabi_d2f>
 8002dec:	4603      	mov	r3, r0
 8002dee:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002df0:	4b4b      	ldr	r3, [pc, #300]	; (8002f20 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fd fbbf 	bl	8000578 <__aeabi_f2d>
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	460d      	mov	r5, r1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002e04:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0c:	ee17 0a90 	vmov	r0, s15
 8002e10:	f7fd fbb2 	bl	8000578 <__aeabi_f2d>
 8002e14:	a340      	add	r3, pc, #256	; (adr r3, 8002f18 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1a:	f7fd fc05 	bl	8000628 <__aeabi_dmul>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	4620      	mov	r0, r4
 8002e24:	4629      	mov	r1, r5
 8002e26:	f7fd fa49 	bl	80002bc <__adddf3>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	460c      	mov	r4, r1
 8002e2e:	4618      	mov	r0, r3
 8002e30:	4621      	mov	r1, r4
 8002e32:	f7fd fef1 	bl	8000c18 <__aeabi_d2f>
 8002e36:	4602      	mov	r2, r0
 8002e38:	4b39      	ldr	r3, [pc, #228]	; (8002f20 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	e04b      	b.n	8002ed6 <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002e44:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e4c:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002e56:	4b33      	ldr	r3, [pc, #204]	; (8002f24 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002e60:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e68:	ee17 0a90 	vmov	r0, s15
 8002e6c:	f7fd fb84 	bl	8000578 <__aeabi_f2d>
 8002e70:	a329      	add	r3, pc, #164	; (adr r3, 8002f18 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e76:	f7fd fd01 	bl	800087c <__aeabi_ddiv>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	4621      	mov	r1, r4
 8002e82:	f7fd fec9 	bl	8000c18 <__aeabi_d2f>
 8002e86:	4603      	mov	r3, r0
 8002e88:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002e8a:	4b25      	ldr	r3, [pc, #148]	; (8002f20 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fb72 	bl	8000578 <__aeabi_f2d>
 8002e94:	4604      	mov	r4, r0
 8002e96:	460d      	mov	r5, r1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002e9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea6:	ee17 0a90 	vmov	r0, s15
 8002eaa:	f7fd fb65 	bl	8000578 <__aeabi_f2d>
 8002eae:	a31a      	add	r3, pc, #104	; (adr r3, 8002f18 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb4:	f7fd fbb8 	bl	8000628 <__aeabi_dmul>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	f7fd f9fc 	bl	80002bc <__adddf3>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	4618      	mov	r0, r3
 8002eca:	4621      	mov	r1, r4
 8002ecc:	f7fd fea4 	bl	8000c18 <__aeabi_d2f>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002ed4:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002ed6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002eda:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ede:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002ee4:	edd3 7a00 	vldr	s15, [r3]
 8002ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eec:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002efa:	edd7 0a02 	vldr	s1, [r7, #8]
 8002efe:	eeb0 0a67 	vmov.f32	s0, s15
 8002f02:	4610      	mov	r0, r2
 8002f04:	f002 ffc8 	bl	8005e98 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002f08:	4a06      	ldr	r2, [pc, #24]	; (8002f24 <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6013      	str	r3, [r2, #0]

}
 8002f0e:	bf00      	nop
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bdb0      	pop	{r4, r5, r7, pc}
 8002f16:	bf00      	nop
 8002f18:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f1c:	3f50624d 	.word	0x3f50624d
 8002f20:	20000280 	.word	0x20000280
 8002f24:	2000027c 	.word	0x2000027c

08002f28 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fbf3 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f002 f93e 	bl	80051c0 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 fe54 	bl	8004bf6 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f001 feb5 	bl	8004cda <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002f80:	b590      	push	{r4, r7, lr}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f92:	3388      	adds	r3, #136	; 0x88
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	461c      	mov	r4, r3
 8002f98:	4610      	mov	r0, r2
 8002f9a:	f7fe fba3 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002f9e:	eef0 7a40 	vmov.f32	s15, s0
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002fa8:	3316      	adds	r3, #22
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fb8:	3388      	adds	r3, #136	; 0x88
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fc6:	3388      	adds	r3, #136	; 0x88
 8002fc8:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fd0:	3388      	adds	r3, #136	; 0x88
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	2b63      	cmp	r3, #99	; 0x63
 8002fd6:	d905      	bls.n	8002fe4 <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fde:	3388      	adds	r3, #136	; 0x88
 8002fe0:	2263      	movs	r2, #99	; 0x63
 8002fe2:	801a      	strh	r2, [r3, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd90      	pop	{r4, r7, pc}

08002fec <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002fec:	b590      	push	{r4, r7, lr}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ffe:	338a      	adds	r3, #138	; 0x8a
 8003000:	881b      	ldrh	r3, [r3, #0]
 8003002:	461c      	mov	r4, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f7fe fb6d 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800300a:	eef0 7a40 	vmov.f32	s15, s0
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8003014:	333a      	adds	r3, #58	; 0x3a
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003024:	338a      	adds	r3, #138	; 0x8a
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	3301      	adds	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003032:	338a      	adds	r3, #138	; 0x8a
 8003034:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800303c:	338a      	adds	r3, #138	; 0x8a
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003044:	d306      	bcc.n	8003054 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800304c:	338a      	adds	r3, #138	; 0x8a
 800304e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003052:	801a      	strh	r2, [r3, #0]
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bd90      	pop	{r4, r7, pc}

0800305c <_ZN9LineTrace9storeLogsEv>:

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}

void LineTrace::storeLogs()
{
 800305c:	b590      	push	{r4, r7, lr}
 800305e:	ed2d 8b02 	vpush	{d8}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d046      	beq.n	8003100 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003078:	3354      	adds	r3, #84	; 0x54
 800307a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11c      	bne.n	80030bc <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69dc      	ldr	r4, [r3, #28]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fe fb1b 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003090:	eeb0 8a40 	vmov.f32	s16, s0
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	4618      	mov	r0, r3
 800309a:	f002 f880 	bl	800519e <_ZN8Odometry8getThetaEv>
 800309e:	ec53 2b10 	vmov	r2, r3, d0
 80030a2:	4610      	mov	r0, r2
 80030a4:	4619      	mov	r1, r3
 80030a6:	f7fd fdb7 	bl	8000c18 <__aeabi_d2f>
 80030aa:	4603      	mov	r3, r0
 80030ac:	ee00 3a90 	vmov	s1, r3
 80030b0:	eeb0 0a48 	vmov.f32	s0, s16
 80030b4:	4620      	mov	r0, r4
 80030b6:	f001 fc55 	bl	8004964 <_ZN6Logger21storeDistanceAndThetaEff>
 80030ba:	e01b      	b.n	80030f4 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69dc      	ldr	r4, [r3, #28]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fe fafe 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80030ca:	eeb0 8a40 	vmov.f32	s16, s0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f002 f863 	bl	800519e <_ZN8Odometry8getThetaEv>
 80030d8:	ec53 2b10 	vmov	r2, r3, d0
 80030dc:	4610      	mov	r0, r2
 80030de:	4619      	mov	r1, r3
 80030e0:	f7fd fd9a 	bl	8000c18 <__aeabi_d2f>
 80030e4:	4603      	mov	r3, r0
 80030e6:	ee00 3a90 	vmov	s1, r3
 80030ea:	eeb0 0a48 	vmov.f32	s0, s16
 80030ee:	4620      	mov	r0, r4
 80030f0:	f001 fc7b 	bl	80049ea <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <_ZN9LineTrace9storeLogsEv+0xb0>)
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	3301      	adds	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	4b03      	ldr	r3, [pc, #12]	; (800310c <_ZN9LineTrace9storeLogsEv+0xb0>)
 80030fe:	801a      	strh	r2, [r3, #0]
	}
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	ecbd 8b02 	vpop	{d8}
 800310a:	bd90      	pop	{r4, r7, pc}
 800310c:	20000260 	.word	0x20000260

08003110 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	695c      	ldr	r4, [r3, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003122:	3388      	adds	r3, #136	; 0x88
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800312c:	3316      	adds	r3, #22
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd fa1f 	bl	8000578 <__aeabi_f2d>
 800313a:	a317      	add	r3, pc, #92	; (adr r3, 8003198 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x88>)
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	f7fd fb9c 	bl	800087c <__aeabi_ddiv>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4610      	mov	r0, r2
 800314a:	4619      	mov	r1, r3
 800314c:	f7fd fd64 	bl	8000c18 <__aeabi_d2f>
 8003150:	4603      	mov	r3, r0
 8003152:	ee00 3a10 	vmov	s0, r3
 8003156:	4620      	mov	r0, r4
 8003158:	f7fe fad3 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003162:	3388      	adds	r3, #136	; 0x88
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	3301      	adds	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003170:	3388      	adds	r3, #136	; 0x88
 8003172:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800317a:	3388      	adds	r3, #136	; 0x88
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	2b63      	cmp	r3, #99	; 0x63
 8003180:	d905      	bls.n	800318e <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x7e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003188:	3388      	adds	r3, #136	; 0x88
 800318a:	2263      	movs	r2, #99	; 0x63
 800318c:	801a      	strh	r2, [r3, #0]

}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bd90      	pop	{r4, r7, pc}
 8003196:	bf00      	nop
 8003198:	fa43fe5d 	.word	0xfa43fe5d
 800319c:	3feeebed 	.word	0x3feeebed

080031a0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80031a8:	2300      	movs	r3, #0
 80031aa:	82fb      	strh	r3, [r7, #22]
 80031ac:	8afb      	ldrh	r3, [r7, #22]
 80031ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031b2:	d237      	bcs.n	8003224 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x84>
		float temp_sideline_distance = sideline_distance_[i];
 80031b4:	8afb      	ldrh	r3, [r7, #22]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80031bc:	333a      	adds	r3, #58	; 0x3a
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe fa8a 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80031d0:	eeb0 7a40 	vmov.f32	s14, s0
 80031d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80031d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031dc:	eeb0 0a67 	vmov.f32	s0, s15
 80031e0:	f7ff fc64 	bl	8002aac <_ZSt3absf>
 80031e4:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 80031e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80031ec:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800324c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xac>
 80031f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f8:	d810      	bhi.n	800321c <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x7c>
			encoder_->setTotalDistance(sideline_distance_[i]);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6959      	ldr	r1, [r3, #20]
 80031fe:	8afb      	ldrh	r3, [r7, #22]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003206:	333a      	adds	r3, #58	; 0x3a
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	edd3 7a00 	vldr	s15, [r3]
 8003210:	eeb0 0a67 	vmov.f32	s0, s15
 8003214:	4608      	mov	r0, r1
 8003216:	f7fe fa74 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
			break;
 800321a:	e003      	b.n	8003224 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x84>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 800321c:	8afb      	ldrh	r3, [r7, #22]
 800321e:	3301      	adds	r3, #1
 8003220:	82fb      	strh	r3, [r7, #22]
 8003222:	e7c3      	b.n	80031ac <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800322a:	338a      	adds	r3, #138	; 0x8a
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003232:	d306      	bcc.n	8003242 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800323a:	338a      	adds	r3, #138	; 0x8a
 800323c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003240:	801a      	strh	r2, [r3, #0]

}
 8003242:	bf00      	nop
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	42a00000 	.word	0x42a00000

08003250 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003262:	3354      	adds	r3, #84	; 0x54
 8003264:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d12b      	bne.n	80032c4 <_ZN9LineTrace15radius2VelocityEf+0x74>
		if(radius < 300) velocity = min_velocity_;
 800326c:	edd7 7a00 	vldr	s15, [r7]
 8003270:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800335c <_ZN9LineTrace15radius2VelocityEf+0x10c>
 8003274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327c:	d504      	bpl.n	8003288 <_ZN9LineTrace15radius2VelocityEf+0x38>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	e05e      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 800) velocity = 1.7;
 8003288:	edd7 7a00 	vldr	s15, [r7]
 800328c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003360 <_ZN9LineTrace15radius2VelocityEf+0x110>
 8003290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003298:	d502      	bpl.n	80032a0 <_ZN9LineTrace15radius2VelocityEf+0x50>
 800329a:	4b32      	ldr	r3, [pc, #200]	; (8003364 <_ZN9LineTrace15radius2VelocityEf+0x114>)
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	e052      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 1400) velocity = 2.0;
 80032a0:	edd7 7a00 	vldr	s15, [r7]
 80032a4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003368 <_ZN9LineTrace15radius2VelocityEf+0x118>
 80032a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b0:	d503      	bpl.n	80032ba <_ZN9LineTrace15radius2VelocityEf+0x6a>
 80032b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80032b6:	60fb      	str	r3, [r7, #12]
 80032b8:	e045      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else velocity = max_velocity_;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	e040      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0xf6>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80032ca:	3354      	adds	r3, #84	; 0x54
 80032cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d136      	bne.n	8003342 <_ZN9LineTrace15radius2VelocityEf+0xf2>
		if(radius < 300) velocity = min_velocity2_;
 80032d4:	edd7 7a00 	vldr	s15, [r7]
 80032d8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800335c <_ZN9LineTrace15radius2VelocityEf+0x10c>
 80032dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e4:	d504      	bpl.n	80032f0 <_ZN9LineTrace15radius2VelocityEf+0xa0>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	e02a      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 1500) velocity = 2.1;
 80032f0:	edd7 7a00 	vldr	s15, [r7]
 80032f4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800336c <_ZN9LineTrace15radius2VelocityEf+0x11c>
 80032f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003300:	d502      	bpl.n	8003308 <_ZN9LineTrace15radius2VelocityEf+0xb8>
 8003302:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <_ZN9LineTrace15radius2VelocityEf+0x120>)
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	e01e      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 2000) velocity = 2.5;
 8003308:	edd7 7a00 	vldr	s15, [r7]
 800330c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003374 <_ZN9LineTrace15radius2VelocityEf+0x124>
 8003310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003318:	d502      	bpl.n	8003320 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 800331a:	4b17      	ldr	r3, [pc, #92]	; (8003378 <_ZN9LineTrace15radius2VelocityEf+0x128>)
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	e012      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 2500) velocity = 3.0;
 8003320:	edd7 7a00 	vldr	s15, [r7]
 8003324:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800337c <_ZN9LineTrace15radius2VelocityEf+0x12c>
 8003328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800332c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003330:	d502      	bpl.n	8003338 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 8003332:	4b13      	ldr	r3, [pc, #76]	; (8003380 <_ZN9LineTrace15radius2VelocityEf+0x130>)
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	e006      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else velocity = max_velocity2_;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	e001      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0xf6>
	}
	else velocity = 1.3;
 8003342:	4b10      	ldr	r3, [pc, #64]	; (8003384 <_ZN9LineTrace15radius2VelocityEf+0x134>)
 8003344:	60fb      	str	r3, [r7, #12]

	return velocity;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	ee07 3a90 	vmov	s15, r3
}
 800334c:	eeb0 0a67 	vmov.f32	s0, s15
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	43960000 	.word	0x43960000
 8003360:	44480000 	.word	0x44480000
 8003364:	3fd9999a 	.word	0x3fd9999a
 8003368:	44af0000 	.word	0x44af0000
 800336c:	44bb8000 	.word	0x44bb8000
 8003370:	40066666 	.word	0x40066666
 8003374:	44fa0000 	.word	0x44fa0000
 8003378:	40200000 	.word	0x40200000
 800337c:	451c4000 	.word	0x451c4000
 8003380:	40400000 	.word	0x40400000
 8003384:	3fa66666 	.word	0x3fa66666

08003388 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003388:	b5b0      	push	{r4, r5, r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	ed87 0a02 	vstr	s0, [r7, #8]
 8003394:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003396:	f241 736f 	movw	r3, #5999	; 0x176f
 800339a:	83fb      	strh	r3, [r7, #30]
 800339c:	8bfb      	ldrh	r3, [r7, #30]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 808d 	beq.w	80034be <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80033a4:	8bfb      	ldrh	r3, [r7, #30]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80033ae:	3304      	adds	r3, #4
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	ed93 7a00 	vldr	s14, [r3]
 80033b8:	8bfb      	ldrh	r3, [r7, #30]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80033c0:	3304      	adds	r3, #4
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	edd3 7a00 	vldr	s15, [r3]
 80033ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ce:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80033d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80033d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033de:	dd6a      	ble.n	80034b6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 80033e0:	8bfb      	ldrh	r3, [r7, #30]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4413      	add	r3, r2
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd f8c4 	bl	8000578 <__aeabi_f2d>
 80033f0:	a335      	add	r3, pc, #212	; (adr r3, 80034c8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80033f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f6:	f7fd f917 	bl	8000628 <__aeabi_dmul>
 80033fa:	4603      	mov	r3, r0
 80033fc:	460c      	mov	r4, r1
 80033fe:	4625      	mov	r5, r4
 8003400:	461c      	mov	r4, r3
 8003402:	69b8      	ldr	r0, [r7, #24]
 8003404:	f7fd f8b8 	bl	8000578 <__aeabi_f2d>
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4620      	mov	r0, r4
 800340e:	4629      	mov	r1, r5
 8003410:	f7fd fa34 	bl	800087c <__aeabi_ddiv>
 8003414:	4603      	mov	r3, r0
 8003416:	460c      	mov	r4, r1
 8003418:	4618      	mov	r0, r3
 800341a:	4621      	mov	r1, r4
 800341c:	f7fd fbfc 	bl	8000c18 <__aeabi_d2f>
 8003420:	4603      	mov	r3, r0
 8003422:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003424:	edd7 6a06 	vldr	s13, [r7, #24]
 8003428:	ed97 7a05 	vldr	s14, [r7, #20]
 800342c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003430:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003434:	ed97 7a04 	vldr	s14, [r7, #16]
 8003438:	edd7 7a02 	vldr	s15, [r7, #8]
 800343c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003444:	dd37      	ble.n	80034b6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003446:	8bfb      	ldrh	r3, [r7, #30]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800344e:	3304      	adds	r3, #4
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd f88e 	bl	8000578 <__aeabi_f2d>
 800345c:	4604      	mov	r4, r0
 800345e:	460d      	mov	r5, r1
 8003460:	8bfb      	ldrh	r3, [r7, #30]
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	4413      	add	r3, r2
 8003468:	ed93 7a00 	vldr	s14, [r3]
 800346c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003470:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003474:	ee17 0a90 	vmov	r0, s15
 8003478:	f7fd f87e 	bl	8000578 <__aeabi_f2d>
 800347c:	a312      	add	r3, pc, #72	; (adr r3, 80034c8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	f7fd f8d1 	bl	8000628 <__aeabi_dmul>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4620      	mov	r0, r4
 800348c:	4629      	mov	r1, r5
 800348e:	f7fc ff15 	bl	80002bc <__adddf3>
 8003492:	4603      	mov	r3, r0
 8003494:	460c      	mov	r4, r1
 8003496:	4619      	mov	r1, r3
 8003498:	4622      	mov	r2, r4
 800349a:	8bfb      	ldrh	r3, [r7, #30]
 800349c:	1e5c      	subs	r4, r3, #1
 800349e:	4608      	mov	r0, r1
 80034a0:	4611      	mov	r1, r2
 80034a2:	f7fd fbb9 	bl	8000c18 <__aeabi_d2f>
 80034a6:	4601      	mov	r1, r0
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80034ae:	3304      	adds	r3, #4
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80034b6:	8bfb      	ldrh	r3, [r7, #30]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	83fb      	strh	r3, [r7, #30]
 80034bc:	e76e      	b.n	800339c <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80034be:	bf00      	nop
 80034c0:	3720      	adds	r7, #32
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bdb0      	pop	{r4, r5, r7, pc}
 80034c6:	bf00      	nop
 80034c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80034cc:	3f50624d 	.word	0x3f50624d

080034d0 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 80034d0:	b5b0      	push	{r4, r5, r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80034dc:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80034de:	2300      	movs	r3, #0
 80034e0:	83fb      	strh	r3, [r7, #30]
 80034e2:	8bfb      	ldrh	r3, [r7, #30]
 80034e4:	f241 726f 	movw	r2, #5999	; 0x176f
 80034e8:	4293      	cmp	r3, r2
 80034ea:	f200 808d 	bhi.w	8003608 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 80034ee:	8bfb      	ldrh	r3, [r7, #30]
 80034f0:	3301      	adds	r3, #1
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034f8:	3304      	adds	r3, #4
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	ed93 7a00 	vldr	s14, [r3]
 8003502:	8bfb      	ldrh	r3, [r7, #30]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800350a:	3304      	adds	r3, #4
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	edd3 7a00 	vldr	s15, [r3]
 8003514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003518:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800351c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003520:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003528:	dd6a      	ble.n	8003600 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 800352a:	8bfb      	ldrh	r3, [r7, #30]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7fd f81f 	bl	8000578 <__aeabi_f2d>
 800353a:	a335      	add	r3, pc, #212	; (adr r3, 8003610 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f7fd f872 	bl	8000628 <__aeabi_dmul>
 8003544:	4603      	mov	r3, r0
 8003546:	460c      	mov	r4, r1
 8003548:	4625      	mov	r5, r4
 800354a:	461c      	mov	r4, r3
 800354c:	69b8      	ldr	r0, [r7, #24]
 800354e:	f7fd f813 	bl	8000578 <__aeabi_f2d>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4620      	mov	r0, r4
 8003558:	4629      	mov	r1, r5
 800355a:	f7fd f98f 	bl	800087c <__aeabi_ddiv>
 800355e:	4603      	mov	r3, r0
 8003560:	460c      	mov	r4, r1
 8003562:	4618      	mov	r0, r3
 8003564:	4621      	mov	r1, r4
 8003566:	f7fd fb57 	bl	8000c18 <__aeabi_d2f>
 800356a:	4603      	mov	r3, r0
 800356c:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800356e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003572:	ed97 7a05 	vldr	s14, [r7, #20]
 8003576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800357a:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800357e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003582:	edd7 7a02 	vldr	s15, [r7, #8]
 8003586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800358a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358e:	dd37      	ble.n	8003600 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003590:	8bfb      	ldrh	r3, [r7, #30]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003598:	3304      	adds	r3, #4
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fc ffe9 	bl	8000578 <__aeabi_f2d>
 80035a6:	4604      	mov	r4, r0
 80035a8:	460d      	mov	r5, r1
 80035aa:	8bfb      	ldrh	r3, [r7, #30]
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	ed93 7a00 	vldr	s14, [r3]
 80035b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80035ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035be:	ee17 0a90 	vmov	r0, s15
 80035c2:	f7fc ffd9 	bl	8000578 <__aeabi_f2d>
 80035c6:	a312      	add	r3, pc, #72	; (adr r3, 8003610 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80035c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035cc:	f7fd f82c 	bl	8000628 <__aeabi_dmul>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4620      	mov	r0, r4
 80035d6:	4629      	mov	r1, r5
 80035d8:	f7fc fe70 	bl	80002bc <__adddf3>
 80035dc:	4603      	mov	r3, r0
 80035de:	460c      	mov	r4, r1
 80035e0:	4619      	mov	r1, r3
 80035e2:	4622      	mov	r2, r4
 80035e4:	8bfb      	ldrh	r3, [r7, #30]
 80035e6:	1c5c      	adds	r4, r3, #1
 80035e8:	4608      	mov	r0, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	f7fd fb14 	bl	8000c18 <__aeabi_d2f>
 80035f0:	4601      	mov	r1, r0
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80035f8:	3304      	adds	r3, #4
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003600:	8bfb      	ldrh	r3, [r7, #30]
 8003602:	3301      	adds	r3, #1
 8003604:	83fb      	strh	r3, [r7, #30]
 8003606:	e76c      	b.n	80034e2 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003608:	bf00      	nop
 800360a:	3720      	adds	r7, #32
 800360c:	46bd      	mov	sp, r7
 800360e:	bdb0      	pop	{r4, r5, r7, pc}
 8003610:	d2f1a9fc 	.word	0xd2f1a9fc
 8003614:	3f50624d 	.word	0x3f50624d

08003618 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	4618      	mov	r0, r3
 8003626:	f7fe f889 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003630:	3350      	adds	r3, #80	; 0x50
 8003632:	2201      	movs	r2, #1
 8003634:	701a      	strb	r2, [r3, #0]
}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800364c:	3350      	adds	r3, #80	; 0x50
 800364e:	2200      	movs	r2, #0
 8003650:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003658:	3352      	adds	r3, #82	; 0x52
 800365a:	2200      	movs	r2, #0
 800365c:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003664:	330c      	adds	r3, #12
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003686:	3350      	adds	r3, #80	; 0x50
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 809c 	beq.w	80037c8 <_ZN9LineTrace20updateTargetVelocityEv+0x150>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	4618      	mov	r0, r3
 8003696:	f7fe f825 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800369a:	ee10 3a10 	vmov	r3, s0
 800369e:	4618      	mov	r0, r3
 80036a0:	f7fc ff6a 	bl	8000578 <__aeabi_f2d>
 80036a4:	a34e      	add	r3, pc, #312	; (adr r3, 80037e0 <_ZN9LineTrace20updateTargetVelocityEv+0x168>)
 80036a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036aa:	f7fc ffbd 	bl	8000628 <__aeabi_dmul>
 80036ae:	4603      	mov	r3, r0
 80036b0:	460c      	mov	r4, r1
 80036b2:	4625      	mov	r5, r4
 80036b4:	461c      	mov	r4, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036bc:	330c      	adds	r3, #12
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fc ff59 	bl	8000578 <__aeabi_f2d>
 80036c6:	460a      	mov	r2, r1
 80036c8:	4601      	mov	r1, r0
 80036ca:	2301      	movs	r3, #1
 80036cc:	461e      	mov	r6, r3
 80036ce:	4613      	mov	r3, r2
 80036d0:	460a      	mov	r2, r1
 80036d2:	4620      	mov	r0, r4
 80036d4:	4629      	mov	r1, r5
 80036d6:	f7fd fa2d 	bl	8000b34 <__aeabi_dcmpge>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <_ZN9LineTrace20updateTargetVelocityEv+0x6c>
 80036e0:	2300      	movs	r3, #0
 80036e2:	461e      	mov	r6, r3
 80036e4:	b2f3      	uxtb	r3, r6
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d026      	beq.n	8003738 <_ZN9LineTrace20updateTargetVelocityEv+0xc0>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036f0:	330c      	adds	r3, #12
 80036f2:	ed93 7a00 	vldr	s14, [r3]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036fc:	3352      	adds	r3, #82	; 0x52
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	3332      	adds	r3, #50	; 0x32
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	3304      	adds	r3, #4
 800370a:	edd3 7a00 	vldr	s15, [r3]
 800370e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003718:	330c      	adds	r3, #12
 800371a:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003724:	3352      	adds	r3, #82	; 0x52
 8003726:	881b      	ldrh	r3, [r3, #0]
 8003728:	3301      	adds	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003732:	3352      	adds	r3, #82	; 0x52
 8003734:	801a      	strh	r2, [r3, #0]
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 8003736:	e7ab      	b.n	8003690 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800373e:	3352      	adds	r3, #82	; 0x52
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	f241 726f 	movw	r2, #5999	; 0x176f
 8003746:	4293      	cmp	r3, r2
 8003748:	d906      	bls.n	8003758 <_ZN9LineTrace20updateTargetVelocityEv+0xe0>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003750:	3352      	adds	r3, #82	; 0x52
 8003752:	f241 726f 	movw	r2, #5999	; 0x176f
 8003756:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800375e:	330c      	adds	r3, #12
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1b      	ldr	r2, [pc, #108]	; (80037d0 <_ZN9LineTrace20updateTargetVelocityEv+0x158>)
 8003764:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	4618      	mov	r0, r3
 800376c:	f7fd ffba 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003770:	eef0 7a40 	vmov.f32	s15, s0
 8003774:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <_ZN9LineTrace20updateTargetVelocityEv+0x15c>)
 8003776:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003780:	3352      	adds	r3, #82	; 0x52
 8003782:	881a      	ldrh	r2, [r3, #0]
 8003784:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <_ZN9LineTrace20updateTargetVelocityEv+0x160>)
 8003786:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800378e:	3352      	adds	r3, #82	; 0x52
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003798:	3304      	adds	r3, #4
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	edd3 7a00 	vldr	s15, [r3]
 80037a2:	eeb0 0a67 	vmov.f32	s0, s15
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 faef 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037b2:	3352      	adds	r3, #82	; 0x52
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80037bc:	3304      	adds	r3, #4
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a05      	ldr	r2, [pc, #20]	; (80037dc <_ZN9LineTrace20updateTargetVelocityEv+0x164>)
 80037c6:	6013      	str	r3, [r2, #0]

	}
}
 80037c8:	bf00      	nop
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037d0:	2000026c 	.word	0x2000026c
 80037d4:	20000270 	.word	0x20000270
 80037d8:	20000274 	.word	0x20000274
 80037dc:	20000278 	.word	0x20000278
 80037e0:	fa43fe5d 	.word	0xfa43fe5d
 80037e4:	3feeebed 	.word	0x3feeebed

080037e8 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 80037f4:	2300      	movs	r3, #0
 80037f6:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd ff62 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003802:	eeb0 7a40 	vmov.f32	s14, s0
 8003806:	edd7 7a00 	vldr	s15, [r7]
 800380a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800380e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003812:	bf94      	ite	ls
 8003814:	2301      	movls	r3, #1
 8003816:	2300      	movhi	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800381e:	2301      	movs	r3, #1
 8003820:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003822:	7bfb      	ldrb	r3, [r7, #15]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8003844:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003848:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800384c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003850:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8003864:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003868:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800386c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003870:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8003874:	4a40      	ldr	r2, [pc, #256]	; (8003978 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 800387a:	4a40      	ldr	r2, [pc, #256]	; (800397c <_ZN9LineTrace11isCrossLineEv+0x150>)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8003880:	4b3f      	ldr	r3, [pc, #252]	; (8003980 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	f083 0301 	eor.w	r3, r3, #1
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d044      	beq.n	8003918 <_ZN9LineTrace11isCrossLineEv+0xec>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 800388e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003892:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003984 <_ZN9LineTrace11isCrossLineEv+0x158>
 8003896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800389a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800389e:	d50f      	bpl.n	80038c0 <_ZN9LineTrace11isCrossLineEv+0x94>
 80038a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80038a4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003984 <_ZN9LineTrace11isCrossLineEv+0x158>
 80038a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b0:	d506      	bpl.n	80038c0 <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 80038b2:	4b35      	ldr	r3, [pc, #212]	; (8003988 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	3301      	adds	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	4b33      	ldr	r3, [pc, #204]	; (8003988 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 80038bc:	801a      	strh	r2, [r3, #0]
 80038be:	e002      	b.n	80038c6 <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 80038c0:	4b31      	ldr	r3, [pc, #196]	; (8003988 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 1){
 80038c6:	4b30      	ldr	r3, [pc, #192]	; (8003988 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d04d      	beq.n	800396a <_ZN9LineTrace11isCrossLineEv+0x13e>
			flag = true;
 80038ce:	4b2f      	ldr	r3, [pc, #188]	; (800398c <_ZN9LineTrace11isCrossLineEv+0x160>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 80038d4:	4b2a      	ldr	r3, [pc, #168]	; (8003980 <_ZN9LineTrace11isCrossLineEv+0x154>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80038da:	4b2b      	ldr	r3, [pc, #172]	; (8003988 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 80038dc:	2200      	movs	r2, #0
 80038de:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80038e6:	3390      	adds	r3, #144	; 0x90
 80038e8:	2201      	movs	r2, #1
 80038ea:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80038f2:	3354      	adds	r3, #84	; 0x54
 80038f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d103      	bne.n	8003904 <_ZN9LineTrace11isCrossLineEv+0xd8>
				storeCrossLineDistance();
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff fb3f 	bl	8002f80 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8003902:	e032      	b.n	800396a <_ZN9LineTrace11isCrossLineEv+0x13e>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff fc03 	bl	8003110 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003910:	33a4      	adds	r3, #164	; 0xa4
 8003912:	2200      	movs	r2, #0
 8003914:	801a      	strh	r2, [r3, #0]
 8003916:	e028      	b.n	800396a <_ZN9LineTrace11isCrossLineEv+0x13e>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8003918:	edd7 7a03 	vldr	s15, [r7, #12]
 800391c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003990 <_ZN9LineTrace11isCrossLineEv+0x164>
 8003920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003928:	dd0f      	ble.n	800394a <_ZN9LineTrace11isCrossLineEv+0x11e>
 800392a:	edd7 7a02 	vldr	s15, [r7, #8]
 800392e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003990 <_ZN9LineTrace11isCrossLineEv+0x164>
 8003932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393a:	dd06      	ble.n	800394a <_ZN9LineTrace11isCrossLineEv+0x11e>
			cnt++;
 800393c:	4b12      	ldr	r3, [pc, #72]	; (8003988 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	3301      	adds	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	4b10      	ldr	r3, [pc, #64]	; (8003988 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8003946:	801a      	strh	r2, [r3, #0]
 8003948:	e002      	b.n	8003950 <_ZN9LineTrace11isCrossLineEv+0x124>
		}
		else{
			cnt = 0;
 800394a:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 800394c:	2200      	movs	r2, #0
 800394e:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8003950:	4b0d      	ldr	r3, [pc, #52]	; (8003988 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8003952:	881b      	ldrh	r3, [r3, #0]
 8003954:	2b09      	cmp	r3, #9
 8003956:	d908      	bls.n	800396a <_ZN9LineTrace11isCrossLineEv+0x13e>
			flag = false;
 8003958:	4b0c      	ldr	r3, [pc, #48]	; (800398c <_ZN9LineTrace11isCrossLineEv+0x160>)
 800395a:	2200      	movs	r2, #0
 800395c:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 800395e:	4b08      	ldr	r3, [pc, #32]	; (8003980 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8003964:	4b08      	ldr	r3, [pc, #32]	; (8003988 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8003966:	2200      	movs	r2, #0
 8003968:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 800396a:	4b08      	ldr	r3, [pc, #32]	; (800398c <_ZN9LineTrace11isCrossLineEv+0x160>)
 800396c:	781b      	ldrb	r3, [r3, #0]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20000264 	.word	0x20000264
 800397c:	20000268 	.word	0x20000268
 8003980:	20000287 	.word	0x20000287
 8003984:	44160000 	.word	0x44160000
 8003988:	20000284 	.word	0x20000284
 800398c:	20000286 	.word	0x20000286
 8003990:	43fa0000 	.word	0x43fa0000

08003994 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003994:	b590      	push	{r4, r7, lr}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800399c:	2300      	movs	r3, #0
 800399e:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fd fe8e 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80039aa:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 fbf3 	bl	800519e <_ZN8Odometry8getThetaEv>
 80039b8:	ec54 3b10 	vmov	r3, r4, d0
 80039bc:	4618      	mov	r0, r3
 80039be:	4621      	mov	r1, r4
 80039c0:	f7fd f92a 	bl	8000c18 <__aeabi_d2f>
 80039c4:	4603      	mov	r3, r0
 80039c6:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 80039c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80039cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d4:	d101      	bne.n	80039da <_ZN9LineTrace8isStableEv+0x46>
 80039d6:	4b23      	ldr	r3, [pc, #140]	; (8003a64 <_ZN9LineTrace8isStableEv+0xd0>)
 80039d8:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 80039da:	ed97 7a02 	vldr	s14, [r7, #8]
 80039de:	edd7 7a04 	vldr	s15, [r7, #16]
 80039e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039e6:	eeb0 0a66 	vmov.f32	s0, s13
 80039ea:	f7ff f85f 	bl	8002aac <_ZSt3absf>
 80039ee:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 80039f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80039f6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003a68 <_ZN9LineTrace8isStableEv+0xd4>
 80039fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a02:	db01      	blt.n	8003a08 <_ZN9LineTrace8isStableEv+0x74>
 8003a04:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <_ZN9LineTrace8isStableEv+0xd8>)
 8003a06:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a0e:	3390      	adds	r3, #144	; 0x90
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d008      	beq.n	8003a28 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003a16:	4b16      	ldr	r3, [pc, #88]	; (8003a70 <_ZN9LineTrace8isStableEv+0xdc>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003a22:	3390      	adds	r3, #144	; 0x90
 8003a24:	2200      	movs	r2, #0
 8003a26:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003a28:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a2c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003a74 <_ZN9LineTrace8isStableEv+0xe0>
 8003a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a38:	db06      	blt.n	8003a48 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <_ZN9LineTrace8isStableEv+0xdc>)
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <_ZN9LineTrace8isStableEv+0xdc>)
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	e002      	b.n	8003a4e <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003a48:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <_ZN9LineTrace8isStableEv+0xdc>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 5){ //250mm
 8003a4e:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <_ZN9LineTrace8isStableEv+0xdc>)
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d901      	bls.n	8003a5a <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003a56:	2301      	movs	r3, #1
 8003a58:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	371c      	adds	r7, #28
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd90      	pop	{r4, r7, pc}
 8003a64:	3727c5ac 	.word	0x3727c5ac
 8003a68:	459c4000 	.word	0x459c4000
 8003a6c:	459c4000 	.word	0x459c4000
 8003a70:	20000288 	.word	0x20000288
 8003a74:	44fa0000 	.word	0x44fa0000

08003a78 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b092      	sub	sp, #72	; 0x48
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003a80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a84:	2201      	movs	r2, #1
 8003a86:	4963      	ldr	r1, [pc, #396]	; (8003c14 <_ZN9LineTrace4initEv+0x19c>)
 8003a88:	4863      	ldr	r0, [pc, #396]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003a8a:	f7fd ff5d 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003a8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a92:	2201      	movs	r2, #1
 8003a94:	4961      	ldr	r1, [pc, #388]	; (8003c1c <_ZN9LineTrace4initEv+0x1a4>)
 8003a96:	4860      	ldr	r0, [pc, #384]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003a98:	f7fd ff56 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003a9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	495f      	ldr	r1, [pc, #380]	; (8003c20 <_ZN9LineTrace4initEv+0x1a8>)
 8003aa4:	485c      	ldr	r0, [pc, #368]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003aa6:	f7fd ff4f 	bl	8001948 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003aaa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003aae:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003ab2:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003ab6:	eeb0 1a66 	vmov.f32	s2, s13
 8003aba:	eef0 0a47 	vmov.f32	s1, s14
 8003abe:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f8c6 	bl	8003c54 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003ac8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003acc:	2201      	movs	r2, #1
 8003ace:	4955      	ldr	r1, [pc, #340]	; (8003c24 <_ZN9LineTrace4initEv+0x1ac>)
 8003ad0:	4851      	ldr	r0, [pc, #324]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003ad2:	f7fd ff39 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 8003ad6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ada:	2201      	movs	r2, #1
 8003adc:	4952      	ldr	r1, [pc, #328]	; (8003c28 <_ZN9LineTrace4initEv+0x1b0>)
 8003ade:	484e      	ldr	r0, [pc, #312]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003ae0:	f7fd ff32 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 8003ae4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ae8:	2201      	movs	r2, #1
 8003aea:	4950      	ldr	r1, [pc, #320]	; (8003c2c <_ZN9LineTrace4initEv+0x1b4>)
 8003aec:	484a      	ldr	r0, [pc, #296]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003aee:	f7fd ff2b 	bl	8001948 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 8003af2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003af6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003afa:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003afe:	eeb0 1a66 	vmov.f32	s2, s13
 8003b02:	eef0 0a47 	vmov.f32	s1, s14
 8003b06:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f8e8 	bl	8003ce0 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003b10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b14:	2201      	movs	r2, #1
 8003b16:	4946      	ldr	r1, [pc, #280]	; (8003c30 <_ZN9LineTrace4initEv+0x1b8>)
 8003b18:	483f      	ldr	r0, [pc, #252]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003b1a:	f7fd ff15 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003b1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b22:	2201      	movs	r2, #1
 8003b24:	4943      	ldr	r1, [pc, #268]	; (8003c34 <_ZN9LineTrace4initEv+0x1bc>)
 8003b26:	483c      	ldr	r0, [pc, #240]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003b28:	f7fd ff0e 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b30:	2201      	movs	r2, #1
 8003b32:	4941      	ldr	r1, [pc, #260]	; (8003c38 <_ZN9LineTrace4initEv+0x1c0>)
 8003b34:	4838      	ldr	r0, [pc, #224]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003b36:	f7fd ff07 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003b3a:	f107 0320 	add.w	r3, r7, #32
 8003b3e:	2201      	movs	r2, #1
 8003b40:	493e      	ldr	r1, [pc, #248]	; (8003c3c <_ZN9LineTrace4initEv+0x1c4>)
 8003b42:	4835      	ldr	r0, [pc, #212]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003b44:	f7fd ff00 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003b48:	f107 031c 	add.w	r3, r7, #28
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	493c      	ldr	r1, [pc, #240]	; (8003c40 <_ZN9LineTrace4initEv+0x1c8>)
 8003b50:	4831      	ldr	r0, [pc, #196]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003b52:	f7fd fef9 	bl	8001948 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003b56:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f913 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003b64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003b68:	eeb0 0a67 	vmov.f32	s0, s15
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f91c 	bl	8003daa <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003b72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b76:	eeb0 0a67 	vmov.f32	s0, s15
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f925 	bl	8003dca <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003b80:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b84:	eeb0 0a67 	vmov.f32	s0, s15
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f92e 	bl	8003dea <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003b8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b92:	eeb0 0a67 	vmov.f32	s0, s15
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f937 	bl	8003e0a <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003b9c:	f107 0318 	add.w	r3, r7, #24
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	4928      	ldr	r1, [pc, #160]	; (8003c44 <_ZN9LineTrace4initEv+0x1cc>)
 8003ba4:	481c      	ldr	r0, [pc, #112]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003ba6:	f7fd fecf 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003baa:	f107 0314 	add.w	r3, r7, #20
 8003bae:	2201      	movs	r2, #1
 8003bb0:	4925      	ldr	r1, [pc, #148]	; (8003c48 <_ZN9LineTrace4initEv+0x1d0>)
 8003bb2:	4819      	ldr	r0, [pc, #100]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003bb4:	f7fd fec8 	bl	8001948 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003bb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bbc:	ed97 7a05 	vldr	s14, [r7, #20]
 8003bc0:	eef0 0a47 	vmov.f32	s1, s14
 8003bc4:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f97e 	bl	8003eca <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003bda:	f107 0310 	add.w	r3, r7, #16
 8003bde:	2201      	movs	r2, #1
 8003be0:	491a      	ldr	r1, [pc, #104]	; (8003c4c <_ZN9LineTrace4initEv+0x1d4>)
 8003be2:	480d      	ldr	r0, [pc, #52]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003be4:	f7fd feb0 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003be8:	f107 030c 	add.w	r3, r7, #12
 8003bec:	2201      	movs	r2, #1
 8003bee:	4918      	ldr	r1, [pc, #96]	; (8003c50 <_ZN9LineTrace4initEv+0x1d8>)
 8003bf0:	4809      	ldr	r0, [pc, #36]	; (8003c18 <_ZN9LineTrace4initEv+0x1a0>)
 8003bf2:	f7fd fea9 	bl	8001948 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003bf6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bfa:	ed97 7a03 	vldr	s14, [r7, #12]
 8003bfe:	eef0 0a47 	vmov.f32	s1, s14
 8003c02:	eeb0 0a67 	vmov.f32	s0, s15
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f979 	bl	8003efe <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003c0c:	bf00      	nop
 8003c0e:	3748      	adds	r7, #72	; 0x48
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	08019d50 	.word	0x08019d50
 8003c18:	08019d58 	.word	0x08019d58
 8003c1c:	08019d60 	.word	0x08019d60
 8003c20:	08019d68 	.word	0x08019d68
 8003c24:	08019d70 	.word	0x08019d70
 8003c28:	08019d7c 	.word	0x08019d7c
 8003c2c:	08019d88 	.word	0x08019d88
 8003c30:	08019d94 	.word	0x08019d94
 8003c34:	08019da0 	.word	0x08019da0
 8003c38:	08019dac 	.word	0x08019dac
 8003c3c:	08019db8 	.word	0x08019db8
 8003c40:	08019dc4 	.word	0x08019dc4
 8003c44:	08019dd0 	.word	0x08019dd0
 8003c48:	08019dd8 	.word	0x08019dd8
 8003c4c:	08019de0 	.word	0x08019de0
 8003c50:	08019dec 	.word	0x08019dec

08003c54 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c60:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c64:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c7a:	bf00      	nop
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
	return kp_;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c92:	ee07 3a90 	vmov	s15, r3
}
 8003c96:	eeb0 0a67 	vmov.f32	s0, s15
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	return ki_;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb0:	ee07 3a90 	vmov	s15, r3
}
 8003cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
	return kd_;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	ee07 3a90 	vmov	s15, r3
}
 8003cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cec:	edc7 0a01 	vstr	s1, [r7, #4]
 8003cf0:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003d06:	bf00      	nop
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d1e:	ee07 3a90 	vmov	s15, r3
}
 8003d22:	eeb0 0a67 	vmov.f32	s0, s15
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3c:	ee07 3a90 	vmov	s15, r3
}
 8003d40:	eeb0 0a67 	vmov.f32	s0, s15
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	ee07 3a90 	vmov	s15, r3
}
 8003d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
 8003d92:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e38:	ee07 3a90 	vmov	s15, r3
}
 8003e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003e58:	ee07 3a90 	vmov	s15, r3
}
 8003e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003e78:	ee07 3a90 	vmov	s15, r3
}
 8003e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003e98:	ee07 3a90 	vmov	s15, r3
}
 8003e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003eb8:	ee07 3a90 	vmov	s15, r3
}
 8003ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ed6:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ee0:	3394      	adds	r3, #148	; 0x94
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003eec:	3398      	adds	r3, #152	; 0x98
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	601a      	str	r2, [r3, #0]
}
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b085      	sub	sp, #20
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f0a:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f14:	339c      	adds	r3, #156	; 0x9c
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f20:	33a0      	adds	r3, #160	; 0xa0
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	601a      	str	r2, [r3, #0]
}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f40:	3394      	adds	r3, #148	; 0x94
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	ee07 3a90 	vmov	s15, r3
}
 8003f48:	eeb0 0a67 	vmov.f32	s0, s15
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003f56:	b480      	push	{r7}
 8003f58:	b083      	sub	sp, #12
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f64:	33a0      	adds	r3, #160	; 0xa0
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	ee07 3a90 	vmov	s15, r3
}
 8003f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f88:	339c      	adds	r3, #156	; 0x9c
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	ee07 3a90 	vmov	s15, r3
}
 8003f90:	eeb0 0a67 	vmov.f32	s0, s15
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fac:	3398      	adds	r3, #152	; 0x98
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	ee07 3a90 	vmov	s15, r3
}
 8003fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 80e6 	beq.w	80041a4 <_ZN9LineTrace4flipEv+0x1e0>
		// ---- line following processing -----//
		pidTrace();
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fe fec5 	bl	8002d68 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff fb4a 	bl	8003678 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(50) == true){
 8003fe4:	ed9f 0a71 	vldr	s0, [pc, #452]	; 80041ac <_ZN9LineTrace4flipEv+0x1e8>
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff fbfd 	bl	80037e8 <_ZN9LineTrace16isTargetDistanceEf>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d028      	beq.n	8004046 <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f7ff f831 	bl	800305c <_ZN9LineTrace9storeLogsEv>
			//logger_->storeLog(imu_->getOmega());
			//logger_->storeLog2(target_omega_);

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff fcca 	bl	8003994 <_ZN9LineTrace8isStableEv>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00c      	beq.n	8004020 <_ZN9LineTrace4flipEv+0x5c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	4618      	mov	r0, r3
 800400c:	f001 fb92 	bl	8005734 <_ZN10SideSensor10getStatusLEv>
 8004010:	4603      	mov	r3, r0
 8004012:	f083 0301 	eor.w	r3, r3, #1
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <_ZN9LineTrace4flipEv+0x5c>
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <_ZN9LineTrace4flipEv+0x5e>
 8004020:	2300      	movs	r3, #0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800402c:	338f      	adds	r3, #143	; 0x8f
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fd fb72 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	4618      	mov	r0, r3
 8004042:	f001 f8bd 	bl	80051c0 <_ZN8Odometry13clearPotitionEv>
		}


		// ------- Store side line distance or correction distance------//

		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800404c:	338f      	adds	r3, #143	; 0x8f
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d009      	beq.n	8004068 <_ZN9LineTrace4flipEv+0xa4>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	4618      	mov	r0, r3
 800405a:	f001 fb6b 	bl	8005734 <_ZN10SideSensor10getStatusLEv>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <_ZN9LineTrace4flipEv+0xa4>
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <_ZN9LineTrace4flipEv+0xa6>
 8004068:	2300      	movs	r3, #0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d020      	beq.n	80040b0 <_ZN9LineTrace4flipEv+0xec>
			if(mode_selector_ == FIRST_RUNNING){
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004074:	3354      	adds	r3, #84	; 0x54
 8004076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d103      	bne.n	8004086 <_ZN9LineTrace4flipEv+0xc2>
				storeSideLineDistance();
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fe ffb4 	bl	8002fec <_ZN9LineTrace21storeSideLineDistanceEv>
 8004084:	e008      	b.n	8004098 <_ZN9LineTrace4flipEv+0xd4>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff f88a 	bl	80031a0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004092:	33a4      	adds	r3, #164	; 0xa4
 8004094:	2200      	movs	r2, #0
 8004096:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800409e:	338f      	adds	r3, #143	; 0x8f
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040aa:	3390      	adds	r3, #144	; 0x90
 80040ac:	2201      	movs	r2, #1
 80040ae:	701a      	strb	r2, [r3, #0]
		}


		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff fbbb 	bl	800382c <_ZN9LineTrace11isCrossLineEv>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d009      	beq.n	80040d0 <_ZN9LineTrace4flipEv+0x10c>
			side_sensor_->enableIgnore();
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f001 fb5f 	bl	8005784 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fd fb53 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 70){
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f001 fb6f 	bl	80057b8 <_ZN10SideSensor13getIgnoreFlagEv>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00f      	beq.n	8004100 <_ZN9LineTrace4flipEv+0x13c>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7fd fb37 	bl	8001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 80040ea:	eeb0 7a40 	vmov.f32	s14, s0
 80040ee:	eddf 7a30 	vldr	s15, [pc, #192]	; 80041b0 <_ZN9LineTrace4flipEv+0x1ec>
 80040f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040fa:	db01      	blt.n	8004100 <_ZN9LineTrace4flipEv+0x13c>
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <_ZN9LineTrace4flipEv+0x13e>
 8004100:	2300      	movs	r3, #0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d004      	beq.n	8004110 <_ZN9LineTrace4flipEv+0x14c>
			side_sensor_->disableIgnore();
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	4618      	mov	r0, r3
 800410c:	f001 fb47 	bl	800579e <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	4618      	mov	r0, r3
 8004116:	f7fe fc79 	bl	8002a0c <_ZN10LineSensor13emergencyStopEv>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00d      	beq.n	800413c <_ZN9LineTrace4flipEv+0x178>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	eddf 0a23 	vldr	s1, [pc, #140]	; 80041b4 <_ZN9LineTrace4flipEv+0x1f0>
 8004128:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80041b4 <_ZN9LineTrace4flipEv+0x1f0>
 800412c:	4618      	mov	r0, r3
 800412e:	f001 feb3 	bl	8005e98 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	4618      	mov	r0, r3
 8004138:	f7fd f924 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004142:	33a4      	adds	r3, #164	; 0xa4
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	3301      	adds	r3, #1
 8004148:	b29a      	uxth	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004150:	33a4      	adds	r3, #164	; 0xa4
 8004152:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800415a:	33a4      	adds	r3, #164	; 0xa4
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	f242 720f 	movw	r2, #9999	; 0x270f
 8004162:	4293      	cmp	r3, r2
 8004164:	d906      	bls.n	8004174 <_ZN9LineTrace4flipEv+0x1b0>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800416c:	33a4      	adds	r3, #164	; 0xa4
 800416e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004172:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 200) led_.LR(-1, 1);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800417a:	33a4      	adds	r3, #164	; 0xa4
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	2bc8      	cmp	r3, #200	; 0xc8
 8004180:	d808      	bhi.n	8004194 <_ZN9LineTrace4flipEv+0x1d0>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	330c      	adds	r3, #12
 8004186:	2201      	movs	r2, #1
 8004188:	f04f 31ff 	mov.w	r1, #4294967295
 800418c:	4618      	mov	r0, r3
 800418e:	f7fe f91d 	bl	80023cc <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8004192:	e007      	b.n	80041a4 <_ZN9LineTrace4flipEv+0x1e0>
		else led_.LR(-1, 0);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	330c      	adds	r3, #12
 8004198:	2200      	movs	r2, #0
 800419a:	f04f 31ff 	mov.w	r1, #4294967295
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe f914 	bl	80023cc <_ZN3LED2LREaa>
}
 80041a4:	bf00      	nop
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	42480000 	.word	0x42480000
 80041b0:	428c0000 	.word	0x428c0000
 80041b4:	00000000 	.word	0x00000000

080041b8 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041ca:	3354      	adds	r3, #84	; 0x54
 80041cc:	887a      	ldrh	r2, [r7, #2]
 80041ce:	801a      	strh	r2, [r3, #0]
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f001 fea6 	bl	8005f4a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	4618      	mov	r0, r3
 8004204:	f001 faae 	bl	8005764 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800420e:	3388      	adds	r3, #136	; 0x88
 8004210:	2200      	movs	r2, #0
 8004212:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800421a:	338a      	adds	r3, #138	; 0x8a
 800421c:	2200      	movs	r2, #0
 800421e:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004226:	338c      	adds	r3, #140	; 0x8c
 8004228:	2200      	movs	r2, #0
 800422a:	801a      	strh	r2, [r3, #0]
}
 800422c:	bf00      	nop
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 800423c:	2300      	movs	r3, #0
 800423e:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004240:	2300      	movs	r3, #0
 8004242:	737b      	strb	r3, [r7, #13]
	start();
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7ff ffc9 	bl	80041dc <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800424a:	7b7b      	ldrb	r3, [r7, #13]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d161      	bne.n	8004314 <_ZN9LineTrace7runningEv+0xe0>
		switch(stage){
 8004250:	89fb      	ldrh	r3, [r7, #14]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <_ZN9LineTrace7runningEv+0x28>
 8004256:	2b0a      	cmp	r3, #10
 8004258:	d030      	beq.n	80042bc <_ZN9LineTrace7runningEv+0x88>
 800425a:	e05a      	b.n	8004312 <_ZN9LineTrace7runningEv+0xde>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	4618      	mov	r0, r3
 8004262:	f001 fa73 	bl	800574c <_ZN10SideSensor16getWhiteLineCntREv>
 8004266:	4603      	mov	r3, r0
 8004268:	2b01      	cmp	r3, #1
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d04a      	beq.n	800430c <_ZN9LineTrace7runningEv+0xd8>
				loggerStart();
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fe fe56 	bl	8002f28 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004282:	3354      	adds	r3, #84	; 0x54
 8004284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d002      	beq.n	8004292 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7ff f9c3 	bl	8003618 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fd fa6d 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fd fa4b 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	330c      	adds	r3, #12
 80042aa:	f04f 32ff 	mov.w	r2, #4294967295
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fe f88b 	bl	80023cc <_ZN3LED2LREaa>
				stage = 10;
 80042b6:	230a      	movs	r3, #10
 80042b8:	81fb      	strh	r3, [r7, #14]
			}

			break;
 80042ba:	e027      	b.n	800430c <_ZN9LineTrace7runningEv+0xd8>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 fa43 	bl	800574c <_ZN10SideSensor16getWhiteLineCntREv>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	bf0c      	ite	eq
 80042cc:	2301      	moveq	r3, #1
 80042ce:	2300      	movne	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d01c      	beq.n	8004310 <_ZN9LineTrace7runningEv+0xdc>
				led_.fullColor('M');
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	330c      	adds	r3, #12
 80042da:	214d      	movs	r1, #77	; 0x4d
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fd ffb9 	bl	8002254 <_ZN3LED9fullColorEc>
				loggerStop();
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fe fe3b 	bl	8002f5e <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff f9a8 	bl	800363e <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80042ee:	2064      	movs	r0, #100	; 0x64
 80042f0:	f005 fd8e 	bl	8009e10 <HAL_Delay>

				setTargetVelocity(0);
 80042f4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004324 <_ZN9LineTrace7runningEv+0xf0>
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff fd46 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80042fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004302:	f005 fd85 	bl	8009e10 <HAL_Delay>

				goal_flag = true;
 8004306:	2301      	movs	r3, #1
 8004308:	737b      	strb	r3, [r7, #13]

			}

			break;
 800430a:	e001      	b.n	8004310 <_ZN9LineTrace7runningEv+0xdc>
			break;
 800430c:	bf00      	nop
 800430e:	e79c      	b.n	800424a <_ZN9LineTrace7runningEv+0x16>
			break;
 8004310:	bf00      	nop
	while(goal_flag == false){
 8004312:	e79a      	b.n	800424a <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f807 	bl	8004328 <_ZN9LineTrace4stopEv>
}
 800431a:	bf00      	nop
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	00000000 	.word	0x00000000

08004328 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af02      	add	r7, sp, #8
 800432e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	4618      	mov	r0, r3
 800433e:	f001 fe17 	bl	8005f70 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	330c      	adds	r3, #12
 8004346:	2201      	movs	r2, #1
 8004348:	f04f 31ff 	mov.w	r1, #4294967295
 800434c:	4618      	mov	r0, r3
 800434e:	f7fe f83d 	bl	80023cc <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004358:	3354      	adds	r3, #84	; 0x54
 800435a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d107      	bne.n	8004372 <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69d8      	ldr	r0, [r3, #28]
 8004366:	4b23      	ldr	r3, [pc, #140]	; (80043f4 <_ZN9LineTrace4stopEv+0xcc>)
 8004368:	4a23      	ldr	r2, [pc, #140]	; (80043f8 <_ZN9LineTrace4stopEv+0xd0>)
 800436a:	4924      	ldr	r1, [pc, #144]	; (80043fc <_ZN9LineTrace4stopEv+0xd4>)
 800436c:	f000 fbdc 	bl	8004b28 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8004370:	e006      	b.n	8004380 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	69d8      	ldr	r0, [r3, #28]
 8004376:	4b22      	ldr	r3, [pc, #136]	; (8004400 <_ZN9LineTrace4stopEv+0xd8>)
 8004378:	4a22      	ldr	r2, [pc, #136]	; (8004404 <_ZN9LineTrace4stopEv+0xdc>)
 800437a:	4920      	ldr	r1, [pc, #128]	; (80043fc <_ZN9LineTrace4stopEv+0xd4>)
 800437c:	f000 fbf7 	bl	8004b6e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004386:	3358      	adds	r3, #88	; 0x58
 8004388:	2200      	movs	r2, #0
 800438a:	9200      	str	r2, [sp, #0]
 800438c:	2264      	movs	r2, #100	; 0x64
 800438e:	491e      	ldr	r1, [pc, #120]	; (8004408 <_ZN9LineTrace4stopEv+0xe0>)
 8004390:	481a      	ldr	r0, [pc, #104]	; (80043fc <_ZN9LineTrace4stopEv+0xd4>)
 8004392:	f7fd fa73 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 800439c:	33e8      	adds	r3, #232	; 0xe8
 800439e:	2200      	movs	r2, #0
 80043a0:	9200      	str	r2, [sp, #0]
 80043a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80043a6:	4919      	ldr	r1, [pc, #100]	; (800440c <_ZN9LineTrace4stopEv+0xe4>)
 80043a8:	4814      	ldr	r0, [pc, #80]	; (80043fc <_ZN9LineTrace4stopEv+0xd4>)
 80043aa:	f7fd fa67 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f503 4345 	add.w	r3, r3, #50432	; 0xc500
 80043b4:	33b8      	adds	r3, #184	; 0xb8
 80043b6:	2200      	movs	r2, #0
 80043b8:	9200      	str	r2, [sp, #0]
 80043ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80043be:	4914      	ldr	r1, [pc, #80]	; (8004410 <_ZN9LineTrace4stopEv+0xe8>)
 80043c0:	480e      	ldr	r0, [pc, #56]	; (80043fc <_ZN9LineTrace4stopEv+0xd4>)
 80043c2:	f7fd fa5b 	bl	800187c <sd_write_array_float>

	led_.LR(-1, 0);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	330c      	adds	r3, #12
 80043ca:	2200      	movs	r2, #0
 80043cc:	f04f 31ff 	mov.w	r1, #4294967295
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fd fffb 	bl	80023cc <_ZN3LED2LREaa>

	logger_->resetIdx();
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fc57 	bl	8004c8e <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 fc06 	bl	8004bf6 <_ZN6Logger10resetLogs2Ev>
}
 80043ea:	bf00      	nop
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	08019df8 	.word	0x08019df8
 80043f8:	08019e04 	.word	0x08019e04
 80043fc:	08019e14 	.word	0x08019e14
 8004400:	08019e20 	.word	0x08019e20
 8004404:	08019e2c 	.word	0x08019e2c
 8004408:	08019e3c 	.word	0x08019e3c
 800440c:	08019e4c 	.word	0x08019e4c
 8004410:	08019e58 	.word	0x08019e58

08004414 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 8004414:	b590      	push	{r4, r7, lr}
 8004416:	b08b      	sub	sp, #44	; 0x2c
 8004418:	af02      	add	r7, sp, #8
 800441a:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	4618      	mov	r0, r3
 8004422:	f000 fb25 	bl	8004a70 <_ZN6Logger23getDistanceArrayPointerEv>
 8004426:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	69db      	ldr	r3, [r3, #28]
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fb2d 	bl	8004a8c <_ZN6Logger20getThetaArrayPointerEv>
 8004432:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004434:	2300      	movs	r3, #0
 8004436:	837b      	strh	r3, [r7, #26]
 8004438:	8b7b      	ldrh	r3, [r7, #26]
 800443a:	f241 726f 	movw	r2, #5999	; 0x176f
 800443e:	4293      	cmp	r3, r2
 8004440:	d84b      	bhi.n	80044da <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8004442:	8b7b      	ldrh	r3, [r7, #26]
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4413      	add	r3, r2
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800444e:	8b7b      	ldrh	r3, [r7, #26]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	68fa      	ldr	r2, [r7, #12]
 8004454:	4413      	add	r3, r2
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 800445a:	edd7 7a07 	vldr	s15, [r7, #28]
 800445e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004466:	d101      	bne.n	800446c <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8004468:	4b4c      	ldr	r3, [pc, #304]	; (800459c <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 800446a:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 800446c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004470:	edd7 7a07 	vldr	s15, [r7, #28]
 8004474:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004478:	eeb0 0a66 	vmov.f32	s0, s13
 800447c:	f7fe fb16 	bl	8002aac <_ZSt3absf>
 8004480:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8004484:	edd7 7a05 	vldr	s15, [r7, #20]
 8004488:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80045a0 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 800448c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004494:	db01      	blt.n	800449a <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8004496:	4b43      	ldr	r3, [pc, #268]	; (80045a4 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8004498:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 800449a:	8b7c      	ldrh	r4, [r7, #26]
 800449c:	ed97 0a05 	vldr	s0, [r7, #20]
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fe fed5 	bl	8003250 <_ZN9LineTrace15radius2VelocityEf>
 80044a6:	eef0 7a40 	vmov.f32	s15, s0
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80044b0:	3304      	adds	r3, #4
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 80044ba:	8b7b      	ldrh	r3, [r7, #26]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	441a      	add	r2, r3
 80044c2:	8b7b      	ldrh	r3, [r7, #26]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	6879      	ldr	r1, [r7, #4]
 80044c8:	3332      	adds	r3, #50	; 0x32
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	3304      	adds	r3, #4
 80044d0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80044d2:	8b7b      	ldrh	r3, [r7, #26]
 80044d4:	3301      	adds	r3, #1
 80044d6:	837b      	strh	r3, [r7, #26]
 80044d8:	e7ae      	b.n	8004438 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80044e0:	3354      	adds	r3, #84	; 0x54
 80044e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d120      	bne.n	800452c <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80044f6:	3310      	adds	r3, #16
 80044f8:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004500:	3398      	adds	r3, #152	; 0x98
 8004502:	edd3 7a00 	vldr	s15, [r3]
 8004506:	6939      	ldr	r1, [r7, #16]
 8004508:	eeb0 0a67 	vmov.f32	s0, s15
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7fe ff3b 	bl	8003388 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004518:	3394      	adds	r3, #148	; 0x94
 800451a:	edd3 7a00 	vldr	s15, [r3]
 800451e:	6939      	ldr	r1, [r7, #16]
 8004520:	eeb0 0a67 	vmov.f32	s0, s15
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7fe ffd3 	bl	80034d0 <_ZN9LineTrace20accelerateProcessingEfPKf>
 800452a:	e027      	b.n	800457c <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004532:	3354      	adds	r3, #84	; 0x54
 8004534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d11f      	bne.n	800457c <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004548:	3310      	adds	r3, #16
 800454a:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004552:	33a0      	adds	r3, #160	; 0xa0
 8004554:	edd3 7a00 	vldr	s15, [r3]
 8004558:	6939      	ldr	r1, [r7, #16]
 800455a:	eeb0 0a67 	vmov.f32	s0, s15
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fe ff12 	bl	8003388 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800456a:	339c      	adds	r3, #156	; 0x9c
 800456c:	edd3 7a00 	vldr	s15, [r3]
 8004570:	6939      	ldr	r1, [r7, #16]
 8004572:	eeb0 0a67 	vmov.f32	s0, s15
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f7fe ffaa 	bl	80034d0 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004582:	3310      	adds	r3, #16
 8004584:	2200      	movs	r2, #0
 8004586:	9200      	str	r2, [sp, #0]
 8004588:	f241 7270 	movw	r2, #6000	; 0x1770
 800458c:	4906      	ldr	r1, [pc, #24]	; (80045a8 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 800458e:	4807      	ldr	r0, [pc, #28]	; (80045ac <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8004590:	f7fd f974 	bl	800187c <sd_write_array_float>

}
 8004594:	bf00      	nop
 8004596:	3724      	adds	r7, #36	; 0x24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd90      	pop	{r4, r7, pc}
 800459c:	3727c5ac 	.word	0x3727c5ac
 80045a0:	459c4000 	.word	0x459c4000
 80045a4:	459c4000 	.word	0x459c4000
 80045a8:	08019e68 	.word	0x08019e68
 80045ac:	08019e14 	.word	0x08019e14

080045b0 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 80045b0:	b590      	push	{r4, r7, lr}
 80045b2:	b08b      	sub	sp, #44	; 0x2c
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	69d8      	ldr	r0, [r3, #28]
 80045bc:	4b6b      	ldr	r3, [pc, #428]	; (800476c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 80045be:	4a6c      	ldr	r2, [pc, #432]	; (8004770 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 80045c0:	496c      	ldr	r1, [pc, #432]	; (8004774 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80045c2:	f000 faf9 	bl	8004bb8 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80045cc:	3358      	adds	r3, #88	; 0x58
 80045ce:	2264      	movs	r2, #100	; 0x64
 80045d0:	4969      	ldr	r1, [pc, #420]	; (8004778 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 80045d2:	4868      	ldr	r0, [pc, #416]	; (8004774 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80045d4:	f7fd f9b8 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80045de:	33e8      	adds	r3, #232	; 0xe8
 80045e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80045e4:	4965      	ldr	r1, [pc, #404]	; (800477c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 80045e6:	4863      	ldr	r0, [pc, #396]	; (8004774 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80045e8:	f7fd f9ae 	bl	8001948 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fa3d 	bl	8004a70 <_ZN6Logger23getDistanceArrayPointerEv>
 80045f6:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 fa45 	bl	8004a8c <_ZN6Logger20getThetaArrayPointerEv>
 8004602:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004604:	2300      	movs	r3, #0
 8004606:	837b      	strh	r3, [r7, #26]
 8004608:	8b7b      	ldrh	r3, [r7, #26]
 800460a:	f241 726f 	movw	r2, #5999	; 0x176f
 800460e:	4293      	cmp	r3, r2
 8004610:	d84b      	bhi.n	80046aa <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 8004612:	8b7b      	ldrh	r3, [r7, #26]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	4413      	add	r3, r2
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800461e:	8b7b      	ldrh	r3, [r7, #26]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4413      	add	r3, r2
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 800462a:	edd7 7a07 	vldr	s15, [r7, #28]
 800462e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004636:	d101      	bne.n	800463c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004638:	4b51      	ldr	r3, [pc, #324]	; (8004780 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 800463a:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 800463c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004640:	edd7 7a07 	vldr	s15, [r7, #28]
 8004644:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004648:	eeb0 0a66 	vmov.f32	s0, s13
 800464c:	f7fe fa2e 	bl	8002aac <_ZSt3absf>
 8004650:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004654:	edd7 7a05 	vldr	s15, [r7, #20]
 8004658:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004784 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 800465c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004664:	db01      	blt.n	800466a <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8004666:	4b48      	ldr	r3, [pc, #288]	; (8004788 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8004668:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 800466a:	8b7c      	ldrh	r4, [r7, #26]
 800466c:	ed97 0a05 	vldr	s0, [r7, #20]
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7fe fded 	bl	8003250 <_ZN9LineTrace15radius2VelocityEf>
 8004676:	eef0 7a40 	vmov.f32	s15, s0
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004680:	3304      	adds	r3, #4
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 800468a:	8b7b      	ldrh	r3, [r7, #26]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	441a      	add	r2, r3
 8004692:	8b7b      	ldrh	r3, [r7, #26]
 8004694:	6812      	ldr	r2, [r2, #0]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	3332      	adds	r3, #50	; 0x32
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	3304      	adds	r3, #4
 80046a0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80046a2:	8b7b      	ldrh	r3, [r7, #26]
 80046a4:	3301      	adds	r3, #1
 80046a6:	837b      	strh	r3, [r7, #26]
 80046a8:	e7ae      	b.n	8004608 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80046b0:	3354      	adds	r3, #84	; 0x54
 80046b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d120      	bne.n	80046fc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80046c6:	3310      	adds	r3, #16
 80046c8:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80046d0:	3398      	adds	r3, #152	; 0x98
 80046d2:	edd3 7a00 	vldr	s15, [r3]
 80046d6:	6939      	ldr	r1, [r7, #16]
 80046d8:	eeb0 0a67 	vmov.f32	s0, s15
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7fe fe53 	bl	8003388 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80046e8:	3394      	adds	r3, #148	; 0x94
 80046ea:	edd3 7a00 	vldr	s15, [r3]
 80046ee:	6939      	ldr	r1, [r7, #16]
 80046f0:	eeb0 0a67 	vmov.f32	s0, s15
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f7fe feeb 	bl	80034d0 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80046fa:	e027      	b.n	800474c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004702:	3354      	adds	r3, #84	; 0x54
 8004704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d11f      	bne.n	800474c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004718:	3310      	adds	r3, #16
 800471a:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004722:	33a0      	adds	r3, #160	; 0xa0
 8004724:	edd3 7a00 	vldr	s15, [r3]
 8004728:	6939      	ldr	r1, [r7, #16]
 800472a:	eeb0 0a67 	vmov.f32	s0, s15
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7fe fe2a 	bl	8003388 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800473a:	339c      	adds	r3, #156	; 0x9c
 800473c:	edd3 7a00 	vldr	s15, [r3]
 8004740:	6939      	ldr	r1, [r7, #16]
 8004742:	eeb0 0a67 	vmov.f32	s0, s15
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fe fec2 	bl	80034d0 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004752:	3310      	adds	r3, #16
 8004754:	2200      	movs	r2, #0
 8004756:	9200      	str	r2, [sp, #0]
 8004758:	f241 7270 	movw	r2, #6000	; 0x1770
 800475c:	490b      	ldr	r1, [pc, #44]	; (800478c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 800475e:	4805      	ldr	r0, [pc, #20]	; (8004774 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004760:	f7fd f88c 	bl	800187c <sd_write_array_float>

}
 8004764:	bf00      	nop
 8004766:	3724      	adds	r7, #36	; 0x24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd90      	pop	{r4, r7, pc}
 800476c:	08019df8 	.word	0x08019df8
 8004770:	08019e04 	.word	0x08019e04
 8004774:	08019e14 	.word	0x08019e14
 8004778:	08019e3c 	.word	0x08019e3c
 800477c:	08019e4c 	.word	0x08019e4c
 8004780:	3727c5ac 	.word	0x3727c5ac
 8004784:	459c4000 	.word	0x459c4000
 8004788:	459c4000 	.word	0x459c4000
 800478c:	08019e68 	.word	0x08019e68

08004790 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800479e:	33c0      	adds	r3, #192	; 0xc0
 80047a0:	2200      	movs	r2, #0
 80047a2:	701a      	strb	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047aa:	33c2      	adds	r3, #194	; 0xc2
 80047ac:	2200      	movs	r2, #0
 80047ae:	801a      	strh	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047b6:	33c4      	adds	r3, #196	; 0xc4
 80047b8:	2200      	movs	r2, #0
 80047ba:	801a      	strh	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047c2:	33c6      	adds	r3, #198	; 0xc6
 80047c4:	2200      	movs	r2, #0
 80047c6:	801a      	strh	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047ce:	33c8      	adds	r3, #200	; 0xc8
 80047d0:	2200      	movs	r2, #0
 80047d2:	801a      	strh	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047da:	33ca      	adds	r3, #202	; 0xca
 80047dc:	2200      	movs	r2, #0
 80047de:	801a      	strh	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4618      	mov	r0, r3
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
	...

080047f0 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80047f8:	2300      	movs	r3, #0
 80047fa:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 80047fc:	f7fd f990 	bl	8001b20 <sd_mount>
 8004800:	4603      	mov	r3, r0
 8004802:	2b01      	cmp	r3, #1
 8004804:	bf0c      	ite	eq
 8004806:	2301      	moveq	r3, #1
 8004808:	2300      	movne	r3, #0
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d016      	beq.n	800483e <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004810:	f7fc fc46 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004814:	2100      	movs	r1, #0
 8004816:	2000      	movs	r0, #0
 8004818:	f7fc fc52 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800481c:	4815      	ldr	r0, [pc, #84]	; (8004874 <_ZN6Logger10sdCardInitEv+0x84>)
 800481e:	f7fc fc79 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004822:	2101      	movs	r1, #1
 8004824:	2000      	movs	r0, #0
 8004826:	f7fc fc4b 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 800482a:	4813      	ldr	r0, [pc, #76]	; (8004878 <_ZN6Logger10sdCardInitEv+0x88>)
 800482c:	f7fc fc72 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004830:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004834:	f005 faec 	bl	8009e10 <HAL_Delay>

	  ret = true;
 8004838:	2301      	movs	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
 800483c:	e015      	b.n	800486a <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 800483e:	f7fc fc2f 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004842:	2100      	movs	r1, #0
 8004844:	2000      	movs	r0, #0
 8004846:	f7fc fc3b 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800484a:	480a      	ldr	r0, [pc, #40]	; (8004874 <_ZN6Logger10sdCardInitEv+0x84>)
 800484c:	f7fc fc62 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004850:	2101      	movs	r1, #1
 8004852:	2000      	movs	r0, #0
 8004854:	f7fc fc34 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004858:	4808      	ldr	r0, [pc, #32]	; (800487c <_ZN6Logger10sdCardInitEv+0x8c>)
 800485a:	f7fc fc5b 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 800485e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004862:	f005 fad5 	bl	8009e10 <HAL_Delay>

	  ret = false;
 8004866:	2300      	movs	r3, #0
 8004868:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 800486a:	7bfb      	ldrb	r3, [r7, #15]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	08019e78 	.word	0x08019e78
 8004878:	08019e84 	.word	0x08019e84
 800487c:	08019e8c 	.word	0x08019e8c

08004880 <_ZN6Logger11storeLogIntEs>:
		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
	}
}

void Logger::storeLogInt(int16_t data)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004892:	33c0      	adds	r3, #192	; 0xc0
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d025      	beq.n	80048e6 <_ZN6Logger11storeLogIntEs+0x66>
		store_data_int_[log_index_tim_int_] = data;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048a0:	33c6      	adds	r3, #198	; 0xc6
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	461a      	mov	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f502 52fa 	add.w	r2, r2, #8000	; 0x1f40
 80048ac:	8879      	ldrh	r1, [r7, #2]
 80048ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		log_index_tim_int_++;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048b8:	33c6      	adds	r3, #198	; 0xc6
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048c6:	33c6      	adds	r3, #198	; 0xc6
 80048c8:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_int_ >= LOG_DATA_SIZE_TIM) log_index_tim_int_ = 0;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048d0:	33c6      	adds	r3, #198	; 0xc6
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80048d8:	d305      	bcc.n	80048e6 <_ZN6Logger11storeLogIntEs+0x66>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048e0:	33c6      	adds	r3, #198	; 0xc6
 80048e2:	2200      	movs	r2, #0
 80048e4:	801a      	strh	r2, [r3, #0]
	}

}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <_ZN6Logger12storeLog2IntEs>:
void Logger::storeLog2Int(int16_t data)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	460b      	mov	r3, r1
 80048fc:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004904:	33c0      	adds	r3, #192	; 0xc0
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d025      	beq.n	8004958 <_ZN6Logger12storeLog2IntEs+0x66>
		store_data_int2_[log_index_tim2_int_] = data;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004912:	33c8      	adds	r3, #200	; 0xc8
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800491c:	3310      	adds	r3, #16
 800491e:	8879      	ldrh	r1, [r7, #2]
 8004920:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		log_index_tim2_int_++;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800492a:	33c8      	adds	r3, #200	; 0xc8
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	3301      	adds	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004938:	33c8      	adds	r3, #200	; 0xc8
 800493a:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_int_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_int_ = 0;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004942:	33c8      	adds	r3, #200	; 0xc8
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800494a:	d305      	bcc.n	8004958 <_ZN6Logger12storeLog2IntEs+0x66>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004952:	33c8      	adds	r3, #200	; 0xc8
 8004954:	2200      	movs	r2, #0
 8004956:	801a      	strh	r2, [r3, #0]
	}

}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <_ZN6Logger21storeDistanceAndThetaEff>:

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004970:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800497a:	33ca      	adds	r3, #202	; 0xca
 800497c:	881b      	ldrh	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004984:	3310      	adds	r3, #16
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004994:	33ca      	adds	r3, #202	; 0xca
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 800499e:	3320      	adds	r3, #32
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049ae:	33ca      	adds	r3, #202	; 0xca
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	3301      	adds	r3, #1
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049bc:	33ca      	adds	r3, #202	; 0xca
 80049be:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049c6:	33ca      	adds	r3, #202	; 0xca
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	f241 726f 	movw	r2, #5999	; 0x176f
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d905      	bls.n	80049de <_ZN6Logger21storeDistanceAndThetaEff+0x7a>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049d8:	33ca      	adds	r3, #202	; 0xca
 80049da:	2200      	movs	r2, #0
 80049dc:	801a      	strh	r2, [r3, #0]
	//}
}
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b085      	sub	sp, #20
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	60f8      	str	r0, [r7, #12]
 80049f2:	ed87 0a02 	vstr	s0, [r7, #8]
 80049f6:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a00:	33ca      	adds	r3, #202	; 0xca
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004a0a:	3350      	adds	r3, #80	; 0x50
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a1a:	33ca      	adds	r3, #202	; 0xca
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004a24:	3340      	adds	r3, #64	; 0x40
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a34:	33ca      	adds	r3, #202	; 0xca
 8004a36:	881b      	ldrh	r3, [r3, #0]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a42:	33ca      	adds	r3, #202	; 0xca
 8004a44:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a4c:	33ca      	adds	r3, #202	; 0xca
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	f241 726f 	movw	r2, #5999	; 0x176f
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d905      	bls.n	8004a64 <_ZN6Logger22storeDistanceAndTheta2Eff+0x7a>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a5e:	33ca      	adds	r3, #202	; 0xca
 8004a60:	2200      	movs	r2, #0
 8004a62:	801a      	strh	r2, [r3, #0]
	//}
}
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004a7e:	3340      	adds	r3, #64	; 0x40
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004a9a:	3380      	adds	r3, #128	; 0x80
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	4613      	mov	r3, r2
 8004abc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004ac0:	6879      	ldr	r1, [r7, #4]
 8004ac2:	68b8      	ldr	r0, [r7, #8]
 8004ac4:	f7fc feda 	bl	800187c <sd_write_array_float>
}
 8004ac8:	bf00      	nop
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <_ZN6Logger11saveLogsIntEPKcS1_>:
{
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
}

void Logger::saveLogsInt(const char *folder_name, const char *file_name)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_int_, OVER_WRITE); //write
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	68b8      	ldr	r0, [r7, #8]
 8004af0:	f7fc ffb6 	bl	8001a60 <sd_write_array_int>
}
 8004af4:	bf00      	nop
 8004af6:	3710      	adds	r7, #16
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <_ZN6Logger12saveLogs2IntEPKcS1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8004b0e:	3320      	adds	r3, #32
 8004b10:	2200      	movs	r2, #0
 8004b12:	9200      	str	r2, [sp, #0]
 8004b14:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	68b8      	ldr	r0, [r7, #8]
 8004b1c:	f7fc ffa0 	bl	8001a60 <sd_write_array_int>
}
 8004b20:	bf00      	nop
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b3c:	3340      	adds	r3, #64	; 0x40
 8004b3e:	2200      	movs	r2, #0
 8004b40:	9200      	str	r2, [sp, #0]
 8004b42:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	68b8      	ldr	r0, [r7, #8]
 8004b4a:	f7fc fe97 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004b54:	3380      	adds	r3, #128	; 0x80
 8004b56:	2200      	movs	r2, #0
 8004b58:	9200      	str	r2, [sp, #0]
 8004b5a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b5e:	6839      	ldr	r1, [r7, #0]
 8004b60:	68b8      	ldr	r0, [r7, #8]
 8004b62:	f7fc fe8b 	bl	800187c <sd_write_array_float>
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b086      	sub	sp, #24
 8004b72:	af02      	add	r7, sp, #8
 8004b74:	60f8      	str	r0, [r7, #12]
 8004b76:	60b9      	str	r1, [r7, #8]
 8004b78:	607a      	str	r2, [r7, #4]
 8004b7a:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004b82:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004b86:	2200      	movs	r2, #0
 8004b88:	9200      	str	r2, [sp, #0]
 8004b8a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	68b8      	ldr	r0, [r7, #8]
 8004b92:	f7fc fe73 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004b9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	9200      	str	r2, [sp, #0]
 8004ba4:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ba8:	6839      	ldr	r1, [r7, #0]
 8004baa:	68b8      	ldr	r0, [r7, #8]
 8004bac:	f7fc fe66 	bl	800187c <sd_write_array_float>
}
 8004bb0:	bf00      	nop
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
 8004bc4:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004bcc:	3340      	adds	r3, #64	; 0x40
 8004bce:	f241 7270 	movw	r2, #6000	; 0x1770
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	68b8      	ldr	r0, [r7, #8]
 8004bd6:	f7fc feb7 	bl	8001948 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004be0:	3380      	adds	r3, #128	; 0x80
 8004be2:	f241 7270 	movw	r2, #6000	; 0x1770
 8004be6:	6839      	ldr	r1, [r7, #0]
 8004be8:	68b8      	ldr	r0, [r7, #8]
 8004bea:	f7fc fead 	bl	8001948 <sd_read_array_float>
}
 8004bee:	bf00      	nop
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004bf6:	b480      	push	{r7}
 8004bf8:	b08b      	sub	sp, #44	; 0x2c
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004c04:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c08:	61fb      	str	r3, [r7, #28]
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004c14:	3340      	adds	r3, #64	; 0x40
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d009      	beq.n	8004c34 <_ZN6Logger10resetLogs2Ev+0x3e>
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	617b      	str	r3, [r7, #20]
		log = 0;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	3304      	adds	r3, #4
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
 8004c32:	e7f1      	b.n	8004c18 <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004c3a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	623b      	str	r3, [r7, #32]
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004c4a:	3340      	adds	r3, #64	; 0x40
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	6a3a      	ldr	r2, [r7, #32]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d009      	beq.n	8004c6a <_ZN6Logger10resetLogs2Ev+0x74>
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	3304      	adds	r3, #4
 8004c66:	623b      	str	r3, [r7, #32]
 8004c68:	e7f1      	b.n	8004c4e <_ZN6Logger10resetLogs2Ev+0x58>
	}

	log_index_tim_ = 0;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c70:	33c2      	adds	r3, #194	; 0xc2
 8004c72:	2200      	movs	r2, #0
 8004c74:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c7c:	33ca      	adds	r3, #202	; 0xca
 8004c7e:	2200      	movs	r2, #0
 8004c80:	801a      	strh	r2, [r3, #0]
}
 8004c82:	bf00      	nop
 8004c84:	372c      	adds	r7, #44	; 0x2c
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004c8e:	b480      	push	{r7}
 8004c90:	b083      	sub	sp, #12
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c9c:	33c2      	adds	r3, #194	; 0xc2
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ca8:	33ca      	adds	r3, #202	; 0xca
 8004caa:	2200      	movs	r2, #0
 8004cac:	801a      	strh	r2, [r3, #0]
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <_ZN6Logger5startEv>:

void Logger::start()
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004cc8:	33c0      	adds	r3, #192	; 0xc0
 8004cca:	2201      	movs	r2, #1
 8004ccc:	701a      	strb	r2, [r3, #0]
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ce8:	33c0      	adds	r3, #192	; 0xc0
 8004cea:	2200      	movs	r2, #0
 8004cec:	701a      	strb	r2, [r3, #0]
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	801a      	strh	r2, [r3, #0]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	805a      	strh	r2, [r3, #2]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4618      	mov	r0, r3
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <_ZN5Motor4initEv>:

void Motor::init()
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004d24:	2108      	movs	r1, #8
 8004d26:	4805      	ldr	r0, [pc, #20]	; (8004d3c <_ZN5Motor4initEv+0x20>)
 8004d28:	f00a fa22 	bl	800f170 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004d2c:	210c      	movs	r1, #12
 8004d2e:	4803      	ldr	r0, [pc, #12]	; (8004d3c <_ZN5Motor4initEv+0x20>)
 8004d30:	f00a fa1e 	bl	800f170 <HAL_TIM_PWM_Start>

}
 8004d34:	bf00      	nop
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20044710 	.word	0x20044710

08004d40 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	da0d      	bge.n	8004d6e <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004d52:	2200      	movs	r2, #0
 8004d54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d58:	481f      	ldr	r0, [pc, #124]	; (8004dd8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004d5a:	f006 faef 	bl	800b33c <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	425b      	negs	r3, r3
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	81fb      	strh	r3, [r7, #14]
 8004d6c:	e00a      	b.n	8004d84 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d74:	4818      	ldr	r0, [pc, #96]	; (8004dd8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004d76:	f006 fae1 	bl	800b33c <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	da0d      	bge.n	8004daa <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d94:	4810      	ldr	r0, [pc, #64]	; (8004dd8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004d96:	f006 fad1 	bl	800b33c <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	425b      	negs	r3, r3
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	81bb      	strh	r3, [r7, #12]
 8004da8:	e00a      	b.n	8004dc0 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004daa:	2200      	movs	r2, #0
 8004dac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004db0:	4809      	ldr	r0, [pc, #36]	; (8004dd8 <_ZN5Motor9motorCtrlEv+0x98>)
 8004db2:	f006 fac3 	bl	800b33c <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004dc0:	89fa      	ldrh	r2, [r7, #14]
 8004dc2:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <_ZN5Motor9motorCtrlEv+0x9c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004dc8:	89ba      	ldrh	r2, [r7, #12]
 8004dca:	4b04      	ldr	r3, [pc, #16]	; (8004ddc <_ZN5Motor9motorCtrlEv+0x9c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004dd0:	bf00      	nop
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40020c00 	.word	0x40020c00
 8004ddc:	20044710 	.word	0x20044710

08004de0 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004de0:	b590      	push	{r4, r7, lr}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6178      	str	r0, [r7, #20]
 8004de8:	ed87 0b02 	vstr	d0, [r7, #8]
 8004dec:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	4b30      	ldr	r3, [pc, #192]	; (8004eb8 <_ZN5Motor8setRatioEdd+0xd8>)
 8004df6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dfa:	f7fb fea5 	bl	8000b48 <__aeabi_dcmpgt>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <_ZN5Motor8setRatioEdd+0x30>
 8004e04:	f04f 0300 	mov.w	r3, #0
 8004e08:	4c2b      	ldr	r4, [pc, #172]	; (8004eb8 <_ZN5Motor8setRatioEdd+0xd8>)
 8004e0a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004e0e:	e00e      	b.n	8004e2e <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	4b29      	ldr	r3, [pc, #164]	; (8004ebc <_ZN5Motor8setRatioEdd+0xdc>)
 8004e16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e1a:	f7fb fe77 	bl	8000b0c <__aeabi_dcmplt>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d004      	beq.n	8004e2e <_ZN5Motor8setRatioEdd+0x4e>
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	4c24      	ldr	r4, [pc, #144]	; (8004ebc <_ZN5Motor8setRatioEdd+0xdc>)
 8004e2a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004e2e:	f04f 0200 	mov.w	r2, #0
 8004e32:	4b21      	ldr	r3, [pc, #132]	; (8004eb8 <_ZN5Motor8setRatioEdd+0xd8>)
 8004e34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e38:	f7fb fe86 	bl	8000b48 <__aeabi_dcmpgt>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d005      	beq.n	8004e4e <_ZN5Motor8setRatioEdd+0x6e>
 8004e42:	f04f 0300 	mov.w	r3, #0
 8004e46:	4c1c      	ldr	r4, [pc, #112]	; (8004eb8 <_ZN5Motor8setRatioEdd+0xd8>)
 8004e48:	e9c7 3400 	strd	r3, r4, [r7]
 8004e4c:	e00e      	b.n	8004e6c <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	4b1a      	ldr	r3, [pc, #104]	; (8004ebc <_ZN5Motor8setRatioEdd+0xdc>)
 8004e54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e58:	f7fb fe58 	bl	8000b0c <__aeabi_dcmplt>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d004      	beq.n	8004e6c <_ZN5Motor8setRatioEdd+0x8c>
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	4c15      	ldr	r4, [pc, #84]	; (8004ebc <_ZN5Motor8setRatioEdd+0xdc>)
 8004e68:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	4b13      	ldr	r3, [pc, #76]	; (8004ec0 <_ZN5Motor8setRatioEdd+0xe0>)
 8004e72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e76:	f7fb fbd7 	bl	8000628 <__aeabi_dmul>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	4618      	mov	r0, r3
 8004e80:	4621      	mov	r1, r4
 8004e82:	f7fb fe81 	bl	8000b88 <__aeabi_d2iz>
 8004e86:	4603      	mov	r3, r0
 8004e88:	b21a      	sxth	r2, r3
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004e8e:	f04f 0200 	mov.w	r2, #0
 8004e92:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <_ZN5Motor8setRatioEdd+0xe0>)
 8004e94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e98:	f7fb fbc6 	bl	8000628 <__aeabi_dmul>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	460c      	mov	r4, r1
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	f7fb fe70 	bl	8000b88 <__aeabi_d2iz>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	b21a      	sxth	r2, r3
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	805a      	strh	r2, [r3, #2]

}
 8004eb0:	bf00      	nop
 8004eb2:	371c      	adds	r7, #28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd90      	pop	{r4, r7, pc}
 8004eb8:	3ff00000 	.word	0x3ff00000
 8004ebc:	bff00000 	.word	0xbff00000
 8004ec0:	409c2000 	.word	0x409c2000

08004ec4 <_ZN5Motor20getLeftCounterPeriodEv>:

int16_t Motor::getLeftCounterPeriod()
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
	return temp_left_counter_period_;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <_ZN5Motor21getRightCounterPeriodEv>:

int16_t Motor::getRightCounterPeriod()
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
	return temp_right_counter_period_;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004ef8:	b490      	push	{r4, r7}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	f04f 0400 	mov.w	r4, #0
 8004f10:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	f04f 0400 	mov.w	r4, #0
 8004f1e:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	f04f 0400 	mov.w	r4, #0
 8004f2c:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	f04f 0400 	mov.w	r4, #0
 8004f3a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	f04f 0300 	mov.w	r3, #0
 8004f44:	f04f 0400 	mov.w	r4, #0
 8004f48:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	609a      	str	r2, [r3, #8]
}
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc90      	pop	{r4, r7}
 8004f68:	4770      	bx	lr
 8004f6a:	0000      	movs	r0, r0
 8004f6c:	0000      	movs	r0, r0
	...

08004f70 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f74:	b086      	sub	sp, #24
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fc ffa6 	bl	8001ed0 <_ZN3IMU8getOmegaEv>
 8004f84:	ee10 3a10 	vmov	r3, s0
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fb faf5 	bl	8000578 <__aeabi_f2d>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	460c      	mov	r4, r1
 8004f92:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fc fb84 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8004fa0:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004fa4:	a376      	add	r3, pc, #472	; (adr r3, 8005180 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004faa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004fae:	f7fb fb3b 	bl	8000628 <__aeabi_dmul>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f7fb fad8 	bl	8000578 <__aeabi_f2d>
 8004fc8:	4682      	mov	sl, r0
 8004fca:	468b      	mov	fp, r1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fe0:	f7fb fc4c 	bl	800087c <__aeabi_ddiv>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4640      	mov	r0, r8
 8004fea:	4649      	mov	r1, r9
 8004fec:	f7fb f966 	bl	80002bc <__adddf3>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	ec43 2b17 	vmov	d7, r2, r3
 8004ff8:	eeb0 0a47 	vmov.f32	s0, s14
 8004ffc:	eef0 0a67 	vmov.f32	s1, s15
 8005000:	f00f fbfa 	bl	80147f8 <cos>
 8005004:	ec53 2b10 	vmov	r2, r3, d0
 8005008:	4650      	mov	r0, sl
 800500a:	4659      	mov	r1, fp
 800500c:	f7fb fb0c 	bl	8000628 <__aeabi_dmul>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4620      	mov	r0, r4
 8005016:	4629      	mov	r1, r5
 8005018:	f7fb f950 	bl	80002bc <__adddf3>
 800501c:	4603      	mov	r3, r0
 800501e:	460c      	mov	r4, r1
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f7fb faa3 	bl	8000578 <__aeabi_f2d>
 8005032:	4682      	mov	sl, r0
 8005034:	468b      	mov	fp, r1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005042:	f04f 0200 	mov.w	r2, #0
 8005046:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800504a:	f7fb fc17 	bl	800087c <__aeabi_ddiv>
 800504e:	4602      	mov	r2, r0
 8005050:	460b      	mov	r3, r1
 8005052:	4640      	mov	r0, r8
 8005054:	4649      	mov	r1, r9
 8005056:	f7fb f931 	bl	80002bc <__adddf3>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	ec43 2b17 	vmov	d7, r2, r3
 8005062:	eeb0 0a47 	vmov.f32	s0, s14
 8005066:	eef0 0a67 	vmov.f32	s1, s15
 800506a:	f00f fc09 	bl	8014880 <sin>
 800506e:	ec53 2b10 	vmov	r2, r3, d0
 8005072:	4650      	mov	r0, sl
 8005074:	4659      	mov	r1, fp
 8005076:	f7fb fad7 	bl	8000628 <__aeabi_dmul>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4620      	mov	r0, r4
 8005080:	4629      	mov	r1, r5
 8005082:	f7fb f91b 	bl	80002bc <__adddf3>
 8005086:	4603      	mov	r3, r0
 8005088:	460c      	mov	r4, r1
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800509c:	461a      	mov	r2, r3
 800509e:	4623      	mov	r3, r4
 80050a0:	f7fb f90c 	bl	80002bc <__adddf3>
 80050a4:	4603      	mov	r3, r0
 80050a6:	460c      	mov	r4, r1
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	ed93 7b08 	vldr	d7, [r3, #32]
 80050ba:	eeb0 0a47 	vmov.f32	s0, s14
 80050be:	eef0 0a67 	vmov.f32	s1, s15
 80050c2:	f00f fb99 	bl	80147f8 <cos>
 80050c6:	ec51 0b10 	vmov	r0, r1, d0
 80050ca:	f04f 0200 	mov.w	r2, #0
 80050ce:	4b28      	ldr	r3, [pc, #160]	; (8005170 <_ZN8Odometry12calcPotitionEv+0x200>)
 80050d0:	f7fb faaa 	bl	8000628 <__aeabi_dmul>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4620      	mov	r0, r4
 80050da:	4629      	mov	r1, r5
 80050dc:	f7fb f8ee 	bl	80002bc <__adddf3>
 80050e0:	4603      	mov	r3, r0
 80050e2:	460c      	mov	r4, r1
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	ed93 7b08 	vldr	d7, [r3, #32]
 80050f6:	eeb0 0a47 	vmov.f32	s0, s14
 80050fa:	eef0 0a67 	vmov.f32	s1, s15
 80050fe:	f00f fbbf 	bl	8014880 <sin>
 8005102:	ec51 0b10 	vmov	r0, r1, d0
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	4b19      	ldr	r3, [pc, #100]	; (8005170 <_ZN8Odometry12calcPotitionEv+0x200>)
 800510c:	f7fb fa8c 	bl	8000628 <__aeabi_dmul>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4620      	mov	r0, r4
 8005116:	4629      	mov	r1, r5
 8005118:	f7fb f8d0 	bl	80002bc <__adddf3>
 800511c:	4603      	mov	r3, r0
 800511e:	460c      	mov	r4, r1
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800512c:	4618      	mov	r0, r3
 800512e:	4621      	mov	r1, r4
 8005130:	f7fb fd72 	bl	8000c18 <__aeabi_d2f>
 8005134:	4602      	mov	r2, r0
 8005136:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <_ZN8Odometry12calcPotitionEv+0x204>)
 8005138:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005140:	4618      	mov	r0, r3
 8005142:	4621      	mov	r1, r4
 8005144:	f7fb fd68 	bl	8000c18 <__aeabi_d2f>
 8005148:	4602      	mov	r2, r0
 800514a:	4b0b      	ldr	r3, [pc, #44]	; (8005178 <_ZN8Odometry12calcPotitionEv+0x208>)
 800514c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005154:	4618      	mov	r0, r3
 8005156:	4621      	mov	r1, r4
 8005158:	f7fb fd5e 	bl	8000c18 <__aeabi_d2f>
 800515c:	4602      	mov	r2, r0
 800515e:	4b07      	ldr	r3, [pc, #28]	; (800517c <_ZN8Odometry12calcPotitionEv+0x20c>)
 8005160:	601a      	str	r2, [r3, #0]
}
 8005162:	bf00      	nop
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800516c:	f3af 8000 	nop.w
 8005170:	405b8000 	.word	0x405b8000
 8005174:	2000028c 	.word	0x2000028c
 8005178:	20000290 	.word	0x20000290
 800517c:	20000294 	.word	0x20000294
 8005180:	d2f1a9fc 	.word	0xd2f1a9fc
 8005184:	3f50624d 	.word	0x3f50624d

08005188 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f7ff feed 	bl	8004f70 <_ZN8Odometry12calcPotitionEv>
}
 8005196:	bf00      	nop
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 800519e:	b490      	push	{r4, r7}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
	return theta_;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80051ac:	ec44 3b17 	vmov	d7, r3, r4
}
 80051b0:	eeb0 0a47 	vmov.f32	s0, s14
 80051b4:	eef0 0a67 	vmov.f32	s1, s15
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc90      	pop	{r4, r7}
 80051be:	4770      	bx	lr

080051c0 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80051c0:	b490      	push	{r4, r7}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	f04f 0400 	mov.w	r4, #0
 80051d2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	f04f 0400 	mov.w	r4, #0
 80051e0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	f04f 0400 	mov.w	r4, #0
 80051ee:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80051f2:	bf00      	nop
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bc90      	pop	{r4, r7}
 80051fa:	4770      	bx	lr

080051fc <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 80051fc:	b490      	push	{r4, r7}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	f04f 0400 	mov.w	r4, #0
 8005214:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	f04f 0400 	mov.w	r4, #0
 8005222:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	f04f 0400 	mov.w	r4, #0
 8005230:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800523a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800523e:	2200      	movs	r2, #0
 8005240:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8005242:	4a29      	ldr	r2, [pc, #164]	; (80052e8 <_ZN13PathFollowingC1Ev+0xec>)
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	f04f 0400 	mov.w	r4, #0
 800524c:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005250:	4a25      	ldr	r2, [pc, #148]	; (80052e8 <_ZN13PathFollowingC1Ev+0xec>)
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	f04f 0400 	mov.w	r4, #0
 800525a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 800525e:	4a22      	ldr	r2, [pc, #136]	; (80052e8 <_ZN13PathFollowingC1Ev+0xec>)
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	f04f 0400 	mov.w	r4, #0
 8005268:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 800526c:	4a1f      	ldr	r2, [pc, #124]	; (80052ec <_ZN13PathFollowingC1Ev+0xf0>)
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	f04f 0400 	mov.w	r4, #0
 8005276:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 800527a:	4a1c      	ldr	r2, [pc, #112]	; (80052ec <_ZN13PathFollowingC1Ev+0xf0>)
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	f04f 0400 	mov.w	r4, #0
 8005284:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8005288:	4a18      	ldr	r2, [pc, #96]	; (80052ec <_ZN13PathFollowingC1Ev+0xf0>)
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	f04f 0400 	mov.w	r4, #0
 8005292:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8005296:	4a15      	ldr	r2, [pc, #84]	; (80052ec <_ZN13PathFollowingC1Ev+0xf0>)
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	f04f 0400 	mov.w	r4, #0
 80052a0:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80052a4:	4a11      	ldr	r2, [pc, #68]	; (80052ec <_ZN13PathFollowingC1Ev+0xf0>)
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	f04f 0400 	mov.w	r4, #0
 80052ae:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80052b2:	4a0e      	ldr	r2, [pc, #56]	; (80052ec <_ZN13PathFollowingC1Ev+0xf0>)
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	f04f 0400 	mov.w	r4, #0
 80052bc:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80052c0:	4a0b      	ldr	r2, [pc, #44]	; (80052f0 <_ZN13PathFollowingC1Ev+0xf4>)
 80052c2:	f04f 0300 	mov.w	r3, #0
 80052c6:	f04f 0400 	mov.w	r4, #0
 80052ca:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80052ce:	4a08      	ldr	r2, [pc, #32]	; (80052f0 <_ZN13PathFollowingC1Ev+0xf4>)
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	f04f 0400 	mov.w	r4, #0
 80052d8:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4618      	mov	r0, r3
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc90      	pop	{r4, r7}
 80052e6:	4770      	bx	lr
 80052e8:	20044c10 	.word	0x20044c10
 80052ec:	20044ba0 	.word	0x20044ba0
 80052f0:	20044c00 	.word	0x20044c00

080052f4 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80052fc:	f001 fdce 	bl	8006e9c <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005300:	f107 0318 	add.w	r3, r7, #24
 8005304:	2201      	movs	r2, #1
 8005306:	4915      	ldr	r1, [pc, #84]	; (800535c <_ZN13PathFollowing4initEv+0x68>)
 8005308:	4815      	ldr	r0, [pc, #84]	; (8005360 <_ZN13PathFollowing4initEv+0x6c>)
 800530a:	f7fc fb63 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 800530e:	f107 0310 	add.w	r3, r7, #16
 8005312:	2201      	movs	r2, #1
 8005314:	4913      	ldr	r1, [pc, #76]	; (8005364 <_ZN13PathFollowing4initEv+0x70>)
 8005316:	4812      	ldr	r0, [pc, #72]	; (8005360 <_ZN13PathFollowing4initEv+0x6c>)
 8005318:	f7fc fb5c 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 800531c:	f107 0308 	add.w	r3, r7, #8
 8005320:	2201      	movs	r2, #1
 8005322:	4911      	ldr	r1, [pc, #68]	; (8005368 <_ZN13PathFollowing4initEv+0x74>)
 8005324:	480e      	ldr	r0, [pc, #56]	; (8005360 <_ZN13PathFollowing4initEv+0x6c>)
 8005326:	f7fc fb55 	bl	80019d4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 800532a:	ed97 7b06 	vldr	d7, [r7, #24]
 800532e:	ed97 6b04 	vldr	d6, [r7, #16]
 8005332:	ed97 5b02 	vldr	d5, [r7, #8]
 8005336:	eeb0 2a45 	vmov.f32	s4, s10
 800533a:	eef0 2a65 	vmov.f32	s5, s11
 800533e:	eeb0 1a46 	vmov.f32	s2, s12
 8005342:	eef0 1a66 	vmov.f32	s3, s13
 8005346:	eeb0 0a47 	vmov.f32	s0, s14
 800534a:	eef0 0a67 	vmov.f32	s1, s15
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f80c 	bl	800536c <_ZN13PathFollowing7setGainEddd>
}
 8005354:	bf00      	nop
 8005356:	3720      	adds	r7, #32
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	08019e94 	.word	0x08019e94
 8005360:	08019e9c 	.word	0x08019e9c
 8005364:	08019ea4 	.word	0x08019ea4
 8005368:	08019eac 	.word	0x08019eac

0800536c <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 800536c:	b490      	push	{r4, r7}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	61f8      	str	r0, [r7, #28]
 8005374:	ed87 0b04 	vstr	d0, [r7, #16]
 8005378:	ed87 1b02 	vstr	d1, [r7, #8]
 800537c:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005380:	4a09      	ldr	r2, [pc, #36]	; (80053a8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005382:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005386:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 800538a:	4a07      	ldr	r2, [pc, #28]	; (80053a8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800538c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005390:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8005394:	4a04      	ldr	r2, [pc, #16]	; (80053a8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005396:	e9d7 3400 	ldrd	r3, r4, [r7]
 800539a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800539e:	bf00      	nop
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bc90      	pop	{r4, r7}
 80053a6:	4770      	bx	lr
 80053a8:	20044c10 	.word	0x20044c10

080053ac <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80053b4:	2088      	movs	r0, #136	; 0x88
 80053b6:	f7fc fece 	bl	8002156 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80053ba:	2080      	movs	r0, #128	; 0x80
 80053bc:	f7fc fecb 	bl	8002156 <INA260_init>
}
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80053c8:	b590      	push	{r4, r7, lr}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80053d0:	2188      	movs	r1, #136	; 0x88
 80053d2:	2002      	movs	r0, #2
 80053d4:	f7fc fe5c 	bl	8002090 <INA260_read>
 80053d8:	4603      	mov	r3, r0
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fb f8ba 	bl	8000554 <__aeabi_i2d>
 80053e0:	a30c      	add	r3, pc, #48	; (adr r3, 8005414 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80053e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e6:	f7fb f91f 	bl	8000628 <__aeabi_dmul>
 80053ea:	4603      	mov	r3, r0
 80053ec:	460c      	mov	r4, r1
 80053ee:	4618      	mov	r0, r3
 80053f0:	4621      	mov	r1, r4
 80053f2:	f7fb fc11 	bl	8000c18 <__aeabi_d2f>
 80053f6:	4602      	mov	r2, r0
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	4a03      	ldr	r2, [pc, #12]	; (8005410 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8005402:	6013      	str	r3, [r2, #0]
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	bd90      	pop	{r4, r7, pc}
 800540c:	f3af 8000 	nop.w
 8005410:	20000298 	.word	0x20000298
 8005414:	47ae147b 	.word	0x47ae147b
 8005418:	3f547ae1 	.word	0x3f547ae1

0800541c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	ee07 3a90 	vmov	s15, r3

}
 800542c:	eeb0 0a67 	vmov.f32	s0, s15
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005448:	2102      	movs	r1, #2
 800544a:	4822      	ldr	r0, [pc, #136]	; (80054d4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800544c:	f005 ff5e 	bl	800b30c <HAL_GPIO_ReadPin>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	bf0c      	ite	eq
 8005456:	2301      	moveq	r3, #1
 8005458:	2300      	movne	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005460:	89fb      	ldrh	r3, [r7, #14]
 8005462:	f043 0301 	orr.w	r3, r3, #1
 8005466:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005468:	2108      	movs	r1, #8
 800546a:	481a      	ldr	r0, [pc, #104]	; (80054d4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800546c:	f005 ff4e 	bl	800b30c <HAL_GPIO_ReadPin>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	bf0c      	ite	eq
 8005476:	2301      	moveq	r3, #1
 8005478:	2300      	movne	r3, #0
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005480:	89fb      	ldrh	r3, [r7, #14]
 8005482:	f043 0302 	orr.w	r3, r3, #2
 8005486:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005488:	2110      	movs	r1, #16
 800548a:	4812      	ldr	r0, [pc, #72]	; (80054d4 <_ZN12RotarySwitch8getValueEv+0x98>)
 800548c:	f005 ff3e 	bl	800b30c <HAL_GPIO_ReadPin>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	bf0c      	ite	eq
 8005496:	2301      	moveq	r3, #1
 8005498:	2300      	movne	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <_ZN12RotarySwitch8getValueEv+0x6c>
 80054a0:	89fb      	ldrh	r3, [r7, #14]
 80054a2:	f043 0304 	orr.w	r3, r3, #4
 80054a6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80054a8:	2180      	movs	r1, #128	; 0x80
 80054aa:	480a      	ldr	r0, [pc, #40]	; (80054d4 <_ZN12RotarySwitch8getValueEv+0x98>)
 80054ac:	f005 ff2e 	bl	800b30c <HAL_GPIO_ReadPin>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	bf0c      	ite	eq
 80054b6:	2301      	moveq	r3, #1
 80054b8:	2300      	movne	r3, #0
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <_ZN12RotarySwitch8getValueEv+0x8c>
 80054c0:	89fb      	ldrh	r3, [r7, #14]
 80054c2:	f043 0308 	orr.w	r3, r3, #8
 80054c6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80054c8:	89fb      	ldrh	r3, [r7, #14]

}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40020c00 	.word	0x40020c00

080054d8 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	709a      	strb	r2, [r3, #2]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	70da      	strb	r2, [r3, #3]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	809a      	strh	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	80da      	strh	r2, [r3, #6]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	721a      	strb	r2, [r3, #8]
{

}
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4618      	mov	r0, r3
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
	...

08005514 <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	7a1b      	ldrb	r3, [r3, #8]
 8005520:	f083 0301 	eor.w	r3, r3, #1
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	f000 80ea 	beq.w	8005700 <_ZN10SideSensor12updateStatusEv+0x1ec>
		if(white_flag1 == false){
 800552c:	4b76      	ldr	r3, [pc, #472]	; (8005708 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	f083 0301 	eor.w	r3, r3, #1
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d032      	beq.n	80055a0 <_ZN10SideSensor12updateStatusEv+0x8c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2) && HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) ){ // Right is white and Left is black
 800553a:	2104      	movs	r1, #4
 800553c:	4873      	ldr	r0, [pc, #460]	; (800570c <_ZN10SideSensor12updateStatusEv+0x1f8>)
 800553e:	f005 fee5 	bl	800b30c <HAL_GPIO_ReadPin>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d109      	bne.n	800555c <_ZN10SideSensor12updateStatusEv+0x48>
 8005548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800554c:	4870      	ldr	r0, [pc, #448]	; (8005710 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 800554e:	f005 fedd 	bl	800b30c <HAL_GPIO_ReadPin>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <_ZN10SideSensor12updateStatusEv+0x48>
 8005558:	2301      	movs	r3, #1
 800555a:	e000      	b.n	800555e <_ZN10SideSensor12updateStatusEv+0x4a>
 800555c:	2300      	movs	r3, #0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d006      	beq.n	8005570 <_ZN10SideSensor12updateStatusEv+0x5c>
				cnt_r++;
 8005562:	4b6c      	ldr	r3, [pc, #432]	; (8005714 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005564:	881b      	ldrh	r3, [r3, #0]
 8005566:	3301      	adds	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	4b6a      	ldr	r3, [pc, #424]	; (8005714 <_ZN10SideSensor12updateStatusEv+0x200>)
 800556c:	801a      	strh	r2, [r3, #0]
 800556e:	e002      	b.n	8005576 <_ZN10SideSensor12updateStatusEv+0x62>
			}
			else{
				cnt_r = 0;
 8005570:	4b68      	ldr	r3, [pc, #416]	; (8005714 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005572:	2200      	movs	r2, #0
 8005574:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8005576:	4b67      	ldr	r3, [pc, #412]	; (8005714 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	2b04      	cmp	r3, #4
 800557c:	d945      	bls.n	800560a <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ |= 0x01;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	f043 0301 	orr.w	r3, r3, #1
 8005586:	b29a      	uxth	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 8005592:	4b5d      	ldr	r3, [pc, #372]	; (8005708 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8005594:	2201      	movs	r2, #1
 8005596:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8005598:	4b5e      	ldr	r3, [pc, #376]	; (8005714 <_ZN10SideSensor12updateStatusEv+0x200>)
 800559a:	2200      	movs	r2, #0
 800559c:	801a      	strh	r2, [r3, #0]
 800559e:	e034      	b.n	800560a <_ZN10SideSensor12updateStatusEv+0xf6>
			}

		}
		else if(white_flag1 == true){
 80055a0:	4b59      	ldr	r3, [pc, #356]	; (8005708 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d030      	beq.n	800560a <_ZN10SideSensor12updateStatusEv+0xf6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ // Right is black
 80055a8:	2104      	movs	r1, #4
 80055aa:	4858      	ldr	r0, [pc, #352]	; (800570c <_ZN10SideSensor12updateStatusEv+0x1f8>)
 80055ac:	f005 feae 	bl	800b30c <HAL_GPIO_ReadPin>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	bf14      	ite	ne
 80055b6:	2301      	movne	r3, #1
 80055b8:	2300      	moveq	r3, #0
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d006      	beq.n	80055ce <_ZN10SideSensor12updateStatusEv+0xba>
				cnt_r++;
 80055c0:	4b54      	ldr	r3, [pc, #336]	; (8005714 <_ZN10SideSensor12updateStatusEv+0x200>)
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	3301      	adds	r3, #1
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	4b52      	ldr	r3, [pc, #328]	; (8005714 <_ZN10SideSensor12updateStatusEv+0x200>)
 80055ca:	801a      	strh	r2, [r3, #0]
 80055cc:	e002      	b.n	80055d4 <_ZN10SideSensor12updateStatusEv+0xc0>
			}
			else{
				cnt_r = 0;
 80055ce:	4b51      	ldr	r3, [pc, #324]	; (8005714 <_ZN10SideSensor12updateStatusEv+0x200>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80055d4:	4b4f      	ldr	r3, [pc, #316]	; (8005714 <_ZN10SideSensor12updateStatusEv+0x200>)
 80055d6:	881b      	ldrh	r3, [r3, #0]
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d916      	bls.n	800560a <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ ^= 0x01;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	f083 0301 	eor.w	r3, r3, #1
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 80055f0:	4b45      	ldr	r3, [pc, #276]	; (8005708 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	88db      	ldrh	r3, [r3, #6]
 80055fa:	3301      	adds	r3, #1
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	80da      	strh	r2, [r3, #6]
				mon_cnt_r = white_line_cnt_r_;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	88da      	ldrh	r2, [r3, #6]
 8005606:	4b44      	ldr	r3, [pc, #272]	; (8005718 <_ZN10SideSensor12updateStatusEv+0x204>)
 8005608:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 800560a:	4b44      	ldr	r3, [pc, #272]	; (800571c <_ZN10SideSensor12updateStatusEv+0x208>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	f083 0301 	eor.w	r3, r3, #1
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d031      	beq.n	800567c <_ZN10SideSensor12updateStatusEv+0x168>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) && HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ //Left is white and Right is black
 8005618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800561c:	483c      	ldr	r0, [pc, #240]	; (8005710 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 800561e:	f005 fe75 	bl	800b30c <HAL_GPIO_ReadPin>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d108      	bne.n	800563a <_ZN10SideSensor12updateStatusEv+0x126>
 8005628:	2104      	movs	r1, #4
 800562a:	4838      	ldr	r0, [pc, #224]	; (800570c <_ZN10SideSensor12updateStatusEv+0x1f8>)
 800562c:	f005 fe6e 	bl	800b30c <HAL_GPIO_ReadPin>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <_ZN10SideSensor12updateStatusEv+0x126>
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <_ZN10SideSensor12updateStatusEv+0x128>
 800563a:	2300      	movs	r3, #0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d006      	beq.n	800564e <_ZN10SideSensor12updateStatusEv+0x13a>
				cnt_l++;
 8005640:	4b37      	ldr	r3, [pc, #220]	; (8005720 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	3301      	adds	r3, #1
 8005646:	b29a      	uxth	r2, r3
 8005648:	4b35      	ldr	r3, [pc, #212]	; (8005720 <_ZN10SideSensor12updateStatusEv+0x20c>)
 800564a:	801a      	strh	r2, [r3, #0]
 800564c:	e002      	b.n	8005654 <_ZN10SideSensor12updateStatusEv+0x140>
			}
			else{
				cnt_l = 0;
 800564e:	4b34      	ldr	r3, [pc, #208]	; (8005720 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005650:	2200      	movs	r2, #0
 8005652:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005654:	4b32      	ldr	r3, [pc, #200]	; (8005720 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	2b04      	cmp	r3, #4
 800565a:	d90f      	bls.n	800567c <_ZN10SideSensor12updateStatusEv+0x168>
				status_ |= 0x02;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	f043 0302 	orr.w	r3, r3, #2
 8005664:	b29a      	uxth	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 8005670:	4b2a      	ldr	r3, [pc, #168]	; (800571c <_ZN10SideSensor12updateStatusEv+0x208>)
 8005672:	2201      	movs	r2, #1
 8005674:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8005676:	4b2a      	ldr	r3, [pc, #168]	; (8005720 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005678:	2200      	movs	r2, #0
 800567a:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 800567c:	4b27      	ldr	r3, [pc, #156]	; (800571c <_ZN10SideSensor12updateStatusEv+0x208>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d031      	beq.n	80056e8 <_ZN10SideSensor12updateStatusEv+0x1d4>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){ //Left is black
 8005684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005688:	4821      	ldr	r0, [pc, #132]	; (8005710 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 800568a:	f005 fe3f 	bl	800b30c <HAL_GPIO_ReadPin>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	bf14      	ite	ne
 8005694:	2301      	movne	r3, #1
 8005696:	2300      	moveq	r3, #0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d006      	beq.n	80056ac <_ZN10SideSensor12updateStatusEv+0x198>
				cnt_l++;
 800569e:	4b20      	ldr	r3, [pc, #128]	; (8005720 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	3301      	adds	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	4b1e      	ldr	r3, [pc, #120]	; (8005720 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80056a8:	801a      	strh	r2, [r3, #0]
 80056aa:	e002      	b.n	80056b2 <_ZN10SideSensor12updateStatusEv+0x19e>
			}
			else{
				cnt_l = 0;
 80056ac:	4b1c      	ldr	r3, [pc, #112]	; (8005720 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80056b2:	4b1b      	ldr	r3, [pc, #108]	; (8005720 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d916      	bls.n	80056e8 <_ZN10SideSensor12updateStatusEv+0x1d4>
				status_ ^= 0x02;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	f083 0302 	eor.w	r3, r3, #2
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 80056ce:	4b13      	ldr	r3, [pc, #76]	; (800571c <_ZN10SideSensor12updateStatusEv+0x208>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	889b      	ldrh	r3, [r3, #4]
 80056d8:	3301      	adds	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	809a      	strh	r2, [r3, #4]
				mon_cnt_l = white_line_cnt_l_;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	889a      	ldrh	r2, [r3, #4]
 80056e4:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <_ZN10SideSensor12updateStatusEv+0x210>)
 80056e6:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	881a      	ldrh	r2, [r3, #0]
 80056ec:	4b0e      	ldr	r3, [pc, #56]	; (8005728 <_ZN10SideSensor12updateStatusEv+0x214>)
 80056ee:	801a      	strh	r2, [r3, #0]
		mon_status_L = status_L_;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	789a      	ldrb	r2, [r3, #2]
 80056f4:	4b0d      	ldr	r3, [pc, #52]	; (800572c <_ZN10SideSensor12updateStatusEv+0x218>)
 80056f6:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	78da      	ldrb	r2, [r3, #3]
 80056fc:	4b0c      	ldr	r3, [pc, #48]	; (8005730 <_ZN10SideSensor12updateStatusEv+0x21c>)
 80056fe:	701a      	strb	r2, [r3, #0]
	}

}
 8005700:	bf00      	nop
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	200002a4 	.word	0x200002a4
 800570c:	40021000 	.word	0x40021000
 8005710:	40020c00 	.word	0x40020c00
 8005714:	200002a8 	.word	0x200002a8
 8005718:	200002a2 	.word	0x200002a2
 800571c:	200002a5 	.word	0x200002a5
 8005720:	200002a6 	.word	0x200002a6
 8005724:	200002a0 	.word	0x200002a0
 8005728:	2000029c 	.word	0x2000029c
 800572c:	2000029e 	.word	0x2000029e
 8005730:	2000029f 	.word	0x2000029f

08005734 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
	return status_L_;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	789b      	ldrb	r3, [r3, #2]
}
 8005740:	4618      	mov	r0, r3
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	88db      	ldrh	r3, [r3, #6]
}
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	80da      	strh	r2, [r3, #6]
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	721a      	strb	r2, [r3, #8]
}
 8005792:	bf00      	nop
 8005794:	370c      	adds	r7, #12
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	721a      	strb	r2, [r3, #8]
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	7a1b      	ldrb	r3, [r3, #8]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3308      	adds	r3, #8
 80057e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80057e4:	2100      	movs	r1, #0
 80057e6:	4618      	mov	r0, r3
 80057e8:	f010 f886 	bl	80158f8 <memset>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057f2:	811a      	strh	r2, [r3, #8]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057fa:	815a      	strh	r2, [r3, #10]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005802:	819a      	strh	r2, [r3, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800580a:	81da      	strh	r2, [r3, #14]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005812:	821a      	strh	r2, [r3, #16]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800581a:	825a      	strh	r2, [r3, #18]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	829a      	strh	r2, [r3, #20]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2201      	movs	r2, #1
 8005826:	82da      	strh	r2, [r3, #22]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2201      	movs	r2, #1
 800582c:	831a      	strh	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	835a      	strh	r2, [r3, #26]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	839a      	strh	r2, [r3, #28]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2201      	movs	r2, #1
 800583e:	83da      	strh	r2, [r3, #30]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	841a      	strh	r2, [r3, #32]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800584c:	845a      	strh	r2, [r3, #34]	; 0x22
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2201      	movs	r2, #1
 8005852:	849a      	strh	r2, [r3, #36]	; 0x24
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800585a:	84da      	strh	r2, [r3, #38]	; 0x26
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	851a      	strh	r2, [r3, #40]	; 0x28
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005868:	855a      	strh	r2, [r3, #42]	; 0x2a
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	859a      	strh	r2, [r3, #44]	; 0x2c
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005876:	85da      	strh	r2, [r3, #46]	; 0x2e
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800587e:	861a      	strh	r2, [r3, #48]	; 0x30
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2201      	movs	r2, #1
 8005884:	865a      	strh	r2, [r3, #50]	; 0x32
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2201      	movs	r2, #1
 800588a:	869a      	strh	r2, [r3, #52]	; 0x34
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005892:	86da      	strh	r2, [r3, #54]	; 0x36
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800589a:	871a      	strh	r2, [r3, #56]	; 0x38
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	875a      	strh	r2, [r3, #58]	; 0x3a
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	879a      	strh	r2, [r3, #60]	; 0x3c
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2201      	movs	r2, #1
 80058ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058f2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005904:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2201      	movs	r2, #1
 800590c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2201      	movs	r2, #1
 8005914:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800591e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005928:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005932:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2201      	movs	r2, #1
 8005942:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800594c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2201      	movs	r2, #1
 8005964:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005976:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005990:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2201      	movs	r2, #1
 8005998:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059a2:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059bc:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059d6:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059e0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059f2:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059fc:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a0e:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a18:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a22:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a44:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a4e:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a58:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a62:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a74:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aa6:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ab0:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ac2:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ad4:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005af6:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b00:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b1a:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b2c:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3710      	adds	r7, #16
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 8005b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d042      	beq.n	8005bf8 <_ZN20SystemIdentification10updateMsigEv+0x98>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005b7e:	461a      	mov	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3204      	adds	r2, #4
 8005b84:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005b88:	ee07 3a90 	vmov	s15, r3
 8005b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bb0:	4a13      	ldr	r2, [pc, #76]	; (8005c00 <_ZN20SystemIdentification10updateMsigEv+0xa0>)
 8005bb2:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005bba:	2bf9      	cmp	r3, #249	; 0xf9
 8005bbc:	d903      	bls.n	8005bc6 <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	22fa      	movs	r2, #250	; 0xfa
 8005bc2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, inputVal_);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685c      	ldr	r4, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fa fcd1 	bl	8000578 <__aeabi_f2d>
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	460e      	mov	r6, r1
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fa fcc9 	bl	8000578 <__aeabi_f2d>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	ec43 2b11 	vmov	d1, r2, r3
 8005bee:	ec46 5b10 	vmov	d0, r5, r6
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f7ff f8f4 	bl	8004de0 <_ZN5Motor8setRatioEdd>

	}

}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c00:	200002ac 	.word	0x200002ac

08005c04 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	609a      	str	r2, [r3, #8]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	60da      	str	r2, [r3, #12]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f04f 0200 	mov.w	r2, #0
 8005c38:	611a      	str	r2, [r3, #16]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	615a      	str	r2, [r3, #20]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	619a      	str	r2, [r3, #24]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	61da      	str	r2, [r3, #28]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	621a      	str	r2, [r3, #32]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	625a      	str	r2, [r3, #36]	; 0x24
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	0000      	movs	r0, r0
 8005c9c:	0000      	movs	r0, r0
	...

08005ca0 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005ca0:	b590      	push	{r4, r7, lr}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cac:	f107 020c 	add.w	r2, r7, #12
 8005cb0:	f107 0110 	add.w	r1, r7, #16
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fb fce3 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005cba:	ed97 7a04 	vldr	s14, [r7, #16]
 8005cbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cc6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005cca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005cce:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005cd2:	6978      	ldr	r0, [r7, #20]
 8005cd4:	f7fa fc50 	bl	8000578 <__aeabi_f2d>
 8005cd8:	a30e      	add	r3, pc, #56	; (adr r3, 8005d14 <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	f7fa fca3 	bl	8000628 <__aeabi_dmul>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	4621      	mov	r1, r4
 8005cea:	f7fa ff95 	bl	8000c18 <__aeabi_d2f>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	4a05      	ldr	r2, [pc, #20]	; (8005d10 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005cfa:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	ee07 3a90 	vmov	s15, r3
}
 8005d04:	eeb0 0a67 	vmov.f32	s0, s15
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd90      	pop	{r4, r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	200002b0 	.word	0x200002b0
 8005d14:	1ab1d998 	.word	0x1ab1d998
 8005d18:	3f7830b5 	.word	0x3f7830b5
 8005d1c:	00000000 	.word	0x00000000

08005d20 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	ed93 7a00 	vldr	s14, [r3]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d38:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d007      	beq.n	8005d56 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005d46:	4b48      	ldr	r3, [pc, #288]	; (8005e68 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005d48:	f04f 0200 	mov.w	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	edd3 7a04 	vldr	s15, [r3, #16]
 8005d5c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d64:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005d68:	4b3f      	ldr	r3, [pc, #252]	; (8005e68 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fa fc03 	bl	8000578 <__aeabi_f2d>
 8005d72:	4604      	mov	r4, r0
 8005d74:	460d      	mov	r5, r1
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	ed93 7a06 	vldr	s14, [r3, #24]
 8005d7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d84:	ee17 0a90 	vmov	r0, s15
 8005d88:	f7fa fbf6 	bl	8000578 <__aeabi_f2d>
 8005d8c:	a334      	add	r3, pc, #208	; (adr r3, 8005e60 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	f7fa fc49 	bl	8000628 <__aeabi_dmul>
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	f7fa fa8d 	bl	80002bc <__adddf3>
 8005da2:	4603      	mov	r3, r0
 8005da4:	460c      	mov	r4, r1
 8005da6:	4618      	mov	r0, r3
 8005da8:	4621      	mov	r1, r4
 8005daa:	f7fa ff35 	bl	8000c18 <__aeabi_d2f>
 8005dae:	4602      	mov	r2, r0
 8005db0:	4b2d      	ldr	r3, [pc, #180]	; (8005e68 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005db2:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	ed93 7a05 	vldr	s14, [r3, #20]
 8005dba:	4b2c      	ldr	r3, [pc, #176]	; (8005e6c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005dbc:	edd3 7a00 	vldr	s15, [r3]
 8005dc0:	edd7 6a05 	vldr	s13, [r7, #20]
 8005dc4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dcc:	ee17 0a90 	vmov	r0, s15
 8005dd0:	f7fa fbd2 	bl	8000578 <__aeabi_f2d>
 8005dd4:	a322      	add	r3, pc, #136	; (adr r3, 8005e60 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dda:	f7fa fd4f 	bl	800087c <__aeabi_ddiv>
 8005dde:	4603      	mov	r3, r0
 8005de0:	460c      	mov	r4, r1
 8005de2:	4618      	mov	r0, r3
 8005de4:	4621      	mov	r1, r4
 8005de6:	f7fa ff17 	bl	8000c18 <__aeabi_d2f>
 8005dea:	4603      	mov	r3, r0
 8005dec:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005dee:	ed97 7a04 	vldr	s14, [r7, #16]
 8005df2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005df6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dfa:	4b1b      	ldr	r3, [pc, #108]	; (8005e68 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005dfc:	edd3 7a00 	vldr	s15, [r3]
 8005e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e04:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005e12:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e1a:	ee17 0a90 	vmov	r0, s15
 8005e1e:	f7fa fbab 	bl	8000578 <__aeabi_f2d>
 8005e22:	4605      	mov	r5, r0
 8005e24:	460e      	mov	r6, r1
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005e2c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005e30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e34:	ee17 0a90 	vmov	r0, s15
 8005e38:	f7fa fb9e 	bl	8000578 <__aeabi_f2d>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	460b      	mov	r3, r1
 8005e40:	ec43 2b11 	vmov	d1, r2, r3
 8005e44:	ec46 5b10 	vmov	d0, r5, r6
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f7fe ffc9 	bl	8004de0 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005e4e:	4a07      	ldr	r2, [pc, #28]	; (8005e6c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	6013      	str	r3, [r2, #0]
}
 8005e54:	bf00      	nop
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e5c:	f3af 8000 	nop.w
 8005e60:	d2f1a9fc 	.word	0xd2f1a9fc
 8005e64:	3f50624d 	.word	0x3f50624d
 8005e68:	200002b8 	.word	0x200002b8
 8005e6c:	200002b4 	.word	0x200002b4

08005e70 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	ed87 0a02 	vstr	s0, [r7, #8]
 8005e7c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	605a      	str	r2, [r3, #4]
}
 8005e8c:	bf00      	nop
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005ea4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005eb4:	bf00      	nop
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	ed87 0a02 	vstr	s0, [r7, #8]
 8005ecc:	edc7 0a01 	vstr	s1, [r7, #4]
 8005ed0:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	683a      	ldr	r2, [r7, #0]
 8005ee4:	615a      	str	r2, [r3, #20]
}
 8005ee6:	bf00      	nop
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b085      	sub	sp, #20
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	ed87 0a02 	vstr	s0, [r7, #8]
 8005efe:	edc7 0a01 	vstr	s1, [r7, #4]
 8005f02:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	621a      	str	r2, [r3, #32]
}
 8005f18:	bf00      	nop
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7ff feb7 	bl	8005ca0 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7ff feef 	bl	8005d20 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005f42:	bf00      	nop
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
	...

08005f70 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f84:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005fa0 <_ZN12VelocityCtrl4stopEv+0x30>
 8005f88:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005fa0 <_ZN12VelocityCtrl4stopEv+0x30>
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fe ff27 	bl	8004de0 <_ZN5Motor8setRatioEdd>

}
 8005f92:	bf00      	nop
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	f3af 8000 	nop.w
	...

08005fa8 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1e      	ldr	r2, [pc, #120]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d10e      	bne.n	8005fd8 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005fba:	f001 fe11 	bl	8007be0 <cppFlip100ns>

		tim7_timer++;
 8005fbe:	4b1d      	ldr	r3, [pc, #116]	; (8006034 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	4a1b      	ldr	r2, [pc, #108]	; (8006034 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005fc6:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005fc8:	4b1a      	ldr	r3, [pc, #104]	; (8006034 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a1a      	ldr	r2, [pc, #104]	; (8006038 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d902      	bls.n	8005fd8 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005fd2:	4b18      	ldr	r3, [pc, #96]	; (8006034 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a17      	ldr	r2, [pc, #92]	; (800603c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d10e      	bne.n	8006000 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005fe2:	f001 fdcd 	bl	8007b80 <cppFlip1ms>

		tim6_timer++;
 8005fe6:	4b16      	ldr	r3, [pc, #88]	; (8006040 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3301      	adds	r3, #1
 8005fec:	4a14      	ldr	r2, [pc, #80]	; (8006040 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005fee:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005ff0:	4b13      	ldr	r3, [pc, #76]	; (8006040 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a10      	ldr	r2, [pc, #64]	; (8006038 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d902      	bls.n	8006000 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005ffa:	4b11      	ldr	r3, [pc, #68]	; (8006040 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a0f      	ldr	r2, [pc, #60]	; (8006044 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d10e      	bne.n	8006028 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 800600a:	f001 fdf3 	bl	8007bf4 <cppFlip10ms>

		tim13_timer++;
 800600e:	4b0e      	ldr	r3, [pc, #56]	; (8006048 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3301      	adds	r3, #1
 8006014:	4a0c      	ldr	r2, [pc, #48]	; (8006048 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8006016:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8006018:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a06      	ldr	r2, [pc, #24]	; (8006038 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d902      	bls.n	8006028 <HAL_TIM_PeriodElapsedCallback+0x80>
 8006022:	4b09      	ldr	r3, [pc, #36]	; (8006048 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8006024:	2200      	movs	r2, #0
 8006026:	601a      	str	r2, [r3, #0]
	}

}
 8006028:	bf00      	nop
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	40001400 	.word	0x40001400
 8006034:	200448c4 	.word	0x200448c4
 8006038:	0001869f 	.word	0x0001869f
 800603c:	40001000 	.word	0x40001000
 8006040:	20044880 	.word	0x20044880
 8006044:	40001c00 	.word	0x40001c00
 8006048:	200448c8 	.word	0x200448c8

0800604c <init>:

void init()
{
 800604c:	b580      	push	{r7, lr}
 800604e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8006050:	2201      	movs	r2, #1
 8006052:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006056:	4808      	ldr	r0, [pc, #32]	; (8006078 <init+0x2c>)
 8006058:	f005 f970 	bl	800b33c <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 800605c:	4807      	ldr	r0, [pc, #28]	; (800607c <init+0x30>)
 800605e:	f009 f838 	bl	800f0d2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8006062:	4807      	ldr	r0, [pc, #28]	; (8006080 <init+0x34>)
 8006064:	f009 f835 	bl	800f0d2 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8006068:	4806      	ldr	r0, [pc, #24]	; (8006084 <init+0x38>)
 800606a:	f009 f832 	bl	800f0d2 <HAL_TIM_Base_Start_IT>

	cppInit();
 800606e:	f001 fce3 	bl	8007a38 <cppInit>

	//path_following_initialize();

}
 8006072:	bf00      	nop
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	40021000 	.word	0x40021000
 800607c:	200449ac 	.word	0x200449ac
 8006080:	20044b50 	.word	0x20044b50
 8006084:	200448cc 	.word	0x200448cc

08006088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800608c:	f003 fe4e 	bl	8009d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006090:	f000 f82a 	bl	80060e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006094:	f000 fdbc 	bl	8006c10 <MX_GPIO_Init>
  MX_DMA_Init();
 8006098:	f000 fd8a 	bl	8006bb0 <MX_DMA_Init>
  MX_I2C2_Init();
 800609c:	f000 f9e8 	bl	8006470 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80060a0:	f000 fa14 	bl	80064cc <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80060a4:	f000 fa32 	bl	800650c <MX_SPI2_Init>
  MX_TIM1_Init();
 80060a8:	f000 fa66 	bl	8006578 <MX_TIM1_Init>
  MX_TIM4_Init();
 80060ac:	f000 fb70 	bl	8006790 <MX_TIM4_Init>
  MX_TIM8_Init();
 80060b0:	f000 fc3c 	bl	800692c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80060b4:	f000 fd52 	bl	8006b5c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80060b8:	f00a ffde 	bl	8011078 <MX_FATFS_Init>
  MX_TIM6_Init();
 80060bc:	f000 fbcc 	bl	8006858 <MX_TIM6_Init>
  MX_I2C1_Init();
 80060c0:	f000 f9a8 	bl	8006414 <MX_I2C1_Init>
  MX_TIM3_Init();
 80060c4:	f000 fb00 	bl	80066c8 <MX_TIM3_Init>
  MX_TIM10_Init();
 80060c8:	f000 fc88 	bl	80069dc <MX_TIM10_Init>
  MX_TIM11_Init();
 80060cc:	f000 fcd4 	bl	8006a78 <MX_TIM11_Init>
  MX_ADC2_Init();
 80060d0:	f000 f898 	bl	8006204 <MX_ADC2_Init>
  MX_TIM7_Init();
 80060d4:	f000 fbf6 	bl	80068c4 <MX_TIM7_Init>
  MX_TIM13_Init();
 80060d8:	f000 fd1c 	bl	8006b14 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 80060dc:	f7ff ffb6 	bl	800604c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 80060e0:	f001 fdb6 	bl	8007c50 <cppLoop>
 80060e4:	e7fc      	b.n	80060e0 <main+0x58>
	...

080060e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b0a4      	sub	sp, #144	; 0x90
 80060ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80060f2:	2234      	movs	r2, #52	; 0x34
 80060f4:	2100      	movs	r1, #0
 80060f6:	4618      	mov	r0, r3
 80060f8:	f00f fbfe 	bl	80158f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80060fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	605a      	str	r2, [r3, #4]
 8006106:	609a      	str	r2, [r3, #8]
 8006108:	60da      	str	r2, [r3, #12]
 800610a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800610c:	f107 030c 	add.w	r3, r7, #12
 8006110:	223c      	movs	r2, #60	; 0x3c
 8006112:	2100      	movs	r1, #0
 8006114:	4618      	mov	r0, r3
 8006116:	f00f fbef 	bl	80158f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800611a:	2300      	movs	r3, #0
 800611c:	60bb      	str	r3, [r7, #8]
 800611e:	4b37      	ldr	r3, [pc, #220]	; (80061fc <SystemClock_Config+0x114>)
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	4a36      	ldr	r2, [pc, #216]	; (80061fc <SystemClock_Config+0x114>)
 8006124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006128:	6413      	str	r3, [r2, #64]	; 0x40
 800612a:	4b34      	ldr	r3, [pc, #208]	; (80061fc <SystemClock_Config+0x114>)
 800612c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006132:	60bb      	str	r3, [r7, #8]
 8006134:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006136:	2300      	movs	r3, #0
 8006138:	607b      	str	r3, [r7, #4]
 800613a:	4b31      	ldr	r3, [pc, #196]	; (8006200 <SystemClock_Config+0x118>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a30      	ldr	r2, [pc, #192]	; (8006200 <SystemClock_Config+0x118>)
 8006140:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	4b2e      	ldr	r3, [pc, #184]	; (8006200 <SystemClock_Config+0x118>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800614e:	607b      	str	r3, [r7, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006152:	2301      	movs	r3, #1
 8006154:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006156:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800615a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800615c:	2302      	movs	r3, #2
 800615e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006160:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006164:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006166:	2308      	movs	r3, #8
 8006168:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800616a:	23b4      	movs	r3, #180	; 0xb4
 800616c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006170:	2302      	movs	r3, #2
 8006172:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8006176:	2308      	movs	r3, #8
 8006178:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 800617c:	2302      	movs	r3, #2
 800617e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006182:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006186:	4618      	mov	r0, r3
 8006188:	f006 fcfa 	bl	800cb80 <HAL_RCC_OscConfig>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8006192:	f000 fe7f 	bl	8006e94 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8006196:	f006 f875 	bl	800c284 <HAL_PWREx_EnableOverDrive>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80061a0:	f000 fe78 	bl	8006e94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80061a4:	230f      	movs	r3, #15
 80061a6:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80061a8:	2302      	movs	r3, #2
 80061aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80061ac:	2300      	movs	r3, #0
 80061ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80061b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80061b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80061b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061ba:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80061bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061c0:	2105      	movs	r1, #5
 80061c2:	4618      	mov	r0, r3
 80061c4:	f006 f8ae 	bl	800c324 <HAL_RCC_ClockConfig>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80061ce:	f000 fe61 	bl	8006e94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80061d2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80061d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80061d8:	2300      	movs	r3, #0
 80061da:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80061dc:	2300      	movs	r3, #0
 80061de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80061e0:	f107 030c 	add.w	r3, r7, #12
 80061e4:	4618      	mov	r0, r3
 80061e6:	f006 fa8d 	bl	800c704 <HAL_RCCEx_PeriphCLKConfig>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80061f0:	f000 fe50 	bl	8006e94 <Error_Handler>
  }
}
 80061f4:	bf00      	nop
 80061f6:	3790      	adds	r7, #144	; 0x90
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	40023800 	.word	0x40023800
 8006200:	40007000 	.word	0x40007000

08006204 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800620a:	463b      	mov	r3, r7
 800620c:	2200      	movs	r2, #0
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	605a      	str	r2, [r3, #4]
 8006212:	609a      	str	r2, [r3, #8]
 8006214:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8006216:	4b7c      	ldr	r3, [pc, #496]	; (8006408 <MX_ADC2_Init+0x204>)
 8006218:	4a7c      	ldr	r2, [pc, #496]	; (800640c <MX_ADC2_Init+0x208>)
 800621a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800621c:	4b7a      	ldr	r3, [pc, #488]	; (8006408 <MX_ADC2_Init+0x204>)
 800621e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006222:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006224:	4b78      	ldr	r3, [pc, #480]	; (8006408 <MX_ADC2_Init+0x204>)
 8006226:	2200      	movs	r2, #0
 8006228:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800622a:	4b77      	ldr	r3, [pc, #476]	; (8006408 <MX_ADC2_Init+0x204>)
 800622c:	2201      	movs	r2, #1
 800622e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006230:	4b75      	ldr	r3, [pc, #468]	; (8006408 <MX_ADC2_Init+0x204>)
 8006232:	2201      	movs	r2, #1
 8006234:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006236:	4b74      	ldr	r3, [pc, #464]	; (8006408 <MX_ADC2_Init+0x204>)
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800623e:	4b72      	ldr	r3, [pc, #456]	; (8006408 <MX_ADC2_Init+0x204>)
 8006240:	2200      	movs	r2, #0
 8006242:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006244:	4b70      	ldr	r3, [pc, #448]	; (8006408 <MX_ADC2_Init+0x204>)
 8006246:	4a72      	ldr	r2, [pc, #456]	; (8006410 <MX_ADC2_Init+0x20c>)
 8006248:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800624a:	4b6f      	ldr	r3, [pc, #444]	; (8006408 <MX_ADC2_Init+0x204>)
 800624c:	2200      	movs	r2, #0
 800624e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8006250:	4b6d      	ldr	r3, [pc, #436]	; (8006408 <MX_ADC2_Init+0x204>)
 8006252:	220e      	movs	r2, #14
 8006254:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8006256:	4b6c      	ldr	r3, [pc, #432]	; (8006408 <MX_ADC2_Init+0x204>)
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800625e:	4b6a      	ldr	r3, [pc, #424]	; (8006408 <MX_ADC2_Init+0x204>)
 8006260:	2201      	movs	r2, #1
 8006262:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006264:	4868      	ldr	r0, [pc, #416]	; (8006408 <MX_ADC2_Init+0x204>)
 8006266:	f003 fdf5 	bl	8009e54 <HAL_ADC_Init>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006270:	f000 fe10 	bl	8006e94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006274:	230a      	movs	r3, #10
 8006276:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006278:	2301      	movs	r3, #1
 800627a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800627c:	2306      	movs	r3, #6
 800627e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006280:	463b      	mov	r3, r7
 8006282:	4619      	mov	r1, r3
 8006284:	4860      	ldr	r0, [pc, #384]	; (8006408 <MX_ADC2_Init+0x204>)
 8006286:	f003 ff39 	bl	800a0fc <HAL_ADC_ConfigChannel>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006290:	f000 fe00 	bl	8006e94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8006294:	230b      	movs	r3, #11
 8006296:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006298:	2302      	movs	r3, #2
 800629a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800629c:	463b      	mov	r3, r7
 800629e:	4619      	mov	r1, r3
 80062a0:	4859      	ldr	r0, [pc, #356]	; (8006408 <MX_ADC2_Init+0x204>)
 80062a2:	f003 ff2b 	bl	800a0fc <HAL_ADC_ConfigChannel>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80062ac:	f000 fdf2 	bl	8006e94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80062b0:	230c      	movs	r3, #12
 80062b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80062b4:	2303      	movs	r3, #3
 80062b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062b8:	463b      	mov	r3, r7
 80062ba:	4619      	mov	r1, r3
 80062bc:	4852      	ldr	r0, [pc, #328]	; (8006408 <MX_ADC2_Init+0x204>)
 80062be:	f003 ff1d 	bl	800a0fc <HAL_ADC_ConfigChannel>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80062c8:	f000 fde4 	bl	8006e94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80062cc:	230d      	movs	r3, #13
 80062ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80062d0:	2304      	movs	r3, #4
 80062d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062d4:	463b      	mov	r3, r7
 80062d6:	4619      	mov	r1, r3
 80062d8:	484b      	ldr	r0, [pc, #300]	; (8006408 <MX_ADC2_Init+0x204>)
 80062da:	f003 ff0f 	bl	800a0fc <HAL_ADC_ConfigChannel>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80062e4:	f000 fdd6 	bl	8006e94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80062e8:	2300      	movs	r3, #0
 80062ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80062ec:	2305      	movs	r3, #5
 80062ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062f0:	463b      	mov	r3, r7
 80062f2:	4619      	mov	r1, r3
 80062f4:	4844      	ldr	r0, [pc, #272]	; (8006408 <MX_ADC2_Init+0x204>)
 80062f6:	f003 ff01 	bl	800a0fc <HAL_ADC_ConfigChannel>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8006300:	f000 fdc8 	bl	8006e94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8006304:	2301      	movs	r3, #1
 8006306:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006308:	2306      	movs	r3, #6
 800630a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800630c:	463b      	mov	r3, r7
 800630e:	4619      	mov	r1, r3
 8006310:	483d      	ldr	r0, [pc, #244]	; (8006408 <MX_ADC2_Init+0x204>)
 8006312:	f003 fef3 	bl	800a0fc <HAL_ADC_ConfigChannel>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800631c:	f000 fdba 	bl	8006e94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006320:	2302      	movs	r3, #2
 8006322:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8006324:	2307      	movs	r3, #7
 8006326:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006328:	463b      	mov	r3, r7
 800632a:	4619      	mov	r1, r3
 800632c:	4836      	ldr	r0, [pc, #216]	; (8006408 <MX_ADC2_Init+0x204>)
 800632e:	f003 fee5 	bl	800a0fc <HAL_ADC_ConfigChannel>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006338:	f000 fdac 	bl	8006e94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800633c:	2303      	movs	r3, #3
 800633e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006340:	2308      	movs	r3, #8
 8006342:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006344:	463b      	mov	r3, r7
 8006346:	4619      	mov	r1, r3
 8006348:	482f      	ldr	r0, [pc, #188]	; (8006408 <MX_ADC2_Init+0x204>)
 800634a:	f003 fed7 	bl	800a0fc <HAL_ADC_ConfigChannel>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8006354:	f000 fd9e 	bl	8006e94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006358:	2304      	movs	r3, #4
 800635a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800635c:	2309      	movs	r3, #9
 800635e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006360:	463b      	mov	r3, r7
 8006362:	4619      	mov	r1, r3
 8006364:	4828      	ldr	r0, [pc, #160]	; (8006408 <MX_ADC2_Init+0x204>)
 8006366:	f003 fec9 	bl	800a0fc <HAL_ADC_ConfigChannel>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006370:	f000 fd90 	bl	8006e94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006374:	2305      	movs	r3, #5
 8006376:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006378:	230a      	movs	r3, #10
 800637a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800637c:	463b      	mov	r3, r7
 800637e:	4619      	mov	r1, r3
 8006380:	4821      	ldr	r0, [pc, #132]	; (8006408 <MX_ADC2_Init+0x204>)
 8006382:	f003 febb 	bl	800a0fc <HAL_ADC_ConfigChannel>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800638c:	f000 fd82 	bl	8006e94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006390:	2306      	movs	r3, #6
 8006392:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8006394:	230b      	movs	r3, #11
 8006396:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006398:	463b      	mov	r3, r7
 800639a:	4619      	mov	r1, r3
 800639c:	481a      	ldr	r0, [pc, #104]	; (8006408 <MX_ADC2_Init+0x204>)
 800639e:	f003 fead 	bl	800a0fc <HAL_ADC_ConfigChannel>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d001      	beq.n	80063ac <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80063a8:	f000 fd74 	bl	8006e94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80063ac:	2307      	movs	r3, #7
 80063ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80063b0:	230c      	movs	r3, #12
 80063b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063b4:	463b      	mov	r3, r7
 80063b6:	4619      	mov	r1, r3
 80063b8:	4813      	ldr	r0, [pc, #76]	; (8006408 <MX_ADC2_Init+0x204>)
 80063ba:	f003 fe9f 	bl	800a0fc <HAL_ADC_ConfigChannel>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80063c4:	f000 fd66 	bl	8006e94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80063c8:	2308      	movs	r3, #8
 80063ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80063cc:	230d      	movs	r3, #13
 80063ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063d0:	463b      	mov	r3, r7
 80063d2:	4619      	mov	r1, r3
 80063d4:	480c      	ldr	r0, [pc, #48]	; (8006408 <MX_ADC2_Init+0x204>)
 80063d6:	f003 fe91 	bl	800a0fc <HAL_ADC_ConfigChannel>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80063e0:	f000 fd58 	bl	8006e94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80063e4:	2309      	movs	r3, #9
 80063e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80063e8:	230e      	movs	r3, #14
 80063ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063ec:	463b      	mov	r3, r7
 80063ee:	4619      	mov	r1, r3
 80063f0:	4805      	ldr	r0, [pc, #20]	; (8006408 <MX_ADC2_Init+0x204>)
 80063f2:	f003 fe83 	bl	800a0fc <HAL_ADC_ConfigChannel>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80063fc:	f000 fd4a 	bl	8006e94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006400:	bf00      	nop
 8006402:	3710      	adds	r7, #16
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	20044750 	.word	0x20044750
 800640c:	40012100 	.word	0x40012100
 8006410:	0f000001 	.word	0x0f000001

08006414 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006418:	4b12      	ldr	r3, [pc, #72]	; (8006464 <MX_I2C1_Init+0x50>)
 800641a:	4a13      	ldr	r2, [pc, #76]	; (8006468 <MX_I2C1_Init+0x54>)
 800641c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800641e:	4b11      	ldr	r3, [pc, #68]	; (8006464 <MX_I2C1_Init+0x50>)
 8006420:	4a12      	ldr	r2, [pc, #72]	; (800646c <MX_I2C1_Init+0x58>)
 8006422:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006424:	4b0f      	ldr	r3, [pc, #60]	; (8006464 <MX_I2C1_Init+0x50>)
 8006426:	2200      	movs	r2, #0
 8006428:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800642a:	4b0e      	ldr	r3, [pc, #56]	; (8006464 <MX_I2C1_Init+0x50>)
 800642c:	2200      	movs	r2, #0
 800642e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006430:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <MX_I2C1_Init+0x50>)
 8006432:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006436:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006438:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <MX_I2C1_Init+0x50>)
 800643a:	2200      	movs	r2, #0
 800643c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800643e:	4b09      	ldr	r3, [pc, #36]	; (8006464 <MX_I2C1_Init+0x50>)
 8006440:	2200      	movs	r2, #0
 8006442:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006444:	4b07      	ldr	r3, [pc, #28]	; (8006464 <MX_I2C1_Init+0x50>)
 8006446:	2200      	movs	r2, #0
 8006448:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800644a:	4b06      	ldr	r3, [pc, #24]	; (8006464 <MX_I2C1_Init+0x50>)
 800644c:	2280      	movs	r2, #128	; 0x80
 800644e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006450:	4804      	ldr	r0, [pc, #16]	; (8006464 <MX_I2C1_Init+0x50>)
 8006452:	f004 ff8d 	bl	800b370 <HAL_I2C_Init>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800645c:	f000 fd1a 	bl	8006e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006460:	bf00      	nop
 8006462:	bd80      	pop	{r7, pc}
 8006464:	20044798 	.word	0x20044798
 8006468:	40005400 	.word	0x40005400
 800646c:	000186a0 	.word	0x000186a0

08006470 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006474:	4b12      	ldr	r3, [pc, #72]	; (80064c0 <MX_I2C2_Init+0x50>)
 8006476:	4a13      	ldr	r2, [pc, #76]	; (80064c4 <MX_I2C2_Init+0x54>)
 8006478:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800647a:	4b11      	ldr	r3, [pc, #68]	; (80064c0 <MX_I2C2_Init+0x50>)
 800647c:	4a12      	ldr	r2, [pc, #72]	; (80064c8 <MX_I2C2_Init+0x58>)
 800647e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006480:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <MX_I2C2_Init+0x50>)
 8006482:	2200      	movs	r2, #0
 8006484:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006486:	4b0e      	ldr	r3, [pc, #56]	; (80064c0 <MX_I2C2_Init+0x50>)
 8006488:	2200      	movs	r2, #0
 800648a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800648c:	4b0c      	ldr	r3, [pc, #48]	; (80064c0 <MX_I2C2_Init+0x50>)
 800648e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006492:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006494:	4b0a      	ldr	r3, [pc, #40]	; (80064c0 <MX_I2C2_Init+0x50>)
 8006496:	2200      	movs	r2, #0
 8006498:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800649a:	4b09      	ldr	r3, [pc, #36]	; (80064c0 <MX_I2C2_Init+0x50>)
 800649c:	2200      	movs	r2, #0
 800649e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80064a0:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <MX_I2C2_Init+0x50>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80064a6:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <MX_I2C2_Init+0x50>)
 80064a8:	2280      	movs	r2, #128	; 0x80
 80064aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80064ac:	4804      	ldr	r0, [pc, #16]	; (80064c0 <MX_I2C2_Init+0x50>)
 80064ae:	f004 ff5f 	bl	800b370 <HAL_I2C_Init>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80064b8:	f000 fcec 	bl	8006e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80064bc:	bf00      	nop
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	2004482c 	.word	0x2004482c
 80064c4:	40005800 	.word	0x40005800
 80064c8:	000186a0 	.word	0x000186a0

080064cc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80064d0:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <MX_SDIO_SD_Init+0x38>)
 80064d2:	4a0d      	ldr	r2, [pc, #52]	; (8006508 <MX_SDIO_SD_Init+0x3c>)
 80064d4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80064d6:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <MX_SDIO_SD_Init+0x38>)
 80064d8:	2200      	movs	r2, #0
 80064da:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80064dc:	4b09      	ldr	r3, [pc, #36]	; (8006504 <MX_SDIO_SD_Init+0x38>)
 80064de:	2200      	movs	r2, #0
 80064e0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80064e2:	4b08      	ldr	r3, [pc, #32]	; (8006504 <MX_SDIO_SD_Init+0x38>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80064e8:	4b06      	ldr	r3, [pc, #24]	; (8006504 <MX_SDIO_SD_Init+0x38>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80064ee:	4b05      	ldr	r3, [pc, #20]	; (8006504 <MX_SDIO_SD_Init+0x38>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80064f4:	4b03      	ldr	r3, [pc, #12]	; (8006504 <MX_SDIO_SD_Init+0x38>)
 80064f6:	2202      	movs	r2, #2
 80064f8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80064fa:	bf00      	nop
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	20044a2c 	.word	0x20044a2c
 8006508:	40012c00 	.word	0x40012c00

0800650c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006510:	4b17      	ldr	r3, [pc, #92]	; (8006570 <MX_SPI2_Init+0x64>)
 8006512:	4a18      	ldr	r2, [pc, #96]	; (8006574 <MX_SPI2_Init+0x68>)
 8006514:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006516:	4b16      	ldr	r3, [pc, #88]	; (8006570 <MX_SPI2_Init+0x64>)
 8006518:	f44f 7282 	mov.w	r2, #260	; 0x104
 800651c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800651e:	4b14      	ldr	r3, [pc, #80]	; (8006570 <MX_SPI2_Init+0x64>)
 8006520:	2200      	movs	r2, #0
 8006522:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8006524:	4b12      	ldr	r3, [pc, #72]	; (8006570 <MX_SPI2_Init+0x64>)
 8006526:	2200      	movs	r2, #0
 8006528:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800652a:	4b11      	ldr	r3, [pc, #68]	; (8006570 <MX_SPI2_Init+0x64>)
 800652c:	2202      	movs	r2, #2
 800652e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006530:	4b0f      	ldr	r3, [pc, #60]	; (8006570 <MX_SPI2_Init+0x64>)
 8006532:	2201      	movs	r2, #1
 8006534:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006536:	4b0e      	ldr	r3, [pc, #56]	; (8006570 <MX_SPI2_Init+0x64>)
 8006538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800653c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800653e:	4b0c      	ldr	r3, [pc, #48]	; (8006570 <MX_SPI2_Init+0x64>)
 8006540:	2228      	movs	r2, #40	; 0x28
 8006542:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006544:	4b0a      	ldr	r3, [pc, #40]	; (8006570 <MX_SPI2_Init+0x64>)
 8006546:	2200      	movs	r2, #0
 8006548:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800654a:	4b09      	ldr	r3, [pc, #36]	; (8006570 <MX_SPI2_Init+0x64>)
 800654c:	2200      	movs	r2, #0
 800654e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006550:	4b07      	ldr	r3, [pc, #28]	; (8006570 <MX_SPI2_Init+0x64>)
 8006552:	2200      	movs	r2, #0
 8006554:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8006556:	4b06      	ldr	r3, [pc, #24]	; (8006570 <MX_SPI2_Init+0x64>)
 8006558:	220a      	movs	r2, #10
 800655a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800655c:	4804      	ldr	r0, [pc, #16]	; (8006570 <MX_SPI2_Init+0x64>)
 800655e:	f008 f839 	bl	800e5d4 <HAL_SPI_Init>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006568:	f000 fc94 	bl	8006e94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800656c:	bf00      	nop
 800656e:	bd80      	pop	{r7, pc}
 8006570:	20044678 	.word	0x20044678
 8006574:	40003800 	.word	0x40003800

08006578 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b09a      	sub	sp, #104	; 0x68
 800657c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800657e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006582:	2224      	movs	r2, #36	; 0x24
 8006584:	2100      	movs	r1, #0
 8006586:	4618      	mov	r0, r3
 8006588:	f00f f9b6 	bl	80158f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800658c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]
 8006594:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006596:	f107 0320 	add.w	r3, r7, #32
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	605a      	str	r2, [r3, #4]
 80065a0:	609a      	str	r2, [r3, #8]
 80065a2:	60da      	str	r2, [r3, #12]
 80065a4:	611a      	str	r2, [r3, #16]
 80065a6:	615a      	str	r2, [r3, #20]
 80065a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80065aa:	463b      	mov	r3, r7
 80065ac:	2220      	movs	r2, #32
 80065ae:	2100      	movs	r1, #0
 80065b0:	4618      	mov	r0, r3
 80065b2:	f00f f9a1 	bl	80158f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80065b6:	4b42      	ldr	r3, [pc, #264]	; (80066c0 <MX_TIM1_Init+0x148>)
 80065b8:	4a42      	ldr	r2, [pc, #264]	; (80066c4 <MX_TIM1_Init+0x14c>)
 80065ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80065bc:	4b40      	ldr	r3, [pc, #256]	; (80066c0 <MX_TIM1_Init+0x148>)
 80065be:	2200      	movs	r2, #0
 80065c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065c2:	4b3f      	ldr	r3, [pc, #252]	; (80066c0 <MX_TIM1_Init+0x148>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80065c8:	4b3d      	ldr	r3, [pc, #244]	; (80066c0 <MX_TIM1_Init+0x148>)
 80065ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065d0:	4b3b      	ldr	r3, [pc, #236]	; (80066c0 <MX_TIM1_Init+0x148>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80065d6:	4b3a      	ldr	r3, [pc, #232]	; (80066c0 <MX_TIM1_Init+0x148>)
 80065d8:	2200      	movs	r2, #0
 80065da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065dc:	4b38      	ldr	r3, [pc, #224]	; (80066c0 <MX_TIM1_Init+0x148>)
 80065de:	2200      	movs	r2, #0
 80065e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80065e2:	4837      	ldr	r0, [pc, #220]	; (80066c0 <MX_TIM1_Init+0x148>)
 80065e4:	f008 fd99 	bl	800f11a <HAL_TIM_PWM_Init>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80065ee:	f000 fc51 	bl	8006e94 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80065f2:	2303      	movs	r3, #3
 80065f4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80065f6:	2300      	movs	r3, #0
 80065f8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80065fa:	2301      	movs	r3, #1
 80065fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80065fe:	2300      	movs	r3, #0
 8006600:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8006602:	2300      	movs	r3, #0
 8006604:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006606:	2300      	movs	r3, #0
 8006608:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800660a:	2301      	movs	r3, #1
 800660c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800660e:	2300      	movs	r3, #0
 8006610:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8006612:	2300      	movs	r3, #0
 8006614:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8006616:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800661a:	4619      	mov	r1, r3
 800661c:	4828      	ldr	r0, [pc, #160]	; (80066c0 <MX_TIM1_Init+0x148>)
 800661e:	f008 fde5 	bl	800f1ec <HAL_TIM_Encoder_Init>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006628:	f000 fc34 	bl	8006e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800662c:	2300      	movs	r3, #0
 800662e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006630:	2300      	movs	r3, #0
 8006632:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006634:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006638:	4619      	mov	r1, r3
 800663a:	4821      	ldr	r0, [pc, #132]	; (80066c0 <MX_TIM1_Init+0x148>)
 800663c:	f009 fb0c 	bl	800fc58 <HAL_TIMEx_MasterConfigSynchronization>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8006646:	f000 fc25 	bl	8006e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800664a:	2360      	movs	r3, #96	; 0x60
 800664c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006652:	2300      	movs	r3, #0
 8006654:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006656:	2300      	movs	r3, #0
 8006658:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800665a:	2300      	movs	r3, #0
 800665c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800665e:	2300      	movs	r3, #0
 8006660:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006662:	2300      	movs	r3, #0
 8006664:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006666:	f107 0320 	add.w	r3, r7, #32
 800666a:	2208      	movs	r2, #8
 800666c:	4619      	mov	r1, r3
 800666e:	4814      	ldr	r0, [pc, #80]	; (80066c0 <MX_TIM1_Init+0x148>)
 8006670:	f008 ff8e 	bl	800f590 <HAL_TIM_PWM_ConfigChannel>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800667a:	f000 fc0b 	bl	8006e94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800667e:	2300      	movs	r3, #0
 8006680:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006682:	2300      	movs	r3, #0
 8006684:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006686:	2300      	movs	r3, #0
 8006688:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800668e:	2300      	movs	r3, #0
 8006690:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006696:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006698:	2300      	movs	r3, #0
 800669a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800669c:	463b      	mov	r3, r7
 800669e:	4619      	mov	r1, r3
 80066a0:	4807      	ldr	r0, [pc, #28]	; (80066c0 <MX_TIM1_Init+0x148>)
 80066a2:	f009 fb55 	bl	800fd50 <HAL_TIMEx_ConfigBreakDeadTime>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80066ac:	f000 fbf2 	bl	8006e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80066b0:	4803      	ldr	r0, [pc, #12]	; (80066c0 <MX_TIM1_Init+0x148>)
 80066b2:	f000 ffdf 	bl	8007674 <HAL_TIM_MspPostInit>

}
 80066b6:	bf00      	nop
 80066b8:	3768      	adds	r7, #104	; 0x68
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	200449ec 	.word	0x200449ec
 80066c4:	40010000 	.word	0x40010000

080066c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b08a      	sub	sp, #40	; 0x28
 80066cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066ce:	f107 0320 	add.w	r3, r7, #32
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80066d8:	1d3b      	adds	r3, r7, #4
 80066da:	2200      	movs	r2, #0
 80066dc:	601a      	str	r2, [r3, #0]
 80066de:	605a      	str	r2, [r3, #4]
 80066e0:	609a      	str	r2, [r3, #8]
 80066e2:	60da      	str	r2, [r3, #12]
 80066e4:	611a      	str	r2, [r3, #16]
 80066e6:	615a      	str	r2, [r3, #20]
 80066e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80066ea:	4b27      	ldr	r3, [pc, #156]	; (8006788 <MX_TIM3_Init+0xc0>)
 80066ec:	4a27      	ldr	r2, [pc, #156]	; (800678c <MX_TIM3_Init+0xc4>)
 80066ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80066f0:	4b25      	ldr	r3, [pc, #148]	; (8006788 <MX_TIM3_Init+0xc0>)
 80066f2:	2201      	movs	r2, #1
 80066f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066f6:	4b24      	ldr	r3, [pc, #144]	; (8006788 <MX_TIM3_Init+0xc0>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 80066fc:	4b22      	ldr	r3, [pc, #136]	; (8006788 <MX_TIM3_Init+0xc0>)
 80066fe:	f241 1293 	movw	r2, #4499	; 0x1193
 8006702:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006704:	4b20      	ldr	r3, [pc, #128]	; (8006788 <MX_TIM3_Init+0xc0>)
 8006706:	2200      	movs	r2, #0
 8006708:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800670a:	4b1f      	ldr	r3, [pc, #124]	; (8006788 <MX_TIM3_Init+0xc0>)
 800670c:	2200      	movs	r2, #0
 800670e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006710:	481d      	ldr	r0, [pc, #116]	; (8006788 <MX_TIM3_Init+0xc0>)
 8006712:	f008 fd02 	bl	800f11a <HAL_TIM_PWM_Init>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800671c:	f000 fbba 	bl	8006e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006720:	2300      	movs	r3, #0
 8006722:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006724:	2300      	movs	r3, #0
 8006726:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006728:	f107 0320 	add.w	r3, r7, #32
 800672c:	4619      	mov	r1, r3
 800672e:	4816      	ldr	r0, [pc, #88]	; (8006788 <MX_TIM3_Init+0xc0>)
 8006730:	f009 fa92 	bl	800fc58 <HAL_TIMEx_MasterConfigSynchronization>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800673a:	f000 fbab 	bl	8006e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800673e:	2360      	movs	r3, #96	; 0x60
 8006740:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006746:	2300      	movs	r3, #0
 8006748:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800674a:	2300      	movs	r3, #0
 800674c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800674e:	1d3b      	adds	r3, r7, #4
 8006750:	2200      	movs	r2, #0
 8006752:	4619      	mov	r1, r3
 8006754:	480c      	ldr	r0, [pc, #48]	; (8006788 <MX_TIM3_Init+0xc0>)
 8006756:	f008 ff1b 	bl	800f590 <HAL_TIM_PWM_ConfigChannel>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006760:	f000 fb98 	bl	8006e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006764:	1d3b      	adds	r3, r7, #4
 8006766:	2204      	movs	r2, #4
 8006768:	4619      	mov	r1, r3
 800676a:	4807      	ldr	r0, [pc, #28]	; (8006788 <MX_TIM3_Init+0xc0>)
 800676c:	f008 ff10 	bl	800f590 <HAL_TIM_PWM_ConfigChannel>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006776:	f000 fb8d 	bl	8006e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800677a:	4803      	ldr	r0, [pc, #12]	; (8006788 <MX_TIM3_Init+0xc0>)
 800677c:	f000 ff7a 	bl	8007674 <HAL_TIM_MspPostInit>

}
 8006780:	bf00      	nop
 8006782:	3728      	adds	r7, #40	; 0x28
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	20044884 	.word	0x20044884
 800678c:	40000400 	.word	0x40000400

08006790 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	; 0x28
 8006794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006796:	f107 0320 	add.w	r3, r7, #32
 800679a:	2200      	movs	r2, #0
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80067a0:	1d3b      	adds	r3, r7, #4
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	605a      	str	r2, [r3, #4]
 80067a8:	609a      	str	r2, [r3, #8]
 80067aa:	60da      	str	r2, [r3, #12]
 80067ac:	611a      	str	r2, [r3, #16]
 80067ae:	615a      	str	r2, [r3, #20]
 80067b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80067b2:	4b27      	ldr	r3, [pc, #156]	; (8006850 <MX_TIM4_Init+0xc0>)
 80067b4:	4a27      	ldr	r2, [pc, #156]	; (8006854 <MX_TIM4_Init+0xc4>)
 80067b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80067b8:	4b25      	ldr	r3, [pc, #148]	; (8006850 <MX_TIM4_Init+0xc0>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067be:	4b24      	ldr	r3, [pc, #144]	; (8006850 <MX_TIM4_Init+0xc0>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80067c4:	4b22      	ldr	r3, [pc, #136]	; (8006850 <MX_TIM4_Init+0xc0>)
 80067c6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80067ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067cc:	4b20      	ldr	r3, [pc, #128]	; (8006850 <MX_TIM4_Init+0xc0>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067d2:	4b1f      	ldr	r3, [pc, #124]	; (8006850 <MX_TIM4_Init+0xc0>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80067d8:	481d      	ldr	r0, [pc, #116]	; (8006850 <MX_TIM4_Init+0xc0>)
 80067da:	f008 fc9e 	bl	800f11a <HAL_TIM_PWM_Init>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80067e4:	f000 fb56 	bl	8006e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067e8:	2300      	movs	r3, #0
 80067ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067ec:	2300      	movs	r3, #0
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80067f0:	f107 0320 	add.w	r3, r7, #32
 80067f4:	4619      	mov	r1, r3
 80067f6:	4816      	ldr	r0, [pc, #88]	; (8006850 <MX_TIM4_Init+0xc0>)
 80067f8:	f009 fa2e 	bl	800fc58 <HAL_TIMEx_MasterConfigSynchronization>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8006802:	f000 fb47 	bl	8006e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006806:	2360      	movs	r3, #96	; 0x60
 8006808:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800680a:	2300      	movs	r3, #0
 800680c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800680e:	2300      	movs	r3, #0
 8006810:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006812:	2300      	movs	r3, #0
 8006814:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006816:	1d3b      	adds	r3, r7, #4
 8006818:	2208      	movs	r2, #8
 800681a:	4619      	mov	r1, r3
 800681c:	480c      	ldr	r0, [pc, #48]	; (8006850 <MX_TIM4_Init+0xc0>)
 800681e:	f008 feb7 	bl	800f590 <HAL_TIM_PWM_ConfigChannel>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006828:	f000 fb34 	bl	8006e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800682c:	1d3b      	adds	r3, r7, #4
 800682e:	220c      	movs	r2, #12
 8006830:	4619      	mov	r1, r3
 8006832:	4807      	ldr	r0, [pc, #28]	; (8006850 <MX_TIM4_Init+0xc0>)
 8006834:	f008 feac 	bl	800f590 <HAL_TIM_PWM_ConfigChannel>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800683e:	f000 fb29 	bl	8006e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8006842:	4803      	ldr	r0, [pc, #12]	; (8006850 <MX_TIM4_Init+0xc0>)
 8006844:	f000 ff16 	bl	8007674 <HAL_TIM_MspPostInit>

}
 8006848:	bf00      	nop
 800684a:	3728      	adds	r7, #40	; 0x28
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	20044710 	.word	0x20044710
 8006854:	40000800 	.word	0x40000800

08006858 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800685e:	463b      	mov	r3, r7
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006866:	4b15      	ldr	r3, [pc, #84]	; (80068bc <MX_TIM6_Init+0x64>)
 8006868:	4a15      	ldr	r2, [pc, #84]	; (80068c0 <MX_TIM6_Init+0x68>)
 800686a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 800686c:	4b13      	ldr	r3, [pc, #76]	; (80068bc <MX_TIM6_Init+0x64>)
 800686e:	2259      	movs	r2, #89	; 0x59
 8006870:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006872:	4b12      	ldr	r3, [pc, #72]	; (80068bc <MX_TIM6_Init+0x64>)
 8006874:	2200      	movs	r2, #0
 8006876:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006878:	4b10      	ldr	r3, [pc, #64]	; (80068bc <MX_TIM6_Init+0x64>)
 800687a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800687e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006880:	4b0e      	ldr	r3, [pc, #56]	; (80068bc <MX_TIM6_Init+0x64>)
 8006882:	2280      	movs	r2, #128	; 0x80
 8006884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006886:	480d      	ldr	r0, [pc, #52]	; (80068bc <MX_TIM6_Init+0x64>)
 8006888:	f008 fbf8 	bl	800f07c <HAL_TIM_Base_Init>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8006892:	f000 faff 	bl	8006e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006896:	2300      	movs	r3, #0
 8006898:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800689a:	2300      	movs	r3, #0
 800689c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800689e:	463b      	mov	r3, r7
 80068a0:	4619      	mov	r1, r3
 80068a2:	4806      	ldr	r0, [pc, #24]	; (80068bc <MX_TIM6_Init+0x64>)
 80068a4:	f009 f9d8 	bl	800fc58 <HAL_TIMEx_MasterConfigSynchronization>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80068ae:	f000 faf1 	bl	8006e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80068b2:	bf00      	nop
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	200449ac 	.word	0x200449ac
 80068c0:	40001000 	.word	0x40001000

080068c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068ca:	463b      	mov	r3, r7
 80068cc:	2200      	movs	r2, #0
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80068d2:	4b14      	ldr	r3, [pc, #80]	; (8006924 <MX_TIM7_Init+0x60>)
 80068d4:	4a14      	ldr	r2, [pc, #80]	; (8006928 <MX_TIM7_Init+0x64>)
 80068d6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80068d8:	4b12      	ldr	r3, [pc, #72]	; (8006924 <MX_TIM7_Init+0x60>)
 80068da:	22b3      	movs	r2, #179	; 0xb3
 80068dc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068de:	4b11      	ldr	r3, [pc, #68]	; (8006924 <MX_TIM7_Init+0x60>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80068e4:	4b0f      	ldr	r3, [pc, #60]	; (8006924 <MX_TIM7_Init+0x60>)
 80068e6:	2231      	movs	r2, #49	; 0x31
 80068e8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80068ea:	4b0e      	ldr	r3, [pc, #56]	; (8006924 <MX_TIM7_Init+0x60>)
 80068ec:	2280      	movs	r2, #128	; 0x80
 80068ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80068f0:	480c      	ldr	r0, [pc, #48]	; (8006924 <MX_TIM7_Init+0x60>)
 80068f2:	f008 fbc3 	bl	800f07c <HAL_TIM_Base_Init>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80068fc:	f000 faca 	bl	8006e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006900:	2300      	movs	r3, #0
 8006902:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006904:	2300      	movs	r3, #0
 8006906:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006908:	463b      	mov	r3, r7
 800690a:	4619      	mov	r1, r3
 800690c:	4805      	ldr	r0, [pc, #20]	; (8006924 <MX_TIM7_Init+0x60>)
 800690e:	f009 f9a3 	bl	800fc58 <HAL_TIMEx_MasterConfigSynchronization>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006918:	f000 fabc 	bl	8006e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800691c:	bf00      	nop
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	20044b50 	.word	0x20044b50
 8006928:	40001400 	.word	0x40001400

0800692c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08c      	sub	sp, #48	; 0x30
 8006930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006932:	f107 030c 	add.w	r3, r7, #12
 8006936:	2224      	movs	r2, #36	; 0x24
 8006938:	2100      	movs	r1, #0
 800693a:	4618      	mov	r0, r3
 800693c:	f00e ffdc 	bl	80158f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006940:	1d3b      	adds	r3, r7, #4
 8006942:	2200      	movs	r2, #0
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006948:	4b22      	ldr	r3, [pc, #136]	; (80069d4 <MX_TIM8_Init+0xa8>)
 800694a:	4a23      	ldr	r2, [pc, #140]	; (80069d8 <MX_TIM8_Init+0xac>)
 800694c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800694e:	4b21      	ldr	r3, [pc, #132]	; (80069d4 <MX_TIM8_Init+0xa8>)
 8006950:	2200      	movs	r2, #0
 8006952:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006954:	4b1f      	ldr	r3, [pc, #124]	; (80069d4 <MX_TIM8_Init+0xa8>)
 8006956:	2210      	movs	r2, #16
 8006958:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800695a:	4b1e      	ldr	r3, [pc, #120]	; (80069d4 <MX_TIM8_Init+0xa8>)
 800695c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006960:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006962:	4b1c      	ldr	r3, [pc, #112]	; (80069d4 <MX_TIM8_Init+0xa8>)
 8006964:	2200      	movs	r2, #0
 8006966:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006968:	4b1a      	ldr	r3, [pc, #104]	; (80069d4 <MX_TIM8_Init+0xa8>)
 800696a:	2200      	movs	r2, #0
 800696c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800696e:	4b19      	ldr	r3, [pc, #100]	; (80069d4 <MX_TIM8_Init+0xa8>)
 8006970:	2200      	movs	r2, #0
 8006972:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006974:	2303      	movs	r3, #3
 8006976:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006978:	2300      	movs	r3, #0
 800697a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800697c:	2301      	movs	r3, #1
 800697e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006980:	2300      	movs	r3, #0
 8006982:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006988:	2300      	movs	r3, #0
 800698a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800698c:	2301      	movs	r3, #1
 800698e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006990:	2300      	movs	r3, #0
 8006992:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006994:	2300      	movs	r3, #0
 8006996:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006998:	f107 030c 	add.w	r3, r7, #12
 800699c:	4619      	mov	r1, r3
 800699e:	480d      	ldr	r0, [pc, #52]	; (80069d4 <MX_TIM8_Init+0xa8>)
 80069a0:	f008 fc24 	bl	800f1ec <HAL_TIM_Encoder_Init>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80069aa:	f000 fa73 	bl	8006e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069ae:	2300      	movs	r3, #0
 80069b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069b2:	2300      	movs	r3, #0
 80069b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80069b6:	1d3b      	adds	r3, r7, #4
 80069b8:	4619      	mov	r1, r3
 80069ba:	4806      	ldr	r0, [pc, #24]	; (80069d4 <MX_TIM8_Init+0xa8>)
 80069bc:	f009 f94c 	bl	800fc58 <HAL_TIMEx_MasterConfigSynchronization>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80069c6:	f000 fa65 	bl	8006e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80069ca:	bf00      	nop
 80069cc:	3730      	adds	r7, #48	; 0x30
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	200446d0 	.word	0x200446d0
 80069d8:	40010400 	.word	0x40010400

080069dc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80069e2:	1d3b      	adds	r3, r7, #4
 80069e4:	2200      	movs	r2, #0
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	605a      	str	r2, [r3, #4]
 80069ea:	609a      	str	r2, [r3, #8]
 80069ec:	60da      	str	r2, [r3, #12]
 80069ee:	611a      	str	r2, [r3, #16]
 80069f0:	615a      	str	r2, [r3, #20]
 80069f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80069f4:	4b1e      	ldr	r3, [pc, #120]	; (8006a70 <MX_TIM10_Init+0x94>)
 80069f6:	4a1f      	ldr	r2, [pc, #124]	; (8006a74 <MX_TIM10_Init+0x98>)
 80069f8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 80069fa:	4b1d      	ldr	r3, [pc, #116]	; (8006a70 <MX_TIM10_Init+0x94>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a00:	4b1b      	ldr	r3, [pc, #108]	; (8006a70 <MX_TIM10_Init+0x94>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 8006a06:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <MX_TIM10_Init+0x94>)
 8006a08:	f242 3227 	movw	r2, #8999	; 0x2327
 8006a0c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a0e:	4b18      	ldr	r3, [pc, #96]	; (8006a70 <MX_TIM10_Init+0x94>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a14:	4b16      	ldr	r3, [pc, #88]	; (8006a70 <MX_TIM10_Init+0x94>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006a1a:	4815      	ldr	r0, [pc, #84]	; (8006a70 <MX_TIM10_Init+0x94>)
 8006a1c:	f008 fb2e 	bl	800f07c <HAL_TIM_Base_Init>
 8006a20:	4603      	mov	r3, r0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d001      	beq.n	8006a2a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006a26:	f000 fa35 	bl	8006e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006a2a:	4811      	ldr	r0, [pc, #68]	; (8006a70 <MX_TIM10_Init+0x94>)
 8006a2c:	f008 fb75 	bl	800f11a <HAL_TIM_PWM_Init>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d001      	beq.n	8006a3a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006a36:	f000 fa2d 	bl	8006e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006a3a:	2360      	movs	r3, #96	; 0x60
 8006a3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006a46:	2300      	movs	r3, #0
 8006a48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006a4a:	1d3b      	adds	r3, r7, #4
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4807      	ldr	r0, [pc, #28]	; (8006a70 <MX_TIM10_Init+0x94>)
 8006a52:	f008 fd9d 	bl	800f590 <HAL_TIM_PWM_ConfigChannel>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006a5c:	f000 fa1a 	bl	8006e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006a60:	4803      	ldr	r0, [pc, #12]	; (8006a70 <MX_TIM10_Init+0x94>)
 8006a62:	f000 fe07 	bl	8007674 <HAL_TIM_MspPostInit>

}
 8006a66:	bf00      	nop
 8006a68:	3720      	adds	r7, #32
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	200447ec 	.word	0x200447ec
 8006a74:	40014400 	.word	0x40014400

08006a78 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006a7e:	1d3b      	adds	r3, r7, #4
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]
 8006a84:	605a      	str	r2, [r3, #4]
 8006a86:	609a      	str	r2, [r3, #8]
 8006a88:	60da      	str	r2, [r3, #12]
 8006a8a:	611a      	str	r2, [r3, #16]
 8006a8c:	615a      	str	r2, [r3, #20]
 8006a8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006a90:	4b1e      	ldr	r3, [pc, #120]	; (8006b0c <MX_TIM11_Init+0x94>)
 8006a92:	4a1f      	ldr	r2, [pc, #124]	; (8006b10 <MX_TIM11_Init+0x98>)
 8006a94:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8006a96:	4b1d      	ldr	r3, [pc, #116]	; (8006b0c <MX_TIM11_Init+0x94>)
 8006a98:	2201      	movs	r2, #1
 8006a9a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a9c:	4b1b      	ldr	r3, [pc, #108]	; (8006b0c <MX_TIM11_Init+0x94>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 8006aa2:	4b1a      	ldr	r3, [pc, #104]	; (8006b0c <MX_TIM11_Init+0x94>)
 8006aa4:	f242 3227 	movw	r2, #8999	; 0x2327
 8006aa8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006aaa:	4b18      	ldr	r3, [pc, #96]	; (8006b0c <MX_TIM11_Init+0x94>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ab0:	4b16      	ldr	r3, [pc, #88]	; (8006b0c <MX_TIM11_Init+0x94>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006ab6:	4815      	ldr	r0, [pc, #84]	; (8006b0c <MX_TIM11_Init+0x94>)
 8006ab8:	f008 fae0 	bl	800f07c <HAL_TIM_Base_Init>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8006ac2:	f000 f9e7 	bl	8006e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8006ac6:	4811      	ldr	r0, [pc, #68]	; (8006b0c <MX_TIM11_Init+0x94>)
 8006ac8:	f008 fb27 	bl	800f11a <HAL_TIM_PWM_Init>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8006ad2:	f000 f9df 	bl	8006e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006ad6:	2360      	movs	r3, #96	; 0x60
 8006ad8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006ada:	2300      	movs	r3, #0
 8006adc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006ae6:	1d3b      	adds	r3, r7, #4
 8006ae8:	2200      	movs	r2, #0
 8006aea:	4619      	mov	r1, r3
 8006aec:	4807      	ldr	r0, [pc, #28]	; (8006b0c <MX_TIM11_Init+0x94>)
 8006aee:	f008 fd4f 	bl	800f590 <HAL_TIM_PWM_ConfigChannel>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006af8:	f000 f9cc 	bl	8006e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006afc:	4803      	ldr	r0, [pc, #12]	; (8006b0c <MX_TIM11_Init+0x94>)
 8006afe:	f000 fdb9 	bl	8007674 <HAL_TIM_MspPostInit>

}
 8006b02:	bf00      	nop
 8006b04:	3720      	adds	r7, #32
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	2004490c 	.word	0x2004490c
 8006b10:	40014800 	.word	0x40014800

08006b14 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006b18:	4b0e      	ldr	r3, [pc, #56]	; (8006b54 <MX_TIM13_Init+0x40>)
 8006b1a:	4a0f      	ldr	r2, [pc, #60]	; (8006b58 <MX_TIM13_Init+0x44>)
 8006b1c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	; (8006b54 <MX_TIM13_Init+0x40>)
 8006b20:	2259      	movs	r2, #89	; 0x59
 8006b22:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b24:	4b0b      	ldr	r3, [pc, #44]	; (8006b54 <MX_TIM13_Init+0x40>)
 8006b26:	2200      	movs	r2, #0
 8006b28:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <MX_TIM13_Init+0x40>)
 8006b2c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006b30:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b32:	4b08      	ldr	r3, [pc, #32]	; (8006b54 <MX_TIM13_Init+0x40>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006b38:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <MX_TIM13_Init+0x40>)
 8006b3a:	2280      	movs	r2, #128	; 0x80
 8006b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006b3e:	4805      	ldr	r0, [pc, #20]	; (8006b54 <MX_TIM13_Init+0x40>)
 8006b40:	f008 fa9c 	bl	800f07c <HAL_TIM_Base_Init>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006b4a:	f000 f9a3 	bl	8006e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006b4e:	bf00      	nop
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	200448cc 	.word	0x200448cc
 8006b58:	40001c00 	.word	0x40001c00

08006b5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006b60:	4b11      	ldr	r3, [pc, #68]	; (8006ba8 <MX_USART2_UART_Init+0x4c>)
 8006b62:	4a12      	ldr	r2, [pc, #72]	; (8006bac <MX_USART2_UART_Init+0x50>)
 8006b64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006b66:	4b10      	ldr	r3, [pc, #64]	; (8006ba8 <MX_USART2_UART_Init+0x4c>)
 8006b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006b6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006b6e:	4b0e      	ldr	r3, [pc, #56]	; (8006ba8 <MX_USART2_UART_Init+0x4c>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006b74:	4b0c      	ldr	r3, [pc, #48]	; (8006ba8 <MX_USART2_UART_Init+0x4c>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006b7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ba8 <MX_USART2_UART_Init+0x4c>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006b80:	4b09      	ldr	r3, [pc, #36]	; (8006ba8 <MX_USART2_UART_Init+0x4c>)
 8006b82:	220c      	movs	r2, #12
 8006b84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b86:	4b08      	ldr	r3, [pc, #32]	; (8006ba8 <MX_USART2_UART_Init+0x4c>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b8c:	4b06      	ldr	r3, [pc, #24]	; (8006ba8 <MX_USART2_UART_Init+0x4c>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006b92:	4805      	ldr	r0, [pc, #20]	; (8006ba8 <MX_USART2_UART_Init+0x4c>)
 8006b94:	f009 f942 	bl	800fe1c <HAL_UART_Init>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006b9e:	f000 f979 	bl	8006e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006ba2:	bf00      	nop
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20044ab0 	.word	0x20044ab0
 8006bac:	40004400 	.word	0x40004400

08006bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	607b      	str	r3, [r7, #4]
 8006bba:	4b14      	ldr	r3, [pc, #80]	; (8006c0c <MX_DMA_Init+0x5c>)
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbe:	4a13      	ldr	r2, [pc, #76]	; (8006c0c <MX_DMA_Init+0x5c>)
 8006bc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8006bc6:	4b11      	ldr	r3, [pc, #68]	; (8006c0c <MX_DMA_Init+0x5c>)
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bce:	607b      	str	r3, [r7, #4]
 8006bd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	203a      	movs	r0, #58	; 0x3a
 8006bd8:	f003 fe1b 	bl	800a812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006bdc:	203a      	movs	r0, #58	; 0x3a
 8006bde:	f003 fe34 	bl	800a84a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006be2:	2200      	movs	r2, #0
 8006be4:	2100      	movs	r1, #0
 8006be6:	203b      	movs	r0, #59	; 0x3b
 8006be8:	f003 fe13 	bl	800a812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006bec:	203b      	movs	r0, #59	; 0x3b
 8006bee:	f003 fe2c 	bl	800a84a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	2045      	movs	r0, #69	; 0x45
 8006bf8:	f003 fe0b 	bl	800a812 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006bfc:	2045      	movs	r0, #69	; 0x45
 8006bfe:	f003 fe24 	bl	800a84a <HAL_NVIC_EnableIRQ>

}
 8006c02:	bf00      	nop
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	40023800 	.word	0x40023800

08006c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08c      	sub	sp, #48	; 0x30
 8006c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c16:	f107 031c 	add.w	r3, r7, #28
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	605a      	str	r2, [r3, #4]
 8006c20:	609a      	str	r2, [r3, #8]
 8006c22:	60da      	str	r2, [r3, #12]
 8006c24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c26:	2300      	movs	r3, #0
 8006c28:	61bb      	str	r3, [r7, #24]
 8006c2a:	4b94      	ldr	r3, [pc, #592]	; (8006e7c <MX_GPIO_Init+0x26c>)
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2e:	4a93      	ldr	r2, [pc, #588]	; (8006e7c <MX_GPIO_Init+0x26c>)
 8006c30:	f043 0310 	orr.w	r3, r3, #16
 8006c34:	6313      	str	r3, [r2, #48]	; 0x30
 8006c36:	4b91      	ldr	r3, [pc, #580]	; (8006e7c <MX_GPIO_Init+0x26c>)
 8006c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c3a:	f003 0310 	and.w	r3, r3, #16
 8006c3e:	61bb      	str	r3, [r7, #24]
 8006c40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006c42:	2300      	movs	r3, #0
 8006c44:	617b      	str	r3, [r7, #20]
 8006c46:	4b8d      	ldr	r3, [pc, #564]	; (8006e7c <MX_GPIO_Init+0x26c>)
 8006c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4a:	4a8c      	ldr	r2, [pc, #560]	; (8006e7c <MX_GPIO_Init+0x26c>)
 8006c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c50:	6313      	str	r3, [r2, #48]	; 0x30
 8006c52:	4b8a      	ldr	r3, [pc, #552]	; (8006e7c <MX_GPIO_Init+0x26c>)
 8006c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5a:	617b      	str	r3, [r7, #20]
 8006c5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c5e:	2300      	movs	r3, #0
 8006c60:	613b      	str	r3, [r7, #16]
 8006c62:	4b86      	ldr	r3, [pc, #536]	; (8006e7c <MX_GPIO_Init+0x26c>)
 8006c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c66:	4a85      	ldr	r2, [pc, #532]	; (8006e7c <MX_GPIO_Init+0x26c>)
 8006c68:	f043 0304 	orr.w	r3, r3, #4
 8006c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c6e:	4b83      	ldr	r3, [pc, #524]	; (8006e7c <MX_GPIO_Init+0x26c>)
 8006c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c72:	f003 0304 	and.w	r3, r3, #4
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]
 8006c7e:	4b7f      	ldr	r3, [pc, #508]	; (8006e7c <MX_GPIO_Init+0x26c>)
 8006c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c82:	4a7e      	ldr	r2, [pc, #504]	; (8006e7c <MX_GPIO_Init+0x26c>)
 8006c84:	f043 0301 	orr.w	r3, r3, #1
 8006c88:	6313      	str	r3, [r2, #48]	; 0x30
 8006c8a:	4b7c      	ldr	r3, [pc, #496]	; (8006e7c <MX_GPIO_Init+0x26c>)
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c96:	2300      	movs	r3, #0
 8006c98:	60bb      	str	r3, [r7, #8]
 8006c9a:	4b78      	ldr	r3, [pc, #480]	; (8006e7c <MX_GPIO_Init+0x26c>)
 8006c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9e:	4a77      	ldr	r2, [pc, #476]	; (8006e7c <MX_GPIO_Init+0x26c>)
 8006ca0:	f043 0302 	orr.w	r3, r3, #2
 8006ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ca6:	4b75      	ldr	r3, [pc, #468]	; (8006e7c <MX_GPIO_Init+0x26c>)
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	60bb      	str	r3, [r7, #8]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	607b      	str	r3, [r7, #4]
 8006cb6:	4b71      	ldr	r3, [pc, #452]	; (8006e7c <MX_GPIO_Init+0x26c>)
 8006cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cba:	4a70      	ldr	r2, [pc, #448]	; (8006e7c <MX_GPIO_Init+0x26c>)
 8006cbc:	f043 0308 	orr.w	r3, r3, #8
 8006cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8006cc2:	4b6e      	ldr	r3, [pc, #440]	; (8006e7c <MX_GPIO_Init+0x26c>)
 8006cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc6:	f003 0308 	and.w	r3, r3, #8
 8006cca:	607b      	str	r3, [r7, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006cd4:	486a      	ldr	r0, [pc, #424]	; (8006e80 <MX_GPIO_Init+0x270>)
 8006cd6:	f004 fb31 	bl	800b33c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ce0:	4868      	ldr	r0, [pc, #416]	; (8006e84 <MX_GPIO_Init+0x274>)
 8006ce2:	f004 fb2b 	bl	800b33c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006cec:	4866      	ldr	r0, [pc, #408]	; (8006e88 <MX_GPIO_Init+0x278>)
 8006cee:	f004 fb25 	bl	800b33c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006cf8:	4864      	ldr	r0, [pc, #400]	; (8006e8c <MX_GPIO_Init+0x27c>)
 8006cfa:	f004 fb1f 	bl	800b33c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006cfe:	2304      	movs	r3, #4
 8006d00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d02:	2300      	movs	r3, #0
 8006d04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d0a:	f107 031c 	add.w	r3, r7, #28
 8006d0e:	4619      	mov	r1, r3
 8006d10:	485b      	ldr	r0, [pc, #364]	; (8006e80 <MX_GPIO_Init+0x270>)
 8006d12:	f004 f951 	bl	800afb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006d16:	230f      	movs	r3, #15
 8006d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d22:	f107 031c 	add.w	r3, r7, #28
 8006d26:	4619      	mov	r1, r3
 8006d28:	4859      	ldr	r0, [pc, #356]	; (8006e90 <MX_GPIO_Init+0x280>)
 8006d2a:	f004 f945 	bl	800afb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006d2e:	23e1      	movs	r3, #225	; 0xe1
 8006d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d32:	2303      	movs	r3, #3
 8006d34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d3a:	f107 031c 	add.w	r3, r7, #28
 8006d3e:	4619      	mov	r1, r3
 8006d40:	4852      	ldr	r0, [pc, #328]	; (8006e8c <MX_GPIO_Init+0x27c>)
 8006d42:	f004 f939 	bl	800afb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006d46:	2303      	movs	r3, #3
 8006d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d52:	f107 031c 	add.w	r3, r7, #28
 8006d56:	4619      	mov	r1, r3
 8006d58:	484a      	ldr	r0, [pc, #296]	; (8006e84 <MX_GPIO_Init+0x274>)
 8006d5a:	f004 f92d 	bl	800afb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006d5e:	2304      	movs	r3, #4
 8006d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d62:	2300      	movs	r3, #0
 8006d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d66:	2301      	movs	r3, #1
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d6a:	f107 031c 	add.w	r3, r7, #28
 8006d6e:	4619      	mov	r1, r3
 8006d70:	4844      	ldr	r0, [pc, #272]	; (8006e84 <MX_GPIO_Init+0x274>)
 8006d72:	f004 f921 	bl	800afb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006d76:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d80:	2301      	movs	r3, #1
 8006d82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d84:	f107 031c 	add.w	r3, r7, #28
 8006d88:	4619      	mov	r1, r3
 8006d8a:	483d      	ldr	r0, [pc, #244]	; (8006e80 <MX_GPIO_Init+0x270>)
 8006d8c:	f004 f914 	bl	800afb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006d90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d96:	2301      	movs	r3, #1
 8006d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006da2:	f107 031c 	add.w	r3, r7, #28
 8006da6:	4619      	mov	r1, r3
 8006da8:	4835      	ldr	r0, [pc, #212]	; (8006e80 <MX_GPIO_Init+0x270>)
 8006daa:	f004 f905 	bl	800afb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006db4:	2301      	movs	r3, #1
 8006db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db8:	2300      	movs	r3, #0
 8006dba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dc0:	f107 031c 	add.w	r3, r7, #28
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	482f      	ldr	r0, [pc, #188]	; (8006e84 <MX_GPIO_Init+0x274>)
 8006dc8:	f004 f8f6 	bl	800afb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006dcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006dda:	f107 031c 	add.w	r3, r7, #28
 8006dde:	4619      	mov	r1, r3
 8006de0:	4829      	ldr	r0, [pc, #164]	; (8006e88 <MX_GPIO_Init+0x278>)
 8006de2:	f004 f8e9 	bl	800afb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006de6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006dec:	2301      	movs	r3, #1
 8006dee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df0:	2300      	movs	r3, #0
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006df4:	2300      	movs	r3, #0
 8006df6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006df8:	f107 031c 	add.w	r3, r7, #28
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4822      	ldr	r0, [pc, #136]	; (8006e88 <MX_GPIO_Init+0x278>)
 8006e00:	f004 f8da 	bl	800afb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e12:	2300      	movs	r3, #0
 8006e14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e16:	f107 031c 	add.w	r3, r7, #28
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	481a      	ldr	r0, [pc, #104]	; (8006e88 <MX_GPIO_Init+0x278>)
 8006e1e:	f004 f8cb 	bl	800afb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006e22:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006e26:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e30:	2300      	movs	r3, #0
 8006e32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e34:	f107 031c 	add.w	r3, r7, #28
 8006e38:	4619      	mov	r1, r3
 8006e3a:	4814      	ldr	r0, [pc, #80]	; (8006e8c <MX_GPIO_Init+0x27c>)
 8006e3c:	f004 f8bc 	bl	800afb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006e40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e46:	2300      	movs	r3, #0
 8006e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e4e:	f107 031c 	add.w	r3, r7, #28
 8006e52:	4619      	mov	r1, r3
 8006e54:	480d      	ldr	r0, [pc, #52]	; (8006e8c <MX_GPIO_Init+0x27c>)
 8006e56:	f004 f8af 	bl	800afb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006e5a:	239b      	movs	r3, #155	; 0x9b
 8006e5c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e62:	2301      	movs	r3, #1
 8006e64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e66:	f107 031c 	add.w	r3, r7, #28
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	4806      	ldr	r0, [pc, #24]	; (8006e88 <MX_GPIO_Init+0x278>)
 8006e6e:	f004 f8a3 	bl	800afb8 <HAL_GPIO_Init>

}
 8006e72:	bf00      	nop
 8006e74:	3730      	adds	r7, #48	; 0x30
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	40023800 	.word	0x40023800
 8006e80:	40021000 	.word	0x40021000
 8006e84:	40020400 	.word	0x40020400
 8006e88:	40020c00 	.word	0x40020c00
 8006e8c:	40020000 	.word	0x40020000
 8006e90:	40020800 	.word	0x40020800

08006e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006e94:	b480      	push	{r7}
 8006e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006e98:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006e9a:	e7fe      	b.n	8006e9a <Error_Handler+0x6>

08006e9c <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006ea0:	bf00      	nop
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
	...

08006eac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	607b      	str	r3, [r7, #4]
 8006eb6:	4b10      	ldr	r3, [pc, #64]	; (8006ef8 <HAL_MspInit+0x4c>)
 8006eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eba:	4a0f      	ldr	r2, [pc, #60]	; (8006ef8 <HAL_MspInit+0x4c>)
 8006ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8006ec2:	4b0d      	ldr	r3, [pc, #52]	; (8006ef8 <HAL_MspInit+0x4c>)
 8006ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eca:	607b      	str	r3, [r7, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ece:	2300      	movs	r3, #0
 8006ed0:	603b      	str	r3, [r7, #0]
 8006ed2:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <HAL_MspInit+0x4c>)
 8006ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed6:	4a08      	ldr	r2, [pc, #32]	; (8006ef8 <HAL_MspInit+0x4c>)
 8006ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006edc:	6413      	str	r3, [r2, #64]	; 0x40
 8006ede:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <HAL_MspInit+0x4c>)
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ee6:	603b      	str	r3, [r7, #0]
 8006ee8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006eea:	bf00      	nop
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	40023800 	.word	0x40023800

08006efc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08c      	sub	sp, #48	; 0x30
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f04:	f107 031c 	add.w	r3, r7, #28
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	605a      	str	r2, [r3, #4]
 8006f0e:	609a      	str	r2, [r3, #8]
 8006f10:	60da      	str	r2, [r3, #12]
 8006f12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a4a      	ldr	r2, [pc, #296]	; (8007044 <HAL_ADC_MspInit+0x148>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	f040 808e 	bne.w	800703c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006f20:	2300      	movs	r3, #0
 8006f22:	61bb      	str	r3, [r7, #24]
 8006f24:	4b48      	ldr	r3, [pc, #288]	; (8007048 <HAL_ADC_MspInit+0x14c>)
 8006f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f28:	4a47      	ldr	r2, [pc, #284]	; (8007048 <HAL_ADC_MspInit+0x14c>)
 8006f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f2e:	6453      	str	r3, [r2, #68]	; 0x44
 8006f30:	4b45      	ldr	r3, [pc, #276]	; (8007048 <HAL_ADC_MspInit+0x14c>)
 8006f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f38:	61bb      	str	r3, [r7, #24]
 8006f3a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	617b      	str	r3, [r7, #20]
 8006f40:	4b41      	ldr	r3, [pc, #260]	; (8007048 <HAL_ADC_MspInit+0x14c>)
 8006f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f44:	4a40      	ldr	r2, [pc, #256]	; (8007048 <HAL_ADC_MspInit+0x14c>)
 8006f46:	f043 0304 	orr.w	r3, r3, #4
 8006f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8006f4c:	4b3e      	ldr	r3, [pc, #248]	; (8007048 <HAL_ADC_MspInit+0x14c>)
 8006f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f50:	f003 0304 	and.w	r3, r3, #4
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f58:	2300      	movs	r3, #0
 8006f5a:	613b      	str	r3, [r7, #16]
 8006f5c:	4b3a      	ldr	r3, [pc, #232]	; (8007048 <HAL_ADC_MspInit+0x14c>)
 8006f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f60:	4a39      	ldr	r2, [pc, #228]	; (8007048 <HAL_ADC_MspInit+0x14c>)
 8006f62:	f043 0301 	orr.w	r3, r3, #1
 8006f66:	6313      	str	r3, [r2, #48]	; 0x30
 8006f68:	4b37      	ldr	r3, [pc, #220]	; (8007048 <HAL_ADC_MspInit+0x14c>)
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	613b      	str	r3, [r7, #16]
 8006f72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f74:	2300      	movs	r3, #0
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	4b33      	ldr	r3, [pc, #204]	; (8007048 <HAL_ADC_MspInit+0x14c>)
 8006f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7c:	4a32      	ldr	r2, [pc, #200]	; (8007048 <HAL_ADC_MspInit+0x14c>)
 8006f7e:	f043 0302 	orr.w	r3, r3, #2
 8006f82:	6313      	str	r3, [r2, #48]	; 0x30
 8006f84:	4b30      	ldr	r3, [pc, #192]	; (8007048 <HAL_ADC_MspInit+0x14c>)
 8006f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	60fb      	str	r3, [r7, #12]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006f90:	230f      	movs	r3, #15
 8006f92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f94:	2303      	movs	r3, #3
 8006f96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f9c:	f107 031c 	add.w	r3, r7, #28
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	482a      	ldr	r0, [pc, #168]	; (800704c <HAL_ADC_MspInit+0x150>)
 8006fa4:	f004 f808 	bl	800afb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006fa8:	23ff      	movs	r3, #255	; 0xff
 8006faa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006fac:	2303      	movs	r3, #3
 8006fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fb4:	f107 031c 	add.w	r3, r7, #28
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4825      	ldr	r0, [pc, #148]	; (8007050 <HAL_ADC_MspInit+0x154>)
 8006fbc:	f003 fffc 	bl	800afb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006fc0:	2303      	movs	r3, #3
 8006fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fcc:	f107 031c 	add.w	r3, r7, #28
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	4820      	ldr	r0, [pc, #128]	; (8007054 <HAL_ADC_MspInit+0x158>)
 8006fd4:	f003 fff0 	bl	800afb8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006fd8:	4b1f      	ldr	r3, [pc, #124]	; (8007058 <HAL_ADC_MspInit+0x15c>)
 8006fda:	4a20      	ldr	r2, [pc, #128]	; (800705c <HAL_ADC_MspInit+0x160>)
 8006fdc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006fde:	4b1e      	ldr	r3, [pc, #120]	; (8007058 <HAL_ADC_MspInit+0x15c>)
 8006fe0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006fe4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006fe6:	4b1c      	ldr	r3, [pc, #112]	; (8007058 <HAL_ADC_MspInit+0x15c>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006fec:	4b1a      	ldr	r3, [pc, #104]	; (8007058 <HAL_ADC_MspInit+0x15c>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006ff2:	4b19      	ldr	r3, [pc, #100]	; (8007058 <HAL_ADC_MspInit+0x15c>)
 8006ff4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ff8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006ffa:	4b17      	ldr	r3, [pc, #92]	; (8007058 <HAL_ADC_MspInit+0x15c>)
 8006ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007000:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007002:	4b15      	ldr	r3, [pc, #84]	; (8007058 <HAL_ADC_MspInit+0x15c>)
 8007004:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007008:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800700a:	4b13      	ldr	r3, [pc, #76]	; (8007058 <HAL_ADC_MspInit+0x15c>)
 800700c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007010:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007012:	4b11      	ldr	r3, [pc, #68]	; (8007058 <HAL_ADC_MspInit+0x15c>)
 8007014:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007018:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800701a:	4b0f      	ldr	r3, [pc, #60]	; (8007058 <HAL_ADC_MspInit+0x15c>)
 800701c:	2200      	movs	r2, #0
 800701e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8007020:	480d      	ldr	r0, [pc, #52]	; (8007058 <HAL_ADC_MspInit+0x15c>)
 8007022:	f003 fc2d 	bl	800a880 <HAL_DMA_Init>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 800702c:	f7ff ff32 	bl	8006e94 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a09      	ldr	r2, [pc, #36]	; (8007058 <HAL_ADC_MspInit+0x15c>)
 8007034:	639a      	str	r2, [r3, #56]	; 0x38
 8007036:	4a08      	ldr	r2, [pc, #32]	; (8007058 <HAL_ADC_MspInit+0x15c>)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800703c:	bf00      	nop
 800703e:	3730      	adds	r7, #48	; 0x30
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	40012100 	.word	0x40012100
 8007048:	40023800 	.word	0x40023800
 800704c:	40020800 	.word	0x40020800
 8007050:	40020000 	.word	0x40020000
 8007054:	40020400 	.word	0x40020400
 8007058:	20044af0 	.word	0x20044af0
 800705c:	40026440 	.word	0x40026440

08007060 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b08c      	sub	sp, #48	; 0x30
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007068:	f107 031c 	add.w	r3, r7, #28
 800706c:	2200      	movs	r2, #0
 800706e:	601a      	str	r2, [r3, #0]
 8007070:	605a      	str	r2, [r3, #4]
 8007072:	609a      	str	r2, [r3, #8]
 8007074:	60da      	str	r2, [r3, #12]
 8007076:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a32      	ldr	r2, [pc, #200]	; (8007148 <HAL_I2C_MspInit+0xe8>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d12c      	bne.n	80070dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007082:	2300      	movs	r3, #0
 8007084:	61bb      	str	r3, [r7, #24]
 8007086:	4b31      	ldr	r3, [pc, #196]	; (800714c <HAL_I2C_MspInit+0xec>)
 8007088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708a:	4a30      	ldr	r2, [pc, #192]	; (800714c <HAL_I2C_MspInit+0xec>)
 800708c:	f043 0302 	orr.w	r3, r3, #2
 8007090:	6313      	str	r3, [r2, #48]	; 0x30
 8007092:	4b2e      	ldr	r3, [pc, #184]	; (800714c <HAL_I2C_MspInit+0xec>)
 8007094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800709e:	23c0      	movs	r3, #192	; 0xc0
 80070a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80070a2:	2312      	movs	r3, #18
 80070a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80070a6:	2301      	movs	r3, #1
 80070a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070aa:	2303      	movs	r3, #3
 80070ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80070ae:	2304      	movs	r3, #4
 80070b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070b2:	f107 031c 	add.w	r3, r7, #28
 80070b6:	4619      	mov	r1, r3
 80070b8:	4825      	ldr	r0, [pc, #148]	; (8007150 <HAL_I2C_MspInit+0xf0>)
 80070ba:	f003 ff7d 	bl	800afb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80070be:	2300      	movs	r3, #0
 80070c0:	617b      	str	r3, [r7, #20]
 80070c2:	4b22      	ldr	r3, [pc, #136]	; (800714c <HAL_I2C_MspInit+0xec>)
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	4a21      	ldr	r2, [pc, #132]	; (800714c <HAL_I2C_MspInit+0xec>)
 80070c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070cc:	6413      	str	r3, [r2, #64]	; 0x40
 80070ce:	4b1f      	ldr	r3, [pc, #124]	; (800714c <HAL_I2C_MspInit+0xec>)
 80070d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070d6:	617b      	str	r3, [r7, #20]
 80070d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80070da:	e031      	b.n	8007140 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a1c      	ldr	r2, [pc, #112]	; (8007154 <HAL_I2C_MspInit+0xf4>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d12c      	bne.n	8007140 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070e6:	2300      	movs	r3, #0
 80070e8:	613b      	str	r3, [r7, #16]
 80070ea:	4b18      	ldr	r3, [pc, #96]	; (800714c <HAL_I2C_MspInit+0xec>)
 80070ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ee:	4a17      	ldr	r2, [pc, #92]	; (800714c <HAL_I2C_MspInit+0xec>)
 80070f0:	f043 0302 	orr.w	r3, r3, #2
 80070f4:	6313      	str	r3, [r2, #48]	; 0x30
 80070f6:	4b15      	ldr	r3, [pc, #84]	; (800714c <HAL_I2C_MspInit+0xec>)
 80070f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fa:	f003 0302 	and.w	r3, r3, #2
 80070fe:	613b      	str	r3, [r7, #16]
 8007100:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007102:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007108:	2312      	movs	r3, #18
 800710a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800710c:	2301      	movs	r3, #1
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007110:	2303      	movs	r3, #3
 8007112:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007114:	2304      	movs	r3, #4
 8007116:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007118:	f107 031c 	add.w	r3, r7, #28
 800711c:	4619      	mov	r1, r3
 800711e:	480c      	ldr	r0, [pc, #48]	; (8007150 <HAL_I2C_MspInit+0xf0>)
 8007120:	f003 ff4a 	bl	800afb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007124:	2300      	movs	r3, #0
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	4b08      	ldr	r3, [pc, #32]	; (800714c <HAL_I2C_MspInit+0xec>)
 800712a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712c:	4a07      	ldr	r2, [pc, #28]	; (800714c <HAL_I2C_MspInit+0xec>)
 800712e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007132:	6413      	str	r3, [r2, #64]	; 0x40
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <HAL_I2C_MspInit+0xec>)
 8007136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007138:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	68fb      	ldr	r3, [r7, #12]
}
 8007140:	bf00      	nop
 8007142:	3730      	adds	r7, #48	; 0x30
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	40005400 	.word	0x40005400
 800714c:	40023800 	.word	0x40023800
 8007150:	40020400 	.word	0x40020400
 8007154:	40005800 	.word	0x40005800

08007158 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08a      	sub	sp, #40	; 0x28
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007160:	f107 0314 	add.w	r3, r7, #20
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	605a      	str	r2, [r3, #4]
 800716a:	609a      	str	r2, [r3, #8]
 800716c:	60da      	str	r2, [r3, #12]
 800716e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a69      	ldr	r2, [pc, #420]	; (800731c <HAL_SD_MspInit+0x1c4>)
 8007176:	4293      	cmp	r3, r2
 8007178:	f040 80cb 	bne.w	8007312 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800717c:	2300      	movs	r3, #0
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	4b67      	ldr	r3, [pc, #412]	; (8007320 <HAL_SD_MspInit+0x1c8>)
 8007182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007184:	4a66      	ldr	r2, [pc, #408]	; (8007320 <HAL_SD_MspInit+0x1c8>)
 8007186:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800718a:	6453      	str	r3, [r2, #68]	; 0x44
 800718c:	4b64      	ldr	r3, [pc, #400]	; (8007320 <HAL_SD_MspInit+0x1c8>)
 800718e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007194:	613b      	str	r3, [r7, #16]
 8007196:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007198:	2300      	movs	r3, #0
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	4b60      	ldr	r3, [pc, #384]	; (8007320 <HAL_SD_MspInit+0x1c8>)
 800719e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a0:	4a5f      	ldr	r2, [pc, #380]	; (8007320 <HAL_SD_MspInit+0x1c8>)
 80071a2:	f043 0304 	orr.w	r3, r3, #4
 80071a6:	6313      	str	r3, [r2, #48]	; 0x30
 80071a8:	4b5d      	ldr	r3, [pc, #372]	; (8007320 <HAL_SD_MspInit+0x1c8>)
 80071aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	60fb      	str	r3, [r7, #12]
 80071b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80071b4:	2300      	movs	r3, #0
 80071b6:	60bb      	str	r3, [r7, #8]
 80071b8:	4b59      	ldr	r3, [pc, #356]	; (8007320 <HAL_SD_MspInit+0x1c8>)
 80071ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071bc:	4a58      	ldr	r2, [pc, #352]	; (8007320 <HAL_SD_MspInit+0x1c8>)
 80071be:	f043 0308 	orr.w	r3, r3, #8
 80071c2:	6313      	str	r3, [r2, #48]	; 0x30
 80071c4:	4b56      	ldr	r3, [pc, #344]	; (8007320 <HAL_SD_MspInit+0x1c8>)
 80071c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c8:	f003 0308 	and.w	r3, r3, #8
 80071cc:	60bb      	str	r3, [r7, #8]
 80071ce:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80071d0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80071d4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071d6:	2302      	movs	r3, #2
 80071d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071de:	2303      	movs	r3, #3
 80071e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80071e2:	230c      	movs	r3, #12
 80071e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071e6:	f107 0314 	add.w	r3, r7, #20
 80071ea:	4619      	mov	r1, r3
 80071ec:	484d      	ldr	r0, [pc, #308]	; (8007324 <HAL_SD_MspInit+0x1cc>)
 80071ee:	f003 fee3 	bl	800afb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80071f2:	2304      	movs	r3, #4
 80071f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071f6:	2302      	movs	r3, #2
 80071f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071fa:	2300      	movs	r3, #0
 80071fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071fe:	2303      	movs	r3, #3
 8007200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007202:	230c      	movs	r3, #12
 8007204:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007206:	f107 0314 	add.w	r3, r7, #20
 800720a:	4619      	mov	r1, r3
 800720c:	4846      	ldr	r0, [pc, #280]	; (8007328 <HAL_SD_MspInit+0x1d0>)
 800720e:	f003 fed3 	bl	800afb8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8007212:	4b46      	ldr	r3, [pc, #280]	; (800732c <HAL_SD_MspInit+0x1d4>)
 8007214:	4a46      	ldr	r2, [pc, #280]	; (8007330 <HAL_SD_MspInit+0x1d8>)
 8007216:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8007218:	4b44      	ldr	r3, [pc, #272]	; (800732c <HAL_SD_MspInit+0x1d4>)
 800721a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800721e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007220:	4b42      	ldr	r3, [pc, #264]	; (800732c <HAL_SD_MspInit+0x1d4>)
 8007222:	2200      	movs	r2, #0
 8007224:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007226:	4b41      	ldr	r3, [pc, #260]	; (800732c <HAL_SD_MspInit+0x1d4>)
 8007228:	2200      	movs	r2, #0
 800722a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800722c:	4b3f      	ldr	r3, [pc, #252]	; (800732c <HAL_SD_MspInit+0x1d4>)
 800722e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007232:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007234:	4b3d      	ldr	r3, [pc, #244]	; (800732c <HAL_SD_MspInit+0x1d4>)
 8007236:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800723a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800723c:	4b3b      	ldr	r3, [pc, #236]	; (800732c <HAL_SD_MspInit+0x1d4>)
 800723e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007242:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8007244:	4b39      	ldr	r3, [pc, #228]	; (800732c <HAL_SD_MspInit+0x1d4>)
 8007246:	2220      	movs	r2, #32
 8007248:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800724a:	4b38      	ldr	r3, [pc, #224]	; (800732c <HAL_SD_MspInit+0x1d4>)
 800724c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007250:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007252:	4b36      	ldr	r3, [pc, #216]	; (800732c <HAL_SD_MspInit+0x1d4>)
 8007254:	2204      	movs	r2, #4
 8007256:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007258:	4b34      	ldr	r3, [pc, #208]	; (800732c <HAL_SD_MspInit+0x1d4>)
 800725a:	2203      	movs	r2, #3
 800725c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800725e:	4b33      	ldr	r3, [pc, #204]	; (800732c <HAL_SD_MspInit+0x1d4>)
 8007260:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007264:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007266:	4b31      	ldr	r3, [pc, #196]	; (800732c <HAL_SD_MspInit+0x1d4>)
 8007268:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800726c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800726e:	482f      	ldr	r0, [pc, #188]	; (800732c <HAL_SD_MspInit+0x1d4>)
 8007270:	f003 fb06 	bl	800a880 <HAL_DMA_Init>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800727a:	f7ff fe0b 	bl	8006e94 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a2a      	ldr	r2, [pc, #168]	; (800732c <HAL_SD_MspInit+0x1d4>)
 8007282:	641a      	str	r2, [r3, #64]	; 0x40
 8007284:	4a29      	ldr	r2, [pc, #164]	; (800732c <HAL_SD_MspInit+0x1d4>)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800728a:	4b2a      	ldr	r3, [pc, #168]	; (8007334 <HAL_SD_MspInit+0x1dc>)
 800728c:	4a2a      	ldr	r2, [pc, #168]	; (8007338 <HAL_SD_MspInit+0x1e0>)
 800728e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8007290:	4b28      	ldr	r3, [pc, #160]	; (8007334 <HAL_SD_MspInit+0x1dc>)
 8007292:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007296:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007298:	4b26      	ldr	r3, [pc, #152]	; (8007334 <HAL_SD_MspInit+0x1dc>)
 800729a:	2240      	movs	r2, #64	; 0x40
 800729c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800729e:	4b25      	ldr	r3, [pc, #148]	; (8007334 <HAL_SD_MspInit+0x1dc>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80072a4:	4b23      	ldr	r3, [pc, #140]	; (8007334 <HAL_SD_MspInit+0x1dc>)
 80072a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072aa:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80072ac:	4b21      	ldr	r3, [pc, #132]	; (8007334 <HAL_SD_MspInit+0x1dc>)
 80072ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80072b2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80072b4:	4b1f      	ldr	r3, [pc, #124]	; (8007334 <HAL_SD_MspInit+0x1dc>)
 80072b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80072ba:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80072bc:	4b1d      	ldr	r3, [pc, #116]	; (8007334 <HAL_SD_MspInit+0x1dc>)
 80072be:	2220      	movs	r2, #32
 80072c0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80072c2:	4b1c      	ldr	r3, [pc, #112]	; (8007334 <HAL_SD_MspInit+0x1dc>)
 80072c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80072c8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80072ca:	4b1a      	ldr	r3, [pc, #104]	; (8007334 <HAL_SD_MspInit+0x1dc>)
 80072cc:	2204      	movs	r2, #4
 80072ce:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80072d0:	4b18      	ldr	r3, [pc, #96]	; (8007334 <HAL_SD_MspInit+0x1dc>)
 80072d2:	2203      	movs	r2, #3
 80072d4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80072d6:	4b17      	ldr	r3, [pc, #92]	; (8007334 <HAL_SD_MspInit+0x1dc>)
 80072d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80072dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80072de:	4b15      	ldr	r3, [pc, #84]	; (8007334 <HAL_SD_MspInit+0x1dc>)
 80072e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80072e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80072e6:	4813      	ldr	r0, [pc, #76]	; (8007334 <HAL_SD_MspInit+0x1dc>)
 80072e8:	f003 faca 	bl	800a880 <HAL_DMA_Init>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80072f2:	f7ff fdcf 	bl	8006e94 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a0e      	ldr	r2, [pc, #56]	; (8007334 <HAL_SD_MspInit+0x1dc>)
 80072fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80072fc:	4a0d      	ldr	r2, [pc, #52]	; (8007334 <HAL_SD_MspInit+0x1dc>)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8007302:	2200      	movs	r2, #0
 8007304:	2100      	movs	r1, #0
 8007306:	2031      	movs	r0, #49	; 0x31
 8007308:	f003 fa83 	bl	800a812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800730c:	2031      	movs	r0, #49	; 0x31
 800730e:	f003 fa9c 	bl	800a84a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8007312:	bf00      	nop
 8007314:	3728      	adds	r7, #40	; 0x28
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	40012c00 	.word	0x40012c00
 8007320:	40023800 	.word	0x40023800
 8007324:	40020800 	.word	0x40020800
 8007328:	40020c00 	.word	0x40020c00
 800732c:	20044618 	.word	0x20044618
 8007330:	40026458 	.word	0x40026458
 8007334:	2004494c 	.word	0x2004494c
 8007338:	400264a0 	.word	0x400264a0

0800733c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08a      	sub	sp, #40	; 0x28
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007344:	f107 0314 	add.w	r3, r7, #20
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	605a      	str	r2, [r3, #4]
 800734e:	609a      	str	r2, [r3, #8]
 8007350:	60da      	str	r2, [r3, #12]
 8007352:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a19      	ldr	r2, [pc, #100]	; (80073c0 <HAL_SPI_MspInit+0x84>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d12c      	bne.n	80073b8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800735e:	2300      	movs	r3, #0
 8007360:	613b      	str	r3, [r7, #16]
 8007362:	4b18      	ldr	r3, [pc, #96]	; (80073c4 <HAL_SPI_MspInit+0x88>)
 8007364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007366:	4a17      	ldr	r2, [pc, #92]	; (80073c4 <HAL_SPI_MspInit+0x88>)
 8007368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800736c:	6413      	str	r3, [r2, #64]	; 0x40
 800736e:	4b15      	ldr	r3, [pc, #84]	; (80073c4 <HAL_SPI_MspInit+0x88>)
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007376:	613b      	str	r3, [r7, #16]
 8007378:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800737a:	2300      	movs	r3, #0
 800737c:	60fb      	str	r3, [r7, #12]
 800737e:	4b11      	ldr	r3, [pc, #68]	; (80073c4 <HAL_SPI_MspInit+0x88>)
 8007380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007382:	4a10      	ldr	r2, [pc, #64]	; (80073c4 <HAL_SPI_MspInit+0x88>)
 8007384:	f043 0302 	orr.w	r3, r3, #2
 8007388:	6313      	str	r3, [r2, #48]	; 0x30
 800738a:	4b0e      	ldr	r3, [pc, #56]	; (80073c4 <HAL_SPI_MspInit+0x88>)
 800738c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738e:	f003 0302 	and.w	r3, r3, #2
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007396:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800739a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800739c:	2302      	movs	r3, #2
 800739e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073a0:	2300      	movs	r3, #0
 80073a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073a4:	2303      	movs	r3, #3
 80073a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80073a8:	2305      	movs	r3, #5
 80073aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073ac:	f107 0314 	add.w	r3, r7, #20
 80073b0:	4619      	mov	r1, r3
 80073b2:	4805      	ldr	r0, [pc, #20]	; (80073c8 <HAL_SPI_MspInit+0x8c>)
 80073b4:	f003 fe00 	bl	800afb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80073b8:	bf00      	nop
 80073ba:	3728      	adds	r7, #40	; 0x28
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	40003800 	.word	0x40003800
 80073c4:	40023800 	.word	0x40023800
 80073c8:	40020400 	.word	0x40020400

080073cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b08c      	sub	sp, #48	; 0x30
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073d4:	f107 031c 	add.w	r3, r7, #28
 80073d8:	2200      	movs	r2, #0
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	605a      	str	r2, [r3, #4]
 80073de:	609a      	str	r2, [r3, #8]
 80073e0:	60da      	str	r2, [r3, #12]
 80073e2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a2d      	ldr	r2, [pc, #180]	; (80074a0 <HAL_TIM_PWM_MspInit+0xd4>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d12d      	bne.n	800744a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80073ee:	2300      	movs	r3, #0
 80073f0:	61bb      	str	r3, [r7, #24]
 80073f2:	4b2c      	ldr	r3, [pc, #176]	; (80074a4 <HAL_TIM_PWM_MspInit+0xd8>)
 80073f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f6:	4a2b      	ldr	r2, [pc, #172]	; (80074a4 <HAL_TIM_PWM_MspInit+0xd8>)
 80073f8:	f043 0301 	orr.w	r3, r3, #1
 80073fc:	6453      	str	r3, [r2, #68]	; 0x44
 80073fe:	4b29      	ldr	r3, [pc, #164]	; (80074a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	61bb      	str	r3, [r7, #24]
 8007408:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800740a:	2300      	movs	r3, #0
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	4b25      	ldr	r3, [pc, #148]	; (80074a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007412:	4a24      	ldr	r2, [pc, #144]	; (80074a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007414:	f043 0310 	orr.w	r3, r3, #16
 8007418:	6313      	str	r3, [r2, #48]	; 0x30
 800741a:	4b22      	ldr	r3, [pc, #136]	; (80074a4 <HAL_TIM_PWM_MspInit+0xd8>)
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	f003 0310 	and.w	r3, r3, #16
 8007422:	617b      	str	r3, [r7, #20]
 8007424:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8007426:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800742a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800742c:	2302      	movs	r3, #2
 800742e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007430:	2300      	movs	r3, #0
 8007432:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007434:	2300      	movs	r3, #0
 8007436:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007438:	2301      	movs	r3, #1
 800743a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800743c:	f107 031c 	add.w	r3, r7, #28
 8007440:	4619      	mov	r1, r3
 8007442:	4819      	ldr	r0, [pc, #100]	; (80074a8 <HAL_TIM_PWM_MspInit+0xdc>)
 8007444:	f003 fdb8 	bl	800afb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007448:	e026      	b.n	8007498 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a17      	ldr	r2, [pc, #92]	; (80074ac <HAL_TIM_PWM_MspInit+0xe0>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d10e      	bne.n	8007472 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007454:	2300      	movs	r3, #0
 8007456:	613b      	str	r3, [r7, #16]
 8007458:	4b12      	ldr	r3, [pc, #72]	; (80074a4 <HAL_TIM_PWM_MspInit+0xd8>)
 800745a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745c:	4a11      	ldr	r2, [pc, #68]	; (80074a4 <HAL_TIM_PWM_MspInit+0xd8>)
 800745e:	f043 0302 	orr.w	r3, r3, #2
 8007462:	6413      	str	r3, [r2, #64]	; 0x40
 8007464:	4b0f      	ldr	r3, [pc, #60]	; (80074a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	613b      	str	r3, [r7, #16]
 800746e:	693b      	ldr	r3, [r7, #16]
}
 8007470:	e012      	b.n	8007498 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a0e      	ldr	r2, [pc, #56]	; (80074b0 <HAL_TIM_PWM_MspInit+0xe4>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d10d      	bne.n	8007498 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800747c:	2300      	movs	r3, #0
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	4b08      	ldr	r3, [pc, #32]	; (80074a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	4a07      	ldr	r2, [pc, #28]	; (80074a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8007486:	f043 0304 	orr.w	r3, r3, #4
 800748a:	6413      	str	r3, [r2, #64]	; 0x40
 800748c:	4b05      	ldr	r3, [pc, #20]	; (80074a4 <HAL_TIM_PWM_MspInit+0xd8>)
 800748e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	68fb      	ldr	r3, [r7, #12]
}
 8007498:	bf00      	nop
 800749a:	3730      	adds	r7, #48	; 0x30
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	40010000 	.word	0x40010000
 80074a4:	40023800 	.word	0x40023800
 80074a8:	40021000 	.word	0x40021000
 80074ac:	40000400 	.word	0x40000400
 80074b0:	40000800 	.word	0x40000800

080074b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b088      	sub	sp, #32
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a3e      	ldr	r2, [pc, #248]	; (80075bc <HAL_TIM_Base_MspInit+0x108>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d116      	bne.n	80074f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80074c6:	2300      	movs	r3, #0
 80074c8:	61fb      	str	r3, [r7, #28]
 80074ca:	4b3d      	ldr	r3, [pc, #244]	; (80075c0 <HAL_TIM_Base_MspInit+0x10c>)
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	4a3c      	ldr	r2, [pc, #240]	; (80075c0 <HAL_TIM_Base_MspInit+0x10c>)
 80074d0:	f043 0310 	orr.w	r3, r3, #16
 80074d4:	6413      	str	r3, [r2, #64]	; 0x40
 80074d6:	4b3a      	ldr	r3, [pc, #232]	; (80075c0 <HAL_TIM_Base_MspInit+0x10c>)
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	f003 0310 	and.w	r3, r3, #16
 80074de:	61fb      	str	r3, [r7, #28]
 80074e0:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80074e2:	2200      	movs	r2, #0
 80074e4:	2101      	movs	r1, #1
 80074e6:	2036      	movs	r0, #54	; 0x36
 80074e8:	f003 f993 	bl	800a812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80074ec:	2036      	movs	r0, #54	; 0x36
 80074ee:	f003 f9ac 	bl	800a84a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80074f2:	e05e      	b.n	80075b2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a32      	ldr	r2, [pc, #200]	; (80075c4 <HAL_TIM_Base_MspInit+0x110>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d116      	bne.n	800752c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80074fe:	2300      	movs	r3, #0
 8007500:	61bb      	str	r3, [r7, #24]
 8007502:	4b2f      	ldr	r3, [pc, #188]	; (80075c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007506:	4a2e      	ldr	r2, [pc, #184]	; (80075c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007508:	f043 0320 	orr.w	r3, r3, #32
 800750c:	6413      	str	r3, [r2, #64]	; 0x40
 800750e:	4b2c      	ldr	r3, [pc, #176]	; (80075c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f003 0320 	and.w	r3, r3, #32
 8007516:	61bb      	str	r3, [r7, #24]
 8007518:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800751a:	2200      	movs	r2, #0
 800751c:	2100      	movs	r1, #0
 800751e:	2037      	movs	r0, #55	; 0x37
 8007520:	f003 f977 	bl	800a812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007524:	2037      	movs	r0, #55	; 0x37
 8007526:	f003 f990 	bl	800a84a <HAL_NVIC_EnableIRQ>
}
 800752a:	e042      	b.n	80075b2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a25      	ldr	r2, [pc, #148]	; (80075c8 <HAL_TIM_Base_MspInit+0x114>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d10e      	bne.n	8007554 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007536:	2300      	movs	r3, #0
 8007538:	617b      	str	r3, [r7, #20]
 800753a:	4b21      	ldr	r3, [pc, #132]	; (80075c0 <HAL_TIM_Base_MspInit+0x10c>)
 800753c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753e:	4a20      	ldr	r2, [pc, #128]	; (80075c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007544:	6453      	str	r3, [r2, #68]	; 0x44
 8007546:	4b1e      	ldr	r3, [pc, #120]	; (80075c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800754a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800754e:	617b      	str	r3, [r7, #20]
 8007550:	697b      	ldr	r3, [r7, #20]
}
 8007552:	e02e      	b.n	80075b2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a1c      	ldr	r2, [pc, #112]	; (80075cc <HAL_TIM_Base_MspInit+0x118>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d10e      	bne.n	800757c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800755e:	2300      	movs	r3, #0
 8007560:	613b      	str	r3, [r7, #16]
 8007562:	4b17      	ldr	r3, [pc, #92]	; (80075c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007566:	4a16      	ldr	r2, [pc, #88]	; (80075c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800756c:	6453      	str	r3, [r2, #68]	; 0x44
 800756e:	4b14      	ldr	r3, [pc, #80]	; (80075c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007576:	613b      	str	r3, [r7, #16]
 8007578:	693b      	ldr	r3, [r7, #16]
}
 800757a:	e01a      	b.n	80075b2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a13      	ldr	r2, [pc, #76]	; (80075d0 <HAL_TIM_Base_MspInit+0x11c>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d115      	bne.n	80075b2 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	4b0d      	ldr	r3, [pc, #52]	; (80075c0 <HAL_TIM_Base_MspInit+0x10c>)
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	4a0c      	ldr	r2, [pc, #48]	; (80075c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007594:	6413      	str	r3, [r2, #64]	; 0x40
 8007596:	4b0a      	ldr	r3, [pc, #40]	; (80075c0 <HAL_TIM_Base_MspInit+0x10c>)
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80075a2:	2200      	movs	r2, #0
 80075a4:	2100      	movs	r1, #0
 80075a6:	202c      	movs	r0, #44	; 0x2c
 80075a8:	f003 f933 	bl	800a812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80075ac:	202c      	movs	r0, #44	; 0x2c
 80075ae:	f003 f94c 	bl	800a84a <HAL_NVIC_EnableIRQ>
}
 80075b2:	bf00      	nop
 80075b4:	3720      	adds	r7, #32
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	40001000 	.word	0x40001000
 80075c0:	40023800 	.word	0x40023800
 80075c4:	40001400 	.word	0x40001400
 80075c8:	40014400 	.word	0x40014400
 80075cc:	40014800 	.word	0x40014800
 80075d0:	40001c00 	.word	0x40001c00

080075d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08a      	sub	sp, #40	; 0x28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075dc:	f107 0314 	add.w	r3, r7, #20
 80075e0:	2200      	movs	r2, #0
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	605a      	str	r2, [r3, #4]
 80075e6:	609a      	str	r2, [r3, #8]
 80075e8:	60da      	str	r2, [r3, #12]
 80075ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a1d      	ldr	r2, [pc, #116]	; (8007668 <HAL_TIM_Encoder_MspInit+0x94>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d133      	bne.n	800765e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80075f6:	2300      	movs	r3, #0
 80075f8:	613b      	str	r3, [r7, #16]
 80075fa:	4b1c      	ldr	r3, [pc, #112]	; (800766c <HAL_TIM_Encoder_MspInit+0x98>)
 80075fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fe:	4a1b      	ldr	r2, [pc, #108]	; (800766c <HAL_TIM_Encoder_MspInit+0x98>)
 8007600:	f043 0302 	orr.w	r3, r3, #2
 8007604:	6453      	str	r3, [r2, #68]	; 0x44
 8007606:	4b19      	ldr	r3, [pc, #100]	; (800766c <HAL_TIM_Encoder_MspInit+0x98>)
 8007608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007612:	2300      	movs	r3, #0
 8007614:	60fb      	str	r3, [r7, #12]
 8007616:	4b15      	ldr	r3, [pc, #84]	; (800766c <HAL_TIM_Encoder_MspInit+0x98>)
 8007618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761a:	4a14      	ldr	r2, [pc, #80]	; (800766c <HAL_TIM_Encoder_MspInit+0x98>)
 800761c:	f043 0304 	orr.w	r3, r3, #4
 8007620:	6313      	str	r3, [r2, #48]	; 0x30
 8007622:	4b12      	ldr	r3, [pc, #72]	; (800766c <HAL_TIM_Encoder_MspInit+0x98>)
 8007624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007626:	f003 0304 	and.w	r3, r3, #4
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800762e:	23c0      	movs	r3, #192	; 0xc0
 8007630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007632:	2302      	movs	r3, #2
 8007634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007636:	2300      	movs	r3, #0
 8007638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800763a:	2300      	movs	r3, #0
 800763c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800763e:	2303      	movs	r3, #3
 8007640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007642:	f107 0314 	add.w	r3, r7, #20
 8007646:	4619      	mov	r1, r3
 8007648:	4809      	ldr	r0, [pc, #36]	; (8007670 <HAL_TIM_Encoder_MspInit+0x9c>)
 800764a:	f003 fcb5 	bl	800afb8 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800764e:	2200      	movs	r2, #0
 8007650:	2100      	movs	r1, #0
 8007652:	202c      	movs	r0, #44	; 0x2c
 8007654:	f003 f8dd 	bl	800a812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007658:	202c      	movs	r0, #44	; 0x2c
 800765a:	f003 f8f6 	bl	800a84a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800765e:	bf00      	nop
 8007660:	3728      	adds	r7, #40	; 0x28
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	40010400 	.word	0x40010400
 800766c:	40023800 	.word	0x40023800
 8007670:	40020800 	.word	0x40020800

08007674 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08c      	sub	sp, #48	; 0x30
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800767c:	f107 031c 	add.w	r3, r7, #28
 8007680:	2200      	movs	r2, #0
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	605a      	str	r2, [r3, #4]
 8007686:	609a      	str	r2, [r3, #8]
 8007688:	60da      	str	r2, [r3, #12]
 800768a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a5c      	ldr	r2, [pc, #368]	; (8007804 <HAL_TIM_MspPostInit+0x190>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d11f      	bne.n	80076d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007696:	2300      	movs	r3, #0
 8007698:	61bb      	str	r3, [r7, #24]
 800769a:	4b5b      	ldr	r3, [pc, #364]	; (8007808 <HAL_TIM_MspPostInit+0x194>)
 800769c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769e:	4a5a      	ldr	r2, [pc, #360]	; (8007808 <HAL_TIM_MspPostInit+0x194>)
 80076a0:	f043 0310 	orr.w	r3, r3, #16
 80076a4:	6313      	str	r3, [r2, #48]	; 0x30
 80076a6:	4b58      	ldr	r3, [pc, #352]	; (8007808 <HAL_TIM_MspPostInit+0x194>)
 80076a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076aa:	f003 0310 	and.w	r3, r3, #16
 80076ae:	61bb      	str	r3, [r7, #24]
 80076b0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80076b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076b8:	2302      	movs	r3, #2
 80076ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076bc:	2300      	movs	r3, #0
 80076be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076c0:	2300      	movs	r3, #0
 80076c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80076c4:	2301      	movs	r3, #1
 80076c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80076c8:	f107 031c 	add.w	r3, r7, #28
 80076cc:	4619      	mov	r1, r3
 80076ce:	484f      	ldr	r0, [pc, #316]	; (800780c <HAL_TIM_MspPostInit+0x198>)
 80076d0:	f003 fc72 	bl	800afb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80076d4:	e091      	b.n	80077fa <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a4d      	ldr	r2, [pc, #308]	; (8007810 <HAL_TIM_MspPostInit+0x19c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d11e      	bne.n	800771e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076e0:	2300      	movs	r3, #0
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	4b48      	ldr	r3, [pc, #288]	; (8007808 <HAL_TIM_MspPostInit+0x194>)
 80076e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e8:	4a47      	ldr	r2, [pc, #284]	; (8007808 <HAL_TIM_MspPostInit+0x194>)
 80076ea:	f043 0302 	orr.w	r3, r3, #2
 80076ee:	6313      	str	r3, [r2, #48]	; 0x30
 80076f0:	4b45      	ldr	r3, [pc, #276]	; (8007808 <HAL_TIM_MspPostInit+0x194>)
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	617b      	str	r3, [r7, #20]
 80076fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80076fc:	2330      	movs	r3, #48	; 0x30
 80076fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007700:	2302      	movs	r3, #2
 8007702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007704:	2300      	movs	r3, #0
 8007706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007708:	2300      	movs	r3, #0
 800770a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800770c:	2302      	movs	r3, #2
 800770e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007710:	f107 031c 	add.w	r3, r7, #28
 8007714:	4619      	mov	r1, r3
 8007716:	483f      	ldr	r0, [pc, #252]	; (8007814 <HAL_TIM_MspPostInit+0x1a0>)
 8007718:	f003 fc4e 	bl	800afb8 <HAL_GPIO_Init>
}
 800771c:	e06d      	b.n	80077fa <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a3d      	ldr	r2, [pc, #244]	; (8007818 <HAL_TIM_MspPostInit+0x1a4>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d11f      	bne.n	8007768 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007728:	2300      	movs	r3, #0
 800772a:	613b      	str	r3, [r7, #16]
 800772c:	4b36      	ldr	r3, [pc, #216]	; (8007808 <HAL_TIM_MspPostInit+0x194>)
 800772e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007730:	4a35      	ldr	r2, [pc, #212]	; (8007808 <HAL_TIM_MspPostInit+0x194>)
 8007732:	f043 0308 	orr.w	r3, r3, #8
 8007736:	6313      	str	r3, [r2, #48]	; 0x30
 8007738:	4b33      	ldr	r3, [pc, #204]	; (8007808 <HAL_TIM_MspPostInit+0x194>)
 800773a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773c:	f003 0308 	and.w	r3, r3, #8
 8007740:	613b      	str	r3, [r7, #16]
 8007742:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007744:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800774a:	2302      	movs	r3, #2
 800774c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800774e:	2300      	movs	r3, #0
 8007750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007752:	2300      	movs	r3, #0
 8007754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007756:	2302      	movs	r3, #2
 8007758:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800775a:	f107 031c 	add.w	r3, r7, #28
 800775e:	4619      	mov	r1, r3
 8007760:	482e      	ldr	r0, [pc, #184]	; (800781c <HAL_TIM_MspPostInit+0x1a8>)
 8007762:	f003 fc29 	bl	800afb8 <HAL_GPIO_Init>
}
 8007766:	e048      	b.n	80077fa <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a2c      	ldr	r2, [pc, #176]	; (8007820 <HAL_TIM_MspPostInit+0x1ac>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d11f      	bne.n	80077b2 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007772:	2300      	movs	r3, #0
 8007774:	60fb      	str	r3, [r7, #12]
 8007776:	4b24      	ldr	r3, [pc, #144]	; (8007808 <HAL_TIM_MspPostInit+0x194>)
 8007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777a:	4a23      	ldr	r2, [pc, #140]	; (8007808 <HAL_TIM_MspPostInit+0x194>)
 800777c:	f043 0302 	orr.w	r3, r3, #2
 8007780:	6313      	str	r3, [r2, #48]	; 0x30
 8007782:	4b21      	ldr	r3, [pc, #132]	; (8007808 <HAL_TIM_MspPostInit+0x194>)
 8007784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	60fb      	str	r3, [r7, #12]
 800778c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800778e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007794:	2302      	movs	r3, #2
 8007796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007798:	2300      	movs	r3, #0
 800779a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800779c:	2300      	movs	r3, #0
 800779e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80077a0:	2303      	movs	r3, #3
 80077a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077a4:	f107 031c 	add.w	r3, r7, #28
 80077a8:	4619      	mov	r1, r3
 80077aa:	481a      	ldr	r0, [pc, #104]	; (8007814 <HAL_TIM_MspPostInit+0x1a0>)
 80077ac:	f003 fc04 	bl	800afb8 <HAL_GPIO_Init>
}
 80077b0:	e023      	b.n	80077fa <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a1b      	ldr	r2, [pc, #108]	; (8007824 <HAL_TIM_MspPostInit+0x1b0>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d11e      	bne.n	80077fa <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077bc:	2300      	movs	r3, #0
 80077be:	60bb      	str	r3, [r7, #8]
 80077c0:	4b11      	ldr	r3, [pc, #68]	; (8007808 <HAL_TIM_MspPostInit+0x194>)
 80077c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c4:	4a10      	ldr	r2, [pc, #64]	; (8007808 <HAL_TIM_MspPostInit+0x194>)
 80077c6:	f043 0302 	orr.w	r3, r3, #2
 80077ca:	6313      	str	r3, [r2, #48]	; 0x30
 80077cc:	4b0e      	ldr	r3, [pc, #56]	; (8007808 <HAL_TIM_MspPostInit+0x194>)
 80077ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	60bb      	str	r3, [r7, #8]
 80077d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80077d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077de:	2302      	movs	r3, #2
 80077e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077e6:	2300      	movs	r3, #0
 80077e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80077ea:	2303      	movs	r3, #3
 80077ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077ee:	f107 031c 	add.w	r3, r7, #28
 80077f2:	4619      	mov	r1, r3
 80077f4:	4807      	ldr	r0, [pc, #28]	; (8007814 <HAL_TIM_MspPostInit+0x1a0>)
 80077f6:	f003 fbdf 	bl	800afb8 <HAL_GPIO_Init>
}
 80077fa:	bf00      	nop
 80077fc:	3730      	adds	r7, #48	; 0x30
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	40010000 	.word	0x40010000
 8007808:	40023800 	.word	0x40023800
 800780c:	40021000 	.word	0x40021000
 8007810:	40000400 	.word	0x40000400
 8007814:	40020400 	.word	0x40020400
 8007818:	40000800 	.word	0x40000800
 800781c:	40020c00 	.word	0x40020c00
 8007820:	40014400 	.word	0x40014400
 8007824:	40014800 	.word	0x40014800

08007828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b08a      	sub	sp, #40	; 0x28
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007830:	f107 0314 	add.w	r3, r7, #20
 8007834:	2200      	movs	r2, #0
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	605a      	str	r2, [r3, #4]
 800783a:	609a      	str	r2, [r3, #8]
 800783c:	60da      	str	r2, [r3, #12]
 800783e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a19      	ldr	r2, [pc, #100]	; (80078ac <HAL_UART_MspInit+0x84>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d12b      	bne.n	80078a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800784a:	2300      	movs	r3, #0
 800784c:	613b      	str	r3, [r7, #16]
 800784e:	4b18      	ldr	r3, [pc, #96]	; (80078b0 <HAL_UART_MspInit+0x88>)
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	4a17      	ldr	r2, [pc, #92]	; (80078b0 <HAL_UART_MspInit+0x88>)
 8007854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007858:	6413      	str	r3, [r2, #64]	; 0x40
 800785a:	4b15      	ldr	r3, [pc, #84]	; (80078b0 <HAL_UART_MspInit+0x88>)
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007862:	613b      	str	r3, [r7, #16]
 8007864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007866:	2300      	movs	r3, #0
 8007868:	60fb      	str	r3, [r7, #12]
 800786a:	4b11      	ldr	r3, [pc, #68]	; (80078b0 <HAL_UART_MspInit+0x88>)
 800786c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786e:	4a10      	ldr	r2, [pc, #64]	; (80078b0 <HAL_UART_MspInit+0x88>)
 8007870:	f043 0308 	orr.w	r3, r3, #8
 8007874:	6313      	str	r3, [r2, #48]	; 0x30
 8007876:	4b0e      	ldr	r3, [pc, #56]	; (80078b0 <HAL_UART_MspInit+0x88>)
 8007878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787a:	f003 0308 	and.w	r3, r3, #8
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007882:	2360      	movs	r3, #96	; 0x60
 8007884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007886:	2302      	movs	r3, #2
 8007888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800788a:	2300      	movs	r3, #0
 800788c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800788e:	2303      	movs	r3, #3
 8007890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007892:	2307      	movs	r3, #7
 8007894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007896:	f107 0314 	add.w	r3, r7, #20
 800789a:	4619      	mov	r1, r3
 800789c:	4805      	ldr	r0, [pc, #20]	; (80078b4 <HAL_UART_MspInit+0x8c>)
 800789e:	f003 fb8b 	bl	800afb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80078a2:	bf00      	nop
 80078a4:	3728      	adds	r7, #40	; 0x28
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	40004400 	.word	0x40004400
 80078b0:	40023800 	.word	0x40023800
 80078b4:	40020c00 	.word	0x40020c00

080078b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80078bc:	e7fe      	b.n	80078bc <NMI_Handler+0x4>

080078be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80078be:	b480      	push	{r7}
 80078c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80078c2:	e7fe      	b.n	80078c2 <HardFault_Handler+0x4>

080078c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80078c4:	b480      	push	{r7}
 80078c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80078c8:	e7fe      	b.n	80078c8 <MemManage_Handler+0x4>

080078ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80078ca:	b480      	push	{r7}
 80078cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80078ce:	e7fe      	b.n	80078ce <BusFault_Handler+0x4>

080078d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80078d4:	e7fe      	b.n	80078d4 <UsageFault_Handler+0x4>

080078d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80078d6:	b480      	push	{r7}
 80078d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80078da:	bf00      	nop
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80078e4:	b480      	push	{r7}
 80078e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80078e8:	bf00      	nop
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80078f2:	b480      	push	{r7}
 80078f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80078f6:	bf00      	nop
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007904:	f002 fa64 	bl	8009dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007908:	bf00      	nop
 800790a:	bd80      	pop	{r7, pc}

0800790c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007910:	4803      	ldr	r0, [pc, #12]	; (8007920 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8007912:	f007 fd34 	bl	800f37e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007916:	4803      	ldr	r0, [pc, #12]	; (8007924 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007918:	f007 fd31 	bl	800f37e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800791c:	bf00      	nop
 800791e:	bd80      	pop	{r7, pc}
 8007920:	200446d0 	.word	0x200446d0
 8007924:	200448cc 	.word	0x200448cc

08007928 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800792c:	4802      	ldr	r0, [pc, #8]	; (8007938 <SDIO_IRQHandler+0x10>)
 800792e:	f005 fdcd 	bl	800d4cc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8007932:	bf00      	nop
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	20044a2c 	.word	0x20044a2c

0800793c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007940:	4802      	ldr	r0, [pc, #8]	; (800794c <TIM6_DAC_IRQHandler+0x10>)
 8007942:	f007 fd1c 	bl	800f37e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007946:	bf00      	nop
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	200449ac 	.word	0x200449ac

08007950 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007954:	4802      	ldr	r0, [pc, #8]	; (8007960 <TIM7_IRQHandler+0x10>)
 8007956:	f007 fd12 	bl	800f37e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800795a:	bf00      	nop
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20044b50 	.word	0x20044b50

08007964 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007968:	4802      	ldr	r0, [pc, #8]	; (8007974 <DMA2_Stream2_IRQHandler+0x10>)
 800796a:	f003 f8b1 	bl	800aad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800796e:	bf00      	nop
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	20044af0 	.word	0x20044af0

08007978 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800797c:	4802      	ldr	r0, [pc, #8]	; (8007988 <DMA2_Stream3_IRQHandler+0x10>)
 800797e:	f003 f8a7 	bl	800aad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8007982:	bf00      	nop
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	20044618 	.word	0x20044618

0800798c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007990:	4802      	ldr	r0, [pc, #8]	; (800799c <DMA2_Stream6_IRQHandler+0x10>)
 8007992:	f003 f89d 	bl	800aad0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8007996:	bf00      	nop
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	2004494c 	.word	0x2004494c

080079a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80079a8:	4a14      	ldr	r2, [pc, #80]	; (80079fc <_sbrk+0x5c>)
 80079aa:	4b15      	ldr	r3, [pc, #84]	; (8007a00 <_sbrk+0x60>)
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80079b4:	4b13      	ldr	r3, [pc, #76]	; (8007a04 <_sbrk+0x64>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d102      	bne.n	80079c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80079bc:	4b11      	ldr	r3, [pc, #68]	; (8007a04 <_sbrk+0x64>)
 80079be:	4a12      	ldr	r2, [pc, #72]	; (8007a08 <_sbrk+0x68>)
 80079c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80079c2:	4b10      	ldr	r3, [pc, #64]	; (8007a04 <_sbrk+0x64>)
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	4413      	add	r3, r2
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d207      	bcs.n	80079e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80079d0:	f00d ff68 	bl	80158a4 <__errno>
 80079d4:	4602      	mov	r2, r0
 80079d6:	230c      	movs	r3, #12
 80079d8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80079da:	f04f 33ff 	mov.w	r3, #4294967295
 80079de:	e009      	b.n	80079f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80079e0:	4b08      	ldr	r3, [pc, #32]	; (8007a04 <_sbrk+0x64>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80079e6:	4b07      	ldr	r3, [pc, #28]	; (8007a04 <_sbrk+0x64>)
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4413      	add	r3, r2
 80079ee:	4a05      	ldr	r2, [pc, #20]	; (8007a04 <_sbrk+0x64>)
 80079f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80079f2:	68fb      	ldr	r3, [r7, #12]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3718      	adds	r7, #24
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20050000 	.word	0x20050000
 8007a00:	00000800 	.word	0x00000800
 8007a04:	200002bc 	.word	0x200002bc
 8007a08:	20046ca0 	.word	0x20046ca0

08007a0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007a10:	4b08      	ldr	r3, [pc, #32]	; (8007a34 <SystemInit+0x28>)
 8007a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a16:	4a07      	ldr	r2, [pc, #28]	; (8007a34 <SystemInit+0x28>)
 8007a18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007a20:	4b04      	ldr	r3, [pc, #16]	; (8007a34 <SystemInit+0x28>)
 8007a22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a26:	609a      	str	r2, [r3, #8]
#endif
}
 8007a28:	bf00      	nop
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr
 8007a32:	bf00      	nop
 8007a34:	e000ed00 	.word	0xe000ed00

08007a38 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007a38:	b598      	push	{r3, r4, r7, lr}
 8007a3a:	af00      	add	r7, sp, #0
	lcd_init();
 8007a3c:	f7f9 faec 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007a40:	483b      	ldr	r0, [pc, #236]	; (8007b30 <cppInit+0xf8>)
 8007a42:	f7fd fcb3 	bl	80053ac <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8007a46:	2064      	movs	r0, #100	; 0x64
 8007a48:	f002 f9e2 	bl	8009e10 <HAL_Delay>
	power_sensor.updateValues();
 8007a4c:	4838      	ldr	r0, [pc, #224]	; (8007b30 <cppInit+0xf8>)
 8007a4e:	f7fd fcbb 	bl	80053c8 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8007a52:	f7f9 fb25 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8007a56:	2100      	movs	r1, #0
 8007a58:	2000      	movs	r0, #0
 8007a5a:	f7f9 fb31 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007a5e:	4835      	ldr	r0, [pc, #212]	; (8007b34 <cppInit+0xfc>)
 8007a60:	f7f9 fb58 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007a64:	2101      	movs	r1, #1
 8007a66:	2000      	movs	r0, #0
 8007a68:	f7f9 fb2a 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007a6c:	4830      	ldr	r0, [pc, #192]	; (8007b30 <cppInit+0xf8>)
 8007a6e:	f7fd fcd5 	bl	800541c <_ZN11PowerSensor17getButteryVoltageEv>
 8007a72:	ee10 3a10 	vmov	r3, s0
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7f8 fd7e 	bl	8000578 <__aeabi_f2d>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	460c      	mov	r4, r1
 8007a80:	461a      	mov	r2, r3
 8007a82:	4623      	mov	r3, r4
 8007a84:	482c      	ldr	r0, [pc, #176]	; (8007b38 <cppInit+0x100>)
 8007a86:	f7f9 fb45 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8007a8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a8e:	f002 f9bf 	bl	8009e10 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8007a92:	482a      	ldr	r0, [pc, #168]	; (8007b3c <cppInit+0x104>)
 8007a94:	f7fc feac 	bl	80047f0 <_ZN6Logger10sdCardInitEv>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d007      	beq.n	8007aae <cppInit+0x76>
		led.fullColor('G');
 8007a9e:	2147      	movs	r1, #71	; 0x47
 8007aa0:	4827      	ldr	r0, [pc, #156]	; (8007b40 <cppInit+0x108>)
 8007aa2:	f7fa fbd7 	bl	8002254 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007aa6:	2064      	movs	r0, #100	; 0x64
 8007aa8:	f002 f9b2 	bl	8009e10 <HAL_Delay>
 8007aac:	e006      	b.n	8007abc <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007aae:	2152      	movs	r1, #82	; 0x52
 8007ab0:	4823      	ldr	r0, [pc, #140]	; (8007b40 <cppInit+0x108>)
 8007ab2:	f7fa fbcf 	bl	8002254 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007ab6:	2064      	movs	r0, #100	; 0x64
 8007ab8:	f002 f9aa 	bl	8009e10 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007abc:	4821      	ldr	r0, [pc, #132]	; (8007b44 <cppInit+0x10c>)
 8007abe:	f7fa fd25 	bl	800250c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8007ac2:	4821      	ldr	r0, [pc, #132]	; (8007b48 <cppInit+0x110>)
 8007ac4:	f7fd f92a 	bl	8004d1c <_ZN5Motor4initEv>
	encoder.init();
 8007ac8:	4820      	ldr	r0, [pc, #128]	; (8007b4c <cppInit+0x114>)
 8007aca:	f7f9 fcab 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 8007ace:	4820      	ldr	r0, [pc, #128]	; (8007b50 <cppInit+0x118>)
 8007ad0:	f7fa f96e 	bl	8001db0 <_ZN3IMU4initEv>
	line_trace.init();
 8007ad4:	481f      	ldr	r0, [pc, #124]	; (8007b54 <cppInit+0x11c>)
 8007ad6:	f7fb ffcf 	bl	8003a78 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007ada:	481a      	ldr	r0, [pc, #104]	; (8007b44 <cppInit+0x10c>)
 8007adc:	f7fa fe76 	bl	80027cc <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007ae0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ae4:	f002 f994 	bl	8009e10 <HAL_Delay>

	led.fullColor('M');
 8007ae8:	214d      	movs	r1, #77	; 0x4d
 8007aea:	4815      	ldr	r0, [pc, #84]	; (8007b40 <cppInit+0x108>)
 8007aec:	f7fa fbb2 	bl	8002254 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007af0:	4817      	ldr	r0, [pc, #92]	; (8007b50 <cppInit+0x118>)
 8007af2:	f7fa fa37 	bl	8001f64 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s
 8007af6:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007b58 <cppInit+0x120>
 8007afa:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007b5c <cppInit+0x124>
 8007afe:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007b60 <cppInit+0x128>
 8007b02:	4818      	ldr	r0, [pc, #96]	; (8007b64 <cppInit+0x12c>)
 8007b04:	f7fe f9dc 	bl	8005ec0 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8007b08:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007b68 <cppInit+0x130>
 8007b0c:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007b6c <cppInit+0x134>
 8007b10:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007b70 <cppInit+0x138>
 8007b14:	4813      	ldr	r0, [pc, #76]	; (8007b64 <cppInit+0x12c>)
 8007b16:	f7fe f9ec 	bl	8005ef2 <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007b1a:	4816      	ldr	r0, [pc, #88]	; (8007b74 <cppInit+0x13c>)
 8007b1c:	f7fd fb50 	bl	80051c0 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007b20:	4815      	ldr	r0, [pc, #84]	; (8007b78 <cppInit+0x140>)
 8007b22:	f7fd fbe7 	bl	80052f4 <_ZN13PathFollowing4initEv>

	esc.init();
 8007b26:	4815      	ldr	r0, [pc, #84]	; (8007b7c <cppInit+0x144>)
 8007b28:	f7f9 fb60 	bl	80011ec <_ZN3ESC4initEv>

}
 8007b2c:	bf00      	nop
 8007b2e:	bd98      	pop	{r3, r4, r7, pc}
 8007b30:	200005d4 	.word	0x200005d4
 8007b34:	08019edc 	.word	0x08019edc
 8007b38:	08019ee4 	.word	0x08019ee4
 8007b3c:	200005f4 	.word	0x200005f4
 8007b40:	200005d0 	.word	0x200005d0
 8007b44:	200002c0 	.word	0x200002c0
 8007b48:	200005cc 	.word	0x200005cc
 8007b4c:	2001dac0 	.word	0x2001dac0
 8007b50:	200005e0 	.word	0x200005e0
 8007b54:	2001db64 	.word	0x2001db64
 8007b58:	3a8439b6 	.word	0x3a8439b6
 8007b5c:	40d1a29c 	.word	0x40d1a29c
 8007b60:	3f81f8a1 	.word	0x3f81f8a1
 8007b64:	2001dae0 	.word	0x2001dae0
 8007b68:	00000000 	.word	0x00000000
 8007b6c:	3f5e3fbc 	.word	0x3f5e3fbc
 8007b70:	3d75c28f 	.word	0x3d75c28f
 8007b74:	2001db20 	.word	0x2001db20
 8007b78:	2002ab18 	.word	0x2002ab18
 8007b7c:	2001db60 	.word	0x2001db60

08007b80 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007b84:	480e      	ldr	r0, [pc, #56]	; (8007bc0 <cppFlip1ms+0x40>)
 8007b86:	f7fa fd1f 	bl	80025c8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007b8a:	480e      	ldr	r0, [pc, #56]	; (8007bc4 <cppFlip1ms+0x44>)
 8007b8c:	f7fa f938 	bl	8001e00 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007b90:	480d      	ldr	r0, [pc, #52]	; (8007bc8 <cppFlip1ms+0x48>)
 8007b92:	f7f9 fc69 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007b96:	480d      	ldr	r0, [pc, #52]	; (8007bcc <cppFlip1ms+0x4c>)
 8007b98:	f7fc fa14 	bl	8003fc4 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007b9c:	480c      	ldr	r0, [pc, #48]	; (8007bd0 <cppFlip1ms+0x50>)
 8007b9e:	f7fe f9c1 	bl	8005f24 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007ba2:	480c      	ldr	r0, [pc, #48]	; (8007bd4 <cppFlip1ms+0x54>)
 8007ba4:	f7fd faf0 	bl	8005188 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007ba8:	480b      	ldr	r0, [pc, #44]	; (8007bd8 <cppFlip1ms+0x58>)
 8007baa:	f7fd fcb3 	bl	8005514 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007bae:	480b      	ldr	r0, [pc, #44]	; (8007bdc <cppFlip1ms+0x5c>)
 8007bb0:	f7fd f8c6 	bl	8004d40 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007bb4:	4804      	ldr	r0, [pc, #16]	; (8007bc8 <cppFlip1ms+0x48>)
 8007bb6:	f7f9 fd41 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007bba:	bf00      	nop
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	200002c0 	.word	0x200002c0
 8007bc4:	200005e0 	.word	0x200005e0
 8007bc8:	2001dac0 	.word	0x2001dac0
 8007bcc:	2001db64 	.word	0x2001db64
 8007bd0:	2001dae0 	.word	0x2001dae0
 8007bd4:	2001db20 	.word	0x2001db20
 8007bd8:	200005b8 	.word	0x200005b8
 8007bdc:	200005cc 	.word	0x200005cc

08007be0 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007be4:	4802      	ldr	r0, [pc, #8]	; (8007bf0 <cppFlip100ns+0x10>)
 8007be6:	f7fa fca1 	bl	800252c <_ZN10LineSensor17storeSensorValuesEv>
}
 8007bea:	bf00      	nop
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	200002c0 	.word	0x200002c0

08007bf4 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8007bf8:	4b10      	ldr	r3, [pc, #64]	; (8007c3c <cppFlip10ms+0x48>)
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	4b0e      	ldr	r3, [pc, #56]	; (8007c3c <cppFlip10ms+0x48>)
 8007c02:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 17){ //170ms
 8007c04:	4b0d      	ldr	r3, [pc, #52]	; (8007c3c <cppFlip10ms+0x48>)
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	2b10      	cmp	r3, #16
 8007c0a:	d905      	bls.n	8007c18 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007c0c:	480c      	ldr	r0, [pc, #48]	; (8007c40 <cppFlip10ms+0x4c>)
 8007c0e:	f7fd ffa7 	bl	8005b60 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8007c12:	4b0a      	ldr	r3, [pc, #40]	; (8007c3c <cppFlip10ms+0x48>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	801a      	strh	r2, [r3, #0]
	}

	logger.storeLogInt(motor.getLeftCounterPeriod());
 8007c18:	480a      	ldr	r0, [pc, #40]	; (8007c44 <cppFlip10ms+0x50>)
 8007c1a:	f7fd f953 	bl	8004ec4 <_ZN5Motor20getLeftCounterPeriodEv>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	4619      	mov	r1, r3
 8007c22:	4809      	ldr	r0, [pc, #36]	; (8007c48 <cppFlip10ms+0x54>)
 8007c24:	f7fc fe2c 	bl	8004880 <_ZN6Logger11storeLogIntEs>
	logger.storeLog2Int(motor.getRightCounterPeriod());
 8007c28:	4806      	ldr	r0, [pc, #24]	; (8007c44 <cppFlip10ms+0x50>)
 8007c2a:	f7fd f958 	bl	8004ede <_ZN5Motor21getRightCounterPeriodEv>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	4619      	mov	r1, r3
 8007c32:	4805      	ldr	r0, [pc, #20]	; (8007c48 <cppFlip10ms+0x54>)
 8007c34:	f7fc fe5d 	bl	80048f2 <_ZN6Logger12storeLog2IntEs>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007c38:	bf00      	nop
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20042240 	.word	0x20042240
 8007c40:	2002a90c 	.word	0x2002a90c
 8007c44:	200005cc 	.word	0x200005cc
 8007c48:	200005f4 	.word	0x200005f4
 8007c4c:	00000000 	.word	0x00000000

08007c50 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007c56:	4baf      	ldr	r3, [pc, #700]	; (8007f14 <cppLoop+0x2c4>)
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	f3bf 8f5b 	dmb	ish
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	bf0c      	ite	eq
 8007c68:	2301      	moveq	r3, #1
 8007c6a:	2300      	movne	r3, #0
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d015      	beq.n	8007c9e <cppLoop+0x4e>
 8007c72:	48a8      	ldr	r0, [pc, #672]	; (8007f14 <cppLoop+0x2c4>)
 8007c74:	f00c fdb1 	bl	80147da <__cxa_guard_acquire>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	bf14      	ite	ne
 8007c7e:	2301      	movne	r3, #1
 8007c80:	2300      	moveq	r3, #0
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00a      	beq.n	8007c9e <cppLoop+0x4e>
 8007c88:	48a3      	ldr	r0, [pc, #652]	; (8007f18 <cppLoop+0x2c8>)
 8007c8a:	f7fb fffc 	bl	8003c86 <_ZN9LineTrace5getKpEv>
 8007c8e:	eef0 7a40 	vmov.f32	s15, s0
 8007c92:	4ba2      	ldr	r3, [pc, #648]	; (8007f1c <cppLoop+0x2cc>)
 8007c94:	edc3 7a00 	vstr	s15, [r3]
 8007c98:	489e      	ldr	r0, [pc, #632]	; (8007f14 <cppLoop+0x2c4>)
 8007c9a:	f00c fdaa 	bl	80147f2 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007c9e:	4ba0      	ldr	r3, [pc, #640]	; (8007f20 <cppLoop+0x2d0>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	f3bf 8f5b 	dmb	ish
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	bf0c      	ite	eq
 8007cb0:	2301      	moveq	r3, #1
 8007cb2:	2300      	movne	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d015      	beq.n	8007ce6 <cppLoop+0x96>
 8007cba:	4899      	ldr	r0, [pc, #612]	; (8007f20 <cppLoop+0x2d0>)
 8007cbc:	f00c fd8d 	bl	80147da <__cxa_guard_acquire>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	bf14      	ite	ne
 8007cc6:	2301      	movne	r3, #1
 8007cc8:	2300      	moveq	r3, #0
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00a      	beq.n	8007ce6 <cppLoop+0x96>
 8007cd0:	4891      	ldr	r0, [pc, #580]	; (8007f18 <cppLoop+0x2c8>)
 8007cd2:	f7fb ffe7 	bl	8003ca4 <_ZN9LineTrace5getKiEv>
 8007cd6:	eef0 7a40 	vmov.f32	s15, s0
 8007cda:	4b92      	ldr	r3, [pc, #584]	; (8007f24 <cppLoop+0x2d4>)
 8007cdc:	edc3 7a00 	vstr	s15, [r3]
 8007ce0:	488f      	ldr	r0, [pc, #572]	; (8007f20 <cppLoop+0x2d0>)
 8007ce2:	f00c fd86 	bl	80147f2 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007ce6:	4b90      	ldr	r3, [pc, #576]	; (8007f28 <cppLoop+0x2d8>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	f3bf 8f5b 	dmb	ish
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	bf0c      	ite	eq
 8007cf8:	2301      	moveq	r3, #1
 8007cfa:	2300      	movne	r3, #0
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d015      	beq.n	8007d2e <cppLoop+0xde>
 8007d02:	4889      	ldr	r0, [pc, #548]	; (8007f28 <cppLoop+0x2d8>)
 8007d04:	f00c fd69 	bl	80147da <__cxa_guard_acquire>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	bf14      	ite	ne
 8007d0e:	2301      	movne	r3, #1
 8007d10:	2300      	moveq	r3, #0
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d00a      	beq.n	8007d2e <cppLoop+0xde>
 8007d18:	487f      	ldr	r0, [pc, #508]	; (8007f18 <cppLoop+0x2c8>)
 8007d1a:	f7fb ffd2 	bl	8003cc2 <_ZN9LineTrace5getKdEv>
 8007d1e:	eef0 7a40 	vmov.f32	s15, s0
 8007d22:	4b82      	ldr	r3, [pc, #520]	; (8007f2c <cppLoop+0x2dc>)
 8007d24:	edc3 7a00 	vstr	s15, [r3]
 8007d28:	487f      	ldr	r0, [pc, #508]	; (8007f28 <cppLoop+0x2d8>)
 8007d2a:	f00c fd62 	bl	80147f2 <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007d2e:	4b80      	ldr	r3, [pc, #512]	; (8007f30 <cppLoop+0x2e0>)
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	f3bf 8f5b 	dmb	ish
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	bf0c      	ite	eq
 8007d40:	2301      	moveq	r3, #1
 8007d42:	2300      	movne	r3, #0
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d015      	beq.n	8007d76 <cppLoop+0x126>
 8007d4a:	4879      	ldr	r0, [pc, #484]	; (8007f30 <cppLoop+0x2e0>)
 8007d4c:	f00c fd45 	bl	80147da <__cxa_guard_acquire>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	bf14      	ite	ne
 8007d56:	2301      	movne	r3, #1
 8007d58:	2300      	moveq	r3, #0
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00a      	beq.n	8007d76 <cppLoop+0x126>
 8007d60:	486d      	ldr	r0, [pc, #436]	; (8007f18 <cppLoop+0x2c8>)
 8007d62:	f7fb ffd6 	bl	8003d12 <_ZN9LineTrace9getKpSlowEv>
 8007d66:	eef0 7a40 	vmov.f32	s15, s0
 8007d6a:	4b72      	ldr	r3, [pc, #456]	; (8007f34 <cppLoop+0x2e4>)
 8007d6c:	edc3 7a00 	vstr	s15, [r3]
 8007d70:	486f      	ldr	r0, [pc, #444]	; (8007f30 <cppLoop+0x2e0>)
 8007d72:	f00c fd3e 	bl	80147f2 <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007d76:	4b70      	ldr	r3, [pc, #448]	; (8007f38 <cppLoop+0x2e8>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	f3bf 8f5b 	dmb	ish
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	f003 0301 	and.w	r3, r3, #1
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	bf0c      	ite	eq
 8007d88:	2301      	moveq	r3, #1
 8007d8a:	2300      	movne	r3, #0
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d015      	beq.n	8007dbe <cppLoop+0x16e>
 8007d92:	4869      	ldr	r0, [pc, #420]	; (8007f38 <cppLoop+0x2e8>)
 8007d94:	f00c fd21 	bl	80147da <__cxa_guard_acquire>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	bf14      	ite	ne
 8007d9e:	2301      	movne	r3, #1
 8007da0:	2300      	moveq	r3, #0
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00a      	beq.n	8007dbe <cppLoop+0x16e>
 8007da8:	485b      	ldr	r0, [pc, #364]	; (8007f18 <cppLoop+0x2c8>)
 8007daa:	f7fb ffc1 	bl	8003d30 <_ZN9LineTrace9getKiSlowEv>
 8007dae:	eef0 7a40 	vmov.f32	s15, s0
 8007db2:	4b62      	ldr	r3, [pc, #392]	; (8007f3c <cppLoop+0x2ec>)
 8007db4:	edc3 7a00 	vstr	s15, [r3]
 8007db8:	485f      	ldr	r0, [pc, #380]	; (8007f38 <cppLoop+0x2e8>)
 8007dba:	f00c fd1a 	bl	80147f2 <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007dbe:	4b60      	ldr	r3, [pc, #384]	; (8007f40 <cppLoop+0x2f0>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	f3bf 8f5b 	dmb	ish
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	bf0c      	ite	eq
 8007dd0:	2301      	moveq	r3, #1
 8007dd2:	2300      	movne	r3, #0
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d015      	beq.n	8007e06 <cppLoop+0x1b6>
 8007dda:	4859      	ldr	r0, [pc, #356]	; (8007f40 <cppLoop+0x2f0>)
 8007ddc:	f00c fcfd 	bl	80147da <__cxa_guard_acquire>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	bf14      	ite	ne
 8007de6:	2301      	movne	r3, #1
 8007de8:	2300      	moveq	r3, #0
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00a      	beq.n	8007e06 <cppLoop+0x1b6>
 8007df0:	4849      	ldr	r0, [pc, #292]	; (8007f18 <cppLoop+0x2c8>)
 8007df2:	f7fb ffac 	bl	8003d4e <_ZN9LineTrace9getKdSlowEv>
 8007df6:	eef0 7a40 	vmov.f32	s15, s0
 8007dfa:	4b52      	ldr	r3, [pc, #328]	; (8007f44 <cppLoop+0x2f4>)
 8007dfc:	edc3 7a00 	vstr	s15, [r3]
 8007e00:	484f      	ldr	r0, [pc, #316]	; (8007f40 <cppLoop+0x2f0>)
 8007e02:	f00c fcf6 	bl	80147f2 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007e06:	4b50      	ldr	r3, [pc, #320]	; (8007f48 <cppLoop+0x2f8>)
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	f3bf 8f5b 	dmb	ish
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	bf0c      	ite	eq
 8007e18:	2301      	moveq	r3, #1
 8007e1a:	2300      	movne	r3, #0
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d015      	beq.n	8007e4e <cppLoop+0x1fe>
 8007e22:	4849      	ldr	r0, [pc, #292]	; (8007f48 <cppLoop+0x2f8>)
 8007e24:	f00c fcd9 	bl	80147da <__cxa_guard_acquire>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	bf14      	ite	ne
 8007e2e:	2301      	movne	r3, #1
 8007e30:	2300      	moveq	r3, #0
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00a      	beq.n	8007e4e <cppLoop+0x1fe>
 8007e38:	4837      	ldr	r0, [pc, #220]	; (8007f18 <cppLoop+0x2c8>)
 8007e3a:	f7fb fff6 	bl	8003e2a <_ZN9LineTrace17getTargetVelocityEv>
 8007e3e:	eef0 7a40 	vmov.f32	s15, s0
 8007e42:	4b42      	ldr	r3, [pc, #264]	; (8007f4c <cppLoop+0x2fc>)
 8007e44:	edc3 7a00 	vstr	s15, [r3]
 8007e48:	483f      	ldr	r0, [pc, #252]	; (8007f48 <cppLoop+0x2f8>)
 8007e4a:	f00c fcd2 	bl	80147f2 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007e4e:	4b40      	ldr	r3, [pc, #256]	; (8007f50 <cppLoop+0x300>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	f3bf 8f5b 	dmb	ish
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	bf0c      	ite	eq
 8007e60:	2301      	moveq	r3, #1
 8007e62:	2300      	movne	r3, #0
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d015      	beq.n	8007e96 <cppLoop+0x246>
 8007e6a:	4839      	ldr	r0, [pc, #228]	; (8007f50 <cppLoop+0x300>)
 8007e6c:	f00c fcb5 	bl	80147da <__cxa_guard_acquire>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	bf14      	ite	ne
 8007e76:	2301      	movne	r3, #1
 8007e78:	2300      	moveq	r3, #0
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00a      	beq.n	8007e96 <cppLoop+0x246>
 8007e80:	4825      	ldr	r0, [pc, #148]	; (8007f18 <cppLoop+0x2c8>)
 8007e82:	f7fb ffe2 	bl	8003e4a <_ZN9LineTrace14getMaxVelocityEv>
 8007e86:	eef0 7a40 	vmov.f32	s15, s0
 8007e8a:	4b32      	ldr	r3, [pc, #200]	; (8007f54 <cppLoop+0x304>)
 8007e8c:	edc3 7a00 	vstr	s15, [r3]
 8007e90:	482f      	ldr	r0, [pc, #188]	; (8007f50 <cppLoop+0x300>)
 8007e92:	f00c fcae 	bl	80147f2 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007e96:	4b30      	ldr	r3, [pc, #192]	; (8007f58 <cppLoop+0x308>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	f3bf 8f5b 	dmb	ish
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2301      	moveq	r3, #1
 8007eaa:	2300      	movne	r3, #0
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d015      	beq.n	8007ede <cppLoop+0x28e>
 8007eb2:	4829      	ldr	r0, [pc, #164]	; (8007f58 <cppLoop+0x308>)
 8007eb4:	f00c fc91 	bl	80147da <__cxa_guard_acquire>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	bf14      	ite	ne
 8007ebe:	2301      	movne	r3, #1
 8007ec0:	2300      	moveq	r3, #0
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00a      	beq.n	8007ede <cppLoop+0x28e>
 8007ec8:	4813      	ldr	r0, [pc, #76]	; (8007f18 <cppLoop+0x2c8>)
 8007eca:	f7fb ffce 	bl	8003e6a <_ZN9LineTrace15getMaxVelocity2Ev>
 8007ece:	eef0 7a40 	vmov.f32	s15, s0
 8007ed2:	4b22      	ldr	r3, [pc, #136]	; (8007f5c <cppLoop+0x30c>)
 8007ed4:	edc3 7a00 	vstr	s15, [r3]
 8007ed8:	481f      	ldr	r0, [pc, #124]	; (8007f58 <cppLoop+0x308>)
 8007eda:	f00c fc8a 	bl	80147f2 <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007ede:	4b20      	ldr	r3, [pc, #128]	; (8007f60 <cppLoop+0x310>)
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	f3bf 8f5b 	dmb	ish
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	bf0c      	ite	eq
 8007ef0:	2301      	moveq	r3, #1
 8007ef2:	2300      	movne	r3, #0
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d03f      	beq.n	8007f7a <cppLoop+0x32a>
 8007efa:	4819      	ldr	r0, [pc, #100]	; (8007f60 <cppLoop+0x310>)
 8007efc:	f00c fc6d 	bl	80147da <__cxa_guard_acquire>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	bf14      	ite	ne
 8007f06:	2301      	movne	r3, #1
 8007f08:	2300      	moveq	r3, #0
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d034      	beq.n	8007f7a <cppLoop+0x32a>
 8007f10:	e028      	b.n	8007f64 <cppLoop+0x314>
 8007f12:	bf00      	nop
 8007f14:	20042250 	.word	0x20042250
 8007f18:	2001db64 	.word	0x2001db64
 8007f1c:	2004224c 	.word	0x2004224c
 8007f20:	20042258 	.word	0x20042258
 8007f24:	20042254 	.word	0x20042254
 8007f28:	20042260 	.word	0x20042260
 8007f2c:	2004225c 	.word	0x2004225c
 8007f30:	20042268 	.word	0x20042268
 8007f34:	20042264 	.word	0x20042264
 8007f38:	20042270 	.word	0x20042270
 8007f3c:	2004226c 	.word	0x2004226c
 8007f40:	20042278 	.word	0x20042278
 8007f44:	20042274 	.word	0x20042274
 8007f48:	20042280 	.word	0x20042280
 8007f4c:	2004227c 	.word	0x2004227c
 8007f50:	20042288 	.word	0x20042288
 8007f54:	20042284 	.word	0x20042284
 8007f58:	20042290 	.word	0x20042290
 8007f5c:	2004228c 	.word	0x2004228c
 8007f60:	20042298 	.word	0x20042298
 8007f64:	48b6      	ldr	r0, [pc, #728]	; (8008240 <cppLoop+0x5f0>)
 8007f66:	f7fb ff90 	bl	8003e8a <_ZN9LineTrace14getMinVelocityEv>
 8007f6a:	eef0 7a40 	vmov.f32	s15, s0
 8007f6e:	4bb5      	ldr	r3, [pc, #724]	; (8008244 <cppLoop+0x5f4>)
 8007f70:	edc3 7a00 	vstr	s15, [r3]
 8007f74:	48b4      	ldr	r0, [pc, #720]	; (8008248 <cppLoop+0x5f8>)
 8007f76:	f00c fc3c 	bl	80147f2 <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007f7a:	4bb4      	ldr	r3, [pc, #720]	; (800824c <cppLoop+0x5fc>)
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	f3bf 8f5b 	dmb	ish
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f003 0301 	and.w	r3, r3, #1
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bf0c      	ite	eq
 8007f8c:	2301      	moveq	r3, #1
 8007f8e:	2300      	movne	r3, #0
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d015      	beq.n	8007fc2 <cppLoop+0x372>
 8007f96:	48ad      	ldr	r0, [pc, #692]	; (800824c <cppLoop+0x5fc>)
 8007f98:	f00c fc1f 	bl	80147da <__cxa_guard_acquire>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	bf14      	ite	ne
 8007fa2:	2301      	movne	r3, #1
 8007fa4:	2300      	moveq	r3, #0
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00a      	beq.n	8007fc2 <cppLoop+0x372>
 8007fac:	48a4      	ldr	r0, [pc, #656]	; (8008240 <cppLoop+0x5f0>)
 8007fae:	f7fb ff7c 	bl	8003eaa <_ZN9LineTrace15getMinVelocity2Ev>
 8007fb2:	eef0 7a40 	vmov.f32	s15, s0
 8007fb6:	4ba6      	ldr	r3, [pc, #664]	; (8008250 <cppLoop+0x600>)
 8007fb8:	edc3 7a00 	vstr	s15, [r3]
 8007fbc:	48a3      	ldr	r0, [pc, #652]	; (800824c <cppLoop+0x5fc>)
 8007fbe:	f00c fc18 	bl	80147f2 <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007fc2:	4ba4      	ldr	r3, [pc, #656]	; (8008254 <cppLoop+0x604>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	f3bf 8f5b 	dmb	ish
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	f003 0301 	and.w	r3, r3, #1
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	bf0c      	ite	eq
 8007fd4:	2301      	moveq	r3, #1
 8007fd6:	2300      	movne	r3, #0
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d015      	beq.n	800800a <cppLoop+0x3ba>
 8007fde:	489d      	ldr	r0, [pc, #628]	; (8008254 <cppLoop+0x604>)
 8007fe0:	f00c fbfb 	bl	80147da <__cxa_guard_acquire>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	bf14      	ite	ne
 8007fea:	2301      	movne	r3, #1
 8007fec:	2300      	moveq	r3, #0
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00a      	beq.n	800800a <cppLoop+0x3ba>
 8007ff4:	4892      	ldr	r0, [pc, #584]	; (8008240 <cppLoop+0x5f0>)
 8007ff6:	f7fb ff9c 	bl	8003f32 <_ZN9LineTrace9getMaxAccEv>
 8007ffa:	eef0 7a40 	vmov.f32	s15, s0
 8007ffe:	4b96      	ldr	r3, [pc, #600]	; (8008258 <cppLoop+0x608>)
 8008000:	edc3 7a00 	vstr	s15, [r3]
 8008004:	4893      	ldr	r0, [pc, #588]	; (8008254 <cppLoop+0x604>)
 8008006:	f00c fbf4 	bl	80147f2 <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 800800a:	4b94      	ldr	r3, [pc, #592]	; (800825c <cppLoop+0x60c>)
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	f3bf 8f5b 	dmb	ish
 8008012:	b2db      	uxtb	r3, r3
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	bf0c      	ite	eq
 800801c:	2301      	moveq	r3, #1
 800801e:	2300      	movne	r3, #0
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d015      	beq.n	8008052 <cppLoop+0x402>
 8008026:	488d      	ldr	r0, [pc, #564]	; (800825c <cppLoop+0x60c>)
 8008028:	f00c fbd7 	bl	80147da <__cxa_guard_acquire>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	bf14      	ite	ne
 8008032:	2301      	movne	r3, #1
 8008034:	2300      	moveq	r3, #0
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00a      	beq.n	8008052 <cppLoop+0x402>
 800803c:	4880      	ldr	r0, [pc, #512]	; (8008240 <cppLoop+0x5f0>)
 800803e:	f7fb ffae 	bl	8003f9e <_ZN9LineTrace9getMaxDecEv>
 8008042:	eef0 7a40 	vmov.f32	s15, s0
 8008046:	4b86      	ldr	r3, [pc, #536]	; (8008260 <cppLoop+0x610>)
 8008048:	edc3 7a00 	vstr	s15, [r3]
 800804c:	4883      	ldr	r0, [pc, #524]	; (800825c <cppLoop+0x60c>)
 800804e:	f00c fbd0 	bl	80147f2 <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8008052:	4b84      	ldr	r3, [pc, #528]	; (8008264 <cppLoop+0x614>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	f3bf 8f5b 	dmb	ish
 800805a:	b2db      	uxtb	r3, r3
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	bf0c      	ite	eq
 8008064:	2301      	moveq	r3, #1
 8008066:	2300      	movne	r3, #0
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d015      	beq.n	800809a <cppLoop+0x44a>
 800806e:	487d      	ldr	r0, [pc, #500]	; (8008264 <cppLoop+0x614>)
 8008070:	f00c fbb3 	bl	80147da <__cxa_guard_acquire>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	bf14      	ite	ne
 800807a:	2301      	movne	r3, #1
 800807c:	2300      	moveq	r3, #0
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00a      	beq.n	800809a <cppLoop+0x44a>
 8008084:	486e      	ldr	r0, [pc, #440]	; (8008240 <cppLoop+0x5f0>)
 8008086:	f7fb ff78 	bl	8003f7a <_ZN9LineTrace10getMaxAcc2Ev>
 800808a:	eef0 7a40 	vmov.f32	s15, s0
 800808e:	4b76      	ldr	r3, [pc, #472]	; (8008268 <cppLoop+0x618>)
 8008090:	edc3 7a00 	vstr	s15, [r3]
 8008094:	4873      	ldr	r0, [pc, #460]	; (8008264 <cppLoop+0x614>)
 8008096:	f00c fbac 	bl	80147f2 <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 800809a:	4b74      	ldr	r3, [pc, #464]	; (800826c <cppLoop+0x61c>)
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	f3bf 8f5b 	dmb	ish
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	f003 0301 	and.w	r3, r3, #1
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	bf0c      	ite	eq
 80080ac:	2301      	moveq	r3, #1
 80080ae:	2300      	movne	r3, #0
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d015      	beq.n	80080e2 <cppLoop+0x492>
 80080b6:	486d      	ldr	r0, [pc, #436]	; (800826c <cppLoop+0x61c>)
 80080b8:	f00c fb8f 	bl	80147da <__cxa_guard_acquire>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	bf14      	ite	ne
 80080c2:	2301      	movne	r3, #1
 80080c4:	2300      	moveq	r3, #0
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00a      	beq.n	80080e2 <cppLoop+0x492>
 80080cc:	485c      	ldr	r0, [pc, #368]	; (8008240 <cppLoop+0x5f0>)
 80080ce:	f7fb ff42 	bl	8003f56 <_ZN9LineTrace10getMaxDec2Ev>
 80080d2:	eef0 7a40 	vmov.f32	s15, s0
 80080d6:	4b66      	ldr	r3, [pc, #408]	; (8008270 <cppLoop+0x620>)
 80080d8:	edc3 7a00 	vstr	s15, [r3]
 80080dc:	4863      	ldr	r0, [pc, #396]	; (800826c <cppLoop+0x61c>)
 80080de:	f00c fb88 	bl	80147f2 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 80080e2:	4864      	ldr	r0, [pc, #400]	; (8008274 <cppLoop+0x624>)
 80080e4:	f7fd f9aa 	bl	800543c <_ZN12RotarySwitch8getValueEv>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b0f      	cmp	r3, #15
 80080ec:	f201 8546 	bhi.w	8009b7c <cppLoop+0x1f2c>
 80080f0:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <cppLoop+0x4a8>)
 80080f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f6:	bf00      	nop
 80080f8:	08008139 	.word	0x08008139
 80080fc:	080084bd 	.word	0x080084bd
 8008100:	080085d9 	.word	0x080085d9
 8008104:	0800872b 	.word	0x0800872b
 8008108:	08008805 	.word	0x08008805
 800810c:	08008a95 	.word	0x08008a95
 8008110:	08008bd1 	.word	0x08008bd1
 8008114:	08008e55 	.word	0x08008e55
 8008118:	0800909f 	.word	0x0800909f
 800811c:	0800932f 	.word	0x0800932f
 8008120:	080093eb 	.word	0x080093eb
 8008124:	080094e1 	.word	0x080094e1
 8008128:	08009567 	.word	0x08009567
 800812c:	0800962d 	.word	0x0800962d
 8008130:	080096f3 	.word	0x080096f3
 8008134:	0800980d 	.word	0x0800980d
	case 0:
		led.fullColor('W');
 8008138:	2157      	movs	r1, #87	; 0x57
 800813a:	484f      	ldr	r0, [pc, #316]	; (8008278 <cppLoop+0x628>)
 800813c:	f7fa f88a 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008140:	f7f8 ffae 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008144:	2100      	movs	r1, #0
 8008146:	2000      	movs	r0, #0
 8008148:	f7f8 ffba 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*1000));
 800814c:	483c      	ldr	r0, [pc, #240]	; (8008240 <cppLoop+0x5f0>)
 800814e:	f7fb fde0 	bl	8003d12 <_ZN9LineTrace9getKpSlowEv>
 8008152:	eeb0 7a40 	vmov.f32	s14, s0
 8008156:	eddf 7a49 	vldr	s15, [pc, #292]	; 800827c <cppLoop+0x62c>
 800815a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800815e:	eeb0 0a67 	vmov.f32	s0, s15
 8008162:	f7fa fca3 	bl	8002aac <_ZSt3absf>
 8008166:	ee10 3a10 	vmov	r3, s0
 800816a:	4618      	mov	r0, r3
 800816c:	f7f8 fa04 	bl	8000578 <__aeabi_f2d>
 8008170:	4603      	mov	r3, r0
 8008172:	460c      	mov	r4, r1
 8008174:	461a      	mov	r2, r3
 8008176:	4623      	mov	r3, r4
 8008178:	4841      	ldr	r0, [pc, #260]	; (8008280 <cppLoop+0x630>)
 800817a:	f7f8 ffcb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800817e:	2101      	movs	r1, #1
 8008180:	2000      	movs	r0, #0
 8008182:	f7f8 ff9d 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*100), abs(line_trace.getKdSlow()*10000));
 8008186:	482e      	ldr	r0, [pc, #184]	; (8008240 <cppLoop+0x5f0>)
 8008188:	f7fb fdd2 	bl	8003d30 <_ZN9LineTrace9getKiSlowEv>
 800818c:	eeb0 7a40 	vmov.f32	s14, s0
 8008190:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8008284 <cppLoop+0x634>
 8008194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008198:	eeb0 0a67 	vmov.f32	s0, s15
 800819c:	f7fa fc86 	bl	8002aac <_ZSt3absf>
 80081a0:	ee10 3a10 	vmov	r3, s0
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7f8 f9e7 	bl	8000578 <__aeabi_f2d>
 80081aa:	4605      	mov	r5, r0
 80081ac:	460e      	mov	r6, r1
 80081ae:	4824      	ldr	r0, [pc, #144]	; (8008240 <cppLoop+0x5f0>)
 80081b0:	f7fb fdcd 	bl	8003d4e <_ZN9LineTrace9getKdSlowEv>
 80081b4:	eeb0 7a40 	vmov.f32	s14, s0
 80081b8:	eddf 7a33 	vldr	s15, [pc, #204]	; 8008288 <cppLoop+0x638>
 80081bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081c0:	eeb0 0a67 	vmov.f32	s0, s15
 80081c4:	f7fa fc72 	bl	8002aac <_ZSt3absf>
 80081c8:	ee10 3a10 	vmov	r3, s0
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7f8 f9d3 	bl	8000578 <__aeabi_f2d>
 80081d2:	4603      	mov	r3, r0
 80081d4:	460c      	mov	r4, r1
 80081d6:	e9cd 3400 	strd	r3, r4, [sp]
 80081da:	462a      	mov	r2, r5
 80081dc:	4633      	mov	r3, r6
 80081de:	482b      	ldr	r0, [pc, #172]	; (800828c <cppLoop+0x63c>)
 80081e0:	f7f8 ff98 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80081e4:	482a      	ldr	r0, [pc, #168]	; (8008290 <cppLoop+0x640>)
 80081e6:	f7f9 ffd1 	bl	800218c <_ZN8JoyStick8getValueEv>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b08      	cmp	r3, #8
 80081ee:	bf0c      	ite	eq
 80081f0:	2301      	moveq	r3, #1
 80081f2:	2300      	movne	r3, #0
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d04e      	beq.n	8008298 <cppLoop+0x648>
			led.LR(-1, 1);
 80081fa:	2201      	movs	r2, #1
 80081fc:	f04f 31ff 	mov.w	r1, #4294967295
 8008200:	481d      	ldr	r0, [pc, #116]	; (8008278 <cppLoop+0x628>)
 8008202:	f7fa f8e3 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008206:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800820a:	f001 fe01 	bl	8009e10 <HAL_Delay>

			selector++;
 800820e:	4b21      	ldr	r3, [pc, #132]	; (8008294 <cppLoop+0x644>)
 8008210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008214:	b29b      	uxth	r3, r3
 8008216:	3301      	adds	r3, #1
 8008218:	b29b      	uxth	r3, r3
 800821a:	b21a      	sxth	r2, r3
 800821c:	4b1d      	ldr	r3, [pc, #116]	; (8008294 <cppLoop+0x644>)
 800821e:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8008220:	4b1c      	ldr	r3, [pc, #112]	; (8008294 <cppLoop+0x644>)
 8008222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008226:	2b02      	cmp	r3, #2
 8008228:	dd02      	ble.n	8008230 <cppLoop+0x5e0>
 800822a:	4b1a      	ldr	r3, [pc, #104]	; (8008294 <cppLoop+0x644>)
 800822c:	2200      	movs	r2, #0
 800822e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008230:	2200      	movs	r2, #0
 8008232:	f04f 31ff 	mov.w	r1, #4294967295
 8008236:	4810      	ldr	r0, [pc, #64]	; (8008278 <cppLoop+0x628>)
 8008238:	f7fa f8c8 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 800823c:	f001 bca0 	b.w	8009b80 <cppLoop+0x1f30>
 8008240:	2001db64 	.word	0x2001db64
 8008244:	20042294 	.word	0x20042294
 8008248:	20042298 	.word	0x20042298
 800824c:	200422a0 	.word	0x200422a0
 8008250:	2004229c 	.word	0x2004229c
 8008254:	200422a8 	.word	0x200422a8
 8008258:	200422a4 	.word	0x200422a4
 800825c:	200422b0 	.word	0x200422b0
 8008260:	200422ac 	.word	0x200422ac
 8008264:	200422b8 	.word	0x200422b8
 8008268:	200422b4 	.word	0x200422b4
 800826c:	200422c0 	.word	0x200422c0
 8008270:	200422bc 	.word	0x200422bc
 8008274:	200005c8 	.word	0x200005c8
 8008278:	200005d0 	.word	0x200005d0
 800827c:	447a0000 	.word	0x447a0000
 8008280:	08019ee8 	.word	0x08019ee8
 8008284:	42c80000 	.word	0x42c80000
 8008288:	461c4000 	.word	0x461c4000
 800828c:	08019ef4 	.word	0x08019ef4
 8008290:	200005c4 	.word	0x200005c4
 8008294:	20042242 	.word	0x20042242
		else if(joy_stick.getValue() == JOY_R){
 8008298:	48bd      	ldr	r0, [pc, #756]	; (8008590 <cppLoop+0x940>)
 800829a:	f7f9 ff77 	bl	800218c <_ZN8JoyStick8getValueEv>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b10      	cmp	r3, #16
 80082a2:	bf0c      	ite	eq
 80082a4:	2301      	moveq	r3, #1
 80082a6:	2300      	movne	r3, #0
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d059      	beq.n	8008362 <cppLoop+0x712>
			led.LR(-1, 1);
 80082ae:	2201      	movs	r2, #1
 80082b0:	f04f 31ff 	mov.w	r1, #4294967295
 80082b4:	48b7      	ldr	r0, [pc, #732]	; (8008594 <cppLoop+0x944>)
 80082b6:	f7fa f889 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80082ba:	2064      	movs	r0, #100	; 0x64
 80082bc:	f001 fda8 	bl	8009e10 <HAL_Delay>
			if(selector == 0){
 80082c0:	4bb5      	ldr	r3, [pc, #724]	; (8008598 <cppLoop+0x948>)
 80082c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d113      	bne.n	80082f2 <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.00001;
 80082ca:	4bb4      	ldr	r3, [pc, #720]	; (800859c <cppLoop+0x94c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7f8 f952 	bl	8000578 <__aeabi_f2d>
 80082d4:	a3a8      	add	r3, pc, #672	; (adr r3, 8008578 <cppLoop+0x928>)
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	f7f7 ffef 	bl	80002bc <__adddf3>
 80082de:	4603      	mov	r3, r0
 80082e0:	460c      	mov	r4, r1
 80082e2:	4618      	mov	r0, r3
 80082e4:	4621      	mov	r1, r4
 80082e6:	f7f8 fc97 	bl	8000c18 <__aeabi_d2f>
 80082ea:	4602      	mov	r2, r0
 80082ec:	4bab      	ldr	r3, [pc, #684]	; (800859c <cppLoop+0x94c>)
 80082ee:	601a      	str	r2, [r3, #0]
 80082f0:	e02b      	b.n	800834a <cppLoop+0x6fa>
			else if(selector == 1){
 80082f2:	4ba9      	ldr	r3, [pc, #676]	; (8008598 <cppLoop+0x948>)
 80082f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d113      	bne.n	8008324 <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.0001;
 80082fc:	4ba8      	ldr	r3, [pc, #672]	; (80085a0 <cppLoop+0x950>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4618      	mov	r0, r3
 8008302:	f7f8 f939 	bl	8000578 <__aeabi_f2d>
 8008306:	a39e      	add	r3, pc, #632	; (adr r3, 8008580 <cppLoop+0x930>)
 8008308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830c:	f7f7 ffd6 	bl	80002bc <__adddf3>
 8008310:	4603      	mov	r3, r0
 8008312:	460c      	mov	r4, r1
 8008314:	4618      	mov	r0, r3
 8008316:	4621      	mov	r1, r4
 8008318:	f7f8 fc7e 	bl	8000c18 <__aeabi_d2f>
 800831c:	4602      	mov	r2, r0
 800831e:	4ba0      	ldr	r3, [pc, #640]	; (80085a0 <cppLoop+0x950>)
 8008320:	601a      	str	r2, [r3, #0]
 8008322:	e012      	b.n	800834a <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.000001;
 8008324:	4b9f      	ldr	r3, [pc, #636]	; (80085a4 <cppLoop+0x954>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4618      	mov	r0, r3
 800832a:	f7f8 f925 	bl	8000578 <__aeabi_f2d>
 800832e:	a396      	add	r3, pc, #600	; (adr r3, 8008588 <cppLoop+0x938>)
 8008330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008334:	f7f7 ffc2 	bl	80002bc <__adddf3>
 8008338:	4603      	mov	r3, r0
 800833a:	460c      	mov	r4, r1
 800833c:	4618      	mov	r0, r3
 800833e:	4621      	mov	r1, r4
 8008340:	f7f8 fc6a 	bl	8000c18 <__aeabi_d2f>
 8008344:	4602      	mov	r2, r0
 8008346:	4b97      	ldr	r3, [pc, #604]	; (80085a4 <cppLoop+0x954>)
 8008348:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800834a:	2152      	movs	r1, #82	; 0x52
 800834c:	4891      	ldr	r0, [pc, #580]	; (8008594 <cppLoop+0x944>)
 800834e:	f7f9 ff81 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008352:	2200      	movs	r2, #0
 8008354:	f04f 31ff 	mov.w	r1, #4294967295
 8008358:	488e      	ldr	r0, [pc, #568]	; (8008594 <cppLoop+0x944>)
 800835a:	f7fa f837 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800835e:	f001 bc0f 	b.w	8009b80 <cppLoop+0x1f30>
		else if(joy_stick.getValue() == JOY_L){
 8008362:	488b      	ldr	r0, [pc, #556]	; (8008590 <cppLoop+0x940>)
 8008364:	f7f9 ff12 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008368:	4603      	mov	r3, r0
 800836a:	2b01      	cmp	r3, #1
 800836c:	bf0c      	ite	eq
 800836e:	2301      	moveq	r3, #1
 8008370:	2300      	movne	r3, #0
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b00      	cmp	r3, #0
 8008376:	d059      	beq.n	800842c <cppLoop+0x7dc>
			led.LR(-1, 1);
 8008378:	2201      	movs	r2, #1
 800837a:	f04f 31ff 	mov.w	r1, #4294967295
 800837e:	4885      	ldr	r0, [pc, #532]	; (8008594 <cppLoop+0x944>)
 8008380:	f7fa f824 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008384:	2064      	movs	r0, #100	; 0x64
 8008386:	f001 fd43 	bl	8009e10 <HAL_Delay>
			if(selector == 0){
 800838a:	4b83      	ldr	r3, [pc, #524]	; (8008598 <cppLoop+0x948>)
 800838c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d113      	bne.n	80083bc <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.00001;
 8008394:	4b81      	ldr	r3, [pc, #516]	; (800859c <cppLoop+0x94c>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4618      	mov	r0, r3
 800839a:	f7f8 f8ed 	bl	8000578 <__aeabi_f2d>
 800839e:	a376      	add	r3, pc, #472	; (adr r3, 8008578 <cppLoop+0x928>)
 80083a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a4:	f7f7 ff88 	bl	80002b8 <__aeabi_dsub>
 80083a8:	4603      	mov	r3, r0
 80083aa:	460c      	mov	r4, r1
 80083ac:	4618      	mov	r0, r3
 80083ae:	4621      	mov	r1, r4
 80083b0:	f7f8 fc32 	bl	8000c18 <__aeabi_d2f>
 80083b4:	4602      	mov	r2, r0
 80083b6:	4b79      	ldr	r3, [pc, #484]	; (800859c <cppLoop+0x94c>)
 80083b8:	601a      	str	r2, [r3, #0]
 80083ba:	e02b      	b.n	8008414 <cppLoop+0x7c4>
			else if(selector == 1){
 80083bc:	4b76      	ldr	r3, [pc, #472]	; (8008598 <cppLoop+0x948>)
 80083be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d113      	bne.n	80083ee <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.0001;
 80083c6:	4b76      	ldr	r3, [pc, #472]	; (80085a0 <cppLoop+0x950>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7f8 f8d4 	bl	8000578 <__aeabi_f2d>
 80083d0:	a36b      	add	r3, pc, #428	; (adr r3, 8008580 <cppLoop+0x930>)
 80083d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d6:	f7f7 ff6f 	bl	80002b8 <__aeabi_dsub>
 80083da:	4603      	mov	r3, r0
 80083dc:	460c      	mov	r4, r1
 80083de:	4618      	mov	r0, r3
 80083e0:	4621      	mov	r1, r4
 80083e2:	f7f8 fc19 	bl	8000c18 <__aeabi_d2f>
 80083e6:	4602      	mov	r2, r0
 80083e8:	4b6d      	ldr	r3, [pc, #436]	; (80085a0 <cppLoop+0x950>)
 80083ea:	601a      	str	r2, [r3, #0]
 80083ec:	e012      	b.n	8008414 <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.000001;
 80083ee:	4b6d      	ldr	r3, [pc, #436]	; (80085a4 <cppLoop+0x954>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7f8 f8c0 	bl	8000578 <__aeabi_f2d>
 80083f8:	a363      	add	r3, pc, #396	; (adr r3, 8008588 <cppLoop+0x938>)
 80083fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fe:	f7f7 ff5b 	bl	80002b8 <__aeabi_dsub>
 8008402:	4603      	mov	r3, r0
 8008404:	460c      	mov	r4, r1
 8008406:	4618      	mov	r0, r3
 8008408:	4621      	mov	r1, r4
 800840a:	f7f8 fc05 	bl	8000c18 <__aeabi_d2f>
 800840e:	4602      	mov	r2, r0
 8008410:	4b64      	ldr	r3, [pc, #400]	; (80085a4 <cppLoop+0x954>)
 8008412:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008414:	2152      	movs	r1, #82	; 0x52
 8008416:	485f      	ldr	r0, [pc, #380]	; (8008594 <cppLoop+0x944>)
 8008418:	f7f9 ff1c 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800841c:	2200      	movs	r2, #0
 800841e:	f04f 31ff 	mov.w	r1, #4294967295
 8008422:	485c      	ldr	r0, [pc, #368]	; (8008594 <cppLoop+0x944>)
 8008424:	f7f9 ffd2 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008428:	f001 bbaa 	b.w	8009b80 <cppLoop+0x1f30>
		else if(joy_stick.getValue() == JOY_C){
 800842c:	4858      	ldr	r0, [pc, #352]	; (8008590 <cppLoop+0x940>)
 800842e:	f7f9 fead 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008432:	4603      	mov	r3, r0
 8008434:	2b02      	cmp	r3, #2
 8008436:	bf0c      	ite	eq
 8008438:	2301      	moveq	r3, #1
 800843a:	2300      	movne	r3, #0
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	f001 839e 	beq.w	8009b80 <cppLoop+0x1f30>
			led.LR(-1, 1);
 8008444:	2201      	movs	r2, #1
 8008446:	f04f 31ff 	mov.w	r1, #4294967295
 800844a:	4852      	ldr	r0, [pc, #328]	; (8008594 <cppLoop+0x944>)
 800844c:	f7f9 ffbe 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008450:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008454:	f001 fcdc 	bl	8009e10 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 8008458:	2300      	movs	r3, #0
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	4b4f      	ldr	r3, [pc, #316]	; (800859c <cppLoop+0x94c>)
 800845e:	2201      	movs	r2, #1
 8008460:	4951      	ldr	r1, [pc, #324]	; (80085a8 <cppLoop+0x958>)
 8008462:	4852      	ldr	r0, [pc, #328]	; (80085ac <cppLoop+0x95c>)
 8008464:	f7f9 fa0a 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 8008468:	2300      	movs	r3, #0
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	4b4c      	ldr	r3, [pc, #304]	; (80085a0 <cppLoop+0x950>)
 800846e:	2201      	movs	r2, #1
 8008470:	494f      	ldr	r1, [pc, #316]	; (80085b0 <cppLoop+0x960>)
 8008472:	484e      	ldr	r0, [pc, #312]	; (80085ac <cppLoop+0x95c>)
 8008474:	f7f9 fa02 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 8008478:	2300      	movs	r3, #0
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	4b49      	ldr	r3, [pc, #292]	; (80085a4 <cppLoop+0x954>)
 800847e:	2201      	movs	r2, #1
 8008480:	494c      	ldr	r1, [pc, #304]	; (80085b4 <cppLoop+0x964>)
 8008482:	484a      	ldr	r0, [pc, #296]	; (80085ac <cppLoop+0x95c>)
 8008484:	f7f9 f9fa 	bl	800187c <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8008488:	4b44      	ldr	r3, [pc, #272]	; (800859c <cppLoop+0x94c>)
 800848a:	edd3 7a00 	vldr	s15, [r3]
 800848e:	4b44      	ldr	r3, [pc, #272]	; (80085a0 <cppLoop+0x950>)
 8008490:	ed93 7a00 	vldr	s14, [r3]
 8008494:	4b43      	ldr	r3, [pc, #268]	; (80085a4 <cppLoop+0x954>)
 8008496:	edd3 6a00 	vldr	s13, [r3]
 800849a:	eeb0 1a66 	vmov.f32	s2, s13
 800849e:	eef0 0a47 	vmov.f32	s1, s14
 80084a2:	eeb0 0a67 	vmov.f32	s0, s15
 80084a6:	4844      	ldr	r0, [pc, #272]	; (80085b8 <cppLoop+0x968>)
 80084a8:	f7fb fc1a 	bl	8003ce0 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 80084ac:	2200      	movs	r2, #0
 80084ae:	f04f 31ff 	mov.w	r1, #4294967295
 80084b2:	4838      	ldr	r0, [pc, #224]	; (8008594 <cppLoop+0x944>)
 80084b4:	f7f9 ff8a 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80084b8:	f001 bb62 	b.w	8009b80 <cppLoop+0x1f30>

	case 1:
		led.fullColor('C');
 80084bc:	2143      	movs	r1, #67	; 0x43
 80084be:	4835      	ldr	r0, [pc, #212]	; (8008594 <cppLoop+0x944>)
 80084c0:	f7f9 fec8 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80084c4:	f7f8 fdec 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80084c8:	2100      	movs	r1, #0
 80084ca:	2000      	movs	r0, #0
 80084cc:	f7f8 fdf8 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80084d0:	483a      	ldr	r0, [pc, #232]	; (80085bc <cppLoop+0x96c>)
 80084d2:	f7f8 fe1f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80084d6:	2101      	movs	r1, #1
 80084d8:	2000      	movs	r0, #0
 80084da:	f7f8 fdf1 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 80084de:	4b38      	ldr	r3, [pc, #224]	; (80085c0 <cppLoop+0x970>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7f8 f848 	bl	8000578 <__aeabi_f2d>
 80084e8:	4603      	mov	r3, r0
 80084ea:	460c      	mov	r4, r1
 80084ec:	461a      	mov	r2, r3
 80084ee:	4623      	mov	r3, r4
 80084f0:	4834      	ldr	r0, [pc, #208]	; (80085c4 <cppLoop+0x974>)
 80084f2:	f7f8 fe0f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80084f6:	4826      	ldr	r0, [pc, #152]	; (8008590 <cppLoop+0x940>)
 80084f8:	f7f9 fe48 	bl	800218c <_ZN8JoyStick8getValueEv>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b02      	cmp	r3, #2
 8008500:	bf0c      	ite	eq
 8008502:	2301      	moveq	r3, #1
 8008504:	2300      	movne	r3, #0
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b00      	cmp	r3, #0
 800850a:	f001 833b 	beq.w	8009b84 <cppLoop+0x1f34>
			HAL_Delay(500);
 800850e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008512:	f001 fc7d 	bl	8009e10 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8008516:	4b2a      	ldr	r3, [pc, #168]	; (80085c0 <cppLoop+0x970>)
 8008518:	edd3 7a00 	vldr	s15, [r3]
 800851c:	eeb0 0a67 	vmov.f32	s0, s15
 8008520:	4825      	ldr	r0, [pc, #148]	; (80085b8 <cppLoop+0x968>)
 8008522:	f7fb fc32 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8008526:	f04f 32ff 	mov.w	r2, #4294967295
 800852a:	2101      	movs	r1, #1
 800852c:	4819      	ldr	r0, [pc, #100]	; (8008594 <cppLoop+0x944>)
 800852e:	f7f9 ff4d 	bl	80023cc <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(BLCD_POWER, BLCD_POWER, BLDC_POWER, BLDC_POWER);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 8008532:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008536:	f001 fc6b 	bl	8009e10 <HAL_Delay>
			logger.start();
 800853a:	4823      	ldr	r0, [pc, #140]	; (80085c8 <cppLoop+0x978>)
 800853c:	f7fc fbbd 	bl	8004cba <_ZN6Logger5startEv>

			// Run
			line_trace.setMode(FIRST_RUNNING);
 8008540:	2100      	movs	r1, #0
 8008542:	481d      	ldr	r0, [pc, #116]	; (80085b8 <cppLoop+0x968>)
 8008544:	f7fb fe38 	bl	80041b8 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8008548:	481b      	ldr	r0, [pc, #108]	; (80085b8 <cppLoop+0x968>)
 800854a:	f7fb fe73 	bl	8004234 <_ZN9LineTrace7runningEv>

			// BLDC off
			//esc.off();

			// Record stop and save
			logger.stop();
 800854e:	481e      	ldr	r0, [pc, #120]	; (80085c8 <cppLoop+0x978>)
 8008550:	f7fc fbc3 	bl	8004cda <_ZN6Logger4stopEv>
			logger.saveLogsInt("STATELOG", "LPERIOD.txt");
 8008554:	4a1d      	ldr	r2, [pc, #116]	; (80085cc <cppLoop+0x97c>)
 8008556:	491e      	ldr	r1, [pc, #120]	; (80085d0 <cppLoop+0x980>)
 8008558:	481b      	ldr	r0, [pc, #108]	; (80085c8 <cppLoop+0x978>)
 800855a:	f7fc fab9 	bl	8004ad0 <_ZN6Logger11saveLogsIntEPKcS1_>
			logger.saveLogs2Int("STATELOG", "RPERIOD.txt");
 800855e:	4a1d      	ldr	r2, [pc, #116]	; (80085d4 <cppLoop+0x984>)
 8008560:	491b      	ldr	r1, [pc, #108]	; (80085d0 <cppLoop+0x980>)
 8008562:	4819      	ldr	r0, [pc, #100]	; (80085c8 <cppLoop+0x978>)
 8008564:	f7fc faca 	bl	8004afc <_ZN6Logger12saveLogs2IntEPKcS1_>

			led.LR(0, -1);
 8008568:	f04f 32ff 	mov.w	r2, #4294967295
 800856c:	2100      	movs	r1, #0
 800856e:	4809      	ldr	r0, [pc, #36]	; (8008594 <cppLoop+0x944>)
 8008570:	f7f9 ff2c 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8008574:	f001 bb06 	b.w	8009b84 <cppLoop+0x1f34>
 8008578:	88e368f1 	.word	0x88e368f1
 800857c:	3ee4f8b5 	.word	0x3ee4f8b5
 8008580:	eb1c432d 	.word	0xeb1c432d
 8008584:	3f1a36e2 	.word	0x3f1a36e2
 8008588:	a0b5ed8d 	.word	0xa0b5ed8d
 800858c:	3eb0c6f7 	.word	0x3eb0c6f7
 8008590:	200005c4 	.word	0x200005c4
 8008594:	200005d0 	.word	0x200005d0
 8008598:	20042242 	.word	0x20042242
 800859c:	20042264 	.word	0x20042264
 80085a0:	2004226c 	.word	0x2004226c
 80085a4:	20042274 	.word	0x20042274
 80085a8:	08019f04 	.word	0x08019f04
 80085ac:	08019f10 	.word	0x08019f10
 80085b0:	08019f18 	.word	0x08019f18
 80085b4:	08019f24 	.word	0x08019f24
 80085b8:	2001db64 	.word	0x2001db64
 80085bc:	08019f30 	.word	0x08019f30
 80085c0:	2004227c 	.word	0x2004227c
 80085c4:	08019f3c 	.word	0x08019f3c
 80085c8:	200005f4 	.word	0x200005f4
 80085cc:	08019f48 	.word	0x08019f48
 80085d0:	08019f54 	.word	0x08019f54
 80085d4:	08019f60 	.word	0x08019f60

	case 2:
		led.fullColor('B');
 80085d8:	2142      	movs	r1, #66	; 0x42
 80085da:	48b9      	ldr	r0, [pc, #740]	; (80088c0 <cppLoop+0xc70>)
 80085dc:	f7f9 fe3a 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80085e0:	f7f8 fd5e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80085e4:	2100      	movs	r1, #0
 80085e6:	2000      	movs	r0, #0
 80085e8:	f7f8 fd6a 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80085ec:	48b5      	ldr	r0, [pc, #724]	; (80088c4 <cppLoop+0xc74>)
 80085ee:	f7f8 fd91 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80085f2:	2101      	movs	r1, #1
 80085f4:	2000      	movs	r0, #0
 80085f6:	f7f8 fd63 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 80085fa:	4bb3      	ldr	r3, [pc, #716]	; (80088c8 <cppLoop+0xc78>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4618      	mov	r0, r3
 8008600:	f7f7 ffba 	bl	8000578 <__aeabi_f2d>
 8008604:	4603      	mov	r3, r0
 8008606:	460c      	mov	r4, r1
 8008608:	461a      	mov	r2, r3
 800860a:	4623      	mov	r3, r4
 800860c:	48af      	ldr	r0, [pc, #700]	; (80088cc <cppLoop+0xc7c>)
 800860e:	f7f8 fd81 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 8008612:	48af      	ldr	r0, [pc, #700]	; (80088d0 <cppLoop+0xc80>)
 8008614:	f7f9 fdba 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008618:	4603      	mov	r3, r0
 800861a:	2b10      	cmp	r3, #16
 800861c:	bf0c      	ite	eq
 800861e:	2301      	moveq	r3, #1
 8008620:	2300      	movne	r3, #0
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	d023      	beq.n	8008670 <cppLoop+0xa20>
			led.LR(-1, 1);
 8008628:	2201      	movs	r2, #1
 800862a:	f04f 31ff 	mov.w	r1, #4294967295
 800862e:	48a4      	ldr	r0, [pc, #656]	; (80088c0 <cppLoop+0xc70>)
 8008630:	f7f9 fecc 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008634:	2064      	movs	r0, #100	; 0x64
 8008636:	f001 fbeb 	bl	8009e10 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 800863a:	4ba3      	ldr	r3, [pc, #652]	; (80088c8 <cppLoop+0xc78>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4618      	mov	r0, r3
 8008640:	f7f7 ff9a 	bl	8000578 <__aeabi_f2d>
 8008644:	a39c      	add	r3, pc, #624	; (adr r3, 80088b8 <cppLoop+0xc68>)
 8008646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864a:	f7f7 fe37 	bl	80002bc <__adddf3>
 800864e:	4603      	mov	r3, r0
 8008650:	460c      	mov	r4, r1
 8008652:	4618      	mov	r0, r3
 8008654:	4621      	mov	r1, r4
 8008656:	f7f8 fadf 	bl	8000c18 <__aeabi_d2f>
 800865a:	4602      	mov	r2, r0
 800865c:	4b9a      	ldr	r3, [pc, #616]	; (80088c8 <cppLoop+0xc78>)
 800865e:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8008660:	2200      	movs	r2, #0
 8008662:	f04f 31ff 	mov.w	r1, #4294967295
 8008666:	4896      	ldr	r0, [pc, #600]	; (80088c0 <cppLoop+0xc70>)
 8008668:	f7f9 feb0 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 800866c:	f001 ba8c 	b.w	8009b88 <cppLoop+0x1f38>
		else if(joy_stick.getValue() == JOY_L){
 8008670:	4897      	ldr	r0, [pc, #604]	; (80088d0 <cppLoop+0xc80>)
 8008672:	f7f9 fd8b 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008676:	4603      	mov	r3, r0
 8008678:	2b01      	cmp	r3, #1
 800867a:	bf0c      	ite	eq
 800867c:	2301      	moveq	r3, #1
 800867e:	2300      	movne	r3, #0
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b00      	cmp	r3, #0
 8008684:	d023      	beq.n	80086ce <cppLoop+0xa7e>
			led.LR(-1, 1);
 8008686:	2201      	movs	r2, #1
 8008688:	f04f 31ff 	mov.w	r1, #4294967295
 800868c:	488c      	ldr	r0, [pc, #560]	; (80088c0 <cppLoop+0xc70>)
 800868e:	f7f9 fe9d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008692:	2064      	movs	r0, #100	; 0x64
 8008694:	f001 fbbc 	bl	8009e10 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008698:	4b8b      	ldr	r3, [pc, #556]	; (80088c8 <cppLoop+0xc78>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4618      	mov	r0, r3
 800869e:	f7f7 ff6b 	bl	8000578 <__aeabi_f2d>
 80086a2:	a385      	add	r3, pc, #532	; (adr r3, 80088b8 <cppLoop+0xc68>)
 80086a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a8:	f7f7 fe06 	bl	80002b8 <__aeabi_dsub>
 80086ac:	4603      	mov	r3, r0
 80086ae:	460c      	mov	r4, r1
 80086b0:	4618      	mov	r0, r3
 80086b2:	4621      	mov	r1, r4
 80086b4:	f7f8 fab0 	bl	8000c18 <__aeabi_d2f>
 80086b8:	4602      	mov	r2, r0
 80086ba:	4b83      	ldr	r3, [pc, #524]	; (80088c8 <cppLoop+0xc78>)
 80086bc:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80086be:	2200      	movs	r2, #0
 80086c0:	f04f 31ff 	mov.w	r1, #4294967295
 80086c4:	487e      	ldr	r0, [pc, #504]	; (80088c0 <cppLoop+0xc70>)
 80086c6:	f7f9 fe81 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80086ca:	f001 ba5d 	b.w	8009b88 <cppLoop+0x1f38>
		else if(joy_stick.getValue() == JOY_C){
 80086ce:	4880      	ldr	r0, [pc, #512]	; (80088d0 <cppLoop+0xc80>)
 80086d0:	f7f9 fd5c 	bl	800218c <_ZN8JoyStick8getValueEv>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b02      	cmp	r3, #2
 80086d8:	bf0c      	ite	eq
 80086da:	2301      	moveq	r3, #1
 80086dc:	2300      	movne	r3, #0
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	f001 8251 	beq.w	8009b88 <cppLoop+0x1f38>
			led.LR(-1, 1);
 80086e6:	2201      	movs	r2, #1
 80086e8:	f04f 31ff 	mov.w	r1, #4294967295
 80086ec:	4874      	ldr	r0, [pc, #464]	; (80088c0 <cppLoop+0xc70>)
 80086ee:	f7f9 fe6d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80086f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80086f6:	f001 fb8b 	bl	8009e10 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80086fa:	2300      	movs	r3, #0
 80086fc:	9300      	str	r3, [sp, #0]
 80086fe:	4b72      	ldr	r3, [pc, #456]	; (80088c8 <cppLoop+0xc78>)
 8008700:	2201      	movs	r2, #1
 8008702:	4974      	ldr	r1, [pc, #464]	; (80088d4 <cppLoop+0xc84>)
 8008704:	4874      	ldr	r0, [pc, #464]	; (80088d8 <cppLoop+0xc88>)
 8008706:	f7f9 f8b9 	bl	800187c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 800870a:	4b6f      	ldr	r3, [pc, #444]	; (80088c8 <cppLoop+0xc78>)
 800870c:	edd3 7a00 	vldr	s15, [r3]
 8008710:	eeb0 0a67 	vmov.f32	s0, s15
 8008714:	4871      	ldr	r0, [pc, #452]	; (80088dc <cppLoop+0xc8c>)
 8008716:	f7fb fb38 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 800871a:	2200      	movs	r2, #0
 800871c:	f04f 31ff 	mov.w	r1, #4294967295
 8008720:	4867      	ldr	r0, [pc, #412]	; (80088c0 <cppLoop+0xc70>)
 8008722:	f7f9 fe53 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008726:	f001 ba2f 	b.w	8009b88 <cppLoop+0x1f38>

	case 3:
		led.fullColor('Y');
 800872a:	2159      	movs	r1, #89	; 0x59
 800872c:	4864      	ldr	r0, [pc, #400]	; (80088c0 <cppLoop+0xc70>)
 800872e:	f7f9 fd91 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008732:	f7f8 fcb5 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008736:	2100      	movs	r1, #0
 8008738:	2000      	movs	r0, #0
 800873a:	f7f8 fcc1 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 800873e:	4b68      	ldr	r3, [pc, #416]	; (80088e0 <cppLoop+0xc90>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4618      	mov	r0, r3
 8008744:	f7f7 ff18 	bl	8000578 <__aeabi_f2d>
 8008748:	4603      	mov	r3, r0
 800874a:	460c      	mov	r4, r1
 800874c:	461a      	mov	r2, r3
 800874e:	4623      	mov	r3, r4
 8008750:	4864      	ldr	r0, [pc, #400]	; (80088e4 <cppLoop+0xc94>)
 8008752:	f7f8 fcdf 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008756:	2101      	movs	r1, #1
 8008758:	2000      	movs	r0, #0
 800875a:	f7f8 fcb1 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 800875e:	4b62      	ldr	r3, [pc, #392]	; (80088e8 <cppLoop+0xc98>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4618      	mov	r0, r3
 8008764:	f7f7 ff08 	bl	8000578 <__aeabi_f2d>
 8008768:	4603      	mov	r3, r0
 800876a:	460c      	mov	r4, r1
 800876c:	461a      	mov	r2, r3
 800876e:	4623      	mov	r3, r4
 8008770:	485e      	ldr	r0, [pc, #376]	; (80088ec <cppLoop+0xc9c>)
 8008772:	f7f8 fccf 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008776:	4856      	ldr	r0, [pc, #344]	; (80088d0 <cppLoop+0xc80>)
 8008778:	f7f9 fd08 	bl	800218c <_ZN8JoyStick8getValueEv>
 800877c:	4603      	mov	r3, r0
 800877e:	2b02      	cmp	r3, #2
 8008780:	bf0c      	ite	eq
 8008782:	2301      	moveq	r3, #1
 8008784:	2300      	movne	r3, #0
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b00      	cmp	r3, #0
 800878a:	f001 81ff 	beq.w	8009b8c <cppLoop+0x1f3c>
			HAL_Delay(500);
 800878e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008792:	f001 fb3d 	bl	8009e10 <HAL_Delay>

			led.LR(1, -1);
 8008796:	f04f 32ff 	mov.w	r2, #4294967295
 800879a:	2101      	movs	r1, #1
 800879c:	4848      	ldr	r0, [pc, #288]	; (80088c0 <cppLoop+0xc70>)
 800879e:	f7f9 fe15 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80087a2:	2101      	movs	r1, #1
 80087a4:	484d      	ldr	r0, [pc, #308]	; (80088dc <cppLoop+0xc8c>)
 80087a6:	f7fb fd07 	bl	80041b8 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80087aa:	4b4f      	ldr	r3, [pc, #316]	; (80088e8 <cppLoop+0xc98>)
 80087ac:	edd3 7a00 	vldr	s15, [r3]
 80087b0:	eeb0 0a67 	vmov.f32	s0, s15
 80087b4:	4849      	ldr	r0, [pc, #292]	; (80088dc <cppLoop+0xc8c>)
 80087b6:	f7fb fae8 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80087ba:	4b49      	ldr	r3, [pc, #292]	; (80088e0 <cppLoop+0xc90>)
 80087bc:	edd3 7a00 	vldr	s15, [r3]
 80087c0:	eeb0 0a67 	vmov.f32	s0, s15
 80087c4:	4845      	ldr	r0, [pc, #276]	; (80088dc <cppLoop+0xc8c>)
 80087c6:	f7fb faf0 	bl	8003daa <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80087ca:	4b47      	ldr	r3, [pc, #284]	; (80088e8 <cppLoop+0xc98>)
 80087cc:	edd3 7a00 	vldr	s15, [r3]
 80087d0:	eeb0 0a67 	vmov.f32	s0, s15
 80087d4:	4841      	ldr	r0, [pc, #260]	; (80088dc <cppLoop+0xc8c>)
 80087d6:	f7fb fb08 	bl	8003dea <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 80087da:	4840      	ldr	r0, [pc, #256]	; (80088dc <cppLoop+0xc8c>)
 80087dc:	f7fb fe1a 	bl	8004414 <_ZN9LineTrace20createVelocityTabeleEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 80087e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087e4:	f001 fb14 	bl	8009e10 <HAL_Delay>

			line_trace.running();
 80087e8:	483c      	ldr	r0, [pc, #240]	; (80088dc <cppLoop+0xc8c>)
 80087ea:	f7fb fd23 	bl	8004234 <_ZN9LineTrace7runningEv>

			// BLDC off
			esc.off();
 80087ee:	4840      	ldr	r0, [pc, #256]	; (80088f0 <cppLoop+0xca0>)
 80087f0:	f7f8 fdc8 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80087f4:	f04f 32ff 	mov.w	r2, #4294967295
 80087f8:	2100      	movs	r1, #0
 80087fa:	4831      	ldr	r0, [pc, #196]	; (80088c0 <cppLoop+0xc70>)
 80087fc:	f7f9 fde6 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8008800:	f001 b9c4 	b.w	8009b8c <cppLoop+0x1f3c>

	case 4:
		led.fullColor('G');
 8008804:	2147      	movs	r1, #71	; 0x47
 8008806:	482e      	ldr	r0, [pc, #184]	; (80088c0 <cppLoop+0xc70>)
 8008808:	f7f9 fd24 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800880c:	f7f8 fc48 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008810:	2100      	movs	r1, #0
 8008812:	2000      	movs	r0, #0
 8008814:	f7f8 fc54 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8008818:	4830      	ldr	r0, [pc, #192]	; (80088dc <cppLoop+0xc8c>)
 800881a:	f7fb fb16 	bl	8003e4a <_ZN9LineTrace14getMaxVelocityEv>
 800881e:	ee10 3a10 	vmov	r3, s0
 8008822:	4618      	mov	r0, r3
 8008824:	f7f7 fea8 	bl	8000578 <__aeabi_f2d>
 8008828:	4603      	mov	r3, r0
 800882a:	460c      	mov	r4, r1
 800882c:	461a      	mov	r2, r3
 800882e:	4623      	mov	r3, r4
 8008830:	482c      	ldr	r0, [pc, #176]	; (80088e4 <cppLoop+0xc94>)
 8008832:	f7f8 fc6f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008836:	2101      	movs	r1, #1
 8008838:	2000      	movs	r0, #0
 800883a:	f7f8 fc41 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 800883e:	4827      	ldr	r0, [pc, #156]	; (80088dc <cppLoop+0xc8c>)
 8008840:	f7fb fb23 	bl	8003e8a <_ZN9LineTrace14getMinVelocityEv>
 8008844:	ee10 3a10 	vmov	r3, s0
 8008848:	4618      	mov	r0, r3
 800884a:	f7f7 fe95 	bl	8000578 <__aeabi_f2d>
 800884e:	4603      	mov	r3, r0
 8008850:	460c      	mov	r4, r1
 8008852:	461a      	mov	r2, r3
 8008854:	4623      	mov	r3, r4
 8008856:	481d      	ldr	r0, [pc, #116]	; (80088cc <cppLoop+0xc7c>)
 8008858:	f7f8 fc5c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800885c:	481c      	ldr	r0, [pc, #112]	; (80088d0 <cppLoop+0xc80>)
 800885e:	f7f9 fc95 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008862:	4603      	mov	r3, r0
 8008864:	2b08      	cmp	r3, #8
 8008866:	bf0c      	ite	eq
 8008868:	2301      	moveq	r3, #1
 800886a:	2300      	movne	r3, #0
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d042      	beq.n	80088f8 <cppLoop+0xca8>
			led.LR(-1, 1);
 8008872:	2201      	movs	r2, #1
 8008874:	f04f 31ff 	mov.w	r1, #4294967295
 8008878:	4811      	ldr	r0, [pc, #68]	; (80088c0 <cppLoop+0xc70>)
 800887a:	f7f9 fda7 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800887e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008882:	f001 fac5 	bl	8009e10 <HAL_Delay>

			selector_vel++;
 8008886:	4b1b      	ldr	r3, [pc, #108]	; (80088f4 <cppLoop+0xca4>)
 8008888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800888c:	b29b      	uxth	r3, r3
 800888e:	3301      	adds	r3, #1
 8008890:	b29b      	uxth	r3, r3
 8008892:	b21a      	sxth	r2, r3
 8008894:	4b17      	ldr	r3, [pc, #92]	; (80088f4 <cppLoop+0xca4>)
 8008896:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8008898:	4b16      	ldr	r3, [pc, #88]	; (80088f4 <cppLoop+0xca4>)
 800889a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	dd02      	ble.n	80088a8 <cppLoop+0xc58>
 80088a2:	4b14      	ldr	r3, [pc, #80]	; (80088f4 <cppLoop+0xca4>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80088a8:	2200      	movs	r2, #0
 80088aa:	f04f 31ff 	mov.w	r1, #4294967295
 80088ae:	4804      	ldr	r0, [pc, #16]	; (80088c0 <cppLoop+0xc70>)
 80088b0:	f7f9 fd8c 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 80088b4:	f001 b96c 	b.w	8009b90 <cppLoop+0x1f40>
 80088b8:	9999999a 	.word	0x9999999a
 80088bc:	3fb99999 	.word	0x3fb99999
 80088c0:	200005d0 	.word	0x200005d0
 80088c4:	08019f30 	.word	0x08019f30
 80088c8:	2004227c 	.word	0x2004227c
 80088cc:	08019f6c 	.word	0x08019f6c
 80088d0:	200005c4 	.word	0x200005c4
 80088d4:	08019f78 	.word	0x08019f78
 80088d8:	08019f10 	.word	0x08019f10
 80088dc:	2001db64 	.word	0x2001db64
 80088e0:	20042284 	.word	0x20042284
 80088e4:	08019f84 	.word	0x08019f84
 80088e8:	20042294 	.word	0x20042294
 80088ec:	08019f3c 	.word	0x08019f3c
 80088f0:	2001db60 	.word	0x2001db60
 80088f4:	20042248 	.word	0x20042248
		else if(joy_stick.getValue() == JOY_R){
 80088f8:	48a5      	ldr	r0, [pc, #660]	; (8008b90 <cppLoop+0xf40>)
 80088fa:	f7f9 fc47 	bl	800218c <_ZN8JoyStick8getValueEv>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b10      	cmp	r3, #16
 8008902:	bf0c      	ite	eq
 8008904:	2301      	moveq	r3, #1
 8008906:	2300      	movne	r3, #0
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b00      	cmp	r3, #0
 800890c:	d03c      	beq.n	8008988 <cppLoop+0xd38>
			led.LR(-1, 1);
 800890e:	2201      	movs	r2, #1
 8008910:	f04f 31ff 	mov.w	r1, #4294967295
 8008914:	489f      	ldr	r0, [pc, #636]	; (8008b94 <cppLoop+0xf44>)
 8008916:	f7f9 fd59 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800891a:	2064      	movs	r0, #100	; 0x64
 800891c:	f001 fa78 	bl	8009e10 <HAL_Delay>
			if(selector_vel == 0)
 8008920:	4b9d      	ldr	r3, [pc, #628]	; (8008b98 <cppLoop+0xf48>)
 8008922:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d113      	bne.n	8008952 <cppLoop+0xd02>
				adj_max_velocity = adj_max_velocity + 0.1;
 800892a:	4b9c      	ldr	r3, [pc, #624]	; (8008b9c <cppLoop+0xf4c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4618      	mov	r0, r3
 8008930:	f7f7 fe22 	bl	8000578 <__aeabi_f2d>
 8008934:	a394      	add	r3, pc, #592	; (adr r3, 8008b88 <cppLoop+0xf38>)
 8008936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893a:	f7f7 fcbf 	bl	80002bc <__adddf3>
 800893e:	4603      	mov	r3, r0
 8008940:	460c      	mov	r4, r1
 8008942:	4618      	mov	r0, r3
 8008944:	4621      	mov	r1, r4
 8008946:	f7f8 f967 	bl	8000c18 <__aeabi_d2f>
 800894a:	4602      	mov	r2, r0
 800894c:	4b93      	ldr	r3, [pc, #588]	; (8008b9c <cppLoop+0xf4c>)
 800894e:	601a      	str	r2, [r3, #0]
 8008950:	e012      	b.n	8008978 <cppLoop+0xd28>
				adj_min_velocity = adj_min_velocity + 0.1;
 8008952:	4b93      	ldr	r3, [pc, #588]	; (8008ba0 <cppLoop+0xf50>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4618      	mov	r0, r3
 8008958:	f7f7 fe0e 	bl	8000578 <__aeabi_f2d>
 800895c:	a38a      	add	r3, pc, #552	; (adr r3, 8008b88 <cppLoop+0xf38>)
 800895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008962:	f7f7 fcab 	bl	80002bc <__adddf3>
 8008966:	4603      	mov	r3, r0
 8008968:	460c      	mov	r4, r1
 800896a:	4618      	mov	r0, r3
 800896c:	4621      	mov	r1, r4
 800896e:	f7f8 f953 	bl	8000c18 <__aeabi_d2f>
 8008972:	4602      	mov	r2, r0
 8008974:	4b8a      	ldr	r3, [pc, #552]	; (8008ba0 <cppLoop+0xf50>)
 8008976:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008978:	2200      	movs	r2, #0
 800897a:	f04f 31ff 	mov.w	r1, #4294967295
 800897e:	4885      	ldr	r0, [pc, #532]	; (8008b94 <cppLoop+0xf44>)
 8008980:	f7f9 fd24 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008984:	f001 b904 	b.w	8009b90 <cppLoop+0x1f40>
		else if(joy_stick.getValue() == JOY_L){
 8008988:	4881      	ldr	r0, [pc, #516]	; (8008b90 <cppLoop+0xf40>)
 800898a:	f7f9 fbff 	bl	800218c <_ZN8JoyStick8getValueEv>
 800898e:	4603      	mov	r3, r0
 8008990:	2b01      	cmp	r3, #1
 8008992:	bf0c      	ite	eq
 8008994:	2301      	moveq	r3, #1
 8008996:	2300      	movne	r3, #0
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	d03c      	beq.n	8008a18 <cppLoop+0xdc8>
			led.LR(-1, 1);
 800899e:	2201      	movs	r2, #1
 80089a0:	f04f 31ff 	mov.w	r1, #4294967295
 80089a4:	487b      	ldr	r0, [pc, #492]	; (8008b94 <cppLoop+0xf44>)
 80089a6:	f7f9 fd11 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80089aa:	2064      	movs	r0, #100	; 0x64
 80089ac:	f001 fa30 	bl	8009e10 <HAL_Delay>
			if(selector_vel == 0)
 80089b0:	4b79      	ldr	r3, [pc, #484]	; (8008b98 <cppLoop+0xf48>)
 80089b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d113      	bne.n	80089e2 <cppLoop+0xd92>
				adj_max_velocity = adj_max_velocity - 0.1;
 80089ba:	4b78      	ldr	r3, [pc, #480]	; (8008b9c <cppLoop+0xf4c>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4618      	mov	r0, r3
 80089c0:	f7f7 fdda 	bl	8000578 <__aeabi_f2d>
 80089c4:	a370      	add	r3, pc, #448	; (adr r3, 8008b88 <cppLoop+0xf38>)
 80089c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ca:	f7f7 fc75 	bl	80002b8 <__aeabi_dsub>
 80089ce:	4603      	mov	r3, r0
 80089d0:	460c      	mov	r4, r1
 80089d2:	4618      	mov	r0, r3
 80089d4:	4621      	mov	r1, r4
 80089d6:	f7f8 f91f 	bl	8000c18 <__aeabi_d2f>
 80089da:	4602      	mov	r2, r0
 80089dc:	4b6f      	ldr	r3, [pc, #444]	; (8008b9c <cppLoop+0xf4c>)
 80089de:	601a      	str	r2, [r3, #0]
 80089e0:	e012      	b.n	8008a08 <cppLoop+0xdb8>
				adj_min_velocity = adj_min_velocity - 0.1;
 80089e2:	4b6f      	ldr	r3, [pc, #444]	; (8008ba0 <cppLoop+0xf50>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7f7 fdc6 	bl	8000578 <__aeabi_f2d>
 80089ec:	a366      	add	r3, pc, #408	; (adr r3, 8008b88 <cppLoop+0xf38>)
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	f7f7 fc61 	bl	80002b8 <__aeabi_dsub>
 80089f6:	4603      	mov	r3, r0
 80089f8:	460c      	mov	r4, r1
 80089fa:	4618      	mov	r0, r3
 80089fc:	4621      	mov	r1, r4
 80089fe:	f7f8 f90b 	bl	8000c18 <__aeabi_d2f>
 8008a02:	4602      	mov	r2, r0
 8008a04:	4b66      	ldr	r3, [pc, #408]	; (8008ba0 <cppLoop+0xf50>)
 8008a06:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f04f 31ff 	mov.w	r1, #4294967295
 8008a0e:	4861      	ldr	r0, [pc, #388]	; (8008b94 <cppLoop+0xf44>)
 8008a10:	f7f9 fcdc 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008a14:	f001 b8bc 	b.w	8009b90 <cppLoop+0x1f40>
		else if(joy_stick.getValue() == JOY_C){
 8008a18:	485d      	ldr	r0, [pc, #372]	; (8008b90 <cppLoop+0xf40>)
 8008a1a:	f7f9 fbb7 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	bf0c      	ite	eq
 8008a24:	2301      	moveq	r3, #1
 8008a26:	2300      	movne	r3, #0
 8008a28:	b2db      	uxtb	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f001 80b0 	beq.w	8009b90 <cppLoop+0x1f40>
			led.LR(-1, 1);
 8008a30:	2201      	movs	r2, #1
 8008a32:	f04f 31ff 	mov.w	r1, #4294967295
 8008a36:	4857      	ldr	r0, [pc, #348]	; (8008b94 <cppLoop+0xf44>)
 8008a38:	f7f9 fcc8 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008a3c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a40:	f001 f9e6 	bl	8009e10 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008a44:	2300      	movs	r3, #0
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	4b54      	ldr	r3, [pc, #336]	; (8008b9c <cppLoop+0xf4c>)
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	4955      	ldr	r1, [pc, #340]	; (8008ba4 <cppLoop+0xf54>)
 8008a4e:	4856      	ldr	r0, [pc, #344]	; (8008ba8 <cppLoop+0xf58>)
 8008a50:	f7f8 ff14 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008a54:	2300      	movs	r3, #0
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	4b51      	ldr	r3, [pc, #324]	; (8008ba0 <cppLoop+0xf50>)
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	4953      	ldr	r1, [pc, #332]	; (8008bac <cppLoop+0xf5c>)
 8008a5e:	4852      	ldr	r0, [pc, #328]	; (8008ba8 <cppLoop+0xf58>)
 8008a60:	f7f8 ff0c 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008a64:	4b4d      	ldr	r3, [pc, #308]	; (8008b9c <cppLoop+0xf4c>)
 8008a66:	edd3 7a00 	vldr	s15, [r3]
 8008a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a6e:	4850      	ldr	r0, [pc, #320]	; (8008bb0 <cppLoop+0xf60>)
 8008a70:	f7fb f99b 	bl	8003daa <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008a74:	4b4a      	ldr	r3, [pc, #296]	; (8008ba0 <cppLoop+0xf50>)
 8008a76:	edd3 7a00 	vldr	s15, [r3]
 8008a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a7e:	484c      	ldr	r0, [pc, #304]	; (8008bb0 <cppLoop+0xf60>)
 8008a80:	f7fb f9b3 	bl	8003dea <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008a84:	2200      	movs	r2, #0
 8008a86:	f04f 31ff 	mov.w	r1, #4294967295
 8008a8a:	4842      	ldr	r0, [pc, #264]	; (8008b94 <cppLoop+0xf44>)
 8008a8c:	f7f9 fc9e 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008a90:	f001 b87e 	b.w	8009b90 <cppLoop+0x1f40>

	case 5:
		led.fullColor('M');
 8008a94:	214d      	movs	r1, #77	; 0x4d
 8008a96:	483f      	ldr	r0, [pc, #252]	; (8008b94 <cppLoop+0xf44>)
 8008a98:	f7f9 fbdc 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008a9c:	f7f8 fb00 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	f7f8 fb0c 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008aa8:	4b42      	ldr	r3, [pc, #264]	; (8008bb4 <cppLoop+0xf64>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7f7 fd63 	bl	8000578 <__aeabi_f2d>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	460c      	mov	r4, r1
 8008ab6:	461a      	mov	r2, r3
 8008ab8:	4623      	mov	r3, r4
 8008aba:	483f      	ldr	r0, [pc, #252]	; (8008bb8 <cppLoop+0xf68>)
 8008abc:	f7f8 fb2a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	f7f8 fafc 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008ac8:	4b3c      	ldr	r3, [pc, #240]	; (8008bbc <cppLoop+0xf6c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7f7 fd53 	bl	8000578 <__aeabi_f2d>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	4623      	mov	r3, r4
 8008ada:	4839      	ldr	r0, [pc, #228]	; (8008bc0 <cppLoop+0xf70>)
 8008adc:	f7f8 fb1a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008ae0:	482b      	ldr	r0, [pc, #172]	; (8008b90 <cppLoop+0xf40>)
 8008ae2:	f7f9 fb53 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	bf0c      	ite	eq
 8008aec:	2301      	moveq	r3, #1
 8008aee:	2300      	movne	r3, #0
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f001 804e 	beq.w	8009b94 <cppLoop+0x1f44>
			HAL_Delay(500);
 8008af8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008afc:	f001 f988 	bl	8009e10 <HAL_Delay>

			led.LR(1, -1);
 8008b00:	f04f 32ff 	mov.w	r2, #4294967295
 8008b04:	2101      	movs	r1, #1
 8008b06:	4823      	ldr	r0, [pc, #140]	; (8008b94 <cppLoop+0xf44>)
 8008b08:	f7f9 fc60 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008b0c:	4b2d      	ldr	r3, [pc, #180]	; (8008bc4 <cppLoop+0xf74>)
 8008b0e:	edd3 7a00 	vldr	s15, [r3]
 8008b12:	4b2d      	ldr	r3, [pc, #180]	; (8008bc8 <cppLoop+0xf78>)
 8008b14:	ed93 7a00 	vldr	s14, [r3]
 8008b18:	4b2c      	ldr	r3, [pc, #176]	; (8008bcc <cppLoop+0xf7c>)
 8008b1a:	edd3 6a00 	vldr	s13, [r3]
 8008b1e:	eeb0 1a66 	vmov.f32	s2, s13
 8008b22:	eef0 0a47 	vmov.f32	s1, s14
 8008b26:	eeb0 0a67 	vmov.f32	s0, s15
 8008b2a:	4821      	ldr	r0, [pc, #132]	; (8008bb0 <cppLoop+0xf60>)
 8008b2c:	f7fb f892 	bl	8003c54 <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 8008b30:	2102      	movs	r1, #2
 8008b32:	481f      	ldr	r0, [pc, #124]	; (8008bb0 <cppLoop+0xf60>)
 8008b34:	f7fb fb40 	bl	80041b8 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008b38:	4b20      	ldr	r3, [pc, #128]	; (8008bbc <cppLoop+0xf6c>)
 8008b3a:	edd3 7a00 	vldr	s15, [r3]
 8008b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8008b42:	481b      	ldr	r0, [pc, #108]	; (8008bb0 <cppLoop+0xf60>)
 8008b44:	f7fb f921 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008b48:	4b1a      	ldr	r3, [pc, #104]	; (8008bb4 <cppLoop+0xf64>)
 8008b4a:	edd3 7a00 	vldr	s15, [r3]
 8008b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8008b52:	4817      	ldr	r0, [pc, #92]	; (8008bb0 <cppLoop+0xf60>)
 8008b54:	f7fb f939 	bl	8003dca <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008b58:	4b18      	ldr	r3, [pc, #96]	; (8008bbc <cppLoop+0xf6c>)
 8008b5a:	edd3 7a00 	vldr	s15, [r3]
 8008b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8008b62:	4813      	ldr	r0, [pc, #76]	; (8008bb0 <cppLoop+0xf60>)
 8008b64:	f7fb f951 	bl	8003e0a <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008b68:	4811      	ldr	r0, [pc, #68]	; (8008bb0 <cppLoop+0xf60>)
 8008b6a:	f7fb fc53 	bl	8004414 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008b6e:	4810      	ldr	r0, [pc, #64]	; (8008bb0 <cppLoop+0xf60>)
 8008b70:	f7fb fb60 	bl	8004234 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008b74:	f04f 32ff 	mov.w	r2, #4294967295
 8008b78:	2100      	movs	r1, #0
 8008b7a:	4806      	ldr	r0, [pc, #24]	; (8008b94 <cppLoop+0xf44>)
 8008b7c:	f7f9 fc26 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8008b80:	f001 b808 	b.w	8009b94 <cppLoop+0x1f44>
 8008b84:	f3af 8000 	nop.w
 8008b88:	9999999a 	.word	0x9999999a
 8008b8c:	3fb99999 	.word	0x3fb99999
 8008b90:	200005c4 	.word	0x200005c4
 8008b94:	200005d0 	.word	0x200005d0
 8008b98:	20042248 	.word	0x20042248
 8008b9c:	20042284 	.word	0x20042284
 8008ba0:	20042294 	.word	0x20042294
 8008ba4:	08019f90 	.word	0x08019f90
 8008ba8:	08019f10 	.word	0x08019f10
 8008bac:	08019f9c 	.word	0x08019f9c
 8008bb0:	2001db64 	.word	0x2001db64
 8008bb4:	2004228c 	.word	0x2004228c
 8008bb8:	08019fa8 	.word	0x08019fa8
 8008bbc:	2004229c 	.word	0x2004229c
 8008bc0:	08019f3c 	.word	0x08019f3c
 8008bc4:	2004224c 	.word	0x2004224c
 8008bc8:	20042254 	.word	0x20042254
 8008bcc:	2004225c 	.word	0x2004225c

	case 6:
		led.fullColor('R');
 8008bd0:	2152      	movs	r1, #82	; 0x52
 8008bd2:	4895      	ldr	r0, [pc, #596]	; (8008e28 <cppLoop+0x11d8>)
 8008bd4:	f7f9 fb3e 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008bd8:	f7f8 fa62 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008bdc:	2100      	movs	r1, #0
 8008bde:	2000      	movs	r0, #0
 8008be0:	f7f8 fa6e 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008be4:	4891      	ldr	r0, [pc, #580]	; (8008e2c <cppLoop+0x11dc>)
 8008be6:	f7fb f940 	bl	8003e6a <_ZN9LineTrace15getMaxVelocity2Ev>
 8008bea:	ee10 3a10 	vmov	r3, s0
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7f7 fcc2 	bl	8000578 <__aeabi_f2d>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	460c      	mov	r4, r1
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	4623      	mov	r3, r4
 8008bfc:	488c      	ldr	r0, [pc, #560]	; (8008e30 <cppLoop+0x11e0>)
 8008bfe:	f7f8 fa89 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008c02:	2101      	movs	r1, #1
 8008c04:	2000      	movs	r0, #0
 8008c06:	f7f8 fa5b 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008c0a:	4888      	ldr	r0, [pc, #544]	; (8008e2c <cppLoop+0x11dc>)
 8008c0c:	f7fb f94d 	bl	8003eaa <_ZN9LineTrace15getMinVelocity2Ev>
 8008c10:	ee10 3a10 	vmov	r3, s0
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7f7 fcaf 	bl	8000578 <__aeabi_f2d>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	461a      	mov	r2, r3
 8008c20:	4623      	mov	r3, r4
 8008c22:	4884      	ldr	r0, [pc, #528]	; (8008e34 <cppLoop+0x11e4>)
 8008c24:	f7f8 fa76 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008c28:	4883      	ldr	r0, [pc, #524]	; (8008e38 <cppLoop+0x11e8>)
 8008c2a:	f7f9 faaf 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b08      	cmp	r3, #8
 8008c32:	bf0c      	ite	eq
 8008c34:	2301      	moveq	r3, #1
 8008c36:	2300      	movne	r3, #0
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d022      	beq.n	8008c84 <cppLoop+0x1034>
			led.LR(-1, 1);
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f04f 31ff 	mov.w	r1, #4294967295
 8008c44:	4878      	ldr	r0, [pc, #480]	; (8008e28 <cppLoop+0x11d8>)
 8008c46:	f7f9 fbc1 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008c4a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008c4e:	f001 f8df 	bl	8009e10 <HAL_Delay>

			selector_vel2++;
 8008c52:	4b7a      	ldr	r3, [pc, #488]	; (8008e3c <cppLoop+0x11ec>)
 8008c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	b21a      	sxth	r2, r3
 8008c60:	4b76      	ldr	r3, [pc, #472]	; (8008e3c <cppLoop+0x11ec>)
 8008c62:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008c64:	4b75      	ldr	r3, [pc, #468]	; (8008e3c <cppLoop+0x11ec>)
 8008c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	dd02      	ble.n	8008c74 <cppLoop+0x1024>
 8008c6e:	4b73      	ldr	r3, [pc, #460]	; (8008e3c <cppLoop+0x11ec>)
 8008c70:	2200      	movs	r2, #0
 8008c72:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008c74:	2200      	movs	r2, #0
 8008c76:	f04f 31ff 	mov.w	r1, #4294967295
 8008c7a:	486b      	ldr	r0, [pc, #428]	; (8008e28 <cppLoop+0x11d8>)
 8008c7c:	f7f9 fba6 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008c80:	f000 bf8a 	b.w	8009b98 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_R){
 8008c84:	486c      	ldr	r0, [pc, #432]	; (8008e38 <cppLoop+0x11e8>)
 8008c86:	f7f9 fa81 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b10      	cmp	r3, #16
 8008c8e:	bf0c      	ite	eq
 8008c90:	2301      	moveq	r3, #1
 8008c92:	2300      	movne	r3, #0
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d03c      	beq.n	8008d14 <cppLoop+0x10c4>
			led.LR(-1, 1);
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8008ca0:	4861      	ldr	r0, [pc, #388]	; (8008e28 <cppLoop+0x11d8>)
 8008ca2:	f7f9 fb93 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008ca6:	2064      	movs	r0, #100	; 0x64
 8008ca8:	f001 f8b2 	bl	8009e10 <HAL_Delay>
			if(selector_vel2 == 0)
 8008cac:	4b63      	ldr	r3, [pc, #396]	; (8008e3c <cppLoop+0x11ec>)
 8008cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d113      	bne.n	8008cde <cppLoop+0x108e>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008cb6:	4b62      	ldr	r3, [pc, #392]	; (8008e40 <cppLoop+0x11f0>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7f7 fc5c 	bl	8000578 <__aeabi_f2d>
 8008cc0:	a357      	add	r3, pc, #348	; (adr r3, 8008e20 <cppLoop+0x11d0>)
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	f7f7 faf9 	bl	80002bc <__adddf3>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	460c      	mov	r4, r1
 8008cce:	4618      	mov	r0, r3
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	f7f7 ffa1 	bl	8000c18 <__aeabi_d2f>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	4b59      	ldr	r3, [pc, #356]	; (8008e40 <cppLoop+0x11f0>)
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	e012      	b.n	8008d04 <cppLoop+0x10b4>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008cde:	4b59      	ldr	r3, [pc, #356]	; (8008e44 <cppLoop+0x11f4>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7f7 fc48 	bl	8000578 <__aeabi_f2d>
 8008ce8:	a34d      	add	r3, pc, #308	; (adr r3, 8008e20 <cppLoop+0x11d0>)
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	f7f7 fae5 	bl	80002bc <__adddf3>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	460c      	mov	r4, r1
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	f7f7 ff8d 	bl	8000c18 <__aeabi_d2f>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	4b50      	ldr	r3, [pc, #320]	; (8008e44 <cppLoop+0x11f4>)
 8008d02:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008d04:	2200      	movs	r2, #0
 8008d06:	f04f 31ff 	mov.w	r1, #4294967295
 8008d0a:	4847      	ldr	r0, [pc, #284]	; (8008e28 <cppLoop+0x11d8>)
 8008d0c:	f7f9 fb5e 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008d10:	f000 bf42 	b.w	8009b98 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_L){
 8008d14:	4848      	ldr	r0, [pc, #288]	; (8008e38 <cppLoop+0x11e8>)
 8008d16:	f7f9 fa39 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	bf0c      	ite	eq
 8008d20:	2301      	moveq	r3, #1
 8008d22:	2300      	movne	r3, #0
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d03c      	beq.n	8008da4 <cppLoop+0x1154>
			led.LR(-1, 1);
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8008d30:	483d      	ldr	r0, [pc, #244]	; (8008e28 <cppLoop+0x11d8>)
 8008d32:	f7f9 fb4b 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008d36:	2064      	movs	r0, #100	; 0x64
 8008d38:	f001 f86a 	bl	8009e10 <HAL_Delay>
			if(selector_vel2 == 0)
 8008d3c:	4b3f      	ldr	r3, [pc, #252]	; (8008e3c <cppLoop+0x11ec>)
 8008d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d113      	bne.n	8008d6e <cppLoop+0x111e>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008d46:	4b3e      	ldr	r3, [pc, #248]	; (8008e40 <cppLoop+0x11f0>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7f7 fc14 	bl	8000578 <__aeabi_f2d>
 8008d50:	a333      	add	r3, pc, #204	; (adr r3, 8008e20 <cppLoop+0x11d0>)
 8008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d56:	f7f7 faaf 	bl	80002b8 <__aeabi_dsub>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	4618      	mov	r0, r3
 8008d60:	4621      	mov	r1, r4
 8008d62:	f7f7 ff59 	bl	8000c18 <__aeabi_d2f>
 8008d66:	4602      	mov	r2, r0
 8008d68:	4b35      	ldr	r3, [pc, #212]	; (8008e40 <cppLoop+0x11f0>)
 8008d6a:	601a      	str	r2, [r3, #0]
 8008d6c:	e012      	b.n	8008d94 <cppLoop+0x1144>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008d6e:	4b35      	ldr	r3, [pc, #212]	; (8008e44 <cppLoop+0x11f4>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7f7 fc00 	bl	8000578 <__aeabi_f2d>
 8008d78:	a329      	add	r3, pc, #164	; (adr r3, 8008e20 <cppLoop+0x11d0>)
 8008d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7e:	f7f7 fa9b 	bl	80002b8 <__aeabi_dsub>
 8008d82:	4603      	mov	r3, r0
 8008d84:	460c      	mov	r4, r1
 8008d86:	4618      	mov	r0, r3
 8008d88:	4621      	mov	r1, r4
 8008d8a:	f7f7 ff45 	bl	8000c18 <__aeabi_d2f>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	4b2c      	ldr	r3, [pc, #176]	; (8008e44 <cppLoop+0x11f4>)
 8008d92:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008d94:	2200      	movs	r2, #0
 8008d96:	f04f 31ff 	mov.w	r1, #4294967295
 8008d9a:	4823      	ldr	r0, [pc, #140]	; (8008e28 <cppLoop+0x11d8>)
 8008d9c:	f7f9 fb16 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008da0:	f000 befa 	b.w	8009b98 <cppLoop+0x1f48>
		else if(joy_stick.getValue() == JOY_C){
 8008da4:	4824      	ldr	r0, [pc, #144]	; (8008e38 <cppLoop+0x11e8>)
 8008da6:	f7f9 f9f1 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	bf0c      	ite	eq
 8008db0:	2301      	moveq	r3, #1
 8008db2:	2300      	movne	r3, #0
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 86ee 	beq.w	8009b98 <cppLoop+0x1f48>
			led.LR(-1, 1);
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f04f 31ff 	mov.w	r1, #4294967295
 8008dc2:	4819      	ldr	r0, [pc, #100]	; (8008e28 <cppLoop+0x11d8>)
 8008dc4:	f7f9 fb02 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008dc8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008dcc:	f001 f820 	bl	8009e10 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	4b1a      	ldr	r3, [pc, #104]	; (8008e40 <cppLoop+0x11f0>)
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	491b      	ldr	r1, [pc, #108]	; (8008e48 <cppLoop+0x11f8>)
 8008dda:	481c      	ldr	r0, [pc, #112]	; (8008e4c <cppLoop+0x11fc>)
 8008ddc:	f7f8 fd4e 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008de0:	2300      	movs	r3, #0
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	4b17      	ldr	r3, [pc, #92]	; (8008e44 <cppLoop+0x11f4>)
 8008de6:	2201      	movs	r2, #1
 8008de8:	4919      	ldr	r1, [pc, #100]	; (8008e50 <cppLoop+0x1200>)
 8008dea:	4818      	ldr	r0, [pc, #96]	; (8008e4c <cppLoop+0x11fc>)
 8008dec:	f7f8 fd46 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008df0:	4b13      	ldr	r3, [pc, #76]	; (8008e40 <cppLoop+0x11f0>)
 8008df2:	edd3 7a00 	vldr	s15, [r3]
 8008df6:	eeb0 0a67 	vmov.f32	s0, s15
 8008dfa:	480c      	ldr	r0, [pc, #48]	; (8008e2c <cppLoop+0x11dc>)
 8008dfc:	f7fa ffe5 	bl	8003dca <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008e00:	4b10      	ldr	r3, [pc, #64]	; (8008e44 <cppLoop+0x11f4>)
 8008e02:	edd3 7a00 	vldr	s15, [r3]
 8008e06:	eeb0 0a67 	vmov.f32	s0, s15
 8008e0a:	4808      	ldr	r0, [pc, #32]	; (8008e2c <cppLoop+0x11dc>)
 8008e0c:	f7fa fffd 	bl	8003e0a <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008e10:	2200      	movs	r2, #0
 8008e12:	f04f 31ff 	mov.w	r1, #4294967295
 8008e16:	4804      	ldr	r0, [pc, #16]	; (8008e28 <cppLoop+0x11d8>)
 8008e18:	f7f9 fad8 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008e1c:	f000 bebc 	b.w	8009b98 <cppLoop+0x1f48>
 8008e20:	9999999a 	.word	0x9999999a
 8008e24:	3fb99999 	.word	0x3fb99999
 8008e28:	200005d0 	.word	0x200005d0
 8008e2c:	2001db64 	.word	0x2001db64
 8008e30:	08019fa8 	.word	0x08019fa8
 8008e34:	08019f6c 	.word	0x08019f6c
 8008e38:	200005c4 	.word	0x200005c4
 8008e3c:	2004224a 	.word	0x2004224a
 8008e40:	2004228c 	.word	0x2004228c
 8008e44:	2004229c 	.word	0x2004229c
 8008e48:	08019fb4 	.word	0x08019fb4
 8008e4c:	08019f10 	.word	0x08019f10
 8008e50:	08019fc0 	.word	0x08019fc0

	case 7:
		led.fullColor('W');
 8008e54:	2157      	movs	r1, #87	; 0x57
 8008e56:	48c2      	ldr	r0, [pc, #776]	; (8009160 <cppLoop+0x1510>)
 8008e58:	f7f9 f9fc 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008e5c:	f7f8 f920 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008e60:	2100      	movs	r1, #0
 8008e62:	2000      	movs	r0, #0
 8008e64:	f7f8 f92c 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008e68:	48be      	ldr	r0, [pc, #760]	; (8009164 <cppLoop+0x1514>)
 8008e6a:	f7fb f862 	bl	8003f32 <_ZN9LineTrace9getMaxAccEv>
 8008e6e:	ee10 3a10 	vmov	r3, s0
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7f7 fb80 	bl	8000578 <__aeabi_f2d>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	460c      	mov	r4, r1
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	4623      	mov	r3, r4
 8008e80:	48b9      	ldr	r0, [pc, #740]	; (8009168 <cppLoop+0x1518>)
 8008e82:	f7f8 f947 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008e86:	2101      	movs	r1, #1
 8008e88:	2000      	movs	r0, #0
 8008e8a:	f7f8 f919 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008e8e:	48b5      	ldr	r0, [pc, #724]	; (8009164 <cppLoop+0x1514>)
 8008e90:	f7fb f885 	bl	8003f9e <_ZN9LineTrace9getMaxDecEv>
 8008e94:	ee10 3a10 	vmov	r3, s0
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7f7 fb6d 	bl	8000578 <__aeabi_f2d>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	4623      	mov	r3, r4
 8008ea6:	48b1      	ldr	r0, [pc, #708]	; (800916c <cppLoop+0x151c>)
 8008ea8:	f7f8 f934 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008eac:	48b0      	ldr	r0, [pc, #704]	; (8009170 <cppLoop+0x1520>)
 8008eae:	f7f9 f96d 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b08      	cmp	r3, #8
 8008eb6:	bf0c      	ite	eq
 8008eb8:	2301      	moveq	r3, #1
 8008eba:	2300      	movne	r3, #0
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d022      	beq.n	8008f08 <cppLoop+0x12b8>
			led.LR(-1, 1);
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8008ec8:	48a5      	ldr	r0, [pc, #660]	; (8009160 <cppLoop+0x1510>)
 8008eca:	f7f9 fa7f 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008ece:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008ed2:	f000 ff9d 	bl	8009e10 <HAL_Delay>

			selector_acc++;
 8008ed6:	4ba7      	ldr	r3, [pc, #668]	; (8009174 <cppLoop+0x1524>)
 8008ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	3301      	adds	r3, #1
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	b21a      	sxth	r2, r3
 8008ee4:	4ba3      	ldr	r3, [pc, #652]	; (8009174 <cppLoop+0x1524>)
 8008ee6:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008ee8:	4ba2      	ldr	r3, [pc, #648]	; (8009174 <cppLoop+0x1524>)
 8008eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	dd02      	ble.n	8008ef8 <cppLoop+0x12a8>
 8008ef2:	4ba0      	ldr	r3, [pc, #640]	; (8009174 <cppLoop+0x1524>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f04f 31ff 	mov.w	r1, #4294967295
 8008efe:	4898      	ldr	r0, [pc, #608]	; (8009160 <cppLoop+0x1510>)
 8008f00:	f7f9 fa64 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008f04:	f000 be4a 	b.w	8009b9c <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_R){
 8008f08:	4899      	ldr	r0, [pc, #612]	; (8009170 <cppLoop+0x1520>)
 8008f0a:	f7f9 f93f 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b10      	cmp	r3, #16
 8008f12:	bf0c      	ite	eq
 8008f14:	2301      	moveq	r3, #1
 8008f16:	2300      	movne	r3, #0
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d03c      	beq.n	8008f98 <cppLoop+0x1348>
			led.LR(-1, 1);
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f04f 31ff 	mov.w	r1, #4294967295
 8008f24:	488e      	ldr	r0, [pc, #568]	; (8009160 <cppLoop+0x1510>)
 8008f26:	f7f9 fa51 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008f2a:	2064      	movs	r0, #100	; 0x64
 8008f2c:	f000 ff70 	bl	8009e10 <HAL_Delay>
			if(selector_acc == 0){
 8008f30:	4b90      	ldr	r3, [pc, #576]	; (8009174 <cppLoop+0x1524>)
 8008f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d113      	bne.n	8008f62 <cppLoop+0x1312>
				adj_acc = adj_acc + 0.1;
 8008f3a:	4b8f      	ldr	r3, [pc, #572]	; (8009178 <cppLoop+0x1528>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7f7 fb1a 	bl	8000578 <__aeabi_f2d>
 8008f44:	a384      	add	r3, pc, #528	; (adr r3, 8009158 <cppLoop+0x1508>)
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	f7f7 f9b7 	bl	80002bc <__adddf3>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	460c      	mov	r4, r1
 8008f52:	4618      	mov	r0, r3
 8008f54:	4621      	mov	r1, r4
 8008f56:	f7f7 fe5f 	bl	8000c18 <__aeabi_d2f>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	4b86      	ldr	r3, [pc, #536]	; (8009178 <cppLoop+0x1528>)
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	e012      	b.n	8008f88 <cppLoop+0x1338>
				adj_dec = adj_dec + 0.1;
 8008f62:	4b86      	ldr	r3, [pc, #536]	; (800917c <cppLoop+0x152c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7f7 fb06 	bl	8000578 <__aeabi_f2d>
 8008f6c:	a37a      	add	r3, pc, #488	; (adr r3, 8009158 <cppLoop+0x1508>)
 8008f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f72:	f7f7 f9a3 	bl	80002bc <__adddf3>
 8008f76:	4603      	mov	r3, r0
 8008f78:	460c      	mov	r4, r1
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	f7f7 fe4b 	bl	8000c18 <__aeabi_d2f>
 8008f82:	4602      	mov	r2, r0
 8008f84:	4b7d      	ldr	r3, [pc, #500]	; (800917c <cppLoop+0x152c>)
 8008f86:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f04f 31ff 	mov.w	r1, #4294967295
 8008f8e:	4874      	ldr	r0, [pc, #464]	; (8009160 <cppLoop+0x1510>)
 8008f90:	f7f9 fa1c 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8008f94:	f000 be02 	b.w	8009b9c <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_L){
 8008f98:	4875      	ldr	r0, [pc, #468]	; (8009170 <cppLoop+0x1520>)
 8008f9a:	f7f9 f8f7 	bl	800218c <_ZN8JoyStick8getValueEv>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	bf0c      	ite	eq
 8008fa4:	2301      	moveq	r3, #1
 8008fa6:	2300      	movne	r3, #0
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d03c      	beq.n	8009028 <cppLoop+0x13d8>
			led.LR(-1, 1);
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8008fb4:	486a      	ldr	r0, [pc, #424]	; (8009160 <cppLoop+0x1510>)
 8008fb6:	f7f9 fa09 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008fba:	2064      	movs	r0, #100	; 0x64
 8008fbc:	f000 ff28 	bl	8009e10 <HAL_Delay>
			if(selector_acc == 0){
 8008fc0:	4b6c      	ldr	r3, [pc, #432]	; (8009174 <cppLoop+0x1524>)
 8008fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d113      	bne.n	8008ff2 <cppLoop+0x13a2>
				adj_acc = adj_acc - 0.1;
 8008fca:	4b6b      	ldr	r3, [pc, #428]	; (8009178 <cppLoop+0x1528>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7f7 fad2 	bl	8000578 <__aeabi_f2d>
 8008fd4:	a360      	add	r3, pc, #384	; (adr r3, 8009158 <cppLoop+0x1508>)
 8008fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fda:	f7f7 f96d 	bl	80002b8 <__aeabi_dsub>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	f7f7 fe17 	bl	8000c18 <__aeabi_d2f>
 8008fea:	4602      	mov	r2, r0
 8008fec:	4b62      	ldr	r3, [pc, #392]	; (8009178 <cppLoop+0x1528>)
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	e012      	b.n	8009018 <cppLoop+0x13c8>
				adj_dec = adj_dec - 0.1;
 8008ff2:	4b62      	ldr	r3, [pc, #392]	; (800917c <cppLoop+0x152c>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7f7 fabe 	bl	8000578 <__aeabi_f2d>
 8008ffc:	a356      	add	r3, pc, #344	; (adr r3, 8009158 <cppLoop+0x1508>)
 8008ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009002:	f7f7 f959 	bl	80002b8 <__aeabi_dsub>
 8009006:	4603      	mov	r3, r0
 8009008:	460c      	mov	r4, r1
 800900a:	4618      	mov	r0, r3
 800900c:	4621      	mov	r1, r4
 800900e:	f7f7 fe03 	bl	8000c18 <__aeabi_d2f>
 8009012:	4602      	mov	r2, r0
 8009014:	4b59      	ldr	r3, [pc, #356]	; (800917c <cppLoop+0x152c>)
 8009016:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009018:	2200      	movs	r2, #0
 800901a:	f04f 31ff 	mov.w	r1, #4294967295
 800901e:	4850      	ldr	r0, [pc, #320]	; (8009160 <cppLoop+0x1510>)
 8009020:	f7f9 f9d4 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009024:	f000 bdba 	b.w	8009b9c <cppLoop+0x1f4c>
		else if(joy_stick.getValue() == JOY_C){
 8009028:	4851      	ldr	r0, [pc, #324]	; (8009170 <cppLoop+0x1520>)
 800902a:	f7f9 f8af 	bl	800218c <_ZN8JoyStick8getValueEv>
 800902e:	4603      	mov	r3, r0
 8009030:	2b02      	cmp	r3, #2
 8009032:	bf0c      	ite	eq
 8009034:	2301      	moveq	r3, #1
 8009036:	2300      	movne	r3, #0
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 85ae 	beq.w	8009b9c <cppLoop+0x1f4c>
			led.LR(-1, 1);
 8009040:	2201      	movs	r2, #1
 8009042:	f04f 31ff 	mov.w	r1, #4294967295
 8009046:	4846      	ldr	r0, [pc, #280]	; (8009160 <cppLoop+0x1510>)
 8009048:	f7f9 f9c0 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800904c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009050:	f000 fede 	bl	8009e10 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8009054:	2300      	movs	r3, #0
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	4b47      	ldr	r3, [pc, #284]	; (8009178 <cppLoop+0x1528>)
 800905a:	2201      	movs	r2, #1
 800905c:	4948      	ldr	r1, [pc, #288]	; (8009180 <cppLoop+0x1530>)
 800905e:	4849      	ldr	r0, [pc, #292]	; (8009184 <cppLoop+0x1534>)
 8009060:	f7f8 fc0c 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8009064:	2300      	movs	r3, #0
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	4b44      	ldr	r3, [pc, #272]	; (800917c <cppLoop+0x152c>)
 800906a:	2201      	movs	r2, #1
 800906c:	4946      	ldr	r1, [pc, #280]	; (8009188 <cppLoop+0x1538>)
 800906e:	4845      	ldr	r0, [pc, #276]	; (8009184 <cppLoop+0x1534>)
 8009070:	f7f8 fc04 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8009074:	4b40      	ldr	r3, [pc, #256]	; (8009178 <cppLoop+0x1528>)
 8009076:	edd3 7a00 	vldr	s15, [r3]
 800907a:	4b40      	ldr	r3, [pc, #256]	; (800917c <cppLoop+0x152c>)
 800907c:	ed93 7a00 	vldr	s14, [r3]
 8009080:	eef0 0a47 	vmov.f32	s1, s14
 8009084:	eeb0 0a67 	vmov.f32	s0, s15
 8009088:	4836      	ldr	r0, [pc, #216]	; (8009164 <cppLoop+0x1514>)
 800908a:	f7fa ff1e 	bl	8003eca <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 800908e:	2200      	movs	r2, #0
 8009090:	f04f 31ff 	mov.w	r1, #4294967295
 8009094:	4832      	ldr	r0, [pc, #200]	; (8009160 <cppLoop+0x1510>)
 8009096:	f7f9 f999 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800909a:	f000 bd7f 	b.w	8009b9c <cppLoop+0x1f4c>

	case 8:
		led.fullColor('W');
 800909e:	2157      	movs	r1, #87	; 0x57
 80090a0:	482f      	ldr	r0, [pc, #188]	; (8009160 <cppLoop+0x1510>)
 80090a2:	f7f9 f8d7 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80090a6:	f7f7 fffb 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80090aa:	2100      	movs	r1, #0
 80090ac:	2000      	movs	r0, #0
 80090ae:	f7f8 f807 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 80090b2:	482c      	ldr	r0, [pc, #176]	; (8009164 <cppLoop+0x1514>)
 80090b4:	f7fa ff61 	bl	8003f7a <_ZN9LineTrace10getMaxAcc2Ev>
 80090b8:	ee10 3a10 	vmov	r3, s0
 80090bc:	4618      	mov	r0, r3
 80090be:	f7f7 fa5b 	bl	8000578 <__aeabi_f2d>
 80090c2:	4603      	mov	r3, r0
 80090c4:	460c      	mov	r4, r1
 80090c6:	461a      	mov	r2, r3
 80090c8:	4623      	mov	r3, r4
 80090ca:	4830      	ldr	r0, [pc, #192]	; (800918c <cppLoop+0x153c>)
 80090cc:	f7f8 f822 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80090d0:	2101      	movs	r1, #1
 80090d2:	2000      	movs	r0, #0
 80090d4:	f7f7 fff4 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 80090d8:	4822      	ldr	r0, [pc, #136]	; (8009164 <cppLoop+0x1514>)
 80090da:	f7fa ff3c 	bl	8003f56 <_ZN9LineTrace10getMaxDec2Ev>
 80090de:	ee10 3a10 	vmov	r3, s0
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7f7 fa48 	bl	8000578 <__aeabi_f2d>
 80090e8:	4603      	mov	r3, r0
 80090ea:	460c      	mov	r4, r1
 80090ec:	461a      	mov	r2, r3
 80090ee:	4623      	mov	r3, r4
 80090f0:	4827      	ldr	r0, [pc, #156]	; (8009190 <cppLoop+0x1540>)
 80090f2:	f7f8 f80f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80090f6:	481e      	ldr	r0, [pc, #120]	; (8009170 <cppLoop+0x1520>)
 80090f8:	f7f9 f848 	bl	800218c <_ZN8JoyStick8getValueEv>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b08      	cmp	r3, #8
 8009100:	bf0c      	ite	eq
 8009102:	2301      	moveq	r3, #1
 8009104:	2300      	movne	r3, #0
 8009106:	b2db      	uxtb	r3, r3
 8009108:	2b00      	cmp	r3, #0
 800910a:	d045      	beq.n	8009198 <cppLoop+0x1548>
			led.LR(-1, 1);
 800910c:	2201      	movs	r2, #1
 800910e:	f04f 31ff 	mov.w	r1, #4294967295
 8009112:	4813      	ldr	r0, [pc, #76]	; (8009160 <cppLoop+0x1510>)
 8009114:	f7f9 f95a 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009118:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800911c:	f000 fe78 	bl	8009e10 <HAL_Delay>

			selector_acc2++;
 8009120:	4b1c      	ldr	r3, [pc, #112]	; (8009194 <cppLoop+0x1544>)
 8009122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009126:	b29b      	uxth	r3, r3
 8009128:	3301      	adds	r3, #1
 800912a:	b29b      	uxth	r3, r3
 800912c:	b21a      	sxth	r2, r3
 800912e:	4b19      	ldr	r3, [pc, #100]	; (8009194 <cppLoop+0x1544>)
 8009130:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8009132:	4b18      	ldr	r3, [pc, #96]	; (8009194 <cppLoop+0x1544>)
 8009134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009138:	2b01      	cmp	r3, #1
 800913a:	dd02      	ble.n	8009142 <cppLoop+0x14f2>
 800913c:	4b15      	ldr	r3, [pc, #84]	; (8009194 <cppLoop+0x1544>)
 800913e:	2200      	movs	r2, #0
 8009140:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009142:	2200      	movs	r2, #0
 8009144:	f04f 31ff 	mov.w	r1, #4294967295
 8009148:	4805      	ldr	r0, [pc, #20]	; (8009160 <cppLoop+0x1510>)
 800914a:	f7f9 f93f 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 800914e:	f000 bd27 	b.w	8009ba0 <cppLoop+0x1f50>
 8009152:	bf00      	nop
 8009154:	f3af 8000 	nop.w
 8009158:	9999999a 	.word	0x9999999a
 800915c:	3fb99999 	.word	0x3fb99999
 8009160:	200005d0 	.word	0x200005d0
 8009164:	2001db64 	.word	0x2001db64
 8009168:	08019fcc 	.word	0x08019fcc
 800916c:	08019fd8 	.word	0x08019fd8
 8009170:	200005c4 	.word	0x200005c4
 8009174:	20042244 	.word	0x20042244
 8009178:	200422a4 	.word	0x200422a4
 800917c:	200422ac 	.word	0x200422ac
 8009180:	08019fe4 	.word	0x08019fe4
 8009184:	08019f10 	.word	0x08019f10
 8009188:	08019fec 	.word	0x08019fec
 800918c:	08019ff4 	.word	0x08019ff4
 8009190:	0801a000 	.word	0x0801a000
 8009194:	20042246 	.word	0x20042246
		else if(joy_stick.getValue() == JOY_R){
 8009198:	48bf      	ldr	r0, [pc, #764]	; (8009498 <cppLoop+0x1848>)
 800919a:	f7f8 fff7 	bl	800218c <_ZN8JoyStick8getValueEv>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b10      	cmp	r3, #16
 80091a2:	bf0c      	ite	eq
 80091a4:	2301      	moveq	r3, #1
 80091a6:	2300      	movne	r3, #0
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d03c      	beq.n	8009228 <cppLoop+0x15d8>
			led.LR(-1, 1);
 80091ae:	2201      	movs	r2, #1
 80091b0:	f04f 31ff 	mov.w	r1, #4294967295
 80091b4:	48b9      	ldr	r0, [pc, #740]	; (800949c <cppLoop+0x184c>)
 80091b6:	f7f9 f909 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80091ba:	2064      	movs	r0, #100	; 0x64
 80091bc:	f000 fe28 	bl	8009e10 <HAL_Delay>
			if(selector_acc2 == 0){
 80091c0:	4bb7      	ldr	r3, [pc, #732]	; (80094a0 <cppLoop+0x1850>)
 80091c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d113      	bne.n	80091f2 <cppLoop+0x15a2>
				adj_acc2 = adj_acc2 + 0.1;
 80091ca:	4bb6      	ldr	r3, [pc, #728]	; (80094a4 <cppLoop+0x1854>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7f7 f9d2 	bl	8000578 <__aeabi_f2d>
 80091d4:	a3ae      	add	r3, pc, #696	; (adr r3, 8009490 <cppLoop+0x1840>)
 80091d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091da:	f7f7 f86f 	bl	80002bc <__adddf3>
 80091de:	4603      	mov	r3, r0
 80091e0:	460c      	mov	r4, r1
 80091e2:	4618      	mov	r0, r3
 80091e4:	4621      	mov	r1, r4
 80091e6:	f7f7 fd17 	bl	8000c18 <__aeabi_d2f>
 80091ea:	4602      	mov	r2, r0
 80091ec:	4bad      	ldr	r3, [pc, #692]	; (80094a4 <cppLoop+0x1854>)
 80091ee:	601a      	str	r2, [r3, #0]
 80091f0:	e012      	b.n	8009218 <cppLoop+0x15c8>
				adj_dec2 = adj_dec2 + 0.1;
 80091f2:	4bad      	ldr	r3, [pc, #692]	; (80094a8 <cppLoop+0x1858>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7f7 f9be 	bl	8000578 <__aeabi_f2d>
 80091fc:	a3a4      	add	r3, pc, #656	; (adr r3, 8009490 <cppLoop+0x1840>)
 80091fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009202:	f7f7 f85b 	bl	80002bc <__adddf3>
 8009206:	4603      	mov	r3, r0
 8009208:	460c      	mov	r4, r1
 800920a:	4618      	mov	r0, r3
 800920c:	4621      	mov	r1, r4
 800920e:	f7f7 fd03 	bl	8000c18 <__aeabi_d2f>
 8009212:	4602      	mov	r2, r0
 8009214:	4ba4      	ldr	r3, [pc, #656]	; (80094a8 <cppLoop+0x1858>)
 8009216:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009218:	2200      	movs	r2, #0
 800921a:	f04f 31ff 	mov.w	r1, #4294967295
 800921e:	489f      	ldr	r0, [pc, #636]	; (800949c <cppLoop+0x184c>)
 8009220:	f7f9 f8d4 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009224:	f000 bcbc 	b.w	8009ba0 <cppLoop+0x1f50>
		else if(joy_stick.getValue() == JOY_L){
 8009228:	489b      	ldr	r0, [pc, #620]	; (8009498 <cppLoop+0x1848>)
 800922a:	f7f8 ffaf 	bl	800218c <_ZN8JoyStick8getValueEv>
 800922e:	4603      	mov	r3, r0
 8009230:	2b01      	cmp	r3, #1
 8009232:	bf0c      	ite	eq
 8009234:	2301      	moveq	r3, #1
 8009236:	2300      	movne	r3, #0
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d03c      	beq.n	80092b8 <cppLoop+0x1668>
			led.LR(-1, 1);
 800923e:	2201      	movs	r2, #1
 8009240:	f04f 31ff 	mov.w	r1, #4294967295
 8009244:	4895      	ldr	r0, [pc, #596]	; (800949c <cppLoop+0x184c>)
 8009246:	f7f9 f8c1 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800924a:	2064      	movs	r0, #100	; 0x64
 800924c:	f000 fde0 	bl	8009e10 <HAL_Delay>
			if(selector_acc2 == 0){
 8009250:	4b93      	ldr	r3, [pc, #588]	; (80094a0 <cppLoop+0x1850>)
 8009252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d113      	bne.n	8009282 <cppLoop+0x1632>
				adj_acc2 = adj_acc2 - 0.1;
 800925a:	4b92      	ldr	r3, [pc, #584]	; (80094a4 <cppLoop+0x1854>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4618      	mov	r0, r3
 8009260:	f7f7 f98a 	bl	8000578 <__aeabi_f2d>
 8009264:	a38a      	add	r3, pc, #552	; (adr r3, 8009490 <cppLoop+0x1840>)
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926a:	f7f7 f825 	bl	80002b8 <__aeabi_dsub>
 800926e:	4603      	mov	r3, r0
 8009270:	460c      	mov	r4, r1
 8009272:	4618      	mov	r0, r3
 8009274:	4621      	mov	r1, r4
 8009276:	f7f7 fccf 	bl	8000c18 <__aeabi_d2f>
 800927a:	4602      	mov	r2, r0
 800927c:	4b89      	ldr	r3, [pc, #548]	; (80094a4 <cppLoop+0x1854>)
 800927e:	601a      	str	r2, [r3, #0]
 8009280:	e012      	b.n	80092a8 <cppLoop+0x1658>
				adj_dec2 = adj_dec2 - 0.1;
 8009282:	4b89      	ldr	r3, [pc, #548]	; (80094a8 <cppLoop+0x1858>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4618      	mov	r0, r3
 8009288:	f7f7 f976 	bl	8000578 <__aeabi_f2d>
 800928c:	a380      	add	r3, pc, #512	; (adr r3, 8009490 <cppLoop+0x1840>)
 800928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009292:	f7f7 f811 	bl	80002b8 <__aeabi_dsub>
 8009296:	4603      	mov	r3, r0
 8009298:	460c      	mov	r4, r1
 800929a:	4618      	mov	r0, r3
 800929c:	4621      	mov	r1, r4
 800929e:	f7f7 fcbb 	bl	8000c18 <__aeabi_d2f>
 80092a2:	4602      	mov	r2, r0
 80092a4:	4b80      	ldr	r3, [pc, #512]	; (80094a8 <cppLoop+0x1858>)
 80092a6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80092a8:	2200      	movs	r2, #0
 80092aa:	f04f 31ff 	mov.w	r1, #4294967295
 80092ae:	487b      	ldr	r0, [pc, #492]	; (800949c <cppLoop+0x184c>)
 80092b0:	f7f9 f88c 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80092b4:	f000 bc74 	b.w	8009ba0 <cppLoop+0x1f50>
		else if(joy_stick.getValue() == JOY_C){
 80092b8:	4877      	ldr	r0, [pc, #476]	; (8009498 <cppLoop+0x1848>)
 80092ba:	f7f8 ff67 	bl	800218c <_ZN8JoyStick8getValueEv>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	bf0c      	ite	eq
 80092c4:	2301      	moveq	r3, #1
 80092c6:	2300      	movne	r3, #0
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f000 8468 	beq.w	8009ba0 <cppLoop+0x1f50>
			led.LR(-1, 1);
 80092d0:	2201      	movs	r2, #1
 80092d2:	f04f 31ff 	mov.w	r1, #4294967295
 80092d6:	4871      	ldr	r0, [pc, #452]	; (800949c <cppLoop+0x184c>)
 80092d8:	f7f9 f878 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80092dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80092e0:	f000 fd96 	bl	8009e10 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 80092e4:	2300      	movs	r3, #0
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	4b6e      	ldr	r3, [pc, #440]	; (80094a4 <cppLoop+0x1854>)
 80092ea:	2201      	movs	r2, #1
 80092ec:	496f      	ldr	r1, [pc, #444]	; (80094ac <cppLoop+0x185c>)
 80092ee:	4870      	ldr	r0, [pc, #448]	; (80094b0 <cppLoop+0x1860>)
 80092f0:	f7f8 fac4 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 80092f4:	2300      	movs	r3, #0
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	4b6b      	ldr	r3, [pc, #428]	; (80094a8 <cppLoop+0x1858>)
 80092fa:	2201      	movs	r2, #1
 80092fc:	496d      	ldr	r1, [pc, #436]	; (80094b4 <cppLoop+0x1864>)
 80092fe:	486c      	ldr	r0, [pc, #432]	; (80094b0 <cppLoop+0x1860>)
 8009300:	f7f8 fabc 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8009304:	4b67      	ldr	r3, [pc, #412]	; (80094a4 <cppLoop+0x1854>)
 8009306:	edd3 7a00 	vldr	s15, [r3]
 800930a:	4b67      	ldr	r3, [pc, #412]	; (80094a8 <cppLoop+0x1858>)
 800930c:	ed93 7a00 	vldr	s14, [r3]
 8009310:	eef0 0a47 	vmov.f32	s1, s14
 8009314:	eeb0 0a67 	vmov.f32	s0, s15
 8009318:	4867      	ldr	r0, [pc, #412]	; (80094b8 <cppLoop+0x1868>)
 800931a:	f7fa fdf0 	bl	8003efe <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 800931e:	2200      	movs	r2, #0
 8009320:	f04f 31ff 	mov.w	r1, #4294967295
 8009324:	485d      	ldr	r0, [pc, #372]	; (800949c <cppLoop+0x184c>)
 8009326:	f7f9 f851 	bl	80023cc <_ZN3LED2LREaa>
		break;
 800932a:	f000 bc39 	b.w	8009ba0 <cppLoop+0x1f50>

	case 9:
		led.fullColor('~');
 800932e:	217e      	movs	r1, #126	; 0x7e
 8009330:	485a      	ldr	r0, [pc, #360]	; (800949c <cppLoop+0x184c>)
 8009332:	f7f8 ff8f 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009336:	f7f7 feb3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800933a:	2100      	movs	r1, #0
 800933c:	2000      	movs	r0, #0
 800933e:	f7f7 febf 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8009342:	485e      	ldr	r0, [pc, #376]	; (80094bc <cppLoop+0x186c>)
 8009344:	f7f7 fee6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009348:	2101      	movs	r1, #1
 800934a:	2000      	movs	r0, #0
 800934c:	f7f7 feb8 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8009350:	485b      	ldr	r0, [pc, #364]	; (80094c0 <cppLoop+0x1870>)
 8009352:	f7f7 fedf 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009356:	4850      	ldr	r0, [pc, #320]	; (8009498 <cppLoop+0x1848>)
 8009358:	f7f8 ff18 	bl	800218c <_ZN8JoyStick8getValueEv>
 800935c:	4603      	mov	r3, r0
 800935e:	2b02      	cmp	r3, #2
 8009360:	bf0c      	ite	eq
 8009362:	2301      	moveq	r3, #1
 8009364:	2300      	movne	r3, #0
 8009366:	b2db      	uxtb	r3, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 841b 	beq.w	8009ba4 <cppLoop+0x1f54>
			led.LR(-1, 1);
 800936e:	2201      	movs	r2, #1
 8009370:	f04f 31ff 	mov.w	r1, #4294967295
 8009374:	4849      	ldr	r0, [pc, #292]	; (800949c <cppLoop+0x184c>)
 8009376:	f7f9 f829 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(500);
 800937a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800937e:	f000 fd47 	bl	8009e10 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8009382:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80094c4 <cppLoop+0x1874>
 8009386:	484c      	ldr	r0, [pc, #304]	; (80094b8 <cppLoop+0x1868>)
 8009388:	f7fa fcf0 	bl	8003d6c <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800938c:	484a      	ldr	r0, [pc, #296]	; (80094b8 <cppLoop+0x1868>)
 800938e:	f7fa ff25 	bl	80041dc <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8009392:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009396:	f000 fd3b 	bl	8009e10 <HAL_Delay>

			led.fullColor('R');
 800939a:	2152      	movs	r1, #82	; 0x52
 800939c:	483f      	ldr	r0, [pc, #252]	; (800949c <cppLoop+0x184c>)
 800939e:	f7f8 ff59 	bl	8002254 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 80093a2:	4849      	ldr	r0, [pc, #292]	; (80094c8 <cppLoop+0x1878>)
 80093a4:	f7f8 f9bc 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 80093a8:	f242 7010 	movw	r0, #10000	; 0x2710
 80093ac:	f000 fd30 	bl	8009e10 <HAL_Delay>

			line_trace.stop();
 80093b0:	4841      	ldr	r0, [pc, #260]	; (80094b8 <cppLoop+0x1868>)
 80093b2:	f7fa ffb9 	bl	8004328 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80093b6:	4945      	ldr	r1, [pc, #276]	; (80094cc <cppLoop+0x187c>)
 80093b8:	4845      	ldr	r0, [pc, #276]	; (80094d0 <cppLoop+0x1880>)
 80093ba:	f7f8 f9ea 	bl	8001792 <user_fopen>
			float d = encoder.getDistance();
 80093be:	4842      	ldr	r0, [pc, #264]	; (80094c8 <cppLoop+0x1878>)
 80093c0:	f7f8 f972 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 80093c4:	eef0 7a40 	vmov.f32	s15, s0
 80093c8:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 80093cc:	1d3b      	adds	r3, r7, #4
 80093ce:	2201      	movs	r2, #1
 80093d0:	4619      	mov	r1, r3
 80093d2:	2001      	movs	r0, #1
 80093d4:	f7f8 fa00 	bl	80017d8 <sd_write_float>
			user_fclose();
 80093d8:	f7f8 f9ee 	bl	80017b8 <user_fclose>

			led.LR(-1, 0);
 80093dc:	2200      	movs	r2, #0
 80093de:	f04f 31ff 	mov.w	r1, #4294967295
 80093e2:	482e      	ldr	r0, [pc, #184]	; (800949c <cppLoop+0x184c>)
 80093e4:	f7f8 fff2 	bl	80023cc <_ZN3LED2LREaa>
		}
		break;
 80093e8:	e3dc      	b.n	8009ba4 <cppLoop+0x1f54>

	case 10:
		led.fullColor('~');
 80093ea:	217e      	movs	r1, #126	; 0x7e
 80093ec:	482b      	ldr	r0, [pc, #172]	; (800949c <cppLoop+0x184c>)
 80093ee:	f7f8 ff31 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80093f2:	f7f7 fe55 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80093f6:	2100      	movs	r1, #0
 80093f8:	2000      	movs	r0, #0
 80093fa:	f7f7 fe61 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80093fe:	4835      	ldr	r0, [pc, #212]	; (80094d4 <cppLoop+0x1884>)
 8009400:	f7f7 fe88 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009404:	2101      	movs	r1, #1
 8009406:	2000      	movs	r0, #0
 8009408:	f7f7 fe5a 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 800940c:	4832      	ldr	r0, [pc, #200]	; (80094d8 <cppLoop+0x1888>)
 800940e:	f7f7 fe81 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8009412:	4821      	ldr	r0, [pc, #132]	; (8009498 <cppLoop+0x1848>)
 8009414:	f7f8 feba 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009418:	4603      	mov	r3, r0
 800941a:	2b02      	cmp	r3, #2
 800941c:	bf0c      	ite	eq
 800941e:	2301      	moveq	r3, #1
 8009420:	2300      	movne	r3, #0
 8009422:	b2db      	uxtb	r3, r3
 8009424:	2b00      	cmp	r3, #0
 8009426:	f000 83bf 	beq.w	8009ba8 <cppLoop+0x1f58>
			HAL_Delay(500);
 800942a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800942e:	f000 fcef 	bl	8009e10 <HAL_Delay>
			led.LR(-1, 1);
 8009432:	2201      	movs	r2, #1
 8009434:	f04f 31ff 	mov.w	r1, #4294967295
 8009438:	4818      	ldr	r0, [pc, #96]	; (800949c <cppLoop+0x184c>)
 800943a:	f7f8 ffc7 	bl	80023cc <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 800943e:	2102      	movs	r1, #2
 8009440:	481d      	ldr	r0, [pc, #116]	; (80094b8 <cppLoop+0x1868>)
 8009442:	f7fa feb9 	bl	80041b8 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8009446:	4b25      	ldr	r3, [pc, #148]	; (80094dc <cppLoop+0x188c>)
 8009448:	edd3 7a00 	vldr	s15, [r3]
 800944c:	eeb0 0a67 	vmov.f32	s0, s15
 8009450:	4819      	ldr	r0, [pc, #100]	; (80094b8 <cppLoop+0x1868>)
 8009452:	f7fa fc9a 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009456:	4b21      	ldr	r3, [pc, #132]	; (80094dc <cppLoop+0x188c>)
 8009458:	edd3 7a00 	vldr	s15, [r3]
 800945c:	eeb0 0a67 	vmov.f32	s0, s15
 8009460:	4815      	ldr	r0, [pc, #84]	; (80094b8 <cppLoop+0x1868>)
 8009462:	f7fa fca2 	bl	8003daa <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009466:	4b1d      	ldr	r3, [pc, #116]	; (80094dc <cppLoop+0x188c>)
 8009468:	edd3 7a00 	vldr	s15, [r3]
 800946c:	eeb0 0a67 	vmov.f32	s0, s15
 8009470:	4811      	ldr	r0, [pc, #68]	; (80094b8 <cppLoop+0x1868>)
 8009472:	f7fa fcba 	bl	8003dea <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009476:	4810      	ldr	r0, [pc, #64]	; (80094b8 <cppLoop+0x1868>)
 8009478:	f7fb f89a 	bl	80045b0 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 800947c:	2200      	movs	r2, #0
 800947e:	f04f 31ff 	mov.w	r1, #4294967295
 8009482:	4806      	ldr	r0, [pc, #24]	; (800949c <cppLoop+0x184c>)
 8009484:	f7f8 ffa2 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 8009488:	e38e      	b.n	8009ba8 <cppLoop+0x1f58>
 800948a:	bf00      	nop
 800948c:	f3af 8000 	nop.w
 8009490:	9999999a 	.word	0x9999999a
 8009494:	3fb99999 	.word	0x3fb99999
 8009498:	200005c4 	.word	0x200005c4
 800949c:	200005d0 	.word	0x200005d0
 80094a0:	20042246 	.word	0x20042246
 80094a4:	200422b4 	.word	0x200422b4
 80094a8:	200422bc 	.word	0x200422bc
 80094ac:	0801a00c 	.word	0x0801a00c
 80094b0:	08019f10 	.word	0x08019f10
 80094b4:	0801a018 	.word	0x0801a018
 80094b8:	2001db64 	.word	0x2001db64
 80094bc:	0801a024 	.word	0x0801a024
 80094c0:	0801a02c 	.word	0x0801a02c
 80094c4:	00000000 	.word	0x00000000
 80094c8:	2001dac0 	.word	0x2001dac0
 80094cc:	0801a038 	.word	0x0801a038
 80094d0:	0801a040 	.word	0x0801a040
 80094d4:	0801a04c 	.word	0x0801a04c
 80094d8:	0801a058 	.word	0x0801a058
 80094dc:	2004228c 	.word	0x2004228c

	case 11:
		led.fullColor('~');
 80094e0:	217e      	movs	r1, #126	; 0x7e
 80094e2:	48b5      	ldr	r0, [pc, #724]	; (80097b8 <cppLoop+0x1b68>)
 80094e4:	f7f8 feb6 	bl	8002254 <_ZN3LED9fullColorEc>

lcd_clear();
 80094e8:	f7f7 fdda 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80094ec:	2100      	movs	r1, #0
 80094ee:	2000      	movs	r0, #0
 80094f0:	f7f7 fde6 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 80094f4:	48b1      	ldr	r0, [pc, #708]	; (80097bc <cppLoop+0x1b6c>)
 80094f6:	f7f7 fe0d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80094fa:	2101      	movs	r1, #1
 80094fc:	2000      	movs	r0, #0
 80094fe:	f7f7 fddf 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 8009502:	48af      	ldr	r0, [pc, #700]	; (80097c0 <cppLoop+0x1b70>)
 8009504:	f7f7 fe06 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009508:	48ae      	ldr	r0, [pc, #696]	; (80097c4 <cppLoop+0x1b74>)
 800950a:	f7f8 fe3f 	bl	800218c <_ZN8JoyStick8getValueEv>
 800950e:	4603      	mov	r3, r0
 8009510:	2b02      	cmp	r3, #2
 8009512:	bf0c      	ite	eq
 8009514:	2301      	moveq	r3, #1
 8009516:	2300      	movne	r3, #0
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b00      	cmp	r3, #0
 800951c:	f000 8346 	beq.w	8009bac <cppLoop+0x1f5c>
			HAL_Delay(1000);
 8009520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009524:	f000 fc74 	bl	8009e10 <HAL_Delay>
			led.LR(-1, 1);
 8009528:	2201      	movs	r2, #1
 800952a:	f04f 31ff 	mov.w	r1, #4294967295
 800952e:	48a2      	ldr	r0, [pc, #648]	; (80097b8 <cppLoop+0x1b68>)
 8009530:	f7f8 ff4c 	bl	80023cc <_ZN3LED2LREaa>

			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 8009534:	eddf 1aa4 	vldr	s3, [pc, #656]	; 80097c8 <cppLoop+0x1b78>
 8009538:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 80097c8 <cppLoop+0x1b78>
 800953c:	eddf 0aa2 	vldr	s1, [pc, #648]	; 80097c8 <cppLoop+0x1b78>
 8009540:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 80097c8 <cppLoop+0x1b78>
 8009544:	48a1      	ldr	r0, [pc, #644]	; (80097cc <cppLoop+0x1b7c>)
 8009546:	f7f7 fe83 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 800954a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800954e:	f000 fc5f 	bl	8009e10 <HAL_Delay>
			esc.off();
 8009552:	489e      	ldr	r0, [pc, #632]	; (80097cc <cppLoop+0x1b7c>)
 8009554:	f7f7 ff16 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8009558:	2200      	movs	r2, #0
 800955a:	f04f 31ff 	mov.w	r1, #4294967295
 800955e:	4896      	ldr	r0, [pc, #600]	; (80097b8 <cppLoop+0x1b68>)
 8009560:	f7f8 ff34 	bl	80023cc <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 8009564:	e322      	b.n	8009bac <cppLoop+0x1f5c>

	case 12:
		led.fullColor('~');
 8009566:	217e      	movs	r1, #126	; 0x7e
 8009568:	4893      	ldr	r0, [pc, #588]	; (80097b8 <cppLoop+0x1b68>)
 800956a:	f7f8 fe73 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 800956e:	f7f7 fd97 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009572:	2100      	movs	r1, #0
 8009574:	2000      	movs	r0, #0
 8009576:	f7f7 fda3 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800957a:	4895      	ldr	r0, [pc, #596]	; (80097d0 <cppLoop+0x1b80>)
 800957c:	f7f7 fdca 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009580:	2101      	movs	r1, #1
 8009582:	2000      	movs	r0, #0
 8009584:	f7f7 fd9c 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009588:	4892      	ldr	r0, [pc, #584]	; (80097d4 <cppLoop+0x1b84>)
 800958a:	f7f7 fdc3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800958e:	488d      	ldr	r0, [pc, #564]	; (80097c4 <cppLoop+0x1b74>)
 8009590:	f7f8 fdfc 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009594:	4603      	mov	r3, r0
 8009596:	2b02      	cmp	r3, #2
 8009598:	bf0c      	ite	eq
 800959a:	2301      	moveq	r3, #1
 800959c:	2300      	movne	r3, #0
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f000 8305 	beq.w	8009bb0 <cppLoop+0x1f60>
			HAL_Delay(1500);
 80095a6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80095aa:	f000 fc31 	bl	8009e10 <HAL_Delay>
			led.LR(-1, 1);
 80095ae:	2201      	movs	r2, #1
 80095b0:	f04f 31ff 	mov.w	r1, #4294967295
 80095b4:	4880      	ldr	r0, [pc, #512]	; (80097b8 <cppLoop+0x1b68>)
 80095b6:	f7f8 ff09 	bl	80023cc <_ZN3LED2LREaa>

			HAL_Delay(3000);
 80095ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80095be:	f000 fc27 	bl	8009e10 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 80095c2:	eddf 1a81 	vldr	s3, [pc, #516]	; 80097c8 <cppLoop+0x1b78>
 80095c6:	ed9f 1a80 	vldr	s2, [pc, #512]	; 80097c8 <cppLoop+0x1b78>
 80095ca:	eddf 0a7f 	vldr	s1, [pc, #508]	; 80097c8 <cppLoop+0x1b78>
 80095ce:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80097c8 <cppLoop+0x1b78>
 80095d2:	487e      	ldr	r0, [pc, #504]	; (80097cc <cppLoop+0x1b7c>)
 80095d4:	f7f7 fe3c 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80095d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80095dc:	f000 fc18 	bl	8009e10 <HAL_Delay>

			logger.start();
 80095e0:	487d      	ldr	r0, [pc, #500]	; (80097d8 <cppLoop+0x1b88>)
 80095e2:	f7fb fb6a 	bl	8004cba <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80095e6:	487d      	ldr	r0, [pc, #500]	; (80097dc <cppLoop+0x1b8c>)
 80095e8:	f7fc fcaf 	bl	8005f4a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80095ec:	eddf 0a7c 	vldr	s1, [pc, #496]	; 80097e0 <cppLoop+0x1b90>
 80095f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80095f4:	4879      	ldr	r0, [pc, #484]	; (80097dc <cppLoop+0x1b8c>)
 80095f6:	f7fc fc3b 	bl	8005e70 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80095fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80095fe:	f000 fc07 	bl	8009e10 <HAL_Delay>

			logger.stop();
 8009602:	4875      	ldr	r0, [pc, #468]	; (80097d8 <cppLoop+0x1b88>)
 8009604:	f7fb fb69 	bl	8004cda <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8009608:	4874      	ldr	r0, [pc, #464]	; (80097dc <cppLoop+0x1b8c>)
 800960a:	f7fc fcb1 	bl	8005f70 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 800960e:	486f      	ldr	r0, [pc, #444]	; (80097cc <cppLoop+0x1b7c>)
 8009610:	f7f7 feb8 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8009614:	4a73      	ldr	r2, [pc, #460]	; (80097e4 <cppLoop+0x1b94>)
 8009616:	4974      	ldr	r1, [pc, #464]	; (80097e8 <cppLoop+0x1b98>)
 8009618:	486f      	ldr	r0, [pc, #444]	; (80097d8 <cppLoop+0x1b88>)
 800961a:	f7fb fa45 	bl	8004aa8 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800961e:	2200      	movs	r2, #0
 8009620:	f04f 31ff 	mov.w	r1, #4294967295
 8009624:	4864      	ldr	r0, [pc, #400]	; (80097b8 <cppLoop+0x1b68>)
 8009626:	f7f8 fed1 	bl	80023cc <_ZN3LED2LREaa>
		}
		break;
 800962a:	e2c1      	b.n	8009bb0 <cppLoop+0x1f60>

	case 13:

		led.fullColor('W');
 800962c:	2157      	movs	r1, #87	; 0x57
 800962e:	4862      	ldr	r0, [pc, #392]	; (80097b8 <cppLoop+0x1b68>)
 8009630:	f7f8 fe10 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009634:	f7f7 fd34 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009638:	2100      	movs	r1, #0
 800963a:	2000      	movs	r0, #0
 800963c:	f7f7 fd40 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009640:	486a      	ldr	r0, [pc, #424]	; (80097ec <cppLoop+0x1b9c>)
 8009642:	f7f7 fd67 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009646:	2101      	movs	r1, #1
 8009648:	2000      	movs	r0, #0
 800964a:	f7f7 fd39 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 800964e:	4b68      	ldr	r3, [pc, #416]	; (80097f0 <cppLoop+0x1ba0>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4618      	mov	r0, r3
 8009654:	f7f6 ff90 	bl	8000578 <__aeabi_f2d>
 8009658:	4603      	mov	r3, r0
 800965a:	460c      	mov	r4, r1
 800965c:	461a      	mov	r2, r3
 800965e:	4623      	mov	r3, r4
 8009660:	4864      	ldr	r0, [pc, #400]	; (80097f4 <cppLoop+0x1ba4>)
 8009662:	f7f7 fd57 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009666:	4857      	ldr	r0, [pc, #348]	; (80097c4 <cppLoop+0x1b74>)
 8009668:	f7f8 fd90 	bl	800218c <_ZN8JoyStick8getValueEv>
 800966c:	4603      	mov	r3, r0
 800966e:	2b02      	cmp	r3, #2
 8009670:	bf0c      	ite	eq
 8009672:	2301      	moveq	r3, #1
 8009674:	2300      	movne	r3, #0
 8009676:	b2db      	uxtb	r3, r3
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 829b 	beq.w	8009bb4 <cppLoop+0x1f64>
			HAL_Delay(500);
 800967e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009682:	f000 fbc5 	bl	8009e10 <HAL_Delay>

			led.LR(1, -1);
 8009686:	f04f 32ff 	mov.w	r2, #4294967295
 800968a:	2101      	movs	r1, #1
 800968c:	484a      	ldr	r0, [pc, #296]	; (80097b8 <cppLoop+0x1b68>)
 800968e:	f7f8 fe9d 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8009692:	2102      	movs	r1, #2
 8009694:	4858      	ldr	r0, [pc, #352]	; (80097f8 <cppLoop+0x1ba8>)
 8009696:	f7fa fd8f 	bl	80041b8 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 800969a:	4b58      	ldr	r3, [pc, #352]	; (80097fc <cppLoop+0x1bac>)
 800969c:	edd3 7a00 	vldr	s15, [r3]
 80096a0:	eeb0 0a67 	vmov.f32	s0, s15
 80096a4:	4854      	ldr	r0, [pc, #336]	; (80097f8 <cppLoop+0x1ba8>)
 80096a6:	f7fa fb70 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80096aa:	4b51      	ldr	r3, [pc, #324]	; (80097f0 <cppLoop+0x1ba0>)
 80096ac:	edd3 7a00 	vldr	s15, [r3]
 80096b0:	eeb0 0a67 	vmov.f32	s0, s15
 80096b4:	4850      	ldr	r0, [pc, #320]	; (80097f8 <cppLoop+0x1ba8>)
 80096b6:	f7fa fb78 	bl	8003daa <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80096ba:	4b4d      	ldr	r3, [pc, #308]	; (80097f0 <cppLoop+0x1ba0>)
 80096bc:	edd3 7a00 	vldr	s15, [r3]
 80096c0:	eeb0 0a67 	vmov.f32	s0, s15
 80096c4:	484c      	ldr	r0, [pc, #304]	; (80097f8 <cppLoop+0x1ba8>)
 80096c6:	f7fa fb90 	bl	8003dea <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80096ca:	484b      	ldr	r0, [pc, #300]	; (80097f8 <cppLoop+0x1ba8>)
 80096cc:	f7fa ff70 	bl	80045b0 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 80096d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80096d4:	f000 fb9c 	bl	8009e10 <HAL_Delay>

			line_trace.running();
 80096d8:	4847      	ldr	r0, [pc, #284]	; (80097f8 <cppLoop+0x1ba8>)
 80096da:	f7fa fdab 	bl	8004234 <_ZN9LineTrace7runningEv>

			esc.off();
 80096de:	483b      	ldr	r0, [pc, #236]	; (80097cc <cppLoop+0x1b7c>)
 80096e0:	f7f7 fe50 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80096e4:	f04f 32ff 	mov.w	r2, #4294967295
 80096e8:	2100      	movs	r1, #0
 80096ea:	4833      	ldr	r0, [pc, #204]	; (80097b8 <cppLoop+0x1b68>)
 80096ec:	f7f8 fe6e 	bl	80023cc <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 80096f0:	e260      	b.n	8009bb4 <cppLoop+0x1f64>

	case 14:
		led.fullColor('W');
 80096f2:	2157      	movs	r1, #87	; 0x57
 80096f4:	4830      	ldr	r0, [pc, #192]	; (80097b8 <cppLoop+0x1b68>)
 80096f6:	f7f8 fdad 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 80096fa:	f7f7 fcd1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80096fe:	2100      	movs	r1, #0
 8009700:	2000      	movs	r0, #0
 8009702:	f7f7 fcdd 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8009706:	483e      	ldr	r0, [pc, #248]	; (8009800 <cppLoop+0x1bb0>)
 8009708:	f7f7 fd04 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800970c:	2101      	movs	r1, #1
 800970e:	2000      	movs	r0, #0
 8009710:	f7f7 fcd6 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8009714:	4b3b      	ldr	r3, [pc, #236]	; (8009804 <cppLoop+0x1bb4>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4618      	mov	r0, r3
 800971a:	f7f6 ff2d 	bl	8000578 <__aeabi_f2d>
 800971e:	4603      	mov	r3, r0
 8009720:	460c      	mov	r4, r1
 8009722:	461a      	mov	r2, r3
 8009724:	4623      	mov	r3, r4
 8009726:	4833      	ldr	r0, [pc, #204]	; (80097f4 <cppLoop+0x1ba4>)
 8009728:	f7f7 fcf4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800972c:	4825      	ldr	r0, [pc, #148]	; (80097c4 <cppLoop+0x1b74>)
 800972e:	f7f8 fd2d 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009732:	4603      	mov	r3, r0
 8009734:	2b02      	cmp	r3, #2
 8009736:	bf0c      	ite	eq
 8009738:	2301      	moveq	r3, #1
 800973a:	2300      	movne	r3, #0
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b00      	cmp	r3, #0
 8009740:	f000 823a 	beq.w	8009bb8 <cppLoop+0x1f68>
			HAL_Delay(500);
 8009744:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009748:	f000 fb62 	bl	8009e10 <HAL_Delay>

			led.LR(1, -1);
 800974c:	f04f 32ff 	mov.w	r2, #4294967295
 8009750:	2101      	movs	r1, #1
 8009752:	4819      	ldr	r0, [pc, #100]	; (80097b8 <cppLoop+0x1b68>)
 8009754:	f7f8 fe3a 	bl	80023cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009758:	2101      	movs	r1, #1
 800975a:	4827      	ldr	r0, [pc, #156]	; (80097f8 <cppLoop+0x1ba8>)
 800975c:	f7fa fd2c 	bl	80041b8 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009760:	4b29      	ldr	r3, [pc, #164]	; (8009808 <cppLoop+0x1bb8>)
 8009762:	edd3 7a00 	vldr	s15, [r3]
 8009766:	eeb0 0a67 	vmov.f32	s0, s15
 800976a:	4823      	ldr	r0, [pc, #140]	; (80097f8 <cppLoop+0x1ba8>)
 800976c:	f7fa fb0d 	bl	8003d8a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009770:	4b24      	ldr	r3, [pc, #144]	; (8009804 <cppLoop+0x1bb4>)
 8009772:	edd3 7a00 	vldr	s15, [r3]
 8009776:	eeb0 0a67 	vmov.f32	s0, s15
 800977a:	481f      	ldr	r0, [pc, #124]	; (80097f8 <cppLoop+0x1ba8>)
 800977c:	f7fa fb15 	bl	8003daa <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009780:	4b21      	ldr	r3, [pc, #132]	; (8009808 <cppLoop+0x1bb8>)
 8009782:	edd3 7a00 	vldr	s15, [r3]
 8009786:	eeb0 0a67 	vmov.f32	s0, s15
 800978a:	481b      	ldr	r0, [pc, #108]	; (80097f8 <cppLoop+0x1ba8>)
 800978c:	f7fa fb2d 	bl	8003dea <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009790:	4819      	ldr	r0, [pc, #100]	; (80097f8 <cppLoop+0x1ba8>)
 8009792:	f7fa ff0d 	bl	80045b0 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 8009796:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800979a:	f000 fb39 	bl	8009e10 <HAL_Delay>

			line_trace.running();
 800979e:	4816      	ldr	r0, [pc, #88]	; (80097f8 <cppLoop+0x1ba8>)
 80097a0:	f7fa fd48 	bl	8004234 <_ZN9LineTrace7runningEv>

			esc.off();
 80097a4:	4809      	ldr	r0, [pc, #36]	; (80097cc <cppLoop+0x1b7c>)
 80097a6:	f7f7 fded 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80097aa:	f04f 32ff 	mov.w	r2, #4294967295
 80097ae:	2100      	movs	r1, #0
 80097b0:	4801      	ldr	r0, [pc, #4]	; (80097b8 <cppLoop+0x1b68>)
 80097b2:	f7f8 fe0b 	bl	80023cc <_ZN3LED2LREaa>
		}

		break;
 80097b6:	e1ff      	b.n	8009bb8 <cppLoop+0x1f68>
 80097b8:	200005d0 	.word	0x200005d0
 80097bc:	0801a064 	.word	0x0801a064
 80097c0:	0801a068 	.word	0x0801a068
 80097c4:	200005c4 	.word	0x200005c4
 80097c8:	3ea3d70a 	.word	0x3ea3d70a
 80097cc:	2001db60 	.word	0x2001db60
 80097d0:	0801a070 	.word	0x0801a070
 80097d4:	0801a074 	.word	0x0801a074
 80097d8:	200005f4 	.word	0x200005f4
 80097dc:	2001dae0 	.word	0x2001dae0
 80097e0:	00000000 	.word	0x00000000
 80097e4:	0801a080 	.word	0x0801a080
 80097e8:	0801a08c 	.word	0x0801a08c
 80097ec:	0801a098 	.word	0x0801a098
 80097f0:	2004228c 	.word	0x2004228c
 80097f4:	08019f3c 	.word	0x08019f3c
 80097f8:	2001db64 	.word	0x2001db64
 80097fc:	2004229c 	.word	0x2004229c
 8009800:	0801a0a4 	.word	0x0801a0a4
 8009804:	20042284 	.word	0x20042284
 8009808:	20042294 	.word	0x20042294

	case 15:
		led.fullColor('W');
 800980c:	2157      	movs	r1, #87	; 0x57
 800980e:	48ac      	ldr	r0, [pc, #688]	; (8009ac0 <cppLoop+0x1e70>)
 8009810:	f7f8 fd20 	bl	8002254 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009814:	f7f7 fc44 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009818:	2100      	movs	r1, #0
 800981a:	2000      	movs	r0, #0
 800981c:	f7f7 fc50 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*1000));
 8009820:	48a8      	ldr	r0, [pc, #672]	; (8009ac4 <cppLoop+0x1e74>)
 8009822:	f7fa fa30 	bl	8003c86 <_ZN9LineTrace5getKpEv>
 8009826:	eeb0 7a40 	vmov.f32	s14, s0
 800982a:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8009ac8 <cppLoop+0x1e78>
 800982e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009832:	eeb0 0a67 	vmov.f32	s0, s15
 8009836:	f7f9 f939 	bl	8002aac <_ZSt3absf>
 800983a:	ee10 3a10 	vmov	r3, s0
 800983e:	4618      	mov	r0, r3
 8009840:	f7f6 fe9a 	bl	8000578 <__aeabi_f2d>
 8009844:	4603      	mov	r3, r0
 8009846:	460c      	mov	r4, r1
 8009848:	461a      	mov	r2, r3
 800984a:	4623      	mov	r3, r4
 800984c:	489f      	ldr	r0, [pc, #636]	; (8009acc <cppLoop+0x1e7c>)
 800984e:	f7f7 fc61 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009852:	2101      	movs	r1, #1
 8009854:	2000      	movs	r0, #0
 8009856:	f7f7 fc33 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*100), abs(line_trace.getKd()*10000));
 800985a:	489a      	ldr	r0, [pc, #616]	; (8009ac4 <cppLoop+0x1e74>)
 800985c:	f7fa fa22 	bl	8003ca4 <_ZN9LineTrace5getKiEv>
 8009860:	eeb0 7a40 	vmov.f32	s14, s0
 8009864:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8009ad0 <cppLoop+0x1e80>
 8009868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800986c:	eeb0 0a67 	vmov.f32	s0, s15
 8009870:	f7f9 f91c 	bl	8002aac <_ZSt3absf>
 8009874:	ee10 3a10 	vmov	r3, s0
 8009878:	4618      	mov	r0, r3
 800987a:	f7f6 fe7d 	bl	8000578 <__aeabi_f2d>
 800987e:	4605      	mov	r5, r0
 8009880:	460e      	mov	r6, r1
 8009882:	4890      	ldr	r0, [pc, #576]	; (8009ac4 <cppLoop+0x1e74>)
 8009884:	f7fa fa1d 	bl	8003cc2 <_ZN9LineTrace5getKdEv>
 8009888:	eeb0 7a40 	vmov.f32	s14, s0
 800988c:	eddf 7a91 	vldr	s15, [pc, #580]	; 8009ad4 <cppLoop+0x1e84>
 8009890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009894:	eeb0 0a67 	vmov.f32	s0, s15
 8009898:	f7f9 f908 	bl	8002aac <_ZSt3absf>
 800989c:	ee10 3a10 	vmov	r3, s0
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7f6 fe69 	bl	8000578 <__aeabi_f2d>
 80098a6:	4603      	mov	r3, r0
 80098a8:	460c      	mov	r4, r1
 80098aa:	e9cd 3400 	strd	r3, r4, [sp]
 80098ae:	462a      	mov	r2, r5
 80098b0:	4633      	mov	r3, r6
 80098b2:	4889      	ldr	r0, [pc, #548]	; (8009ad8 <cppLoop+0x1e88>)
 80098b4:	f7f7 fc2e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80098b8:	4888      	ldr	r0, [pc, #544]	; (8009adc <cppLoop+0x1e8c>)
 80098ba:	f7f8 fc67 	bl	800218c <_ZN8JoyStick8getValueEv>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b08      	cmp	r3, #8
 80098c2:	bf0c      	ite	eq
 80098c4:	2301      	moveq	r3, #1
 80098c6:	2300      	movne	r3, #0
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d021      	beq.n	8009912 <cppLoop+0x1cc2>
			led.LR(-1, 1);
 80098ce:	2201      	movs	r2, #1
 80098d0:	f04f 31ff 	mov.w	r1, #4294967295
 80098d4:	487a      	ldr	r0, [pc, #488]	; (8009ac0 <cppLoop+0x1e70>)
 80098d6:	f7f8 fd79 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80098da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80098de:	f000 fa97 	bl	8009e10 <HAL_Delay>

			selector++;
 80098e2:	4b7f      	ldr	r3, [pc, #508]	; (8009ae0 <cppLoop+0x1e90>)
 80098e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	3301      	adds	r3, #1
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	b21a      	sxth	r2, r3
 80098f0:	4b7b      	ldr	r3, [pc, #492]	; (8009ae0 <cppLoop+0x1e90>)
 80098f2:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80098f4:	4b7a      	ldr	r3, [pc, #488]	; (8009ae0 <cppLoop+0x1e90>)
 80098f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	dd02      	ble.n	8009904 <cppLoop+0x1cb4>
 80098fe:	4b78      	ldr	r3, [pc, #480]	; (8009ae0 <cppLoop+0x1e90>)
 8009900:	2200      	movs	r2, #0
 8009902:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009904:	2200      	movs	r2, #0
 8009906:	f04f 31ff 	mov.w	r1, #4294967295
 800990a:	486d      	ldr	r0, [pc, #436]	; (8009ac0 <cppLoop+0x1e70>)
 800990c:	f7f8 fd5e 	bl	80023cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8009910:	e154      	b.n	8009bbc <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_R){
 8009912:	4872      	ldr	r0, [pc, #456]	; (8009adc <cppLoop+0x1e8c>)
 8009914:	f7f8 fc3a 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009918:	4603      	mov	r3, r0
 800991a:	2b10      	cmp	r3, #16
 800991c:	bf0c      	ite	eq
 800991e:	2301      	moveq	r3, #1
 8009920:	2300      	movne	r3, #0
 8009922:	b2db      	uxtb	r3, r3
 8009924:	2b00      	cmp	r3, #0
 8009926:	d058      	beq.n	80099da <cppLoop+0x1d8a>
			led.LR(-1, 1);
 8009928:	2201      	movs	r2, #1
 800992a:	f04f 31ff 	mov.w	r1, #4294967295
 800992e:	4864      	ldr	r0, [pc, #400]	; (8009ac0 <cppLoop+0x1e70>)
 8009930:	f7f8 fd4c 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009934:	2064      	movs	r0, #100	; 0x64
 8009936:	f000 fa6b 	bl	8009e10 <HAL_Delay>
			if(selector == 0){
 800993a:	4b69      	ldr	r3, [pc, #420]	; (8009ae0 <cppLoop+0x1e90>)
 800993c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d113      	bne.n	800996c <cppLoop+0x1d1c>
				adj_kp = adj_kp + 0.00001;
 8009944:	4b67      	ldr	r3, [pc, #412]	; (8009ae4 <cppLoop+0x1e94>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4618      	mov	r0, r3
 800994a:	f7f6 fe15 	bl	8000578 <__aeabi_f2d>
 800994e:	a356      	add	r3, pc, #344	; (adr r3, 8009aa8 <cppLoop+0x1e58>)
 8009950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009954:	f7f6 fcb2 	bl	80002bc <__adddf3>
 8009958:	4603      	mov	r3, r0
 800995a:	460c      	mov	r4, r1
 800995c:	4618      	mov	r0, r3
 800995e:	4621      	mov	r1, r4
 8009960:	f7f7 f95a 	bl	8000c18 <__aeabi_d2f>
 8009964:	4602      	mov	r2, r0
 8009966:	4b5f      	ldr	r3, [pc, #380]	; (8009ae4 <cppLoop+0x1e94>)
 8009968:	601a      	str	r2, [r3, #0]
 800996a:	e02b      	b.n	80099c4 <cppLoop+0x1d74>
			else if(selector == 1){
 800996c:	4b5c      	ldr	r3, [pc, #368]	; (8009ae0 <cppLoop+0x1e90>)
 800996e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009972:	2b01      	cmp	r3, #1
 8009974:	d113      	bne.n	800999e <cppLoop+0x1d4e>
				adj_ki = adj_ki + 0.0001;
 8009976:	4b5c      	ldr	r3, [pc, #368]	; (8009ae8 <cppLoop+0x1e98>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4618      	mov	r0, r3
 800997c:	f7f6 fdfc 	bl	8000578 <__aeabi_f2d>
 8009980:	a34b      	add	r3, pc, #300	; (adr r3, 8009ab0 <cppLoop+0x1e60>)
 8009982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009986:	f7f6 fc99 	bl	80002bc <__adddf3>
 800998a:	4603      	mov	r3, r0
 800998c:	460c      	mov	r4, r1
 800998e:	4618      	mov	r0, r3
 8009990:	4621      	mov	r1, r4
 8009992:	f7f7 f941 	bl	8000c18 <__aeabi_d2f>
 8009996:	4602      	mov	r2, r0
 8009998:	4b53      	ldr	r3, [pc, #332]	; (8009ae8 <cppLoop+0x1e98>)
 800999a:	601a      	str	r2, [r3, #0]
 800999c:	e012      	b.n	80099c4 <cppLoop+0x1d74>
				adj_kd = adj_kd + 0.000001;
 800999e:	4b53      	ldr	r3, [pc, #332]	; (8009aec <cppLoop+0x1e9c>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7f6 fde8 	bl	8000578 <__aeabi_f2d>
 80099a8:	a343      	add	r3, pc, #268	; (adr r3, 8009ab8 <cppLoop+0x1e68>)
 80099aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ae:	f7f6 fc85 	bl	80002bc <__adddf3>
 80099b2:	4603      	mov	r3, r0
 80099b4:	460c      	mov	r4, r1
 80099b6:	4618      	mov	r0, r3
 80099b8:	4621      	mov	r1, r4
 80099ba:	f7f7 f92d 	bl	8000c18 <__aeabi_d2f>
 80099be:	4602      	mov	r2, r0
 80099c0:	4b4a      	ldr	r3, [pc, #296]	; (8009aec <cppLoop+0x1e9c>)
 80099c2:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80099c4:	2152      	movs	r1, #82	; 0x52
 80099c6:	483e      	ldr	r0, [pc, #248]	; (8009ac0 <cppLoop+0x1e70>)
 80099c8:	f7f8 fc44 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80099cc:	2200      	movs	r2, #0
 80099ce:	f04f 31ff 	mov.w	r1, #4294967295
 80099d2:	483b      	ldr	r0, [pc, #236]	; (8009ac0 <cppLoop+0x1e70>)
 80099d4:	f7f8 fcfa 	bl	80023cc <_ZN3LED2LREaa>
		break;
 80099d8:	e0f0      	b.n	8009bbc <cppLoop+0x1f6c>
		else if(joy_stick.getValue() == JOY_L){
 80099da:	4840      	ldr	r0, [pc, #256]	; (8009adc <cppLoop+0x1e8c>)
 80099dc:	f7f8 fbd6 	bl	800218c <_ZN8JoyStick8getValueEv>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	bf0c      	ite	eq
 80099e6:	2301      	moveq	r3, #1
 80099e8:	2300      	movne	r3, #0
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d07f      	beq.n	8009af0 <cppLoop+0x1ea0>
			led.LR(-1, 1);
 80099f0:	2201      	movs	r2, #1
 80099f2:	f04f 31ff 	mov.w	r1, #4294967295
 80099f6:	4832      	ldr	r0, [pc, #200]	; (8009ac0 <cppLoop+0x1e70>)
 80099f8:	f7f8 fce8 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80099fc:	2064      	movs	r0, #100	; 0x64
 80099fe:	f000 fa07 	bl	8009e10 <HAL_Delay>
			if(selector == 0){
 8009a02:	4b37      	ldr	r3, [pc, #220]	; (8009ae0 <cppLoop+0x1e90>)
 8009a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d113      	bne.n	8009a34 <cppLoop+0x1de4>
				adj_kp = adj_kp - 0.00001;
 8009a0c:	4b35      	ldr	r3, [pc, #212]	; (8009ae4 <cppLoop+0x1e94>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7f6 fdb1 	bl	8000578 <__aeabi_f2d>
 8009a16:	a324      	add	r3, pc, #144	; (adr r3, 8009aa8 <cppLoop+0x1e58>)
 8009a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1c:	f7f6 fc4c 	bl	80002b8 <__aeabi_dsub>
 8009a20:	4603      	mov	r3, r0
 8009a22:	460c      	mov	r4, r1
 8009a24:	4618      	mov	r0, r3
 8009a26:	4621      	mov	r1, r4
 8009a28:	f7f7 f8f6 	bl	8000c18 <__aeabi_d2f>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	4b2d      	ldr	r3, [pc, #180]	; (8009ae4 <cppLoop+0x1e94>)
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	e02b      	b.n	8009a8c <cppLoop+0x1e3c>
			else if(selector == 1){
 8009a34:	4b2a      	ldr	r3, [pc, #168]	; (8009ae0 <cppLoop+0x1e90>)
 8009a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d113      	bne.n	8009a66 <cppLoop+0x1e16>
				adj_ki = adj_ki - 0.0001;
 8009a3e:	4b2a      	ldr	r3, [pc, #168]	; (8009ae8 <cppLoop+0x1e98>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7f6 fd98 	bl	8000578 <__aeabi_f2d>
 8009a48:	a319      	add	r3, pc, #100	; (adr r3, 8009ab0 <cppLoop+0x1e60>)
 8009a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4e:	f7f6 fc33 	bl	80002b8 <__aeabi_dsub>
 8009a52:	4603      	mov	r3, r0
 8009a54:	460c      	mov	r4, r1
 8009a56:	4618      	mov	r0, r3
 8009a58:	4621      	mov	r1, r4
 8009a5a:	f7f7 f8dd 	bl	8000c18 <__aeabi_d2f>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	4b21      	ldr	r3, [pc, #132]	; (8009ae8 <cppLoop+0x1e98>)
 8009a62:	601a      	str	r2, [r3, #0]
 8009a64:	e012      	b.n	8009a8c <cppLoop+0x1e3c>
				adj_kd = adj_kd - 0.000001;
 8009a66:	4b21      	ldr	r3, [pc, #132]	; (8009aec <cppLoop+0x1e9c>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7f6 fd84 	bl	8000578 <__aeabi_f2d>
 8009a70:	a311      	add	r3, pc, #68	; (adr r3, 8009ab8 <cppLoop+0x1e68>)
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	f7f6 fc1f 	bl	80002b8 <__aeabi_dsub>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	4618      	mov	r0, r3
 8009a80:	4621      	mov	r1, r4
 8009a82:	f7f7 f8c9 	bl	8000c18 <__aeabi_d2f>
 8009a86:	4602      	mov	r2, r0
 8009a88:	4b18      	ldr	r3, [pc, #96]	; (8009aec <cppLoop+0x1e9c>)
 8009a8a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009a8c:	2152      	movs	r1, #82	; 0x52
 8009a8e:	480c      	ldr	r0, [pc, #48]	; (8009ac0 <cppLoop+0x1e70>)
 8009a90:	f7f8 fbe0 	bl	8002254 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009a94:	2200      	movs	r2, #0
 8009a96:	f04f 31ff 	mov.w	r1, #4294967295
 8009a9a:	4809      	ldr	r0, [pc, #36]	; (8009ac0 <cppLoop+0x1e70>)
 8009a9c:	f7f8 fc96 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009aa0:	e08c      	b.n	8009bbc <cppLoop+0x1f6c>
 8009aa2:	bf00      	nop
 8009aa4:	f3af 8000 	nop.w
 8009aa8:	88e368f1 	.word	0x88e368f1
 8009aac:	3ee4f8b5 	.word	0x3ee4f8b5
 8009ab0:	eb1c432d 	.word	0xeb1c432d
 8009ab4:	3f1a36e2 	.word	0x3f1a36e2
 8009ab8:	a0b5ed8d 	.word	0xa0b5ed8d
 8009abc:	3eb0c6f7 	.word	0x3eb0c6f7
 8009ac0:	200005d0 	.word	0x200005d0
 8009ac4:	2001db64 	.word	0x2001db64
 8009ac8:	447a0000 	.word	0x447a0000
 8009acc:	0801a0b0 	.word	0x0801a0b0
 8009ad0:	42c80000 	.word	0x42c80000
 8009ad4:	461c4000 	.word	0x461c4000
 8009ad8:	08019ef4 	.word	0x08019ef4
 8009adc:	200005c4 	.word	0x200005c4
 8009ae0:	20042242 	.word	0x20042242
 8009ae4:	2004224c 	.word	0x2004224c
 8009ae8:	20042254 	.word	0x20042254
 8009aec:	2004225c 	.word	0x2004225c
		else if(joy_stick.getValue() == JOY_C){
 8009af0:	4836      	ldr	r0, [pc, #216]	; (8009bcc <cppLoop+0x1f7c>)
 8009af2:	f7f8 fb4b 	bl	800218c <_ZN8JoyStick8getValueEv>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	bf0c      	ite	eq
 8009afc:	2301      	moveq	r3, #1
 8009afe:	2300      	movne	r3, #0
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d05a      	beq.n	8009bbc <cppLoop+0x1f6c>
			led.LR(-1, 1);
 8009b06:	2201      	movs	r2, #1
 8009b08:	f04f 31ff 	mov.w	r1, #4294967295
 8009b0c:	4830      	ldr	r0, [pc, #192]	; (8009bd0 <cppLoop+0x1f80>)
 8009b0e:	f7f8 fc5d 	bl	80023cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009b12:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009b16:	f000 f97b 	bl	8009e10 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	4b2d      	ldr	r3, [pc, #180]	; (8009bd4 <cppLoop+0x1f84>)
 8009b20:	2201      	movs	r2, #1
 8009b22:	492d      	ldr	r1, [pc, #180]	; (8009bd8 <cppLoop+0x1f88>)
 8009b24:	482d      	ldr	r0, [pc, #180]	; (8009bdc <cppLoop+0x1f8c>)
 8009b26:	f7f7 fea9 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	9300      	str	r3, [sp, #0]
 8009b2e:	4b2c      	ldr	r3, [pc, #176]	; (8009be0 <cppLoop+0x1f90>)
 8009b30:	2201      	movs	r2, #1
 8009b32:	492c      	ldr	r1, [pc, #176]	; (8009be4 <cppLoop+0x1f94>)
 8009b34:	4829      	ldr	r0, [pc, #164]	; (8009bdc <cppLoop+0x1f8c>)
 8009b36:	f7f7 fea1 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	4b2a      	ldr	r3, [pc, #168]	; (8009be8 <cppLoop+0x1f98>)
 8009b40:	2201      	movs	r2, #1
 8009b42:	492a      	ldr	r1, [pc, #168]	; (8009bec <cppLoop+0x1f9c>)
 8009b44:	4825      	ldr	r0, [pc, #148]	; (8009bdc <cppLoop+0x1f8c>)
 8009b46:	f7f7 fe99 	bl	800187c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009b4a:	4b22      	ldr	r3, [pc, #136]	; (8009bd4 <cppLoop+0x1f84>)
 8009b4c:	edd3 7a00 	vldr	s15, [r3]
 8009b50:	4b23      	ldr	r3, [pc, #140]	; (8009be0 <cppLoop+0x1f90>)
 8009b52:	ed93 7a00 	vldr	s14, [r3]
 8009b56:	4b24      	ldr	r3, [pc, #144]	; (8009be8 <cppLoop+0x1f98>)
 8009b58:	edd3 6a00 	vldr	s13, [r3]
 8009b5c:	eeb0 1a66 	vmov.f32	s2, s13
 8009b60:	eef0 0a47 	vmov.f32	s1, s14
 8009b64:	eeb0 0a67 	vmov.f32	s0, s15
 8009b68:	4821      	ldr	r0, [pc, #132]	; (8009bf0 <cppLoop+0x1fa0>)
 8009b6a:	f7fa f873 	bl	8003c54 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f04f 31ff 	mov.w	r1, #4294967295
 8009b74:	4816      	ldr	r0, [pc, #88]	; (8009bd0 <cppLoop+0x1f80>)
 8009b76:	f7f8 fc29 	bl	80023cc <_ZN3LED2LREaa>
		break;
 8009b7a:	e01f      	b.n	8009bbc <cppLoop+0x1f6c>

	default:
		break;
 8009b7c:	bf00      	nop
 8009b7e:	e01e      	b.n	8009bbe <cppLoop+0x1f6e>
		break;
 8009b80:	bf00      	nop
 8009b82:	e01c      	b.n	8009bbe <cppLoop+0x1f6e>
		break;
 8009b84:	bf00      	nop
 8009b86:	e01a      	b.n	8009bbe <cppLoop+0x1f6e>
		break;
 8009b88:	bf00      	nop
 8009b8a:	e018      	b.n	8009bbe <cppLoop+0x1f6e>
		break;
 8009b8c:	bf00      	nop
 8009b8e:	e016      	b.n	8009bbe <cppLoop+0x1f6e>
		break;
 8009b90:	bf00      	nop
 8009b92:	e014      	b.n	8009bbe <cppLoop+0x1f6e>
		break;
 8009b94:	bf00      	nop
 8009b96:	e012      	b.n	8009bbe <cppLoop+0x1f6e>
		break;
 8009b98:	bf00      	nop
 8009b9a:	e010      	b.n	8009bbe <cppLoop+0x1f6e>
		break;
 8009b9c:	bf00      	nop
 8009b9e:	e00e      	b.n	8009bbe <cppLoop+0x1f6e>
		break;
 8009ba0:	bf00      	nop
 8009ba2:	e00c      	b.n	8009bbe <cppLoop+0x1f6e>
		break;
 8009ba4:	bf00      	nop
 8009ba6:	e00a      	b.n	8009bbe <cppLoop+0x1f6e>
		break;
 8009ba8:	bf00      	nop
 8009baa:	e008      	b.n	8009bbe <cppLoop+0x1f6e>
		break;
 8009bac:	bf00      	nop
 8009bae:	e006      	b.n	8009bbe <cppLoop+0x1f6e>
		break;
 8009bb0:	bf00      	nop
 8009bb2:	e004      	b.n	8009bbe <cppLoop+0x1f6e>
		break;
 8009bb4:	bf00      	nop
 8009bb6:	e002      	b.n	8009bbe <cppLoop+0x1f6e>
		break;
 8009bb8:	bf00      	nop
 8009bba:	e000      	b.n	8009bbe <cppLoop+0x1f6e>
		break;
 8009bbc:	bf00      	nop

	}

	HAL_Delay(30);
 8009bbe:	201e      	movs	r0, #30
 8009bc0:	f000 f926 	bl	8009e10 <HAL_Delay>

}
 8009bc4:	bf00      	nop
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bcc:	200005c4 	.word	0x200005c4
 8009bd0:	200005d0 	.word	0x200005d0
 8009bd4:	2004224c 	.word	0x2004224c
 8009bd8:	0801a0bc 	.word	0x0801a0bc
 8009bdc:	08019f10 	.word	0x08019f10
 8009be0:	20042254 	.word	0x20042254
 8009be4:	0801a0c4 	.word	0x0801a0c4
 8009be8:	2004225c 	.word	0x2004225c
 8009bec:	0801a0cc 	.word	0x0801a0cc
 8009bf0:	2001db64 	.word	0x2001db64

08009bf4 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b088      	sub	sp, #32
 8009bf8:	af06      	add	r7, sp, #24
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	6039      	str	r1, [r7, #0]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d142      	bne.n	8009c8a <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d13d      	bne.n	8009c8a <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009c0e:	4821      	ldr	r0, [pc, #132]	; (8009c94 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009c10:	f7f8 fc14 	bl	800243c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009c14:	4820      	ldr	r0, [pc, #128]	; (8009c98 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009c16:	f7fb fc5f 	bl	80054d8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009c1a:	4820      	ldr	r0, [pc, #128]	; (8009c9c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009c1c:	f7f8 faaa 	bl	8002174 <_ZN8JoyStickC1Ev>
Motor motor;
 8009c20:	481f      	ldr	r0, [pc, #124]	; (8009ca0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009c22:	f7fb f86a 	bl	8004cfa <_ZN5MotorC1Ev>
IMU imu;
 8009c26:	481f      	ldr	r0, [pc, #124]	; (8009ca4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009c28:	f7f8 f8a0 	bl	8001d6c <_ZN3IMUC1Ev>
Logger logger;
 8009c2c:	481e      	ldr	r0, [pc, #120]	; (8009ca8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009c2e:	f7fa fdaf 	bl	8004790 <_ZN6LoggerC1Ev>
Encoder encoder;
 8009c32:	481e      	ldr	r0, [pc, #120]	; (8009cac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009c34:	f7f7 fbca 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009c38:	4b1a      	ldr	r3, [pc, #104]	; (8009ca4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009c3a:	4a1c      	ldr	r2, [pc, #112]	; (8009cac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009c3c:	4918      	ldr	r1, [pc, #96]	; (8009ca0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009c3e:	481c      	ldr	r0, [pc, #112]	; (8009cb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009c40:	f7fb ffe0 	bl	8005c04 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009c44:	4b1a      	ldr	r3, [pc, #104]	; (8009cb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009c46:	4a17      	ldr	r2, [pc, #92]	; (8009ca4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009c48:	4918      	ldr	r1, [pc, #96]	; (8009cac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009c4a:	481a      	ldr	r0, [pc, #104]	; (8009cb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009c4c:	f7fb f954 	bl	8004ef8 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009c50:	4819      	ldr	r0, [pc, #100]	; (8009cb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009c52:	f7f7 fabf 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009c56:	4b18      	ldr	r3, [pc, #96]	; (8009cb8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009c58:	9305      	str	r3, [sp, #20]
 8009c5a:	4b12      	ldr	r3, [pc, #72]	; (8009ca4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009c5c:	9304      	str	r3, [sp, #16]
 8009c5e:	4b12      	ldr	r3, [pc, #72]	; (8009ca8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009c60:	9303      	str	r3, [sp, #12]
 8009c62:	4b14      	ldr	r3, [pc, #80]	; (8009cb4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009c64:	9302      	str	r3, [sp, #8]
 8009c66:	4b11      	ldr	r3, [pc, #68]	; (8009cac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009c68:	9301      	str	r3, [sp, #4]
 8009c6a:	4b0b      	ldr	r3, [pc, #44]	; (8009c98 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	4b10      	ldr	r3, [pc, #64]	; (8009cb0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009c70:	4a08      	ldr	r2, [pc, #32]	; (8009c94 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009c72:	490b      	ldr	r1, [pc, #44]	; (8009ca0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009c74:	4811      	ldr	r0, [pc, #68]	; (8009cbc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009c76:	f7f8 ff29 	bl	8002acc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009c7a:	4a09      	ldr	r2, [pc, #36]	; (8009ca0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009c7c:	490a      	ldr	r1, [pc, #40]	; (8009ca8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009c7e:	4810      	ldr	r0, [pc, #64]	; (8009cc0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009c80:	f7fb fda6 	bl	80057d0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009c84:	480f      	ldr	r0, [pc, #60]	; (8009cc4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009c86:	f7fb fab9 	bl	80051fc <_ZN13PathFollowingC1Ev>
}
 8009c8a:	bf00      	nop
 8009c8c:	3708      	adds	r7, #8
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
 8009c92:	bf00      	nop
 8009c94:	200002c0 	.word	0x200002c0
 8009c98:	200005b8 	.word	0x200005b8
 8009c9c:	200005c4 	.word	0x200005c4
 8009ca0:	200005cc 	.word	0x200005cc
 8009ca4:	200005e0 	.word	0x200005e0
 8009ca8:	200005f4 	.word	0x200005f4
 8009cac:	2001dac0 	.word	0x2001dac0
 8009cb0:	2001dae0 	.word	0x2001dae0
 8009cb4:	2001db20 	.word	0x2001db20
 8009cb8:	2001db60 	.word	0x2001db60
 8009cbc:	2001db64 	.word	0x2001db64
 8009cc0:	2002a90c 	.word	0x2002a90c
 8009cc4:	2002ab18 	.word	0x2002ab18

08009cc8 <_GLOBAL__sub_I_line_sensor>:
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009cd0:	2001      	movs	r0, #1
 8009cd2:	f7ff ff8f 	bl	8009bf4 <_Z41__static_initialization_and_destruction_0ii>
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009d10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009cdc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009cde:	e003      	b.n	8009ce8 <LoopCopyDataInit>

08009ce0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009ce0:	4b0c      	ldr	r3, [pc, #48]	; (8009d14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009ce2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009ce4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009ce6:	3104      	adds	r1, #4

08009ce8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009ce8:	480b      	ldr	r0, [pc, #44]	; (8009d18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009cea:	4b0c      	ldr	r3, [pc, #48]	; (8009d1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009cec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009cee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009cf0:	d3f6      	bcc.n	8009ce0 <CopyDataInit>
  ldr  r2, =_sbss
 8009cf2:	4a0b      	ldr	r2, [pc, #44]	; (8009d20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009cf4:	e002      	b.n	8009cfc <LoopFillZerobss>

08009cf6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009cf6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009cf8:	f842 3b04 	str.w	r3, [r2], #4

08009cfc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009cfc:	4b09      	ldr	r3, [pc, #36]	; (8009d24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009cfe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009d00:	d3f9      	bcc.n	8009cf6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009d02:	f7fd fe83 	bl	8007a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009d06:	f00b fdd3 	bl	80158b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009d0a:	f7fc f9bd 	bl	8006088 <main>
  bx  lr    
 8009d0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009d10:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009d14:	0801a6c0 	.word	0x0801a6c0
  ldr  r0, =_sdata
 8009d18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009d1c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009d20:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009d24:	20046ca0 	.word	0x20046ca0

08009d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009d28:	e7fe      	b.n	8009d28 <ADC_IRQHandler>
	...

08009d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009d30:	4b0e      	ldr	r3, [pc, #56]	; (8009d6c <HAL_Init+0x40>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a0d      	ldr	r2, [pc, #52]	; (8009d6c <HAL_Init+0x40>)
 8009d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009d3c:	4b0b      	ldr	r3, [pc, #44]	; (8009d6c <HAL_Init+0x40>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a0a      	ldr	r2, [pc, #40]	; (8009d6c <HAL_Init+0x40>)
 8009d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009d48:	4b08      	ldr	r3, [pc, #32]	; (8009d6c <HAL_Init+0x40>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a07      	ldr	r2, [pc, #28]	; (8009d6c <HAL_Init+0x40>)
 8009d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009d54:	2003      	movs	r0, #3
 8009d56:	f000 fd51 	bl	800a7fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	f000 f808 	bl	8009d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009d60:	f7fd f8a4 	bl	8006eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	bd80      	pop	{r7, pc}
 8009d6a:	bf00      	nop
 8009d6c:	40023c00 	.word	0x40023c00

08009d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009d78:	4b12      	ldr	r3, [pc, #72]	; (8009dc4 <HAL_InitTick+0x54>)
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	4b12      	ldr	r3, [pc, #72]	; (8009dc8 <HAL_InitTick+0x58>)
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	4619      	mov	r1, r3
 8009d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8009d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 fd69 	bl	800a866 <HAL_SYSTICK_Config>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e00e      	b.n	8009dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b0f      	cmp	r3, #15
 8009da2:	d80a      	bhi.n	8009dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009da4:	2200      	movs	r2, #0
 8009da6:	6879      	ldr	r1, [r7, #4]
 8009da8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dac:	f000 fd31 	bl	800a812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009db0:	4a06      	ldr	r2, [pc, #24]	; (8009dcc <HAL_InitTick+0x5c>)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009db6:	2300      	movs	r3, #0
 8009db8:	e000      	b.n	8009dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3708      	adds	r7, #8
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	20000000 	.word	0x20000000
 8009dc8:	20000008 	.word	0x20000008
 8009dcc:	20000004 	.word	0x20000004

08009dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009dd4:	4b06      	ldr	r3, [pc, #24]	; (8009df0 <HAL_IncTick+0x20>)
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	461a      	mov	r2, r3
 8009dda:	4b06      	ldr	r3, [pc, #24]	; (8009df4 <HAL_IncTick+0x24>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4413      	add	r3, r2
 8009de0:	4a04      	ldr	r2, [pc, #16]	; (8009df4 <HAL_IncTick+0x24>)
 8009de2:	6013      	str	r3, [r2, #0]
}
 8009de4:	bf00      	nop
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	20000008 	.word	0x20000008
 8009df4:	20044c28 	.word	0x20044c28

08009df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8009dfc:	4b03      	ldr	r3, [pc, #12]	; (8009e0c <HAL_GetTick+0x14>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	20044c28 	.word	0x20044c28

08009e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009e18:	f7ff ffee 	bl	8009df8 <HAL_GetTick>
 8009e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e28:	d005      	beq.n	8009e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009e2a:	4b09      	ldr	r3, [pc, #36]	; (8009e50 <HAL_Delay+0x40>)
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4413      	add	r3, r2
 8009e34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009e36:	bf00      	nop
 8009e38:	f7ff ffde 	bl	8009df8 <HAL_GetTick>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	1ad3      	subs	r3, r2, r3
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d8f7      	bhi.n	8009e38 <HAL_Delay+0x28>
  {
  }
}
 8009e48:	bf00      	nop
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	20000008 	.word	0x20000008

08009e54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e033      	b.n	8009ed2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d109      	bne.n	8009e86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f7fd f842 	bl	8006efc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e8a:	f003 0310 	and.w	r3, r3, #16
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d118      	bne.n	8009ec4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009e9a:	f023 0302 	bic.w	r3, r3, #2
 8009e9e:	f043 0202 	orr.w	r2, r3, #2
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fa5a 	bl	800a360 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb6:	f023 0303 	bic.w	r3, r3, #3
 8009eba:	f043 0201 	orr.w	r2, r3, #1
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	641a      	str	r2, [r3, #64]	; 0x40
 8009ec2:	e001      	b.n	8009ec8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
	...

08009edc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b086      	sub	sp, #24
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d101      	bne.n	8009efa <HAL_ADC_Start_DMA+0x1e>
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	e0cc      	b.n	800a094 <HAL_ADC_Start_DMA+0x1b8>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f003 0301 	and.w	r3, r3, #1
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d018      	beq.n	8009f42 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	689a      	ldr	r2, [r3, #8]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f042 0201 	orr.w	r2, r2, #1
 8009f1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009f20:	4b5e      	ldr	r3, [pc, #376]	; (800a09c <HAL_ADC_Start_DMA+0x1c0>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a5e      	ldr	r2, [pc, #376]	; (800a0a0 <HAL_ADC_Start_DMA+0x1c4>)
 8009f26:	fba2 2303 	umull	r2, r3, r2, r3
 8009f2a:	0c9a      	lsrs	r2, r3, #18
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	005b      	lsls	r3, r3, #1
 8009f30:	4413      	add	r3, r2
 8009f32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009f34:	e002      	b.n	8009f3c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1f9      	bne.n	8009f36 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	f003 0301 	and.w	r3, r3, #1
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	f040 80a0 	bne.w	800a092 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009f5a:	f023 0301 	bic.w	r3, r3, #1
 8009f5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d007      	beq.n	8009f84 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009f7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f90:	d106      	bne.n	8009fa0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f96:	f023 0206 	bic.w	r2, r3, #6
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	645a      	str	r2, [r3, #68]	; 0x44
 8009f9e:	e002      	b.n	8009fa6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009fae:	4b3d      	ldr	r3, [pc, #244]	; (800a0a4 <HAL_ADC_Start_DMA+0x1c8>)
 8009fb0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb6:	4a3c      	ldr	r2, [pc, #240]	; (800a0a8 <HAL_ADC_Start_DMA+0x1cc>)
 8009fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fbe:	4a3b      	ldr	r2, [pc, #236]	; (800a0ac <HAL_ADC_Start_DMA+0x1d0>)
 8009fc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc6:	4a3a      	ldr	r2, [pc, #232]	; (800a0b0 <HAL_ADC_Start_DMA+0x1d4>)
 8009fc8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009fd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009fe2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	689a      	ldr	r2, [r3, #8]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ff2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	334c      	adds	r3, #76	; 0x4c
 8009ffe:	4619      	mov	r1, r3
 800a000:	68ba      	ldr	r2, [r7, #8]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f000 fcea 	bl	800a9dc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	f003 031f 	and.w	r3, r3, #31
 800a010:	2b00      	cmp	r3, #0
 800a012:	d12a      	bne.n	800a06a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a26      	ldr	r2, [pc, #152]	; (800a0b4 <HAL_ADC_Start_DMA+0x1d8>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d015      	beq.n	800a04a <HAL_ADC_Start_DMA+0x16e>
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a25      	ldr	r2, [pc, #148]	; (800a0b8 <HAL_ADC_Start_DMA+0x1dc>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d105      	bne.n	800a034 <HAL_ADC_Start_DMA+0x158>
 800a028:	4b1e      	ldr	r3, [pc, #120]	; (800a0a4 <HAL_ADC_Start_DMA+0x1c8>)
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	f003 031f 	and.w	r3, r3, #31
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00a      	beq.n	800a04a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a20      	ldr	r2, [pc, #128]	; (800a0bc <HAL_ADC_Start_DMA+0x1e0>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d129      	bne.n	800a092 <HAL_ADC_Start_DMA+0x1b6>
 800a03e:	4b19      	ldr	r3, [pc, #100]	; (800a0a4 <HAL_ADC_Start_DMA+0x1c8>)
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f003 031f 	and.w	r3, r3, #31
 800a046:	2b0f      	cmp	r3, #15
 800a048:	d823      	bhi.n	800a092 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d11c      	bne.n	800a092 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	689a      	ldr	r2, [r3, #8]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a066:	609a      	str	r2, [r3, #8]
 800a068:	e013      	b.n	800a092 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a11      	ldr	r2, [pc, #68]	; (800a0b4 <HAL_ADC_Start_DMA+0x1d8>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d10e      	bne.n	800a092 <HAL_ADC_Start_DMA+0x1b6>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d107      	bne.n	800a092 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	689a      	ldr	r2, [r3, #8]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a090:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3718      	adds	r7, #24
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	20000000 	.word	0x20000000
 800a0a0:	431bde83 	.word	0x431bde83
 800a0a4:	40012300 	.word	0x40012300
 800a0a8:	0800a559 	.word	0x0800a559
 800a0ac:	0800a613 	.word	0x0800a613
 800a0b0:	0800a62f 	.word	0x0800a62f
 800a0b4:	40012000 	.word	0x40012000
 800a0b8:	40012100 	.word	0x40012100
 800a0bc:	40012200 	.word	0x40012200

0800a0c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a106:	2300      	movs	r3, #0
 800a108:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a110:	2b01      	cmp	r3, #1
 800a112:	d101      	bne.n	800a118 <HAL_ADC_ConfigChannel+0x1c>
 800a114:	2302      	movs	r3, #2
 800a116:	e113      	b.n	800a340 <HAL_ADC_ConfigChannel+0x244>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2b09      	cmp	r3, #9
 800a126:	d925      	bls.n	800a174 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68d9      	ldr	r1, [r3, #12]
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	b29b      	uxth	r3, r3
 800a134:	461a      	mov	r2, r3
 800a136:	4613      	mov	r3, r2
 800a138:	005b      	lsls	r3, r3, #1
 800a13a:	4413      	add	r3, r2
 800a13c:	3b1e      	subs	r3, #30
 800a13e:	2207      	movs	r2, #7
 800a140:	fa02 f303 	lsl.w	r3, r2, r3
 800a144:	43da      	mvns	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	400a      	ands	r2, r1
 800a14c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68d9      	ldr	r1, [r3, #12]
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	689a      	ldr	r2, [r3, #8]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	4618      	mov	r0, r3
 800a160:	4603      	mov	r3, r0
 800a162:	005b      	lsls	r3, r3, #1
 800a164:	4403      	add	r3, r0
 800a166:	3b1e      	subs	r3, #30
 800a168:	409a      	lsls	r2, r3
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	430a      	orrs	r2, r1
 800a170:	60da      	str	r2, [r3, #12]
 800a172:	e022      	b.n	800a1ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	6919      	ldr	r1, [r3, #16]
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	b29b      	uxth	r3, r3
 800a180:	461a      	mov	r2, r3
 800a182:	4613      	mov	r3, r2
 800a184:	005b      	lsls	r3, r3, #1
 800a186:	4413      	add	r3, r2
 800a188:	2207      	movs	r2, #7
 800a18a:	fa02 f303 	lsl.w	r3, r2, r3
 800a18e:	43da      	mvns	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	400a      	ands	r2, r1
 800a196:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	6919      	ldr	r1, [r3, #16]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	689a      	ldr	r2, [r3, #8]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	005b      	lsls	r3, r3, #1
 800a1ae:	4403      	add	r3, r0
 800a1b0:	409a      	lsls	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	430a      	orrs	r2, r1
 800a1b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	2b06      	cmp	r3, #6
 800a1c0:	d824      	bhi.n	800a20c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4413      	add	r3, r2
 800a1d2:	3b05      	subs	r3, #5
 800a1d4:	221f      	movs	r2, #31
 800a1d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1da:	43da      	mvns	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	400a      	ands	r2, r1
 800a1e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4413      	add	r3, r2
 800a1fc:	3b05      	subs	r3, #5
 800a1fe:	fa00 f203 	lsl.w	r2, r0, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	430a      	orrs	r2, r1
 800a208:	635a      	str	r2, [r3, #52]	; 0x34
 800a20a:	e04c      	b.n	800a2a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	2b0c      	cmp	r3, #12
 800a212:	d824      	bhi.n	800a25e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	4613      	mov	r3, r2
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	4413      	add	r3, r2
 800a224:	3b23      	subs	r3, #35	; 0x23
 800a226:	221f      	movs	r2, #31
 800a228:	fa02 f303 	lsl.w	r3, r2, r3
 800a22c:	43da      	mvns	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	400a      	ands	r2, r1
 800a234:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	b29b      	uxth	r3, r3
 800a242:	4618      	mov	r0, r3
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	685a      	ldr	r2, [r3, #4]
 800a248:	4613      	mov	r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	4413      	add	r3, r2
 800a24e:	3b23      	subs	r3, #35	; 0x23
 800a250:	fa00 f203 	lsl.w	r2, r0, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	430a      	orrs	r2, r1
 800a25a:	631a      	str	r2, [r3, #48]	; 0x30
 800a25c:	e023      	b.n	800a2a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	685a      	ldr	r2, [r3, #4]
 800a268:	4613      	mov	r3, r2
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	4413      	add	r3, r2
 800a26e:	3b41      	subs	r3, #65	; 0x41
 800a270:	221f      	movs	r2, #31
 800a272:	fa02 f303 	lsl.w	r3, r2, r3
 800a276:	43da      	mvns	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	400a      	ands	r2, r1
 800a27e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	4618      	mov	r0, r3
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	685a      	ldr	r2, [r3, #4]
 800a292:	4613      	mov	r3, r2
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	4413      	add	r3, r2
 800a298:	3b41      	subs	r3, #65	; 0x41
 800a29a:	fa00 f203 	lsl.w	r2, r0, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	430a      	orrs	r2, r1
 800a2a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a2a6:	4b29      	ldr	r3, [pc, #164]	; (800a34c <HAL_ADC_ConfigChannel+0x250>)
 800a2a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a28      	ldr	r2, [pc, #160]	; (800a350 <HAL_ADC_ConfigChannel+0x254>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d10f      	bne.n	800a2d4 <HAL_ADC_ConfigChannel+0x1d8>
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b12      	cmp	r3, #18
 800a2ba:	d10b      	bne.n	800a2d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a1d      	ldr	r2, [pc, #116]	; (800a350 <HAL_ADC_ConfigChannel+0x254>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d12b      	bne.n	800a336 <HAL_ADC_ConfigChannel+0x23a>
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a1c      	ldr	r2, [pc, #112]	; (800a354 <HAL_ADC_ConfigChannel+0x258>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d003      	beq.n	800a2f0 <HAL_ADC_ConfigChannel+0x1f4>
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	2b11      	cmp	r3, #17
 800a2ee:	d122      	bne.n	800a336 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a11      	ldr	r2, [pc, #68]	; (800a354 <HAL_ADC_ConfigChannel+0x258>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d111      	bne.n	800a336 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a312:	4b11      	ldr	r3, [pc, #68]	; (800a358 <HAL_ADC_ConfigChannel+0x25c>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a11      	ldr	r2, [pc, #68]	; (800a35c <HAL_ADC_ConfigChannel+0x260>)
 800a318:	fba2 2303 	umull	r2, r3, r2, r3
 800a31c:	0c9a      	lsrs	r2, r3, #18
 800a31e:	4613      	mov	r3, r2
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4413      	add	r3, r2
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a328:	e002      	b.n	800a330 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	3b01      	subs	r3, #1
 800a32e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1f9      	bne.n	800a32a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a33e:	2300      	movs	r3, #0
}
 800a340:	4618      	mov	r0, r3
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr
 800a34c:	40012300 	.word	0x40012300
 800a350:	40012000 	.word	0x40012000
 800a354:	10000012 	.word	0x10000012
 800a358:	20000000 	.word	0x20000000
 800a35c:	431bde83 	.word	0x431bde83

0800a360 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a368:	4b79      	ldr	r3, [pc, #484]	; (800a550 <ADC_Init+0x1f0>)
 800a36a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	431a      	orrs	r2, r3
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	685a      	ldr	r2, [r3, #4]
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	6859      	ldr	r1, [r3, #4]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	021a      	lsls	r2, r3, #8
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	685a      	ldr	r2, [r3, #4]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a3b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	6859      	ldr	r1, [r3, #4]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	689a      	ldr	r2, [r3, #8]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	689a      	ldr	r2, [r3, #8]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a3da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6899      	ldr	r1, [r3, #8]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	68da      	ldr	r2, [r3, #12]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f2:	4a58      	ldr	r2, [pc, #352]	; (800a554 <ADC_Init+0x1f4>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d022      	beq.n	800a43e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	689a      	ldr	r2, [r3, #8]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a406:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	6899      	ldr	r1, [r3, #8]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	430a      	orrs	r2, r1
 800a418:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	689a      	ldr	r2, [r3, #8]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	6899      	ldr	r1, [r3, #8]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	430a      	orrs	r2, r1
 800a43a:	609a      	str	r2, [r3, #8]
 800a43c:	e00f      	b.n	800a45e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	689a      	ldr	r2, [r3, #8]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a44c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	689a      	ldr	r2, [r3, #8]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a45c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	689a      	ldr	r2, [r3, #8]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f022 0202 	bic.w	r2, r2, #2
 800a46c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	6899      	ldr	r1, [r3, #8]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	7e1b      	ldrb	r3, [r3, #24]
 800a478:	005a      	lsls	r2, r3, #1
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	430a      	orrs	r2, r1
 800a480:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d01b      	beq.n	800a4c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685a      	ldr	r2, [r3, #4]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a49a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	685a      	ldr	r2, [r3, #4]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a4aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6859      	ldr	r1, [r3, #4]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	035a      	lsls	r2, r3, #13
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	605a      	str	r2, [r3, #4]
 800a4c2:	e007      	b.n	800a4d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	685a      	ldr	r2, [r3, #4]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a4e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	69db      	ldr	r3, [r3, #28]
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	051a      	lsls	r2, r3, #20
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	430a      	orrs	r2, r1
 800a4f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	689a      	ldr	r2, [r3, #8]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a508:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6899      	ldr	r1, [r3, #8]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a516:	025a      	lsls	r2, r3, #9
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	430a      	orrs	r2, r1
 800a51e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	689a      	ldr	r2, [r3, #8]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a52e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	6899      	ldr	r1, [r3, #8]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	695b      	ldr	r3, [r3, #20]
 800a53a:	029a      	lsls	r2, r3, #10
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	430a      	orrs	r2, r1
 800a542:	609a      	str	r2, [r3, #8]
}
 800a544:	bf00      	nop
 800a546:	3714      	adds	r7, #20
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr
 800a550:	40012300 	.word	0x40012300
 800a554:	0f000001 	.word	0x0f000001

0800a558 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a564:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d13c      	bne.n	800a5ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a576:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d12b      	bne.n	800a5e4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a590:	2b00      	cmp	r3, #0
 800a592:	d127      	bne.n	800a5e4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a59a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d006      	beq.n	800a5b0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d119      	bne.n	800a5e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	685a      	ldr	r2, [r3, #4]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f022 0220 	bic.w	r2, r2, #32
 800a5be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d105      	bne.n	800a5e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5dc:	f043 0201 	orr.w	r2, r3, #1
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f7ff fd6b 	bl	800a0c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a5ea:	e00e      	b.n	800a60a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f0:	f003 0310 	and.w	r3, r3, #16
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d003      	beq.n	800a600 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f7ff fd75 	bl	800a0e8 <HAL_ADC_ErrorCallback>
}
 800a5fe:	e004      	b.n	800a60a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	4798      	blx	r3
}
 800a60a:	bf00      	nop
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b084      	sub	sp, #16
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f7ff fd57 	bl	800a0d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a626:	bf00      	nop
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b084      	sub	sp, #16
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a63a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2240      	movs	r2, #64	; 0x40
 800a640:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a646:	f043 0204 	orr.w	r2, r3, #4
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	f7ff fd4a 	bl	800a0e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a654:	bf00      	nop
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f003 0307 	and.w	r3, r3, #7
 800a66a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a66c:	4b0c      	ldr	r3, [pc, #48]	; (800a6a0 <__NVIC_SetPriorityGrouping+0x44>)
 800a66e:	68db      	ldr	r3, [r3, #12]
 800a670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a678:	4013      	ands	r3, r2
 800a67a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a68c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a68e:	4a04      	ldr	r2, [pc, #16]	; (800a6a0 <__NVIC_SetPriorityGrouping+0x44>)
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	60d3      	str	r3, [r2, #12]
}
 800a694:	bf00      	nop
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr
 800a6a0:	e000ed00 	.word	0xe000ed00

0800a6a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a6a8:	4b04      	ldr	r3, [pc, #16]	; (800a6bc <__NVIC_GetPriorityGrouping+0x18>)
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	0a1b      	lsrs	r3, r3, #8
 800a6ae:	f003 0307 	and.w	r3, r3, #7
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr
 800a6bc:	e000ed00 	.word	0xe000ed00

0800a6c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a6ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	db0b      	blt.n	800a6ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a6d2:	79fb      	ldrb	r3, [r7, #7]
 800a6d4:	f003 021f 	and.w	r2, r3, #31
 800a6d8:	4907      	ldr	r1, [pc, #28]	; (800a6f8 <__NVIC_EnableIRQ+0x38>)
 800a6da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6de:	095b      	lsrs	r3, r3, #5
 800a6e0:	2001      	movs	r0, #1
 800a6e2:	fa00 f202 	lsl.w	r2, r0, r2
 800a6e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a6ea:	bf00      	nop
 800a6ec:	370c      	adds	r7, #12
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	e000e100 	.word	0xe000e100

0800a6fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	4603      	mov	r3, r0
 800a704:	6039      	str	r1, [r7, #0]
 800a706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	db0a      	blt.n	800a726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	b2da      	uxtb	r2, r3
 800a714:	490c      	ldr	r1, [pc, #48]	; (800a748 <__NVIC_SetPriority+0x4c>)
 800a716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a71a:	0112      	lsls	r2, r2, #4
 800a71c:	b2d2      	uxtb	r2, r2
 800a71e:	440b      	add	r3, r1
 800a720:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a724:	e00a      	b.n	800a73c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	b2da      	uxtb	r2, r3
 800a72a:	4908      	ldr	r1, [pc, #32]	; (800a74c <__NVIC_SetPriority+0x50>)
 800a72c:	79fb      	ldrb	r3, [r7, #7]
 800a72e:	f003 030f 	and.w	r3, r3, #15
 800a732:	3b04      	subs	r3, #4
 800a734:	0112      	lsls	r2, r2, #4
 800a736:	b2d2      	uxtb	r2, r2
 800a738:	440b      	add	r3, r1
 800a73a:	761a      	strb	r2, [r3, #24]
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr
 800a748:	e000e100 	.word	0xe000e100
 800a74c:	e000ed00 	.word	0xe000ed00

0800a750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a750:	b480      	push	{r7}
 800a752:	b089      	sub	sp, #36	; 0x24
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f003 0307 	and.w	r3, r3, #7
 800a762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	f1c3 0307 	rsb	r3, r3, #7
 800a76a:	2b04      	cmp	r3, #4
 800a76c:	bf28      	it	cs
 800a76e:	2304      	movcs	r3, #4
 800a770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a772:	69fb      	ldr	r3, [r7, #28]
 800a774:	3304      	adds	r3, #4
 800a776:	2b06      	cmp	r3, #6
 800a778:	d902      	bls.n	800a780 <NVIC_EncodePriority+0x30>
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	3b03      	subs	r3, #3
 800a77e:	e000      	b.n	800a782 <NVIC_EncodePriority+0x32>
 800a780:	2300      	movs	r3, #0
 800a782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a784:	f04f 32ff 	mov.w	r2, #4294967295
 800a788:	69bb      	ldr	r3, [r7, #24]
 800a78a:	fa02 f303 	lsl.w	r3, r2, r3
 800a78e:	43da      	mvns	r2, r3
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	401a      	ands	r2, r3
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a798:	f04f 31ff 	mov.w	r1, #4294967295
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	fa01 f303 	lsl.w	r3, r1, r3
 800a7a2:	43d9      	mvns	r1, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a7a8:	4313      	orrs	r3, r2
         );
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3724      	adds	r7, #36	; 0x24
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
	...

0800a7b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	3b01      	subs	r3, #1
 800a7c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a7c8:	d301      	bcc.n	800a7ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e00f      	b.n	800a7ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a7ce:	4a0a      	ldr	r2, [pc, #40]	; (800a7f8 <SysTick_Config+0x40>)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	3b01      	subs	r3, #1
 800a7d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a7d6:	210f      	movs	r1, #15
 800a7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7dc:	f7ff ff8e 	bl	800a6fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a7e0:	4b05      	ldr	r3, [pc, #20]	; (800a7f8 <SysTick_Config+0x40>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a7e6:	4b04      	ldr	r3, [pc, #16]	; (800a7f8 <SysTick_Config+0x40>)
 800a7e8:	2207      	movs	r2, #7
 800a7ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3708      	adds	r7, #8
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	e000e010 	.word	0xe000e010

0800a7fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f7ff ff29 	bl	800a65c <__NVIC_SetPriorityGrouping>
}
 800a80a:	bf00      	nop
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a812:	b580      	push	{r7, lr}
 800a814:	b086      	sub	sp, #24
 800a816:	af00      	add	r7, sp, #0
 800a818:	4603      	mov	r3, r0
 800a81a:	60b9      	str	r1, [r7, #8]
 800a81c:	607a      	str	r2, [r7, #4]
 800a81e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a820:	2300      	movs	r3, #0
 800a822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a824:	f7ff ff3e 	bl	800a6a4 <__NVIC_GetPriorityGrouping>
 800a828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	68b9      	ldr	r1, [r7, #8]
 800a82e:	6978      	ldr	r0, [r7, #20]
 800a830:	f7ff ff8e 	bl	800a750 <NVIC_EncodePriority>
 800a834:	4602      	mov	r2, r0
 800a836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a83a:	4611      	mov	r1, r2
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7ff ff5d 	bl	800a6fc <__NVIC_SetPriority>
}
 800a842:	bf00      	nop
 800a844:	3718      	adds	r7, #24
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b082      	sub	sp, #8
 800a84e:	af00      	add	r7, sp, #0
 800a850:	4603      	mov	r3, r0
 800a852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a858:	4618      	mov	r0, r3
 800a85a:	f7ff ff31 	bl	800a6c0 <__NVIC_EnableIRQ>
}
 800a85e:	bf00      	nop
 800a860:	3708      	adds	r7, #8
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}

0800a866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a866:	b580      	push	{r7, lr}
 800a868:	b082      	sub	sp, #8
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f7ff ffa2 	bl	800a7b8 <SysTick_Config>
 800a874:	4603      	mov	r3, r0
}
 800a876:	4618      	mov	r0, r3
 800a878:	3708      	adds	r7, #8
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
	...

0800a880 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a888:	2300      	movs	r3, #0
 800a88a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a88c:	f7ff fab4 	bl	8009df8 <HAL_GetTick>
 800a890:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d101      	bne.n	800a89c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a898:	2301      	movs	r3, #1
 800a89a:	e099      	b.n	800a9d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2202      	movs	r2, #2
 800a8a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f022 0201 	bic.w	r2, r2, #1
 800a8ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a8bc:	e00f      	b.n	800a8de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a8be:	f7ff fa9b 	bl	8009df8 <HAL_GetTick>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	1ad3      	subs	r3, r2, r3
 800a8c8:	2b05      	cmp	r3, #5
 800a8ca:	d908      	bls.n	800a8de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2220      	movs	r2, #32
 800a8d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2203      	movs	r2, #3
 800a8d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	e078      	b.n	800a9d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 0301 	and.w	r3, r3, #1
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1e8      	bne.n	800a8be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a8f4:	697a      	ldr	r2, [r7, #20]
 800a8f6:	4b38      	ldr	r3, [pc, #224]	; (800a9d8 <HAL_DMA_Init+0x158>)
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	685a      	ldr	r2, [r3, #4]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	689b      	ldr	r3, [r3, #8]
 800a904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a90a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6a1b      	ldr	r3, [r3, #32]
 800a928:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a92a:	697a      	ldr	r2, [r7, #20]
 800a92c:	4313      	orrs	r3, r2
 800a92e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a934:	2b04      	cmp	r3, #4
 800a936:	d107      	bne.n	800a948 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a940:	4313      	orrs	r3, r2
 800a942:	697a      	ldr	r2, [r7, #20]
 800a944:	4313      	orrs	r3, r2
 800a946:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	697a      	ldr	r2, [r7, #20]
 800a94e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	695b      	ldr	r3, [r3, #20]
 800a956:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	f023 0307 	bic.w	r3, r3, #7
 800a95e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a964:	697a      	ldr	r2, [r7, #20]
 800a966:	4313      	orrs	r3, r2
 800a968:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a96e:	2b04      	cmp	r3, #4
 800a970:	d117      	bne.n	800a9a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a976:	697a      	ldr	r2, [r7, #20]
 800a978:	4313      	orrs	r3, r2
 800a97a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00e      	beq.n	800a9a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 fa9d 	bl	800aec4 <DMA_CheckFifoParam>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d008      	beq.n	800a9a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2240      	movs	r2, #64	; 0x40
 800a994:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e016      	b.n	800a9d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	697a      	ldr	r2, [r7, #20]
 800a9a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fa54 	bl	800ae58 <DMA_CalcBaseAndBitshift>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9b8:	223f      	movs	r2, #63	; 0x3f
 800a9ba:	409a      	lsls	r2, r3
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3718      	adds	r7, #24
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	f010803f 	.word	0xf010803f

0800a9dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b086      	sub	sp, #24
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
 800a9e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d101      	bne.n	800aa02 <HAL_DMA_Start_IT+0x26>
 800a9fe:	2302      	movs	r3, #2
 800aa00:	e040      	b.n	800aa84 <HAL_DMA_Start_IT+0xa8>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2201      	movs	r2, #1
 800aa06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d12f      	bne.n	800aa76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2202      	movs	r2, #2
 800aa1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	68b9      	ldr	r1, [r7, #8]
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f000 f9e6 	bl	800adfc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa34:	223f      	movs	r2, #63	; 0x3f
 800aa36:	409a      	lsls	r2, r3
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f042 0216 	orr.w	r2, r2, #22
 800aa4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d007      	beq.n	800aa64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f042 0208 	orr.w	r2, r2, #8
 800aa62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f042 0201 	orr.w	r2, r2, #1
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	e005      	b.n	800aa82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800aa7e:	2302      	movs	r3, #2
 800aa80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800aa82:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3718      	adds	r7, #24
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	2b02      	cmp	r3, #2
 800aa9e:	d004      	beq.n	800aaaa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2280      	movs	r2, #128	; 0x80
 800aaa4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e00c      	b.n	800aac4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2205      	movs	r2, #5
 800aaae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f022 0201 	bic.w	r2, r2, #1
 800aac0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b086      	sub	sp, #24
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800aad8:	2300      	movs	r3, #0
 800aada:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800aadc:	4b92      	ldr	r3, [pc, #584]	; (800ad28 <HAL_DMA_IRQHandler+0x258>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a92      	ldr	r2, [pc, #584]	; (800ad2c <HAL_DMA_IRQHandler+0x25c>)
 800aae2:	fba2 2303 	umull	r2, r3, r2, r3
 800aae6:	0a9b      	lsrs	r3, r3, #10
 800aae8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aafa:	2208      	movs	r2, #8
 800aafc:	409a      	lsls	r2, r3
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	4013      	ands	r3, r2
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d01a      	beq.n	800ab3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 0304 	and.w	r3, r3, #4
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d013      	beq.n	800ab3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f022 0204 	bic.w	r2, r2, #4
 800ab22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab28:	2208      	movs	r2, #8
 800ab2a:	409a      	lsls	r2, r3
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab34:	f043 0201 	orr.w	r2, r3, #1
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab40:	2201      	movs	r2, #1
 800ab42:	409a      	lsls	r2, r3
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	4013      	ands	r3, r2
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d012      	beq.n	800ab72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00b      	beq.n	800ab72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab5e:	2201      	movs	r2, #1
 800ab60:	409a      	lsls	r2, r3
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab6a:	f043 0202 	orr.w	r2, r3, #2
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab76:	2204      	movs	r2, #4
 800ab78:	409a      	lsls	r2, r3
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	4013      	ands	r3, r2
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d012      	beq.n	800aba8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 0302 	and.w	r3, r3, #2
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00b      	beq.n	800aba8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab94:	2204      	movs	r2, #4
 800ab96:	409a      	lsls	r2, r3
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aba0:	f043 0204 	orr.w	r2, r3, #4
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abac:	2210      	movs	r2, #16
 800abae:	409a      	lsls	r2, r3
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	4013      	ands	r3, r2
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d043      	beq.n	800ac40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f003 0308 	and.w	r3, r3, #8
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d03c      	beq.n	800ac40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abca:	2210      	movs	r2, #16
 800abcc:	409a      	lsls	r2, r3
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d018      	beq.n	800ac12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800abea:	2b00      	cmp	r3, #0
 800abec:	d108      	bne.n	800ac00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d024      	beq.n	800ac40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	4798      	blx	r3
 800abfe:	e01f      	b.n	800ac40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d01b      	beq.n	800ac40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	4798      	blx	r3
 800ac10:	e016      	b.n	800ac40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d107      	bne.n	800ac30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f022 0208 	bic.w	r2, r2, #8
 800ac2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d003      	beq.n	800ac40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac44:	2220      	movs	r2, #32
 800ac46:	409a      	lsls	r2, r3
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f000 808e 	beq.w	800ad6e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f003 0310 	and.w	r3, r3, #16
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f000 8086 	beq.w	800ad6e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac66:	2220      	movs	r2, #32
 800ac68:	409a      	lsls	r2, r3
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	2b05      	cmp	r3, #5
 800ac78:	d136      	bne.n	800ace8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	f022 0216 	bic.w	r2, r2, #22
 800ac88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	695a      	ldr	r2, [r3, #20]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ac98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d103      	bne.n	800acaa <HAL_DMA_IRQHandler+0x1da>
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d007      	beq.n	800acba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f022 0208 	bic.w	r2, r2, #8
 800acb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acbe:	223f      	movs	r2, #63	; 0x3f
 800acc0:	409a      	lsls	r2, r3
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2200      	movs	r2, #0
 800acca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2201      	movs	r2, #1
 800acd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d07d      	beq.n	800adda <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	4798      	blx	r3
        }
        return;
 800ace6:	e078      	b.n	800adda <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d01c      	beq.n	800ad30 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d108      	bne.n	800ad16 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d030      	beq.n	800ad6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	4798      	blx	r3
 800ad14:	e02b      	b.n	800ad6e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d027      	beq.n	800ad6e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	4798      	blx	r3
 800ad26:	e022      	b.n	800ad6e <HAL_DMA_IRQHandler+0x29e>
 800ad28:	20000000 	.word	0x20000000
 800ad2c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10f      	bne.n	800ad5e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f022 0210 	bic.w	r2, r2, #16
 800ad4c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2200      	movs	r2, #0
 800ad52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d003      	beq.n	800ad6e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d032      	beq.n	800addc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad7a:	f003 0301 	and.w	r3, r3, #1
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d022      	beq.n	800adc8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2205      	movs	r2, #5
 800ad86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	681a      	ldr	r2, [r3, #0]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f022 0201 	bic.w	r2, r2, #1
 800ad98:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	60bb      	str	r3, [r7, #8]
 800ada0:	697a      	ldr	r2, [r7, #20]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d307      	bcc.n	800adb6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 0301 	and.w	r3, r3, #1
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1f2      	bne.n	800ad9a <HAL_DMA_IRQHandler+0x2ca>
 800adb4:	e000      	b.n	800adb8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800adb6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d005      	beq.n	800addc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	4798      	blx	r3
 800add8:	e000      	b.n	800addc <HAL_DMA_IRQHandler+0x30c>
        return;
 800adda:	bf00      	nop
    }
  }
}
 800addc:	3718      	adds	r7, #24
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop

0800ade4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
 800ae08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ae18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	683a      	ldr	r2, [r7, #0]
 800ae20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	2b40      	cmp	r3, #64	; 0x40
 800ae28:	d108      	bne.n	800ae3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ae3a:	e007      	b.n	800ae4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	60da      	str	r2, [r3, #12]
}
 800ae4c:	bf00      	nop
 800ae4e:	3714      	adds	r7, #20
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	3b10      	subs	r3, #16
 800ae68:	4a14      	ldr	r2, [pc, #80]	; (800aebc <DMA_CalcBaseAndBitshift+0x64>)
 800ae6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae6e:	091b      	lsrs	r3, r3, #4
 800ae70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ae72:	4a13      	ldr	r2, [pc, #76]	; (800aec0 <DMA_CalcBaseAndBitshift+0x68>)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	4413      	add	r3, r2
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2b03      	cmp	r3, #3
 800ae84:	d909      	bls.n	800ae9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ae8e:	f023 0303 	bic.w	r3, r3, #3
 800ae92:	1d1a      	adds	r2, r3, #4
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	659a      	str	r2, [r3, #88]	; 0x58
 800ae98:	e007      	b.n	800aeaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800aea2:	f023 0303 	bic.w	r3, r3, #3
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3714      	adds	r7, #20
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	aaaaaaab 	.word	0xaaaaaaab
 800aec0:	0801a108 	.word	0x0801a108

0800aec4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b085      	sub	sp, #20
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aecc:	2300      	movs	r3, #0
 800aece:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d11f      	bne.n	800af1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	2b03      	cmp	r3, #3
 800aee2:	d855      	bhi.n	800af90 <DMA_CheckFifoParam+0xcc>
 800aee4:	a201      	add	r2, pc, #4	; (adr r2, 800aeec <DMA_CheckFifoParam+0x28>)
 800aee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeea:	bf00      	nop
 800aeec:	0800aefd 	.word	0x0800aefd
 800aef0:	0800af0f 	.word	0x0800af0f
 800aef4:	0800aefd 	.word	0x0800aefd
 800aef8:	0800af91 	.word	0x0800af91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af04:	2b00      	cmp	r3, #0
 800af06:	d045      	beq.n	800af94 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800af08:	2301      	movs	r3, #1
 800af0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800af0c:	e042      	b.n	800af94 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800af16:	d13f      	bne.n	800af98 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800af1c:	e03c      	b.n	800af98 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af26:	d121      	bne.n	800af6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	2b03      	cmp	r3, #3
 800af2c:	d836      	bhi.n	800af9c <DMA_CheckFifoParam+0xd8>
 800af2e:	a201      	add	r2, pc, #4	; (adr r2, 800af34 <DMA_CheckFifoParam+0x70>)
 800af30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af34:	0800af45 	.word	0x0800af45
 800af38:	0800af4b 	.word	0x0800af4b
 800af3c:	0800af45 	.word	0x0800af45
 800af40:	0800af5d 	.word	0x0800af5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800af44:	2301      	movs	r3, #1
 800af46:	73fb      	strb	r3, [r7, #15]
      break;
 800af48:	e02f      	b.n	800afaa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af52:	2b00      	cmp	r3, #0
 800af54:	d024      	beq.n	800afa0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800af5a:	e021      	b.n	800afa0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800af64:	d11e      	bne.n	800afa4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800af6a:	e01b      	b.n	800afa4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	2b02      	cmp	r3, #2
 800af70:	d902      	bls.n	800af78 <DMA_CheckFifoParam+0xb4>
 800af72:	2b03      	cmp	r3, #3
 800af74:	d003      	beq.n	800af7e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800af76:	e018      	b.n	800afaa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	73fb      	strb	r3, [r7, #15]
      break;
 800af7c:	e015      	b.n	800afaa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00e      	beq.n	800afa8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	73fb      	strb	r3, [r7, #15]
      break;
 800af8e:	e00b      	b.n	800afa8 <DMA_CheckFifoParam+0xe4>
      break;
 800af90:	bf00      	nop
 800af92:	e00a      	b.n	800afaa <DMA_CheckFifoParam+0xe6>
      break;
 800af94:	bf00      	nop
 800af96:	e008      	b.n	800afaa <DMA_CheckFifoParam+0xe6>
      break;
 800af98:	bf00      	nop
 800af9a:	e006      	b.n	800afaa <DMA_CheckFifoParam+0xe6>
      break;
 800af9c:	bf00      	nop
 800af9e:	e004      	b.n	800afaa <DMA_CheckFifoParam+0xe6>
      break;
 800afa0:	bf00      	nop
 800afa2:	e002      	b.n	800afaa <DMA_CheckFifoParam+0xe6>
      break;   
 800afa4:	bf00      	nop
 800afa6:	e000      	b.n	800afaa <DMA_CheckFifoParam+0xe6>
      break;
 800afa8:	bf00      	nop
    }
  } 
  
  return status; 
 800afaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800afac:	4618      	mov	r0, r3
 800afae:	3714      	adds	r7, #20
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800afb8:	b480      	push	{r7}
 800afba:	b089      	sub	sp, #36	; 0x24
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800afc2:	2300      	movs	r3, #0
 800afc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800afc6:	2300      	movs	r3, #0
 800afc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800afca:	2300      	movs	r3, #0
 800afcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800afce:	2300      	movs	r3, #0
 800afd0:	61fb      	str	r3, [r7, #28]
 800afd2:	e177      	b.n	800b2c4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800afd4:	2201      	movs	r2, #1
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	fa02 f303 	lsl.w	r3, r2, r3
 800afdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	697a      	ldr	r2, [r7, #20]
 800afe4:	4013      	ands	r3, r2
 800afe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800afe8:	693a      	ldr	r2, [r7, #16]
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	429a      	cmp	r2, r3
 800afee:	f040 8166 	bne.w	800b2be <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d00b      	beq.n	800b012 <HAL_GPIO_Init+0x5a>
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	2b02      	cmp	r3, #2
 800b000:	d007      	beq.n	800b012 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b006:	2b11      	cmp	r3, #17
 800b008:	d003      	beq.n	800b012 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	2b12      	cmp	r3, #18
 800b010:	d130      	bne.n	800b074 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	689b      	ldr	r3, [r3, #8]
 800b016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	005b      	lsls	r3, r3, #1
 800b01c:	2203      	movs	r2, #3
 800b01e:	fa02 f303 	lsl.w	r3, r2, r3
 800b022:	43db      	mvns	r3, r3
 800b024:	69ba      	ldr	r2, [r7, #24]
 800b026:	4013      	ands	r3, r2
 800b028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	68da      	ldr	r2, [r3, #12]
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	005b      	lsls	r3, r3, #1
 800b032:	fa02 f303 	lsl.w	r3, r2, r3
 800b036:	69ba      	ldr	r2, [r7, #24]
 800b038:	4313      	orrs	r3, r2
 800b03a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	69ba      	ldr	r2, [r7, #24]
 800b040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b048:	2201      	movs	r2, #1
 800b04a:	69fb      	ldr	r3, [r7, #28]
 800b04c:	fa02 f303 	lsl.w	r3, r2, r3
 800b050:	43db      	mvns	r3, r3
 800b052:	69ba      	ldr	r2, [r7, #24]
 800b054:	4013      	ands	r3, r2
 800b056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	091b      	lsrs	r3, r3, #4
 800b05e:	f003 0201 	and.w	r2, r3, #1
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	fa02 f303 	lsl.w	r3, r2, r3
 800b068:	69ba      	ldr	r2, [r7, #24]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	69ba      	ldr	r2, [r7, #24]
 800b072:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	68db      	ldr	r3, [r3, #12]
 800b078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	005b      	lsls	r3, r3, #1
 800b07e:	2203      	movs	r2, #3
 800b080:	fa02 f303 	lsl.w	r3, r2, r3
 800b084:	43db      	mvns	r3, r3
 800b086:	69ba      	ldr	r2, [r7, #24]
 800b088:	4013      	ands	r3, r2
 800b08a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	689a      	ldr	r2, [r3, #8]
 800b090:	69fb      	ldr	r3, [r7, #28]
 800b092:	005b      	lsls	r3, r3, #1
 800b094:	fa02 f303 	lsl.w	r3, r2, r3
 800b098:	69ba      	ldr	r2, [r7, #24]
 800b09a:	4313      	orrs	r3, r2
 800b09c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	69ba      	ldr	r2, [r7, #24]
 800b0a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	2b02      	cmp	r3, #2
 800b0aa:	d003      	beq.n	800b0b4 <HAL_GPIO_Init+0xfc>
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	2b12      	cmp	r3, #18
 800b0b2:	d123      	bne.n	800b0fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	08da      	lsrs	r2, r3, #3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	3208      	adds	r2, #8
 800b0bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	f003 0307 	and.w	r3, r3, #7
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	220f      	movs	r2, #15
 800b0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b0d0:	43db      	mvns	r3, r3
 800b0d2:	69ba      	ldr	r2, [r7, #24]
 800b0d4:	4013      	ands	r3, r2
 800b0d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	691a      	ldr	r2, [r3, #16]
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	f003 0307 	and.w	r3, r3, #7
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e8:	69ba      	ldr	r2, [r7, #24]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b0ee:	69fb      	ldr	r3, [r7, #28]
 800b0f0:	08da      	lsrs	r2, r3, #3
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	3208      	adds	r2, #8
 800b0f6:	69b9      	ldr	r1, [r7, #24]
 800b0f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b102:	69fb      	ldr	r3, [r7, #28]
 800b104:	005b      	lsls	r3, r3, #1
 800b106:	2203      	movs	r2, #3
 800b108:	fa02 f303 	lsl.w	r3, r2, r3
 800b10c:	43db      	mvns	r3, r3
 800b10e:	69ba      	ldr	r2, [r7, #24]
 800b110:	4013      	ands	r3, r2
 800b112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	f003 0203 	and.w	r2, r3, #3
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	005b      	lsls	r3, r3, #1
 800b120:	fa02 f303 	lsl.w	r3, r2, r3
 800b124:	69ba      	ldr	r2, [r7, #24]
 800b126:	4313      	orrs	r3, r2
 800b128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	69ba      	ldr	r2, [r7, #24]
 800b12e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f000 80c0 	beq.w	800b2be <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b13e:	2300      	movs	r3, #0
 800b140:	60fb      	str	r3, [r7, #12]
 800b142:	4b65      	ldr	r3, [pc, #404]	; (800b2d8 <HAL_GPIO_Init+0x320>)
 800b144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b146:	4a64      	ldr	r2, [pc, #400]	; (800b2d8 <HAL_GPIO_Init+0x320>)
 800b148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b14c:	6453      	str	r3, [r2, #68]	; 0x44
 800b14e:	4b62      	ldr	r3, [pc, #392]	; (800b2d8 <HAL_GPIO_Init+0x320>)
 800b150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b156:	60fb      	str	r3, [r7, #12]
 800b158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b15a:	4a60      	ldr	r2, [pc, #384]	; (800b2dc <HAL_GPIO_Init+0x324>)
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	089b      	lsrs	r3, r3, #2
 800b160:	3302      	adds	r3, #2
 800b162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	f003 0303 	and.w	r3, r3, #3
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	220f      	movs	r2, #15
 800b172:	fa02 f303 	lsl.w	r3, r2, r3
 800b176:	43db      	mvns	r3, r3
 800b178:	69ba      	ldr	r2, [r7, #24]
 800b17a:	4013      	ands	r3, r2
 800b17c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a57      	ldr	r2, [pc, #348]	; (800b2e0 <HAL_GPIO_Init+0x328>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d037      	beq.n	800b1f6 <HAL_GPIO_Init+0x23e>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4a56      	ldr	r2, [pc, #344]	; (800b2e4 <HAL_GPIO_Init+0x32c>)
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d031      	beq.n	800b1f2 <HAL_GPIO_Init+0x23a>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	4a55      	ldr	r2, [pc, #340]	; (800b2e8 <HAL_GPIO_Init+0x330>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d02b      	beq.n	800b1ee <HAL_GPIO_Init+0x236>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4a54      	ldr	r2, [pc, #336]	; (800b2ec <HAL_GPIO_Init+0x334>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d025      	beq.n	800b1ea <HAL_GPIO_Init+0x232>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	4a53      	ldr	r2, [pc, #332]	; (800b2f0 <HAL_GPIO_Init+0x338>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d01f      	beq.n	800b1e6 <HAL_GPIO_Init+0x22e>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a52      	ldr	r2, [pc, #328]	; (800b2f4 <HAL_GPIO_Init+0x33c>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d019      	beq.n	800b1e2 <HAL_GPIO_Init+0x22a>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a51      	ldr	r2, [pc, #324]	; (800b2f8 <HAL_GPIO_Init+0x340>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d013      	beq.n	800b1de <HAL_GPIO_Init+0x226>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a50      	ldr	r2, [pc, #320]	; (800b2fc <HAL_GPIO_Init+0x344>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d00d      	beq.n	800b1da <HAL_GPIO_Init+0x222>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a4f      	ldr	r2, [pc, #316]	; (800b300 <HAL_GPIO_Init+0x348>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d007      	beq.n	800b1d6 <HAL_GPIO_Init+0x21e>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a4e      	ldr	r2, [pc, #312]	; (800b304 <HAL_GPIO_Init+0x34c>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d101      	bne.n	800b1d2 <HAL_GPIO_Init+0x21a>
 800b1ce:	2309      	movs	r3, #9
 800b1d0:	e012      	b.n	800b1f8 <HAL_GPIO_Init+0x240>
 800b1d2:	230a      	movs	r3, #10
 800b1d4:	e010      	b.n	800b1f8 <HAL_GPIO_Init+0x240>
 800b1d6:	2308      	movs	r3, #8
 800b1d8:	e00e      	b.n	800b1f8 <HAL_GPIO_Init+0x240>
 800b1da:	2307      	movs	r3, #7
 800b1dc:	e00c      	b.n	800b1f8 <HAL_GPIO_Init+0x240>
 800b1de:	2306      	movs	r3, #6
 800b1e0:	e00a      	b.n	800b1f8 <HAL_GPIO_Init+0x240>
 800b1e2:	2305      	movs	r3, #5
 800b1e4:	e008      	b.n	800b1f8 <HAL_GPIO_Init+0x240>
 800b1e6:	2304      	movs	r3, #4
 800b1e8:	e006      	b.n	800b1f8 <HAL_GPIO_Init+0x240>
 800b1ea:	2303      	movs	r3, #3
 800b1ec:	e004      	b.n	800b1f8 <HAL_GPIO_Init+0x240>
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	e002      	b.n	800b1f8 <HAL_GPIO_Init+0x240>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e000      	b.n	800b1f8 <HAL_GPIO_Init+0x240>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	69fa      	ldr	r2, [r7, #28]
 800b1fa:	f002 0203 	and.w	r2, r2, #3
 800b1fe:	0092      	lsls	r2, r2, #2
 800b200:	4093      	lsls	r3, r2
 800b202:	69ba      	ldr	r2, [r7, #24]
 800b204:	4313      	orrs	r3, r2
 800b206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b208:	4934      	ldr	r1, [pc, #208]	; (800b2dc <HAL_GPIO_Init+0x324>)
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	089b      	lsrs	r3, r3, #2
 800b20e:	3302      	adds	r3, #2
 800b210:	69ba      	ldr	r2, [r7, #24]
 800b212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b216:	4b3c      	ldr	r3, [pc, #240]	; (800b308 <HAL_GPIO_Init+0x350>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	43db      	mvns	r3, r3
 800b220:	69ba      	ldr	r2, [r7, #24]
 800b222:	4013      	ands	r3, r2
 800b224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d003      	beq.n	800b23a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b232:	69ba      	ldr	r2, [r7, #24]
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	4313      	orrs	r3, r2
 800b238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b23a:	4a33      	ldr	r2, [pc, #204]	; (800b308 <HAL_GPIO_Init+0x350>)
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b240:	4b31      	ldr	r3, [pc, #196]	; (800b308 <HAL_GPIO_Init+0x350>)
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	43db      	mvns	r3, r3
 800b24a:	69ba      	ldr	r2, [r7, #24]
 800b24c:	4013      	ands	r3, r2
 800b24e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d003      	beq.n	800b264 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b25c:	69ba      	ldr	r2, [r7, #24]
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	4313      	orrs	r3, r2
 800b262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b264:	4a28      	ldr	r2, [pc, #160]	; (800b308 <HAL_GPIO_Init+0x350>)
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b26a:	4b27      	ldr	r3, [pc, #156]	; (800b308 <HAL_GPIO_Init+0x350>)
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	43db      	mvns	r3, r3
 800b274:	69ba      	ldr	r2, [r7, #24]
 800b276:	4013      	ands	r3, r2
 800b278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b282:	2b00      	cmp	r3, #0
 800b284:	d003      	beq.n	800b28e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b286:	69ba      	ldr	r2, [r7, #24]
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	4313      	orrs	r3, r2
 800b28c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b28e:	4a1e      	ldr	r2, [pc, #120]	; (800b308 <HAL_GPIO_Init+0x350>)
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b294:	4b1c      	ldr	r3, [pc, #112]	; (800b308 <HAL_GPIO_Init+0x350>)
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	43db      	mvns	r3, r3
 800b29e:	69ba      	ldr	r2, [r7, #24]
 800b2a0:	4013      	ands	r3, r2
 800b2a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d003      	beq.n	800b2b8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b2b0:	69ba      	ldr	r2, [r7, #24]
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b2b8:	4a13      	ldr	r2, [pc, #76]	; (800b308 <HAL_GPIO_Init+0x350>)
 800b2ba:	69bb      	ldr	r3, [r7, #24]
 800b2bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	61fb      	str	r3, [r7, #28]
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	2b0f      	cmp	r3, #15
 800b2c8:	f67f ae84 	bls.w	800afd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b2cc:	bf00      	nop
 800b2ce:	3724      	adds	r7, #36	; 0x24
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	40023800 	.word	0x40023800
 800b2dc:	40013800 	.word	0x40013800
 800b2e0:	40020000 	.word	0x40020000
 800b2e4:	40020400 	.word	0x40020400
 800b2e8:	40020800 	.word	0x40020800
 800b2ec:	40020c00 	.word	0x40020c00
 800b2f0:	40021000 	.word	0x40021000
 800b2f4:	40021400 	.word	0x40021400
 800b2f8:	40021800 	.word	0x40021800
 800b2fc:	40021c00 	.word	0x40021c00
 800b300:	40022000 	.word	0x40022000
 800b304:	40022400 	.word	0x40022400
 800b308:	40013c00 	.word	0x40013c00

0800b30c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	460b      	mov	r3, r1
 800b316:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	691a      	ldr	r2, [r3, #16]
 800b31c:	887b      	ldrh	r3, [r7, #2]
 800b31e:	4013      	ands	r3, r2
 800b320:	2b00      	cmp	r3, #0
 800b322:	d002      	beq.n	800b32a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b324:	2301      	movs	r3, #1
 800b326:	73fb      	strb	r3, [r7, #15]
 800b328:	e001      	b.n	800b32e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b32a:	2300      	movs	r3, #0
 800b32c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b330:	4618      	mov	r0, r3
 800b332:	3714      	adds	r7, #20
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	460b      	mov	r3, r1
 800b346:	807b      	strh	r3, [r7, #2]
 800b348:	4613      	mov	r3, r2
 800b34a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b34c:	787b      	ldrb	r3, [r7, #1]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d003      	beq.n	800b35a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b352:	887a      	ldrh	r2, [r7, #2]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b358:	e003      	b.n	800b362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b35a:	887b      	ldrh	r3, [r7, #2]
 800b35c:	041a      	lsls	r2, r3, #16
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	619a      	str	r2, [r3, #24]
}
 800b362:	bf00      	nop
 800b364:	370c      	adds	r7, #12
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr
	...

0800b370 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d101      	bne.n	800b382 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b37e:	2301      	movs	r3, #1
 800b380:	e11f      	b.n	800b5c2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d106      	bne.n	800b39c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f7fb fe62 	bl	8007060 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2224      	movs	r2, #36	; 0x24
 800b3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f022 0201 	bic.w	r2, r2, #1
 800b3b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b3d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b3d4:	f001 f96e 	bl	800c6b4 <HAL_RCC_GetPCLK1Freq>
 800b3d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	4a7b      	ldr	r2, [pc, #492]	; (800b5cc <HAL_I2C_Init+0x25c>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d807      	bhi.n	800b3f4 <HAL_I2C_Init+0x84>
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	4a7a      	ldr	r2, [pc, #488]	; (800b5d0 <HAL_I2C_Init+0x260>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	bf94      	ite	ls
 800b3ec:	2301      	movls	r3, #1
 800b3ee:	2300      	movhi	r3, #0
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	e006      	b.n	800b402 <HAL_I2C_Init+0x92>
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	4a77      	ldr	r2, [pc, #476]	; (800b5d4 <HAL_I2C_Init+0x264>)
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	bf94      	ite	ls
 800b3fc:	2301      	movls	r3, #1
 800b3fe:	2300      	movhi	r3, #0
 800b400:	b2db      	uxtb	r3, r3
 800b402:	2b00      	cmp	r3, #0
 800b404:	d001      	beq.n	800b40a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b406:	2301      	movs	r3, #1
 800b408:	e0db      	b.n	800b5c2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	4a72      	ldr	r2, [pc, #456]	; (800b5d8 <HAL_I2C_Init+0x268>)
 800b40e:	fba2 2303 	umull	r2, r3, r2, r3
 800b412:	0c9b      	lsrs	r3, r3, #18
 800b414:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	430a      	orrs	r2, r1
 800b428:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	6a1b      	ldr	r3, [r3, #32]
 800b430:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	4a64      	ldr	r2, [pc, #400]	; (800b5cc <HAL_I2C_Init+0x25c>)
 800b43a:	4293      	cmp	r3, r2
 800b43c:	d802      	bhi.n	800b444 <HAL_I2C_Init+0xd4>
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	3301      	adds	r3, #1
 800b442:	e009      	b.n	800b458 <HAL_I2C_Init+0xe8>
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b44a:	fb02 f303 	mul.w	r3, r2, r3
 800b44e:	4a63      	ldr	r2, [pc, #396]	; (800b5dc <HAL_I2C_Init+0x26c>)
 800b450:	fba2 2303 	umull	r2, r3, r2, r3
 800b454:	099b      	lsrs	r3, r3, #6
 800b456:	3301      	adds	r3, #1
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	6812      	ldr	r2, [r2, #0]
 800b45c:	430b      	orrs	r3, r1
 800b45e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	69db      	ldr	r3, [r3, #28]
 800b466:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b46a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	4956      	ldr	r1, [pc, #344]	; (800b5cc <HAL_I2C_Init+0x25c>)
 800b474:	428b      	cmp	r3, r1
 800b476:	d80d      	bhi.n	800b494 <HAL_I2C_Init+0x124>
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	1e59      	subs	r1, r3, #1
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	005b      	lsls	r3, r3, #1
 800b482:	fbb1 f3f3 	udiv	r3, r1, r3
 800b486:	3301      	adds	r3, #1
 800b488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b48c:	2b04      	cmp	r3, #4
 800b48e:	bf38      	it	cc
 800b490:	2304      	movcc	r3, #4
 800b492:	e04f      	b.n	800b534 <HAL_I2C_Init+0x1c4>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d111      	bne.n	800b4c0 <HAL_I2C_Init+0x150>
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	1e58      	subs	r0, r3, #1
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6859      	ldr	r1, [r3, #4]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	005b      	lsls	r3, r3, #1
 800b4a8:	440b      	add	r3, r1
 800b4aa:	fbb0 f3f3 	udiv	r3, r0, r3
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	bf0c      	ite	eq
 800b4b8:	2301      	moveq	r3, #1
 800b4ba:	2300      	movne	r3, #0
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	e012      	b.n	800b4e6 <HAL_I2C_Init+0x176>
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	1e58      	subs	r0, r3, #1
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6859      	ldr	r1, [r3, #4]
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	440b      	add	r3, r1
 800b4ce:	0099      	lsls	r1, r3, #2
 800b4d0:	440b      	add	r3, r1
 800b4d2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	bf0c      	ite	eq
 800b4e0:	2301      	moveq	r3, #1
 800b4e2:	2300      	movne	r3, #0
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d001      	beq.n	800b4ee <HAL_I2C_Init+0x17e>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e022      	b.n	800b534 <HAL_I2C_Init+0x1c4>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10e      	bne.n	800b514 <HAL_I2C_Init+0x1a4>
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	1e58      	subs	r0, r3, #1
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	6859      	ldr	r1, [r3, #4]
 800b4fe:	460b      	mov	r3, r1
 800b500:	005b      	lsls	r3, r3, #1
 800b502:	440b      	add	r3, r1
 800b504:	fbb0 f3f3 	udiv	r3, r0, r3
 800b508:	3301      	adds	r3, #1
 800b50a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b50e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b512:	e00f      	b.n	800b534 <HAL_I2C_Init+0x1c4>
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	1e58      	subs	r0, r3, #1
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6859      	ldr	r1, [r3, #4]
 800b51c:	460b      	mov	r3, r1
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	440b      	add	r3, r1
 800b522:	0099      	lsls	r1, r3, #2
 800b524:	440b      	add	r3, r1
 800b526:	fbb0 f3f3 	udiv	r3, r0, r3
 800b52a:	3301      	adds	r3, #1
 800b52c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b530:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b534:	6879      	ldr	r1, [r7, #4]
 800b536:	6809      	ldr	r1, [r1, #0]
 800b538:	4313      	orrs	r3, r2
 800b53a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	69da      	ldr	r2, [r3, #28]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a1b      	ldr	r3, [r3, #32]
 800b54e:	431a      	orrs	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	430a      	orrs	r2, r1
 800b556:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b562:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	6911      	ldr	r1, [r2, #16]
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	68d2      	ldr	r2, [r2, #12]
 800b56e:	4311      	orrs	r1, r2
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	6812      	ldr	r2, [r2, #0]
 800b574:	430b      	orrs	r3, r1
 800b576:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	695a      	ldr	r2, [r3, #20]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	699b      	ldr	r3, [r3, #24]
 800b58a:	431a      	orrs	r2, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	430a      	orrs	r2, r1
 800b592:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f042 0201 	orr.w	r2, r2, #1
 800b5a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2220      	movs	r2, #32
 800b5ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b5c0:	2300      	movs	r3, #0
}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3710      	adds	r7, #16
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	000186a0 	.word	0x000186a0
 800b5d0:	001e847f 	.word	0x001e847f
 800b5d4:	003d08ff 	.word	0x003d08ff
 800b5d8:	431bde83 	.word	0x431bde83
 800b5dc:	10624dd3 	.word	0x10624dd3

0800b5e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b088      	sub	sp, #32
 800b5e4:	af02      	add	r7, sp, #8
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	607a      	str	r2, [r7, #4]
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	460b      	mov	r3, r1
 800b5ee:	817b      	strh	r3, [r7, #10]
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b5f4:	f7fe fc00 	bl	8009df8 <HAL_GetTick>
 800b5f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b600:	b2db      	uxtb	r3, r3
 800b602:	2b20      	cmp	r3, #32
 800b604:	f040 80e0 	bne.w	800b7c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	2319      	movs	r3, #25
 800b60e:	2201      	movs	r2, #1
 800b610:	4970      	ldr	r1, [pc, #448]	; (800b7d4 <HAL_I2C_Master_Transmit+0x1f4>)
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f000 fc58 	bl	800bec8 <I2C_WaitOnFlagUntilTimeout>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d001      	beq.n	800b622 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b61e:	2302      	movs	r3, #2
 800b620:	e0d3      	b.n	800b7ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d101      	bne.n	800b630 <HAL_I2C_Master_Transmit+0x50>
 800b62c:	2302      	movs	r3, #2
 800b62e:	e0cc      	b.n	800b7ca <HAL_I2C_Master_Transmit+0x1ea>
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2201      	movs	r2, #1
 800b634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f003 0301 	and.w	r3, r3, #1
 800b642:	2b01      	cmp	r3, #1
 800b644:	d007      	beq.n	800b656 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f042 0201 	orr.w	r2, r2, #1
 800b654:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b664:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2221      	movs	r2, #33	; 0x21
 800b66a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2210      	movs	r2, #16
 800b672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2200      	movs	r2, #0
 800b67a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	893a      	ldrh	r2, [r7, #8]
 800b686:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b68c:	b29a      	uxth	r2, r3
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	4a50      	ldr	r2, [pc, #320]	; (800b7d8 <HAL_I2C_Master_Transmit+0x1f8>)
 800b696:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b698:	8979      	ldrh	r1, [r7, #10]
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	6a3a      	ldr	r2, [r7, #32]
 800b69e:	68f8      	ldr	r0, [r7, #12]
 800b6a0:	f000 fac2 	bl	800bc28 <I2C_MasterRequestWrite>
 800b6a4:	4603      	mov	r3, r0
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d001      	beq.n	800b6ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e08d      	b.n	800b7ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	613b      	str	r3, [r7, #16]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	695b      	ldr	r3, [r3, #20]
 800b6b8:	613b      	str	r3, [r7, #16]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	699b      	ldr	r3, [r3, #24]
 800b6c0:	613b      	str	r3, [r7, #16]
 800b6c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b6c4:	e066      	b.n	800b794 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6c6:	697a      	ldr	r2, [r7, #20]
 800b6c8:	6a39      	ldr	r1, [r7, #32]
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f000 fcd2 	bl	800c074 <I2C_WaitOnTXEFlagUntilTimeout>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00d      	beq.n	800b6f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6da:	2b04      	cmp	r3, #4
 800b6dc:	d107      	bne.n	800b6ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e06b      	b.n	800b7ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f6:	781a      	ldrb	r2, [r3, #0]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b702:	1c5a      	adds	r2, r3, #1
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	3b01      	subs	r3, #1
 800b710:	b29a      	uxth	r2, r3
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b71a:	3b01      	subs	r3, #1
 800b71c:	b29a      	uxth	r2, r3
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	695b      	ldr	r3, [r3, #20]
 800b728:	f003 0304 	and.w	r3, r3, #4
 800b72c:	2b04      	cmp	r3, #4
 800b72e:	d11b      	bne.n	800b768 <HAL_I2C_Master_Transmit+0x188>
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b734:	2b00      	cmp	r3, #0
 800b736:	d017      	beq.n	800b768 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b73c:	781a      	ldrb	r2, [r3, #0]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b748:	1c5a      	adds	r2, r3, #1
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b752:	b29b      	uxth	r3, r3
 800b754:	3b01      	subs	r3, #1
 800b756:	b29a      	uxth	r2, r3
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b760:	3b01      	subs	r3, #1
 800b762:	b29a      	uxth	r2, r3
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b768:	697a      	ldr	r2, [r7, #20]
 800b76a:	6a39      	ldr	r1, [r7, #32]
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f000 fcc2 	bl	800c0f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00d      	beq.n	800b794 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b77c:	2b04      	cmp	r3, #4
 800b77e:	d107      	bne.n	800b790 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b78e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b790:	2301      	movs	r3, #1
 800b792:	e01a      	b.n	800b7ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d194      	bne.n	800b6c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2220      	movs	r2, #32
 800b7b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	e000      	b.n	800b7ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b7c8:	2302      	movs	r3, #2
  }
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3718      	adds	r7, #24
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	00100002 	.word	0x00100002
 800b7d8:	ffff0000 	.word	0xffff0000

0800b7dc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b08c      	sub	sp, #48	; 0x30
 800b7e0:	af02      	add	r7, sp, #8
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	607a      	str	r2, [r7, #4]
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	817b      	strh	r3, [r7, #10]
 800b7ec:	4613      	mov	r3, r2
 800b7ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b7f0:	f7fe fb02 	bl	8009df8 <HAL_GetTick>
 800b7f4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7fc:	b2db      	uxtb	r3, r3
 800b7fe:	2b20      	cmp	r3, #32
 800b800:	f040 820b 	bne.w	800bc1a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	2319      	movs	r3, #25
 800b80a:	2201      	movs	r2, #1
 800b80c:	497c      	ldr	r1, [pc, #496]	; (800ba00 <HAL_I2C_Master_Receive+0x224>)
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f000 fb5a 	bl	800bec8 <I2C_WaitOnFlagUntilTimeout>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d001      	beq.n	800b81e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b81a:	2302      	movs	r3, #2
 800b81c:	e1fe      	b.n	800bc1c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b824:	2b01      	cmp	r3, #1
 800b826:	d101      	bne.n	800b82c <HAL_I2C_Master_Receive+0x50>
 800b828:	2302      	movs	r3, #2
 800b82a:	e1f7      	b.n	800bc1c <HAL_I2C_Master_Receive+0x440>
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f003 0301 	and.w	r3, r3, #1
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d007      	beq.n	800b852 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f042 0201 	orr.w	r2, r2, #1
 800b850:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b860:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2222      	movs	r2, #34	; 0x22
 800b866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2210      	movs	r2, #16
 800b86e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2200      	movs	r2, #0
 800b876:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	893a      	ldrh	r2, [r7, #8]
 800b882:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b888:	b29a      	uxth	r2, r3
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	4a5c      	ldr	r2, [pc, #368]	; (800ba04 <HAL_I2C_Master_Receive+0x228>)
 800b892:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b894:	8979      	ldrh	r1, [r7, #10]
 800b896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f000 fa46 	bl	800bd2c <I2C_MasterRequestRead>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d001      	beq.n	800b8aa <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	e1b8      	b.n	800bc1c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d113      	bne.n	800b8da <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	623b      	str	r3, [r7, #32]
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	695b      	ldr	r3, [r3, #20]
 800b8bc:	623b      	str	r3, [r7, #32]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	699b      	ldr	r3, [r3, #24]
 800b8c4:	623b      	str	r3, [r7, #32]
 800b8c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8d6:	601a      	str	r2, [r3, #0]
 800b8d8:	e18c      	b.n	800bbf4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d11b      	bne.n	800b91a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	61fb      	str	r3, [r7, #28]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	695b      	ldr	r3, [r3, #20]
 800b8fc:	61fb      	str	r3, [r7, #28]
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	699b      	ldr	r3, [r3, #24]
 800b904:	61fb      	str	r3, [r7, #28]
 800b906:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b916:	601a      	str	r2, [r3, #0]
 800b918:	e16c      	b.n	800bbf4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b91e:	2b02      	cmp	r3, #2
 800b920:	d11b      	bne.n	800b95a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b930:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b940:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b942:	2300      	movs	r3, #0
 800b944:	61bb      	str	r3, [r7, #24]
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	695b      	ldr	r3, [r3, #20]
 800b94c:	61bb      	str	r3, [r7, #24]
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	699b      	ldr	r3, [r3, #24]
 800b954:	61bb      	str	r3, [r7, #24]
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	e14c      	b.n	800bbf4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b968:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b96a:	2300      	movs	r3, #0
 800b96c:	617b      	str	r3, [r7, #20]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	695b      	ldr	r3, [r3, #20]
 800b974:	617b      	str	r3, [r7, #20]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	699b      	ldr	r3, [r3, #24]
 800b97c:	617b      	str	r3, [r7, #20]
 800b97e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b980:	e138      	b.n	800bbf4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b986:	2b03      	cmp	r3, #3
 800b988:	f200 80f1 	bhi.w	800bb6e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b990:	2b01      	cmp	r3, #1
 800b992:	d123      	bne.n	800b9dc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b996:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f000 fbed 	bl	800c178 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d001      	beq.n	800b9a8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	e139      	b.n	800bc1c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	691a      	ldr	r2, [r3, #16]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b2:	b2d2      	uxtb	r2, r2
 800b9b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ba:	1c5a      	adds	r2, r3, #1
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9c4:	3b01      	subs	r3, #1
 800b9c6:	b29a      	uxth	r2, r3
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	3b01      	subs	r3, #1
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b9da:	e10b      	b.n	800bbf4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d14e      	bne.n	800ba82 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	4906      	ldr	r1, [pc, #24]	; (800ba08 <HAL_I2C_Master_Receive+0x22c>)
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f000 fa6a 	bl	800bec8 <I2C_WaitOnFlagUntilTimeout>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d008      	beq.n	800ba0c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e10e      	b.n	800bc1c <HAL_I2C_Master_Receive+0x440>
 800b9fe:	bf00      	nop
 800ba00:	00100002 	.word	0x00100002
 800ba04:	ffff0000 	.word	0xffff0000
 800ba08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	691a      	ldr	r2, [r3, #16]
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba26:	b2d2      	uxtb	r2, r2
 800ba28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba2e:	1c5a      	adds	r2, r3, #1
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	b29a      	uxth	r2, r3
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	3b01      	subs	r3, #1
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	691a      	ldr	r2, [r3, #16]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba58:	b2d2      	uxtb	r2, r2
 800ba5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba60:	1c5a      	adds	r2, r3, #1
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba6a:	3b01      	subs	r3, #1
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	3b01      	subs	r3, #1
 800ba7a:	b29a      	uxth	r2, r3
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ba80:	e0b8      	b.n	800bbf4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ba82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba84:	9300      	str	r3, [sp, #0]
 800ba86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba88:	2200      	movs	r2, #0
 800ba8a:	4966      	ldr	r1, [pc, #408]	; (800bc24 <HAL_I2C_Master_Receive+0x448>)
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	f000 fa1b 	bl	800bec8 <I2C_WaitOnFlagUntilTimeout>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d001      	beq.n	800ba9c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e0bf      	b.n	800bc1c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800baaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	691a      	ldr	r2, [r3, #16]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab6:	b2d2      	uxtb	r2, r2
 800bab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800babe:	1c5a      	adds	r2, r3, #1
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bac8:	3b01      	subs	r3, #1
 800baca:	b29a      	uxth	r2, r3
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	3b01      	subs	r3, #1
 800bad8:	b29a      	uxth	r2, r3
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae0:	9300      	str	r3, [sp, #0]
 800bae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae4:	2200      	movs	r2, #0
 800bae6:	494f      	ldr	r1, [pc, #316]	; (800bc24 <HAL_I2C_Master_Receive+0x448>)
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	f000 f9ed 	bl	800bec8 <I2C_WaitOnFlagUntilTimeout>
 800baee:	4603      	mov	r3, r0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d001      	beq.n	800baf8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	e091      	b.n	800bc1c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	691a      	ldr	r2, [r3, #16]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb12:	b2d2      	uxtb	r2, r2
 800bb14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1a:	1c5a      	adds	r2, r3, #1
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb24:	3b01      	subs	r3, #1
 800bb26:	b29a      	uxth	r2, r3
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	3b01      	subs	r3, #1
 800bb34:	b29a      	uxth	r2, r3
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	691a      	ldr	r2, [r3, #16]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb44:	b2d2      	uxtb	r2, r2
 800bb46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb4c:	1c5a      	adds	r2, r3, #1
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb56:	3b01      	subs	r3, #1
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb62:	b29b      	uxth	r3, r3
 800bb64:	3b01      	subs	r3, #1
 800bb66:	b29a      	uxth	r2, r3
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb6c:	e042      	b.n	800bbf4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb72:	68f8      	ldr	r0, [r7, #12]
 800bb74:	f000 fb00 	bl	800c178 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d001      	beq.n	800bb82 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	e04c      	b.n	800bc1c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	691a      	ldr	r2, [r3, #16]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb8c:	b2d2      	uxtb	r2, r2
 800bb8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb94:	1c5a      	adds	r2, r3, #1
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	3b01      	subs	r3, #1
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	695b      	ldr	r3, [r3, #20]
 800bbba:	f003 0304 	and.w	r3, r3, #4
 800bbbe:	2b04      	cmp	r3, #4
 800bbc0:	d118      	bne.n	800bbf4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	691a      	ldr	r2, [r3, #16]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbcc:	b2d2      	uxtb	r2, r2
 800bbce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd4:	1c5a      	adds	r2, r3, #1
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbde:	3b01      	subs	r3, #1
 800bbe0:	b29a      	uxth	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	3b01      	subs	r3, #1
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f47f aec2 	bne.w	800b982 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2220      	movs	r2, #32
 800bc02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bc16:	2300      	movs	r3, #0
 800bc18:	e000      	b.n	800bc1c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bc1a:	2302      	movs	r3, #2
  }
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3728      	adds	r7, #40	; 0x28
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	00010004 	.word	0x00010004

0800bc28 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b088      	sub	sp, #32
 800bc2c:	af02      	add	r7, sp, #8
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	607a      	str	r2, [r7, #4]
 800bc32:	603b      	str	r3, [r7, #0]
 800bc34:	460b      	mov	r3, r1
 800bc36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc3c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	2b08      	cmp	r3, #8
 800bc42:	d006      	beq.n	800bc52 <I2C_MasterRequestWrite+0x2a>
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d003      	beq.n	800bc52 <I2C_MasterRequestWrite+0x2a>
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bc50:	d108      	bne.n	800bc64 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc60:	601a      	str	r2, [r3, #0]
 800bc62:	e00b      	b.n	800bc7c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc68:	2b12      	cmp	r3, #18
 800bc6a:	d107      	bne.n	800bc7c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	9300      	str	r3, [sp, #0]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bc88:	68f8      	ldr	r0, [r7, #12]
 800bc8a:	f000 f91d 	bl	800bec8 <I2C_WaitOnFlagUntilTimeout>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00d      	beq.n	800bcb0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bca2:	d103      	bne.n	800bcac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bcac:	2303      	movs	r3, #3
 800bcae:	e035      	b.n	800bd1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	691b      	ldr	r3, [r3, #16]
 800bcb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcb8:	d108      	bne.n	800bccc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bcba:	897b      	ldrh	r3, [r7, #10]
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	461a      	mov	r2, r3
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bcc8:	611a      	str	r2, [r3, #16]
 800bcca:	e01b      	b.n	800bd04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bccc:	897b      	ldrh	r3, [r7, #10]
 800bcce:	11db      	asrs	r3, r3, #7
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	f003 0306 	and.w	r3, r3, #6
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	f063 030f 	orn	r3, r3, #15
 800bcdc:	b2da      	uxtb	r2, r3
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	490e      	ldr	r1, [pc, #56]	; (800bd24 <I2C_MasterRequestWrite+0xfc>)
 800bcea:	68f8      	ldr	r0, [r7, #12]
 800bcec:	f000 f943 	bl	800bf76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d001      	beq.n	800bcfa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e010      	b.n	800bd1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bcfa:	897b      	ldrh	r3, [r7, #10]
 800bcfc:	b2da      	uxtb	r2, r3
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	4907      	ldr	r1, [pc, #28]	; (800bd28 <I2C_MasterRequestWrite+0x100>)
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	f000 f933 	bl	800bf76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d001      	beq.n	800bd1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bd16:	2301      	movs	r3, #1
 800bd18:	e000      	b.n	800bd1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bd1a:	2300      	movs	r3, #0
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}
 800bd24:	00010008 	.word	0x00010008
 800bd28:	00010002 	.word	0x00010002

0800bd2c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b088      	sub	sp, #32
 800bd30:	af02      	add	r7, sp, #8
 800bd32:	60f8      	str	r0, [r7, #12]
 800bd34:	607a      	str	r2, [r7, #4]
 800bd36:	603b      	str	r3, [r7, #0]
 800bd38:	460b      	mov	r3, r1
 800bd3a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd40:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bd50:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	2b08      	cmp	r3, #8
 800bd56:	d006      	beq.n	800bd66 <I2C_MasterRequestRead+0x3a>
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d003      	beq.n	800bd66 <I2C_MasterRequestRead+0x3a>
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd64:	d108      	bne.n	800bd78 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd74:	601a      	str	r2, [r3, #0]
 800bd76:	e00b      	b.n	800bd90 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd7c:	2b11      	cmp	r3, #17
 800bd7e:	d107      	bne.n	800bd90 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	9300      	str	r3, [sp, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2200      	movs	r2, #0
 800bd98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	f000 f893 	bl	800bec8 <I2C_WaitOnFlagUntilTimeout>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00d      	beq.n	800bdc4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdb6:	d103      	bne.n	800bdc0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdbe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bdc0:	2303      	movs	r3, #3
 800bdc2:	e079      	b.n	800beb8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	691b      	ldr	r3, [r3, #16]
 800bdc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdcc:	d108      	bne.n	800bde0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bdce:	897b      	ldrh	r3, [r7, #10]
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	f043 0301 	orr.w	r3, r3, #1
 800bdd6:	b2da      	uxtb	r2, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	611a      	str	r2, [r3, #16]
 800bdde:	e05f      	b.n	800bea0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bde0:	897b      	ldrh	r3, [r7, #10]
 800bde2:	11db      	asrs	r3, r3, #7
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	f003 0306 	and.w	r3, r3, #6
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	f063 030f 	orn	r3, r3, #15
 800bdf0:	b2da      	uxtb	r2, r3
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	687a      	ldr	r2, [r7, #4]
 800bdfc:	4930      	ldr	r1, [pc, #192]	; (800bec0 <I2C_MasterRequestRead+0x194>)
 800bdfe:	68f8      	ldr	r0, [r7, #12]
 800be00:	f000 f8b9 	bl	800bf76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be04:	4603      	mov	r3, r0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d001      	beq.n	800be0e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800be0a:	2301      	movs	r3, #1
 800be0c:	e054      	b.n	800beb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800be0e:	897b      	ldrh	r3, [r7, #10]
 800be10:	b2da      	uxtb	r2, r3
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	4929      	ldr	r1, [pc, #164]	; (800bec4 <I2C_MasterRequestRead+0x198>)
 800be1e:	68f8      	ldr	r0, [r7, #12]
 800be20:	f000 f8a9 	bl	800bf76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d001      	beq.n	800be2e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800be2a:	2301      	movs	r3, #1
 800be2c:	e044      	b.n	800beb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be2e:	2300      	movs	r3, #0
 800be30:	613b      	str	r3, [r7, #16]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	695b      	ldr	r3, [r3, #20]
 800be38:	613b      	str	r3, [r7, #16]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	699b      	ldr	r3, [r3, #24]
 800be40:	613b      	str	r3, [r7, #16]
 800be42:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be52:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	9300      	str	r3, [sp, #0]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2200      	movs	r2, #0
 800be5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800be60:	68f8      	ldr	r0, [r7, #12]
 800be62:	f000 f831 	bl	800bec8 <I2C_WaitOnFlagUntilTimeout>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00d      	beq.n	800be88 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be7a:	d103      	bne.n	800be84 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be82:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800be84:	2303      	movs	r3, #3
 800be86:	e017      	b.n	800beb8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800be88:	897b      	ldrh	r3, [r7, #10]
 800be8a:	11db      	asrs	r3, r3, #7
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	f003 0306 	and.w	r3, r3, #6
 800be92:	b2db      	uxtb	r3, r3
 800be94:	f063 030e 	orn	r3, r3, #14
 800be98:	b2da      	uxtb	r2, r3
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	4907      	ldr	r1, [pc, #28]	; (800bec4 <I2C_MasterRequestRead+0x198>)
 800bea6:	68f8      	ldr	r0, [r7, #12]
 800bea8:	f000 f865 	bl	800bf76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d001      	beq.n	800beb6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800beb2:	2301      	movs	r3, #1
 800beb4:	e000      	b.n	800beb8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800beb6:	2300      	movs	r3, #0
}
 800beb8:	4618      	mov	r0, r3
 800beba:	3718      	adds	r7, #24
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}
 800bec0:	00010008 	.word	0x00010008
 800bec4:	00010002 	.word	0x00010002

0800bec8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	60f8      	str	r0, [r7, #12]
 800bed0:	60b9      	str	r1, [r7, #8]
 800bed2:	603b      	str	r3, [r7, #0]
 800bed4:	4613      	mov	r3, r2
 800bed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bed8:	e025      	b.n	800bf26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee0:	d021      	beq.n	800bf26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bee2:	f7fd ff89 	bl	8009df8 <HAL_GetTick>
 800bee6:	4602      	mov	r2, r0
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	1ad3      	subs	r3, r2, r3
 800beec:	683a      	ldr	r2, [r7, #0]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d302      	bcc.n	800bef8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d116      	bne.n	800bf26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	2200      	movs	r2, #0
 800befc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2220      	movs	r2, #32
 800bf02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf12:	f043 0220 	orr.w	r2, r3, #32
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	e023      	b.n	800bf6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	0c1b      	lsrs	r3, r3, #16
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d10d      	bne.n	800bf4c <I2C_WaitOnFlagUntilTimeout+0x84>
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	695b      	ldr	r3, [r3, #20]
 800bf36:	43da      	mvns	r2, r3
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	4013      	ands	r3, r2
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	bf0c      	ite	eq
 800bf42:	2301      	moveq	r3, #1
 800bf44:	2300      	movne	r3, #0
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	461a      	mov	r2, r3
 800bf4a:	e00c      	b.n	800bf66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	699b      	ldr	r3, [r3, #24]
 800bf52:	43da      	mvns	r2, r3
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	4013      	ands	r3, r2
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	bf0c      	ite	eq
 800bf5e:	2301      	moveq	r3, #1
 800bf60:	2300      	movne	r3, #0
 800bf62:	b2db      	uxtb	r3, r3
 800bf64:	461a      	mov	r2, r3
 800bf66:	79fb      	ldrb	r3, [r7, #7]
 800bf68:	429a      	cmp	r2, r3
 800bf6a:	d0b6      	beq.n	800beda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bf6c:	2300      	movs	r3, #0
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3710      	adds	r7, #16
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b084      	sub	sp, #16
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	60f8      	str	r0, [r7, #12]
 800bf7e:	60b9      	str	r1, [r7, #8]
 800bf80:	607a      	str	r2, [r7, #4]
 800bf82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bf84:	e051      	b.n	800c02a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	695b      	ldr	r3, [r3, #20]
 800bf8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf94:	d123      	bne.n	800bfde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfa4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bfae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2220      	movs	r2, #32
 800bfba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfca:	f043 0204 	orr.w	r2, r3, #4
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	e046      	b.n	800c06c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfe4:	d021      	beq.n	800c02a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfe6:	f7fd ff07 	bl	8009df8 <HAL_GetTick>
 800bfea:	4602      	mov	r2, r0
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	1ad3      	subs	r3, r2, r3
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d302      	bcc.n	800bffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d116      	bne.n	800c02a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2200      	movs	r2, #0
 800c000:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2220      	movs	r2, #32
 800c006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2200      	movs	r2, #0
 800c00e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c016:	f043 0220 	orr.w	r2, r3, #32
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2200      	movs	r2, #0
 800c022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c026:	2301      	movs	r3, #1
 800c028:	e020      	b.n	800c06c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	0c1b      	lsrs	r3, r3, #16
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	2b01      	cmp	r3, #1
 800c032:	d10c      	bne.n	800c04e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	695b      	ldr	r3, [r3, #20]
 800c03a:	43da      	mvns	r2, r3
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	4013      	ands	r3, r2
 800c040:	b29b      	uxth	r3, r3
 800c042:	2b00      	cmp	r3, #0
 800c044:	bf14      	ite	ne
 800c046:	2301      	movne	r3, #1
 800c048:	2300      	moveq	r3, #0
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	e00b      	b.n	800c066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	699b      	ldr	r3, [r3, #24]
 800c054:	43da      	mvns	r2, r3
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	4013      	ands	r3, r2
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	bf14      	ite	ne
 800c060:	2301      	movne	r3, #1
 800c062:	2300      	moveq	r3, #0
 800c064:	b2db      	uxtb	r3, r3
 800c066:	2b00      	cmp	r3, #0
 800c068:	d18d      	bne.n	800bf86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c06a:	2300      	movs	r3, #0
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3710      	adds	r7, #16
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c080:	e02d      	b.n	800c0de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c082:	68f8      	ldr	r0, [r7, #12]
 800c084:	f000 f8ce 	bl	800c224 <I2C_IsAcknowledgeFailed>
 800c088:	4603      	mov	r3, r0
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d001      	beq.n	800c092 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c08e:	2301      	movs	r3, #1
 800c090:	e02d      	b.n	800c0ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c098:	d021      	beq.n	800c0de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c09a:	f7fd fead 	bl	8009df8 <HAL_GetTick>
 800c09e:	4602      	mov	r2, r0
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	1ad3      	subs	r3, r2, r3
 800c0a4:	68ba      	ldr	r2, [r7, #8]
 800c0a6:	429a      	cmp	r2, r3
 800c0a8:	d302      	bcc.n	800c0b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d116      	bne.n	800c0de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2220      	movs	r2, #32
 800c0ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ca:	f043 0220 	orr.w	r2, r3, #32
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e007      	b.n	800c0ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	695b      	ldr	r3, [r3, #20]
 800c0e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0e8:	2b80      	cmp	r3, #128	; 0x80
 800c0ea:	d1ca      	bne.n	800c082 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c0ec:	2300      	movs	r3, #0
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b084      	sub	sp, #16
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	60f8      	str	r0, [r7, #12]
 800c0fe:	60b9      	str	r1, [r7, #8]
 800c100:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c102:	e02d      	b.n	800c160 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c104:	68f8      	ldr	r0, [r7, #12]
 800c106:	f000 f88d 	bl	800c224 <I2C_IsAcknowledgeFailed>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d001      	beq.n	800c114 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c110:	2301      	movs	r3, #1
 800c112:	e02d      	b.n	800c170 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c11a:	d021      	beq.n	800c160 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c11c:	f7fd fe6c 	bl	8009df8 <HAL_GetTick>
 800c120:	4602      	mov	r2, r0
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	68ba      	ldr	r2, [r7, #8]
 800c128:	429a      	cmp	r2, r3
 800c12a:	d302      	bcc.n	800c132 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d116      	bne.n	800c160 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2200      	movs	r2, #0
 800c136:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2220      	movs	r2, #32
 800c13c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2200      	movs	r2, #0
 800c144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c14c:	f043 0220 	orr.w	r2, r3, #32
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c15c:	2301      	movs	r3, #1
 800c15e:	e007      	b.n	800c170 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	695b      	ldr	r3, [r3, #20]
 800c166:	f003 0304 	and.w	r3, r3, #4
 800c16a:	2b04      	cmp	r3, #4
 800c16c:	d1ca      	bne.n	800c104 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c16e:	2300      	movs	r3, #0
}
 800c170:	4618      	mov	r0, r3
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c184:	e042      	b.n	800c20c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	695b      	ldr	r3, [r3, #20]
 800c18c:	f003 0310 	and.w	r3, r3, #16
 800c190:	2b10      	cmp	r3, #16
 800c192:	d119      	bne.n	800c1c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f06f 0210 	mvn.w	r2, #16
 800c19c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2220      	movs	r2, #32
 800c1a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	e029      	b.n	800c21c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1c8:	f7fd fe16 	bl	8009df8 <HAL_GetTick>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	68ba      	ldr	r2, [r7, #8]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d302      	bcc.n	800c1de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d116      	bne.n	800c20c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2220      	movs	r2, #32
 800c1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f8:	f043 0220 	orr.w	r2, r3, #32
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2200      	movs	r2, #0
 800c204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c208:	2301      	movs	r3, #1
 800c20a:	e007      	b.n	800c21c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	695b      	ldr	r3, [r3, #20]
 800c212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c216:	2b40      	cmp	r3, #64	; 0x40
 800c218:	d1b5      	bne.n	800c186 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c21a:	2300      	movs	r3, #0
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3710      	adds	r7, #16
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	695b      	ldr	r3, [r3, #20]
 800c232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c23a:	d11b      	bne.n	800c274 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c244:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2200      	movs	r2, #0
 800c24a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2220      	movs	r2, #32
 800c250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2200      	movs	r2, #0
 800c258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c260:	f043 0204 	orr.w	r2, r3, #4
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c270:	2301      	movs	r3, #1
 800c272:	e000      	b.n	800c276 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c274:	2300      	movs	r3, #0
}
 800c276:	4618      	mov	r0, r3
 800c278:	370c      	adds	r7, #12
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
	...

0800c284 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c28a:	2300      	movs	r3, #0
 800c28c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c28e:	2300      	movs	r3, #0
 800c290:	603b      	str	r3, [r7, #0]
 800c292:	4b20      	ldr	r3, [pc, #128]	; (800c314 <HAL_PWREx_EnableOverDrive+0x90>)
 800c294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c296:	4a1f      	ldr	r2, [pc, #124]	; (800c314 <HAL_PWREx_EnableOverDrive+0x90>)
 800c298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c29c:	6413      	str	r3, [r2, #64]	; 0x40
 800c29e:	4b1d      	ldr	r3, [pc, #116]	; (800c314 <HAL_PWREx_EnableOverDrive+0x90>)
 800c2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2a6:	603b      	str	r3, [r7, #0]
 800c2a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c2aa:	4b1b      	ldr	r3, [pc, #108]	; (800c318 <HAL_PWREx_EnableOverDrive+0x94>)
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c2b0:	f7fd fda2 	bl	8009df8 <HAL_GetTick>
 800c2b4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c2b6:	e009      	b.n	800c2cc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c2b8:	f7fd fd9e 	bl	8009df8 <HAL_GetTick>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	1ad3      	subs	r3, r2, r3
 800c2c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c2c6:	d901      	bls.n	800c2cc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c2c8:	2303      	movs	r3, #3
 800c2ca:	e01f      	b.n	800c30c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c2cc:	4b13      	ldr	r3, [pc, #76]	; (800c31c <HAL_PWREx_EnableOverDrive+0x98>)
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2d8:	d1ee      	bne.n	800c2b8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c2da:	4b11      	ldr	r3, [pc, #68]	; (800c320 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c2dc:	2201      	movs	r2, #1
 800c2de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c2e0:	f7fd fd8a 	bl	8009df8 <HAL_GetTick>
 800c2e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c2e6:	e009      	b.n	800c2fc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c2e8:	f7fd fd86 	bl	8009df8 <HAL_GetTick>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	1ad3      	subs	r3, r2, r3
 800c2f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c2f6:	d901      	bls.n	800c2fc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c2f8:	2303      	movs	r3, #3
 800c2fa:	e007      	b.n	800c30c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c2fc:	4b07      	ldr	r3, [pc, #28]	; (800c31c <HAL_PWREx_EnableOverDrive+0x98>)
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c304:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c308:	d1ee      	bne.n	800c2e8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c30a:	2300      	movs	r3, #0
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3708      	adds	r7, #8
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	40023800 	.word	0x40023800
 800c318:	420e0040 	.word	0x420e0040
 800c31c:	40007000 	.word	0x40007000
 800c320:	420e0044 	.word	0x420e0044

0800c324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d101      	bne.n	800c338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c334:	2301      	movs	r3, #1
 800c336:	e0cc      	b.n	800c4d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c338:	4b68      	ldr	r3, [pc, #416]	; (800c4dc <HAL_RCC_ClockConfig+0x1b8>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f003 030f 	and.w	r3, r3, #15
 800c340:	683a      	ldr	r2, [r7, #0]
 800c342:	429a      	cmp	r2, r3
 800c344:	d90c      	bls.n	800c360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c346:	4b65      	ldr	r3, [pc, #404]	; (800c4dc <HAL_RCC_ClockConfig+0x1b8>)
 800c348:	683a      	ldr	r2, [r7, #0]
 800c34a:	b2d2      	uxtb	r2, r2
 800c34c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c34e:	4b63      	ldr	r3, [pc, #396]	; (800c4dc <HAL_RCC_ClockConfig+0x1b8>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f003 030f 	and.w	r3, r3, #15
 800c356:	683a      	ldr	r2, [r7, #0]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d001      	beq.n	800c360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	e0b8      	b.n	800c4d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f003 0302 	and.w	r3, r3, #2
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d020      	beq.n	800c3ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f003 0304 	and.w	r3, r3, #4
 800c374:	2b00      	cmp	r3, #0
 800c376:	d005      	beq.n	800c384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c378:	4b59      	ldr	r3, [pc, #356]	; (800c4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c37a:	689b      	ldr	r3, [r3, #8]
 800c37c:	4a58      	ldr	r2, [pc, #352]	; (800c4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c37e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c382:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f003 0308 	and.w	r3, r3, #8
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d005      	beq.n	800c39c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c390:	4b53      	ldr	r3, [pc, #332]	; (800c4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	4a52      	ldr	r2, [pc, #328]	; (800c4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c396:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c39a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c39c:	4b50      	ldr	r3, [pc, #320]	; (800c4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	494d      	ldr	r1, [pc, #308]	; (800c4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f003 0301 	and.w	r3, r3, #1
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d044      	beq.n	800c444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d107      	bne.n	800c3d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c3c2:	4b47      	ldr	r3, [pc, #284]	; (800c4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d119      	bne.n	800c402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e07f      	b.n	800c4d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	2b02      	cmp	r3, #2
 800c3d8:	d003      	beq.n	800c3e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c3de:	2b03      	cmp	r3, #3
 800c3e0:	d107      	bne.n	800c3f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c3e2:	4b3f      	ldr	r3, [pc, #252]	; (800c4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d109      	bne.n	800c402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	e06f      	b.n	800c4d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c3f2:	4b3b      	ldr	r3, [pc, #236]	; (800c4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f003 0302 	and.w	r3, r3, #2
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e067      	b.n	800c4d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c402:	4b37      	ldr	r3, [pc, #220]	; (800c4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	f023 0203 	bic.w	r2, r3, #3
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	685b      	ldr	r3, [r3, #4]
 800c40e:	4934      	ldr	r1, [pc, #208]	; (800c4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c410:	4313      	orrs	r3, r2
 800c412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c414:	f7fd fcf0 	bl	8009df8 <HAL_GetTick>
 800c418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c41a:	e00a      	b.n	800c432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c41c:	f7fd fcec 	bl	8009df8 <HAL_GetTick>
 800c420:	4602      	mov	r2, r0
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	1ad3      	subs	r3, r2, r3
 800c426:	f241 3288 	movw	r2, #5000	; 0x1388
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d901      	bls.n	800c432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c42e:	2303      	movs	r3, #3
 800c430:	e04f      	b.n	800c4d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c432:	4b2b      	ldr	r3, [pc, #172]	; (800c4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c434:	689b      	ldr	r3, [r3, #8]
 800c436:	f003 020c 	and.w	r2, r3, #12
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	429a      	cmp	r2, r3
 800c442:	d1eb      	bne.n	800c41c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c444:	4b25      	ldr	r3, [pc, #148]	; (800c4dc <HAL_RCC_ClockConfig+0x1b8>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f003 030f 	and.w	r3, r3, #15
 800c44c:	683a      	ldr	r2, [r7, #0]
 800c44e:	429a      	cmp	r2, r3
 800c450:	d20c      	bcs.n	800c46c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c452:	4b22      	ldr	r3, [pc, #136]	; (800c4dc <HAL_RCC_ClockConfig+0x1b8>)
 800c454:	683a      	ldr	r2, [r7, #0]
 800c456:	b2d2      	uxtb	r2, r2
 800c458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c45a:	4b20      	ldr	r3, [pc, #128]	; (800c4dc <HAL_RCC_ClockConfig+0x1b8>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	f003 030f 	and.w	r3, r3, #15
 800c462:	683a      	ldr	r2, [r7, #0]
 800c464:	429a      	cmp	r2, r3
 800c466:	d001      	beq.n	800c46c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c468:	2301      	movs	r3, #1
 800c46a:	e032      	b.n	800c4d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f003 0304 	and.w	r3, r3, #4
 800c474:	2b00      	cmp	r3, #0
 800c476:	d008      	beq.n	800c48a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c478:	4b19      	ldr	r3, [pc, #100]	; (800c4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c47a:	689b      	ldr	r3, [r3, #8]
 800c47c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	4916      	ldr	r1, [pc, #88]	; (800c4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c486:	4313      	orrs	r3, r2
 800c488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f003 0308 	and.w	r3, r3, #8
 800c492:	2b00      	cmp	r3, #0
 800c494:	d009      	beq.n	800c4aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c496:	4b12      	ldr	r3, [pc, #72]	; (800c4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c498:	689b      	ldr	r3, [r3, #8]
 800c49a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	691b      	ldr	r3, [r3, #16]
 800c4a2:	00db      	lsls	r3, r3, #3
 800c4a4:	490e      	ldr	r1, [pc, #56]	; (800c4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c4aa:	f000 f821 	bl	800c4f0 <HAL_RCC_GetSysClockFreq>
 800c4ae:	4601      	mov	r1, r0
 800c4b0:	4b0b      	ldr	r3, [pc, #44]	; (800c4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	091b      	lsrs	r3, r3, #4
 800c4b6:	f003 030f 	and.w	r3, r3, #15
 800c4ba:	4a0a      	ldr	r2, [pc, #40]	; (800c4e4 <HAL_RCC_ClockConfig+0x1c0>)
 800c4bc:	5cd3      	ldrb	r3, [r2, r3]
 800c4be:	fa21 f303 	lsr.w	r3, r1, r3
 800c4c2:	4a09      	ldr	r2, [pc, #36]	; (800c4e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c4c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c4c6:	4b09      	ldr	r3, [pc, #36]	; (800c4ec <HAL_RCC_ClockConfig+0x1c8>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7fd fc50 	bl	8009d70 <HAL_InitTick>

  return HAL_OK;
 800c4d0:	2300      	movs	r3, #0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	3710      	adds	r7, #16
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop
 800c4dc:	40023c00 	.word	0x40023c00
 800c4e0:	40023800 	.word	0x40023800
 800c4e4:	0801a0f0 	.word	0x0801a0f0
 800c4e8:	20000000 	.word	0x20000000
 800c4ec:	20000004 	.word	0x20000004

0800c4f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4f2:	b085      	sub	sp, #20
 800c4f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	607b      	str	r3, [r7, #4]
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	60fb      	str	r3, [r7, #12]
 800c4fe:	2300      	movs	r3, #0
 800c500:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c502:	2300      	movs	r3, #0
 800c504:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c506:	4b63      	ldr	r3, [pc, #396]	; (800c694 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	f003 030c 	and.w	r3, r3, #12
 800c50e:	2b04      	cmp	r3, #4
 800c510:	d007      	beq.n	800c522 <HAL_RCC_GetSysClockFreq+0x32>
 800c512:	2b08      	cmp	r3, #8
 800c514:	d008      	beq.n	800c528 <HAL_RCC_GetSysClockFreq+0x38>
 800c516:	2b00      	cmp	r3, #0
 800c518:	f040 80b4 	bne.w	800c684 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c51c:	4b5e      	ldr	r3, [pc, #376]	; (800c698 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c51e:	60bb      	str	r3, [r7, #8]
       break;
 800c520:	e0b3      	b.n	800c68a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c522:	4b5d      	ldr	r3, [pc, #372]	; (800c698 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c524:	60bb      	str	r3, [r7, #8]
      break;
 800c526:	e0b0      	b.n	800c68a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c528:	4b5a      	ldr	r3, [pc, #360]	; (800c694 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c530:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c532:	4b58      	ldr	r3, [pc, #352]	; (800c694 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d04a      	beq.n	800c5d4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c53e:	4b55      	ldr	r3, [pc, #340]	; (800c694 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	099b      	lsrs	r3, r3, #6
 800c544:	f04f 0400 	mov.w	r4, #0
 800c548:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c54c:	f04f 0200 	mov.w	r2, #0
 800c550:	ea03 0501 	and.w	r5, r3, r1
 800c554:	ea04 0602 	and.w	r6, r4, r2
 800c558:	4629      	mov	r1, r5
 800c55a:	4632      	mov	r2, r6
 800c55c:	f04f 0300 	mov.w	r3, #0
 800c560:	f04f 0400 	mov.w	r4, #0
 800c564:	0154      	lsls	r4, r2, #5
 800c566:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c56a:	014b      	lsls	r3, r1, #5
 800c56c:	4619      	mov	r1, r3
 800c56e:	4622      	mov	r2, r4
 800c570:	1b49      	subs	r1, r1, r5
 800c572:	eb62 0206 	sbc.w	r2, r2, r6
 800c576:	f04f 0300 	mov.w	r3, #0
 800c57a:	f04f 0400 	mov.w	r4, #0
 800c57e:	0194      	lsls	r4, r2, #6
 800c580:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c584:	018b      	lsls	r3, r1, #6
 800c586:	1a5b      	subs	r3, r3, r1
 800c588:	eb64 0402 	sbc.w	r4, r4, r2
 800c58c:	f04f 0100 	mov.w	r1, #0
 800c590:	f04f 0200 	mov.w	r2, #0
 800c594:	00e2      	lsls	r2, r4, #3
 800c596:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c59a:	00d9      	lsls	r1, r3, #3
 800c59c:	460b      	mov	r3, r1
 800c59e:	4614      	mov	r4, r2
 800c5a0:	195b      	adds	r3, r3, r5
 800c5a2:	eb44 0406 	adc.w	r4, r4, r6
 800c5a6:	f04f 0100 	mov.w	r1, #0
 800c5aa:	f04f 0200 	mov.w	r2, #0
 800c5ae:	02a2      	lsls	r2, r4, #10
 800c5b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c5b4:	0299      	lsls	r1, r3, #10
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	4614      	mov	r4, r2
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	4621      	mov	r1, r4
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f04f 0400 	mov.w	r4, #0
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	4623      	mov	r3, r4
 800c5c8:	f7f4 fb76 	bl	8000cb8 <__aeabi_uldivmod>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	460c      	mov	r4, r1
 800c5d0:	60fb      	str	r3, [r7, #12]
 800c5d2:	e049      	b.n	800c668 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c5d4:	4b2f      	ldr	r3, [pc, #188]	; (800c694 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	099b      	lsrs	r3, r3, #6
 800c5da:	f04f 0400 	mov.w	r4, #0
 800c5de:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c5e2:	f04f 0200 	mov.w	r2, #0
 800c5e6:	ea03 0501 	and.w	r5, r3, r1
 800c5ea:	ea04 0602 	and.w	r6, r4, r2
 800c5ee:	4629      	mov	r1, r5
 800c5f0:	4632      	mov	r2, r6
 800c5f2:	f04f 0300 	mov.w	r3, #0
 800c5f6:	f04f 0400 	mov.w	r4, #0
 800c5fa:	0154      	lsls	r4, r2, #5
 800c5fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c600:	014b      	lsls	r3, r1, #5
 800c602:	4619      	mov	r1, r3
 800c604:	4622      	mov	r2, r4
 800c606:	1b49      	subs	r1, r1, r5
 800c608:	eb62 0206 	sbc.w	r2, r2, r6
 800c60c:	f04f 0300 	mov.w	r3, #0
 800c610:	f04f 0400 	mov.w	r4, #0
 800c614:	0194      	lsls	r4, r2, #6
 800c616:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c61a:	018b      	lsls	r3, r1, #6
 800c61c:	1a5b      	subs	r3, r3, r1
 800c61e:	eb64 0402 	sbc.w	r4, r4, r2
 800c622:	f04f 0100 	mov.w	r1, #0
 800c626:	f04f 0200 	mov.w	r2, #0
 800c62a:	00e2      	lsls	r2, r4, #3
 800c62c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c630:	00d9      	lsls	r1, r3, #3
 800c632:	460b      	mov	r3, r1
 800c634:	4614      	mov	r4, r2
 800c636:	195b      	adds	r3, r3, r5
 800c638:	eb44 0406 	adc.w	r4, r4, r6
 800c63c:	f04f 0100 	mov.w	r1, #0
 800c640:	f04f 0200 	mov.w	r2, #0
 800c644:	02a2      	lsls	r2, r4, #10
 800c646:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c64a:	0299      	lsls	r1, r3, #10
 800c64c:	460b      	mov	r3, r1
 800c64e:	4614      	mov	r4, r2
 800c650:	4618      	mov	r0, r3
 800c652:	4621      	mov	r1, r4
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f04f 0400 	mov.w	r4, #0
 800c65a:	461a      	mov	r2, r3
 800c65c:	4623      	mov	r3, r4
 800c65e:	f7f4 fb2b 	bl	8000cb8 <__aeabi_uldivmod>
 800c662:	4603      	mov	r3, r0
 800c664:	460c      	mov	r4, r1
 800c666:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c668:	4b0a      	ldr	r3, [pc, #40]	; (800c694 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	0c1b      	lsrs	r3, r3, #16
 800c66e:	f003 0303 	and.w	r3, r3, #3
 800c672:	3301      	adds	r3, #1
 800c674:	005b      	lsls	r3, r3, #1
 800c676:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c680:	60bb      	str	r3, [r7, #8]
      break;
 800c682:	e002      	b.n	800c68a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c684:	4b04      	ldr	r3, [pc, #16]	; (800c698 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c686:	60bb      	str	r3, [r7, #8]
      break;
 800c688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c68a:	68bb      	ldr	r3, [r7, #8]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3714      	adds	r7, #20
 800c690:	46bd      	mov	sp, r7
 800c692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c694:	40023800 	.word	0x40023800
 800c698:	00f42400 	.word	0x00f42400

0800c69c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c69c:	b480      	push	{r7}
 800c69e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c6a0:	4b03      	ldr	r3, [pc, #12]	; (800c6b0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr
 800c6ae:	bf00      	nop
 800c6b0:	20000000 	.word	0x20000000

0800c6b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c6b8:	f7ff fff0 	bl	800c69c <HAL_RCC_GetHCLKFreq>
 800c6bc:	4601      	mov	r1, r0
 800c6be:	4b05      	ldr	r3, [pc, #20]	; (800c6d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	0a9b      	lsrs	r3, r3, #10
 800c6c4:	f003 0307 	and.w	r3, r3, #7
 800c6c8:	4a03      	ldr	r2, [pc, #12]	; (800c6d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c6ca:	5cd3      	ldrb	r3, [r2, r3]
 800c6cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	40023800 	.word	0x40023800
 800c6d8:	0801a100 	.word	0x0801a100

0800c6dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c6e0:	f7ff ffdc 	bl	800c69c <HAL_RCC_GetHCLKFreq>
 800c6e4:	4601      	mov	r1, r0
 800c6e6:	4b05      	ldr	r3, [pc, #20]	; (800c6fc <HAL_RCC_GetPCLK2Freq+0x20>)
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	0b5b      	lsrs	r3, r3, #13
 800c6ec:	f003 0307 	and.w	r3, r3, #7
 800c6f0:	4a03      	ldr	r2, [pc, #12]	; (800c700 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c6f2:	5cd3      	ldrb	r3, [r2, r3]
 800c6f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	40023800 	.word	0x40023800
 800c700:	0801a100 	.word	0x0801a100

0800c704 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b088      	sub	sp, #32
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c70c:	2300      	movs	r3, #0
 800c70e:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c710:	2300      	movs	r3, #0
 800c712:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c714:	2300      	movs	r3, #0
 800c716:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c718:	2300      	movs	r3, #0
 800c71a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c71c:	2300      	movs	r3, #0
 800c71e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00a      	beq.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c72c:	4b66      	ldr	r3, [pc, #408]	; (800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c72e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c732:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c73a:	4963      	ldr	r1, [pc, #396]	; (800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c73c:	4313      	orrs	r3, r2
 800c73e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d00a      	beq.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c74e:	4b5e      	ldr	r3, [pc, #376]	; (800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c754:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c75c:	495a      	ldr	r1, [pc, #360]	; (800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c75e:	4313      	orrs	r3, r2
 800c760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	f003 0301 	and.w	r3, r3, #1
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d10b      	bne.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d105      	bne.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c784:	2b00      	cmp	r3, #0
 800c786:	d075      	beq.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c788:	4b50      	ldr	r3, [pc, #320]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c78a:	2200      	movs	r2, #0
 800c78c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c78e:	f7fd fb33 	bl	8009df8 <HAL_GetTick>
 800c792:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c794:	e008      	b.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c796:	f7fd fb2f 	bl	8009df8 <HAL_GetTick>
 800c79a:	4602      	mov	r2, r0
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	1ad3      	subs	r3, r2, r3
 800c7a0:	2b02      	cmp	r3, #2
 800c7a2:	d901      	bls.n	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c7a4:	2303      	movs	r3, #3
 800c7a6:	e1dc      	b.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c7a8:	4b47      	ldr	r3, [pc, #284]	; (800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d1f0      	bne.n	800c796 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f003 0301 	and.w	r3, r3, #1
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d009      	beq.n	800c7d4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	685b      	ldr	r3, [r3, #4]
 800c7c4:	019a      	lsls	r2, r3, #6
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	689b      	ldr	r3, [r3, #8]
 800c7ca:	071b      	lsls	r3, r3, #28
 800c7cc:	493e      	ldr	r1, [pc, #248]	; (800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f003 0302 	and.w	r3, r3, #2
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d01f      	beq.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c7e0:	4b39      	ldr	r3, [pc, #228]	; (800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c7e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7e6:	0f1b      	lsrs	r3, r3, #28
 800c7e8:	f003 0307 	and.w	r3, r3, #7
 800c7ec:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	019a      	lsls	r2, r3, #6
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	061b      	lsls	r3, r3, #24
 800c7fa:	431a      	orrs	r2, r3
 800c7fc:	69bb      	ldr	r3, [r7, #24]
 800c7fe:	071b      	lsls	r3, r3, #28
 800c800:	4931      	ldr	r1, [pc, #196]	; (800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c802:	4313      	orrs	r3, r2
 800c804:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c808:	4b2f      	ldr	r3, [pc, #188]	; (800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c80a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c80e:	f023 021f 	bic.w	r2, r3, #31
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6a1b      	ldr	r3, [r3, #32]
 800c816:	3b01      	subs	r3, #1
 800c818:	492b      	ldr	r1, [pc, #172]	; (800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c81a:	4313      	orrs	r3, r2
 800c81c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00d      	beq.n	800c848 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	019a      	lsls	r2, r3, #6
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	061b      	lsls	r3, r3, #24
 800c838:	431a      	orrs	r2, r3
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	689b      	ldr	r3, [r3, #8]
 800c83e:	071b      	lsls	r3, r3, #28
 800c840:	4921      	ldr	r1, [pc, #132]	; (800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c842:	4313      	orrs	r3, r2
 800c844:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c848:	4b20      	ldr	r3, [pc, #128]	; (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c84a:	2201      	movs	r2, #1
 800c84c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c84e:	f7fd fad3 	bl	8009df8 <HAL_GetTick>
 800c852:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c854:	e008      	b.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c856:	f7fd facf 	bl	8009df8 <HAL_GetTick>
 800c85a:	4602      	mov	r2, r0
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	1ad3      	subs	r3, r2, r3
 800c860:	2b02      	cmp	r3, #2
 800c862:	d901      	bls.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c864:	2303      	movs	r3, #3
 800c866:	e17c      	b.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c868:	4b17      	ldr	r3, [pc, #92]	; (800c8c8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c870:	2b00      	cmp	r3, #0
 800c872:	d0f0      	beq.n	800c856 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f003 0304 	and.w	r3, r3, #4
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d112      	bne.n	800c8a6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d10c      	bne.n	800c8a6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c894:	2b00      	cmp	r3, #0
 800c896:	f000 80ce 	beq.w	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c89e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8a2:	f040 80c8 	bne.w	800ca36 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c8a6:	4b0a      	ldr	r3, [pc, #40]	; (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c8ac:	f7fd faa4 	bl	8009df8 <HAL_GetTick>
 800c8b0:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c8b2:	e00f      	b.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c8b4:	f7fd faa0 	bl	8009df8 <HAL_GetTick>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	1ad3      	subs	r3, r2, r3
 800c8be:	2b02      	cmp	r3, #2
 800c8c0:	d908      	bls.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c8c2:	2303      	movs	r3, #3
 800c8c4:	e14d      	b.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c8c6:	bf00      	nop
 800c8c8:	40023800 	.word	0x40023800
 800c8cc:	42470068 	.word	0x42470068
 800c8d0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c8d4:	4ba5      	ldr	r3, [pc, #660]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8e0:	d0e8      	beq.n	800c8b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f003 0304 	and.w	r3, r3, #4
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d02e      	beq.n	800c94c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c8ee:	4b9f      	ldr	r3, [pc, #636]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8f4:	0c1b      	lsrs	r3, r3, #16
 800c8f6:	f003 0303 	and.w	r3, r3, #3
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	005b      	lsls	r3, r3, #1
 800c8fe:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c900:	4b9a      	ldr	r3, [pc, #616]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c906:	0f1b      	lsrs	r3, r3, #28
 800c908:	f003 0307 	and.w	r3, r3, #7
 800c90c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	691b      	ldr	r3, [r3, #16]
 800c912:	019a      	lsls	r2, r3, #6
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	085b      	lsrs	r3, r3, #1
 800c918:	3b01      	subs	r3, #1
 800c91a:	041b      	lsls	r3, r3, #16
 800c91c:	431a      	orrs	r2, r3
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	699b      	ldr	r3, [r3, #24]
 800c922:	061b      	lsls	r3, r3, #24
 800c924:	431a      	orrs	r2, r3
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	071b      	lsls	r3, r3, #28
 800c92a:	4990      	ldr	r1, [pc, #576]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c92c:	4313      	orrs	r3, r2
 800c92e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c932:	4b8e      	ldr	r3, [pc, #568]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c938:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c940:	3b01      	subs	r3, #1
 800c942:	021b      	lsls	r3, r3, #8
 800c944:	4989      	ldr	r1, [pc, #548]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c946:	4313      	orrs	r3, r2
 800c948:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f003 0308 	and.w	r3, r3, #8
 800c954:	2b00      	cmp	r3, #0
 800c956:	d02c      	beq.n	800c9b2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c958:	4b84      	ldr	r3, [pc, #528]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c95a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c95e:	0c1b      	lsrs	r3, r3, #16
 800c960:	f003 0303 	and.w	r3, r3, #3
 800c964:	3301      	adds	r3, #1
 800c966:	005b      	lsls	r3, r3, #1
 800c968:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c96a:	4b80      	ldr	r3, [pc, #512]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c96c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c970:	0e1b      	lsrs	r3, r3, #24
 800c972:	f003 030f 	and.w	r3, r3, #15
 800c976:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	019a      	lsls	r2, r3, #6
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	085b      	lsrs	r3, r3, #1
 800c982:	3b01      	subs	r3, #1
 800c984:	041b      	lsls	r3, r3, #16
 800c986:	431a      	orrs	r2, r3
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	061b      	lsls	r3, r3, #24
 800c98c:	431a      	orrs	r2, r3
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	69db      	ldr	r3, [r3, #28]
 800c992:	071b      	lsls	r3, r3, #28
 800c994:	4975      	ldr	r1, [pc, #468]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c996:	4313      	orrs	r3, r2
 800c998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c99c:	4b73      	ldr	r3, [pc, #460]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c99e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9aa:	4970      	ldr	r1, [pc, #448]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d024      	beq.n	800ca08 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c9c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9c6:	d11f      	bne.n	800ca08 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c9c8:	4b68      	ldr	r3, [pc, #416]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9ce:	0e1b      	lsrs	r3, r3, #24
 800c9d0:	f003 030f 	and.w	r3, r3, #15
 800c9d4:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c9d6:	4b65      	ldr	r3, [pc, #404]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9dc:	0f1b      	lsrs	r3, r3, #28
 800c9de:	f003 0307 	and.w	r3, r3, #7
 800c9e2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	691b      	ldr	r3, [r3, #16]
 800c9e8:	019a      	lsls	r2, r3, #6
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	695b      	ldr	r3, [r3, #20]
 800c9ee:	085b      	lsrs	r3, r3, #1
 800c9f0:	3b01      	subs	r3, #1
 800c9f2:	041b      	lsls	r3, r3, #16
 800c9f4:	431a      	orrs	r2, r3
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	061b      	lsls	r3, r3, #24
 800c9fa:	431a      	orrs	r2, r3
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	071b      	lsls	r3, r3, #28
 800ca00:	495a      	ldr	r1, [pc, #360]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca02:	4313      	orrs	r3, r2
 800ca04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ca08:	4b59      	ldr	r3, [pc, #356]	; (800cb70 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ca0e:	f7fd f9f3 	bl	8009df8 <HAL_GetTick>
 800ca12:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ca14:	e008      	b.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ca16:	f7fd f9ef 	bl	8009df8 <HAL_GetTick>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	1ad3      	subs	r3, r2, r3
 800ca20:	2b02      	cmp	r3, #2
 800ca22:	d901      	bls.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ca24:	2303      	movs	r3, #3
 800ca26:	e09c      	b.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ca28:	4b50      	ldr	r3, [pc, #320]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca34:	d1ef      	bne.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f003 0320 	and.w	r3, r3, #32
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f000 8083 	beq.w	800cb4a <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ca44:	2300      	movs	r3, #0
 800ca46:	60bb      	str	r3, [r7, #8]
 800ca48:	4b48      	ldr	r3, [pc, #288]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca4c:	4a47      	ldr	r2, [pc, #284]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca52:	6413      	str	r3, [r2, #64]	; 0x40
 800ca54:	4b45      	ldr	r3, [pc, #276]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca5c:	60bb      	str	r3, [r7, #8]
 800ca5e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800ca60:	4b44      	ldr	r3, [pc, #272]	; (800cb74 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a43      	ldr	r2, [pc, #268]	; (800cb74 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ca66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca6a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ca6c:	f7fd f9c4 	bl	8009df8 <HAL_GetTick>
 800ca70:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ca72:	e008      	b.n	800ca86 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ca74:	f7fd f9c0 	bl	8009df8 <HAL_GetTick>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	69fb      	ldr	r3, [r7, #28]
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d901      	bls.n	800ca86 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800ca82:	2303      	movs	r3, #3
 800ca84:	e06d      	b.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ca86:	4b3b      	ldr	r3, [pc, #236]	; (800cb74 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d0f0      	beq.n	800ca74 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ca92:	4b36      	ldr	r3, [pc, #216]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca9a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d02f      	beq.n	800cb02 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800caaa:	69ba      	ldr	r2, [r7, #24]
 800caac:	429a      	cmp	r2, r3
 800caae:	d028      	beq.n	800cb02 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cab0:	4b2e      	ldr	r3, [pc, #184]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cab8:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800caba:	4b2f      	ldr	r3, [pc, #188]	; (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cabc:	2201      	movs	r2, #1
 800cabe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cac0:	4b2d      	ldr	r3, [pc, #180]	; (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cac2:	2200      	movs	r2, #0
 800cac4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800cac6:	4a29      	ldr	r2, [pc, #164]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cacc:	4b27      	ldr	r3, [pc, #156]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cad0:	f003 0301 	and.w	r3, r3, #1
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d114      	bne.n	800cb02 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800cad8:	f7fd f98e 	bl	8009df8 <HAL_GetTick>
 800cadc:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cade:	e00a      	b.n	800caf6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cae0:	f7fd f98a 	bl	8009df8 <HAL_GetTick>
 800cae4:	4602      	mov	r2, r0
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	1ad3      	subs	r3, r2, r3
 800caea:	f241 3288 	movw	r2, #5000	; 0x1388
 800caee:	4293      	cmp	r3, r2
 800caf0:	d901      	bls.n	800caf6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800caf2:	2303      	movs	r3, #3
 800caf4:	e035      	b.n	800cb62 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800caf6:	4b1d      	ldr	r3, [pc, #116]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cafa:	f003 0302 	and.w	r3, r3, #2
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d0ee      	beq.n	800cae0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb0e:	d10d      	bne.n	800cb2c <HAL_RCCEx_PeriphCLKConfig+0x428>
 800cb10:	4b16      	ldr	r3, [pc, #88]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb12:	689b      	ldr	r3, [r3, #8]
 800cb14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb1c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cb20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb24:	4911      	ldr	r1, [pc, #68]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb26:	4313      	orrs	r3, r2
 800cb28:	608b      	str	r3, [r1, #8]
 800cb2a:	e005      	b.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800cb2c:	4b0f      	ldr	r3, [pc, #60]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	4a0e      	ldr	r2, [pc, #56]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb32:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cb36:	6093      	str	r3, [r2, #8]
 800cb38:	4b0c      	ldr	r3, [pc, #48]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb44:	4909      	ldr	r1, [pc, #36]	; (800cb6c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb46:	4313      	orrs	r3, r2
 800cb48:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f003 0310 	and.w	r3, r3, #16
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d004      	beq.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cb5c:	4b07      	ldr	r3, [pc, #28]	; (800cb7c <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800cb5e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800cb60:	2300      	movs	r3, #0
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3720      	adds	r7, #32
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	40023800 	.word	0x40023800
 800cb70:	42470070 	.word	0x42470070
 800cb74:	40007000 	.word	0x40007000
 800cb78:	42470e40 	.word	0x42470e40
 800cb7c:	424711e0 	.word	0x424711e0

0800cb80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b086      	sub	sp, #24
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f003 0301 	and.w	r3, r3, #1
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d075      	beq.n	800cc84 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cb98:	4ba2      	ldr	r3, [pc, #648]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cb9a:	689b      	ldr	r3, [r3, #8]
 800cb9c:	f003 030c 	and.w	r3, r3, #12
 800cba0:	2b04      	cmp	r3, #4
 800cba2:	d00c      	beq.n	800cbbe <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cba4:	4b9f      	ldr	r3, [pc, #636]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cbac:	2b08      	cmp	r3, #8
 800cbae:	d112      	bne.n	800cbd6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cbb0:	4b9c      	ldr	r3, [pc, #624]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbbc:	d10b      	bne.n	800cbd6 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cbbe:	4b99      	ldr	r3, [pc, #612]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d05b      	beq.n	800cc82 <HAL_RCC_OscConfig+0x102>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d157      	bne.n	800cc82 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	e20b      	b.n	800cfee <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbde:	d106      	bne.n	800cbee <HAL_RCC_OscConfig+0x6e>
 800cbe0:	4b90      	ldr	r3, [pc, #576]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	4a8f      	ldr	r2, [pc, #572]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cbe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cbea:	6013      	str	r3, [r2, #0]
 800cbec:	e01d      	b.n	800cc2a <HAL_RCC_OscConfig+0xaa>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cbf6:	d10c      	bne.n	800cc12 <HAL_RCC_OscConfig+0x92>
 800cbf8:	4b8a      	ldr	r3, [pc, #552]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a89      	ldr	r2, [pc, #548]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cbfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cc02:	6013      	str	r3, [r2, #0]
 800cc04:	4b87      	ldr	r3, [pc, #540]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a86      	ldr	r2, [pc, #536]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cc0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc0e:	6013      	str	r3, [r2, #0]
 800cc10:	e00b      	b.n	800cc2a <HAL_RCC_OscConfig+0xaa>
 800cc12:	4b84      	ldr	r3, [pc, #528]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a83      	ldr	r2, [pc, #524]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cc18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc1c:	6013      	str	r3, [r2, #0]
 800cc1e:	4b81      	ldr	r3, [pc, #516]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	4a80      	ldr	r2, [pc, #512]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cc24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d013      	beq.n	800cc5a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc32:	f7fd f8e1 	bl	8009df8 <HAL_GetTick>
 800cc36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc38:	e008      	b.n	800cc4c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cc3a:	f7fd f8dd 	bl	8009df8 <HAL_GetTick>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	1ad3      	subs	r3, r2, r3
 800cc44:	2b64      	cmp	r3, #100	; 0x64
 800cc46:	d901      	bls.n	800cc4c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800cc48:	2303      	movs	r3, #3
 800cc4a:	e1d0      	b.n	800cfee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc4c:	4b75      	ldr	r3, [pc, #468]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d0f0      	beq.n	800cc3a <HAL_RCC_OscConfig+0xba>
 800cc58:	e014      	b.n	800cc84 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc5a:	f7fd f8cd 	bl	8009df8 <HAL_GetTick>
 800cc5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cc60:	e008      	b.n	800cc74 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cc62:	f7fd f8c9 	bl	8009df8 <HAL_GetTick>
 800cc66:	4602      	mov	r2, r0
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	2b64      	cmp	r3, #100	; 0x64
 800cc6e:	d901      	bls.n	800cc74 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800cc70:	2303      	movs	r3, #3
 800cc72:	e1bc      	b.n	800cfee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cc74:	4b6b      	ldr	r3, [pc, #428]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d1f0      	bne.n	800cc62 <HAL_RCC_OscConfig+0xe2>
 800cc80:	e000      	b.n	800cc84 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cc82:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f003 0302 	and.w	r3, r3, #2
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d063      	beq.n	800cd58 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cc90:	4b64      	ldr	r3, [pc, #400]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cc92:	689b      	ldr	r3, [r3, #8]
 800cc94:	f003 030c 	and.w	r3, r3, #12
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d00b      	beq.n	800ccb4 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cc9c:	4b61      	ldr	r3, [pc, #388]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cca4:	2b08      	cmp	r3, #8
 800cca6:	d11c      	bne.n	800cce2 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cca8:	4b5e      	ldr	r3, [pc, #376]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d116      	bne.n	800cce2 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ccb4:	4b5b      	ldr	r3, [pc, #364]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f003 0302 	and.w	r3, r3, #2
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d005      	beq.n	800cccc <HAL_RCC_OscConfig+0x14c>
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d001      	beq.n	800cccc <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800ccc8:	2301      	movs	r3, #1
 800ccca:	e190      	b.n	800cfee <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cccc:	4b55      	ldr	r3, [pc, #340]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	691b      	ldr	r3, [r3, #16]
 800ccd8:	00db      	lsls	r3, r3, #3
 800ccda:	4952      	ldr	r1, [pc, #328]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cce0:	e03a      	b.n	800cd58 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	68db      	ldr	r3, [r3, #12]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d020      	beq.n	800cd2c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ccea:	4b4f      	ldr	r3, [pc, #316]	; (800ce28 <HAL_RCC_OscConfig+0x2a8>)
 800ccec:	2201      	movs	r2, #1
 800ccee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccf0:	f7fd f882 	bl	8009df8 <HAL_GetTick>
 800ccf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ccf6:	e008      	b.n	800cd0a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ccf8:	f7fd f87e 	bl	8009df8 <HAL_GetTick>
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	2b02      	cmp	r3, #2
 800cd04:	d901      	bls.n	800cd0a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800cd06:	2303      	movs	r3, #3
 800cd08:	e171      	b.n	800cfee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cd0a:	4b46      	ldr	r3, [pc, #280]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f003 0302 	and.w	r3, r3, #2
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d0f0      	beq.n	800ccf8 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd16:	4b43      	ldr	r3, [pc, #268]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	691b      	ldr	r3, [r3, #16]
 800cd22:	00db      	lsls	r3, r3, #3
 800cd24:	493f      	ldr	r1, [pc, #252]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cd26:	4313      	orrs	r3, r2
 800cd28:	600b      	str	r3, [r1, #0]
 800cd2a:	e015      	b.n	800cd58 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cd2c:	4b3e      	ldr	r3, [pc, #248]	; (800ce28 <HAL_RCC_OscConfig+0x2a8>)
 800cd2e:	2200      	movs	r2, #0
 800cd30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd32:	f7fd f861 	bl	8009df8 <HAL_GetTick>
 800cd36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cd38:	e008      	b.n	800cd4c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cd3a:	f7fd f85d 	bl	8009df8 <HAL_GetTick>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	1ad3      	subs	r3, r2, r3
 800cd44:	2b02      	cmp	r3, #2
 800cd46:	d901      	bls.n	800cd4c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	e150      	b.n	800cfee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cd4c:	4b35      	ldr	r3, [pc, #212]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f003 0302 	and.w	r3, r3, #2
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d1f0      	bne.n	800cd3a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f003 0308 	and.w	r3, r3, #8
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d030      	beq.n	800cdc6 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	695b      	ldr	r3, [r3, #20]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d016      	beq.n	800cd9a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cd6c:	4b2f      	ldr	r3, [pc, #188]	; (800ce2c <HAL_RCC_OscConfig+0x2ac>)
 800cd6e:	2201      	movs	r2, #1
 800cd70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd72:	f7fd f841 	bl	8009df8 <HAL_GetTick>
 800cd76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cd78:	e008      	b.n	800cd8c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cd7a:	f7fd f83d 	bl	8009df8 <HAL_GetTick>
 800cd7e:	4602      	mov	r2, r0
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	1ad3      	subs	r3, r2, r3
 800cd84:	2b02      	cmp	r3, #2
 800cd86:	d901      	bls.n	800cd8c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800cd88:	2303      	movs	r3, #3
 800cd8a:	e130      	b.n	800cfee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cd8c:	4b25      	ldr	r3, [pc, #148]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cd8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd90:	f003 0302 	and.w	r3, r3, #2
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d0f0      	beq.n	800cd7a <HAL_RCC_OscConfig+0x1fa>
 800cd98:	e015      	b.n	800cdc6 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cd9a:	4b24      	ldr	r3, [pc, #144]	; (800ce2c <HAL_RCC_OscConfig+0x2ac>)
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cda0:	f7fd f82a 	bl	8009df8 <HAL_GetTick>
 800cda4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cda6:	e008      	b.n	800cdba <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cda8:	f7fd f826 	bl	8009df8 <HAL_GetTick>
 800cdac:	4602      	mov	r2, r0
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	1ad3      	subs	r3, r2, r3
 800cdb2:	2b02      	cmp	r3, #2
 800cdb4:	d901      	bls.n	800cdba <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800cdb6:	2303      	movs	r3, #3
 800cdb8:	e119      	b.n	800cfee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cdba:	4b1a      	ldr	r3, [pc, #104]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cdbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdbe:	f003 0302 	and.w	r3, r3, #2
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d1f0      	bne.n	800cda8 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f003 0304 	and.w	r3, r3, #4
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f000 809f 	beq.w	800cf12 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cdd8:	4b12      	ldr	r3, [pc, #72]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cdda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d10f      	bne.n	800ce04 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cde4:	2300      	movs	r3, #0
 800cde6:	60fb      	str	r3, [r7, #12]
 800cde8:	4b0e      	ldr	r3, [pc, #56]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cdea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdec:	4a0d      	ldr	r2, [pc, #52]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cdee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cdf2:	6413      	str	r3, [r2, #64]	; 0x40
 800cdf4:	4b0b      	ldr	r3, [pc, #44]	; (800ce24 <HAL_RCC_OscConfig+0x2a4>)
 800cdf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdfc:	60fb      	str	r3, [r7, #12]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ce00:	2301      	movs	r3, #1
 800ce02:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce04:	4b0a      	ldr	r3, [pc, #40]	; (800ce30 <HAL_RCC_OscConfig+0x2b0>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d120      	bne.n	800ce52 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ce10:	4b07      	ldr	r3, [pc, #28]	; (800ce30 <HAL_RCC_OscConfig+0x2b0>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a06      	ldr	r2, [pc, #24]	; (800ce30 <HAL_RCC_OscConfig+0x2b0>)
 800ce16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ce1c:	f7fc ffec 	bl	8009df8 <HAL_GetTick>
 800ce20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce22:	e010      	b.n	800ce46 <HAL_RCC_OscConfig+0x2c6>
 800ce24:	40023800 	.word	0x40023800
 800ce28:	42470000 	.word	0x42470000
 800ce2c:	42470e80 	.word	0x42470e80
 800ce30:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce34:	f7fc ffe0 	bl	8009df8 <HAL_GetTick>
 800ce38:	4602      	mov	r2, r0
 800ce3a:	693b      	ldr	r3, [r7, #16]
 800ce3c:	1ad3      	subs	r3, r2, r3
 800ce3e:	2b02      	cmp	r3, #2
 800ce40:	d901      	bls.n	800ce46 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800ce42:	2303      	movs	r3, #3
 800ce44:	e0d3      	b.n	800cfee <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce46:	4b6c      	ldr	r3, [pc, #432]	; (800cff8 <HAL_RCC_OscConfig+0x478>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d0f0      	beq.n	800ce34 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	689b      	ldr	r3, [r3, #8]
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d106      	bne.n	800ce68 <HAL_RCC_OscConfig+0x2e8>
 800ce5a:	4b68      	ldr	r3, [pc, #416]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800ce5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce5e:	4a67      	ldr	r2, [pc, #412]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800ce60:	f043 0301 	orr.w	r3, r3, #1
 800ce64:	6713      	str	r3, [r2, #112]	; 0x70
 800ce66:	e01c      	b.n	800cea2 <HAL_RCC_OscConfig+0x322>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	2b05      	cmp	r3, #5
 800ce6e:	d10c      	bne.n	800ce8a <HAL_RCC_OscConfig+0x30a>
 800ce70:	4b62      	ldr	r3, [pc, #392]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800ce72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce74:	4a61      	ldr	r2, [pc, #388]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800ce76:	f043 0304 	orr.w	r3, r3, #4
 800ce7a:	6713      	str	r3, [r2, #112]	; 0x70
 800ce7c:	4b5f      	ldr	r3, [pc, #380]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800ce7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce80:	4a5e      	ldr	r2, [pc, #376]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800ce82:	f043 0301 	orr.w	r3, r3, #1
 800ce86:	6713      	str	r3, [r2, #112]	; 0x70
 800ce88:	e00b      	b.n	800cea2 <HAL_RCC_OscConfig+0x322>
 800ce8a:	4b5c      	ldr	r3, [pc, #368]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800ce8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce8e:	4a5b      	ldr	r2, [pc, #364]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800ce90:	f023 0301 	bic.w	r3, r3, #1
 800ce94:	6713      	str	r3, [r2, #112]	; 0x70
 800ce96:	4b59      	ldr	r3, [pc, #356]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800ce98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce9a:	4a58      	ldr	r2, [pc, #352]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800ce9c:	f023 0304 	bic.w	r3, r3, #4
 800cea0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d015      	beq.n	800ced6 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ceaa:	f7fc ffa5 	bl	8009df8 <HAL_GetTick>
 800ceae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ceb0:	e00a      	b.n	800cec8 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ceb2:	f7fc ffa1 	bl	8009df8 <HAL_GetTick>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	1ad3      	subs	r3, r2, r3
 800cebc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d901      	bls.n	800cec8 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800cec4:	2303      	movs	r3, #3
 800cec6:	e092      	b.n	800cfee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cec8:	4b4c      	ldr	r3, [pc, #304]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800ceca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cecc:	f003 0302 	and.w	r3, r3, #2
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d0ee      	beq.n	800ceb2 <HAL_RCC_OscConfig+0x332>
 800ced4:	e014      	b.n	800cf00 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ced6:	f7fc ff8f 	bl	8009df8 <HAL_GetTick>
 800ceda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cedc:	e00a      	b.n	800cef4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cede:	f7fc ff8b 	bl	8009df8 <HAL_GetTick>
 800cee2:	4602      	mov	r2, r0
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	1ad3      	subs	r3, r2, r3
 800cee8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d901      	bls.n	800cef4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800cef0:	2303      	movs	r3, #3
 800cef2:	e07c      	b.n	800cfee <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cef4:	4b41      	ldr	r3, [pc, #260]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800cef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cef8:	f003 0302 	and.w	r3, r3, #2
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d1ee      	bne.n	800cede <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cf00:	7dfb      	ldrb	r3, [r7, #23]
 800cf02:	2b01      	cmp	r3, #1
 800cf04:	d105      	bne.n	800cf12 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cf06:	4b3d      	ldr	r3, [pc, #244]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800cf08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf0a:	4a3c      	ldr	r2, [pc, #240]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800cf0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	699b      	ldr	r3, [r3, #24]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d068      	beq.n	800cfec <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cf1a:	4b38      	ldr	r3, [pc, #224]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800cf1c:	689b      	ldr	r3, [r3, #8]
 800cf1e:	f003 030c 	and.w	r3, r3, #12
 800cf22:	2b08      	cmp	r3, #8
 800cf24:	d060      	beq.n	800cfe8 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	699b      	ldr	r3, [r3, #24]
 800cf2a:	2b02      	cmp	r3, #2
 800cf2c:	d145      	bne.n	800cfba <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf2e:	4b34      	ldr	r3, [pc, #208]	; (800d000 <HAL_RCC_OscConfig+0x480>)
 800cf30:	2200      	movs	r2, #0
 800cf32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf34:	f7fc ff60 	bl	8009df8 <HAL_GetTick>
 800cf38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf3a:	e008      	b.n	800cf4e <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cf3c:	f7fc ff5c 	bl	8009df8 <HAL_GetTick>
 800cf40:	4602      	mov	r2, r0
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	1ad3      	subs	r3, r2, r3
 800cf46:	2b02      	cmp	r3, #2
 800cf48:	d901      	bls.n	800cf4e <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800cf4a:	2303      	movs	r3, #3
 800cf4c:	e04f      	b.n	800cfee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf4e:	4b2b      	ldr	r3, [pc, #172]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d1f0      	bne.n	800cf3c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	69da      	ldr	r2, [r3, #28]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6a1b      	ldr	r3, [r3, #32]
 800cf62:	431a      	orrs	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf68:	019b      	lsls	r3, r3, #6
 800cf6a:	431a      	orrs	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf70:	085b      	lsrs	r3, r3, #1
 800cf72:	3b01      	subs	r3, #1
 800cf74:	041b      	lsls	r3, r3, #16
 800cf76:	431a      	orrs	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf7c:	061b      	lsls	r3, r3, #24
 800cf7e:	431a      	orrs	r2, r3
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf84:	071b      	lsls	r3, r3, #28
 800cf86:	491d      	ldr	r1, [pc, #116]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cf8c:	4b1c      	ldr	r3, [pc, #112]	; (800d000 <HAL_RCC_OscConfig+0x480>)
 800cf8e:	2201      	movs	r2, #1
 800cf90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf92:	f7fc ff31 	bl	8009df8 <HAL_GetTick>
 800cf96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cf98:	e008      	b.n	800cfac <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cf9a:	f7fc ff2d 	bl	8009df8 <HAL_GetTick>
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	1ad3      	subs	r3, r2, r3
 800cfa4:	2b02      	cmp	r3, #2
 800cfa6:	d901      	bls.n	800cfac <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800cfa8:	2303      	movs	r3, #3
 800cfaa:	e020      	b.n	800cfee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cfac:	4b13      	ldr	r3, [pc, #76]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d0f0      	beq.n	800cf9a <HAL_RCC_OscConfig+0x41a>
 800cfb8:	e018      	b.n	800cfec <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cfba:	4b11      	ldr	r3, [pc, #68]	; (800d000 <HAL_RCC_OscConfig+0x480>)
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfc0:	f7fc ff1a 	bl	8009df8 <HAL_GetTick>
 800cfc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cfc6:	e008      	b.n	800cfda <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cfc8:	f7fc ff16 	bl	8009df8 <HAL_GetTick>
 800cfcc:	4602      	mov	r2, r0
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	1ad3      	subs	r3, r2, r3
 800cfd2:	2b02      	cmp	r3, #2
 800cfd4:	d901      	bls.n	800cfda <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800cfd6:	2303      	movs	r3, #3
 800cfd8:	e009      	b.n	800cfee <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cfda:	4b08      	ldr	r3, [pc, #32]	; (800cffc <HAL_RCC_OscConfig+0x47c>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d1f0      	bne.n	800cfc8 <HAL_RCC_OscConfig+0x448>
 800cfe6:	e001      	b.n	800cfec <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	e000      	b.n	800cfee <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800cfec:	2300      	movs	r3, #0
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3718      	adds	r7, #24
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	40007000 	.word	0x40007000
 800cffc:	40023800 	.word	0x40023800
 800d000:	42470060 	.word	0x42470060

0800d004 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d101      	bne.n	800d016 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d012:	2301      	movs	r3, #1
 800d014:	e022      	b.n	800d05c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d105      	bne.n	800d02e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f7fa f895 	bl	8007158 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2203      	movs	r2, #3
 800d032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 f814 	bl	800d064 <HAL_SD_InitCard>
 800d03c:	4603      	mov	r3, r0
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d001      	beq.n	800d046 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d042:	2301      	movs	r3, #1
 800d044:	e00a      	b.n	800d05c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2200      	movs	r2, #0
 800d04a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2201      	movs	r2, #1
 800d056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d05a:	2300      	movs	r3, #0
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3708      	adds	r7, #8
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d064:	b5b0      	push	{r4, r5, r7, lr}
 800d066:	b08e      	sub	sp, #56	; 0x38
 800d068:	af04      	add	r7, sp, #16
 800d06a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d06c:	2300      	movs	r3, #0
 800d06e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d070:	2300      	movs	r3, #0
 800d072:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d074:	2300      	movs	r3, #0
 800d076:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d078:	2300      	movs	r3, #0
 800d07a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d07c:	2300      	movs	r3, #0
 800d07e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d080:	2376      	movs	r3, #118	; 0x76
 800d082:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681d      	ldr	r5, [r3, #0]
 800d088:	466c      	mov	r4, sp
 800d08a:	f107 0314 	add.w	r3, r7, #20
 800d08e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d092:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d096:	f107 0308 	add.w	r3, r7, #8
 800d09a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d09c:	4628      	mov	r0, r5
 800d09e:	f003 fa87 	bl	80105b0 <SDIO_Init>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d0a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d001      	beq.n	800d0b4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e031      	b.n	800d118 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d0b4:	4b1a      	ldr	r3, [pc, #104]	; (800d120 <HAL_SD_InitCard+0xbc>)
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f003 fabf 	bl	8010642 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d0c4:	4b16      	ldr	r3, [pc, #88]	; (800d120 <HAL_SD_InitCard+0xbc>)
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 ffc6 	bl	800e05c <SD_PowerON>
 800d0d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d0d2:	6a3b      	ldr	r3, [r7, #32]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d00b      	beq.n	800d0f0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2201      	movs	r2, #1
 800d0dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0e4:	6a3b      	ldr	r3, [r7, #32]
 800d0e6:	431a      	orrs	r2, r3
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	e013      	b.n	800d118 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 fee5 	bl	800dec0 <SD_InitCard>
 800d0f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d0f8:	6a3b      	ldr	r3, [r7, #32]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d00b      	beq.n	800d116 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	2201      	movs	r2, #1
 800d102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d10a:	6a3b      	ldr	r3, [r7, #32]
 800d10c:	431a      	orrs	r2, r3
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d112:	2301      	movs	r3, #1
 800d114:	e000      	b.n	800d118 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d116:	2300      	movs	r3, #0
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3728      	adds	r7, #40	; 0x28
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bdb0      	pop	{r4, r5, r7, pc}
 800d120:	422580a0 	.word	0x422580a0

0800d124 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b08c      	sub	sp, #48	; 0x30
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60f8      	str	r0, [r7, #12]
 800d12c:	60b9      	str	r1, [r7, #8]
 800d12e:	607a      	str	r2, [r7, #4]
 800d130:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d107      	bne.n	800d14c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d140:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d148:	2301      	movs	r3, #1
 800d14a:	e0c7      	b.n	800d2dc <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d152:	b2db      	uxtb	r3, r3
 800d154:	2b01      	cmp	r3, #1
 800d156:	f040 80c0 	bne.w	800d2da <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2200      	movs	r2, #0
 800d15e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	441a      	add	r2, r3
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d907      	bls.n	800d17e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d172:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d17a:	2301      	movs	r3, #1
 800d17c:	e0ae      	b.n	800d2dc <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2203      	movs	r2, #3
 800d182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2200      	movs	r2, #0
 800d18c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d19c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a2:	4a50      	ldr	r2, [pc, #320]	; (800d2e4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d1a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1aa:	4a4f      	ldr	r2, [pc, #316]	; (800d2e8 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d1ac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	3380      	adds	r3, #128	; 0x80
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	68ba      	ldr	r2, [r7, #8]
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	025b      	lsls	r3, r3, #9
 800d1c8:	089b      	lsrs	r3, r3, #2
 800d1ca:	f7fd fc07 	bl	800a9dc <HAL_DMA_Start_IT>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d017      	beq.n	800d204 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d1e2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a40      	ldr	r2, [pc, #256]	; (800d2ec <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d1ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d200:	2301      	movs	r3, #1
 800d202:	e06b      	b.n	800d2dc <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d204:	4b3a      	ldr	r3, [pc, #232]	; (800d2f0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d206:	2201      	movs	r2, #1
 800d208:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d002      	beq.n	800d218 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d214:	025b      	lsls	r3, r3, #9
 800d216:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d220:	4618      	mov	r0, r3
 800d222:	f003 faa1 	bl	8010768 <SDMMC_CmdBlockLength>
 800d226:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d00f      	beq.n	800d24e <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	4a2e      	ldr	r2, [pc, #184]	; (800d2ec <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d234:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23c:	431a      	orrs	r2, r3
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2201      	movs	r2, #1
 800d246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d24a:	2301      	movs	r3, #1
 800d24c:	e046      	b.n	800d2dc <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d24e:	f04f 33ff 	mov.w	r3, #4294967295
 800d252:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	025b      	lsls	r3, r3, #9
 800d258:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d25a:	2390      	movs	r3, #144	; 0x90
 800d25c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d25e:	2302      	movs	r3, #2
 800d260:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d262:	2300      	movs	r3, #0
 800d264:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d266:	2301      	movs	r3, #1
 800d268:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f107 0210 	add.w	r2, r7, #16
 800d272:	4611      	mov	r1, r2
 800d274:	4618      	mov	r0, r3
 800d276:	f003 fa4b 	bl	8010710 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d90a      	bls.n	800d296 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2282      	movs	r2, #130	; 0x82
 800d284:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d28c:	4618      	mov	r0, r3
 800d28e:	f003 faaf 	bl	80107f0 <SDMMC_CmdReadMultiBlock>
 800d292:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d294:	e009      	b.n	800d2aa <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2281      	movs	r2, #129	; 0x81
 800d29a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f003 fa82 	bl	80107ac <SDMMC_CmdReadSingleBlock>
 800d2a8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d012      	beq.n	800d2d6 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4a0d      	ldr	r2, [pc, #52]	; (800d2ec <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d2b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2be:	431a      	orrs	r2, r3
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	e002      	b.n	800d2dc <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	e000      	b.n	800d2dc <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d2da:	2302      	movs	r3, #2
  }
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3730      	adds	r7, #48	; 0x30
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	0800dccf 	.word	0x0800dccf
 800d2e8:	0800dd41 	.word	0x0800dd41
 800d2ec:	004005ff 	.word	0x004005ff
 800d2f0:	4225858c 	.word	0x4225858c

0800d2f4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b08c      	sub	sp, #48	; 0x30
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	60f8      	str	r0, [r7, #12]
 800d2fc:	60b9      	str	r1, [r7, #8]
 800d2fe:	607a      	str	r2, [r7, #4]
 800d300:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d107      	bne.n	800d31c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d310:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d318:	2301      	movs	r3, #1
 800d31a:	e0ca      	b.n	800d4b2 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d322:	b2db      	uxtb	r3, r3
 800d324:	2b01      	cmp	r3, #1
 800d326:	f040 80c3 	bne.w	800d4b0 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2200      	movs	r2, #0
 800d32e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d330:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	441a      	add	r2, r3
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d907      	bls.n	800d34e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d342:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d34a:	2301      	movs	r3, #1
 800d34c:	e0b1      	b.n	800d4b2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2203      	movs	r2, #3
 800d352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	2200      	movs	r2, #0
 800d35c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f042 021a 	orr.w	r2, r2, #26
 800d36c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d372:	4a52      	ldr	r2, [pc, #328]	; (800d4bc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d374:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d37a:	4a51      	ldr	r2, [pc, #324]	; (800d4c0 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d37c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d382:	2200      	movs	r2, #0
 800d384:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d38a:	2b01      	cmp	r3, #1
 800d38c:	d002      	beq.n	800d394 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d390:	025b      	lsls	r3, r3, #9
 800d392:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d39c:	4618      	mov	r0, r3
 800d39e:	f003 f9e3 	bl	8010768 <SDMMC_CmdBlockLength>
 800d3a2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d00f      	beq.n	800d3ca <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	4a45      	ldr	r2, [pc, #276]	; (800d4c4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d3b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b8:	431a      	orrs	r2, r3
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e073      	b.n	800d4b2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d90a      	bls.n	800d3e6 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	22a0      	movs	r2, #160	; 0xa0
 800d3d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f003 fa4b 	bl	8010878 <SDMMC_CmdWriteMultiBlock>
 800d3e2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d3e4:	e009      	b.n	800d3fa <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2290      	movs	r2, #144	; 0x90
 800d3ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f003 fa1e 	bl	8010834 <SDMMC_CmdWriteSingleBlock>
 800d3f8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d012      	beq.n	800d426 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4a2f      	ldr	r2, [pc, #188]	; (800d4c4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d406:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d40e:	431a      	orrs	r2, r3
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2201      	movs	r2, #1
 800d418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2200      	movs	r2, #0
 800d420:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d422:	2301      	movs	r3, #1
 800d424:	e045      	b.n	800d4b2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d426:	4b28      	ldr	r3, [pc, #160]	; (800d4c8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d428:	2201      	movs	r2, #1
 800d42a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d430:	68b9      	ldr	r1, [r7, #8]
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	3380      	adds	r3, #128	; 0x80
 800d438:	461a      	mov	r2, r3
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	025b      	lsls	r3, r3, #9
 800d43e:	089b      	lsrs	r3, r3, #2
 800d440:	f7fd facc 	bl	800a9dc <HAL_DMA_Start_IT>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d01a      	beq.n	800d480 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f022 021a 	bic.w	r2, r2, #26
 800d458:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	4a19      	ldr	r2, [pc, #100]	; (800d4c4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d460:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d466:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2201      	movs	r2, #1
 800d472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2200      	movs	r2, #0
 800d47a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d47c:	2301      	movs	r3, #1
 800d47e:	e018      	b.n	800d4b2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d480:	f04f 33ff 	mov.w	r3, #4294967295
 800d484:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	025b      	lsls	r3, r3, #9
 800d48a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d48c:	2390      	movs	r3, #144	; 0x90
 800d48e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d490:	2300      	movs	r3, #0
 800d492:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d494:	2300      	movs	r3, #0
 800d496:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d498:	2301      	movs	r3, #1
 800d49a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f107 0210 	add.w	r2, r7, #16
 800d4a4:	4611      	mov	r1, r2
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f003 f932 	bl	8010710 <SDIO_ConfigData>

      return HAL_OK;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	e000      	b.n	800d4b2 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d4b0:	2302      	movs	r3, #2
  }
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3730      	adds	r7, #48	; 0x30
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	0800dca5 	.word	0x0800dca5
 800d4c0:	0800dd41 	.word	0x0800dd41
 800d4c4:	004005ff 	.word	0x004005ff
 800d4c8:	4225858c 	.word	0x4225858c

0800d4cc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4d8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d008      	beq.n	800d4fa <HAL_SD_IRQHandler+0x2e>
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f003 0308 	and.w	r3, r3, #8
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d003      	beq.n	800d4fa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 ffc8 	bl	800e488 <SD_Read_IT>
 800d4f8:	e155      	b.n	800d7a6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d504:	2b00      	cmp	r3, #0
 800d506:	f000 808f 	beq.w	800d628 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d512:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	6812      	ldr	r2, [r2, #0]
 800d51e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d522:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d526:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f022 0201 	bic.w	r2, r2, #1
 800d536:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f003 0308 	and.w	r3, r3, #8
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d039      	beq.n	800d5b6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f003 0302 	and.w	r3, r3, #2
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d104      	bne.n	800d556 <HAL_SD_IRQHandler+0x8a>
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f003 0320 	and.w	r3, r3, #32
 800d552:	2b00      	cmp	r3, #0
 800d554:	d011      	beq.n	800d57a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	4618      	mov	r0, r3
 800d55c:	f003 f9ae 	bl	80108bc <SDMMC_CmdStopTransfer>
 800d560:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d008      	beq.n	800d57a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	431a      	orrs	r2, r3
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 f91f 	bl	800d7b8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f240 523a 	movw	r2, #1338	; 0x53a
 800d582:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2201      	movs	r2, #1
 800d588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2200      	movs	r2, #0
 800d590:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f003 0301 	and.w	r3, r3, #1
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d104      	bne.n	800d5a6 <HAL_SD_IRQHandler+0xda>
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f003 0302 	and.w	r3, r3, #2
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d003      	beq.n	800d5ae <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f003 fe04 	bl	80111b4 <HAL_SD_RxCpltCallback>
 800d5ac:	e0fb      	b.n	800d7a6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f003 fdf6 	bl	80111a0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d5b4:	e0f7      	b.n	800d7a6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	f000 80f2 	beq.w	800d7a6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f003 0320 	and.w	r3, r3, #32
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d011      	beq.n	800d5f0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f003 f973 	bl	80108bc <SDMMC_CmdStopTransfer>
 800d5d6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d008      	beq.n	800d5f0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	431a      	orrs	r2, r3
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 f8e4 	bl	800d7b8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f003 0301 	and.w	r3, r3, #1
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	f040 80d5 	bne.w	800d7a6 <HAL_SD_IRQHandler+0x2da>
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f003 0302 	and.w	r3, r3, #2
 800d602:	2b00      	cmp	r3, #0
 800d604:	f040 80cf 	bne.w	800d7a6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f022 0208 	bic.w	r2, r2, #8
 800d616:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2201      	movs	r2, #1
 800d61c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f003 fdbd 	bl	80111a0 <HAL_SD_TxCpltCallback>
}
 800d626:	e0be      	b.n	800d7a6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d62e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d632:	2b00      	cmp	r3, #0
 800d634:	d008      	beq.n	800d648 <HAL_SD_IRQHandler+0x17c>
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	f003 0308 	and.w	r3, r3, #8
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d003      	beq.n	800d648 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 ff72 	bl	800e52a <SD_Write_IT>
 800d646:	e0ae      	b.n	800d7a6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d64e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d652:	2b00      	cmp	r3, #0
 800d654:	f000 80a7 	beq.w	800d7a6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d65e:	f003 0302 	and.w	r3, r3, #2
 800d662:	2b00      	cmp	r3, #0
 800d664:	d005      	beq.n	800d672 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d66a:	f043 0202 	orr.w	r2, r3, #2
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d678:	f003 0308 	and.w	r3, r3, #8
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d005      	beq.n	800d68c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d684:	f043 0208 	orr.w	r2, r3, #8
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d692:	f003 0320 	and.w	r3, r3, #32
 800d696:	2b00      	cmp	r3, #0
 800d698:	d005      	beq.n	800d6a6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d69e:	f043 0220 	orr.w	r2, r3, #32
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ac:	f003 0310 	and.w	r3, r3, #16
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d005      	beq.n	800d6c0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b8:	f043 0210 	orr.w	r2, r3, #16
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f240 523a 	movw	r2, #1338	; 0x53a
 800d6c8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d6d8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f003 f8ec 	bl	80108bc <SDMMC_CmdStopTransfer>
 800d6e4:	4602      	mov	r2, r0
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ea:	431a      	orrs	r2, r3
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f003 0308 	and.w	r3, r3, #8
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d00a      	beq.n	800d710 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2200      	movs	r2, #0
 800d706:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 f855 	bl	800d7b8 <HAL_SD_ErrorCallback>
}
 800d70e:	e04a      	b.n	800d7a6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d716:	2b00      	cmp	r3, #0
 800d718:	d045      	beq.n	800d7a6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	f003 0310 	and.w	r3, r3, #16
 800d720:	2b00      	cmp	r3, #0
 800d722:	d104      	bne.n	800d72e <HAL_SD_IRQHandler+0x262>
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f003 0320 	and.w	r3, r3, #32
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d011      	beq.n	800d752 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d732:	4a1f      	ldr	r2, [pc, #124]	; (800d7b0 <HAL_SD_IRQHandler+0x2e4>)
 800d734:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7fd f9a6 	bl	800aa8c <HAL_DMA_Abort_IT>
 800d740:	4603      	mov	r3, r0
 800d742:	2b00      	cmp	r3, #0
 800d744:	d02f      	beq.n	800d7a6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d74a:	4618      	mov	r0, r3
 800d74c:	f000 fb4a 	bl	800dde4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d750:	e029      	b.n	800d7a6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f003 0301 	and.w	r3, r3, #1
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d104      	bne.n	800d766 <HAL_SD_IRQHandler+0x29a>
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	f003 0302 	and.w	r3, r3, #2
 800d762:	2b00      	cmp	r3, #0
 800d764:	d011      	beq.n	800d78a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d76a:	4a12      	ldr	r2, [pc, #72]	; (800d7b4 <HAL_SD_IRQHandler+0x2e8>)
 800d76c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d772:	4618      	mov	r0, r3
 800d774:	f7fd f98a 	bl	800aa8c <HAL_DMA_Abort_IT>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d013      	beq.n	800d7a6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d782:	4618      	mov	r0, r3
 800d784:	f000 fb65 	bl	800de52 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d788:	e00d      	b.n	800d7a6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2200      	movs	r2, #0
 800d78e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2201      	movs	r2, #1
 800d794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f003 fcf4 	bl	801118c <HAL_SD_AbortCallback>
}
 800d7a4:	e7ff      	b.n	800d7a6 <HAL_SD_IRQHandler+0x2da>
 800d7a6:	bf00      	nop
 800d7a8:	3710      	adds	r7, #16
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	0800dde5 	.word	0x0800dde5
 800d7b4:	0800de53 	.word	0x0800de53

0800d7b8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d7c0:	bf00      	nop
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7da:	0f9b      	lsrs	r3, r3, #30
 800d7dc:	b2da      	uxtb	r2, r3
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7e6:	0e9b      	lsrs	r3, r3, #26
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	f003 030f 	and.w	r3, r3, #15
 800d7ee:	b2da      	uxtb	r2, r3
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7f8:	0e1b      	lsrs	r3, r3, #24
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	f003 0303 	and.w	r3, r3, #3
 800d800:	b2da      	uxtb	r2, r3
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d80a:	0c1b      	lsrs	r3, r3, #16
 800d80c:	b2da      	uxtb	r2, r3
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d816:	0a1b      	lsrs	r3, r3, #8
 800d818:	b2da      	uxtb	r2, r3
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d822:	b2da      	uxtb	r2, r3
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d82c:	0d1b      	lsrs	r3, r3, #20
 800d82e:	b29a      	uxth	r2, r3
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d838:	0c1b      	lsrs	r3, r3, #16
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	f003 030f 	and.w	r3, r3, #15
 800d840:	b2da      	uxtb	r2, r3
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d84a:	0bdb      	lsrs	r3, r3, #15
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	f003 0301 	and.w	r3, r3, #1
 800d852:	b2da      	uxtb	r2, r3
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d85c:	0b9b      	lsrs	r3, r3, #14
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	f003 0301 	and.w	r3, r3, #1
 800d864:	b2da      	uxtb	r2, r3
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d86e:	0b5b      	lsrs	r3, r3, #13
 800d870:	b2db      	uxtb	r3, r3
 800d872:	f003 0301 	and.w	r3, r3, #1
 800d876:	b2da      	uxtb	r2, r3
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d880:	0b1b      	lsrs	r3, r3, #12
 800d882:	b2db      	uxtb	r3, r3
 800d884:	f003 0301 	and.w	r3, r3, #1
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	2200      	movs	r2, #0
 800d892:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d163      	bne.n	800d964 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8a0:	009a      	lsls	r2, r3, #2
 800d8a2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d8a6:	4013      	ands	r3, r2
 800d8a8:	687a      	ldr	r2, [r7, #4]
 800d8aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d8ac:	0f92      	lsrs	r2, r2, #30
 800d8ae:	431a      	orrs	r2, r3
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8b8:	0edb      	lsrs	r3, r3, #27
 800d8ba:	b2db      	uxtb	r3, r3
 800d8bc:	f003 0307 	and.w	r3, r3, #7
 800d8c0:	b2da      	uxtb	r2, r3
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8ca:	0e1b      	lsrs	r3, r3, #24
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	f003 0307 	and.w	r3, r3, #7
 800d8d2:	b2da      	uxtb	r2, r3
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8dc:	0d5b      	lsrs	r3, r3, #21
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	f003 0307 	and.w	r3, r3, #7
 800d8e4:	b2da      	uxtb	r2, r3
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8ee:	0c9b      	lsrs	r3, r3, #18
 800d8f0:	b2db      	uxtb	r3, r3
 800d8f2:	f003 0307 	and.w	r3, r3, #7
 800d8f6:	b2da      	uxtb	r2, r3
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d900:	0bdb      	lsrs	r3, r3, #15
 800d902:	b2db      	uxtb	r3, r3
 800d904:	f003 0307 	and.w	r3, r3, #7
 800d908:	b2da      	uxtb	r2, r3
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	691b      	ldr	r3, [r3, #16]
 800d912:	1c5a      	adds	r2, r3, #1
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	7e1b      	ldrb	r3, [r3, #24]
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	f003 0307 	and.w	r3, r3, #7
 800d922:	3302      	adds	r3, #2
 800d924:	2201      	movs	r2, #1
 800d926:	fa02 f303 	lsl.w	r3, r2, r3
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d92e:	fb02 f203 	mul.w	r2, r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	7a1b      	ldrb	r3, [r3, #8]
 800d93a:	b2db      	uxtb	r3, r3
 800d93c:	f003 030f 	and.w	r3, r3, #15
 800d940:	2201      	movs	r2, #1
 800d942:	409a      	lsls	r2, r3
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d950:	0a52      	lsrs	r2, r2, #9
 800d952:	fb02 f203 	mul.w	r2, r2, r3
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d960:	661a      	str	r2, [r3, #96]	; 0x60
 800d962:	e031      	b.n	800d9c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d11d      	bne.n	800d9a8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d970:	041b      	lsls	r3, r3, #16
 800d972:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d97a:	0c1b      	lsrs	r3, r3, #16
 800d97c:	431a      	orrs	r2, r3
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	691b      	ldr	r3, [r3, #16]
 800d986:	3301      	adds	r3, #1
 800d988:	029a      	lsls	r2, r3, #10
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d99c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	661a      	str	r2, [r3, #96]	; 0x60
 800d9a6:	e00f      	b.n	800d9c8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a58      	ldr	r2, [pc, #352]	; (800db10 <HAL_SD_GetCardCSD+0x344>)
 800d9ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2201      	movs	r2, #1
 800d9c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	e09d      	b.n	800db04 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9cc:	0b9b      	lsrs	r3, r3, #14
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	f003 0301 	and.w	r3, r3, #1
 800d9d4:	b2da      	uxtb	r2, r3
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9de:	09db      	lsrs	r3, r3, #7
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9e6:	b2da      	uxtb	r2, r3
 800d9e8:	683b      	ldr	r3, [r7, #0]
 800d9ea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9f6:	b2da      	uxtb	r2, r3
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da00:	0fdb      	lsrs	r3, r3, #31
 800da02:	b2da      	uxtb	r2, r3
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da0c:	0f5b      	lsrs	r3, r3, #29
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	f003 0303 	and.w	r3, r3, #3
 800da14:	b2da      	uxtb	r2, r3
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da1e:	0e9b      	lsrs	r3, r3, #26
 800da20:	b2db      	uxtb	r3, r3
 800da22:	f003 0307 	and.w	r3, r3, #7
 800da26:	b2da      	uxtb	r2, r3
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da30:	0d9b      	lsrs	r3, r3, #22
 800da32:	b2db      	uxtb	r3, r3
 800da34:	f003 030f 	and.w	r3, r3, #15
 800da38:	b2da      	uxtb	r2, r3
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da42:	0d5b      	lsrs	r3, r3, #21
 800da44:	b2db      	uxtb	r3, r3
 800da46:	f003 0301 	and.w	r3, r3, #1
 800da4a:	b2da      	uxtb	r2, r3
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	2200      	movs	r2, #0
 800da56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da5e:	0c1b      	lsrs	r3, r3, #16
 800da60:	b2db      	uxtb	r3, r3
 800da62:	f003 0301 	and.w	r3, r3, #1
 800da66:	b2da      	uxtb	r2, r3
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da72:	0bdb      	lsrs	r3, r3, #15
 800da74:	b2db      	uxtb	r3, r3
 800da76:	f003 0301 	and.w	r3, r3, #1
 800da7a:	b2da      	uxtb	r2, r3
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da86:	0b9b      	lsrs	r3, r3, #14
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	f003 0301 	and.w	r3, r3, #1
 800da8e:	b2da      	uxtb	r2, r3
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da9a:	0b5b      	lsrs	r3, r3, #13
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	f003 0301 	and.w	r3, r3, #1
 800daa2:	b2da      	uxtb	r2, r3
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daae:	0b1b      	lsrs	r3, r3, #12
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	f003 0301 	and.w	r3, r3, #1
 800dab6:	b2da      	uxtb	r2, r3
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dac2:	0a9b      	lsrs	r3, r3, #10
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	f003 0303 	and.w	r3, r3, #3
 800daca:	b2da      	uxtb	r2, r3
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dad6:	0a1b      	lsrs	r3, r3, #8
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	f003 0303 	and.w	r3, r3, #3
 800dade:	b2da      	uxtb	r2, r3
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daea:	085b      	lsrs	r3, r3, #1
 800daec:	b2db      	uxtb	r3, r3
 800daee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daf2:	b2da      	uxtb	r2, r3
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	2201      	movs	r2, #1
 800dafe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800db02:	2300      	movs	r3, #0
}
 800db04:	4618      	mov	r0, r3
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr
 800db10:	004005ff 	.word	0x004005ff

0800db14 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800db14:	b480      	push	{r7}
 800db16:	b083      	sub	sp, #12
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db32:	683b      	ldr	r3, [r7, #0]
 800db34:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800db5e:	2300      	movs	r3, #0
}
 800db60:	4618      	mov	r0, r3
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr

0800db6c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800db6c:	b5b0      	push	{r4, r5, r7, lr}
 800db6e:	b08e      	sub	sp, #56	; 0x38
 800db70:	af04      	add	r7, sp, #16
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2203      	movs	r2, #3
 800db7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db82:	2b03      	cmp	r3, #3
 800db84:	d02e      	beq.n	800dbe4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db8c:	d106      	bne.n	800db9c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db92:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	639a      	str	r2, [r3, #56]	; 0x38
 800db9a:	e029      	b.n	800dbf0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dba2:	d10a      	bne.n	800dbba <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 fb0f 	bl	800e1c8 <SD_WideBus_Enable>
 800dbaa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb2:	431a      	orrs	r2, r3
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	639a      	str	r2, [r3, #56]	; 0x38
 800dbb8:	e01a      	b.n	800dbf0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d10a      	bne.n	800dbd6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 fb4c 	bl	800e25e <SD_WideBus_Disable>
 800dbc6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbce:	431a      	orrs	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	639a      	str	r2, [r3, #56]	; 0x38
 800dbd4:	e00c      	b.n	800dbf0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	639a      	str	r2, [r3, #56]	; 0x38
 800dbe2:	e005      	b.n	800dbf0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbe8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d009      	beq.n	800dc0c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	4a18      	ldr	r2, [pc, #96]	; (800dc60 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800dbfe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2201      	movs	r2, #1
 800dc04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	e024      	b.n	800dc56 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	689b      	ldr	r3, [r3, #8]
 800dc16:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	68db      	ldr	r3, [r3, #12]
 800dc1c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	695b      	ldr	r3, [r3, #20]
 800dc26:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	699b      	ldr	r3, [r3, #24]
 800dc2c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681d      	ldr	r5, [r3, #0]
 800dc32:	466c      	mov	r4, sp
 800dc34:	f107 0318 	add.w	r3, r7, #24
 800dc38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dc3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dc40:	f107 030c 	add.w	r3, r7, #12
 800dc44:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dc46:	4628      	mov	r0, r5
 800dc48:	f002 fcb2 	bl	80105b0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2201      	movs	r2, #1
 800dc50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3728      	adds	r7, #40	; 0x28
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bdb0      	pop	{r4, r5, r7, pc}
 800dc5e:	bf00      	nop
 800dc60:	004005ff 	.word	0x004005ff

0800dc64 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b086      	sub	sp, #24
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dc70:	f107 030c 	add.w	r3, r7, #12
 800dc74:	4619      	mov	r1, r3
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f000 fa7e 	bl	800e178 <SD_SendStatus>
 800dc7c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d005      	beq.n	800dc90 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	431a      	orrs	r2, r3
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	0a5b      	lsrs	r3, r3, #9
 800dc94:	f003 030f 	and.w	r3, r3, #15
 800dc98:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dc9a:	693b      	ldr	r3, [r7, #16]
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3718      	adds	r7, #24
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}

0800dca4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b085      	sub	sp, #20
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dcc0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800dcc2:	bf00      	nop
 800dcc4:	3714      	adds	r7, #20
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr

0800dcce <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b084      	sub	sp, #16
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcda:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dce0:	2b82      	cmp	r3, #130	; 0x82
 800dce2:	d111      	bne.n	800dd08 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4618      	mov	r0, r3
 800dcea:	f002 fde7 	bl	80108bc <SDMMC_CmdStopTransfer>
 800dcee:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d008      	beq.n	800dd08 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	431a      	orrs	r2, r3
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800dd02:	68f8      	ldr	r0, [r7, #12]
 800dd04:	f7ff fd58 	bl	800d7b8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f022 0208 	bic.w	r2, r2, #8
 800dd16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f240 523a 	movw	r2, #1338	; 0x53a
 800dd20:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2201      	movs	r2, #1
 800dd26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800dd30:	68f8      	ldr	r0, [r7, #12]
 800dd32:	f003 fa3f 	bl	80111b4 <HAL_SD_RxCpltCallback>
#endif
}
 800dd36:	bf00      	nop
 800dd38:	3710      	adds	r7, #16
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
	...

0800dd40 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b086      	sub	sp, #24
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd4c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f7fd f848 	bl	800ade4 <HAL_DMA_GetError>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b02      	cmp	r3, #2
 800dd58:	d03e      	beq.n	800ddd8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd60:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd68:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d002      	beq.n	800dd76 <SD_DMAError+0x36>
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d12d      	bne.n	800ddd2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4a19      	ldr	r2, [pc, #100]	; (800dde0 <SD_DMAError+0xa0>)
 800dd7c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dd8c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800dd9a:	6978      	ldr	r0, [r7, #20]
 800dd9c:	f7ff ff62 	bl	800dc64 <HAL_SD_GetCardState>
 800dda0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	2b06      	cmp	r3, #6
 800dda6:	d002      	beq.n	800ddae <SD_DMAError+0x6e>
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	2b05      	cmp	r3, #5
 800ddac:	d10a      	bne.n	800ddc4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f002 fd82 	bl	80108bc <SDMMC_CmdStopTransfer>
 800ddb8:	4602      	mov	r2, r0
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddbe:	431a      	orrs	r2, r3
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ddd2:	6978      	ldr	r0, [r7, #20]
 800ddd4:	f7ff fcf0 	bl	800d7b8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800ddd8:	bf00      	nop
 800ddda:	3718      	adds	r7, #24
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	004005ff 	.word	0x004005ff

0800dde4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddf0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f240 523a 	movw	r2, #1338	; 0x53a
 800ddfa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ddfc:	68f8      	ldr	r0, [r7, #12]
 800ddfe:	f7ff ff31 	bl	800dc64 <HAL_SD_GetCardState>
 800de02:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2201      	movs	r2, #1
 800de08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2200      	movs	r2, #0
 800de10:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	2b06      	cmp	r3, #6
 800de16:	d002      	beq.n	800de1e <SD_DMATxAbort+0x3a>
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	2b05      	cmp	r3, #5
 800de1c:	d10a      	bne.n	800de34 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	4618      	mov	r0, r3
 800de24:	f002 fd4a 	bl	80108bc <SDMMC_CmdStopTransfer>
 800de28:	4602      	mov	r2, r0
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de2e:	431a      	orrs	r2, r3
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d103      	bne.n	800de44 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	f003 f9a5 	bl	801118c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800de42:	e002      	b.n	800de4a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800de44:	68f8      	ldr	r0, [r7, #12]
 800de46:	f7ff fcb7 	bl	800d7b8 <HAL_SD_ErrorCallback>
}
 800de4a:	bf00      	nop
 800de4c:	3710      	adds	r7, #16
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}

0800de52 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800de52:	b580      	push	{r7, lr}
 800de54:	b084      	sub	sp, #16
 800de56:	af00      	add	r7, sp, #0
 800de58:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de5e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f240 523a 	movw	r2, #1338	; 0x53a
 800de68:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800de6a:	68f8      	ldr	r0, [r7, #12]
 800de6c:	f7ff fefa 	bl	800dc64 <HAL_SD_GetCardState>
 800de70:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2201      	movs	r2, #1
 800de76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2200      	movs	r2, #0
 800de7e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	2b06      	cmp	r3, #6
 800de84:	d002      	beq.n	800de8c <SD_DMARxAbort+0x3a>
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	2b05      	cmp	r3, #5
 800de8a:	d10a      	bne.n	800dea2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	4618      	mov	r0, r3
 800de92:	f002 fd13 	bl	80108bc <SDMMC_CmdStopTransfer>
 800de96:	4602      	mov	r2, r0
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de9c:	431a      	orrs	r2, r3
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d103      	bne.n	800deb2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800deaa:	68f8      	ldr	r0, [r7, #12]
 800deac:	f003 f96e 	bl	801118c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800deb0:	e002      	b.n	800deb8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f7ff fc80 	bl	800d7b8 <HAL_SD_ErrorCallback>
}
 800deb8:	bf00      	nop
 800deba:	3710      	adds	r7, #16
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dec0:	b5b0      	push	{r4, r5, r7, lr}
 800dec2:	b094      	sub	sp, #80	; 0x50
 800dec4:	af04      	add	r7, sp, #16
 800dec6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dec8:	2301      	movs	r3, #1
 800deca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4618      	mov	r0, r3
 800ded2:	f002 fbc5 	bl	8010660 <SDIO_GetPowerState>
 800ded6:	4603      	mov	r3, r0
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d102      	bne.n	800dee2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dedc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dee0:	e0b7      	b.n	800e052 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dee6:	2b03      	cmp	r3, #3
 800dee8:	d02f      	beq.n	800df4a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4618      	mov	r0, r3
 800def0:	f002 fdee 	bl	8010ad0 <SDMMC_CmdSendCID>
 800def4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800def6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800def8:	2b00      	cmp	r3, #0
 800defa:	d001      	beq.n	800df00 <SD_InitCard+0x40>
    {
      return errorstate;
 800defc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800defe:	e0a8      	b.n	800e052 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	2100      	movs	r1, #0
 800df06:	4618      	mov	r0, r3
 800df08:	f002 fbef 	bl	80106ea <SDIO_GetResponse>
 800df0c:	4602      	mov	r2, r0
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	2104      	movs	r1, #4
 800df18:	4618      	mov	r0, r3
 800df1a:	f002 fbe6 	bl	80106ea <SDIO_GetResponse>
 800df1e:	4602      	mov	r2, r0
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2108      	movs	r1, #8
 800df2a:	4618      	mov	r0, r3
 800df2c:	f002 fbdd 	bl	80106ea <SDIO_GetResponse>
 800df30:	4602      	mov	r2, r0
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	210c      	movs	r1, #12
 800df3c:	4618      	mov	r0, r3
 800df3e:	f002 fbd4 	bl	80106ea <SDIO_GetResponse>
 800df42:	4602      	mov	r2, r0
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df4e:	2b03      	cmp	r3, #3
 800df50:	d00d      	beq.n	800df6e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f107 020e 	add.w	r2, r7, #14
 800df5a:	4611      	mov	r1, r2
 800df5c:	4618      	mov	r0, r3
 800df5e:	f002 fdf4 	bl	8010b4a <SDMMC_CmdSetRelAdd>
 800df62:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800df64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df66:	2b00      	cmp	r3, #0
 800df68:	d001      	beq.n	800df6e <SD_InitCard+0xae>
    {
      return errorstate;
 800df6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df6c:	e071      	b.n	800e052 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df72:	2b03      	cmp	r3, #3
 800df74:	d036      	beq.n	800dfe4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800df76:	89fb      	ldrh	r3, [r7, #14]
 800df78:	461a      	mov	r2, r3
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df86:	041b      	lsls	r3, r3, #16
 800df88:	4619      	mov	r1, r3
 800df8a:	4610      	mov	r0, r2
 800df8c:	f002 fdbe 	bl	8010b0c <SDMMC_CmdSendCSD>
 800df90:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800df92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df94:	2b00      	cmp	r3, #0
 800df96:	d001      	beq.n	800df9c <SD_InitCard+0xdc>
    {
      return errorstate;
 800df98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df9a:	e05a      	b.n	800e052 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	2100      	movs	r1, #0
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f002 fba1 	bl	80106ea <SDIO_GetResponse>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	2104      	movs	r1, #4
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f002 fb98 	bl	80106ea <SDIO_GetResponse>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	2108      	movs	r1, #8
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f002 fb8f 	bl	80106ea <SDIO_GetResponse>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	210c      	movs	r1, #12
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f002 fb86 	bl	80106ea <SDIO_GetResponse>
 800dfde:	4602      	mov	r2, r0
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	2104      	movs	r1, #4
 800dfea:	4618      	mov	r0, r3
 800dfec:	f002 fb7d 	bl	80106ea <SDIO_GetResponse>
 800dff0:	4603      	mov	r3, r0
 800dff2:	0d1a      	lsrs	r2, r3, #20
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800dff8:	f107 0310 	add.w	r3, r7, #16
 800dffc:	4619      	mov	r1, r3
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f7ff fbe4 	bl	800d7cc <HAL_SD_GetCardCSD>
 800e004:	4603      	mov	r3, r0
 800e006:	2b00      	cmp	r3, #0
 800e008:	d002      	beq.n	800e010 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e00a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e00e:	e020      	b.n	800e052 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6819      	ldr	r1, [r3, #0]
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e018:	041b      	lsls	r3, r3, #16
 800e01a:	f04f 0400 	mov.w	r4, #0
 800e01e:	461a      	mov	r2, r3
 800e020:	4623      	mov	r3, r4
 800e022:	4608      	mov	r0, r1
 800e024:	f002 fc6c 	bl	8010900 <SDMMC_CmdSelDesel>
 800e028:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d001      	beq.n	800e034 <SD_InitCard+0x174>
  {
    return errorstate;
 800e030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e032:	e00e      	b.n	800e052 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681d      	ldr	r5, [r3, #0]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	466c      	mov	r4, sp
 800e03c:	f103 0210 	add.w	r2, r3, #16
 800e040:	ca07      	ldmia	r2, {r0, r1, r2}
 800e042:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e046:	3304      	adds	r3, #4
 800e048:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e04a:	4628      	mov	r0, r5
 800e04c:	f002 fab0 	bl	80105b0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e050:	2300      	movs	r3, #0
}
 800e052:	4618      	mov	r0, r3
 800e054:	3740      	adds	r7, #64	; 0x40
 800e056:	46bd      	mov	sp, r7
 800e058:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e05c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b086      	sub	sp, #24
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e064:	2300      	movs	r3, #0
 800e066:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e068:	2300      	movs	r3, #0
 800e06a:	617b      	str	r3, [r7, #20]
 800e06c:	2300      	movs	r3, #0
 800e06e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	4618      	mov	r0, r3
 800e076:	f002 fc66 	bl	8010946 <SDMMC_CmdGoIdleState>
 800e07a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d001      	beq.n	800e086 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	e072      	b.n	800e16c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	4618      	mov	r0, r3
 800e08c:	f002 fc79 	bl	8010982 <SDMMC_CmdOperCond>
 800e090:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d00d      	beq.n	800e0b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2200      	movs	r2, #0
 800e09c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f002 fc4f 	bl	8010946 <SDMMC_CmdGoIdleState>
 800e0a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d004      	beq.n	800e0ba <SD_PowerON+0x5e>
    {
      return errorstate;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	e05b      	b.n	800e16c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d137      	bne.n	800e132 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	2100      	movs	r1, #0
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f002 fc79 	bl	80109c0 <SDMMC_CmdAppCommand>
 800e0ce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d02d      	beq.n	800e132 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e0d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e0da:	e047      	b.n	800e16c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2100      	movs	r1, #0
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f002 fc6c 	bl	80109c0 <SDMMC_CmdAppCommand>
 800e0e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d001      	beq.n	800e0f4 <SD_PowerON+0x98>
    {
      return errorstate;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	e03b      	b.n	800e16c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	491e      	ldr	r1, [pc, #120]	; (800e174 <SD_PowerON+0x118>)
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f002 fc82 	bl	8010a04 <SDMMC_CmdAppOperCommand>
 800e100:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d002      	beq.n	800e10e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e108:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e10c:	e02e      	b.n	800e16c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	2100      	movs	r1, #0
 800e114:	4618      	mov	r0, r3
 800e116:	f002 fae8 	bl	80106ea <SDIO_GetResponse>
 800e11a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	0fdb      	lsrs	r3, r3, #31
 800e120:	2b01      	cmp	r3, #1
 800e122:	d101      	bne.n	800e128 <SD_PowerON+0xcc>
 800e124:	2301      	movs	r3, #1
 800e126:	e000      	b.n	800e12a <SD_PowerON+0xce>
 800e128:	2300      	movs	r3, #0
 800e12a:	613b      	str	r3, [r7, #16]

    count++;
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	3301      	adds	r3, #1
 800e130:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e138:	4293      	cmp	r3, r2
 800e13a:	d802      	bhi.n	800e142 <SD_PowerON+0xe6>
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d0cc      	beq.n	800e0dc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e148:	4293      	cmp	r3, r2
 800e14a:	d902      	bls.n	800e152 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e14c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e150:	e00c      	b.n	800e16c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d003      	beq.n	800e164 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2201      	movs	r2, #1
 800e160:	645a      	str	r2, [r3, #68]	; 0x44
 800e162:	e002      	b.n	800e16a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2200      	movs	r2, #0
 800e168:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e16a:	2300      	movs	r3, #0
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3718      	adds	r7, #24
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}
 800e174:	c1100000 	.word	0xc1100000

0800e178 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b084      	sub	sp, #16
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d102      	bne.n	800e18e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e18c:	e018      	b.n	800e1c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	681a      	ldr	r2, [r3, #0]
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e196:	041b      	lsls	r3, r3, #16
 800e198:	4619      	mov	r1, r3
 800e19a:	4610      	mov	r0, r2
 800e19c:	f002 fcf6 	bl	8010b8c <SDMMC_CmdSendStatus>
 800e1a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d001      	beq.n	800e1ac <SD_SendStatus+0x34>
  {
    return errorstate;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	e009      	b.n	800e1c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f002 fa99 	bl	80106ea <SDIO_GetResponse>
 800e1b8:	4602      	mov	r2, r0
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e1be:	2300      	movs	r3, #0
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3710      	adds	r7, #16
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b086      	sub	sp, #24
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	60fb      	str	r3, [r7, #12]
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2100      	movs	r1, #0
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f002 fa83 	bl	80106ea <SDIO_GetResponse>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1ee:	d102      	bne.n	800e1f6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e1f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e1f4:	e02f      	b.n	800e256 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e1f6:	f107 030c 	add.w	r3, r7, #12
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f000 f879 	bl	800e2f4 <SD_FindSCR>
 800e202:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d001      	beq.n	800e20e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	e023      	b.n	800e256 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e214:	2b00      	cmp	r3, #0
 800e216:	d01c      	beq.n	800e252 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e220:	041b      	lsls	r3, r3, #16
 800e222:	4619      	mov	r1, r3
 800e224:	4610      	mov	r0, r2
 800e226:	f002 fbcb 	bl	80109c0 <SDMMC_CmdAppCommand>
 800e22a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d001      	beq.n	800e236 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	e00f      	b.n	800e256 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	2102      	movs	r1, #2
 800e23c:	4618      	mov	r0, r3
 800e23e:	f002 fc04 	bl	8010a4a <SDMMC_CmdBusWidth>
 800e242:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d001      	beq.n	800e24e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	e003      	b.n	800e256 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e24e:	2300      	movs	r3, #0
 800e250:	e001      	b.n	800e256 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e252:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e256:	4618      	mov	r0, r3
 800e258:	3718      	adds	r7, #24
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}

0800e25e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e25e:	b580      	push	{r7, lr}
 800e260:	b086      	sub	sp, #24
 800e262:	af00      	add	r7, sp, #0
 800e264:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e266:	2300      	movs	r3, #0
 800e268:	60fb      	str	r3, [r7, #12]
 800e26a:	2300      	movs	r3, #0
 800e26c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	2100      	movs	r1, #0
 800e274:	4618      	mov	r0, r3
 800e276:	f002 fa38 	bl	80106ea <SDIO_GetResponse>
 800e27a:	4603      	mov	r3, r0
 800e27c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e280:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e284:	d102      	bne.n	800e28c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e286:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e28a:	e02f      	b.n	800e2ec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e28c:	f107 030c 	add.w	r3, r7, #12
 800e290:	4619      	mov	r1, r3
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f000 f82e 	bl	800e2f4 <SD_FindSCR>
 800e298:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d001      	beq.n	800e2a4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	e023      	b.n	800e2ec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d01c      	beq.n	800e2e8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681a      	ldr	r2, [r3, #0]
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2b6:	041b      	lsls	r3, r3, #16
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	4610      	mov	r0, r2
 800e2bc:	f002 fb80 	bl	80109c0 <SDMMC_CmdAppCommand>
 800e2c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d001      	beq.n	800e2cc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	e00f      	b.n	800e2ec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	2100      	movs	r1, #0
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f002 fbb9 	bl	8010a4a <SDMMC_CmdBusWidth>
 800e2d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d001      	beq.n	800e2e4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	e003      	b.n	800e2ec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	e001      	b.n	800e2ec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e2e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3718      	adds	r7, #24
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e2f4:	b590      	push	{r4, r7, lr}
 800e2f6:	b08f      	sub	sp, #60	; 0x3c
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e2fe:	f7fb fd7b 	bl	8009df8 <HAL_GetTick>
 800e302:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e304:	2300      	movs	r3, #0
 800e306:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e308:	2300      	movs	r3, #0
 800e30a:	60bb      	str	r3, [r7, #8]
 800e30c:	2300      	movs	r3, #0
 800e30e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	2108      	movs	r1, #8
 800e31a:	4618      	mov	r0, r3
 800e31c:	f002 fa24 	bl	8010768 <SDMMC_CmdBlockLength>
 800e320:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e324:	2b00      	cmp	r3, #0
 800e326:	d001      	beq.n	800e32c <SD_FindSCR+0x38>
  {
    return errorstate;
 800e328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32a:	e0a9      	b.n	800e480 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e334:	041b      	lsls	r3, r3, #16
 800e336:	4619      	mov	r1, r3
 800e338:	4610      	mov	r0, r2
 800e33a:	f002 fb41 	bl	80109c0 <SDMMC_CmdAppCommand>
 800e33e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e342:	2b00      	cmp	r3, #0
 800e344:	d001      	beq.n	800e34a <SD_FindSCR+0x56>
  {
    return errorstate;
 800e346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e348:	e09a      	b.n	800e480 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e34a:	f04f 33ff 	mov.w	r3, #4294967295
 800e34e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e350:	2308      	movs	r3, #8
 800e352:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e354:	2330      	movs	r3, #48	; 0x30
 800e356:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e358:	2302      	movs	r3, #2
 800e35a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e35c:	2300      	movs	r3, #0
 800e35e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e360:	2301      	movs	r3, #1
 800e362:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f107 0210 	add.w	r2, r7, #16
 800e36c:	4611      	mov	r1, r2
 800e36e:	4618      	mov	r0, r3
 800e370:	f002 f9ce 	bl	8010710 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4618      	mov	r0, r3
 800e37a:	f002 fb88 	bl	8010a8e <SDMMC_CmdSendSCR>
 800e37e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e382:	2b00      	cmp	r3, #0
 800e384:	d022      	beq.n	800e3cc <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e388:	e07a      	b.n	800e480 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00e      	beq.n	800e3b6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6819      	ldr	r1, [r3, #0]
 800e39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e39e:	009b      	lsls	r3, r3, #2
 800e3a0:	f107 0208 	add.w	r2, r7, #8
 800e3a4:	18d4      	adds	r4, r2, r3
 800e3a6:	4608      	mov	r0, r1
 800e3a8:	f002 f92d 	bl	8010606 <SDIO_ReadFIFO>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	6023      	str	r3, [r4, #0]
      index++;
 800e3b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e3b6:	f7fb fd1f 	bl	8009df8 <HAL_GetTick>
 800e3ba:	4602      	mov	r2, r0
 800e3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3be:	1ad3      	subs	r3, r2, r3
 800e3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3c4:	d102      	bne.n	800e3cc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e3c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3ca:	e059      	b.n	800e480 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3d2:	f240 432a 	movw	r3, #1066	; 0x42a
 800e3d6:	4013      	ands	r3, r2
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d0d6      	beq.n	800e38a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3e2:	f003 0308 	and.w	r3, r3, #8
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d005      	beq.n	800e3f6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	2208      	movs	r2, #8
 800e3f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e3f2:	2308      	movs	r3, #8
 800e3f4:	e044      	b.n	800e480 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3fc:	f003 0302 	and.w	r3, r3, #2
 800e400:	2b00      	cmp	r3, #0
 800e402:	d005      	beq.n	800e410 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	2202      	movs	r2, #2
 800e40a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e40c:	2302      	movs	r3, #2
 800e40e:	e037      	b.n	800e480 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e416:	f003 0320 	and.w	r3, r3, #32
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d005      	beq.n	800e42a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	2220      	movs	r2, #32
 800e424:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e426:	2320      	movs	r3, #32
 800e428:	e02a      	b.n	800e480 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f240 523a 	movw	r2, #1338	; 0x53a
 800e432:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	061a      	lsls	r2, r3, #24
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	021b      	lsls	r3, r3, #8
 800e43c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e440:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	0a1b      	lsrs	r3, r3, #8
 800e446:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e44a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	0e1b      	lsrs	r3, r3, #24
 800e450:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e454:	601a      	str	r2, [r3, #0]
    scr++;
 800e456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e458:	3304      	adds	r3, #4
 800e45a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	061a      	lsls	r2, r3, #24
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	021b      	lsls	r3, r3, #8
 800e464:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e468:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	0a1b      	lsrs	r3, r3, #8
 800e46e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e472:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	0e1b      	lsrs	r3, r3, #24
 800e478:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e47e:	2300      	movs	r3, #0
}
 800e480:	4618      	mov	r0, r3
 800e482:	373c      	adds	r7, #60	; 0x3c
 800e484:	46bd      	mov	sp, r7
 800e486:	bd90      	pop	{r4, r7, pc}

0800e488 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b086      	sub	sp, #24
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e494:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e49a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e49c:	693b      	ldr	r3, [r7, #16]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d03f      	beq.n	800e522 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	617b      	str	r3, [r7, #20]
 800e4a6:	e033      	b.n	800e510 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4618      	mov	r0, r3
 800e4ae:	f002 f8aa 	bl	8010606 <SDIO_ReadFIFO>
 800e4b2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	b2da      	uxtb	r2, r3
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	3301      	adds	r3, #1
 800e4c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	3b01      	subs	r3, #1
 800e4c6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	0a1b      	lsrs	r3, r3, #8
 800e4cc:	b2da      	uxtb	r2, r3
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	3301      	adds	r3, #1
 800e4d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	3b01      	subs	r3, #1
 800e4dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	0c1b      	lsrs	r3, r3, #16
 800e4e2:	b2da      	uxtb	r2, r3
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	3b01      	subs	r3, #1
 800e4f2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	0e1b      	lsrs	r3, r3, #24
 800e4f8:	b2da      	uxtb	r2, r3
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	3301      	adds	r3, #1
 800e502:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	3b01      	subs	r3, #1
 800e508:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	3301      	adds	r3, #1
 800e50e:	617b      	str	r3, [r7, #20]
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	2b07      	cmp	r3, #7
 800e514:	d9c8      	bls.n	800e4a8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	68fa      	ldr	r2, [r7, #12]
 800e51a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	693a      	ldr	r2, [r7, #16]
 800e520:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e522:	bf00      	nop
 800e524:	3718      	adds	r7, #24
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}

0800e52a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e52a:	b580      	push	{r7, lr}
 800e52c:	b086      	sub	sp, #24
 800e52e:	af00      	add	r7, sp, #0
 800e530:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6a1b      	ldr	r3, [r3, #32]
 800e536:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e53c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d043      	beq.n	800e5cc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e544:	2300      	movs	r3, #0
 800e546:	617b      	str	r3, [r7, #20]
 800e548:	e037      	b.n	800e5ba <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	3301      	adds	r3, #1
 800e554:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	3b01      	subs	r3, #1
 800e55a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	021a      	lsls	r2, r3, #8
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	4313      	orrs	r3, r2
 800e566:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	3301      	adds	r3, #1
 800e56c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	3b01      	subs	r3, #1
 800e572:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	041a      	lsls	r2, r3, #16
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	4313      	orrs	r3, r2
 800e57e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	3301      	adds	r3, #1
 800e584:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	3b01      	subs	r3, #1
 800e58a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	781b      	ldrb	r3, [r3, #0]
 800e590:	061a      	lsls	r2, r3, #24
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	4313      	orrs	r3, r2
 800e596:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	3301      	adds	r3, #1
 800e59c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	3b01      	subs	r3, #1
 800e5a2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f107 0208 	add.w	r2, r7, #8
 800e5ac:	4611      	mov	r1, r2
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f002 f836 	bl	8010620 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	617b      	str	r3, [r7, #20]
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	2b07      	cmp	r3, #7
 800e5be:	d9c4      	bls.n	800e54a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	68fa      	ldr	r2, [r7, #12]
 800e5c4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	693a      	ldr	r2, [r7, #16]
 800e5ca:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e5cc:	bf00      	nop
 800e5ce:	3718      	adds	r7, #24
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}

0800e5d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b082      	sub	sp, #8
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d101      	bne.n	800e5e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	e056      	b.n	800e694 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d106      	bne.n	800e606 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f7f8 fe9b 	bl	800733c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2202      	movs	r2, #2
 800e60a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	681a      	ldr	r2, [r3, #0]
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e61c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	685a      	ldr	r2, [r3, #4]
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	689b      	ldr	r3, [r3, #8]
 800e626:	431a      	orrs	r2, r3
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	431a      	orrs	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	691b      	ldr	r3, [r3, #16]
 800e632:	431a      	orrs	r2, r3
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	695b      	ldr	r3, [r3, #20]
 800e638:	431a      	orrs	r2, r3
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	699b      	ldr	r3, [r3, #24]
 800e63e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e642:	431a      	orrs	r2, r3
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	69db      	ldr	r3, [r3, #28]
 800e648:	431a      	orrs	r2, r3
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6a1b      	ldr	r3, [r3, #32]
 800e64e:	ea42 0103 	orr.w	r1, r2, r3
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	430a      	orrs	r2, r1
 800e65c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	699b      	ldr	r3, [r3, #24]
 800e662:	0c1b      	lsrs	r3, r3, #16
 800e664:	f003 0104 	and.w	r1, r3, #4
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	430a      	orrs	r2, r1
 800e672:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	69da      	ldr	r2, [r3, #28]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e682:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2201      	movs	r2, #1
 800e68e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e692:	2300      	movs	r3, #0
}
 800e694:	4618      	mov	r0, r3
 800e696:	3708      	adds	r7, #8
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}

0800e69c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b088      	sub	sp, #32
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	603b      	str	r3, [r7, #0]
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	d101      	bne.n	800e6be <HAL_SPI_Transmit+0x22>
 800e6ba:	2302      	movs	r3, #2
 800e6bc:	e11e      	b.n	800e8fc <HAL_SPI_Transmit+0x260>
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e6c6:	f7fb fb97 	bl	8009df8 <HAL_GetTick>
 800e6ca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e6cc:	88fb      	ldrh	r3, [r7, #6]
 800e6ce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e6d6:	b2db      	uxtb	r3, r3
 800e6d8:	2b01      	cmp	r3, #1
 800e6da:	d002      	beq.n	800e6e2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e6dc:	2302      	movs	r3, #2
 800e6de:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e6e0:	e103      	b.n	800e8ea <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d002      	beq.n	800e6ee <HAL_SPI_Transmit+0x52>
 800e6e8:	88fb      	ldrh	r3, [r7, #6]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d102      	bne.n	800e6f4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e6f2:	e0fa      	b.n	800e8ea <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2203      	movs	r2, #3
 800e6f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	2200      	movs	r2, #0
 800e700:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	68ba      	ldr	r2, [r7, #8]
 800e706:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	88fa      	ldrh	r2, [r7, #6]
 800e70c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	88fa      	ldrh	r2, [r7, #6]
 800e712:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2200      	movs	r2, #0
 800e718:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2200      	movs	r2, #0
 800e71e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	2200      	movs	r2, #0
 800e724:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	2200      	movs	r2, #0
 800e72a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2200      	movs	r2, #0
 800e730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	689b      	ldr	r3, [r3, #8]
 800e736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e73a:	d107      	bne.n	800e74c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e74a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e756:	2b40      	cmp	r3, #64	; 0x40
 800e758:	d007      	beq.n	800e76a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e768:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	68db      	ldr	r3, [r3, #12]
 800e76e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e772:	d14b      	bne.n	800e80c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d002      	beq.n	800e782 <HAL_SPI_Transmit+0xe6>
 800e77c:	8afb      	ldrh	r3, [r7, #22]
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d13e      	bne.n	800e800 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e786:	881a      	ldrh	r2, [r3, #0]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e792:	1c9a      	adds	r2, r3, #2
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e79c:	b29b      	uxth	r3, r3
 800e79e:	3b01      	subs	r3, #1
 800e7a0:	b29a      	uxth	r2, r3
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e7a6:	e02b      	b.n	800e800 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	689b      	ldr	r3, [r3, #8]
 800e7ae:	f003 0302 	and.w	r3, r3, #2
 800e7b2:	2b02      	cmp	r3, #2
 800e7b4:	d112      	bne.n	800e7dc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ba:	881a      	ldrh	r2, [r3, #0]
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7c6:	1c9a      	adds	r2, r3, #2
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	3b01      	subs	r3, #1
 800e7d4:	b29a      	uxth	r2, r3
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	86da      	strh	r2, [r3, #54]	; 0x36
 800e7da:	e011      	b.n	800e800 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7dc:	f7fb fb0c 	bl	8009df8 <HAL_GetTick>
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	1ad3      	subs	r3, r2, r3
 800e7e6:	683a      	ldr	r2, [r7, #0]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d803      	bhi.n	800e7f4 <HAL_SPI_Transmit+0x158>
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7f2:	d102      	bne.n	800e7fa <HAL_SPI_Transmit+0x15e>
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d102      	bne.n	800e800 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e7fa:	2303      	movs	r3, #3
 800e7fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e7fe:	e074      	b.n	800e8ea <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e804:	b29b      	uxth	r3, r3
 800e806:	2b00      	cmp	r3, #0
 800e808:	d1ce      	bne.n	800e7a8 <HAL_SPI_Transmit+0x10c>
 800e80a:	e04c      	b.n	800e8a6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d002      	beq.n	800e81a <HAL_SPI_Transmit+0x17e>
 800e814:	8afb      	ldrh	r3, [r7, #22]
 800e816:	2b01      	cmp	r3, #1
 800e818:	d140      	bne.n	800e89c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	330c      	adds	r3, #12
 800e824:	7812      	ldrb	r2, [r2, #0]
 800e826:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e82c:	1c5a      	adds	r2, r3, #1
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e836:	b29b      	uxth	r3, r3
 800e838:	3b01      	subs	r3, #1
 800e83a:	b29a      	uxth	r2, r3
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e840:	e02c      	b.n	800e89c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	689b      	ldr	r3, [r3, #8]
 800e848:	f003 0302 	and.w	r3, r3, #2
 800e84c:	2b02      	cmp	r3, #2
 800e84e:	d113      	bne.n	800e878 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	330c      	adds	r3, #12
 800e85a:	7812      	ldrb	r2, [r2, #0]
 800e85c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e862:	1c5a      	adds	r2, r3, #1
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e86c:	b29b      	uxth	r3, r3
 800e86e:	3b01      	subs	r3, #1
 800e870:	b29a      	uxth	r2, r3
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	86da      	strh	r2, [r3, #54]	; 0x36
 800e876:	e011      	b.n	800e89c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e878:	f7fb fabe 	bl	8009df8 <HAL_GetTick>
 800e87c:	4602      	mov	r2, r0
 800e87e:	69bb      	ldr	r3, [r7, #24]
 800e880:	1ad3      	subs	r3, r2, r3
 800e882:	683a      	ldr	r2, [r7, #0]
 800e884:	429a      	cmp	r2, r3
 800e886:	d803      	bhi.n	800e890 <HAL_SPI_Transmit+0x1f4>
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e88e:	d102      	bne.n	800e896 <HAL_SPI_Transmit+0x1fa>
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d102      	bne.n	800e89c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e896:	2303      	movs	r3, #3
 800e898:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e89a:	e026      	b.n	800e8ea <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d1cd      	bne.n	800e842 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e8a6:	69ba      	ldr	r2, [r7, #24]
 800e8a8:	6839      	ldr	r1, [r7, #0]
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	f000 fba4 	bl	800eff8 <SPI_EndRxTxTransaction>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d002      	beq.n	800e8bc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2220      	movs	r2, #32
 800e8ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	689b      	ldr	r3, [r3, #8]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d10a      	bne.n	800e8da <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	613b      	str	r3, [r7, #16]
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	68db      	ldr	r3, [r3, #12]
 800e8ce:	613b      	str	r3, [r7, #16]
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	689b      	ldr	r3, [r3, #8]
 800e8d6:	613b      	str	r3, [r7, #16]
 800e8d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d002      	beq.n	800e8e8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	77fb      	strb	r3, [r7, #31]
 800e8e6:	e000      	b.n	800e8ea <HAL_SPI_Transmit+0x24e>
  }

error:
 800e8e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e8fa:	7ffb      	ldrb	r3, [r7, #31]
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3720      	adds	r7, #32
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b088      	sub	sp, #32
 800e908:	af02      	add	r7, sp, #8
 800e90a:	60f8      	str	r0, [r7, #12]
 800e90c:	60b9      	str	r1, [r7, #8]
 800e90e:	603b      	str	r3, [r7, #0]
 800e910:	4613      	mov	r3, r2
 800e912:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e914:	2300      	movs	r3, #0
 800e916:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	685b      	ldr	r3, [r3, #4]
 800e91c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e920:	d112      	bne.n	800e948 <HAL_SPI_Receive+0x44>
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	689b      	ldr	r3, [r3, #8]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d10e      	bne.n	800e948 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2204      	movs	r2, #4
 800e92e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e932:	88fa      	ldrh	r2, [r7, #6]
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	9300      	str	r3, [sp, #0]
 800e938:	4613      	mov	r3, r2
 800e93a:	68ba      	ldr	r2, [r7, #8]
 800e93c:	68b9      	ldr	r1, [r7, #8]
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	f000 f8e9 	bl	800eb16 <HAL_SPI_TransmitReceive>
 800e944:	4603      	mov	r3, r0
 800e946:	e0e2      	b.n	800eb0e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d101      	bne.n	800e956 <HAL_SPI_Receive+0x52>
 800e952:	2302      	movs	r3, #2
 800e954:	e0db      	b.n	800eb0e <HAL_SPI_Receive+0x20a>
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2201      	movs	r2, #1
 800e95a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e95e:	f7fb fa4b 	bl	8009df8 <HAL_GetTick>
 800e962:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e96a:	b2db      	uxtb	r3, r3
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	d002      	beq.n	800e976 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e970:	2302      	movs	r3, #2
 800e972:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e974:	e0c2      	b.n	800eafc <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d002      	beq.n	800e982 <HAL_SPI_Receive+0x7e>
 800e97c:	88fb      	ldrh	r3, [r7, #6]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d102      	bne.n	800e988 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e982:	2301      	movs	r3, #1
 800e984:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e986:	e0b9      	b.n	800eafc <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	2204      	movs	r2, #4
 800e98c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2200      	movs	r2, #0
 800e994:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	68ba      	ldr	r2, [r7, #8]
 800e99a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	88fa      	ldrh	r2, [r7, #6]
 800e9a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	88fa      	ldrh	r2, [r7, #6]
 800e9a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	689b      	ldr	r3, [r3, #8]
 800e9ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9ce:	d107      	bne.n	800e9e0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	681a      	ldr	r2, [r3, #0]
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e9de:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9ea:	2b40      	cmp	r3, #64	; 0x40
 800e9ec:	d007      	beq.n	800e9fe <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	681a      	ldr	r2, [r3, #0]
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e9fc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	68db      	ldr	r3, [r3, #12]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d162      	bne.n	800eacc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ea06:	e02e      	b.n	800ea66 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	689b      	ldr	r3, [r3, #8]
 800ea0e:	f003 0301 	and.w	r3, r3, #1
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d115      	bne.n	800ea42 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f103 020c 	add.w	r2, r3, #12
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea22:	7812      	ldrb	r2, [r2, #0]
 800ea24:	b2d2      	uxtb	r2, r2
 800ea26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea2c:	1c5a      	adds	r2, r3, #1
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	3b01      	subs	r3, #1
 800ea3a:	b29a      	uxth	r2, r3
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ea40:	e011      	b.n	800ea66 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea42:	f7fb f9d9 	bl	8009df8 <HAL_GetTick>
 800ea46:	4602      	mov	r2, r0
 800ea48:	693b      	ldr	r3, [r7, #16]
 800ea4a:	1ad3      	subs	r3, r2, r3
 800ea4c:	683a      	ldr	r2, [r7, #0]
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d803      	bhi.n	800ea5a <HAL_SPI_Receive+0x156>
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea58:	d102      	bne.n	800ea60 <HAL_SPI_Receive+0x15c>
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d102      	bne.n	800ea66 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800ea60:	2303      	movs	r3, #3
 800ea62:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ea64:	e04a      	b.n	800eafc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea6a:	b29b      	uxth	r3, r3
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d1cb      	bne.n	800ea08 <HAL_SPI_Receive+0x104>
 800ea70:	e031      	b.n	800ead6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	689b      	ldr	r3, [r3, #8]
 800ea78:	f003 0301 	and.w	r3, r3, #1
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	d113      	bne.n	800eaa8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	68da      	ldr	r2, [r3, #12]
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea8a:	b292      	uxth	r2, r2
 800ea8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea92:	1c9a      	adds	r2, r3, #2
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea9c:	b29b      	uxth	r3, r3
 800ea9e:	3b01      	subs	r3, #1
 800eaa0:	b29a      	uxth	r2, r3
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eaa6:	e011      	b.n	800eacc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eaa8:	f7fb f9a6 	bl	8009df8 <HAL_GetTick>
 800eaac:	4602      	mov	r2, r0
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	1ad3      	subs	r3, r2, r3
 800eab2:	683a      	ldr	r2, [r7, #0]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d803      	bhi.n	800eac0 <HAL_SPI_Receive+0x1bc>
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eabe:	d102      	bne.n	800eac6 <HAL_SPI_Receive+0x1c2>
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d102      	bne.n	800eacc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800eac6:	2303      	movs	r3, #3
 800eac8:	75fb      	strb	r3, [r7, #23]
          goto error;
 800eaca:	e017      	b.n	800eafc <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d1cd      	bne.n	800ea72 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ead6:	693a      	ldr	r2, [r7, #16]
 800ead8:	6839      	ldr	r1, [r7, #0]
 800eada:	68f8      	ldr	r0, [r7, #12]
 800eadc:	f000 fa27 	bl	800ef2e <SPI_EndRxTransaction>
 800eae0:	4603      	mov	r3, r0
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d002      	beq.n	800eaec <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2220      	movs	r2, #32
 800eaea:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d002      	beq.n	800eafa <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	75fb      	strb	r3, [r7, #23]
 800eaf8:	e000      	b.n	800eafc <HAL_SPI_Receive+0x1f8>
  }

error :
 800eafa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	2201      	movs	r2, #1
 800eb00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	2200      	movs	r2, #0
 800eb08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800eb0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	3718      	adds	r7, #24
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd80      	pop	{r7, pc}

0800eb16 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800eb16:	b580      	push	{r7, lr}
 800eb18:	b08c      	sub	sp, #48	; 0x30
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	60f8      	str	r0, [r7, #12]
 800eb1e:	60b9      	str	r1, [r7, #8]
 800eb20:	607a      	str	r2, [r7, #4]
 800eb22:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800eb24:	2301      	movs	r3, #1
 800eb26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eb34:	2b01      	cmp	r3, #1
 800eb36:	d101      	bne.n	800eb3c <HAL_SPI_TransmitReceive+0x26>
 800eb38:	2302      	movs	r3, #2
 800eb3a:	e18a      	b.n	800ee52 <HAL_SPI_TransmitReceive+0x33c>
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	2201      	movs	r2, #1
 800eb40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb44:	f7fb f958 	bl	8009df8 <HAL_GetTick>
 800eb48:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eb50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800eb5a:	887b      	ldrh	r3, [r7, #2]
 800eb5c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800eb5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb62:	2b01      	cmp	r3, #1
 800eb64:	d00f      	beq.n	800eb86 <HAL_SPI_TransmitReceive+0x70>
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb6c:	d107      	bne.n	800eb7e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	689b      	ldr	r3, [r3, #8]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d103      	bne.n	800eb7e <HAL_SPI_TransmitReceive+0x68>
 800eb76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb7a:	2b04      	cmp	r3, #4
 800eb7c:	d003      	beq.n	800eb86 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800eb7e:	2302      	movs	r3, #2
 800eb80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800eb84:	e15b      	b.n	800ee3e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d005      	beq.n	800eb98 <HAL_SPI_TransmitReceive+0x82>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d002      	beq.n	800eb98 <HAL_SPI_TransmitReceive+0x82>
 800eb92:	887b      	ldrh	r3, [r7, #2]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d103      	bne.n	800eba0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800eb98:	2301      	movs	r3, #1
 800eb9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800eb9e:	e14e      	b.n	800ee3e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eba6:	b2db      	uxtb	r3, r3
 800eba8:	2b04      	cmp	r3, #4
 800ebaa:	d003      	beq.n	800ebb4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2205      	movs	r2, #5
 800ebb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	687a      	ldr	r2, [r7, #4]
 800ebbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	887a      	ldrh	r2, [r7, #2]
 800ebc4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	887a      	ldrh	r2, [r7, #2]
 800ebca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	68ba      	ldr	r2, [r7, #8]
 800ebd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	887a      	ldrh	r2, [r7, #2]
 800ebd6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	887a      	ldrh	r2, [r7, #2]
 800ebdc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebf4:	2b40      	cmp	r3, #64	; 0x40
 800ebf6:	d007      	beq.n	800ec08 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	681a      	ldr	r2, [r3, #0]
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	68db      	ldr	r3, [r3, #12]
 800ec0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec10:	d178      	bne.n	800ed04 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	685b      	ldr	r3, [r3, #4]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d002      	beq.n	800ec20 <HAL_SPI_TransmitReceive+0x10a>
 800ec1a:	8b7b      	ldrh	r3, [r7, #26]
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d166      	bne.n	800ecee <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec24:	881a      	ldrh	r2, [r3, #0]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec30:	1c9a      	adds	r2, r3, #2
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec3a:	b29b      	uxth	r3, r3
 800ec3c:	3b01      	subs	r3, #1
 800ec3e:	b29a      	uxth	r2, r3
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec44:	e053      	b.n	800ecee <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	689b      	ldr	r3, [r3, #8]
 800ec4c:	f003 0302 	and.w	r3, r3, #2
 800ec50:	2b02      	cmp	r3, #2
 800ec52:	d11b      	bne.n	800ec8c <HAL_SPI_TransmitReceive+0x176>
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec58:	b29b      	uxth	r3, r3
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d016      	beq.n	800ec8c <HAL_SPI_TransmitReceive+0x176>
 800ec5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec60:	2b01      	cmp	r3, #1
 800ec62:	d113      	bne.n	800ec8c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec68:	881a      	ldrh	r2, [r3, #0]
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec74:	1c9a      	adds	r2, r3, #2
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec7e:	b29b      	uxth	r3, r3
 800ec80:	3b01      	subs	r3, #1
 800ec82:	b29a      	uxth	r2, r3
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ec88:	2300      	movs	r3, #0
 800ec8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	689b      	ldr	r3, [r3, #8]
 800ec92:	f003 0301 	and.w	r3, r3, #1
 800ec96:	2b01      	cmp	r3, #1
 800ec98:	d119      	bne.n	800ecce <HAL_SPI_TransmitReceive+0x1b8>
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d014      	beq.n	800ecce <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	68da      	ldr	r2, [r3, #12]
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecae:	b292      	uxth	r2, r2
 800ecb0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecb6:	1c9a      	adds	r2, r3, #2
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecc0:	b29b      	uxth	r3, r3
 800ecc2:	3b01      	subs	r3, #1
 800ecc4:	b29a      	uxth	r2, r3
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ecca:	2301      	movs	r3, #1
 800eccc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ecce:	f7fb f893 	bl	8009df8 <HAL_GetTick>
 800ecd2:	4602      	mov	r2, r0
 800ecd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd6:	1ad3      	subs	r3, r2, r3
 800ecd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d807      	bhi.n	800ecee <HAL_SPI_TransmitReceive+0x1d8>
 800ecde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ece4:	d003      	beq.n	800ecee <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ece6:	2303      	movs	r3, #3
 800ece8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ecec:	e0a7      	b.n	800ee3e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ecf2:	b29b      	uxth	r3, r3
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d1a6      	bne.n	800ec46 <HAL_SPI_TransmitReceive+0x130>
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecfc:	b29b      	uxth	r3, r3
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1a1      	bne.n	800ec46 <HAL_SPI_TransmitReceive+0x130>
 800ed02:	e07c      	b.n	800edfe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	685b      	ldr	r3, [r3, #4]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d002      	beq.n	800ed12 <HAL_SPI_TransmitReceive+0x1fc>
 800ed0c:	8b7b      	ldrh	r3, [r7, #26]
 800ed0e:	2b01      	cmp	r3, #1
 800ed10:	d16b      	bne.n	800edea <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	330c      	adds	r3, #12
 800ed1c:	7812      	ldrb	r2, [r2, #0]
 800ed1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed24:	1c5a      	adds	r2, r3, #1
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	3b01      	subs	r3, #1
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed38:	e057      	b.n	800edea <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	689b      	ldr	r3, [r3, #8]
 800ed40:	f003 0302 	and.w	r3, r3, #2
 800ed44:	2b02      	cmp	r3, #2
 800ed46:	d11c      	bne.n	800ed82 <HAL_SPI_TransmitReceive+0x26c>
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d017      	beq.n	800ed82 <HAL_SPI_TransmitReceive+0x26c>
 800ed52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed54:	2b01      	cmp	r3, #1
 800ed56:	d114      	bne.n	800ed82 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	330c      	adds	r3, #12
 800ed62:	7812      	ldrb	r2, [r2, #0]
 800ed64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed6a:	1c5a      	adds	r2, r3, #1
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	3b01      	subs	r3, #1
 800ed78:	b29a      	uxth	r2, r3
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	689b      	ldr	r3, [r3, #8]
 800ed88:	f003 0301 	and.w	r3, r3, #1
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d119      	bne.n	800edc4 <HAL_SPI_TransmitReceive+0x2ae>
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed94:	b29b      	uxth	r3, r3
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d014      	beq.n	800edc4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	68da      	ldr	r2, [r3, #12]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eda4:	b2d2      	uxtb	r2, r2
 800eda6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edac:	1c5a      	adds	r2, r3, #1
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	3b01      	subs	r3, #1
 800edba:	b29a      	uxth	r2, r3
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800edc0:	2301      	movs	r3, #1
 800edc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800edc4:	f7fb f818 	bl	8009df8 <HAL_GetTick>
 800edc8:	4602      	mov	r2, r0
 800edca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edcc:	1ad3      	subs	r3, r2, r3
 800edce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d803      	bhi.n	800eddc <HAL_SPI_TransmitReceive+0x2c6>
 800edd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edda:	d102      	bne.n	800ede2 <HAL_SPI_TransmitReceive+0x2cc>
 800eddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d103      	bne.n	800edea <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ede2:	2303      	movs	r3, #3
 800ede4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ede8:	e029      	b.n	800ee3e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800edee:	b29b      	uxth	r3, r3
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d1a2      	bne.n	800ed3a <HAL_SPI_TransmitReceive+0x224>
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edf8:	b29b      	uxth	r3, r3
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d19d      	bne.n	800ed3a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800edfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ee02:	68f8      	ldr	r0, [r7, #12]
 800ee04:	f000 f8f8 	bl	800eff8 <SPI_EndRxTxTransaction>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d006      	beq.n	800ee1c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ee0e:	2301      	movs	r3, #1
 800ee10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2220      	movs	r2, #32
 800ee18:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ee1a:	e010      	b.n	800ee3e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	689b      	ldr	r3, [r3, #8]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d10b      	bne.n	800ee3c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ee24:	2300      	movs	r3, #0
 800ee26:	617b      	str	r3, [r7, #20]
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	68db      	ldr	r3, [r3, #12]
 800ee2e:	617b      	str	r3, [r7, #20]
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	689b      	ldr	r3, [r3, #8]
 800ee36:	617b      	str	r3, [r7, #20]
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	e000      	b.n	800ee3e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ee3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	2201      	movs	r2, #1
 800ee42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ee4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3730      	adds	r7, #48	; 0x30
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}

0800ee5a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ee5a:	b580      	push	{r7, lr}
 800ee5c:	b084      	sub	sp, #16
 800ee5e:	af00      	add	r7, sp, #0
 800ee60:	60f8      	str	r0, [r7, #12]
 800ee62:	60b9      	str	r1, [r7, #8]
 800ee64:	603b      	str	r3, [r7, #0]
 800ee66:	4613      	mov	r3, r2
 800ee68:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ee6a:	e04c      	b.n	800ef06 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee72:	d048      	beq.n	800ef06 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ee74:	f7fa ffc0 	bl	8009df8 <HAL_GetTick>
 800ee78:	4602      	mov	r2, r0
 800ee7a:	69bb      	ldr	r3, [r7, #24]
 800ee7c:	1ad3      	subs	r3, r2, r3
 800ee7e:	683a      	ldr	r2, [r7, #0]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d902      	bls.n	800ee8a <SPI_WaitFlagStateUntilTimeout+0x30>
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d13d      	bne.n	800ef06 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	685a      	ldr	r2, [r3, #4]
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ee98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eea2:	d111      	bne.n	800eec8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	689b      	ldr	r3, [r3, #8]
 800eea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eeac:	d004      	beq.n	800eeb8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	689b      	ldr	r3, [r3, #8]
 800eeb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eeb6:	d107      	bne.n	800eec8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	681a      	ldr	r2, [r3, #0]
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eec6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eed0:	d10f      	bne.n	800eef2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	681a      	ldr	r2, [r3, #0]
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eee0:	601a      	str	r2, [r3, #0]
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	681a      	ldr	r2, [r3, #0]
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eef0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2201      	movs	r2, #1
 800eef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2200      	movs	r2, #0
 800eefe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ef02:	2303      	movs	r3, #3
 800ef04:	e00f      	b.n	800ef26 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	689a      	ldr	r2, [r3, #8]
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	4013      	ands	r3, r2
 800ef10:	68ba      	ldr	r2, [r7, #8]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	bf0c      	ite	eq
 800ef16:	2301      	moveq	r3, #1
 800ef18:	2300      	movne	r3, #0
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	79fb      	ldrb	r3, [r7, #7]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d1a3      	bne.n	800ee6c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ef24:	2300      	movs	r3, #0
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3710      	adds	r7, #16
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}

0800ef2e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ef2e:	b580      	push	{r7, lr}
 800ef30:	b086      	sub	sp, #24
 800ef32:	af02      	add	r7, sp, #8
 800ef34:	60f8      	str	r0, [r7, #12]
 800ef36:	60b9      	str	r1, [r7, #8]
 800ef38:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef42:	d111      	bne.n	800ef68 <SPI_EndRxTransaction+0x3a>
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	689b      	ldr	r3, [r3, #8]
 800ef48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef4c:	d004      	beq.n	800ef58 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	689b      	ldr	r3, [r3, #8]
 800ef52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef56:	d107      	bne.n	800ef68 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	681a      	ldr	r2, [r3, #0]
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ef66:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	685b      	ldr	r3, [r3, #4]
 800ef6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef70:	d12a      	bne.n	800efc8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	689b      	ldr	r3, [r3, #8]
 800ef76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef7a:	d012      	beq.n	800efa2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	9300      	str	r3, [sp, #0]
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	2200      	movs	r2, #0
 800ef84:	2180      	movs	r1, #128	; 0x80
 800ef86:	68f8      	ldr	r0, [r7, #12]
 800ef88:	f7ff ff67 	bl	800ee5a <SPI_WaitFlagStateUntilTimeout>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d02d      	beq.n	800efee <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef96:	f043 0220 	orr.w	r2, r3, #32
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ef9e:	2303      	movs	r3, #3
 800efa0:	e026      	b.n	800eff0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	9300      	str	r3, [sp, #0]
 800efa6:	68bb      	ldr	r3, [r7, #8]
 800efa8:	2200      	movs	r2, #0
 800efaa:	2101      	movs	r1, #1
 800efac:	68f8      	ldr	r0, [r7, #12]
 800efae:	f7ff ff54 	bl	800ee5a <SPI_WaitFlagStateUntilTimeout>
 800efb2:	4603      	mov	r3, r0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d01a      	beq.n	800efee <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efbc:	f043 0220 	orr.w	r2, r3, #32
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800efc4:	2303      	movs	r3, #3
 800efc6:	e013      	b.n	800eff0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	9300      	str	r3, [sp, #0]
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	2200      	movs	r2, #0
 800efd0:	2101      	movs	r1, #1
 800efd2:	68f8      	ldr	r0, [r7, #12]
 800efd4:	f7ff ff41 	bl	800ee5a <SPI_WaitFlagStateUntilTimeout>
 800efd8:	4603      	mov	r3, r0
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d007      	beq.n	800efee <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efe2:	f043 0220 	orr.w	r2, r3, #32
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800efea:	2303      	movs	r3, #3
 800efec:	e000      	b.n	800eff0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800efee:	2300      	movs	r3, #0
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3710      	adds	r7, #16
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b088      	sub	sp, #32
 800effc:	af02      	add	r7, sp, #8
 800effe:	60f8      	str	r0, [r7, #12]
 800f000:	60b9      	str	r1, [r7, #8]
 800f002:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f004:	4b1b      	ldr	r3, [pc, #108]	; (800f074 <SPI_EndRxTxTransaction+0x7c>)
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	4a1b      	ldr	r2, [pc, #108]	; (800f078 <SPI_EndRxTxTransaction+0x80>)
 800f00a:	fba2 2303 	umull	r2, r3, r2, r3
 800f00e:	0d5b      	lsrs	r3, r3, #21
 800f010:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f014:	fb02 f303 	mul.w	r3, r2, r3
 800f018:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f022:	d112      	bne.n	800f04a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	9300      	str	r3, [sp, #0]
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	2200      	movs	r2, #0
 800f02c:	2180      	movs	r1, #128	; 0x80
 800f02e:	68f8      	ldr	r0, [r7, #12]
 800f030:	f7ff ff13 	bl	800ee5a <SPI_WaitFlagStateUntilTimeout>
 800f034:	4603      	mov	r3, r0
 800f036:	2b00      	cmp	r3, #0
 800f038:	d016      	beq.n	800f068 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f03e:	f043 0220 	orr.w	r2, r3, #32
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f046:	2303      	movs	r3, #3
 800f048:	e00f      	b.n	800f06a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d00a      	beq.n	800f066 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f050:	697b      	ldr	r3, [r7, #20]
 800f052:	3b01      	subs	r3, #1
 800f054:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	689b      	ldr	r3, [r3, #8]
 800f05c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f060:	2b80      	cmp	r3, #128	; 0x80
 800f062:	d0f2      	beq.n	800f04a <SPI_EndRxTxTransaction+0x52>
 800f064:	e000      	b.n	800f068 <SPI_EndRxTxTransaction+0x70>
        break;
 800f066:	bf00      	nop
  }

  return HAL_OK;
 800f068:	2300      	movs	r3, #0
}
 800f06a:	4618      	mov	r0, r3
 800f06c:	3718      	adds	r7, #24
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	20000000 	.word	0x20000000
 800f078:	165e9f81 	.word	0x165e9f81

0800f07c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d101      	bne.n	800f08e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f08a:	2301      	movs	r3, #1
 800f08c:	e01d      	b.n	800f0ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f094:	b2db      	uxtb	r3, r3
 800f096:	2b00      	cmp	r3, #0
 800f098:	d106      	bne.n	800f0a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2200      	movs	r2, #0
 800f09e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f7f8 fa06 	bl	80074b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2202      	movs	r2, #2
 800f0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	3304      	adds	r3, #4
 800f0b8:	4619      	mov	r1, r3
 800f0ba:	4610      	mov	r0, r2
 800f0bc:	f000 fb56 	bl	800f76c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2201      	movs	r2, #1
 800f0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f0c8:	2300      	movs	r3, #0
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3708      	adds	r7, #8
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}

0800f0d2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f0d2:	b480      	push	{r7}
 800f0d4:	b085      	sub	sp, #20
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	68da      	ldr	r2, [r3, #12]
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f042 0201 	orr.w	r2, r2, #1
 800f0e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	689b      	ldr	r3, [r3, #8]
 800f0f0:	f003 0307 	and.w	r3, r3, #7
 800f0f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	2b06      	cmp	r3, #6
 800f0fa:	d007      	beq.n	800f10c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	f042 0201 	orr.w	r2, r2, #1
 800f10a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f10c:	2300      	movs	r3, #0
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3714      	adds	r7, #20
 800f112:	46bd      	mov	sp, r7
 800f114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f118:	4770      	bx	lr

0800f11a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f11a:	b580      	push	{r7, lr}
 800f11c:	b082      	sub	sp, #8
 800f11e:	af00      	add	r7, sp, #0
 800f120:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d101      	bne.n	800f12c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f128:	2301      	movs	r3, #1
 800f12a:	e01d      	b.n	800f168 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f132:	b2db      	uxtb	r3, r3
 800f134:	2b00      	cmp	r3, #0
 800f136:	d106      	bne.n	800f146 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2200      	movs	r2, #0
 800f13c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f7f8 f943 	bl	80073cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2202      	movs	r2, #2
 800f14a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681a      	ldr	r2, [r3, #0]
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	3304      	adds	r3, #4
 800f156:	4619      	mov	r1, r3
 800f158:	4610      	mov	r0, r2
 800f15a:	f000 fb07 	bl	800f76c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2201      	movs	r2, #1
 800f162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f166:	2300      	movs	r3, #0
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3708      	adds	r7, #8
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b084      	sub	sp, #16
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	2201      	movs	r2, #1
 800f180:	6839      	ldr	r1, [r7, #0]
 800f182:	4618      	mov	r0, r3
 800f184:	f000 fd42 	bl	800fc0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	4a15      	ldr	r2, [pc, #84]	; (800f1e4 <HAL_TIM_PWM_Start+0x74>)
 800f18e:	4293      	cmp	r3, r2
 800f190:	d004      	beq.n	800f19c <HAL_TIM_PWM_Start+0x2c>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	4a14      	ldr	r2, [pc, #80]	; (800f1e8 <HAL_TIM_PWM_Start+0x78>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d101      	bne.n	800f1a0 <HAL_TIM_PWM_Start+0x30>
 800f19c:	2301      	movs	r3, #1
 800f19e:	e000      	b.n	800f1a2 <HAL_TIM_PWM_Start+0x32>
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d007      	beq.n	800f1b6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f1b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	689b      	ldr	r3, [r3, #8]
 800f1bc:	f003 0307 	and.w	r3, r3, #7
 800f1c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2b06      	cmp	r3, #6
 800f1c6:	d007      	beq.n	800f1d8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f042 0201 	orr.w	r2, r2, #1
 800f1d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f1d8:	2300      	movs	r3, #0
}
 800f1da:	4618      	mov	r0, r3
 800f1dc:	3710      	adds	r7, #16
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	bd80      	pop	{r7, pc}
 800f1e2:	bf00      	nop
 800f1e4:	40010000 	.word	0x40010000
 800f1e8:	40010400 	.word	0x40010400

0800f1ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b086      	sub	sp, #24
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d101      	bne.n	800f200 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	e083      	b.n	800f308 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f206:	b2db      	uxtb	r3, r3
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d106      	bne.n	800f21a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f7f8 f9dd 	bl	80075d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2202      	movs	r2, #2
 800f21e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	689b      	ldr	r3, [r3, #8]
 800f228:	687a      	ldr	r2, [r7, #4]
 800f22a:	6812      	ldr	r2, [r2, #0]
 800f22c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f230:	f023 0307 	bic.w	r3, r3, #7
 800f234:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681a      	ldr	r2, [r3, #0]
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	3304      	adds	r3, #4
 800f23e:	4619      	mov	r1, r3
 800f240:	4610      	mov	r0, r2
 800f242:	f000 fa93 	bl	800f76c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	689b      	ldr	r3, [r3, #8]
 800f24c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	699b      	ldr	r3, [r3, #24]
 800f254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	6a1b      	ldr	r3, [r3, #32]
 800f25c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	697a      	ldr	r2, [r7, #20]
 800f264:	4313      	orrs	r3, r2
 800f266:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f268:	693b      	ldr	r3, [r7, #16]
 800f26a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f26e:	f023 0303 	bic.w	r3, r3, #3
 800f272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	689a      	ldr	r2, [r3, #8]
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	699b      	ldr	r3, [r3, #24]
 800f27c:	021b      	lsls	r3, r3, #8
 800f27e:	4313      	orrs	r3, r2
 800f280:	693a      	ldr	r2, [r7, #16]
 800f282:	4313      	orrs	r3, r2
 800f284:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f28c:	f023 030c 	bic.w	r3, r3, #12
 800f290:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f292:	693b      	ldr	r3, [r7, #16]
 800f294:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f298:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f29c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	68da      	ldr	r2, [r3, #12]
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	69db      	ldr	r3, [r3, #28]
 800f2a6:	021b      	lsls	r3, r3, #8
 800f2a8:	4313      	orrs	r3, r2
 800f2aa:	693a      	ldr	r2, [r7, #16]
 800f2ac:	4313      	orrs	r3, r2
 800f2ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	691b      	ldr	r3, [r3, #16]
 800f2b4:	011a      	lsls	r2, r3, #4
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	6a1b      	ldr	r3, [r3, #32]
 800f2ba:	031b      	lsls	r3, r3, #12
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	693a      	ldr	r2, [r7, #16]
 800f2c0:	4313      	orrs	r3, r2
 800f2c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f2ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f2d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	685a      	ldr	r2, [r3, #4]
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	695b      	ldr	r3, [r3, #20]
 800f2dc:	011b      	lsls	r3, r3, #4
 800f2de:	4313      	orrs	r3, r2
 800f2e0:	68fa      	ldr	r2, [r7, #12]
 800f2e2:	4313      	orrs	r3, r2
 800f2e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	697a      	ldr	r2, [r7, #20]
 800f2ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	693a      	ldr	r2, [r7, #16]
 800f2f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	68fa      	ldr	r2, [r7, #12]
 800f2fc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	2201      	movs	r2, #1
 800f302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f306:	2300      	movs	r3, #0
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3718      	adds	r7, #24
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}

0800f310 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d002      	beq.n	800f326 <HAL_TIM_Encoder_Start+0x16>
 800f320:	2b04      	cmp	r3, #4
 800f322:	d008      	beq.n	800f336 <HAL_TIM_Encoder_Start+0x26>
 800f324:	e00f      	b.n	800f346 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	2201      	movs	r2, #1
 800f32c:	2100      	movs	r1, #0
 800f32e:	4618      	mov	r0, r3
 800f330:	f000 fc6c 	bl	800fc0c <TIM_CCxChannelCmd>
      break;
 800f334:	e016      	b.n	800f364 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	2201      	movs	r2, #1
 800f33c:	2104      	movs	r1, #4
 800f33e:	4618      	mov	r0, r3
 800f340:	f000 fc64 	bl	800fc0c <TIM_CCxChannelCmd>
      break;
 800f344:	e00e      	b.n	800f364 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	2201      	movs	r2, #1
 800f34c:	2100      	movs	r1, #0
 800f34e:	4618      	mov	r0, r3
 800f350:	f000 fc5c 	bl	800fc0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	2201      	movs	r2, #1
 800f35a:	2104      	movs	r1, #4
 800f35c:	4618      	mov	r0, r3
 800f35e:	f000 fc55 	bl	800fc0c <TIM_CCxChannelCmd>
      break;
 800f362:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f042 0201 	orr.w	r2, r2, #1
 800f372:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f374:	2300      	movs	r3, #0
}
 800f376:	4618      	mov	r0, r3
 800f378:	3708      	adds	r7, #8
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}

0800f37e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f37e:	b580      	push	{r7, lr}
 800f380:	b082      	sub	sp, #8
 800f382:	af00      	add	r7, sp, #0
 800f384:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	691b      	ldr	r3, [r3, #16]
 800f38c:	f003 0302 	and.w	r3, r3, #2
 800f390:	2b02      	cmp	r3, #2
 800f392:	d122      	bne.n	800f3da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	68db      	ldr	r3, [r3, #12]
 800f39a:	f003 0302 	and.w	r3, r3, #2
 800f39e:	2b02      	cmp	r3, #2
 800f3a0:	d11b      	bne.n	800f3da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f06f 0202 	mvn.w	r2, #2
 800f3aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2201      	movs	r2, #1
 800f3b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	699b      	ldr	r3, [r3, #24]
 800f3b8:	f003 0303 	and.w	r3, r3, #3
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d003      	beq.n	800f3c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f000 f9b5 	bl	800f730 <HAL_TIM_IC_CaptureCallback>
 800f3c6:	e005      	b.n	800f3d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f000 f9a7 	bl	800f71c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 f9b8 	bl	800f744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	691b      	ldr	r3, [r3, #16]
 800f3e0:	f003 0304 	and.w	r3, r3, #4
 800f3e4:	2b04      	cmp	r3, #4
 800f3e6:	d122      	bne.n	800f42e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	68db      	ldr	r3, [r3, #12]
 800f3ee:	f003 0304 	and.w	r3, r3, #4
 800f3f2:	2b04      	cmp	r3, #4
 800f3f4:	d11b      	bne.n	800f42e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	f06f 0204 	mvn.w	r2, #4
 800f3fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2202      	movs	r2, #2
 800f404:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	699b      	ldr	r3, [r3, #24]
 800f40c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f410:	2b00      	cmp	r3, #0
 800f412:	d003      	beq.n	800f41c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f000 f98b 	bl	800f730 <HAL_TIM_IC_CaptureCallback>
 800f41a:	e005      	b.n	800f428 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f000 f97d 	bl	800f71c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f000 f98e 	bl	800f744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2200      	movs	r2, #0
 800f42c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	691b      	ldr	r3, [r3, #16]
 800f434:	f003 0308 	and.w	r3, r3, #8
 800f438:	2b08      	cmp	r3, #8
 800f43a:	d122      	bne.n	800f482 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	68db      	ldr	r3, [r3, #12]
 800f442:	f003 0308 	and.w	r3, r3, #8
 800f446:	2b08      	cmp	r3, #8
 800f448:	d11b      	bne.n	800f482 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	f06f 0208 	mvn.w	r2, #8
 800f452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2204      	movs	r2, #4
 800f458:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	69db      	ldr	r3, [r3, #28]
 800f460:	f003 0303 	and.w	r3, r3, #3
 800f464:	2b00      	cmp	r3, #0
 800f466:	d003      	beq.n	800f470 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f000 f961 	bl	800f730 <HAL_TIM_IC_CaptureCallback>
 800f46e:	e005      	b.n	800f47c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f000 f953 	bl	800f71c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f000 f964 	bl	800f744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2200      	movs	r2, #0
 800f480:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	691b      	ldr	r3, [r3, #16]
 800f488:	f003 0310 	and.w	r3, r3, #16
 800f48c:	2b10      	cmp	r3, #16
 800f48e:	d122      	bne.n	800f4d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	68db      	ldr	r3, [r3, #12]
 800f496:	f003 0310 	and.w	r3, r3, #16
 800f49a:	2b10      	cmp	r3, #16
 800f49c:	d11b      	bne.n	800f4d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	f06f 0210 	mvn.w	r2, #16
 800f4a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2208      	movs	r2, #8
 800f4ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	69db      	ldr	r3, [r3, #28]
 800f4b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d003      	beq.n	800f4c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f000 f937 	bl	800f730 <HAL_TIM_IC_CaptureCallback>
 800f4c2:	e005      	b.n	800f4d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	f000 f929 	bl	800f71c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f000 f93a 	bl	800f744 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	691b      	ldr	r3, [r3, #16]
 800f4dc:	f003 0301 	and.w	r3, r3, #1
 800f4e0:	2b01      	cmp	r3, #1
 800f4e2:	d10e      	bne.n	800f502 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	68db      	ldr	r3, [r3, #12]
 800f4ea:	f003 0301 	and.w	r3, r3, #1
 800f4ee:	2b01      	cmp	r3, #1
 800f4f0:	d107      	bne.n	800f502 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	f06f 0201 	mvn.w	r2, #1
 800f4fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f7f6 fd53 	bl	8005fa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	691b      	ldr	r3, [r3, #16]
 800f508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f50c:	2b80      	cmp	r3, #128	; 0x80
 800f50e:	d10e      	bne.n	800f52e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f51a:	2b80      	cmp	r3, #128	; 0x80
 800f51c:	d107      	bne.n	800f52e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f000 fc6d 	bl	800fe08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	691b      	ldr	r3, [r3, #16]
 800f534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f538:	2b40      	cmp	r3, #64	; 0x40
 800f53a:	d10e      	bne.n	800f55a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f546:	2b40      	cmp	r3, #64	; 0x40
 800f548:	d107      	bne.n	800f55a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f000 f8ff 	bl	800f758 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	691b      	ldr	r3, [r3, #16]
 800f560:	f003 0320 	and.w	r3, r3, #32
 800f564:	2b20      	cmp	r3, #32
 800f566:	d10e      	bne.n	800f586 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	68db      	ldr	r3, [r3, #12]
 800f56e:	f003 0320 	and.w	r3, r3, #32
 800f572:	2b20      	cmp	r3, #32
 800f574:	d107      	bne.n	800f586 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f06f 0220 	mvn.w	r2, #32
 800f57e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 fc37 	bl	800fdf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f586:	bf00      	nop
 800f588:	3708      	adds	r7, #8
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
	...

0800f590 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b084      	sub	sp, #16
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f5a2:	2b01      	cmp	r3, #1
 800f5a4:	d101      	bne.n	800f5aa <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f5a6:	2302      	movs	r3, #2
 800f5a8:	e0b4      	b.n	800f714 <HAL_TIM_PWM_ConfigChannel+0x184>
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	2201      	movs	r2, #1
 800f5ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	2202      	movs	r2, #2
 800f5b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2b0c      	cmp	r3, #12
 800f5be:	f200 809f 	bhi.w	800f700 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f5c2:	a201      	add	r2, pc, #4	; (adr r2, 800f5c8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c8:	0800f5fd 	.word	0x0800f5fd
 800f5cc:	0800f701 	.word	0x0800f701
 800f5d0:	0800f701 	.word	0x0800f701
 800f5d4:	0800f701 	.word	0x0800f701
 800f5d8:	0800f63d 	.word	0x0800f63d
 800f5dc:	0800f701 	.word	0x0800f701
 800f5e0:	0800f701 	.word	0x0800f701
 800f5e4:	0800f701 	.word	0x0800f701
 800f5e8:	0800f67f 	.word	0x0800f67f
 800f5ec:	0800f701 	.word	0x0800f701
 800f5f0:	0800f701 	.word	0x0800f701
 800f5f4:	0800f701 	.word	0x0800f701
 800f5f8:	0800f6bf 	.word	0x0800f6bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	68b9      	ldr	r1, [r7, #8]
 800f602:	4618      	mov	r0, r3
 800f604:	f000 f952 	bl	800f8ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	699a      	ldr	r2, [r3, #24]
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	f042 0208 	orr.w	r2, r2, #8
 800f616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	699a      	ldr	r2, [r3, #24]
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	f022 0204 	bic.w	r2, r2, #4
 800f626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	6999      	ldr	r1, [r3, #24]
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	691a      	ldr	r2, [r3, #16]
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	430a      	orrs	r2, r1
 800f638:	619a      	str	r2, [r3, #24]
      break;
 800f63a:	e062      	b.n	800f702 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	68b9      	ldr	r1, [r7, #8]
 800f642:	4618      	mov	r0, r3
 800f644:	f000 f9a2 	bl	800f98c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	699a      	ldr	r2, [r3, #24]
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	699a      	ldr	r2, [r3, #24]
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	6999      	ldr	r1, [r3, #24]
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	691b      	ldr	r3, [r3, #16]
 800f672:	021a      	lsls	r2, r3, #8
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	430a      	orrs	r2, r1
 800f67a:	619a      	str	r2, [r3, #24]
      break;
 800f67c:	e041      	b.n	800f702 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	68b9      	ldr	r1, [r7, #8]
 800f684:	4618      	mov	r0, r3
 800f686:	f000 f9f7 	bl	800fa78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	69da      	ldr	r2, [r3, #28]
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f042 0208 	orr.w	r2, r2, #8
 800f698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	69da      	ldr	r2, [r3, #28]
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f022 0204 	bic.w	r2, r2, #4
 800f6a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	69d9      	ldr	r1, [r3, #28]
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	691a      	ldr	r2, [r3, #16]
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	430a      	orrs	r2, r1
 800f6ba:	61da      	str	r2, [r3, #28]
      break;
 800f6bc:	e021      	b.n	800f702 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	68b9      	ldr	r1, [r7, #8]
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f000 fa4b 	bl	800fb60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	69da      	ldr	r2, [r3, #28]
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f6d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	69da      	ldr	r2, [r3, #28]
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f6e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	69d9      	ldr	r1, [r3, #28]
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	691b      	ldr	r3, [r3, #16]
 800f6f4:	021a      	lsls	r2, r3, #8
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	430a      	orrs	r2, r1
 800f6fc:	61da      	str	r2, [r3, #28]
      break;
 800f6fe:	e000      	b.n	800f702 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f700:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	2201      	movs	r2, #1
 800f706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	2200      	movs	r2, #0
 800f70e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f712:	2300      	movs	r3, #0
}
 800f714:	4618      	mov	r0, r3
 800f716:	3710      	adds	r7, #16
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}

0800f71c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b083      	sub	sp, #12
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f724:	bf00      	nop
 800f726:	370c      	adds	r7, #12
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f730:	b480      	push	{r7}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f738:	bf00      	nop
 800f73a:	370c      	adds	r7, #12
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr

0800f744 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f744:	b480      	push	{r7}
 800f746:	b083      	sub	sp, #12
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f74c:	bf00      	nop
 800f74e:	370c      	adds	r7, #12
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr

0800f758 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f758:	b480      	push	{r7}
 800f75a:	b083      	sub	sp, #12
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f760:	bf00      	nop
 800f762:	370c      	adds	r7, #12
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr

0800f76c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f76c:	b480      	push	{r7}
 800f76e:	b085      	sub	sp, #20
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	4a40      	ldr	r2, [pc, #256]	; (800f880 <TIM_Base_SetConfig+0x114>)
 800f780:	4293      	cmp	r3, r2
 800f782:	d013      	beq.n	800f7ac <TIM_Base_SetConfig+0x40>
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f78a:	d00f      	beq.n	800f7ac <TIM_Base_SetConfig+0x40>
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	4a3d      	ldr	r2, [pc, #244]	; (800f884 <TIM_Base_SetConfig+0x118>)
 800f790:	4293      	cmp	r3, r2
 800f792:	d00b      	beq.n	800f7ac <TIM_Base_SetConfig+0x40>
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	4a3c      	ldr	r2, [pc, #240]	; (800f888 <TIM_Base_SetConfig+0x11c>)
 800f798:	4293      	cmp	r3, r2
 800f79a:	d007      	beq.n	800f7ac <TIM_Base_SetConfig+0x40>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	4a3b      	ldr	r2, [pc, #236]	; (800f88c <TIM_Base_SetConfig+0x120>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d003      	beq.n	800f7ac <TIM_Base_SetConfig+0x40>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	4a3a      	ldr	r2, [pc, #232]	; (800f890 <TIM_Base_SetConfig+0x124>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d108      	bne.n	800f7be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	68fa      	ldr	r2, [r7, #12]
 800f7ba:	4313      	orrs	r3, r2
 800f7bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	4a2f      	ldr	r2, [pc, #188]	; (800f880 <TIM_Base_SetConfig+0x114>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d02b      	beq.n	800f81e <TIM_Base_SetConfig+0xb2>
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7cc:	d027      	beq.n	800f81e <TIM_Base_SetConfig+0xb2>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	4a2c      	ldr	r2, [pc, #176]	; (800f884 <TIM_Base_SetConfig+0x118>)
 800f7d2:	4293      	cmp	r3, r2
 800f7d4:	d023      	beq.n	800f81e <TIM_Base_SetConfig+0xb2>
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	4a2b      	ldr	r2, [pc, #172]	; (800f888 <TIM_Base_SetConfig+0x11c>)
 800f7da:	4293      	cmp	r3, r2
 800f7dc:	d01f      	beq.n	800f81e <TIM_Base_SetConfig+0xb2>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	4a2a      	ldr	r2, [pc, #168]	; (800f88c <TIM_Base_SetConfig+0x120>)
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d01b      	beq.n	800f81e <TIM_Base_SetConfig+0xb2>
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	4a29      	ldr	r2, [pc, #164]	; (800f890 <TIM_Base_SetConfig+0x124>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d017      	beq.n	800f81e <TIM_Base_SetConfig+0xb2>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	4a28      	ldr	r2, [pc, #160]	; (800f894 <TIM_Base_SetConfig+0x128>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d013      	beq.n	800f81e <TIM_Base_SetConfig+0xb2>
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	4a27      	ldr	r2, [pc, #156]	; (800f898 <TIM_Base_SetConfig+0x12c>)
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d00f      	beq.n	800f81e <TIM_Base_SetConfig+0xb2>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4a26      	ldr	r2, [pc, #152]	; (800f89c <TIM_Base_SetConfig+0x130>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d00b      	beq.n	800f81e <TIM_Base_SetConfig+0xb2>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4a25      	ldr	r2, [pc, #148]	; (800f8a0 <TIM_Base_SetConfig+0x134>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d007      	beq.n	800f81e <TIM_Base_SetConfig+0xb2>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4a24      	ldr	r2, [pc, #144]	; (800f8a4 <TIM_Base_SetConfig+0x138>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d003      	beq.n	800f81e <TIM_Base_SetConfig+0xb2>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4a23      	ldr	r2, [pc, #140]	; (800f8a8 <TIM_Base_SetConfig+0x13c>)
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d108      	bne.n	800f830 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	68fa      	ldr	r2, [r7, #12]
 800f82c:	4313      	orrs	r3, r2
 800f82e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	695b      	ldr	r3, [r3, #20]
 800f83a:	4313      	orrs	r3, r2
 800f83c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f844:	683b      	ldr	r3, [r7, #0]
 800f846:	689a      	ldr	r2, [r3, #8]
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	681a      	ldr	r2, [r3, #0]
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	4a0a      	ldr	r2, [pc, #40]	; (800f880 <TIM_Base_SetConfig+0x114>)
 800f858:	4293      	cmp	r3, r2
 800f85a:	d003      	beq.n	800f864 <TIM_Base_SetConfig+0xf8>
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	4a0c      	ldr	r2, [pc, #48]	; (800f890 <TIM_Base_SetConfig+0x124>)
 800f860:	4293      	cmp	r3, r2
 800f862:	d103      	bne.n	800f86c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	691a      	ldr	r2, [r3, #16]
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	2201      	movs	r2, #1
 800f870:	615a      	str	r2, [r3, #20]
}
 800f872:	bf00      	nop
 800f874:	3714      	adds	r7, #20
 800f876:	46bd      	mov	sp, r7
 800f878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87c:	4770      	bx	lr
 800f87e:	bf00      	nop
 800f880:	40010000 	.word	0x40010000
 800f884:	40000400 	.word	0x40000400
 800f888:	40000800 	.word	0x40000800
 800f88c:	40000c00 	.word	0x40000c00
 800f890:	40010400 	.word	0x40010400
 800f894:	40014000 	.word	0x40014000
 800f898:	40014400 	.word	0x40014400
 800f89c:	40014800 	.word	0x40014800
 800f8a0:	40001800 	.word	0x40001800
 800f8a4:	40001c00 	.word	0x40001c00
 800f8a8:	40002000 	.word	0x40002000

0800f8ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b087      	sub	sp, #28
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6a1b      	ldr	r3, [r3, #32]
 800f8ba:	f023 0201 	bic.w	r2, r3, #1
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6a1b      	ldr	r3, [r3, #32]
 800f8c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	685b      	ldr	r3, [r3, #4]
 800f8cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	699b      	ldr	r3, [r3, #24]
 800f8d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f023 0303 	bic.w	r3, r3, #3
 800f8e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	68fa      	ldr	r2, [r7, #12]
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	f023 0302 	bic.w	r3, r3, #2
 800f8f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	689b      	ldr	r3, [r3, #8]
 800f8fa:	697a      	ldr	r2, [r7, #20]
 800f8fc:	4313      	orrs	r3, r2
 800f8fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	4a20      	ldr	r2, [pc, #128]	; (800f984 <TIM_OC1_SetConfig+0xd8>)
 800f904:	4293      	cmp	r3, r2
 800f906:	d003      	beq.n	800f910 <TIM_OC1_SetConfig+0x64>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	4a1f      	ldr	r2, [pc, #124]	; (800f988 <TIM_OC1_SetConfig+0xdc>)
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d10c      	bne.n	800f92a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	f023 0308 	bic.w	r3, r3, #8
 800f916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	68db      	ldr	r3, [r3, #12]
 800f91c:	697a      	ldr	r2, [r7, #20]
 800f91e:	4313      	orrs	r3, r2
 800f920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	f023 0304 	bic.w	r3, r3, #4
 800f928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	4a15      	ldr	r2, [pc, #84]	; (800f984 <TIM_OC1_SetConfig+0xd8>)
 800f92e:	4293      	cmp	r3, r2
 800f930:	d003      	beq.n	800f93a <TIM_OC1_SetConfig+0x8e>
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	4a14      	ldr	r2, [pc, #80]	; (800f988 <TIM_OC1_SetConfig+0xdc>)
 800f936:	4293      	cmp	r3, r2
 800f938:	d111      	bne.n	800f95e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f93a:	693b      	ldr	r3, [r7, #16]
 800f93c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f940:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f942:	693b      	ldr	r3, [r7, #16]
 800f944:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f948:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	695b      	ldr	r3, [r3, #20]
 800f94e:	693a      	ldr	r2, [r7, #16]
 800f950:	4313      	orrs	r3, r2
 800f952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	699b      	ldr	r3, [r3, #24]
 800f958:	693a      	ldr	r2, [r7, #16]
 800f95a:	4313      	orrs	r3, r2
 800f95c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	693a      	ldr	r2, [r7, #16]
 800f962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	68fa      	ldr	r2, [r7, #12]
 800f968:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f96a:	683b      	ldr	r3, [r7, #0]
 800f96c:	685a      	ldr	r2, [r3, #4]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	697a      	ldr	r2, [r7, #20]
 800f976:	621a      	str	r2, [r3, #32]
}
 800f978:	bf00      	nop
 800f97a:	371c      	adds	r7, #28
 800f97c:	46bd      	mov	sp, r7
 800f97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f982:	4770      	bx	lr
 800f984:	40010000 	.word	0x40010000
 800f988:	40010400 	.word	0x40010400

0800f98c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f98c:	b480      	push	{r7}
 800f98e:	b087      	sub	sp, #28
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
 800f994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6a1b      	ldr	r3, [r3, #32]
 800f99a:	f023 0210 	bic.w	r2, r3, #16
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6a1b      	ldr	r3, [r3, #32]
 800f9a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	699b      	ldr	r3, [r3, #24]
 800f9b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f9c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f9c4:	683b      	ldr	r3, [r7, #0]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	021b      	lsls	r3, r3, #8
 800f9ca:	68fa      	ldr	r2, [r7, #12]
 800f9cc:	4313      	orrs	r3, r2
 800f9ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f9d0:	697b      	ldr	r3, [r7, #20]
 800f9d2:	f023 0320 	bic.w	r3, r3, #32
 800f9d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	689b      	ldr	r3, [r3, #8]
 800f9dc:	011b      	lsls	r3, r3, #4
 800f9de:	697a      	ldr	r2, [r7, #20]
 800f9e0:	4313      	orrs	r3, r2
 800f9e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	4a22      	ldr	r2, [pc, #136]	; (800fa70 <TIM_OC2_SetConfig+0xe4>)
 800f9e8:	4293      	cmp	r3, r2
 800f9ea:	d003      	beq.n	800f9f4 <TIM_OC2_SetConfig+0x68>
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	4a21      	ldr	r2, [pc, #132]	; (800fa74 <TIM_OC2_SetConfig+0xe8>)
 800f9f0:	4293      	cmp	r3, r2
 800f9f2:	d10d      	bne.n	800fa10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f9fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	68db      	ldr	r3, [r3, #12]
 800fa00:	011b      	lsls	r3, r3, #4
 800fa02:	697a      	ldr	r2, [r7, #20]
 800fa04:	4313      	orrs	r3, r2
 800fa06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	4a17      	ldr	r2, [pc, #92]	; (800fa70 <TIM_OC2_SetConfig+0xe4>)
 800fa14:	4293      	cmp	r3, r2
 800fa16:	d003      	beq.n	800fa20 <TIM_OC2_SetConfig+0x94>
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	4a16      	ldr	r2, [pc, #88]	; (800fa74 <TIM_OC2_SetConfig+0xe8>)
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d113      	bne.n	800fa48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fa26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	695b      	ldr	r3, [r3, #20]
 800fa34:	009b      	lsls	r3, r3, #2
 800fa36:	693a      	ldr	r2, [r7, #16]
 800fa38:	4313      	orrs	r3, r2
 800fa3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	699b      	ldr	r3, [r3, #24]
 800fa40:	009b      	lsls	r3, r3, #2
 800fa42:	693a      	ldr	r2, [r7, #16]
 800fa44:	4313      	orrs	r3, r2
 800fa46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	693a      	ldr	r2, [r7, #16]
 800fa4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	68fa      	ldr	r2, [r7, #12]
 800fa52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	685a      	ldr	r2, [r3, #4]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	697a      	ldr	r2, [r7, #20]
 800fa60:	621a      	str	r2, [r3, #32]
}
 800fa62:	bf00      	nop
 800fa64:	371c      	adds	r7, #28
 800fa66:	46bd      	mov	sp, r7
 800fa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6c:	4770      	bx	lr
 800fa6e:	bf00      	nop
 800fa70:	40010000 	.word	0x40010000
 800fa74:	40010400 	.word	0x40010400

0800fa78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b087      	sub	sp, #28
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6a1b      	ldr	r3, [r3, #32]
 800fa86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6a1b      	ldr	r3, [r3, #32]
 800fa92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	69db      	ldr	r3, [r3, #28]
 800fa9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800faa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	f023 0303 	bic.w	r3, r3, #3
 800faae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	68fa      	ldr	r2, [r7, #12]
 800fab6:	4313      	orrs	r3, r2
 800fab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	689b      	ldr	r3, [r3, #8]
 800fac6:	021b      	lsls	r3, r3, #8
 800fac8:	697a      	ldr	r2, [r7, #20]
 800faca:	4313      	orrs	r3, r2
 800facc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	4a21      	ldr	r2, [pc, #132]	; (800fb58 <TIM_OC3_SetConfig+0xe0>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d003      	beq.n	800fade <TIM_OC3_SetConfig+0x66>
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	4a20      	ldr	r2, [pc, #128]	; (800fb5c <TIM_OC3_SetConfig+0xe4>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d10d      	bne.n	800fafa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fae4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	68db      	ldr	r3, [r3, #12]
 800faea:	021b      	lsls	r3, r3, #8
 800faec:	697a      	ldr	r2, [r7, #20]
 800faee:	4313      	orrs	r3, r2
 800faf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800faf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	4a16      	ldr	r2, [pc, #88]	; (800fb58 <TIM_OC3_SetConfig+0xe0>)
 800fafe:	4293      	cmp	r3, r2
 800fb00:	d003      	beq.n	800fb0a <TIM_OC3_SetConfig+0x92>
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	4a15      	ldr	r2, [pc, #84]	; (800fb5c <TIM_OC3_SetConfig+0xe4>)
 800fb06:	4293      	cmp	r3, r2
 800fb08:	d113      	bne.n	800fb32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fb12:	693b      	ldr	r3, [r7, #16]
 800fb14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	695b      	ldr	r3, [r3, #20]
 800fb1e:	011b      	lsls	r3, r3, #4
 800fb20:	693a      	ldr	r2, [r7, #16]
 800fb22:	4313      	orrs	r3, r2
 800fb24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	699b      	ldr	r3, [r3, #24]
 800fb2a:	011b      	lsls	r3, r3, #4
 800fb2c:	693a      	ldr	r2, [r7, #16]
 800fb2e:	4313      	orrs	r3, r2
 800fb30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	693a      	ldr	r2, [r7, #16]
 800fb36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	68fa      	ldr	r2, [r7, #12]
 800fb3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	685a      	ldr	r2, [r3, #4]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	697a      	ldr	r2, [r7, #20]
 800fb4a:	621a      	str	r2, [r3, #32]
}
 800fb4c:	bf00      	nop
 800fb4e:	371c      	adds	r7, #28
 800fb50:	46bd      	mov	sp, r7
 800fb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb56:	4770      	bx	lr
 800fb58:	40010000 	.word	0x40010000
 800fb5c:	40010400 	.word	0x40010400

0800fb60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fb60:	b480      	push	{r7}
 800fb62:	b087      	sub	sp, #28
 800fb64:	af00      	add	r7, sp, #0
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6a1b      	ldr	r3, [r3, #32]
 800fb6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6a1b      	ldr	r3, [r3, #32]
 800fb7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	685b      	ldr	r3, [r3, #4]
 800fb80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	69db      	ldr	r3, [r3, #28]
 800fb86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	021b      	lsls	r3, r3, #8
 800fb9e:	68fa      	ldr	r2, [r7, #12]
 800fba0:	4313      	orrs	r3, r2
 800fba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fbaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	689b      	ldr	r3, [r3, #8]
 800fbb0:	031b      	lsls	r3, r3, #12
 800fbb2:	693a      	ldr	r2, [r7, #16]
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	4a12      	ldr	r2, [pc, #72]	; (800fc04 <TIM_OC4_SetConfig+0xa4>)
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d003      	beq.n	800fbc8 <TIM_OC4_SetConfig+0x68>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	4a11      	ldr	r2, [pc, #68]	; (800fc08 <TIM_OC4_SetConfig+0xa8>)
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d109      	bne.n	800fbdc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fbce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	695b      	ldr	r3, [r3, #20]
 800fbd4:	019b      	lsls	r3, r3, #6
 800fbd6:	697a      	ldr	r2, [r7, #20]
 800fbd8:	4313      	orrs	r3, r2
 800fbda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	697a      	ldr	r2, [r7, #20]
 800fbe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	68fa      	ldr	r2, [r7, #12]
 800fbe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	685a      	ldr	r2, [r3, #4]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	693a      	ldr	r2, [r7, #16]
 800fbf4:	621a      	str	r2, [r3, #32]
}
 800fbf6:	bf00      	nop
 800fbf8:	371c      	adds	r7, #28
 800fbfa:	46bd      	mov	sp, r7
 800fbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc00:	4770      	bx	lr
 800fc02:	bf00      	nop
 800fc04:	40010000 	.word	0x40010000
 800fc08:	40010400 	.word	0x40010400

0800fc0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fc0c:	b480      	push	{r7}
 800fc0e:	b087      	sub	sp, #28
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	60b9      	str	r1, [r7, #8]
 800fc16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	f003 031f 	and.w	r3, r3, #31
 800fc1e:	2201      	movs	r2, #1
 800fc20:	fa02 f303 	lsl.w	r3, r2, r3
 800fc24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	6a1a      	ldr	r2, [r3, #32]
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	43db      	mvns	r3, r3
 800fc2e:	401a      	ands	r2, r3
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	6a1a      	ldr	r2, [r3, #32]
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	f003 031f 	and.w	r3, r3, #31
 800fc3e:	6879      	ldr	r1, [r7, #4]
 800fc40:	fa01 f303 	lsl.w	r3, r1, r3
 800fc44:	431a      	orrs	r2, r3
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	621a      	str	r2, [r3, #32]
}
 800fc4a:	bf00      	nop
 800fc4c:	371c      	adds	r7, #28
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc54:	4770      	bx	lr
	...

0800fc58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b085      	sub	sp, #20
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
 800fc60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc68:	2b01      	cmp	r3, #1
 800fc6a:	d101      	bne.n	800fc70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fc6c:	2302      	movs	r3, #2
 800fc6e:	e05a      	b.n	800fd26 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	2201      	movs	r2, #1
 800fc74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2202      	movs	r2, #2
 800fc7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	689b      	ldr	r3, [r3, #8]
 800fc8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	68fa      	ldr	r2, [r7, #12]
 800fc9e:	4313      	orrs	r3, r2
 800fca0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	68fa      	ldr	r2, [r7, #12]
 800fca8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	4a21      	ldr	r2, [pc, #132]	; (800fd34 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	d022      	beq.n	800fcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fcbc:	d01d      	beq.n	800fcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	4a1d      	ldr	r2, [pc, #116]	; (800fd38 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fcc4:	4293      	cmp	r3, r2
 800fcc6:	d018      	beq.n	800fcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	4a1b      	ldr	r2, [pc, #108]	; (800fd3c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d013      	beq.n	800fcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	4a1a      	ldr	r2, [pc, #104]	; (800fd40 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d00e      	beq.n	800fcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	4a18      	ldr	r2, [pc, #96]	; (800fd44 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d009      	beq.n	800fcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4a17      	ldr	r2, [pc, #92]	; (800fd48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d004      	beq.n	800fcfa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4a15      	ldr	r2, [pc, #84]	; (800fd4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d10c      	bne.n	800fd14 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fcfa:	68bb      	ldr	r3, [r7, #8]
 800fcfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	68ba      	ldr	r2, [r7, #8]
 800fd08:	4313      	orrs	r3, r2
 800fd0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	68ba      	ldr	r2, [r7, #8]
 800fd12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2201      	movs	r2, #1
 800fd18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fd24:	2300      	movs	r3, #0
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3714      	adds	r7, #20
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr
 800fd32:	bf00      	nop
 800fd34:	40010000 	.word	0x40010000
 800fd38:	40000400 	.word	0x40000400
 800fd3c:	40000800 	.word	0x40000800
 800fd40:	40000c00 	.word	0x40000c00
 800fd44:	40010400 	.word	0x40010400
 800fd48:	40014000 	.word	0x40014000
 800fd4c:	40001800 	.word	0x40001800

0800fd50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b085      	sub	sp, #20
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd64:	2b01      	cmp	r3, #1
 800fd66:	d101      	bne.n	800fd6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fd68:	2302      	movs	r3, #2
 800fd6a:	e03d      	b.n	800fde8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2201      	movs	r2, #1
 800fd70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	68db      	ldr	r3, [r3, #12]
 800fd7e:	4313      	orrs	r3, r2
 800fd80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	689b      	ldr	r3, [r3, #8]
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	685b      	ldr	r3, [r3, #4]
 800fd9a:	4313      	orrs	r3, r2
 800fd9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	4313      	orrs	r3, r2
 800fdaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	691b      	ldr	r3, [r3, #16]
 800fdb6:	4313      	orrs	r3, r2
 800fdb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	695b      	ldr	r3, [r3, #20]
 800fdc4:	4313      	orrs	r3, r2
 800fdc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	69db      	ldr	r3, [r3, #28]
 800fdd2:	4313      	orrs	r3, r2
 800fdd4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	68fa      	ldr	r2, [r7, #12]
 800fddc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2200      	movs	r2, #0
 800fde2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fde6:	2300      	movs	r3, #0
}
 800fde8:	4618      	mov	r0, r3
 800fdea:	3714      	adds	r7, #20
 800fdec:	46bd      	mov	sp, r7
 800fdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf2:	4770      	bx	lr

0800fdf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fdf4:	b480      	push	{r7}
 800fdf6:	b083      	sub	sp, #12
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fdfc:	bf00      	nop
 800fdfe:	370c      	adds	r7, #12
 800fe00:	46bd      	mov	sp, r7
 800fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe06:	4770      	bx	lr

0800fe08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b083      	sub	sp, #12
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fe10:	bf00      	nop
 800fe12:	370c      	adds	r7, #12
 800fe14:	46bd      	mov	sp, r7
 800fe16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1a:	4770      	bx	lr

0800fe1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d101      	bne.n	800fe2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	e03f      	b.n	800feae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fe34:	b2db      	uxtb	r3, r3
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d106      	bne.n	800fe48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	f7f7 fcf0 	bl	8007828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2224      	movs	r2, #36	; 0x24
 800fe4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	68da      	ldr	r2, [r3, #12]
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fe5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f000 f829 	bl	800feb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	691a      	ldr	r2, [r3, #16]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fe74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	695a      	ldr	r2, [r3, #20]
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fe84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	68da      	ldr	r2, [r3, #12]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fe94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2220      	movs	r2, #32
 800fea0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2220      	movs	r2, #32
 800fea8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800feac:	2300      	movs	r3, #0
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3708      	adds	r7, #8
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}
	...

0800feb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800feb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800febc:	b085      	sub	sp, #20
 800febe:	af00      	add	r7, sp, #0
 800fec0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	691b      	ldr	r3, [r3, #16]
 800fec8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	68da      	ldr	r2, [r3, #12]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	430a      	orrs	r2, r1
 800fed6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	689a      	ldr	r2, [r3, #8]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	691b      	ldr	r3, [r3, #16]
 800fee0:	431a      	orrs	r2, r3
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	695b      	ldr	r3, [r3, #20]
 800fee6:	431a      	orrs	r2, r3
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	69db      	ldr	r3, [r3, #28]
 800feec:	4313      	orrs	r3, r2
 800feee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	68db      	ldr	r3, [r3, #12]
 800fef6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800fefa:	f023 030c 	bic.w	r3, r3, #12
 800fefe:	687a      	ldr	r2, [r7, #4]
 800ff00:	6812      	ldr	r2, [r2, #0]
 800ff02:	68f9      	ldr	r1, [r7, #12]
 800ff04:	430b      	orrs	r3, r1
 800ff06:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	695b      	ldr	r3, [r3, #20]
 800ff0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	699a      	ldr	r2, [r3, #24]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	430a      	orrs	r2, r1
 800ff1c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	69db      	ldr	r3, [r3, #28]
 800ff22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff26:	f040 818b 	bne.w	8010240 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	4ac1      	ldr	r2, [pc, #772]	; (8010234 <UART_SetConfig+0x37c>)
 800ff30:	4293      	cmp	r3, r2
 800ff32:	d005      	beq.n	800ff40 <UART_SetConfig+0x88>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	4abf      	ldr	r2, [pc, #764]	; (8010238 <UART_SetConfig+0x380>)
 800ff3a:	4293      	cmp	r3, r2
 800ff3c:	f040 80bd 	bne.w	80100ba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ff40:	f7fc fbcc 	bl	800c6dc <HAL_RCC_GetPCLK2Freq>
 800ff44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	461d      	mov	r5, r3
 800ff4a:	f04f 0600 	mov.w	r6, #0
 800ff4e:	46a8      	mov	r8, r5
 800ff50:	46b1      	mov	r9, r6
 800ff52:	eb18 0308 	adds.w	r3, r8, r8
 800ff56:	eb49 0409 	adc.w	r4, r9, r9
 800ff5a:	4698      	mov	r8, r3
 800ff5c:	46a1      	mov	r9, r4
 800ff5e:	eb18 0805 	adds.w	r8, r8, r5
 800ff62:	eb49 0906 	adc.w	r9, r9, r6
 800ff66:	f04f 0100 	mov.w	r1, #0
 800ff6a:	f04f 0200 	mov.w	r2, #0
 800ff6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ff72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ff76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ff7a:	4688      	mov	r8, r1
 800ff7c:	4691      	mov	r9, r2
 800ff7e:	eb18 0005 	adds.w	r0, r8, r5
 800ff82:	eb49 0106 	adc.w	r1, r9, r6
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	685b      	ldr	r3, [r3, #4]
 800ff8a:	461d      	mov	r5, r3
 800ff8c:	f04f 0600 	mov.w	r6, #0
 800ff90:	196b      	adds	r3, r5, r5
 800ff92:	eb46 0406 	adc.w	r4, r6, r6
 800ff96:	461a      	mov	r2, r3
 800ff98:	4623      	mov	r3, r4
 800ff9a:	f7f0 fe8d 	bl	8000cb8 <__aeabi_uldivmod>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	460c      	mov	r4, r1
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	4ba5      	ldr	r3, [pc, #660]	; (801023c <UART_SetConfig+0x384>)
 800ffa6:	fba3 2302 	umull	r2, r3, r3, r2
 800ffaa:	095b      	lsrs	r3, r3, #5
 800ffac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	461d      	mov	r5, r3
 800ffb4:	f04f 0600 	mov.w	r6, #0
 800ffb8:	46a9      	mov	r9, r5
 800ffba:	46b2      	mov	sl, r6
 800ffbc:	eb19 0309 	adds.w	r3, r9, r9
 800ffc0:	eb4a 040a 	adc.w	r4, sl, sl
 800ffc4:	4699      	mov	r9, r3
 800ffc6:	46a2      	mov	sl, r4
 800ffc8:	eb19 0905 	adds.w	r9, r9, r5
 800ffcc:	eb4a 0a06 	adc.w	sl, sl, r6
 800ffd0:	f04f 0100 	mov.w	r1, #0
 800ffd4:	f04f 0200 	mov.w	r2, #0
 800ffd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ffdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ffe0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ffe4:	4689      	mov	r9, r1
 800ffe6:	4692      	mov	sl, r2
 800ffe8:	eb19 0005 	adds.w	r0, r9, r5
 800ffec:	eb4a 0106 	adc.w	r1, sl, r6
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	685b      	ldr	r3, [r3, #4]
 800fff4:	461d      	mov	r5, r3
 800fff6:	f04f 0600 	mov.w	r6, #0
 800fffa:	196b      	adds	r3, r5, r5
 800fffc:	eb46 0406 	adc.w	r4, r6, r6
 8010000:	461a      	mov	r2, r3
 8010002:	4623      	mov	r3, r4
 8010004:	f7f0 fe58 	bl	8000cb8 <__aeabi_uldivmod>
 8010008:	4603      	mov	r3, r0
 801000a:	460c      	mov	r4, r1
 801000c:	461a      	mov	r2, r3
 801000e:	4b8b      	ldr	r3, [pc, #556]	; (801023c <UART_SetConfig+0x384>)
 8010010:	fba3 1302 	umull	r1, r3, r3, r2
 8010014:	095b      	lsrs	r3, r3, #5
 8010016:	2164      	movs	r1, #100	; 0x64
 8010018:	fb01 f303 	mul.w	r3, r1, r3
 801001c:	1ad3      	subs	r3, r2, r3
 801001e:	00db      	lsls	r3, r3, #3
 8010020:	3332      	adds	r3, #50	; 0x32
 8010022:	4a86      	ldr	r2, [pc, #536]	; (801023c <UART_SetConfig+0x384>)
 8010024:	fba2 2303 	umull	r2, r3, r2, r3
 8010028:	095b      	lsrs	r3, r3, #5
 801002a:	005b      	lsls	r3, r3, #1
 801002c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010030:	4498      	add	r8, r3
 8010032:	68bb      	ldr	r3, [r7, #8]
 8010034:	461d      	mov	r5, r3
 8010036:	f04f 0600 	mov.w	r6, #0
 801003a:	46a9      	mov	r9, r5
 801003c:	46b2      	mov	sl, r6
 801003e:	eb19 0309 	adds.w	r3, r9, r9
 8010042:	eb4a 040a 	adc.w	r4, sl, sl
 8010046:	4699      	mov	r9, r3
 8010048:	46a2      	mov	sl, r4
 801004a:	eb19 0905 	adds.w	r9, r9, r5
 801004e:	eb4a 0a06 	adc.w	sl, sl, r6
 8010052:	f04f 0100 	mov.w	r1, #0
 8010056:	f04f 0200 	mov.w	r2, #0
 801005a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801005e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010062:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010066:	4689      	mov	r9, r1
 8010068:	4692      	mov	sl, r2
 801006a:	eb19 0005 	adds.w	r0, r9, r5
 801006e:	eb4a 0106 	adc.w	r1, sl, r6
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	461d      	mov	r5, r3
 8010078:	f04f 0600 	mov.w	r6, #0
 801007c:	196b      	adds	r3, r5, r5
 801007e:	eb46 0406 	adc.w	r4, r6, r6
 8010082:	461a      	mov	r2, r3
 8010084:	4623      	mov	r3, r4
 8010086:	f7f0 fe17 	bl	8000cb8 <__aeabi_uldivmod>
 801008a:	4603      	mov	r3, r0
 801008c:	460c      	mov	r4, r1
 801008e:	461a      	mov	r2, r3
 8010090:	4b6a      	ldr	r3, [pc, #424]	; (801023c <UART_SetConfig+0x384>)
 8010092:	fba3 1302 	umull	r1, r3, r3, r2
 8010096:	095b      	lsrs	r3, r3, #5
 8010098:	2164      	movs	r1, #100	; 0x64
 801009a:	fb01 f303 	mul.w	r3, r1, r3
 801009e:	1ad3      	subs	r3, r2, r3
 80100a0:	00db      	lsls	r3, r3, #3
 80100a2:	3332      	adds	r3, #50	; 0x32
 80100a4:	4a65      	ldr	r2, [pc, #404]	; (801023c <UART_SetConfig+0x384>)
 80100a6:	fba2 2303 	umull	r2, r3, r2, r3
 80100aa:	095b      	lsrs	r3, r3, #5
 80100ac:	f003 0207 	and.w	r2, r3, #7
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	4442      	add	r2, r8
 80100b6:	609a      	str	r2, [r3, #8]
 80100b8:	e26f      	b.n	801059a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80100ba:	f7fc fafb 	bl	800c6b4 <HAL_RCC_GetPCLK1Freq>
 80100be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80100c0:	68bb      	ldr	r3, [r7, #8]
 80100c2:	461d      	mov	r5, r3
 80100c4:	f04f 0600 	mov.w	r6, #0
 80100c8:	46a8      	mov	r8, r5
 80100ca:	46b1      	mov	r9, r6
 80100cc:	eb18 0308 	adds.w	r3, r8, r8
 80100d0:	eb49 0409 	adc.w	r4, r9, r9
 80100d4:	4698      	mov	r8, r3
 80100d6:	46a1      	mov	r9, r4
 80100d8:	eb18 0805 	adds.w	r8, r8, r5
 80100dc:	eb49 0906 	adc.w	r9, r9, r6
 80100e0:	f04f 0100 	mov.w	r1, #0
 80100e4:	f04f 0200 	mov.w	r2, #0
 80100e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80100ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80100f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80100f4:	4688      	mov	r8, r1
 80100f6:	4691      	mov	r9, r2
 80100f8:	eb18 0005 	adds.w	r0, r8, r5
 80100fc:	eb49 0106 	adc.w	r1, r9, r6
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	685b      	ldr	r3, [r3, #4]
 8010104:	461d      	mov	r5, r3
 8010106:	f04f 0600 	mov.w	r6, #0
 801010a:	196b      	adds	r3, r5, r5
 801010c:	eb46 0406 	adc.w	r4, r6, r6
 8010110:	461a      	mov	r2, r3
 8010112:	4623      	mov	r3, r4
 8010114:	f7f0 fdd0 	bl	8000cb8 <__aeabi_uldivmod>
 8010118:	4603      	mov	r3, r0
 801011a:	460c      	mov	r4, r1
 801011c:	461a      	mov	r2, r3
 801011e:	4b47      	ldr	r3, [pc, #284]	; (801023c <UART_SetConfig+0x384>)
 8010120:	fba3 2302 	umull	r2, r3, r3, r2
 8010124:	095b      	lsrs	r3, r3, #5
 8010126:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	461d      	mov	r5, r3
 801012e:	f04f 0600 	mov.w	r6, #0
 8010132:	46a9      	mov	r9, r5
 8010134:	46b2      	mov	sl, r6
 8010136:	eb19 0309 	adds.w	r3, r9, r9
 801013a:	eb4a 040a 	adc.w	r4, sl, sl
 801013e:	4699      	mov	r9, r3
 8010140:	46a2      	mov	sl, r4
 8010142:	eb19 0905 	adds.w	r9, r9, r5
 8010146:	eb4a 0a06 	adc.w	sl, sl, r6
 801014a:	f04f 0100 	mov.w	r1, #0
 801014e:	f04f 0200 	mov.w	r2, #0
 8010152:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010156:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801015a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801015e:	4689      	mov	r9, r1
 8010160:	4692      	mov	sl, r2
 8010162:	eb19 0005 	adds.w	r0, r9, r5
 8010166:	eb4a 0106 	adc.w	r1, sl, r6
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	685b      	ldr	r3, [r3, #4]
 801016e:	461d      	mov	r5, r3
 8010170:	f04f 0600 	mov.w	r6, #0
 8010174:	196b      	adds	r3, r5, r5
 8010176:	eb46 0406 	adc.w	r4, r6, r6
 801017a:	461a      	mov	r2, r3
 801017c:	4623      	mov	r3, r4
 801017e:	f7f0 fd9b 	bl	8000cb8 <__aeabi_uldivmod>
 8010182:	4603      	mov	r3, r0
 8010184:	460c      	mov	r4, r1
 8010186:	461a      	mov	r2, r3
 8010188:	4b2c      	ldr	r3, [pc, #176]	; (801023c <UART_SetConfig+0x384>)
 801018a:	fba3 1302 	umull	r1, r3, r3, r2
 801018e:	095b      	lsrs	r3, r3, #5
 8010190:	2164      	movs	r1, #100	; 0x64
 8010192:	fb01 f303 	mul.w	r3, r1, r3
 8010196:	1ad3      	subs	r3, r2, r3
 8010198:	00db      	lsls	r3, r3, #3
 801019a:	3332      	adds	r3, #50	; 0x32
 801019c:	4a27      	ldr	r2, [pc, #156]	; (801023c <UART_SetConfig+0x384>)
 801019e:	fba2 2303 	umull	r2, r3, r2, r3
 80101a2:	095b      	lsrs	r3, r3, #5
 80101a4:	005b      	lsls	r3, r3, #1
 80101a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80101aa:	4498      	add	r8, r3
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	461d      	mov	r5, r3
 80101b0:	f04f 0600 	mov.w	r6, #0
 80101b4:	46a9      	mov	r9, r5
 80101b6:	46b2      	mov	sl, r6
 80101b8:	eb19 0309 	adds.w	r3, r9, r9
 80101bc:	eb4a 040a 	adc.w	r4, sl, sl
 80101c0:	4699      	mov	r9, r3
 80101c2:	46a2      	mov	sl, r4
 80101c4:	eb19 0905 	adds.w	r9, r9, r5
 80101c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80101cc:	f04f 0100 	mov.w	r1, #0
 80101d0:	f04f 0200 	mov.w	r2, #0
 80101d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80101d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80101dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80101e0:	4689      	mov	r9, r1
 80101e2:	4692      	mov	sl, r2
 80101e4:	eb19 0005 	adds.w	r0, r9, r5
 80101e8:	eb4a 0106 	adc.w	r1, sl, r6
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	685b      	ldr	r3, [r3, #4]
 80101f0:	461d      	mov	r5, r3
 80101f2:	f04f 0600 	mov.w	r6, #0
 80101f6:	196b      	adds	r3, r5, r5
 80101f8:	eb46 0406 	adc.w	r4, r6, r6
 80101fc:	461a      	mov	r2, r3
 80101fe:	4623      	mov	r3, r4
 8010200:	f7f0 fd5a 	bl	8000cb8 <__aeabi_uldivmod>
 8010204:	4603      	mov	r3, r0
 8010206:	460c      	mov	r4, r1
 8010208:	461a      	mov	r2, r3
 801020a:	4b0c      	ldr	r3, [pc, #48]	; (801023c <UART_SetConfig+0x384>)
 801020c:	fba3 1302 	umull	r1, r3, r3, r2
 8010210:	095b      	lsrs	r3, r3, #5
 8010212:	2164      	movs	r1, #100	; 0x64
 8010214:	fb01 f303 	mul.w	r3, r1, r3
 8010218:	1ad3      	subs	r3, r2, r3
 801021a:	00db      	lsls	r3, r3, #3
 801021c:	3332      	adds	r3, #50	; 0x32
 801021e:	4a07      	ldr	r2, [pc, #28]	; (801023c <UART_SetConfig+0x384>)
 8010220:	fba2 2303 	umull	r2, r3, r2, r3
 8010224:	095b      	lsrs	r3, r3, #5
 8010226:	f003 0207 	and.w	r2, r3, #7
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	4442      	add	r2, r8
 8010230:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8010232:	e1b2      	b.n	801059a <UART_SetConfig+0x6e2>
 8010234:	40011000 	.word	0x40011000
 8010238:	40011400 	.word	0x40011400
 801023c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	4ad7      	ldr	r2, [pc, #860]	; (80105a4 <UART_SetConfig+0x6ec>)
 8010246:	4293      	cmp	r3, r2
 8010248:	d005      	beq.n	8010256 <UART_SetConfig+0x39e>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	4ad6      	ldr	r2, [pc, #856]	; (80105a8 <UART_SetConfig+0x6f0>)
 8010250:	4293      	cmp	r3, r2
 8010252:	f040 80d1 	bne.w	80103f8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8010256:	f7fc fa41 	bl	800c6dc <HAL_RCC_GetPCLK2Freq>
 801025a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	469a      	mov	sl, r3
 8010260:	f04f 0b00 	mov.w	fp, #0
 8010264:	46d0      	mov	r8, sl
 8010266:	46d9      	mov	r9, fp
 8010268:	eb18 0308 	adds.w	r3, r8, r8
 801026c:	eb49 0409 	adc.w	r4, r9, r9
 8010270:	4698      	mov	r8, r3
 8010272:	46a1      	mov	r9, r4
 8010274:	eb18 080a 	adds.w	r8, r8, sl
 8010278:	eb49 090b 	adc.w	r9, r9, fp
 801027c:	f04f 0100 	mov.w	r1, #0
 8010280:	f04f 0200 	mov.w	r2, #0
 8010284:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010288:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801028c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010290:	4688      	mov	r8, r1
 8010292:	4691      	mov	r9, r2
 8010294:	eb1a 0508 	adds.w	r5, sl, r8
 8010298:	eb4b 0609 	adc.w	r6, fp, r9
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	685b      	ldr	r3, [r3, #4]
 80102a0:	4619      	mov	r1, r3
 80102a2:	f04f 0200 	mov.w	r2, #0
 80102a6:	f04f 0300 	mov.w	r3, #0
 80102aa:	f04f 0400 	mov.w	r4, #0
 80102ae:	0094      	lsls	r4, r2, #2
 80102b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80102b4:	008b      	lsls	r3, r1, #2
 80102b6:	461a      	mov	r2, r3
 80102b8:	4623      	mov	r3, r4
 80102ba:	4628      	mov	r0, r5
 80102bc:	4631      	mov	r1, r6
 80102be:	f7f0 fcfb 	bl	8000cb8 <__aeabi_uldivmod>
 80102c2:	4603      	mov	r3, r0
 80102c4:	460c      	mov	r4, r1
 80102c6:	461a      	mov	r2, r3
 80102c8:	4bb8      	ldr	r3, [pc, #736]	; (80105ac <UART_SetConfig+0x6f4>)
 80102ca:	fba3 2302 	umull	r2, r3, r3, r2
 80102ce:	095b      	lsrs	r3, r3, #5
 80102d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	469b      	mov	fp, r3
 80102d8:	f04f 0c00 	mov.w	ip, #0
 80102dc:	46d9      	mov	r9, fp
 80102de:	46e2      	mov	sl, ip
 80102e0:	eb19 0309 	adds.w	r3, r9, r9
 80102e4:	eb4a 040a 	adc.w	r4, sl, sl
 80102e8:	4699      	mov	r9, r3
 80102ea:	46a2      	mov	sl, r4
 80102ec:	eb19 090b 	adds.w	r9, r9, fp
 80102f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80102f4:	f04f 0100 	mov.w	r1, #0
 80102f8:	f04f 0200 	mov.w	r2, #0
 80102fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010300:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010304:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010308:	4689      	mov	r9, r1
 801030a:	4692      	mov	sl, r2
 801030c:	eb1b 0509 	adds.w	r5, fp, r9
 8010310:	eb4c 060a 	adc.w	r6, ip, sl
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	685b      	ldr	r3, [r3, #4]
 8010318:	4619      	mov	r1, r3
 801031a:	f04f 0200 	mov.w	r2, #0
 801031e:	f04f 0300 	mov.w	r3, #0
 8010322:	f04f 0400 	mov.w	r4, #0
 8010326:	0094      	lsls	r4, r2, #2
 8010328:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801032c:	008b      	lsls	r3, r1, #2
 801032e:	461a      	mov	r2, r3
 8010330:	4623      	mov	r3, r4
 8010332:	4628      	mov	r0, r5
 8010334:	4631      	mov	r1, r6
 8010336:	f7f0 fcbf 	bl	8000cb8 <__aeabi_uldivmod>
 801033a:	4603      	mov	r3, r0
 801033c:	460c      	mov	r4, r1
 801033e:	461a      	mov	r2, r3
 8010340:	4b9a      	ldr	r3, [pc, #616]	; (80105ac <UART_SetConfig+0x6f4>)
 8010342:	fba3 1302 	umull	r1, r3, r3, r2
 8010346:	095b      	lsrs	r3, r3, #5
 8010348:	2164      	movs	r1, #100	; 0x64
 801034a:	fb01 f303 	mul.w	r3, r1, r3
 801034e:	1ad3      	subs	r3, r2, r3
 8010350:	011b      	lsls	r3, r3, #4
 8010352:	3332      	adds	r3, #50	; 0x32
 8010354:	4a95      	ldr	r2, [pc, #596]	; (80105ac <UART_SetConfig+0x6f4>)
 8010356:	fba2 2303 	umull	r2, r3, r2, r3
 801035a:	095b      	lsrs	r3, r3, #5
 801035c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010360:	4498      	add	r8, r3
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	469b      	mov	fp, r3
 8010366:	f04f 0c00 	mov.w	ip, #0
 801036a:	46d9      	mov	r9, fp
 801036c:	46e2      	mov	sl, ip
 801036e:	eb19 0309 	adds.w	r3, r9, r9
 8010372:	eb4a 040a 	adc.w	r4, sl, sl
 8010376:	4699      	mov	r9, r3
 8010378:	46a2      	mov	sl, r4
 801037a:	eb19 090b 	adds.w	r9, r9, fp
 801037e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010382:	f04f 0100 	mov.w	r1, #0
 8010386:	f04f 0200 	mov.w	r2, #0
 801038a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801038e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010392:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010396:	4689      	mov	r9, r1
 8010398:	4692      	mov	sl, r2
 801039a:	eb1b 0509 	adds.w	r5, fp, r9
 801039e:	eb4c 060a 	adc.w	r6, ip, sl
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	4619      	mov	r1, r3
 80103a8:	f04f 0200 	mov.w	r2, #0
 80103ac:	f04f 0300 	mov.w	r3, #0
 80103b0:	f04f 0400 	mov.w	r4, #0
 80103b4:	0094      	lsls	r4, r2, #2
 80103b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80103ba:	008b      	lsls	r3, r1, #2
 80103bc:	461a      	mov	r2, r3
 80103be:	4623      	mov	r3, r4
 80103c0:	4628      	mov	r0, r5
 80103c2:	4631      	mov	r1, r6
 80103c4:	f7f0 fc78 	bl	8000cb8 <__aeabi_uldivmod>
 80103c8:	4603      	mov	r3, r0
 80103ca:	460c      	mov	r4, r1
 80103cc:	461a      	mov	r2, r3
 80103ce:	4b77      	ldr	r3, [pc, #476]	; (80105ac <UART_SetConfig+0x6f4>)
 80103d0:	fba3 1302 	umull	r1, r3, r3, r2
 80103d4:	095b      	lsrs	r3, r3, #5
 80103d6:	2164      	movs	r1, #100	; 0x64
 80103d8:	fb01 f303 	mul.w	r3, r1, r3
 80103dc:	1ad3      	subs	r3, r2, r3
 80103de:	011b      	lsls	r3, r3, #4
 80103e0:	3332      	adds	r3, #50	; 0x32
 80103e2:	4a72      	ldr	r2, [pc, #456]	; (80105ac <UART_SetConfig+0x6f4>)
 80103e4:	fba2 2303 	umull	r2, r3, r2, r3
 80103e8:	095b      	lsrs	r3, r3, #5
 80103ea:	f003 020f 	and.w	r2, r3, #15
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	4442      	add	r2, r8
 80103f4:	609a      	str	r2, [r3, #8]
 80103f6:	e0d0      	b.n	801059a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80103f8:	f7fc f95c 	bl	800c6b4 <HAL_RCC_GetPCLK1Freq>
 80103fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	469a      	mov	sl, r3
 8010402:	f04f 0b00 	mov.w	fp, #0
 8010406:	46d0      	mov	r8, sl
 8010408:	46d9      	mov	r9, fp
 801040a:	eb18 0308 	adds.w	r3, r8, r8
 801040e:	eb49 0409 	adc.w	r4, r9, r9
 8010412:	4698      	mov	r8, r3
 8010414:	46a1      	mov	r9, r4
 8010416:	eb18 080a 	adds.w	r8, r8, sl
 801041a:	eb49 090b 	adc.w	r9, r9, fp
 801041e:	f04f 0100 	mov.w	r1, #0
 8010422:	f04f 0200 	mov.w	r2, #0
 8010426:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801042a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801042e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010432:	4688      	mov	r8, r1
 8010434:	4691      	mov	r9, r2
 8010436:	eb1a 0508 	adds.w	r5, sl, r8
 801043a:	eb4b 0609 	adc.w	r6, fp, r9
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	685b      	ldr	r3, [r3, #4]
 8010442:	4619      	mov	r1, r3
 8010444:	f04f 0200 	mov.w	r2, #0
 8010448:	f04f 0300 	mov.w	r3, #0
 801044c:	f04f 0400 	mov.w	r4, #0
 8010450:	0094      	lsls	r4, r2, #2
 8010452:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010456:	008b      	lsls	r3, r1, #2
 8010458:	461a      	mov	r2, r3
 801045a:	4623      	mov	r3, r4
 801045c:	4628      	mov	r0, r5
 801045e:	4631      	mov	r1, r6
 8010460:	f7f0 fc2a 	bl	8000cb8 <__aeabi_uldivmod>
 8010464:	4603      	mov	r3, r0
 8010466:	460c      	mov	r4, r1
 8010468:	461a      	mov	r2, r3
 801046a:	4b50      	ldr	r3, [pc, #320]	; (80105ac <UART_SetConfig+0x6f4>)
 801046c:	fba3 2302 	umull	r2, r3, r3, r2
 8010470:	095b      	lsrs	r3, r3, #5
 8010472:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	469b      	mov	fp, r3
 801047a:	f04f 0c00 	mov.w	ip, #0
 801047e:	46d9      	mov	r9, fp
 8010480:	46e2      	mov	sl, ip
 8010482:	eb19 0309 	adds.w	r3, r9, r9
 8010486:	eb4a 040a 	adc.w	r4, sl, sl
 801048a:	4699      	mov	r9, r3
 801048c:	46a2      	mov	sl, r4
 801048e:	eb19 090b 	adds.w	r9, r9, fp
 8010492:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010496:	f04f 0100 	mov.w	r1, #0
 801049a:	f04f 0200 	mov.w	r2, #0
 801049e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80104a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80104a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80104aa:	4689      	mov	r9, r1
 80104ac:	4692      	mov	sl, r2
 80104ae:	eb1b 0509 	adds.w	r5, fp, r9
 80104b2:	eb4c 060a 	adc.w	r6, ip, sl
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	4619      	mov	r1, r3
 80104bc:	f04f 0200 	mov.w	r2, #0
 80104c0:	f04f 0300 	mov.w	r3, #0
 80104c4:	f04f 0400 	mov.w	r4, #0
 80104c8:	0094      	lsls	r4, r2, #2
 80104ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80104ce:	008b      	lsls	r3, r1, #2
 80104d0:	461a      	mov	r2, r3
 80104d2:	4623      	mov	r3, r4
 80104d4:	4628      	mov	r0, r5
 80104d6:	4631      	mov	r1, r6
 80104d8:	f7f0 fbee 	bl	8000cb8 <__aeabi_uldivmod>
 80104dc:	4603      	mov	r3, r0
 80104de:	460c      	mov	r4, r1
 80104e0:	461a      	mov	r2, r3
 80104e2:	4b32      	ldr	r3, [pc, #200]	; (80105ac <UART_SetConfig+0x6f4>)
 80104e4:	fba3 1302 	umull	r1, r3, r3, r2
 80104e8:	095b      	lsrs	r3, r3, #5
 80104ea:	2164      	movs	r1, #100	; 0x64
 80104ec:	fb01 f303 	mul.w	r3, r1, r3
 80104f0:	1ad3      	subs	r3, r2, r3
 80104f2:	011b      	lsls	r3, r3, #4
 80104f4:	3332      	adds	r3, #50	; 0x32
 80104f6:	4a2d      	ldr	r2, [pc, #180]	; (80105ac <UART_SetConfig+0x6f4>)
 80104f8:	fba2 2303 	umull	r2, r3, r2, r3
 80104fc:	095b      	lsrs	r3, r3, #5
 80104fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010502:	4498      	add	r8, r3
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	469b      	mov	fp, r3
 8010508:	f04f 0c00 	mov.w	ip, #0
 801050c:	46d9      	mov	r9, fp
 801050e:	46e2      	mov	sl, ip
 8010510:	eb19 0309 	adds.w	r3, r9, r9
 8010514:	eb4a 040a 	adc.w	r4, sl, sl
 8010518:	4699      	mov	r9, r3
 801051a:	46a2      	mov	sl, r4
 801051c:	eb19 090b 	adds.w	r9, r9, fp
 8010520:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010524:	f04f 0100 	mov.w	r1, #0
 8010528:	f04f 0200 	mov.w	r2, #0
 801052c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010530:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010534:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010538:	4689      	mov	r9, r1
 801053a:	4692      	mov	sl, r2
 801053c:	eb1b 0509 	adds.w	r5, fp, r9
 8010540:	eb4c 060a 	adc.w	r6, ip, sl
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	685b      	ldr	r3, [r3, #4]
 8010548:	4619      	mov	r1, r3
 801054a:	f04f 0200 	mov.w	r2, #0
 801054e:	f04f 0300 	mov.w	r3, #0
 8010552:	f04f 0400 	mov.w	r4, #0
 8010556:	0094      	lsls	r4, r2, #2
 8010558:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801055c:	008b      	lsls	r3, r1, #2
 801055e:	461a      	mov	r2, r3
 8010560:	4623      	mov	r3, r4
 8010562:	4628      	mov	r0, r5
 8010564:	4631      	mov	r1, r6
 8010566:	f7f0 fba7 	bl	8000cb8 <__aeabi_uldivmod>
 801056a:	4603      	mov	r3, r0
 801056c:	460c      	mov	r4, r1
 801056e:	461a      	mov	r2, r3
 8010570:	4b0e      	ldr	r3, [pc, #56]	; (80105ac <UART_SetConfig+0x6f4>)
 8010572:	fba3 1302 	umull	r1, r3, r3, r2
 8010576:	095b      	lsrs	r3, r3, #5
 8010578:	2164      	movs	r1, #100	; 0x64
 801057a:	fb01 f303 	mul.w	r3, r1, r3
 801057e:	1ad3      	subs	r3, r2, r3
 8010580:	011b      	lsls	r3, r3, #4
 8010582:	3332      	adds	r3, #50	; 0x32
 8010584:	4a09      	ldr	r2, [pc, #36]	; (80105ac <UART_SetConfig+0x6f4>)
 8010586:	fba2 2303 	umull	r2, r3, r2, r3
 801058a:	095b      	lsrs	r3, r3, #5
 801058c:	f003 020f 	and.w	r2, r3, #15
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	4442      	add	r2, r8
 8010596:	609a      	str	r2, [r3, #8]
}
 8010598:	e7ff      	b.n	801059a <UART_SetConfig+0x6e2>
 801059a:	bf00      	nop
 801059c:	3714      	adds	r7, #20
 801059e:	46bd      	mov	sp, r7
 80105a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a4:	40011000 	.word	0x40011000
 80105a8:	40011400 	.word	0x40011400
 80105ac:	51eb851f 	.word	0x51eb851f

080105b0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80105b0:	b084      	sub	sp, #16
 80105b2:	b480      	push	{r7}
 80105b4:	b085      	sub	sp, #20
 80105b6:	af00      	add	r7, sp, #0
 80105b8:	6078      	str	r0, [r7, #4]
 80105ba:	f107 001c 	add.w	r0, r7, #28
 80105be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80105c2:	2300      	movs	r3, #0
 80105c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80105c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80105c8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80105ca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80105cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80105ce:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80105d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80105d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80105d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80105d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80105d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80105da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80105dc:	68fa      	ldr	r2, [r7, #12]
 80105de:	4313      	orrs	r3, r2
 80105e0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80105ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80105ee:	68fa      	ldr	r2, [r7, #12]
 80105f0:	431a      	orrs	r2, r3
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80105f6:	2300      	movs	r3, #0
}
 80105f8:	4618      	mov	r0, r3
 80105fa:	3714      	adds	r7, #20
 80105fc:	46bd      	mov	sp, r7
 80105fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010602:	b004      	add	sp, #16
 8010604:	4770      	bx	lr

08010606 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8010606:	b480      	push	{r7}
 8010608:	b083      	sub	sp, #12
 801060a:	af00      	add	r7, sp, #0
 801060c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010614:	4618      	mov	r0, r3
 8010616:	370c      	adds	r7, #12
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr

08010620 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010620:	b480      	push	{r7}
 8010622:	b083      	sub	sp, #12
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	681a      	ldr	r2, [r3, #0]
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010634:	2300      	movs	r3, #0
}
 8010636:	4618      	mov	r0, r3
 8010638:	370c      	adds	r7, #12
 801063a:	46bd      	mov	sp, r7
 801063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010640:	4770      	bx	lr

08010642 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8010642:	b580      	push	{r7, lr}
 8010644:	b082      	sub	sp, #8
 8010646:	af00      	add	r7, sp, #0
 8010648:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2203      	movs	r2, #3
 801064e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010650:	2002      	movs	r0, #2
 8010652:	f7f9 fbdd 	bl	8009e10 <HAL_Delay>
  
  return HAL_OK;
 8010656:	2300      	movs	r3, #0
}
 8010658:	4618      	mov	r0, r3
 801065a:	3708      	adds	r7, #8
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}

08010660 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010660:	b480      	push	{r7}
 8010662:	b083      	sub	sp, #12
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	f003 0303 	and.w	r3, r3, #3
}
 8010670:	4618      	mov	r0, r3
 8010672:	370c      	adds	r7, #12
 8010674:	46bd      	mov	sp, r7
 8010676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067a:	4770      	bx	lr

0801067c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 801067c:	b480      	push	{r7}
 801067e:	b085      	sub	sp, #20
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010686:	2300      	movs	r3, #0
 8010688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 801068a:	683b      	ldr	r3, [r7, #0]
 801068c:	681a      	ldr	r2, [r3, #0]
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801069a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801069c:	683b      	ldr	r3, [r7, #0]
 801069e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80106a0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80106a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80106a8:	68fa      	ldr	r2, [r7, #12]
 80106aa:	4313      	orrs	r3, r2
 80106ac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	68db      	ldr	r3, [r3, #12]
 80106b2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80106b6:	f023 030f 	bic.w	r3, r3, #15
 80106ba:	68fa      	ldr	r2, [r7, #12]
 80106bc:	431a      	orrs	r2, r3
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80106c2:	2300      	movs	r3, #0
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3714      	adds	r7, #20
 80106c8:	46bd      	mov	sp, r7
 80106ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ce:	4770      	bx	lr

080106d0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80106d0:	b480      	push	{r7}
 80106d2:	b083      	sub	sp, #12
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	691b      	ldr	r3, [r3, #16]
 80106dc:	b2db      	uxtb	r3, r3
}
 80106de:	4618      	mov	r0, r3
 80106e0:	370c      	adds	r7, #12
 80106e2:	46bd      	mov	sp, r7
 80106e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e8:	4770      	bx	lr

080106ea <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80106ea:	b480      	push	{r7}
 80106ec:	b085      	sub	sp, #20
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	6078      	str	r0, [r7, #4]
 80106f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	3314      	adds	r3, #20
 80106f8:	461a      	mov	r2, r3
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	4413      	add	r3, r2
 80106fe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	681b      	ldr	r3, [r3, #0]
}  
 8010704:	4618      	mov	r0, r3
 8010706:	3714      	adds	r7, #20
 8010708:	46bd      	mov	sp, r7
 801070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070e:	4770      	bx	lr

08010710 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010710:	b480      	push	{r7}
 8010712:	b085      	sub	sp, #20
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801071a:	2300      	movs	r3, #0
 801071c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 801071e:	683b      	ldr	r3, [r7, #0]
 8010720:	681a      	ldr	r2, [r3, #0]
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	685a      	ldr	r2, [r3, #4]
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010736:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801073c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010742:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010744:	68fa      	ldr	r2, [r7, #12]
 8010746:	4313      	orrs	r3, r2
 8010748:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801074e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	431a      	orrs	r2, r3
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801075a:	2300      	movs	r3, #0

}
 801075c:	4618      	mov	r0, r3
 801075e:	3714      	adds	r7, #20
 8010760:	46bd      	mov	sp, r7
 8010762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010766:	4770      	bx	lr

08010768 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b088      	sub	sp, #32
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
 8010770:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010776:	2310      	movs	r3, #16
 8010778:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801077a:	2340      	movs	r3, #64	; 0x40
 801077c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801077e:	2300      	movs	r3, #0
 8010780:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010786:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010788:	f107 0308 	add.w	r3, r7, #8
 801078c:	4619      	mov	r1, r3
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f7ff ff74 	bl	801067c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8010794:	f241 3288 	movw	r2, #5000	; 0x1388
 8010798:	2110      	movs	r1, #16
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f000 fa40 	bl	8010c20 <SDMMC_GetCmdResp1>
 80107a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107a2:	69fb      	ldr	r3, [r7, #28]
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3720      	adds	r7, #32
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b088      	sub	sp, #32
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
 80107b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80107ba:	2311      	movs	r3, #17
 80107bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80107be:	2340      	movs	r3, #64	; 0x40
 80107c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107c2:	2300      	movs	r3, #0
 80107c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80107cc:	f107 0308 	add.w	r3, r7, #8
 80107d0:	4619      	mov	r1, r3
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f7ff ff52 	bl	801067c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80107d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80107dc:	2111      	movs	r1, #17
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f000 fa1e 	bl	8010c20 <SDMMC_GetCmdResp1>
 80107e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107e6:	69fb      	ldr	r3, [r7, #28]
}
 80107e8:	4618      	mov	r0, r3
 80107ea:	3720      	adds	r7, #32
 80107ec:	46bd      	mov	sp, r7
 80107ee:	bd80      	pop	{r7, pc}

080107f0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b088      	sub	sp, #32
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80107fe:	2312      	movs	r3, #18
 8010800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010802:	2340      	movs	r3, #64	; 0x40
 8010804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010806:	2300      	movs	r3, #0
 8010808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801080a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801080e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010810:	f107 0308 	add.w	r3, r7, #8
 8010814:	4619      	mov	r1, r3
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f7ff ff30 	bl	801067c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801081c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010820:	2112      	movs	r1, #18
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f000 f9fc 	bl	8010c20 <SDMMC_GetCmdResp1>
 8010828:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801082a:	69fb      	ldr	r3, [r7, #28]
}
 801082c:	4618      	mov	r0, r3
 801082e:	3720      	adds	r7, #32
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b088      	sub	sp, #32
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010842:	2318      	movs	r3, #24
 8010844:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010846:	2340      	movs	r3, #64	; 0x40
 8010848:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801084a:	2300      	movs	r3, #0
 801084c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801084e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010852:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010854:	f107 0308 	add.w	r3, r7, #8
 8010858:	4619      	mov	r1, r3
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f7ff ff0e 	bl	801067c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010860:	f241 3288 	movw	r2, #5000	; 0x1388
 8010864:	2118      	movs	r1, #24
 8010866:	6878      	ldr	r0, [r7, #4]
 8010868:	f000 f9da 	bl	8010c20 <SDMMC_GetCmdResp1>
 801086c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801086e:	69fb      	ldr	r3, [r7, #28]
}
 8010870:	4618      	mov	r0, r3
 8010872:	3720      	adds	r7, #32
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}

08010878 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b088      	sub	sp, #32
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010886:	2319      	movs	r3, #25
 8010888:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801088a:	2340      	movs	r3, #64	; 0x40
 801088c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801088e:	2300      	movs	r3, #0
 8010890:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010896:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010898:	f107 0308 	add.w	r3, r7, #8
 801089c:	4619      	mov	r1, r3
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f7ff feec 	bl	801067c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80108a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80108a8:	2119      	movs	r1, #25
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	f000 f9b8 	bl	8010c20 <SDMMC_GetCmdResp1>
 80108b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108b2:	69fb      	ldr	r3, [r7, #28]
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3720      	adds	r7, #32
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b088      	sub	sp, #32
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80108c4:	2300      	movs	r3, #0
 80108c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80108c8:	230c      	movs	r3, #12
 80108ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108cc:	2340      	movs	r3, #64	; 0x40
 80108ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108d0:	2300      	movs	r3, #0
 80108d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108da:	f107 0308 	add.w	r3, r7, #8
 80108de:	4619      	mov	r1, r3
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f7ff fecb 	bl	801067c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80108e6:	4a05      	ldr	r2, [pc, #20]	; (80108fc <SDMMC_CmdStopTransfer+0x40>)
 80108e8:	210c      	movs	r1, #12
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f000 f998 	bl	8010c20 <SDMMC_GetCmdResp1>
 80108f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108f2:	69fb      	ldr	r3, [r7, #28]
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3720      	adds	r7, #32
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}
 80108fc:	05f5e100 	.word	0x05f5e100

08010900 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b08a      	sub	sp, #40	; 0x28
 8010904:	af00      	add	r7, sp, #0
 8010906:	60f8      	str	r0, [r7, #12]
 8010908:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010910:	2307      	movs	r3, #7
 8010912:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010914:	2340      	movs	r3, #64	; 0x40
 8010916:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010918:	2300      	movs	r3, #0
 801091a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801091c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010920:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010922:	f107 0310 	add.w	r3, r7, #16
 8010926:	4619      	mov	r1, r3
 8010928:	68f8      	ldr	r0, [r7, #12]
 801092a:	f7ff fea7 	bl	801067c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 801092e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010932:	2107      	movs	r1, #7
 8010934:	68f8      	ldr	r0, [r7, #12]
 8010936:	f000 f973 	bl	8010c20 <SDMMC_GetCmdResp1>
 801093a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801093e:	4618      	mov	r0, r3
 8010940:	3728      	adds	r7, #40	; 0x28
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}

08010946 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010946:	b580      	push	{r7, lr}
 8010948:	b088      	sub	sp, #32
 801094a:	af00      	add	r7, sp, #0
 801094c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801094e:	2300      	movs	r3, #0
 8010950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010952:	2300      	movs	r3, #0
 8010954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010956:	2300      	movs	r3, #0
 8010958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801095a:	2300      	movs	r3, #0
 801095c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010962:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010964:	f107 0308 	add.w	r3, r7, #8
 8010968:	4619      	mov	r1, r3
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f7ff fe86 	bl	801067c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f000 f92d 	bl	8010bd0 <SDMMC_GetCmdError>
 8010976:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010978:	69fb      	ldr	r3, [r7, #28]
}
 801097a:	4618      	mov	r0, r3
 801097c:	3720      	adds	r7, #32
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}

08010982 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010982:	b580      	push	{r7, lr}
 8010984:	b088      	sub	sp, #32
 8010986:	af00      	add	r7, sp, #0
 8010988:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801098a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801098e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010990:	2308      	movs	r3, #8
 8010992:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010994:	2340      	movs	r3, #64	; 0x40
 8010996:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010998:	2300      	movs	r3, #0
 801099a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801099c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109a2:	f107 0308 	add.w	r3, r7, #8
 80109a6:	4619      	mov	r1, r3
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f7ff fe67 	bl	801067c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f000 fb16 	bl	8010fe0 <SDMMC_GetCmdResp7>
 80109b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109b6:	69fb      	ldr	r3, [r7, #28]
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3720      	adds	r7, #32
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}

080109c0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b088      	sub	sp, #32
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80109ce:	2337      	movs	r3, #55	; 0x37
 80109d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109d2:	2340      	movs	r3, #64	; 0x40
 80109d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109d6:	2300      	movs	r3, #0
 80109d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109e0:	f107 0308 	add.w	r3, r7, #8
 80109e4:	4619      	mov	r1, r3
 80109e6:	6878      	ldr	r0, [r7, #4]
 80109e8:	f7ff fe48 	bl	801067c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80109ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80109f0:	2137      	movs	r1, #55	; 0x37
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f000 f914 	bl	8010c20 <SDMMC_GetCmdResp1>
 80109f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109fa:	69fb      	ldr	r3, [r7, #28]
}
 80109fc:	4618      	mov	r0, r3
 80109fe:	3720      	adds	r7, #32
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}

08010a04 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b088      	sub	sp, #32
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010a14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010a1a:	2329      	movs	r3, #41	; 0x29
 8010a1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a1e:	2340      	movs	r3, #64	; 0x40
 8010a20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a22:	2300      	movs	r3, #0
 8010a24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a2c:	f107 0308 	add.w	r3, r7, #8
 8010a30:	4619      	mov	r1, r3
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f7ff fe22 	bl	801067c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f000 fa23 	bl	8010e84 <SDMMC_GetCmdResp3>
 8010a3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a40:	69fb      	ldr	r3, [r7, #28]
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	3720      	adds	r7, #32
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}

08010a4a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010a4a:	b580      	push	{r7, lr}
 8010a4c:	b088      	sub	sp, #32
 8010a4e:	af00      	add	r7, sp, #0
 8010a50:	6078      	str	r0, [r7, #4]
 8010a52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010a54:	683b      	ldr	r3, [r7, #0]
 8010a56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010a58:	2306      	movs	r3, #6
 8010a5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a5c:	2340      	movs	r3, #64	; 0x40
 8010a5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a60:	2300      	movs	r3, #0
 8010a62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a6a:	f107 0308 	add.w	r3, r7, #8
 8010a6e:	4619      	mov	r1, r3
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f7ff fe03 	bl	801067c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a7a:	2106      	movs	r1, #6
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f000 f8cf 	bl	8010c20 <SDMMC_GetCmdResp1>
 8010a82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a84:	69fb      	ldr	r3, [r7, #28]
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3720      	adds	r7, #32
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}

08010a8e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010a8e:	b580      	push	{r7, lr}
 8010a90:	b088      	sub	sp, #32
 8010a92:	af00      	add	r7, sp, #0
 8010a94:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010a96:	2300      	movs	r3, #0
 8010a98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010a9a:	2333      	movs	r3, #51	; 0x33
 8010a9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a9e:	2340      	movs	r3, #64	; 0x40
 8010aa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010aaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010aac:	f107 0308 	add.w	r3, r7, #8
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	6878      	ldr	r0, [r7, #4]
 8010ab4:	f7ff fde2 	bl	801067c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010abc:	2133      	movs	r1, #51	; 0x33
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f000 f8ae 	bl	8010c20 <SDMMC_GetCmdResp1>
 8010ac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ac6:	69fb      	ldr	r3, [r7, #28]
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3720      	adds	r7, #32
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}

08010ad0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b088      	sub	sp, #32
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010ad8:	2300      	movs	r3, #0
 8010ada:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010adc:	2302      	movs	r3, #2
 8010ade:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010ae0:	23c0      	movs	r3, #192	; 0xc0
 8010ae2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010ae8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010aec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010aee:	f107 0308 	add.w	r3, r7, #8
 8010af2:	4619      	mov	r1, r3
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f7ff fdc1 	bl	801067c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010afa:	6878      	ldr	r0, [r7, #4]
 8010afc:	f000 f97c 	bl	8010df8 <SDMMC_GetCmdResp2>
 8010b00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b02:	69fb      	ldr	r3, [r7, #28]
}
 8010b04:	4618      	mov	r0, r3
 8010b06:	3720      	adds	r7, #32
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}

08010b0c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b088      	sub	sp, #32
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010b1a:	2309      	movs	r3, #9
 8010b1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010b1e:	23c0      	movs	r3, #192	; 0xc0
 8010b20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b22:	2300      	movs	r3, #0
 8010b24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b2c:	f107 0308 	add.w	r3, r7, #8
 8010b30:	4619      	mov	r1, r3
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f7ff fda2 	bl	801067c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	f000 f95d 	bl	8010df8 <SDMMC_GetCmdResp2>
 8010b3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b40:	69fb      	ldr	r3, [r7, #28]
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3720      	adds	r7, #32
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}

08010b4a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010b4a:	b580      	push	{r7, lr}
 8010b4c:	b088      	sub	sp, #32
 8010b4e:	af00      	add	r7, sp, #0
 8010b50:	6078      	str	r0, [r7, #4]
 8010b52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010b54:	2300      	movs	r3, #0
 8010b56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010b58:	2303      	movs	r3, #3
 8010b5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b5c:	2340      	movs	r3, #64	; 0x40
 8010b5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b60:	2300      	movs	r3, #0
 8010b62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b6a:	f107 0308 	add.w	r3, r7, #8
 8010b6e:	4619      	mov	r1, r3
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f7ff fd83 	bl	801067c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010b76:	683a      	ldr	r2, [r7, #0]
 8010b78:	2103      	movs	r1, #3
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f000 f9bc 	bl	8010ef8 <SDMMC_GetCmdResp6>
 8010b80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b82:	69fb      	ldr	r3, [r7, #28]
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3720      	adds	r7, #32
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}

08010b8c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b088      	sub	sp, #32
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
 8010b94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010b9a:	230d      	movs	r3, #13
 8010b9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b9e:	2340      	movs	r3, #64	; 0x40
 8010ba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010baa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010bac:	f107 0308 	add.w	r3, r7, #8
 8010bb0:	4619      	mov	r1, r3
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	f7ff fd62 	bl	801067c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bbc:	210d      	movs	r1, #13
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f000 f82e 	bl	8010c20 <SDMMC_GetCmdResp1>
 8010bc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bc6:	69fb      	ldr	r3, [r7, #28]
}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	3720      	adds	r7, #32
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}

08010bd0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010bd0:	b490      	push	{r4, r7}
 8010bd2:	b082      	sub	sp, #8
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010bd8:	4b0f      	ldr	r3, [pc, #60]	; (8010c18 <SDMMC_GetCmdError+0x48>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	4a0f      	ldr	r2, [pc, #60]	; (8010c1c <SDMMC_GetCmdError+0x4c>)
 8010bde:	fba2 2303 	umull	r2, r3, r2, r3
 8010be2:	0a5b      	lsrs	r3, r3, #9
 8010be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010be8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010bec:	4623      	mov	r3, r4
 8010bee:	1e5c      	subs	r4, r3, #1
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d102      	bne.n	8010bfa <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010bf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010bf8:	e009      	b.n	8010c0e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d0f2      	beq.n	8010bec <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	22c5      	movs	r2, #197	; 0xc5
 8010c0a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010c0c:	2300      	movs	r3, #0
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	3708      	adds	r7, #8
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bc90      	pop	{r4, r7}
 8010c16:	4770      	bx	lr
 8010c18:	20000000 	.word	0x20000000
 8010c1c:	10624dd3 	.word	0x10624dd3

08010c20 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010c20:	b590      	push	{r4, r7, lr}
 8010c22:	b087      	sub	sp, #28
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	60f8      	str	r0, [r7, #12]
 8010c28:	460b      	mov	r3, r1
 8010c2a:	607a      	str	r2, [r7, #4]
 8010c2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010c2e:	4b6f      	ldr	r3, [pc, #444]	; (8010dec <SDMMC_GetCmdResp1+0x1cc>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	4a6f      	ldr	r2, [pc, #444]	; (8010df0 <SDMMC_GetCmdResp1+0x1d0>)
 8010c34:	fba2 2303 	umull	r2, r3, r2, r3
 8010c38:	0a5b      	lsrs	r3, r3, #9
 8010c3a:	687a      	ldr	r2, [r7, #4]
 8010c3c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010c40:	4623      	mov	r3, r4
 8010c42:	1e5c      	subs	r4, r3, #1
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d102      	bne.n	8010c4e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c4c:	e0c9      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c52:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d0f0      	beq.n	8010c40 <SDMMC_GetCmdResp1+0x20>
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d1eb      	bne.n	8010c40 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c6c:	f003 0304 	and.w	r3, r3, #4
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d004      	beq.n	8010c7e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2204      	movs	r2, #4
 8010c78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c7a:	2304      	movs	r3, #4
 8010c7c:	e0b1      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c82:	f003 0301 	and.w	r3, r3, #1
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d004      	beq.n	8010c94 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	2201      	movs	r2, #1
 8010c8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010c90:	2301      	movs	r3, #1
 8010c92:	e0a6      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	22c5      	movs	r2, #197	; 0xc5
 8010c98:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010c9a:	68f8      	ldr	r0, [r7, #12]
 8010c9c:	f7ff fd18 	bl	80106d0 <SDIO_GetCommandResponse>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	461a      	mov	r2, r3
 8010ca4:	7afb      	ldrb	r3, [r7, #11]
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d001      	beq.n	8010cae <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010caa:	2301      	movs	r3, #1
 8010cac:	e099      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010cae:	2100      	movs	r1, #0
 8010cb0:	68f8      	ldr	r0, [r7, #12]
 8010cb2:	f7ff fd1a 	bl	80106ea <SDIO_GetResponse>
 8010cb6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010cb8:	693a      	ldr	r2, [r7, #16]
 8010cba:	4b4e      	ldr	r3, [pc, #312]	; (8010df4 <SDMMC_GetCmdResp1+0x1d4>)
 8010cbc:	4013      	ands	r3, r2
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d101      	bne.n	8010cc6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	e08d      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010cc6:	693b      	ldr	r3, [r7, #16]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	da02      	bge.n	8010cd2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010ccc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010cd0:	e087      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d001      	beq.n	8010ce0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010cdc:	2340      	movs	r3, #64	; 0x40
 8010cde:	e080      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d001      	beq.n	8010cee <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010cea:	2380      	movs	r3, #128	; 0x80
 8010cec:	e079      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d002      	beq.n	8010cfe <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010cfc:	e071      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d002      	beq.n	8010d0e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d0c:	e069      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010d0e:	693b      	ldr	r3, [r7, #16]
 8010d10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d002      	beq.n	8010d1e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d1c:	e061      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d002      	beq.n	8010d2e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010d28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010d2c:	e059      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010d2e:	693b      	ldr	r3, [r7, #16]
 8010d30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d002      	beq.n	8010d3e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d3c:	e051      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010d3e:	693b      	ldr	r3, [r7, #16]
 8010d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d002      	beq.n	8010d4e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010d4c:	e049      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d002      	beq.n	8010d5e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010d58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010d5c:	e041      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010d5e:	693b      	ldr	r3, [r7, #16]
 8010d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d002      	beq.n	8010d6e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010d68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d6c:	e039      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010d6e:	693b      	ldr	r3, [r7, #16]
 8010d70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d002      	beq.n	8010d7e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010d7c:	e031      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010d7e:	693b      	ldr	r3, [r7, #16]
 8010d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d002      	beq.n	8010d8e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010d88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010d8c:	e029      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010d8e:	693b      	ldr	r3, [r7, #16]
 8010d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d002      	beq.n	8010d9e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010d98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010d9c:	e021      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010d9e:	693b      	ldr	r3, [r7, #16]
 8010da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d002      	beq.n	8010dae <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010da8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010dac:	e019      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010dae:	693b      	ldr	r3, [r7, #16]
 8010db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d002      	beq.n	8010dbe <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010db8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010dbc:	e011      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d002      	beq.n	8010dce <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010dc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010dcc:	e009      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010dce:	693b      	ldr	r3, [r7, #16]
 8010dd0:	f003 0308 	and.w	r3, r3, #8
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d002      	beq.n	8010dde <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010dd8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010ddc:	e001      	b.n	8010de2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	371c      	adds	r7, #28
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd90      	pop	{r4, r7, pc}
 8010dea:	bf00      	nop
 8010dec:	20000000 	.word	0x20000000
 8010df0:	10624dd3 	.word	0x10624dd3
 8010df4:	fdffe008 	.word	0xfdffe008

08010df8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010df8:	b490      	push	{r4, r7}
 8010dfa:	b084      	sub	sp, #16
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010e00:	4b1e      	ldr	r3, [pc, #120]	; (8010e7c <SDMMC_GetCmdResp2+0x84>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	4a1e      	ldr	r2, [pc, #120]	; (8010e80 <SDMMC_GetCmdResp2+0x88>)
 8010e06:	fba2 2303 	umull	r2, r3, r2, r3
 8010e0a:	0a5b      	lsrs	r3, r3, #9
 8010e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010e14:	4623      	mov	r3, r4
 8010e16:	1e5c      	subs	r4, r3, #1
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d102      	bne.n	8010e22 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e20:	e026      	b.n	8010e70 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e26:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d0f0      	beq.n	8010e14 <SDMMC_GetCmdResp2+0x1c>
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d1eb      	bne.n	8010e14 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e40:	f003 0304 	and.w	r3, r3, #4
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d004      	beq.n	8010e52 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2204      	movs	r2, #4
 8010e4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e4e:	2304      	movs	r3, #4
 8010e50:	e00e      	b.n	8010e70 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e56:	f003 0301 	and.w	r3, r3, #1
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d004      	beq.n	8010e68 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2201      	movs	r2, #1
 8010e62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e64:	2301      	movs	r3, #1
 8010e66:	e003      	b.n	8010e70 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	22c5      	movs	r2, #197	; 0xc5
 8010e6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010e6e:	2300      	movs	r3, #0
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3710      	adds	r7, #16
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bc90      	pop	{r4, r7}
 8010e78:	4770      	bx	lr
 8010e7a:	bf00      	nop
 8010e7c:	20000000 	.word	0x20000000
 8010e80:	10624dd3 	.word	0x10624dd3

08010e84 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010e84:	b490      	push	{r4, r7}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010e8c:	4b18      	ldr	r3, [pc, #96]	; (8010ef0 <SDMMC_GetCmdResp3+0x6c>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	4a18      	ldr	r2, [pc, #96]	; (8010ef4 <SDMMC_GetCmdResp3+0x70>)
 8010e92:	fba2 2303 	umull	r2, r3, r2, r3
 8010e96:	0a5b      	lsrs	r3, r3, #9
 8010e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e9c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010ea0:	4623      	mov	r3, r4
 8010ea2:	1e5c      	subs	r4, r3, #1
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d102      	bne.n	8010eae <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ea8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010eac:	e01b      	b.n	8010ee6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010eb2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d0f0      	beq.n	8010ea0 <SDMMC_GetCmdResp3+0x1c>
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d1eb      	bne.n	8010ea0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ecc:	f003 0304 	and.w	r3, r3, #4
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d004      	beq.n	8010ede <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2204      	movs	r2, #4
 8010ed8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010eda:	2304      	movs	r3, #4
 8010edc:	e003      	b.n	8010ee6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	22c5      	movs	r2, #197	; 0xc5
 8010ee2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010ee4:	2300      	movs	r3, #0
}
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	3710      	adds	r7, #16
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bc90      	pop	{r4, r7}
 8010eee:	4770      	bx	lr
 8010ef0:	20000000 	.word	0x20000000
 8010ef4:	10624dd3 	.word	0x10624dd3

08010ef8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010ef8:	b590      	push	{r4, r7, lr}
 8010efa:	b087      	sub	sp, #28
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	460b      	mov	r3, r1
 8010f02:	607a      	str	r2, [r7, #4]
 8010f04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010f06:	4b34      	ldr	r3, [pc, #208]	; (8010fd8 <SDMMC_GetCmdResp6+0xe0>)
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4a34      	ldr	r2, [pc, #208]	; (8010fdc <SDMMC_GetCmdResp6+0xe4>)
 8010f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8010f10:	0a5b      	lsrs	r3, r3, #9
 8010f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f16:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010f1a:	4623      	mov	r3, r4
 8010f1c:	1e5c      	subs	r4, r3, #1
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d102      	bne.n	8010f28 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f26:	e052      	b.n	8010fce <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f2c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d0f0      	beq.n	8010f1a <SDMMC_GetCmdResp6+0x22>
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d1eb      	bne.n	8010f1a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f46:	f003 0304 	and.w	r3, r3, #4
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d004      	beq.n	8010f58 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	2204      	movs	r2, #4
 8010f52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f54:	2304      	movs	r3, #4
 8010f56:	e03a      	b.n	8010fce <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f5c:	f003 0301 	and.w	r3, r3, #1
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d004      	beq.n	8010f6e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	2201      	movs	r2, #1
 8010f68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	e02f      	b.n	8010fce <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010f6e:	68f8      	ldr	r0, [r7, #12]
 8010f70:	f7ff fbae 	bl	80106d0 <SDIO_GetCommandResponse>
 8010f74:	4603      	mov	r3, r0
 8010f76:	461a      	mov	r2, r3
 8010f78:	7afb      	ldrb	r3, [r7, #11]
 8010f7a:	4293      	cmp	r3, r2
 8010f7c:	d001      	beq.n	8010f82 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f7e:	2301      	movs	r3, #1
 8010f80:	e025      	b.n	8010fce <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	22c5      	movs	r2, #197	; 0xc5
 8010f86:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010f88:	2100      	movs	r1, #0
 8010f8a:	68f8      	ldr	r0, [r7, #12]
 8010f8c:	f7ff fbad 	bl	80106ea <SDIO_GetResponse>
 8010f90:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010f92:	693b      	ldr	r3, [r7, #16]
 8010f94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d106      	bne.n	8010faa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	0c1b      	lsrs	r3, r3, #16
 8010fa0:	b29a      	uxth	r2, r3
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010fa6:	2300      	movs	r3, #0
 8010fa8:	e011      	b.n	8010fce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d002      	beq.n	8010fba <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010fb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010fb8:	e009      	b.n	8010fce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d002      	beq.n	8010fca <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010fc8:	e001      	b.n	8010fce <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	371c      	adds	r7, #28
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd90      	pop	{r4, r7, pc}
 8010fd6:	bf00      	nop
 8010fd8:	20000000 	.word	0x20000000
 8010fdc:	10624dd3 	.word	0x10624dd3

08010fe0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010fe0:	b490      	push	{r4, r7}
 8010fe2:	b084      	sub	sp, #16
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010fe8:	4b21      	ldr	r3, [pc, #132]	; (8011070 <SDMMC_GetCmdResp7+0x90>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	4a21      	ldr	r2, [pc, #132]	; (8011074 <SDMMC_GetCmdResp7+0x94>)
 8010fee:	fba2 2303 	umull	r2, r3, r2, r3
 8010ff2:	0a5b      	lsrs	r3, r3, #9
 8010ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ff8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010ffc:	4623      	mov	r3, r4
 8010ffe:	1e5c      	subs	r4, r3, #1
 8011000:	2b00      	cmp	r3, #0
 8011002:	d102      	bne.n	801100a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011004:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011008:	e02c      	b.n	8011064 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801100e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011016:	2b00      	cmp	r3, #0
 8011018:	d0f0      	beq.n	8010ffc <SDMMC_GetCmdResp7+0x1c>
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011020:	2b00      	cmp	r3, #0
 8011022:	d1eb      	bne.n	8010ffc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011028:	f003 0304 	and.w	r3, r3, #4
 801102c:	2b00      	cmp	r3, #0
 801102e:	d004      	beq.n	801103a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	2204      	movs	r2, #4
 8011034:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011036:	2304      	movs	r3, #4
 8011038:	e014      	b.n	8011064 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801103e:	f003 0301 	and.w	r3, r3, #1
 8011042:	2b00      	cmp	r3, #0
 8011044:	d004      	beq.n	8011050 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	2201      	movs	r2, #1
 801104a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801104c:	2301      	movs	r3, #1
 801104e:	e009      	b.n	8011064 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011058:	2b00      	cmp	r3, #0
 801105a:	d002      	beq.n	8011062 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2240      	movs	r2, #64	; 0x40
 8011060:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011062:	2300      	movs	r3, #0
  
}
 8011064:	4618      	mov	r0, r3
 8011066:	3710      	adds	r7, #16
 8011068:	46bd      	mov	sp, r7
 801106a:	bc90      	pop	{r4, r7}
 801106c:	4770      	bx	lr
 801106e:	bf00      	nop
 8011070:	20000000 	.word	0x20000000
 8011074:	10624dd3 	.word	0x10624dd3

08011078 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011078:	b580      	push	{r7, lr}
 801107a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801107c:	4904      	ldr	r1, [pc, #16]	; (8011090 <MX_FATFS_Init+0x18>)
 801107e:	4805      	ldr	r0, [pc, #20]	; (8011094 <MX_FATFS_Init+0x1c>)
 8011080:	f003 fb9c 	bl	80147bc <FATFS_LinkDriver>
 8011084:	4603      	mov	r3, r0
 8011086:	461a      	mov	r2, r3
 8011088:	4b03      	ldr	r3, [pc, #12]	; (8011098 <MX_FATFS_Init+0x20>)
 801108a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801108c:	bf00      	nop
 801108e:	bd80      	pop	{r7, pc}
 8011090:	20044c30 	.word	0x20044c30
 8011094:	0801a110 	.word	0x0801a110
 8011098:	20044c2c 	.word	0x20044c2c

0801109c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80110a2:	2300      	movs	r3, #0
 80110a4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80110a6:	f000 f896 	bl	80111d6 <BSP_SD_IsDetected>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	d001      	beq.n	80110b4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80110b0:	2301      	movs	r3, #1
 80110b2:	e012      	b.n	80110da <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80110b4:	480b      	ldr	r0, [pc, #44]	; (80110e4 <BSP_SD_Init+0x48>)
 80110b6:	f7fb ffa5 	bl	800d004 <HAL_SD_Init>
 80110ba:	4603      	mov	r3, r0
 80110bc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80110be:	79fb      	ldrb	r3, [r7, #7]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d109      	bne.n	80110d8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80110c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80110c8:	4806      	ldr	r0, [pc, #24]	; (80110e4 <BSP_SD_Init+0x48>)
 80110ca:	f7fc fd4f 	bl	800db6c <HAL_SD_ConfigWideBusOperation>
 80110ce:	4603      	mov	r3, r0
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d001      	beq.n	80110d8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80110d4:	2301      	movs	r3, #1
 80110d6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80110d8:	79fb      	ldrb	r3, [r7, #7]
}
 80110da:	4618      	mov	r0, r3
 80110dc:	3708      	adds	r7, #8
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}
 80110e2:	bf00      	nop
 80110e4:	20044a2c 	.word	0x20044a2c

080110e8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80110e8:	b580      	push	{r7, lr}
 80110ea:	b086      	sub	sp, #24
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	60b9      	str	r1, [r7, #8]
 80110f2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80110f4:	2300      	movs	r3, #0
 80110f6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	68ba      	ldr	r2, [r7, #8]
 80110fc:	68f9      	ldr	r1, [r7, #12]
 80110fe:	4806      	ldr	r0, [pc, #24]	; (8011118 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011100:	f7fc f810 	bl	800d124 <HAL_SD_ReadBlocks_DMA>
 8011104:	4603      	mov	r3, r0
 8011106:	2b00      	cmp	r3, #0
 8011108:	d001      	beq.n	801110e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801110a:	2301      	movs	r3, #1
 801110c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801110e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011110:	4618      	mov	r0, r3
 8011112:	3718      	adds	r7, #24
 8011114:	46bd      	mov	sp, r7
 8011116:	bd80      	pop	{r7, pc}
 8011118:	20044a2c 	.word	0x20044a2c

0801111c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b086      	sub	sp, #24
 8011120:	af00      	add	r7, sp, #0
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	60b9      	str	r1, [r7, #8]
 8011126:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011128:	2300      	movs	r3, #0
 801112a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	68ba      	ldr	r2, [r7, #8]
 8011130:	68f9      	ldr	r1, [r7, #12]
 8011132:	4806      	ldr	r0, [pc, #24]	; (801114c <BSP_SD_WriteBlocks_DMA+0x30>)
 8011134:	f7fc f8de 	bl	800d2f4 <HAL_SD_WriteBlocks_DMA>
 8011138:	4603      	mov	r3, r0
 801113a:	2b00      	cmp	r3, #0
 801113c:	d001      	beq.n	8011142 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801113e:	2301      	movs	r3, #1
 8011140:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011142:	7dfb      	ldrb	r3, [r7, #23]
}
 8011144:	4618      	mov	r0, r3
 8011146:	3718      	adds	r7, #24
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}
 801114c:	20044a2c 	.word	0x20044a2c

08011150 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011154:	4805      	ldr	r0, [pc, #20]	; (801116c <BSP_SD_GetCardState+0x1c>)
 8011156:	f7fc fd85 	bl	800dc64 <HAL_SD_GetCardState>
 801115a:	4603      	mov	r3, r0
 801115c:	2b04      	cmp	r3, #4
 801115e:	bf14      	ite	ne
 8011160:	2301      	movne	r3, #1
 8011162:	2300      	moveq	r3, #0
 8011164:	b2db      	uxtb	r3, r3
}
 8011166:	4618      	mov	r0, r3
 8011168:	bd80      	pop	{r7, pc}
 801116a:	bf00      	nop
 801116c:	20044a2c 	.word	0x20044a2c

08011170 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b082      	sub	sp, #8
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011178:	6879      	ldr	r1, [r7, #4]
 801117a:	4803      	ldr	r0, [pc, #12]	; (8011188 <BSP_SD_GetCardInfo+0x18>)
 801117c:	f7fc fcca 	bl	800db14 <HAL_SD_GetCardInfo>
}
 8011180:	bf00      	nop
 8011182:	3708      	adds	r7, #8
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}
 8011188:	20044a2c 	.word	0x20044a2c

0801118c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b082      	sub	sp, #8
 8011190:	af00      	add	r7, sp, #0
 8011192:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8011194:	f000 f818 	bl	80111c8 <BSP_SD_AbortCallback>
}
 8011198:	bf00      	nop
 801119a:	3708      	adds	r7, #8
 801119c:	46bd      	mov	sp, r7
 801119e:	bd80      	pop	{r7, pc}

080111a0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b082      	sub	sp, #8
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80111a8:	f000 f9a8 	bl	80114fc <BSP_SD_WriteCpltCallback>
}
 80111ac:	bf00      	nop
 80111ae:	3708      	adds	r7, #8
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd80      	pop	{r7, pc}

080111b4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80111bc:	f000 f9aa 	bl	8011514 <BSP_SD_ReadCpltCallback>
}
 80111c0:	bf00      	nop
 80111c2:	3708      	adds	r7, #8
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}

080111c8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80111c8:	b480      	push	{r7}
 80111ca:	af00      	add	r7, sp, #0

}
 80111cc:	bf00      	nop
 80111ce:	46bd      	mov	sp, r7
 80111d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d4:	4770      	bx	lr

080111d6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80111d6:	b580      	push	{r7, lr}
 80111d8:	b082      	sub	sp, #8
 80111da:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80111dc:	2301      	movs	r3, #1
 80111de:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80111e0:	f000 f80c 	bl	80111fc <BSP_PlatformIsDetected>
 80111e4:	4603      	mov	r3, r0
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d101      	bne.n	80111ee <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80111ea:	2300      	movs	r3, #0
 80111ec:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80111ee:	79fb      	ldrb	r3, [r7, #7]
 80111f0:	b2db      	uxtb	r3, r3
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	3708      	adds	r7, #8
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}
	...

080111fc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b082      	sub	sp, #8
 8011200:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011202:	2301      	movs	r3, #1
 8011204:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011206:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801120a:	4806      	ldr	r0, [pc, #24]	; (8011224 <BSP_PlatformIsDetected+0x28>)
 801120c:	f7fa f87e 	bl	800b30c <HAL_GPIO_ReadPin>
 8011210:	4603      	mov	r3, r0
 8011212:	2b00      	cmp	r3, #0
 8011214:	d001      	beq.n	801121a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011216:	2300      	movs	r3, #0
 8011218:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801121a:	79fb      	ldrb	r3, [r7, #7]
}
 801121c:	4618      	mov	r0, r3
 801121e:	3708      	adds	r7, #8
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}
 8011224:	40020000 	.word	0x40020000

08011228 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b084      	sub	sp, #16
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011230:	f7f8 fde2 	bl	8009df8 <HAL_GetTick>
 8011234:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011236:	e006      	b.n	8011246 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011238:	f7ff ff8a 	bl	8011150 <BSP_SD_GetCardState>
 801123c:	4603      	mov	r3, r0
 801123e:	2b00      	cmp	r3, #0
 8011240:	d101      	bne.n	8011246 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011242:	2300      	movs	r3, #0
 8011244:	e009      	b.n	801125a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011246:	f7f8 fdd7 	bl	8009df8 <HAL_GetTick>
 801124a:	4602      	mov	r2, r0
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	1ad3      	subs	r3, r2, r3
 8011250:	687a      	ldr	r2, [r7, #4]
 8011252:	429a      	cmp	r2, r3
 8011254:	d8f0      	bhi.n	8011238 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011256:	f04f 33ff 	mov.w	r3, #4294967295
}
 801125a:	4618      	mov	r0, r3
 801125c:	3710      	adds	r7, #16
 801125e:	46bd      	mov	sp, r7
 8011260:	bd80      	pop	{r7, pc}
	...

08011264 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b082      	sub	sp, #8
 8011268:	af00      	add	r7, sp, #0
 801126a:	4603      	mov	r3, r0
 801126c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801126e:	4b0b      	ldr	r3, [pc, #44]	; (801129c <SD_CheckStatus+0x38>)
 8011270:	2201      	movs	r2, #1
 8011272:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011274:	f7ff ff6c 	bl	8011150 <BSP_SD_GetCardState>
 8011278:	4603      	mov	r3, r0
 801127a:	2b00      	cmp	r3, #0
 801127c:	d107      	bne.n	801128e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801127e:	4b07      	ldr	r3, [pc, #28]	; (801129c <SD_CheckStatus+0x38>)
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	b2db      	uxtb	r3, r3
 8011284:	f023 0301 	bic.w	r3, r3, #1
 8011288:	b2da      	uxtb	r2, r3
 801128a:	4b04      	ldr	r3, [pc, #16]	; (801129c <SD_CheckStatus+0x38>)
 801128c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801128e:	4b03      	ldr	r3, [pc, #12]	; (801129c <SD_CheckStatus+0x38>)
 8011290:	781b      	ldrb	r3, [r3, #0]
 8011292:	b2db      	uxtb	r3, r3
}
 8011294:	4618      	mov	r0, r3
 8011296:	3708      	adds	r7, #8
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}
 801129c:	20000009 	.word	0x20000009

080112a0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b082      	sub	sp, #8
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	4603      	mov	r3, r0
 80112a8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80112aa:	f7ff fef7 	bl	801109c <BSP_SD_Init>
 80112ae:	4603      	mov	r3, r0
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d107      	bne.n	80112c4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80112b4:	79fb      	ldrb	r3, [r7, #7]
 80112b6:	4618      	mov	r0, r3
 80112b8:	f7ff ffd4 	bl	8011264 <SD_CheckStatus>
 80112bc:	4603      	mov	r3, r0
 80112be:	461a      	mov	r2, r3
 80112c0:	4b04      	ldr	r3, [pc, #16]	; (80112d4 <SD_initialize+0x34>)
 80112c2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80112c4:	4b03      	ldr	r3, [pc, #12]	; (80112d4 <SD_initialize+0x34>)
 80112c6:	781b      	ldrb	r3, [r3, #0]
 80112c8:	b2db      	uxtb	r3, r3
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	3708      	adds	r7, #8
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}
 80112d2:	bf00      	nop
 80112d4:	20000009 	.word	0x20000009

080112d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
 80112de:	4603      	mov	r3, r0
 80112e0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80112e2:	79fb      	ldrb	r3, [r7, #7]
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7ff ffbd 	bl	8011264 <SD_CheckStatus>
 80112ea:	4603      	mov	r3, r0
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	3708      	adds	r7, #8
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd80      	pop	{r7, pc}

080112f4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80112f4:	b580      	push	{r7, lr}
 80112f6:	b086      	sub	sp, #24
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	60b9      	str	r1, [r7, #8]
 80112fc:	607a      	str	r2, [r7, #4]
 80112fe:	603b      	str	r3, [r7, #0]
 8011300:	4603      	mov	r3, r0
 8011302:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011304:	2301      	movs	r3, #1
 8011306:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011308:	f247 5030 	movw	r0, #30000	; 0x7530
 801130c:	f7ff ff8c 	bl	8011228 <SD_CheckStatusWithTimeout>
 8011310:	4603      	mov	r3, r0
 8011312:	2b00      	cmp	r3, #0
 8011314:	da01      	bge.n	801131a <SD_read+0x26>
  {
    return res;
 8011316:	7dfb      	ldrb	r3, [r7, #23]
 8011318:	e03b      	b.n	8011392 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801131a:	683a      	ldr	r2, [r7, #0]
 801131c:	6879      	ldr	r1, [r7, #4]
 801131e:	68b8      	ldr	r0, [r7, #8]
 8011320:	f7ff fee2 	bl	80110e8 <BSP_SD_ReadBlocks_DMA>
 8011324:	4603      	mov	r3, r0
 8011326:	2b00      	cmp	r3, #0
 8011328:	d132      	bne.n	8011390 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801132a:	4b1c      	ldr	r3, [pc, #112]	; (801139c <SD_read+0xa8>)
 801132c:	2200      	movs	r2, #0
 801132e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011330:	f7f8 fd62 	bl	8009df8 <HAL_GetTick>
 8011334:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011336:	bf00      	nop
 8011338:	4b18      	ldr	r3, [pc, #96]	; (801139c <SD_read+0xa8>)
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d108      	bne.n	8011352 <SD_read+0x5e>
 8011340:	f7f8 fd5a 	bl	8009df8 <HAL_GetTick>
 8011344:	4602      	mov	r2, r0
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	1ad3      	subs	r3, r2, r3
 801134a:	f247 522f 	movw	r2, #29999	; 0x752f
 801134e:	4293      	cmp	r3, r2
 8011350:	d9f2      	bls.n	8011338 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8011352:	4b12      	ldr	r3, [pc, #72]	; (801139c <SD_read+0xa8>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d102      	bne.n	8011360 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801135a:	2301      	movs	r3, #1
 801135c:	75fb      	strb	r3, [r7, #23]
 801135e:	e017      	b.n	8011390 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011360:	4b0e      	ldr	r3, [pc, #56]	; (801139c <SD_read+0xa8>)
 8011362:	2200      	movs	r2, #0
 8011364:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011366:	f7f8 fd47 	bl	8009df8 <HAL_GetTick>
 801136a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801136c:	e007      	b.n	801137e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801136e:	f7ff feef 	bl	8011150 <BSP_SD_GetCardState>
 8011372:	4603      	mov	r3, r0
 8011374:	2b00      	cmp	r3, #0
 8011376:	d102      	bne.n	801137e <SD_read+0x8a>
          {
            res = RES_OK;
 8011378:	2300      	movs	r3, #0
 801137a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801137c:	e008      	b.n	8011390 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801137e:	f7f8 fd3b 	bl	8009df8 <HAL_GetTick>
 8011382:	4602      	mov	r2, r0
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	1ad3      	subs	r3, r2, r3
 8011388:	f247 522f 	movw	r2, #29999	; 0x752f
 801138c:	4293      	cmp	r3, r2
 801138e:	d9ee      	bls.n	801136e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011390:	7dfb      	ldrb	r3, [r7, #23]
}
 8011392:	4618      	mov	r0, r3
 8011394:	3718      	adds	r7, #24
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}
 801139a:	bf00      	nop
 801139c:	200422c8 	.word	0x200422c8

080113a0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b086      	sub	sp, #24
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	60b9      	str	r1, [r7, #8]
 80113a8:	607a      	str	r2, [r7, #4]
 80113aa:	603b      	str	r3, [r7, #0]
 80113ac:	4603      	mov	r3, r0
 80113ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80113b0:	2301      	movs	r3, #1
 80113b2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80113b4:	4b24      	ldr	r3, [pc, #144]	; (8011448 <SD_write+0xa8>)
 80113b6:	2200      	movs	r2, #0
 80113b8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80113ba:	f247 5030 	movw	r0, #30000	; 0x7530
 80113be:	f7ff ff33 	bl	8011228 <SD_CheckStatusWithTimeout>
 80113c2:	4603      	mov	r3, r0
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	da01      	bge.n	80113cc <SD_write+0x2c>
  {
    return res;
 80113c8:	7dfb      	ldrb	r3, [r7, #23]
 80113ca:	e038      	b.n	801143e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80113cc:	683a      	ldr	r2, [r7, #0]
 80113ce:	6879      	ldr	r1, [r7, #4]
 80113d0:	68b8      	ldr	r0, [r7, #8]
 80113d2:	f7ff fea3 	bl	801111c <BSP_SD_WriteBlocks_DMA>
 80113d6:	4603      	mov	r3, r0
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d12f      	bne.n	801143c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80113dc:	f7f8 fd0c 	bl	8009df8 <HAL_GetTick>
 80113e0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80113e2:	bf00      	nop
 80113e4:	4b18      	ldr	r3, [pc, #96]	; (8011448 <SD_write+0xa8>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d108      	bne.n	80113fe <SD_write+0x5e>
 80113ec:	f7f8 fd04 	bl	8009df8 <HAL_GetTick>
 80113f0:	4602      	mov	r2, r0
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	1ad3      	subs	r3, r2, r3
 80113f6:	f247 522f 	movw	r2, #29999	; 0x752f
 80113fa:	4293      	cmp	r3, r2
 80113fc:	d9f2      	bls.n	80113e4 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80113fe:	4b12      	ldr	r3, [pc, #72]	; (8011448 <SD_write+0xa8>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d102      	bne.n	801140c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8011406:	2301      	movs	r3, #1
 8011408:	75fb      	strb	r3, [r7, #23]
 801140a:	e017      	b.n	801143c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801140c:	4b0e      	ldr	r3, [pc, #56]	; (8011448 <SD_write+0xa8>)
 801140e:	2200      	movs	r2, #0
 8011410:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011412:	f7f8 fcf1 	bl	8009df8 <HAL_GetTick>
 8011416:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011418:	e007      	b.n	801142a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801141a:	f7ff fe99 	bl	8011150 <BSP_SD_GetCardState>
 801141e:	4603      	mov	r3, r0
 8011420:	2b00      	cmp	r3, #0
 8011422:	d102      	bne.n	801142a <SD_write+0x8a>
          {
            res = RES_OK;
 8011424:	2300      	movs	r3, #0
 8011426:	75fb      	strb	r3, [r7, #23]
            break;
 8011428:	e008      	b.n	801143c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801142a:	f7f8 fce5 	bl	8009df8 <HAL_GetTick>
 801142e:	4602      	mov	r2, r0
 8011430:	693b      	ldr	r3, [r7, #16]
 8011432:	1ad3      	subs	r3, r2, r3
 8011434:	f247 522f 	movw	r2, #29999	; 0x752f
 8011438:	4293      	cmp	r3, r2
 801143a:	d9ee      	bls.n	801141a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801143c:	7dfb      	ldrb	r3, [r7, #23]
}
 801143e:	4618      	mov	r0, r3
 8011440:	3718      	adds	r7, #24
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}
 8011446:	bf00      	nop
 8011448:	200422c4 	.word	0x200422c4

0801144c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b08c      	sub	sp, #48	; 0x30
 8011450:	af00      	add	r7, sp, #0
 8011452:	4603      	mov	r3, r0
 8011454:	603a      	str	r2, [r7, #0]
 8011456:	71fb      	strb	r3, [r7, #7]
 8011458:	460b      	mov	r3, r1
 801145a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801145c:	2301      	movs	r3, #1
 801145e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011462:	4b25      	ldr	r3, [pc, #148]	; (80114f8 <SD_ioctl+0xac>)
 8011464:	781b      	ldrb	r3, [r3, #0]
 8011466:	b2db      	uxtb	r3, r3
 8011468:	f003 0301 	and.w	r3, r3, #1
 801146c:	2b00      	cmp	r3, #0
 801146e:	d001      	beq.n	8011474 <SD_ioctl+0x28>
 8011470:	2303      	movs	r3, #3
 8011472:	e03c      	b.n	80114ee <SD_ioctl+0xa2>

  switch (cmd)
 8011474:	79bb      	ldrb	r3, [r7, #6]
 8011476:	2b03      	cmp	r3, #3
 8011478:	d834      	bhi.n	80114e4 <SD_ioctl+0x98>
 801147a:	a201      	add	r2, pc, #4	; (adr r2, 8011480 <SD_ioctl+0x34>)
 801147c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011480:	08011491 	.word	0x08011491
 8011484:	08011499 	.word	0x08011499
 8011488:	080114b1 	.word	0x080114b1
 801148c:	080114cb 	.word	0x080114cb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011490:	2300      	movs	r3, #0
 8011492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011496:	e028      	b.n	80114ea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011498:	f107 030c 	add.w	r3, r7, #12
 801149c:	4618      	mov	r0, r3
 801149e:	f7ff fe67 	bl	8011170 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80114a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80114a8:	2300      	movs	r3, #0
 80114aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80114ae:	e01c      	b.n	80114ea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80114b0:	f107 030c 	add.w	r3, r7, #12
 80114b4:	4618      	mov	r0, r3
 80114b6:	f7ff fe5b 	bl	8011170 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80114ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114bc:	b29a      	uxth	r2, r3
 80114be:	683b      	ldr	r3, [r7, #0]
 80114c0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80114c2:	2300      	movs	r3, #0
 80114c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80114c8:	e00f      	b.n	80114ea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80114ca:	f107 030c 	add.w	r3, r7, #12
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7ff fe4e 	bl	8011170 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80114d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114d6:	0a5a      	lsrs	r2, r3, #9
 80114d8:	683b      	ldr	r3, [r7, #0]
 80114da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80114dc:	2300      	movs	r3, #0
 80114de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80114e2:	e002      	b.n	80114ea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80114e4:	2304      	movs	r3, #4
 80114e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80114ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	3730      	adds	r7, #48	; 0x30
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}
 80114f6:	bf00      	nop
 80114f8:	20000009 	.word	0x20000009

080114fc <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80114fc:	b480      	push	{r7}
 80114fe:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011500:	4b03      	ldr	r3, [pc, #12]	; (8011510 <BSP_SD_WriteCpltCallback+0x14>)
 8011502:	2201      	movs	r2, #1
 8011504:	601a      	str	r2, [r3, #0]
}
 8011506:	bf00      	nop
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr
 8011510:	200422c4 	.word	0x200422c4

08011514 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011514:	b480      	push	{r7}
 8011516:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011518:	4b03      	ldr	r3, [pc, #12]	; (8011528 <BSP_SD_ReadCpltCallback+0x14>)
 801151a:	2201      	movs	r2, #1
 801151c:	601a      	str	r2, [r3, #0]
}
 801151e:	bf00      	nop
 8011520:	46bd      	mov	sp, r7
 8011522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011526:	4770      	bx	lr
 8011528:	200422c8 	.word	0x200422c8

0801152c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b084      	sub	sp, #16
 8011530:	af00      	add	r7, sp, #0
 8011532:	4603      	mov	r3, r0
 8011534:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011536:	79fb      	ldrb	r3, [r7, #7]
 8011538:	4a08      	ldr	r2, [pc, #32]	; (801155c <disk_status+0x30>)
 801153a:	009b      	lsls	r3, r3, #2
 801153c:	4413      	add	r3, r2
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	685b      	ldr	r3, [r3, #4]
 8011542:	79fa      	ldrb	r2, [r7, #7]
 8011544:	4905      	ldr	r1, [pc, #20]	; (801155c <disk_status+0x30>)
 8011546:	440a      	add	r2, r1
 8011548:	7a12      	ldrb	r2, [r2, #8]
 801154a:	4610      	mov	r0, r2
 801154c:	4798      	blx	r3
 801154e:	4603      	mov	r3, r0
 8011550:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011552:	7bfb      	ldrb	r3, [r7, #15]
}
 8011554:	4618      	mov	r0, r3
 8011556:	3710      	adds	r7, #16
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}
 801155c:	200422f4 	.word	0x200422f4

08011560 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b084      	sub	sp, #16
 8011564:	af00      	add	r7, sp, #0
 8011566:	4603      	mov	r3, r0
 8011568:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801156a:	2300      	movs	r3, #0
 801156c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801156e:	79fb      	ldrb	r3, [r7, #7]
 8011570:	4a0d      	ldr	r2, [pc, #52]	; (80115a8 <disk_initialize+0x48>)
 8011572:	5cd3      	ldrb	r3, [r2, r3]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d111      	bne.n	801159c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011578:	79fb      	ldrb	r3, [r7, #7]
 801157a:	4a0b      	ldr	r2, [pc, #44]	; (80115a8 <disk_initialize+0x48>)
 801157c:	2101      	movs	r1, #1
 801157e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011580:	79fb      	ldrb	r3, [r7, #7]
 8011582:	4a09      	ldr	r2, [pc, #36]	; (80115a8 <disk_initialize+0x48>)
 8011584:	009b      	lsls	r3, r3, #2
 8011586:	4413      	add	r3, r2
 8011588:	685b      	ldr	r3, [r3, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	79fa      	ldrb	r2, [r7, #7]
 801158e:	4906      	ldr	r1, [pc, #24]	; (80115a8 <disk_initialize+0x48>)
 8011590:	440a      	add	r2, r1
 8011592:	7a12      	ldrb	r2, [r2, #8]
 8011594:	4610      	mov	r0, r2
 8011596:	4798      	blx	r3
 8011598:	4603      	mov	r3, r0
 801159a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801159c:	7bfb      	ldrb	r3, [r7, #15]
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3710      	adds	r7, #16
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}
 80115a6:	bf00      	nop
 80115a8:	200422f4 	.word	0x200422f4

080115ac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80115ac:	b590      	push	{r4, r7, lr}
 80115ae:	b087      	sub	sp, #28
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	60b9      	str	r1, [r7, #8]
 80115b4:	607a      	str	r2, [r7, #4]
 80115b6:	603b      	str	r3, [r7, #0]
 80115b8:	4603      	mov	r3, r0
 80115ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80115bc:	7bfb      	ldrb	r3, [r7, #15]
 80115be:	4a0a      	ldr	r2, [pc, #40]	; (80115e8 <disk_read+0x3c>)
 80115c0:	009b      	lsls	r3, r3, #2
 80115c2:	4413      	add	r3, r2
 80115c4:	685b      	ldr	r3, [r3, #4]
 80115c6:	689c      	ldr	r4, [r3, #8]
 80115c8:	7bfb      	ldrb	r3, [r7, #15]
 80115ca:	4a07      	ldr	r2, [pc, #28]	; (80115e8 <disk_read+0x3c>)
 80115cc:	4413      	add	r3, r2
 80115ce:	7a18      	ldrb	r0, [r3, #8]
 80115d0:	683b      	ldr	r3, [r7, #0]
 80115d2:	687a      	ldr	r2, [r7, #4]
 80115d4:	68b9      	ldr	r1, [r7, #8]
 80115d6:	47a0      	blx	r4
 80115d8:	4603      	mov	r3, r0
 80115da:	75fb      	strb	r3, [r7, #23]
  return res;
 80115dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80115de:	4618      	mov	r0, r3
 80115e0:	371c      	adds	r7, #28
 80115e2:	46bd      	mov	sp, r7
 80115e4:	bd90      	pop	{r4, r7, pc}
 80115e6:	bf00      	nop
 80115e8:	200422f4 	.word	0x200422f4

080115ec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80115ec:	b590      	push	{r4, r7, lr}
 80115ee:	b087      	sub	sp, #28
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	60b9      	str	r1, [r7, #8]
 80115f4:	607a      	str	r2, [r7, #4]
 80115f6:	603b      	str	r3, [r7, #0]
 80115f8:	4603      	mov	r3, r0
 80115fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80115fc:	7bfb      	ldrb	r3, [r7, #15]
 80115fe:	4a0a      	ldr	r2, [pc, #40]	; (8011628 <disk_write+0x3c>)
 8011600:	009b      	lsls	r3, r3, #2
 8011602:	4413      	add	r3, r2
 8011604:	685b      	ldr	r3, [r3, #4]
 8011606:	68dc      	ldr	r4, [r3, #12]
 8011608:	7bfb      	ldrb	r3, [r7, #15]
 801160a:	4a07      	ldr	r2, [pc, #28]	; (8011628 <disk_write+0x3c>)
 801160c:	4413      	add	r3, r2
 801160e:	7a18      	ldrb	r0, [r3, #8]
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	687a      	ldr	r2, [r7, #4]
 8011614:	68b9      	ldr	r1, [r7, #8]
 8011616:	47a0      	blx	r4
 8011618:	4603      	mov	r3, r0
 801161a:	75fb      	strb	r3, [r7, #23]
  return res;
 801161c:	7dfb      	ldrb	r3, [r7, #23]
}
 801161e:	4618      	mov	r0, r3
 8011620:	371c      	adds	r7, #28
 8011622:	46bd      	mov	sp, r7
 8011624:	bd90      	pop	{r4, r7, pc}
 8011626:	bf00      	nop
 8011628:	200422f4 	.word	0x200422f4

0801162c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b084      	sub	sp, #16
 8011630:	af00      	add	r7, sp, #0
 8011632:	4603      	mov	r3, r0
 8011634:	603a      	str	r2, [r7, #0]
 8011636:	71fb      	strb	r3, [r7, #7]
 8011638:	460b      	mov	r3, r1
 801163a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801163c:	79fb      	ldrb	r3, [r7, #7]
 801163e:	4a09      	ldr	r2, [pc, #36]	; (8011664 <disk_ioctl+0x38>)
 8011640:	009b      	lsls	r3, r3, #2
 8011642:	4413      	add	r3, r2
 8011644:	685b      	ldr	r3, [r3, #4]
 8011646:	691b      	ldr	r3, [r3, #16]
 8011648:	79fa      	ldrb	r2, [r7, #7]
 801164a:	4906      	ldr	r1, [pc, #24]	; (8011664 <disk_ioctl+0x38>)
 801164c:	440a      	add	r2, r1
 801164e:	7a10      	ldrb	r0, [r2, #8]
 8011650:	79b9      	ldrb	r1, [r7, #6]
 8011652:	683a      	ldr	r2, [r7, #0]
 8011654:	4798      	blx	r3
 8011656:	4603      	mov	r3, r0
 8011658:	73fb      	strb	r3, [r7, #15]
  return res;
 801165a:	7bfb      	ldrb	r3, [r7, #15]
}
 801165c:	4618      	mov	r0, r3
 801165e:	3710      	adds	r7, #16
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}
 8011664:	200422f4 	.word	0x200422f4

08011668 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011668:	b480      	push	{r7}
 801166a:	b085      	sub	sp, #20
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	3301      	adds	r3, #1
 8011674:	781b      	ldrb	r3, [r3, #0]
 8011676:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011678:	89fb      	ldrh	r3, [r7, #14]
 801167a:	021b      	lsls	r3, r3, #8
 801167c:	b21a      	sxth	r2, r3
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	781b      	ldrb	r3, [r3, #0]
 8011682:	b21b      	sxth	r3, r3
 8011684:	4313      	orrs	r3, r2
 8011686:	b21b      	sxth	r3, r3
 8011688:	81fb      	strh	r3, [r7, #14]
	return rv;
 801168a:	89fb      	ldrh	r3, [r7, #14]
}
 801168c:	4618      	mov	r0, r3
 801168e:	3714      	adds	r7, #20
 8011690:	46bd      	mov	sp, r7
 8011692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011696:	4770      	bx	lr

08011698 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011698:	b480      	push	{r7}
 801169a:	b085      	sub	sp, #20
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	3303      	adds	r3, #3
 80116a4:	781b      	ldrb	r3, [r3, #0]
 80116a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	021b      	lsls	r3, r3, #8
 80116ac:	687a      	ldr	r2, [r7, #4]
 80116ae:	3202      	adds	r2, #2
 80116b0:	7812      	ldrb	r2, [r2, #0]
 80116b2:	4313      	orrs	r3, r2
 80116b4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	021b      	lsls	r3, r3, #8
 80116ba:	687a      	ldr	r2, [r7, #4]
 80116bc:	3201      	adds	r2, #1
 80116be:	7812      	ldrb	r2, [r2, #0]
 80116c0:	4313      	orrs	r3, r2
 80116c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	021b      	lsls	r3, r3, #8
 80116c8:	687a      	ldr	r2, [r7, #4]
 80116ca:	7812      	ldrb	r2, [r2, #0]
 80116cc:	4313      	orrs	r3, r2
 80116ce:	60fb      	str	r3, [r7, #12]
	return rv;
 80116d0:	68fb      	ldr	r3, [r7, #12]
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3714      	adds	r7, #20
 80116d6:	46bd      	mov	sp, r7
 80116d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116dc:	4770      	bx	lr

080116de <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80116de:	b480      	push	{r7}
 80116e0:	b083      	sub	sp, #12
 80116e2:	af00      	add	r7, sp, #0
 80116e4:	6078      	str	r0, [r7, #4]
 80116e6:	460b      	mov	r3, r1
 80116e8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	1c5a      	adds	r2, r3, #1
 80116ee:	607a      	str	r2, [r7, #4]
 80116f0:	887a      	ldrh	r2, [r7, #2]
 80116f2:	b2d2      	uxtb	r2, r2
 80116f4:	701a      	strb	r2, [r3, #0]
 80116f6:	887b      	ldrh	r3, [r7, #2]
 80116f8:	0a1b      	lsrs	r3, r3, #8
 80116fa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	1c5a      	adds	r2, r3, #1
 8011700:	607a      	str	r2, [r7, #4]
 8011702:	887a      	ldrh	r2, [r7, #2]
 8011704:	b2d2      	uxtb	r2, r2
 8011706:	701a      	strb	r2, [r3, #0]
}
 8011708:	bf00      	nop
 801170a:	370c      	adds	r7, #12
 801170c:	46bd      	mov	sp, r7
 801170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011712:	4770      	bx	lr

08011714 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011714:	b480      	push	{r7}
 8011716:	b083      	sub	sp, #12
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	1c5a      	adds	r2, r3, #1
 8011722:	607a      	str	r2, [r7, #4]
 8011724:	683a      	ldr	r2, [r7, #0]
 8011726:	b2d2      	uxtb	r2, r2
 8011728:	701a      	strb	r2, [r3, #0]
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	0a1b      	lsrs	r3, r3, #8
 801172e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	1c5a      	adds	r2, r3, #1
 8011734:	607a      	str	r2, [r7, #4]
 8011736:	683a      	ldr	r2, [r7, #0]
 8011738:	b2d2      	uxtb	r2, r2
 801173a:	701a      	strb	r2, [r3, #0]
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	0a1b      	lsrs	r3, r3, #8
 8011740:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	1c5a      	adds	r2, r3, #1
 8011746:	607a      	str	r2, [r7, #4]
 8011748:	683a      	ldr	r2, [r7, #0]
 801174a:	b2d2      	uxtb	r2, r2
 801174c:	701a      	strb	r2, [r3, #0]
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	0a1b      	lsrs	r3, r3, #8
 8011752:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	1c5a      	adds	r2, r3, #1
 8011758:	607a      	str	r2, [r7, #4]
 801175a:	683a      	ldr	r2, [r7, #0]
 801175c:	b2d2      	uxtb	r2, r2
 801175e:	701a      	strb	r2, [r3, #0]
}
 8011760:	bf00      	nop
 8011762:	370c      	adds	r7, #12
 8011764:	46bd      	mov	sp, r7
 8011766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176a:	4770      	bx	lr

0801176c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801176c:	b480      	push	{r7}
 801176e:	b087      	sub	sp, #28
 8011770:	af00      	add	r7, sp, #0
 8011772:	60f8      	str	r0, [r7, #12]
 8011774:	60b9      	str	r1, [r7, #8]
 8011776:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801177c:	68bb      	ldr	r3, [r7, #8]
 801177e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d00d      	beq.n	80117a2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011786:	693a      	ldr	r2, [r7, #16]
 8011788:	1c53      	adds	r3, r2, #1
 801178a:	613b      	str	r3, [r7, #16]
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	1c59      	adds	r1, r3, #1
 8011790:	6179      	str	r1, [r7, #20]
 8011792:	7812      	ldrb	r2, [r2, #0]
 8011794:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	3b01      	subs	r3, #1
 801179a:	607b      	str	r3, [r7, #4]
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d1f1      	bne.n	8011786 <mem_cpy+0x1a>
	}
}
 80117a2:	bf00      	nop
 80117a4:	371c      	adds	r7, #28
 80117a6:	46bd      	mov	sp, r7
 80117a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ac:	4770      	bx	lr

080117ae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80117ae:	b480      	push	{r7}
 80117b0:	b087      	sub	sp, #28
 80117b2:	af00      	add	r7, sp, #0
 80117b4:	60f8      	str	r0, [r7, #12]
 80117b6:	60b9      	str	r1, [r7, #8]
 80117b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	1c5a      	adds	r2, r3, #1
 80117c2:	617a      	str	r2, [r7, #20]
 80117c4:	68ba      	ldr	r2, [r7, #8]
 80117c6:	b2d2      	uxtb	r2, r2
 80117c8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	3b01      	subs	r3, #1
 80117ce:	607b      	str	r3, [r7, #4]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d1f3      	bne.n	80117be <mem_set+0x10>
}
 80117d6:	bf00      	nop
 80117d8:	371c      	adds	r7, #28
 80117da:	46bd      	mov	sp, r7
 80117dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e0:	4770      	bx	lr

080117e2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80117e2:	b480      	push	{r7}
 80117e4:	b089      	sub	sp, #36	; 0x24
 80117e6:	af00      	add	r7, sp, #0
 80117e8:	60f8      	str	r0, [r7, #12]
 80117ea:	60b9      	str	r1, [r7, #8]
 80117ec:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	61fb      	str	r3, [r7, #28]
 80117f2:	68bb      	ldr	r3, [r7, #8]
 80117f4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80117f6:	2300      	movs	r3, #0
 80117f8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80117fa:	69fb      	ldr	r3, [r7, #28]
 80117fc:	1c5a      	adds	r2, r3, #1
 80117fe:	61fa      	str	r2, [r7, #28]
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	4619      	mov	r1, r3
 8011804:	69bb      	ldr	r3, [r7, #24]
 8011806:	1c5a      	adds	r2, r3, #1
 8011808:	61ba      	str	r2, [r7, #24]
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	1acb      	subs	r3, r1, r3
 801180e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	3b01      	subs	r3, #1
 8011814:	607b      	str	r3, [r7, #4]
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d002      	beq.n	8011822 <mem_cmp+0x40>
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d0eb      	beq.n	80117fa <mem_cmp+0x18>

	return r;
 8011822:	697b      	ldr	r3, [r7, #20]
}
 8011824:	4618      	mov	r0, r3
 8011826:	3724      	adds	r7, #36	; 0x24
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr

08011830 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011830:	b480      	push	{r7}
 8011832:	b083      	sub	sp, #12
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801183a:	e002      	b.n	8011842 <chk_chr+0x12>
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	3301      	adds	r3, #1
 8011840:	607b      	str	r3, [r7, #4]
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d005      	beq.n	8011856 <chk_chr+0x26>
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	461a      	mov	r2, r3
 8011850:	683b      	ldr	r3, [r7, #0]
 8011852:	4293      	cmp	r3, r2
 8011854:	d1f2      	bne.n	801183c <chk_chr+0xc>
	return *str;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	781b      	ldrb	r3, [r3, #0]
}
 801185a:	4618      	mov	r0, r3
 801185c:	370c      	adds	r7, #12
 801185e:	46bd      	mov	sp, r7
 8011860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011864:	4770      	bx	lr
	...

08011868 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011868:	b480      	push	{r7}
 801186a:	b085      	sub	sp, #20
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
 8011870:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011872:	2300      	movs	r3, #0
 8011874:	60bb      	str	r3, [r7, #8]
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	60fb      	str	r3, [r7, #12]
 801187a:	e029      	b.n	80118d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801187c:	4a27      	ldr	r2, [pc, #156]	; (801191c <chk_lock+0xb4>)
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	011b      	lsls	r3, r3, #4
 8011882:	4413      	add	r3, r2
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d01d      	beq.n	80118c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801188a:	4a24      	ldr	r2, [pc, #144]	; (801191c <chk_lock+0xb4>)
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	011b      	lsls	r3, r3, #4
 8011890:	4413      	add	r3, r2
 8011892:	681a      	ldr	r2, [r3, #0]
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	429a      	cmp	r2, r3
 801189a:	d116      	bne.n	80118ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801189c:	4a1f      	ldr	r2, [pc, #124]	; (801191c <chk_lock+0xb4>)
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	011b      	lsls	r3, r3, #4
 80118a2:	4413      	add	r3, r2
 80118a4:	3304      	adds	r3, #4
 80118a6:	681a      	ldr	r2, [r3, #0]
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80118ac:	429a      	cmp	r2, r3
 80118ae:	d10c      	bne.n	80118ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80118b0:	4a1a      	ldr	r2, [pc, #104]	; (801191c <chk_lock+0xb4>)
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	011b      	lsls	r3, r3, #4
 80118b6:	4413      	add	r3, r2
 80118b8:	3308      	adds	r3, #8
 80118ba:	681a      	ldr	r2, [r3, #0]
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80118c0:	429a      	cmp	r2, r3
 80118c2:	d102      	bne.n	80118ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80118c4:	e007      	b.n	80118d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80118c6:	2301      	movs	r3, #1
 80118c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	3301      	adds	r3, #1
 80118ce:	60fb      	str	r3, [r7, #12]
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	2b01      	cmp	r3, #1
 80118d4:	d9d2      	bls.n	801187c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	2b02      	cmp	r3, #2
 80118da:	d109      	bne.n	80118f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80118dc:	68bb      	ldr	r3, [r7, #8]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d102      	bne.n	80118e8 <chk_lock+0x80>
 80118e2:	683b      	ldr	r3, [r7, #0]
 80118e4:	2b02      	cmp	r3, #2
 80118e6:	d101      	bne.n	80118ec <chk_lock+0x84>
 80118e8:	2300      	movs	r3, #0
 80118ea:	e010      	b.n	801190e <chk_lock+0xa6>
 80118ec:	2312      	movs	r3, #18
 80118ee:	e00e      	b.n	801190e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d108      	bne.n	8011908 <chk_lock+0xa0>
 80118f6:	4a09      	ldr	r2, [pc, #36]	; (801191c <chk_lock+0xb4>)
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	011b      	lsls	r3, r3, #4
 80118fc:	4413      	add	r3, r2
 80118fe:	330c      	adds	r3, #12
 8011900:	881b      	ldrh	r3, [r3, #0]
 8011902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011906:	d101      	bne.n	801190c <chk_lock+0xa4>
 8011908:	2310      	movs	r3, #16
 801190a:	e000      	b.n	801190e <chk_lock+0xa6>
 801190c:	2300      	movs	r3, #0
}
 801190e:	4618      	mov	r0, r3
 8011910:	3714      	adds	r7, #20
 8011912:	46bd      	mov	sp, r7
 8011914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011918:	4770      	bx	lr
 801191a:	bf00      	nop
 801191c:	200422d4 	.word	0x200422d4

08011920 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011926:	2300      	movs	r3, #0
 8011928:	607b      	str	r3, [r7, #4]
 801192a:	e002      	b.n	8011932 <enq_lock+0x12>
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	3301      	adds	r3, #1
 8011930:	607b      	str	r3, [r7, #4]
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2b01      	cmp	r3, #1
 8011936:	d806      	bhi.n	8011946 <enq_lock+0x26>
 8011938:	4a09      	ldr	r2, [pc, #36]	; (8011960 <enq_lock+0x40>)
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	011b      	lsls	r3, r3, #4
 801193e:	4413      	add	r3, r2
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d1f2      	bne.n	801192c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2b02      	cmp	r3, #2
 801194a:	bf14      	ite	ne
 801194c:	2301      	movne	r3, #1
 801194e:	2300      	moveq	r3, #0
 8011950:	b2db      	uxtb	r3, r3
}
 8011952:	4618      	mov	r0, r3
 8011954:	370c      	adds	r7, #12
 8011956:	46bd      	mov	sp, r7
 8011958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195c:	4770      	bx	lr
 801195e:	bf00      	nop
 8011960:	200422d4 	.word	0x200422d4

08011964 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011964:	b480      	push	{r7}
 8011966:	b085      	sub	sp, #20
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801196e:	2300      	movs	r3, #0
 8011970:	60fb      	str	r3, [r7, #12]
 8011972:	e01f      	b.n	80119b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011974:	4a41      	ldr	r2, [pc, #260]	; (8011a7c <inc_lock+0x118>)
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	011b      	lsls	r3, r3, #4
 801197a:	4413      	add	r3, r2
 801197c:	681a      	ldr	r2, [r3, #0]
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	429a      	cmp	r2, r3
 8011984:	d113      	bne.n	80119ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011986:	4a3d      	ldr	r2, [pc, #244]	; (8011a7c <inc_lock+0x118>)
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	011b      	lsls	r3, r3, #4
 801198c:	4413      	add	r3, r2
 801198e:	3304      	adds	r3, #4
 8011990:	681a      	ldr	r2, [r3, #0]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011996:	429a      	cmp	r2, r3
 8011998:	d109      	bne.n	80119ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801199a:	4a38      	ldr	r2, [pc, #224]	; (8011a7c <inc_lock+0x118>)
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	011b      	lsls	r3, r3, #4
 80119a0:	4413      	add	r3, r2
 80119a2:	3308      	adds	r3, #8
 80119a4:	681a      	ldr	r2, [r3, #0]
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d006      	beq.n	80119bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	3301      	adds	r3, #1
 80119b2:	60fb      	str	r3, [r7, #12]
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	2b01      	cmp	r3, #1
 80119b8:	d9dc      	bls.n	8011974 <inc_lock+0x10>
 80119ba:	e000      	b.n	80119be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80119bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	2b02      	cmp	r3, #2
 80119c2:	d132      	bne.n	8011a2a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80119c4:	2300      	movs	r3, #0
 80119c6:	60fb      	str	r3, [r7, #12]
 80119c8:	e002      	b.n	80119d0 <inc_lock+0x6c>
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	3301      	adds	r3, #1
 80119ce:	60fb      	str	r3, [r7, #12]
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	2b01      	cmp	r3, #1
 80119d4:	d806      	bhi.n	80119e4 <inc_lock+0x80>
 80119d6:	4a29      	ldr	r2, [pc, #164]	; (8011a7c <inc_lock+0x118>)
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	011b      	lsls	r3, r3, #4
 80119dc:	4413      	add	r3, r2
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d1f2      	bne.n	80119ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	2b02      	cmp	r3, #2
 80119e8:	d101      	bne.n	80119ee <inc_lock+0x8a>
 80119ea:	2300      	movs	r3, #0
 80119ec:	e040      	b.n	8011a70 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	681a      	ldr	r2, [r3, #0]
 80119f2:	4922      	ldr	r1, [pc, #136]	; (8011a7c <inc_lock+0x118>)
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	011b      	lsls	r3, r3, #4
 80119f8:	440b      	add	r3, r1
 80119fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	689a      	ldr	r2, [r3, #8]
 8011a00:	491e      	ldr	r1, [pc, #120]	; (8011a7c <inc_lock+0x118>)
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	011b      	lsls	r3, r3, #4
 8011a06:	440b      	add	r3, r1
 8011a08:	3304      	adds	r3, #4
 8011a0a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	695a      	ldr	r2, [r3, #20]
 8011a10:	491a      	ldr	r1, [pc, #104]	; (8011a7c <inc_lock+0x118>)
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	011b      	lsls	r3, r3, #4
 8011a16:	440b      	add	r3, r1
 8011a18:	3308      	adds	r3, #8
 8011a1a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011a1c:	4a17      	ldr	r2, [pc, #92]	; (8011a7c <inc_lock+0x118>)
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	011b      	lsls	r3, r3, #4
 8011a22:	4413      	add	r3, r2
 8011a24:	330c      	adds	r3, #12
 8011a26:	2200      	movs	r2, #0
 8011a28:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d009      	beq.n	8011a44 <inc_lock+0xe0>
 8011a30:	4a12      	ldr	r2, [pc, #72]	; (8011a7c <inc_lock+0x118>)
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	011b      	lsls	r3, r3, #4
 8011a36:	4413      	add	r3, r2
 8011a38:	330c      	adds	r3, #12
 8011a3a:	881b      	ldrh	r3, [r3, #0]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d001      	beq.n	8011a44 <inc_lock+0xe0>
 8011a40:	2300      	movs	r3, #0
 8011a42:	e015      	b.n	8011a70 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d108      	bne.n	8011a5c <inc_lock+0xf8>
 8011a4a:	4a0c      	ldr	r2, [pc, #48]	; (8011a7c <inc_lock+0x118>)
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	011b      	lsls	r3, r3, #4
 8011a50:	4413      	add	r3, r2
 8011a52:	330c      	adds	r3, #12
 8011a54:	881b      	ldrh	r3, [r3, #0]
 8011a56:	3301      	adds	r3, #1
 8011a58:	b29a      	uxth	r2, r3
 8011a5a:	e001      	b.n	8011a60 <inc_lock+0xfc>
 8011a5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011a60:	4906      	ldr	r1, [pc, #24]	; (8011a7c <inc_lock+0x118>)
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	011b      	lsls	r3, r3, #4
 8011a66:	440b      	add	r3, r1
 8011a68:	330c      	adds	r3, #12
 8011a6a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	3301      	adds	r3, #1
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3714      	adds	r7, #20
 8011a74:	46bd      	mov	sp, r7
 8011a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7a:	4770      	bx	lr
 8011a7c:	200422d4 	.word	0x200422d4

08011a80 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011a80:	b480      	push	{r7}
 8011a82:	b085      	sub	sp, #20
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	3b01      	subs	r3, #1
 8011a8c:	607b      	str	r3, [r7, #4]
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2b01      	cmp	r3, #1
 8011a92:	d825      	bhi.n	8011ae0 <dec_lock+0x60>
		n = Files[i].ctr;
 8011a94:	4a17      	ldr	r2, [pc, #92]	; (8011af4 <dec_lock+0x74>)
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	011b      	lsls	r3, r3, #4
 8011a9a:	4413      	add	r3, r2
 8011a9c:	330c      	adds	r3, #12
 8011a9e:	881b      	ldrh	r3, [r3, #0]
 8011aa0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011aa2:	89fb      	ldrh	r3, [r7, #14]
 8011aa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011aa8:	d101      	bne.n	8011aae <dec_lock+0x2e>
 8011aaa:	2300      	movs	r3, #0
 8011aac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011aae:	89fb      	ldrh	r3, [r7, #14]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d002      	beq.n	8011aba <dec_lock+0x3a>
 8011ab4:	89fb      	ldrh	r3, [r7, #14]
 8011ab6:	3b01      	subs	r3, #1
 8011ab8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011aba:	4a0e      	ldr	r2, [pc, #56]	; (8011af4 <dec_lock+0x74>)
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	011b      	lsls	r3, r3, #4
 8011ac0:	4413      	add	r3, r2
 8011ac2:	330c      	adds	r3, #12
 8011ac4:	89fa      	ldrh	r2, [r7, #14]
 8011ac6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011ac8:	89fb      	ldrh	r3, [r7, #14]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d105      	bne.n	8011ada <dec_lock+0x5a>
 8011ace:	4a09      	ldr	r2, [pc, #36]	; (8011af4 <dec_lock+0x74>)
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	011b      	lsls	r3, r3, #4
 8011ad4:	4413      	add	r3, r2
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011ada:	2300      	movs	r3, #0
 8011adc:	737b      	strb	r3, [r7, #13]
 8011ade:	e001      	b.n	8011ae4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011ae0:	2302      	movs	r3, #2
 8011ae2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011ae4:	7b7b      	ldrb	r3, [r7, #13]
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3714      	adds	r7, #20
 8011aea:	46bd      	mov	sp, r7
 8011aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af0:	4770      	bx	lr
 8011af2:	bf00      	nop
 8011af4:	200422d4 	.word	0x200422d4

08011af8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011af8:	b480      	push	{r7}
 8011afa:	b085      	sub	sp, #20
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011b00:	2300      	movs	r3, #0
 8011b02:	60fb      	str	r3, [r7, #12]
 8011b04:	e010      	b.n	8011b28 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011b06:	4a0d      	ldr	r2, [pc, #52]	; (8011b3c <clear_lock+0x44>)
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	011b      	lsls	r3, r3, #4
 8011b0c:	4413      	add	r3, r2
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	687a      	ldr	r2, [r7, #4]
 8011b12:	429a      	cmp	r2, r3
 8011b14:	d105      	bne.n	8011b22 <clear_lock+0x2a>
 8011b16:	4a09      	ldr	r2, [pc, #36]	; (8011b3c <clear_lock+0x44>)
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	011b      	lsls	r3, r3, #4
 8011b1c:	4413      	add	r3, r2
 8011b1e:	2200      	movs	r2, #0
 8011b20:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	3301      	adds	r3, #1
 8011b26:	60fb      	str	r3, [r7, #12]
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	2b01      	cmp	r3, #1
 8011b2c:	d9eb      	bls.n	8011b06 <clear_lock+0xe>
	}
}
 8011b2e:	bf00      	nop
 8011b30:	3714      	adds	r7, #20
 8011b32:	46bd      	mov	sp, r7
 8011b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b38:	4770      	bx	lr
 8011b3a:	bf00      	nop
 8011b3c:	200422d4 	.word	0x200422d4

08011b40 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b086      	sub	sp, #24
 8011b44:	af00      	add	r7, sp, #0
 8011b46:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	78db      	ldrb	r3, [r3, #3]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d034      	beq.n	8011bbe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b58:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	7858      	ldrb	r0, [r3, #1]
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b64:	2301      	movs	r3, #1
 8011b66:	697a      	ldr	r2, [r7, #20]
 8011b68:	f7ff fd40 	bl	80115ec <disk_write>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d002      	beq.n	8011b78 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011b72:	2301      	movs	r3, #1
 8011b74:	73fb      	strb	r3, [r7, #15]
 8011b76:	e022      	b.n	8011bbe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b82:	697a      	ldr	r2, [r7, #20]
 8011b84:	1ad2      	subs	r2, r2, r3
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	6a1b      	ldr	r3, [r3, #32]
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	d217      	bcs.n	8011bbe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	789b      	ldrb	r3, [r3, #2]
 8011b92:	613b      	str	r3, [r7, #16]
 8011b94:	e010      	b.n	8011bb8 <sync_window+0x78>
					wsect += fs->fsize;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	6a1b      	ldr	r3, [r3, #32]
 8011b9a:	697a      	ldr	r2, [r7, #20]
 8011b9c:	4413      	add	r3, r2
 8011b9e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	7858      	ldrb	r0, [r3, #1]
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011baa:	2301      	movs	r3, #1
 8011bac:	697a      	ldr	r2, [r7, #20]
 8011bae:	f7ff fd1d 	bl	80115ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	3b01      	subs	r3, #1
 8011bb6:	613b      	str	r3, [r7, #16]
 8011bb8:	693b      	ldr	r3, [r7, #16]
 8011bba:	2b01      	cmp	r3, #1
 8011bbc:	d8eb      	bhi.n	8011b96 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3718      	adds	r7, #24
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}

08011bc8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b084      	sub	sp, #16
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bda:	683a      	ldr	r2, [r7, #0]
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d01b      	beq.n	8011c18 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	f7ff ffad 	bl	8011b40 <sync_window>
 8011be6:	4603      	mov	r3, r0
 8011be8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011bea:	7bfb      	ldrb	r3, [r7, #15]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d113      	bne.n	8011c18 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	7858      	ldrb	r0, [r3, #1]
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	683a      	ldr	r2, [r7, #0]
 8011bfe:	f7ff fcd5 	bl	80115ac <disk_read>
 8011c02:	4603      	mov	r3, r0
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d004      	beq.n	8011c12 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011c08:	f04f 33ff 	mov.w	r3, #4294967295
 8011c0c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011c0e:	2301      	movs	r3, #1
 8011c10:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	683a      	ldr	r2, [r7, #0]
 8011c16:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	3710      	adds	r7, #16
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}
	...

08011c24 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b084      	sub	sp, #16
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011c2c:	6878      	ldr	r0, [r7, #4]
 8011c2e:	f7ff ff87 	bl	8011b40 <sync_window>
 8011c32:	4603      	mov	r3, r0
 8011c34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011c36:	7bfb      	ldrb	r3, [r7, #15]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d159      	bne.n	8011cf0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	781b      	ldrb	r3, [r3, #0]
 8011c40:	2b03      	cmp	r3, #3
 8011c42:	d149      	bne.n	8011cd8 <sync_fs+0xb4>
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	791b      	ldrb	r3, [r3, #4]
 8011c48:	2b01      	cmp	r3, #1
 8011c4a:	d145      	bne.n	8011cd8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	899b      	ldrh	r3, [r3, #12]
 8011c56:	461a      	mov	r2, r3
 8011c58:	2100      	movs	r1, #0
 8011c5a:	f7ff fda8 	bl	80117ae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	3338      	adds	r3, #56	; 0x38
 8011c62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011c66:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f7ff fd37 	bl	80116de <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	3338      	adds	r3, #56	; 0x38
 8011c74:	4921      	ldr	r1, [pc, #132]	; (8011cfc <sync_fs+0xd8>)
 8011c76:	4618      	mov	r0, r3
 8011c78:	f7ff fd4c 	bl	8011714 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	3338      	adds	r3, #56	; 0x38
 8011c80:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011c84:	491e      	ldr	r1, [pc, #120]	; (8011d00 <sync_fs+0xdc>)
 8011c86:	4618      	mov	r0, r3
 8011c88:	f7ff fd44 	bl	8011714 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	3338      	adds	r3, #56	; 0x38
 8011c90:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	695b      	ldr	r3, [r3, #20]
 8011c98:	4619      	mov	r1, r3
 8011c9a:	4610      	mov	r0, r2
 8011c9c:	f7ff fd3a 	bl	8011714 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	3338      	adds	r3, #56	; 0x38
 8011ca4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	691b      	ldr	r3, [r3, #16]
 8011cac:	4619      	mov	r1, r3
 8011cae:	4610      	mov	r0, r2
 8011cb0:	f7ff fd30 	bl	8011714 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cb8:	1c5a      	adds	r2, r3, #1
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	7858      	ldrb	r0, [r3, #1]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011ccc:	2301      	movs	r3, #1
 8011cce:	f7ff fc8d 	bl	80115ec <disk_write>
			fs->fsi_flag = 0;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	785b      	ldrb	r3, [r3, #1]
 8011cdc:	2200      	movs	r2, #0
 8011cde:	2100      	movs	r1, #0
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f7ff fca3 	bl	801162c <disk_ioctl>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d001      	beq.n	8011cf0 <sync_fs+0xcc>
 8011cec:	2301      	movs	r3, #1
 8011cee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	3710      	adds	r7, #16
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}
 8011cfa:	bf00      	nop
 8011cfc:	41615252 	.word	0x41615252
 8011d00:	61417272 	.word	0x61417272

08011d04 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011d04:	b480      	push	{r7}
 8011d06:	b083      	sub	sp, #12
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
 8011d0c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	3b02      	subs	r3, #2
 8011d12:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	69db      	ldr	r3, [r3, #28]
 8011d18:	3b02      	subs	r3, #2
 8011d1a:	683a      	ldr	r2, [r7, #0]
 8011d1c:	429a      	cmp	r2, r3
 8011d1e:	d301      	bcc.n	8011d24 <clust2sect+0x20>
 8011d20:	2300      	movs	r3, #0
 8011d22:	e008      	b.n	8011d36 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	895b      	ldrh	r3, [r3, #10]
 8011d28:	461a      	mov	r2, r3
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	fb03 f202 	mul.w	r2, r3, r2
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d34:	4413      	add	r3, r2
}
 8011d36:	4618      	mov	r0, r3
 8011d38:	370c      	adds	r7, #12
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d40:	4770      	bx	lr

08011d42 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011d42:	b580      	push	{r7, lr}
 8011d44:	b086      	sub	sp, #24
 8011d46:	af00      	add	r7, sp, #0
 8011d48:	6078      	str	r0, [r7, #4]
 8011d4a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	2b01      	cmp	r3, #1
 8011d56:	d904      	bls.n	8011d62 <get_fat+0x20>
 8011d58:	693b      	ldr	r3, [r7, #16]
 8011d5a:	69db      	ldr	r3, [r3, #28]
 8011d5c:	683a      	ldr	r2, [r7, #0]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d302      	bcc.n	8011d68 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011d62:	2301      	movs	r3, #1
 8011d64:	617b      	str	r3, [r7, #20]
 8011d66:	e0b7      	b.n	8011ed8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011d68:	f04f 33ff 	mov.w	r3, #4294967295
 8011d6c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011d6e:	693b      	ldr	r3, [r7, #16]
 8011d70:	781b      	ldrb	r3, [r3, #0]
 8011d72:	2b02      	cmp	r3, #2
 8011d74:	d05a      	beq.n	8011e2c <get_fat+0xea>
 8011d76:	2b03      	cmp	r3, #3
 8011d78:	d07d      	beq.n	8011e76 <get_fat+0x134>
 8011d7a:	2b01      	cmp	r3, #1
 8011d7c:	f040 80a2 	bne.w	8011ec4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	60fb      	str	r3, [r7, #12]
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	085b      	lsrs	r3, r3, #1
 8011d88:	68fa      	ldr	r2, [r7, #12]
 8011d8a:	4413      	add	r3, r2
 8011d8c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d8e:	693b      	ldr	r3, [r7, #16]
 8011d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d92:	693b      	ldr	r3, [r7, #16]
 8011d94:	899b      	ldrh	r3, [r3, #12]
 8011d96:	4619      	mov	r1, r3
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d9e:	4413      	add	r3, r2
 8011da0:	4619      	mov	r1, r3
 8011da2:	6938      	ldr	r0, [r7, #16]
 8011da4:	f7ff ff10 	bl	8011bc8 <move_window>
 8011da8:	4603      	mov	r3, r0
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	f040 808d 	bne.w	8011eca <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	1c5a      	adds	r2, r3, #1
 8011db4:	60fa      	str	r2, [r7, #12]
 8011db6:	693a      	ldr	r2, [r7, #16]
 8011db8:	8992      	ldrh	r2, [r2, #12]
 8011dba:	fbb3 f1f2 	udiv	r1, r3, r2
 8011dbe:	fb02 f201 	mul.w	r2, r2, r1
 8011dc2:	1a9b      	subs	r3, r3, r2
 8011dc4:	693a      	ldr	r2, [r7, #16]
 8011dc6:	4413      	add	r3, r2
 8011dc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011dcc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011dce:	693b      	ldr	r3, [r7, #16]
 8011dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011dd2:	693b      	ldr	r3, [r7, #16]
 8011dd4:	899b      	ldrh	r3, [r3, #12]
 8011dd6:	4619      	mov	r1, r3
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8011dde:	4413      	add	r3, r2
 8011de0:	4619      	mov	r1, r3
 8011de2:	6938      	ldr	r0, [r7, #16]
 8011de4:	f7ff fef0 	bl	8011bc8 <move_window>
 8011de8:	4603      	mov	r3, r0
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d16f      	bne.n	8011ece <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011dee:	693b      	ldr	r3, [r7, #16]
 8011df0:	899b      	ldrh	r3, [r3, #12]
 8011df2:	461a      	mov	r2, r3
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	fbb3 f1f2 	udiv	r1, r3, r2
 8011dfa:	fb02 f201 	mul.w	r2, r2, r1
 8011dfe:	1a9b      	subs	r3, r3, r2
 8011e00:	693a      	ldr	r2, [r7, #16]
 8011e02:	4413      	add	r3, r2
 8011e04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011e08:	021b      	lsls	r3, r3, #8
 8011e0a:	461a      	mov	r2, r3
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	4313      	orrs	r3, r2
 8011e10:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	f003 0301 	and.w	r3, r3, #1
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d002      	beq.n	8011e22 <get_fat+0xe0>
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	091b      	lsrs	r3, r3, #4
 8011e20:	e002      	b.n	8011e28 <get_fat+0xe6>
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011e28:	617b      	str	r3, [r7, #20]
			break;
 8011e2a:	e055      	b.n	8011ed8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011e2c:	693b      	ldr	r3, [r7, #16]
 8011e2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e30:	693b      	ldr	r3, [r7, #16]
 8011e32:	899b      	ldrh	r3, [r3, #12]
 8011e34:	085b      	lsrs	r3, r3, #1
 8011e36:	b29b      	uxth	r3, r3
 8011e38:	4619      	mov	r1, r3
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e40:	4413      	add	r3, r2
 8011e42:	4619      	mov	r1, r3
 8011e44:	6938      	ldr	r0, [r7, #16]
 8011e46:	f7ff febf 	bl	8011bc8 <move_window>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d140      	bne.n	8011ed2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011e50:	693b      	ldr	r3, [r7, #16]
 8011e52:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	005b      	lsls	r3, r3, #1
 8011e5a:	693a      	ldr	r2, [r7, #16]
 8011e5c:	8992      	ldrh	r2, [r2, #12]
 8011e5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e62:	fb02 f200 	mul.w	r2, r2, r0
 8011e66:	1a9b      	subs	r3, r3, r2
 8011e68:	440b      	add	r3, r1
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f7ff fbfc 	bl	8011668 <ld_word>
 8011e70:	4603      	mov	r3, r0
 8011e72:	617b      	str	r3, [r7, #20]
			break;
 8011e74:	e030      	b.n	8011ed8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	899b      	ldrh	r3, [r3, #12]
 8011e7e:	089b      	lsrs	r3, r3, #2
 8011e80:	b29b      	uxth	r3, r3
 8011e82:	4619      	mov	r1, r3
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e8a:	4413      	add	r3, r2
 8011e8c:	4619      	mov	r1, r3
 8011e8e:	6938      	ldr	r0, [r7, #16]
 8011e90:	f7ff fe9a 	bl	8011bc8 <move_window>
 8011e94:	4603      	mov	r3, r0
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d11d      	bne.n	8011ed6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011e9a:	693b      	ldr	r3, [r7, #16]
 8011e9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	009b      	lsls	r3, r3, #2
 8011ea4:	693a      	ldr	r2, [r7, #16]
 8011ea6:	8992      	ldrh	r2, [r2, #12]
 8011ea8:	fbb3 f0f2 	udiv	r0, r3, r2
 8011eac:	fb02 f200 	mul.w	r2, r2, r0
 8011eb0:	1a9b      	subs	r3, r3, r2
 8011eb2:	440b      	add	r3, r1
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f7ff fbef 	bl	8011698 <ld_dword>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011ec0:	617b      	str	r3, [r7, #20]
			break;
 8011ec2:	e009      	b.n	8011ed8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	617b      	str	r3, [r7, #20]
 8011ec8:	e006      	b.n	8011ed8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011eca:	bf00      	nop
 8011ecc:	e004      	b.n	8011ed8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ece:	bf00      	nop
 8011ed0:	e002      	b.n	8011ed8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011ed2:	bf00      	nop
 8011ed4:	e000      	b.n	8011ed8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011ed6:	bf00      	nop
		}
	}

	return val;
 8011ed8:	697b      	ldr	r3, [r7, #20]
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	3718      	adds	r7, #24
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}

08011ee2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011ee2:	b590      	push	{r4, r7, lr}
 8011ee4:	b089      	sub	sp, #36	; 0x24
 8011ee6:	af00      	add	r7, sp, #0
 8011ee8:	60f8      	str	r0, [r7, #12]
 8011eea:	60b9      	str	r1, [r7, #8]
 8011eec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011eee:	2302      	movs	r3, #2
 8011ef0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011ef2:	68bb      	ldr	r3, [r7, #8]
 8011ef4:	2b01      	cmp	r3, #1
 8011ef6:	f240 8106 	bls.w	8012106 <put_fat+0x224>
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	69db      	ldr	r3, [r3, #28]
 8011efe:	68ba      	ldr	r2, [r7, #8]
 8011f00:	429a      	cmp	r2, r3
 8011f02:	f080 8100 	bcs.w	8012106 <put_fat+0x224>
		switch (fs->fs_type) {
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	781b      	ldrb	r3, [r3, #0]
 8011f0a:	2b02      	cmp	r3, #2
 8011f0c:	f000 8088 	beq.w	8012020 <put_fat+0x13e>
 8011f10:	2b03      	cmp	r3, #3
 8011f12:	f000 80b0 	beq.w	8012076 <put_fat+0x194>
 8011f16:	2b01      	cmp	r3, #1
 8011f18:	f040 80f5 	bne.w	8012106 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011f1c:	68bb      	ldr	r3, [r7, #8]
 8011f1e:	61bb      	str	r3, [r7, #24]
 8011f20:	69bb      	ldr	r3, [r7, #24]
 8011f22:	085b      	lsrs	r3, r3, #1
 8011f24:	69ba      	ldr	r2, [r7, #24]
 8011f26:	4413      	add	r3, r2
 8011f28:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	899b      	ldrh	r3, [r3, #12]
 8011f32:	4619      	mov	r1, r3
 8011f34:	69bb      	ldr	r3, [r7, #24]
 8011f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f3a:	4413      	add	r3, r2
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	68f8      	ldr	r0, [r7, #12]
 8011f40:	f7ff fe42 	bl	8011bc8 <move_window>
 8011f44:	4603      	mov	r3, r0
 8011f46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f48:	7ffb      	ldrb	r3, [r7, #31]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	f040 80d4 	bne.w	80120f8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f56:	69bb      	ldr	r3, [r7, #24]
 8011f58:	1c5a      	adds	r2, r3, #1
 8011f5a:	61ba      	str	r2, [r7, #24]
 8011f5c:	68fa      	ldr	r2, [r7, #12]
 8011f5e:	8992      	ldrh	r2, [r2, #12]
 8011f60:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f64:	fb02 f200 	mul.w	r2, r2, r0
 8011f68:	1a9b      	subs	r3, r3, r2
 8011f6a:	440b      	add	r3, r1
 8011f6c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011f6e:	68bb      	ldr	r3, [r7, #8]
 8011f70:	f003 0301 	and.w	r3, r3, #1
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d00d      	beq.n	8011f94 <put_fat+0xb2>
 8011f78:	697b      	ldr	r3, [r7, #20]
 8011f7a:	781b      	ldrb	r3, [r3, #0]
 8011f7c:	b25b      	sxtb	r3, r3
 8011f7e:	f003 030f 	and.w	r3, r3, #15
 8011f82:	b25a      	sxtb	r2, r3
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	b2db      	uxtb	r3, r3
 8011f88:	011b      	lsls	r3, r3, #4
 8011f8a:	b25b      	sxtb	r3, r3
 8011f8c:	4313      	orrs	r3, r2
 8011f8e:	b25b      	sxtb	r3, r3
 8011f90:	b2db      	uxtb	r3, r3
 8011f92:	e001      	b.n	8011f98 <put_fat+0xb6>
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	b2db      	uxtb	r3, r3
 8011f98:	697a      	ldr	r2, [r7, #20]
 8011f9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	2201      	movs	r2, #1
 8011fa0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	899b      	ldrh	r3, [r3, #12]
 8011faa:	4619      	mov	r1, r3
 8011fac:	69bb      	ldr	r3, [r7, #24]
 8011fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8011fb2:	4413      	add	r3, r2
 8011fb4:	4619      	mov	r1, r3
 8011fb6:	68f8      	ldr	r0, [r7, #12]
 8011fb8:	f7ff fe06 	bl	8011bc8 <move_window>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011fc0:	7ffb      	ldrb	r3, [r7, #31]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	f040 809a 	bne.w	80120fc <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	899b      	ldrh	r3, [r3, #12]
 8011fd2:	461a      	mov	r2, r3
 8011fd4:	69bb      	ldr	r3, [r7, #24]
 8011fd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8011fda:	fb02 f200 	mul.w	r2, r2, r0
 8011fde:	1a9b      	subs	r3, r3, r2
 8011fe0:	440b      	add	r3, r1
 8011fe2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011fe4:	68bb      	ldr	r3, [r7, #8]
 8011fe6:	f003 0301 	and.w	r3, r3, #1
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d003      	beq.n	8011ff6 <put_fat+0x114>
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	091b      	lsrs	r3, r3, #4
 8011ff2:	b2db      	uxtb	r3, r3
 8011ff4:	e00e      	b.n	8012014 <put_fat+0x132>
 8011ff6:	697b      	ldr	r3, [r7, #20]
 8011ff8:	781b      	ldrb	r3, [r3, #0]
 8011ffa:	b25b      	sxtb	r3, r3
 8011ffc:	f023 030f 	bic.w	r3, r3, #15
 8012000:	b25a      	sxtb	r2, r3
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	0a1b      	lsrs	r3, r3, #8
 8012006:	b25b      	sxtb	r3, r3
 8012008:	f003 030f 	and.w	r3, r3, #15
 801200c:	b25b      	sxtb	r3, r3
 801200e:	4313      	orrs	r3, r2
 8012010:	b25b      	sxtb	r3, r3
 8012012:	b2db      	uxtb	r3, r3
 8012014:	697a      	ldr	r2, [r7, #20]
 8012016:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	2201      	movs	r2, #1
 801201c:	70da      	strb	r2, [r3, #3]
			break;
 801201e:	e072      	b.n	8012106 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	899b      	ldrh	r3, [r3, #12]
 8012028:	085b      	lsrs	r3, r3, #1
 801202a:	b29b      	uxth	r3, r3
 801202c:	4619      	mov	r1, r3
 801202e:	68bb      	ldr	r3, [r7, #8]
 8012030:	fbb3 f3f1 	udiv	r3, r3, r1
 8012034:	4413      	add	r3, r2
 8012036:	4619      	mov	r1, r3
 8012038:	68f8      	ldr	r0, [r7, #12]
 801203a:	f7ff fdc5 	bl	8011bc8 <move_window>
 801203e:	4603      	mov	r3, r0
 8012040:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012042:	7ffb      	ldrb	r3, [r7, #31]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d15b      	bne.n	8012100 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	005b      	lsls	r3, r3, #1
 8012052:	68fa      	ldr	r2, [r7, #12]
 8012054:	8992      	ldrh	r2, [r2, #12]
 8012056:	fbb3 f0f2 	udiv	r0, r3, r2
 801205a:	fb02 f200 	mul.w	r2, r2, r0
 801205e:	1a9b      	subs	r3, r3, r2
 8012060:	440b      	add	r3, r1
 8012062:	687a      	ldr	r2, [r7, #4]
 8012064:	b292      	uxth	r2, r2
 8012066:	4611      	mov	r1, r2
 8012068:	4618      	mov	r0, r3
 801206a:	f7ff fb38 	bl	80116de <st_word>
			fs->wflag = 1;
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	2201      	movs	r2, #1
 8012072:	70da      	strb	r2, [r3, #3]
			break;
 8012074:	e047      	b.n	8012106 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	899b      	ldrh	r3, [r3, #12]
 801207e:	089b      	lsrs	r3, r3, #2
 8012080:	b29b      	uxth	r3, r3
 8012082:	4619      	mov	r1, r3
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	fbb3 f3f1 	udiv	r3, r3, r1
 801208a:	4413      	add	r3, r2
 801208c:	4619      	mov	r1, r3
 801208e:	68f8      	ldr	r0, [r7, #12]
 8012090:	f7ff fd9a 	bl	8011bc8 <move_window>
 8012094:	4603      	mov	r3, r0
 8012096:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012098:	7ffb      	ldrb	r3, [r7, #31]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d132      	bne.n	8012104 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	009b      	lsls	r3, r3, #2
 80120ae:	68fa      	ldr	r2, [r7, #12]
 80120b0:	8992      	ldrh	r2, [r2, #12]
 80120b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80120b6:	fb02 f200 	mul.w	r2, r2, r0
 80120ba:	1a9b      	subs	r3, r3, r2
 80120bc:	440b      	add	r3, r1
 80120be:	4618      	mov	r0, r3
 80120c0:	f7ff faea 	bl	8011698 <ld_dword>
 80120c4:	4603      	mov	r3, r0
 80120c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80120ca:	4323      	orrs	r3, r4
 80120cc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	009b      	lsls	r3, r3, #2
 80120d8:	68fa      	ldr	r2, [r7, #12]
 80120da:	8992      	ldrh	r2, [r2, #12]
 80120dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80120e0:	fb02 f200 	mul.w	r2, r2, r0
 80120e4:	1a9b      	subs	r3, r3, r2
 80120e6:	440b      	add	r3, r1
 80120e8:	6879      	ldr	r1, [r7, #4]
 80120ea:	4618      	mov	r0, r3
 80120ec:	f7ff fb12 	bl	8011714 <st_dword>
			fs->wflag = 1;
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	2201      	movs	r2, #1
 80120f4:	70da      	strb	r2, [r3, #3]
			break;
 80120f6:	e006      	b.n	8012106 <put_fat+0x224>
			if (res != FR_OK) break;
 80120f8:	bf00      	nop
 80120fa:	e004      	b.n	8012106 <put_fat+0x224>
			if (res != FR_OK) break;
 80120fc:	bf00      	nop
 80120fe:	e002      	b.n	8012106 <put_fat+0x224>
			if (res != FR_OK) break;
 8012100:	bf00      	nop
 8012102:	e000      	b.n	8012106 <put_fat+0x224>
			if (res != FR_OK) break;
 8012104:	bf00      	nop
		}
	}
	return res;
 8012106:	7ffb      	ldrb	r3, [r7, #31]
}
 8012108:	4618      	mov	r0, r3
 801210a:	3724      	adds	r7, #36	; 0x24
 801210c:	46bd      	mov	sp, r7
 801210e:	bd90      	pop	{r4, r7, pc}

08012110 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b088      	sub	sp, #32
 8012114:	af00      	add	r7, sp, #0
 8012116:	60f8      	str	r0, [r7, #12]
 8012118:	60b9      	str	r1, [r7, #8]
 801211a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801211c:	2300      	movs	r3, #0
 801211e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012126:	68bb      	ldr	r3, [r7, #8]
 8012128:	2b01      	cmp	r3, #1
 801212a:	d904      	bls.n	8012136 <remove_chain+0x26>
 801212c:	69bb      	ldr	r3, [r7, #24]
 801212e:	69db      	ldr	r3, [r3, #28]
 8012130:	68ba      	ldr	r2, [r7, #8]
 8012132:	429a      	cmp	r2, r3
 8012134:	d301      	bcc.n	801213a <remove_chain+0x2a>
 8012136:	2302      	movs	r3, #2
 8012138:	e04b      	b.n	80121d2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d00c      	beq.n	801215a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012140:	f04f 32ff 	mov.w	r2, #4294967295
 8012144:	6879      	ldr	r1, [r7, #4]
 8012146:	69b8      	ldr	r0, [r7, #24]
 8012148:	f7ff fecb 	bl	8011ee2 <put_fat>
 801214c:	4603      	mov	r3, r0
 801214e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012150:	7ffb      	ldrb	r3, [r7, #31]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d001      	beq.n	801215a <remove_chain+0x4a>
 8012156:	7ffb      	ldrb	r3, [r7, #31]
 8012158:	e03b      	b.n	80121d2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801215a:	68b9      	ldr	r1, [r7, #8]
 801215c:	68f8      	ldr	r0, [r7, #12]
 801215e:	f7ff fdf0 	bl	8011d42 <get_fat>
 8012162:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012164:	697b      	ldr	r3, [r7, #20]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d031      	beq.n	80121ce <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801216a:	697b      	ldr	r3, [r7, #20]
 801216c:	2b01      	cmp	r3, #1
 801216e:	d101      	bne.n	8012174 <remove_chain+0x64>
 8012170:	2302      	movs	r3, #2
 8012172:	e02e      	b.n	80121d2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012174:	697b      	ldr	r3, [r7, #20]
 8012176:	f1b3 3fff 	cmp.w	r3, #4294967295
 801217a:	d101      	bne.n	8012180 <remove_chain+0x70>
 801217c:	2301      	movs	r3, #1
 801217e:	e028      	b.n	80121d2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012180:	2200      	movs	r2, #0
 8012182:	68b9      	ldr	r1, [r7, #8]
 8012184:	69b8      	ldr	r0, [r7, #24]
 8012186:	f7ff feac 	bl	8011ee2 <put_fat>
 801218a:	4603      	mov	r3, r0
 801218c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801218e:	7ffb      	ldrb	r3, [r7, #31]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d001      	beq.n	8012198 <remove_chain+0x88>
 8012194:	7ffb      	ldrb	r3, [r7, #31]
 8012196:	e01c      	b.n	80121d2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012198:	69bb      	ldr	r3, [r7, #24]
 801219a:	695a      	ldr	r2, [r3, #20]
 801219c:	69bb      	ldr	r3, [r7, #24]
 801219e:	69db      	ldr	r3, [r3, #28]
 80121a0:	3b02      	subs	r3, #2
 80121a2:	429a      	cmp	r2, r3
 80121a4:	d20b      	bcs.n	80121be <remove_chain+0xae>
			fs->free_clst++;
 80121a6:	69bb      	ldr	r3, [r7, #24]
 80121a8:	695b      	ldr	r3, [r3, #20]
 80121aa:	1c5a      	adds	r2, r3, #1
 80121ac:	69bb      	ldr	r3, [r7, #24]
 80121ae:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80121b0:	69bb      	ldr	r3, [r7, #24]
 80121b2:	791b      	ldrb	r3, [r3, #4]
 80121b4:	f043 0301 	orr.w	r3, r3, #1
 80121b8:	b2da      	uxtb	r2, r3
 80121ba:	69bb      	ldr	r3, [r7, #24]
 80121bc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80121be:	697b      	ldr	r3, [r7, #20]
 80121c0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80121c2:	69bb      	ldr	r3, [r7, #24]
 80121c4:	69db      	ldr	r3, [r3, #28]
 80121c6:	68ba      	ldr	r2, [r7, #8]
 80121c8:	429a      	cmp	r2, r3
 80121ca:	d3c6      	bcc.n	801215a <remove_chain+0x4a>
 80121cc:	e000      	b.n	80121d0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80121ce:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80121d0:	2300      	movs	r3, #0
}
 80121d2:	4618      	mov	r0, r3
 80121d4:	3720      	adds	r7, #32
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}

080121da <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80121da:	b580      	push	{r7, lr}
 80121dc:	b088      	sub	sp, #32
 80121de:	af00      	add	r7, sp, #0
 80121e0:	6078      	str	r0, [r7, #4]
 80121e2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d10d      	bne.n	801220c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80121f0:	693b      	ldr	r3, [r7, #16]
 80121f2:	691b      	ldr	r3, [r3, #16]
 80121f4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80121f6:	69bb      	ldr	r3, [r7, #24]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d004      	beq.n	8012206 <create_chain+0x2c>
 80121fc:	693b      	ldr	r3, [r7, #16]
 80121fe:	69db      	ldr	r3, [r3, #28]
 8012200:	69ba      	ldr	r2, [r7, #24]
 8012202:	429a      	cmp	r2, r3
 8012204:	d31b      	bcc.n	801223e <create_chain+0x64>
 8012206:	2301      	movs	r3, #1
 8012208:	61bb      	str	r3, [r7, #24]
 801220a:	e018      	b.n	801223e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801220c:	6839      	ldr	r1, [r7, #0]
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f7ff fd97 	bl	8011d42 <get_fat>
 8012214:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	2b01      	cmp	r3, #1
 801221a:	d801      	bhi.n	8012220 <create_chain+0x46>
 801221c:	2301      	movs	r3, #1
 801221e:	e070      	b.n	8012302 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012226:	d101      	bne.n	801222c <create_chain+0x52>
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	e06a      	b.n	8012302 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801222c:	693b      	ldr	r3, [r7, #16]
 801222e:	69db      	ldr	r3, [r3, #28]
 8012230:	68fa      	ldr	r2, [r7, #12]
 8012232:	429a      	cmp	r2, r3
 8012234:	d201      	bcs.n	801223a <create_chain+0x60>
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	e063      	b.n	8012302 <create_chain+0x128>
		scl = clst;
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801223e:	69bb      	ldr	r3, [r7, #24]
 8012240:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012242:	69fb      	ldr	r3, [r7, #28]
 8012244:	3301      	adds	r3, #1
 8012246:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012248:	693b      	ldr	r3, [r7, #16]
 801224a:	69db      	ldr	r3, [r3, #28]
 801224c:	69fa      	ldr	r2, [r7, #28]
 801224e:	429a      	cmp	r2, r3
 8012250:	d307      	bcc.n	8012262 <create_chain+0x88>
				ncl = 2;
 8012252:	2302      	movs	r3, #2
 8012254:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012256:	69fa      	ldr	r2, [r7, #28]
 8012258:	69bb      	ldr	r3, [r7, #24]
 801225a:	429a      	cmp	r2, r3
 801225c:	d901      	bls.n	8012262 <create_chain+0x88>
 801225e:	2300      	movs	r3, #0
 8012260:	e04f      	b.n	8012302 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012262:	69f9      	ldr	r1, [r7, #28]
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f7ff fd6c 	bl	8011d42 <get_fat>
 801226a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d00e      	beq.n	8012290 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	2b01      	cmp	r3, #1
 8012276:	d003      	beq.n	8012280 <create_chain+0xa6>
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801227e:	d101      	bne.n	8012284 <create_chain+0xaa>
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	e03e      	b.n	8012302 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012284:	69fa      	ldr	r2, [r7, #28]
 8012286:	69bb      	ldr	r3, [r7, #24]
 8012288:	429a      	cmp	r2, r3
 801228a:	d1da      	bne.n	8012242 <create_chain+0x68>
 801228c:	2300      	movs	r3, #0
 801228e:	e038      	b.n	8012302 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012290:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012292:	f04f 32ff 	mov.w	r2, #4294967295
 8012296:	69f9      	ldr	r1, [r7, #28]
 8012298:	6938      	ldr	r0, [r7, #16]
 801229a:	f7ff fe22 	bl	8011ee2 <put_fat>
 801229e:	4603      	mov	r3, r0
 80122a0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80122a2:	7dfb      	ldrb	r3, [r7, #23]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d109      	bne.n	80122bc <create_chain+0xe2>
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d006      	beq.n	80122bc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80122ae:	69fa      	ldr	r2, [r7, #28]
 80122b0:	6839      	ldr	r1, [r7, #0]
 80122b2:	6938      	ldr	r0, [r7, #16]
 80122b4:	f7ff fe15 	bl	8011ee2 <put_fat>
 80122b8:	4603      	mov	r3, r0
 80122ba:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80122bc:	7dfb      	ldrb	r3, [r7, #23]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d116      	bne.n	80122f0 <create_chain+0x116>
		fs->last_clst = ncl;
 80122c2:	693b      	ldr	r3, [r7, #16]
 80122c4:	69fa      	ldr	r2, [r7, #28]
 80122c6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80122c8:	693b      	ldr	r3, [r7, #16]
 80122ca:	695a      	ldr	r2, [r3, #20]
 80122cc:	693b      	ldr	r3, [r7, #16]
 80122ce:	69db      	ldr	r3, [r3, #28]
 80122d0:	3b02      	subs	r3, #2
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d804      	bhi.n	80122e0 <create_chain+0x106>
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	695b      	ldr	r3, [r3, #20]
 80122da:	1e5a      	subs	r2, r3, #1
 80122dc:	693b      	ldr	r3, [r7, #16]
 80122de:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80122e0:	693b      	ldr	r3, [r7, #16]
 80122e2:	791b      	ldrb	r3, [r3, #4]
 80122e4:	f043 0301 	orr.w	r3, r3, #1
 80122e8:	b2da      	uxtb	r2, r3
 80122ea:	693b      	ldr	r3, [r7, #16]
 80122ec:	711a      	strb	r2, [r3, #4]
 80122ee:	e007      	b.n	8012300 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80122f0:	7dfb      	ldrb	r3, [r7, #23]
 80122f2:	2b01      	cmp	r3, #1
 80122f4:	d102      	bne.n	80122fc <create_chain+0x122>
 80122f6:	f04f 33ff 	mov.w	r3, #4294967295
 80122fa:	e000      	b.n	80122fe <create_chain+0x124>
 80122fc:	2301      	movs	r3, #1
 80122fe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012300:	69fb      	ldr	r3, [r7, #28]
}
 8012302:	4618      	mov	r0, r3
 8012304:	3720      	adds	r7, #32
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}

0801230a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801230a:	b480      	push	{r7}
 801230c:	b087      	sub	sp, #28
 801230e:	af00      	add	r7, sp, #0
 8012310:	6078      	str	r0, [r7, #4]
 8012312:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801231e:	3304      	adds	r3, #4
 8012320:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	899b      	ldrh	r3, [r3, #12]
 8012326:	461a      	mov	r2, r3
 8012328:	683b      	ldr	r3, [r7, #0]
 801232a:	fbb3 f3f2 	udiv	r3, r3, r2
 801232e:	68fa      	ldr	r2, [r7, #12]
 8012330:	8952      	ldrh	r2, [r2, #10]
 8012332:	fbb3 f3f2 	udiv	r3, r3, r2
 8012336:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012338:	693b      	ldr	r3, [r7, #16]
 801233a:	1d1a      	adds	r2, r3, #4
 801233c:	613a      	str	r2, [r7, #16]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012342:	68bb      	ldr	r3, [r7, #8]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d101      	bne.n	801234c <clmt_clust+0x42>
 8012348:	2300      	movs	r3, #0
 801234a:	e010      	b.n	801236e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801234c:	697a      	ldr	r2, [r7, #20]
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	429a      	cmp	r2, r3
 8012352:	d307      	bcc.n	8012364 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8012354:	697a      	ldr	r2, [r7, #20]
 8012356:	68bb      	ldr	r3, [r7, #8]
 8012358:	1ad3      	subs	r3, r2, r3
 801235a:	617b      	str	r3, [r7, #20]
 801235c:	693b      	ldr	r3, [r7, #16]
 801235e:	3304      	adds	r3, #4
 8012360:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012362:	e7e9      	b.n	8012338 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8012364:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012366:	693b      	ldr	r3, [r7, #16]
 8012368:	681a      	ldr	r2, [r3, #0]
 801236a:	697b      	ldr	r3, [r7, #20]
 801236c:	4413      	add	r3, r2
}
 801236e:	4618      	mov	r0, r3
 8012370:	371c      	adds	r7, #28
 8012372:	46bd      	mov	sp, r7
 8012374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012378:	4770      	bx	lr

0801237a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801237a:	b580      	push	{r7, lr}
 801237c:	b086      	sub	sp, #24
 801237e:	af00      	add	r7, sp, #0
 8012380:	6078      	str	r0, [r7, #4]
 8012382:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012390:	d204      	bcs.n	801239c <dir_sdi+0x22>
 8012392:	683b      	ldr	r3, [r7, #0]
 8012394:	f003 031f 	and.w	r3, r3, #31
 8012398:	2b00      	cmp	r3, #0
 801239a:	d001      	beq.n	80123a0 <dir_sdi+0x26>
		return FR_INT_ERR;
 801239c:	2302      	movs	r3, #2
 801239e:	e071      	b.n	8012484 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	683a      	ldr	r2, [r7, #0]
 80123a4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	689b      	ldr	r3, [r3, #8]
 80123aa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d106      	bne.n	80123c0 <dir_sdi+0x46>
 80123b2:	693b      	ldr	r3, [r7, #16]
 80123b4:	781b      	ldrb	r3, [r3, #0]
 80123b6:	2b02      	cmp	r3, #2
 80123b8:	d902      	bls.n	80123c0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80123ba:	693b      	ldr	r3, [r7, #16]
 80123bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123be:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80123c0:	697b      	ldr	r3, [r7, #20]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d10c      	bne.n	80123e0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	095b      	lsrs	r3, r3, #5
 80123ca:	693a      	ldr	r2, [r7, #16]
 80123cc:	8912      	ldrh	r2, [r2, #8]
 80123ce:	4293      	cmp	r3, r2
 80123d0:	d301      	bcc.n	80123d6 <dir_sdi+0x5c>
 80123d2:	2302      	movs	r3, #2
 80123d4:	e056      	b.n	8012484 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80123d6:	693b      	ldr	r3, [r7, #16]
 80123d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	61da      	str	r2, [r3, #28]
 80123de:	e02d      	b.n	801243c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	895b      	ldrh	r3, [r3, #10]
 80123e4:	461a      	mov	r2, r3
 80123e6:	693b      	ldr	r3, [r7, #16]
 80123e8:	899b      	ldrh	r3, [r3, #12]
 80123ea:	fb03 f302 	mul.w	r3, r3, r2
 80123ee:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80123f0:	e019      	b.n	8012426 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	6979      	ldr	r1, [r7, #20]
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7ff fca3 	bl	8011d42 <get_fat>
 80123fc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012404:	d101      	bne.n	801240a <dir_sdi+0x90>
 8012406:	2301      	movs	r3, #1
 8012408:	e03c      	b.n	8012484 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801240a:	697b      	ldr	r3, [r7, #20]
 801240c:	2b01      	cmp	r3, #1
 801240e:	d904      	bls.n	801241a <dir_sdi+0xa0>
 8012410:	693b      	ldr	r3, [r7, #16]
 8012412:	69db      	ldr	r3, [r3, #28]
 8012414:	697a      	ldr	r2, [r7, #20]
 8012416:	429a      	cmp	r2, r3
 8012418:	d301      	bcc.n	801241e <dir_sdi+0xa4>
 801241a:	2302      	movs	r3, #2
 801241c:	e032      	b.n	8012484 <dir_sdi+0x10a>
			ofs -= csz;
 801241e:	683a      	ldr	r2, [r7, #0]
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	1ad3      	subs	r3, r2, r3
 8012424:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012426:	683a      	ldr	r2, [r7, #0]
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	429a      	cmp	r2, r3
 801242c:	d2e1      	bcs.n	80123f2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801242e:	6979      	ldr	r1, [r7, #20]
 8012430:	6938      	ldr	r0, [r7, #16]
 8012432:	f7ff fc67 	bl	8011d04 <clust2sect>
 8012436:	4602      	mov	r2, r0
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	697a      	ldr	r2, [r7, #20]
 8012440:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	69db      	ldr	r3, [r3, #28]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d101      	bne.n	801244e <dir_sdi+0xd4>
 801244a:	2302      	movs	r3, #2
 801244c:	e01a      	b.n	8012484 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	69da      	ldr	r2, [r3, #28]
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	899b      	ldrh	r3, [r3, #12]
 8012456:	4619      	mov	r1, r3
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	fbb3 f3f1 	udiv	r3, r3, r1
 801245e:	441a      	add	r2, r3
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012464:	693b      	ldr	r3, [r7, #16]
 8012466:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	899b      	ldrh	r3, [r3, #12]
 801246e:	461a      	mov	r2, r3
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	fbb3 f0f2 	udiv	r0, r3, r2
 8012476:	fb02 f200 	mul.w	r2, r2, r0
 801247a:	1a9b      	subs	r3, r3, r2
 801247c:	18ca      	adds	r2, r1, r3
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012482:	2300      	movs	r3, #0
}
 8012484:	4618      	mov	r0, r3
 8012486:	3718      	adds	r7, #24
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}

0801248c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b086      	sub	sp, #24
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
 8012494:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	695b      	ldr	r3, [r3, #20]
 80124a0:	3320      	adds	r3, #32
 80124a2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	69db      	ldr	r3, [r3, #28]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d003      	beq.n	80124b4 <dir_next+0x28>
 80124ac:	68bb      	ldr	r3, [r7, #8]
 80124ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80124b2:	d301      	bcc.n	80124b8 <dir_next+0x2c>
 80124b4:	2304      	movs	r3, #4
 80124b6:	e0bb      	b.n	8012630 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	899b      	ldrh	r3, [r3, #12]
 80124bc:	461a      	mov	r2, r3
 80124be:	68bb      	ldr	r3, [r7, #8]
 80124c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80124c4:	fb02 f201 	mul.w	r2, r2, r1
 80124c8:	1a9b      	subs	r3, r3, r2
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	f040 809d 	bne.w	801260a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	69db      	ldr	r3, [r3, #28]
 80124d4:	1c5a      	adds	r2, r3, #1
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	699b      	ldr	r3, [r3, #24]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d10b      	bne.n	80124fa <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	095b      	lsrs	r3, r3, #5
 80124e6:	68fa      	ldr	r2, [r7, #12]
 80124e8:	8912      	ldrh	r2, [r2, #8]
 80124ea:	4293      	cmp	r3, r2
 80124ec:	f0c0 808d 	bcc.w	801260a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	2200      	movs	r2, #0
 80124f4:	61da      	str	r2, [r3, #28]
 80124f6:	2304      	movs	r3, #4
 80124f8:	e09a      	b.n	8012630 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	899b      	ldrh	r3, [r3, #12]
 80124fe:	461a      	mov	r2, r3
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	fbb3 f3f2 	udiv	r3, r3, r2
 8012506:	68fa      	ldr	r2, [r7, #12]
 8012508:	8952      	ldrh	r2, [r2, #10]
 801250a:	3a01      	subs	r2, #1
 801250c:	4013      	ands	r3, r2
 801250e:	2b00      	cmp	r3, #0
 8012510:	d17b      	bne.n	801260a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012512:	687a      	ldr	r2, [r7, #4]
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	699b      	ldr	r3, [r3, #24]
 8012518:	4619      	mov	r1, r3
 801251a:	4610      	mov	r0, r2
 801251c:	f7ff fc11 	bl	8011d42 <get_fat>
 8012520:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	2b01      	cmp	r3, #1
 8012526:	d801      	bhi.n	801252c <dir_next+0xa0>
 8012528:	2302      	movs	r3, #2
 801252a:	e081      	b.n	8012630 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801252c:	697b      	ldr	r3, [r7, #20]
 801252e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012532:	d101      	bne.n	8012538 <dir_next+0xac>
 8012534:	2301      	movs	r3, #1
 8012536:	e07b      	b.n	8012630 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	69db      	ldr	r3, [r3, #28]
 801253c:	697a      	ldr	r2, [r7, #20]
 801253e:	429a      	cmp	r2, r3
 8012540:	d359      	bcc.n	80125f6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d104      	bne.n	8012552 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	2200      	movs	r2, #0
 801254c:	61da      	str	r2, [r3, #28]
 801254e:	2304      	movs	r3, #4
 8012550:	e06e      	b.n	8012630 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012552:	687a      	ldr	r2, [r7, #4]
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	699b      	ldr	r3, [r3, #24]
 8012558:	4619      	mov	r1, r3
 801255a:	4610      	mov	r0, r2
 801255c:	f7ff fe3d 	bl	80121da <create_chain>
 8012560:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d101      	bne.n	801256c <dir_next+0xe0>
 8012568:	2307      	movs	r3, #7
 801256a:	e061      	b.n	8012630 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	2b01      	cmp	r3, #1
 8012570:	d101      	bne.n	8012576 <dir_next+0xea>
 8012572:	2302      	movs	r3, #2
 8012574:	e05c      	b.n	8012630 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	f1b3 3fff 	cmp.w	r3, #4294967295
 801257c:	d101      	bne.n	8012582 <dir_next+0xf6>
 801257e:	2301      	movs	r3, #1
 8012580:	e056      	b.n	8012630 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012582:	68f8      	ldr	r0, [r7, #12]
 8012584:	f7ff fadc 	bl	8011b40 <sync_window>
 8012588:	4603      	mov	r3, r0
 801258a:	2b00      	cmp	r3, #0
 801258c:	d001      	beq.n	8012592 <dir_next+0x106>
 801258e:	2301      	movs	r3, #1
 8012590:	e04e      	b.n	8012630 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	899b      	ldrh	r3, [r3, #12]
 801259c:	461a      	mov	r2, r3
 801259e:	2100      	movs	r1, #0
 80125a0:	f7ff f905 	bl	80117ae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80125a4:	2300      	movs	r3, #0
 80125a6:	613b      	str	r3, [r7, #16]
 80125a8:	6979      	ldr	r1, [r7, #20]
 80125aa:	68f8      	ldr	r0, [r7, #12]
 80125ac:	f7ff fbaa 	bl	8011d04 <clust2sect>
 80125b0:	4602      	mov	r2, r0
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	635a      	str	r2, [r3, #52]	; 0x34
 80125b6:	e012      	b.n	80125de <dir_next+0x152>
						fs->wflag = 1;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	2201      	movs	r2, #1
 80125bc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80125be:	68f8      	ldr	r0, [r7, #12]
 80125c0:	f7ff fabe 	bl	8011b40 <sync_window>
 80125c4:	4603      	mov	r3, r0
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d001      	beq.n	80125ce <dir_next+0x142>
 80125ca:	2301      	movs	r3, #1
 80125cc:	e030      	b.n	8012630 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80125ce:	693b      	ldr	r3, [r7, #16]
 80125d0:	3301      	adds	r3, #1
 80125d2:	613b      	str	r3, [r7, #16]
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125d8:	1c5a      	adds	r2, r3, #1
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	635a      	str	r2, [r3, #52]	; 0x34
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	895b      	ldrh	r3, [r3, #10]
 80125e2:	461a      	mov	r2, r3
 80125e4:	693b      	ldr	r3, [r7, #16]
 80125e6:	4293      	cmp	r3, r2
 80125e8:	d3e6      	bcc.n	80125b8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80125ee:	693b      	ldr	r3, [r7, #16]
 80125f0:	1ad2      	subs	r2, r2, r3
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	697a      	ldr	r2, [r7, #20]
 80125fa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80125fc:	6979      	ldr	r1, [r7, #20]
 80125fe:	68f8      	ldr	r0, [r7, #12]
 8012600:	f7ff fb80 	bl	8011d04 <clust2sect>
 8012604:	4602      	mov	r2, r0
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	68ba      	ldr	r2, [r7, #8]
 801260e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	899b      	ldrh	r3, [r3, #12]
 801261a:	461a      	mov	r2, r3
 801261c:	68bb      	ldr	r3, [r7, #8]
 801261e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012622:	fb02 f200 	mul.w	r2, r2, r0
 8012626:	1a9b      	subs	r3, r3, r2
 8012628:	18ca      	adds	r2, r1, r3
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801262e:	2300      	movs	r3, #0
}
 8012630:	4618      	mov	r0, r3
 8012632:	3718      	adds	r7, #24
 8012634:	46bd      	mov	sp, r7
 8012636:	bd80      	pop	{r7, pc}

08012638 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b086      	sub	sp, #24
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
 8012640:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012648:	2100      	movs	r1, #0
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f7ff fe95 	bl	801237a <dir_sdi>
 8012650:	4603      	mov	r3, r0
 8012652:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012654:	7dfb      	ldrb	r3, [r7, #23]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d12b      	bne.n	80126b2 <dir_alloc+0x7a>
		n = 0;
 801265a:	2300      	movs	r3, #0
 801265c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	69db      	ldr	r3, [r3, #28]
 8012662:	4619      	mov	r1, r3
 8012664:	68f8      	ldr	r0, [r7, #12]
 8012666:	f7ff faaf 	bl	8011bc8 <move_window>
 801266a:	4603      	mov	r3, r0
 801266c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801266e:	7dfb      	ldrb	r3, [r7, #23]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d11d      	bne.n	80126b0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6a1b      	ldr	r3, [r3, #32]
 8012678:	781b      	ldrb	r3, [r3, #0]
 801267a:	2be5      	cmp	r3, #229	; 0xe5
 801267c:	d004      	beq.n	8012688 <dir_alloc+0x50>
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	6a1b      	ldr	r3, [r3, #32]
 8012682:	781b      	ldrb	r3, [r3, #0]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d107      	bne.n	8012698 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012688:	693b      	ldr	r3, [r7, #16]
 801268a:	3301      	adds	r3, #1
 801268c:	613b      	str	r3, [r7, #16]
 801268e:	693a      	ldr	r2, [r7, #16]
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	429a      	cmp	r2, r3
 8012694:	d102      	bne.n	801269c <dir_alloc+0x64>
 8012696:	e00c      	b.n	80126b2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012698:	2300      	movs	r3, #0
 801269a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801269c:	2101      	movs	r1, #1
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f7ff fef4 	bl	801248c <dir_next>
 80126a4:	4603      	mov	r3, r0
 80126a6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80126a8:	7dfb      	ldrb	r3, [r7, #23]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d0d7      	beq.n	801265e <dir_alloc+0x26>
 80126ae:	e000      	b.n	80126b2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80126b0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80126b2:	7dfb      	ldrb	r3, [r7, #23]
 80126b4:	2b04      	cmp	r3, #4
 80126b6:	d101      	bne.n	80126bc <dir_alloc+0x84>
 80126b8:	2307      	movs	r3, #7
 80126ba:	75fb      	strb	r3, [r7, #23]
	return res;
 80126bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3718      	adds	r7, #24
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}

080126c6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80126c6:	b580      	push	{r7, lr}
 80126c8:	b084      	sub	sp, #16
 80126ca:	af00      	add	r7, sp, #0
 80126cc:	6078      	str	r0, [r7, #4]
 80126ce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	331a      	adds	r3, #26
 80126d4:	4618      	mov	r0, r3
 80126d6:	f7fe ffc7 	bl	8011668 <ld_word>
 80126da:	4603      	mov	r3, r0
 80126dc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	781b      	ldrb	r3, [r3, #0]
 80126e2:	2b03      	cmp	r3, #3
 80126e4:	d109      	bne.n	80126fa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	3314      	adds	r3, #20
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7fe ffbc 	bl	8011668 <ld_word>
 80126f0:	4603      	mov	r3, r0
 80126f2:	041b      	lsls	r3, r3, #16
 80126f4:	68fa      	ldr	r2, [r7, #12]
 80126f6:	4313      	orrs	r3, r2
 80126f8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80126fa:	68fb      	ldr	r3, [r7, #12]
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	3710      	adds	r7, #16
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}

08012704 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b084      	sub	sp, #16
 8012708:	af00      	add	r7, sp, #0
 801270a:	60f8      	str	r0, [r7, #12]
 801270c:	60b9      	str	r1, [r7, #8]
 801270e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012710:	68bb      	ldr	r3, [r7, #8]
 8012712:	331a      	adds	r3, #26
 8012714:	687a      	ldr	r2, [r7, #4]
 8012716:	b292      	uxth	r2, r2
 8012718:	4611      	mov	r1, r2
 801271a:	4618      	mov	r0, r3
 801271c:	f7fe ffdf 	bl	80116de <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	781b      	ldrb	r3, [r3, #0]
 8012724:	2b03      	cmp	r3, #3
 8012726:	d109      	bne.n	801273c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012728:	68bb      	ldr	r3, [r7, #8]
 801272a:	f103 0214 	add.w	r2, r3, #20
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	0c1b      	lsrs	r3, r3, #16
 8012732:	b29b      	uxth	r3, r3
 8012734:	4619      	mov	r1, r3
 8012736:	4610      	mov	r0, r2
 8012738:	f7fe ffd1 	bl	80116de <st_word>
	}
}
 801273c:	bf00      	nop
 801273e:	3710      	adds	r7, #16
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b086      	sub	sp, #24
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
 801274c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 801274e:	2304      	movs	r3, #4
 8012750:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012758:	e03c      	b.n	80127d4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	69db      	ldr	r3, [r3, #28]
 801275e:	4619      	mov	r1, r3
 8012760:	6938      	ldr	r0, [r7, #16]
 8012762:	f7ff fa31 	bl	8011bc8 <move_window>
 8012766:	4603      	mov	r3, r0
 8012768:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801276a:	7dfb      	ldrb	r3, [r7, #23]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d136      	bne.n	80127de <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	6a1b      	ldr	r3, [r3, #32]
 8012774:	781b      	ldrb	r3, [r3, #0]
 8012776:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012778:	7bfb      	ldrb	r3, [r7, #15]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d102      	bne.n	8012784 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801277e:	2304      	movs	r3, #4
 8012780:	75fb      	strb	r3, [r7, #23]
 8012782:	e031      	b.n	80127e8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	6a1b      	ldr	r3, [r3, #32]
 8012788:	330b      	adds	r3, #11
 801278a:	781b      	ldrb	r3, [r3, #0]
 801278c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012790:	73bb      	strb	r3, [r7, #14]
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	7bba      	ldrb	r2, [r7, #14]
 8012796:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012798:	7bfb      	ldrb	r3, [r7, #15]
 801279a:	2be5      	cmp	r3, #229	; 0xe5
 801279c:	d011      	beq.n	80127c2 <dir_read+0x7e>
 801279e:	7bfb      	ldrb	r3, [r7, #15]
 80127a0:	2b2e      	cmp	r3, #46	; 0x2e
 80127a2:	d00e      	beq.n	80127c2 <dir_read+0x7e>
 80127a4:	7bbb      	ldrb	r3, [r7, #14]
 80127a6:	2b0f      	cmp	r3, #15
 80127a8:	d00b      	beq.n	80127c2 <dir_read+0x7e>
 80127aa:	7bbb      	ldrb	r3, [r7, #14]
 80127ac:	f023 0320 	bic.w	r3, r3, #32
 80127b0:	2b08      	cmp	r3, #8
 80127b2:	bf0c      	ite	eq
 80127b4:	2301      	moveq	r3, #1
 80127b6:	2300      	movne	r3, #0
 80127b8:	b2db      	uxtb	r3, r3
 80127ba:	461a      	mov	r2, r3
 80127bc:	683b      	ldr	r3, [r7, #0]
 80127be:	4293      	cmp	r3, r2
 80127c0:	d00f      	beq.n	80127e2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80127c2:	2100      	movs	r1, #0
 80127c4:	6878      	ldr	r0, [r7, #4]
 80127c6:	f7ff fe61 	bl	801248c <dir_next>
 80127ca:	4603      	mov	r3, r0
 80127cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80127ce:	7dfb      	ldrb	r3, [r7, #23]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d108      	bne.n	80127e6 <dir_read+0xa2>
	while (dp->sect) {
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	69db      	ldr	r3, [r3, #28]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d1be      	bne.n	801275a <dir_read+0x16>
 80127dc:	e004      	b.n	80127e8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80127de:	bf00      	nop
 80127e0:	e002      	b.n	80127e8 <dir_read+0xa4>
				break;
 80127e2:	bf00      	nop
 80127e4:	e000      	b.n	80127e8 <dir_read+0xa4>
		if (res != FR_OK) break;
 80127e6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80127e8:	7dfb      	ldrb	r3, [r7, #23]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d002      	beq.n	80127f4 <dir_read+0xb0>
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	2200      	movs	r2, #0
 80127f2:	61da      	str	r2, [r3, #28]
	return res;
 80127f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80127f6:	4618      	mov	r0, r3
 80127f8:	3718      	adds	r7, #24
 80127fa:	46bd      	mov	sp, r7
 80127fc:	bd80      	pop	{r7, pc}

080127fe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80127fe:	b580      	push	{r7, lr}
 8012800:	b086      	sub	sp, #24
 8012802:	af00      	add	r7, sp, #0
 8012804:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801280c:	2100      	movs	r1, #0
 801280e:	6878      	ldr	r0, [r7, #4]
 8012810:	f7ff fdb3 	bl	801237a <dir_sdi>
 8012814:	4603      	mov	r3, r0
 8012816:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012818:	7dfb      	ldrb	r3, [r7, #23]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d001      	beq.n	8012822 <dir_find+0x24>
 801281e:	7dfb      	ldrb	r3, [r7, #23]
 8012820:	e03e      	b.n	80128a0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	69db      	ldr	r3, [r3, #28]
 8012826:	4619      	mov	r1, r3
 8012828:	6938      	ldr	r0, [r7, #16]
 801282a:	f7ff f9cd 	bl	8011bc8 <move_window>
 801282e:	4603      	mov	r3, r0
 8012830:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012832:	7dfb      	ldrb	r3, [r7, #23]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d12f      	bne.n	8012898 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	6a1b      	ldr	r3, [r3, #32]
 801283c:	781b      	ldrb	r3, [r3, #0]
 801283e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012840:	7bfb      	ldrb	r3, [r7, #15]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d102      	bne.n	801284c <dir_find+0x4e>
 8012846:	2304      	movs	r3, #4
 8012848:	75fb      	strb	r3, [r7, #23]
 801284a:	e028      	b.n	801289e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6a1b      	ldr	r3, [r3, #32]
 8012850:	330b      	adds	r3, #11
 8012852:	781b      	ldrb	r3, [r3, #0]
 8012854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012858:	b2da      	uxtb	r2, r3
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	6a1b      	ldr	r3, [r3, #32]
 8012862:	330b      	adds	r3, #11
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	f003 0308 	and.w	r3, r3, #8
 801286a:	2b00      	cmp	r3, #0
 801286c:	d10a      	bne.n	8012884 <dir_find+0x86>
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	6a18      	ldr	r0, [r3, #32]
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	3324      	adds	r3, #36	; 0x24
 8012876:	220b      	movs	r2, #11
 8012878:	4619      	mov	r1, r3
 801287a:	f7fe ffb2 	bl	80117e2 <mem_cmp>
 801287e:	4603      	mov	r3, r0
 8012880:	2b00      	cmp	r3, #0
 8012882:	d00b      	beq.n	801289c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012884:	2100      	movs	r1, #0
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f7ff fe00 	bl	801248c <dir_next>
 801288c:	4603      	mov	r3, r0
 801288e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012890:	7dfb      	ldrb	r3, [r7, #23]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d0c5      	beq.n	8012822 <dir_find+0x24>
 8012896:	e002      	b.n	801289e <dir_find+0xa0>
		if (res != FR_OK) break;
 8012898:	bf00      	nop
 801289a:	e000      	b.n	801289e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801289c:	bf00      	nop

	return res;
 801289e:	7dfb      	ldrb	r3, [r7, #23]
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	3718      	adds	r7, #24
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}

080128a8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b084      	sub	sp, #16
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80128b6:	2101      	movs	r1, #1
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f7ff febd 	bl	8012638 <dir_alloc>
 80128be:	4603      	mov	r3, r0
 80128c0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80128c2:	7bfb      	ldrb	r3, [r7, #15]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d11c      	bne.n	8012902 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	69db      	ldr	r3, [r3, #28]
 80128cc:	4619      	mov	r1, r3
 80128ce:	68b8      	ldr	r0, [r7, #8]
 80128d0:	f7ff f97a 	bl	8011bc8 <move_window>
 80128d4:	4603      	mov	r3, r0
 80128d6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80128d8:	7bfb      	ldrb	r3, [r7, #15]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d111      	bne.n	8012902 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	6a1b      	ldr	r3, [r3, #32]
 80128e2:	2220      	movs	r2, #32
 80128e4:	2100      	movs	r1, #0
 80128e6:	4618      	mov	r0, r3
 80128e8:	f7fe ff61 	bl	80117ae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	6a18      	ldr	r0, [r3, #32]
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	3324      	adds	r3, #36	; 0x24
 80128f4:	220b      	movs	r2, #11
 80128f6:	4619      	mov	r1, r3
 80128f8:	f7fe ff38 	bl	801176c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	2201      	movs	r2, #1
 8012900:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012902:	7bfb      	ldrb	r3, [r7, #15]
}
 8012904:	4618      	mov	r0, r3
 8012906:	3710      	adds	r7, #16
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}

0801290c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b084      	sub	sp, #16
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	69db      	ldr	r3, [r3, #28]
 801291e:	4619      	mov	r1, r3
 8012920:	68f8      	ldr	r0, [r7, #12]
 8012922:	f7ff f951 	bl	8011bc8 <move_window>
 8012926:	4603      	mov	r3, r0
 8012928:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801292a:	7afb      	ldrb	r3, [r7, #11]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d106      	bne.n	801293e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6a1b      	ldr	r3, [r3, #32]
 8012934:	22e5      	movs	r2, #229	; 0xe5
 8012936:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	2201      	movs	r2, #1
 801293c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 801293e:	7afb      	ldrb	r3, [r7, #11]
}
 8012940:	4618      	mov	r0, r3
 8012942:	3710      	adds	r7, #16
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b088      	sub	sp, #32
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
 8012950:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012952:	683b      	ldr	r3, [r7, #0]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	60fb      	str	r3, [r7, #12]
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	3324      	adds	r3, #36	; 0x24
 801295c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801295e:	220b      	movs	r2, #11
 8012960:	2120      	movs	r1, #32
 8012962:	68b8      	ldr	r0, [r7, #8]
 8012964:	f7fe ff23 	bl	80117ae <mem_set>
	si = i = 0; ni = 8;
 8012968:	2300      	movs	r3, #0
 801296a:	613b      	str	r3, [r7, #16]
 801296c:	693b      	ldr	r3, [r7, #16]
 801296e:	617b      	str	r3, [r7, #20]
 8012970:	2308      	movs	r3, #8
 8012972:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012974:	68fa      	ldr	r2, [r7, #12]
 8012976:	697b      	ldr	r3, [r7, #20]
 8012978:	4413      	add	r3, r2
 801297a:	781b      	ldrb	r3, [r3, #0]
 801297c:	2b2e      	cmp	r3, #46	; 0x2e
 801297e:	d12f      	bne.n	80129e0 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	1c5a      	adds	r2, r3, #1
 8012984:	617a      	str	r2, [r7, #20]
 8012986:	68fa      	ldr	r2, [r7, #12]
 8012988:	4413      	add	r3, r2
 801298a:	781b      	ldrb	r3, [r3, #0]
 801298c:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 801298e:	7ffb      	ldrb	r3, [r7, #31]
 8012990:	2b2e      	cmp	r3, #46	; 0x2e
 8012992:	d10a      	bne.n	80129aa <create_name+0x62>
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	2b02      	cmp	r3, #2
 8012998:	d807      	bhi.n	80129aa <create_name+0x62>
			sfn[i++] = c;
 801299a:	693b      	ldr	r3, [r7, #16]
 801299c:	1c5a      	adds	r2, r3, #1
 801299e:	613a      	str	r2, [r7, #16]
 80129a0:	68ba      	ldr	r2, [r7, #8]
 80129a2:	4413      	add	r3, r2
 80129a4:	7ffa      	ldrb	r2, [r7, #31]
 80129a6:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80129a8:	e7ea      	b.n	8012980 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80129aa:	7ffb      	ldrb	r3, [r7, #31]
 80129ac:	2b2f      	cmp	r3, #47	; 0x2f
 80129ae:	d007      	beq.n	80129c0 <create_name+0x78>
 80129b0:	7ffb      	ldrb	r3, [r7, #31]
 80129b2:	2b5c      	cmp	r3, #92	; 0x5c
 80129b4:	d004      	beq.n	80129c0 <create_name+0x78>
 80129b6:	7ffb      	ldrb	r3, [r7, #31]
 80129b8:	2b20      	cmp	r3, #32
 80129ba:	d901      	bls.n	80129c0 <create_name+0x78>
 80129bc:	2306      	movs	r3, #6
 80129be:	e084      	b.n	8012aca <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 80129c0:	68fa      	ldr	r2, [r7, #12]
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	441a      	add	r2, r3
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80129ca:	7ffb      	ldrb	r3, [r7, #31]
 80129cc:	2b20      	cmp	r3, #32
 80129ce:	d801      	bhi.n	80129d4 <create_name+0x8c>
 80129d0:	2224      	movs	r2, #36	; 0x24
 80129d2:	e000      	b.n	80129d6 <create_name+0x8e>
 80129d4:	2220      	movs	r2, #32
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	330b      	adds	r3, #11
 80129da:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 80129dc:	2300      	movs	r3, #0
 80129de:	e074      	b.n	8012aca <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	1c5a      	adds	r2, r3, #1
 80129e4:	617a      	str	r2, [r7, #20]
 80129e6:	68fa      	ldr	r2, [r7, #12]
 80129e8:	4413      	add	r3, r2
 80129ea:	781b      	ldrb	r3, [r3, #0]
 80129ec:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80129ee:	7ffb      	ldrb	r3, [r7, #31]
 80129f0:	2b20      	cmp	r3, #32
 80129f2:	d94e      	bls.n	8012a92 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80129f4:	7ffb      	ldrb	r3, [r7, #31]
 80129f6:	2b2f      	cmp	r3, #47	; 0x2f
 80129f8:	d006      	beq.n	8012a08 <create_name+0xc0>
 80129fa:	7ffb      	ldrb	r3, [r7, #31]
 80129fc:	2b5c      	cmp	r3, #92	; 0x5c
 80129fe:	d110      	bne.n	8012a22 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012a00:	e002      	b.n	8012a08 <create_name+0xc0>
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	3301      	adds	r3, #1
 8012a06:	617b      	str	r3, [r7, #20]
 8012a08:	68fa      	ldr	r2, [r7, #12]
 8012a0a:	697b      	ldr	r3, [r7, #20]
 8012a0c:	4413      	add	r3, r2
 8012a0e:	781b      	ldrb	r3, [r3, #0]
 8012a10:	2b2f      	cmp	r3, #47	; 0x2f
 8012a12:	d0f6      	beq.n	8012a02 <create_name+0xba>
 8012a14:	68fa      	ldr	r2, [r7, #12]
 8012a16:	697b      	ldr	r3, [r7, #20]
 8012a18:	4413      	add	r3, r2
 8012a1a:	781b      	ldrb	r3, [r3, #0]
 8012a1c:	2b5c      	cmp	r3, #92	; 0x5c
 8012a1e:	d0f0      	beq.n	8012a02 <create_name+0xba>
			break;
 8012a20:	e038      	b.n	8012a94 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012a22:	7ffb      	ldrb	r3, [r7, #31]
 8012a24:	2b2e      	cmp	r3, #46	; 0x2e
 8012a26:	d003      	beq.n	8012a30 <create_name+0xe8>
 8012a28:	693a      	ldr	r2, [r7, #16]
 8012a2a:	69bb      	ldr	r3, [r7, #24]
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	d30c      	bcc.n	8012a4a <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012a30:	69bb      	ldr	r3, [r7, #24]
 8012a32:	2b0b      	cmp	r3, #11
 8012a34:	d002      	beq.n	8012a3c <create_name+0xf4>
 8012a36:	7ffb      	ldrb	r3, [r7, #31]
 8012a38:	2b2e      	cmp	r3, #46	; 0x2e
 8012a3a:	d001      	beq.n	8012a40 <create_name+0xf8>
 8012a3c:	2306      	movs	r3, #6
 8012a3e:	e044      	b.n	8012aca <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012a40:	2308      	movs	r3, #8
 8012a42:	613b      	str	r3, [r7, #16]
 8012a44:	230b      	movs	r3, #11
 8012a46:	61bb      	str	r3, [r7, #24]
			continue;
 8012a48:	e022      	b.n	8012a90 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012a4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	da04      	bge.n	8012a5c <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012a52:	7ffb      	ldrb	r3, [r7, #31]
 8012a54:	3b80      	subs	r3, #128	; 0x80
 8012a56:	4a1f      	ldr	r2, [pc, #124]	; (8012ad4 <create_name+0x18c>)
 8012a58:	5cd3      	ldrb	r3, [r2, r3]
 8012a5a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012a5c:	7ffb      	ldrb	r3, [r7, #31]
 8012a5e:	4619      	mov	r1, r3
 8012a60:	481d      	ldr	r0, [pc, #116]	; (8012ad8 <create_name+0x190>)
 8012a62:	f7fe fee5 	bl	8011830 <chk_chr>
 8012a66:	4603      	mov	r3, r0
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d001      	beq.n	8012a70 <create_name+0x128>
 8012a6c:	2306      	movs	r3, #6
 8012a6e:	e02c      	b.n	8012aca <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012a70:	7ffb      	ldrb	r3, [r7, #31]
 8012a72:	2b60      	cmp	r3, #96	; 0x60
 8012a74:	d905      	bls.n	8012a82 <create_name+0x13a>
 8012a76:	7ffb      	ldrb	r3, [r7, #31]
 8012a78:	2b7a      	cmp	r3, #122	; 0x7a
 8012a7a:	d802      	bhi.n	8012a82 <create_name+0x13a>
 8012a7c:	7ffb      	ldrb	r3, [r7, #31]
 8012a7e:	3b20      	subs	r3, #32
 8012a80:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012a82:	693b      	ldr	r3, [r7, #16]
 8012a84:	1c5a      	adds	r2, r3, #1
 8012a86:	613a      	str	r2, [r7, #16]
 8012a88:	68ba      	ldr	r2, [r7, #8]
 8012a8a:	4413      	add	r3, r2
 8012a8c:	7ffa      	ldrb	r2, [r7, #31]
 8012a8e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012a90:	e7a6      	b.n	80129e0 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012a92:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012a94:	68fa      	ldr	r2, [r7, #12]
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	441a      	add	r2, r3
 8012a9a:	683b      	ldr	r3, [r7, #0]
 8012a9c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d101      	bne.n	8012aa8 <create_name+0x160>
 8012aa4:	2306      	movs	r3, #6
 8012aa6:	e010      	b.n	8012aca <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	2be5      	cmp	r3, #229	; 0xe5
 8012aae:	d102      	bne.n	8012ab6 <create_name+0x16e>
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	2205      	movs	r2, #5
 8012ab4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012ab6:	7ffb      	ldrb	r3, [r7, #31]
 8012ab8:	2b20      	cmp	r3, #32
 8012aba:	d801      	bhi.n	8012ac0 <create_name+0x178>
 8012abc:	2204      	movs	r2, #4
 8012abe:	e000      	b.n	8012ac2 <create_name+0x17a>
 8012ac0:	2200      	movs	r2, #0
 8012ac2:	68bb      	ldr	r3, [r7, #8]
 8012ac4:	330b      	adds	r3, #11
 8012ac6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012ac8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012aca:	4618      	mov	r0, r3
 8012acc:	3720      	adds	r7, #32
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	bd80      	pop	{r7, pc}
 8012ad2:	bf00      	nop
 8012ad4:	0801a124 	.word	0x0801a124
 8012ad8:	0801a0d4 	.word	0x0801a0d4

08012adc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b086      	sub	sp, #24
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
 8012ae4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012aea:	693b      	ldr	r3, [r7, #16]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012af0:	683b      	ldr	r3, [r7, #0]
 8012af2:	781b      	ldrb	r3, [r3, #0]
 8012af4:	2b2f      	cmp	r3, #47	; 0x2f
 8012af6:	d00b      	beq.n	8012b10 <follow_path+0x34>
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	781b      	ldrb	r3, [r3, #0]
 8012afc:	2b5c      	cmp	r3, #92	; 0x5c
 8012afe:	d007      	beq.n	8012b10 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	699a      	ldr	r2, [r3, #24]
 8012b04:	693b      	ldr	r3, [r7, #16]
 8012b06:	609a      	str	r2, [r3, #8]
 8012b08:	e00d      	b.n	8012b26 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012b0a:	683b      	ldr	r3, [r7, #0]
 8012b0c:	3301      	adds	r3, #1
 8012b0e:	603b      	str	r3, [r7, #0]
 8012b10:	683b      	ldr	r3, [r7, #0]
 8012b12:	781b      	ldrb	r3, [r3, #0]
 8012b14:	2b2f      	cmp	r3, #47	; 0x2f
 8012b16:	d0f8      	beq.n	8012b0a <follow_path+0x2e>
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	781b      	ldrb	r3, [r3, #0]
 8012b1c:	2b5c      	cmp	r3, #92	; 0x5c
 8012b1e:	d0f4      	beq.n	8012b0a <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	2200      	movs	r2, #0
 8012b24:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	781b      	ldrb	r3, [r3, #0]
 8012b2a:	2b1f      	cmp	r3, #31
 8012b2c:	d80a      	bhi.n	8012b44 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	2280      	movs	r2, #128	; 0x80
 8012b32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012b36:	2100      	movs	r1, #0
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f7ff fc1e 	bl	801237a <dir_sdi>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	75fb      	strb	r3, [r7, #23]
 8012b42:	e05b      	b.n	8012bfc <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012b44:	463b      	mov	r3, r7
 8012b46:	4619      	mov	r1, r3
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f7ff fefd 	bl	8012948 <create_name>
 8012b4e:	4603      	mov	r3, r0
 8012b50:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012b52:	7dfb      	ldrb	r3, [r7, #23]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d14c      	bne.n	8012bf2 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012b58:	6878      	ldr	r0, [r7, #4]
 8012b5a:	f7ff fe50 	bl	80127fe <dir_find>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012b68:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012b6a:	7dfb      	ldrb	r3, [r7, #23]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d01b      	beq.n	8012ba8 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012b70:	7dfb      	ldrb	r3, [r7, #23]
 8012b72:	2b04      	cmp	r3, #4
 8012b74:	d13f      	bne.n	8012bf6 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012b76:	7afb      	ldrb	r3, [r7, #11]
 8012b78:	f003 0320 	and.w	r3, r3, #32
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d00b      	beq.n	8012b98 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012b80:	7afb      	ldrb	r3, [r7, #11]
 8012b82:	f003 0304 	and.w	r3, r3, #4
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d031      	beq.n	8012bee <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	2280      	movs	r2, #128	; 0x80
 8012b8e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012b92:	2300      	movs	r3, #0
 8012b94:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012b96:	e02e      	b.n	8012bf6 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012b98:	7afb      	ldrb	r3, [r7, #11]
 8012b9a:	f003 0304 	and.w	r3, r3, #4
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d129      	bne.n	8012bf6 <follow_path+0x11a>
 8012ba2:	2305      	movs	r3, #5
 8012ba4:	75fb      	strb	r3, [r7, #23]
				break;
 8012ba6:	e026      	b.n	8012bf6 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012ba8:	7afb      	ldrb	r3, [r7, #11]
 8012baa:	f003 0304 	and.w	r3, r3, #4
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d123      	bne.n	8012bfa <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012bb2:	693b      	ldr	r3, [r7, #16]
 8012bb4:	799b      	ldrb	r3, [r3, #6]
 8012bb6:	f003 0310 	and.w	r3, r3, #16
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d102      	bne.n	8012bc4 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012bbe:	2305      	movs	r3, #5
 8012bc0:	75fb      	strb	r3, [r7, #23]
 8012bc2:	e01b      	b.n	8012bfc <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	695b      	ldr	r3, [r3, #20]
 8012bce:	68fa      	ldr	r2, [r7, #12]
 8012bd0:	8992      	ldrh	r2, [r2, #12]
 8012bd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8012bd6:	fb02 f200 	mul.w	r2, r2, r0
 8012bda:	1a9b      	subs	r3, r3, r2
 8012bdc:	440b      	add	r3, r1
 8012bde:	4619      	mov	r1, r3
 8012be0:	68f8      	ldr	r0, [r7, #12]
 8012be2:	f7ff fd70 	bl	80126c6 <ld_clust>
 8012be6:	4602      	mov	r2, r0
 8012be8:	693b      	ldr	r3, [r7, #16]
 8012bea:	609a      	str	r2, [r3, #8]
 8012bec:	e7aa      	b.n	8012b44 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012bee:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012bf0:	e7a8      	b.n	8012b44 <follow_path+0x68>
			if (res != FR_OK) break;
 8012bf2:	bf00      	nop
 8012bf4:	e002      	b.n	8012bfc <follow_path+0x120>
				break;
 8012bf6:	bf00      	nop
 8012bf8:	e000      	b.n	8012bfc <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012bfa:	bf00      	nop
			}
		}
	}

	return res;
 8012bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bfe:	4618      	mov	r0, r3
 8012c00:	3718      	adds	r7, #24
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}

08012c06 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012c06:	b480      	push	{r7}
 8012c08:	b087      	sub	sp, #28
 8012c0a:	af00      	add	r7, sp, #0
 8012c0c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c12:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d031      	beq.n	8012c80 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	617b      	str	r3, [r7, #20]
 8012c22:	e002      	b.n	8012c2a <get_ldnumber+0x24>
 8012c24:	697b      	ldr	r3, [r7, #20]
 8012c26:	3301      	adds	r3, #1
 8012c28:	617b      	str	r3, [r7, #20]
 8012c2a:	697b      	ldr	r3, [r7, #20]
 8012c2c:	781b      	ldrb	r3, [r3, #0]
 8012c2e:	2b20      	cmp	r3, #32
 8012c30:	d903      	bls.n	8012c3a <get_ldnumber+0x34>
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	781b      	ldrb	r3, [r3, #0]
 8012c36:	2b3a      	cmp	r3, #58	; 0x3a
 8012c38:	d1f4      	bne.n	8012c24 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	781b      	ldrb	r3, [r3, #0]
 8012c3e:	2b3a      	cmp	r3, #58	; 0x3a
 8012c40:	d11c      	bne.n	8012c7c <get_ldnumber+0x76>
			tp = *path;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	1c5a      	adds	r2, r3, #1
 8012c4c:	60fa      	str	r2, [r7, #12]
 8012c4e:	781b      	ldrb	r3, [r3, #0]
 8012c50:	3b30      	subs	r3, #48	; 0x30
 8012c52:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	2b09      	cmp	r3, #9
 8012c58:	d80e      	bhi.n	8012c78 <get_ldnumber+0x72>
 8012c5a:	68fa      	ldr	r2, [r7, #12]
 8012c5c:	697b      	ldr	r3, [r7, #20]
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	d10a      	bne.n	8012c78 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012c62:	68bb      	ldr	r3, [r7, #8]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d107      	bne.n	8012c78 <get_ldnumber+0x72>
					vol = (int)i;
 8012c68:	68bb      	ldr	r3, [r7, #8]
 8012c6a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	3301      	adds	r3, #1
 8012c70:	617b      	str	r3, [r7, #20]
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	697a      	ldr	r2, [r7, #20]
 8012c76:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012c78:	693b      	ldr	r3, [r7, #16]
 8012c7a:	e002      	b.n	8012c82 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012c80:	693b      	ldr	r3, [r7, #16]
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	371c      	adds	r7, #28
 8012c86:	46bd      	mov	sp, r7
 8012c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8c:	4770      	bx	lr
	...

08012c90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b082      	sub	sp, #8
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
 8012c98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	70da      	strb	r2, [r3, #3]
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8012ca6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012ca8:	6839      	ldr	r1, [r7, #0]
 8012caa:	6878      	ldr	r0, [r7, #4]
 8012cac:	f7fe ff8c 	bl	8011bc8 <move_window>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d001      	beq.n	8012cba <check_fs+0x2a>
 8012cb6:	2304      	movs	r3, #4
 8012cb8:	e038      	b.n	8012d2c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	3338      	adds	r3, #56	; 0x38
 8012cbe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f7fe fcd0 	bl	8011668 <ld_word>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	461a      	mov	r2, r3
 8012ccc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	d001      	beq.n	8012cd8 <check_fs+0x48>
 8012cd4:	2303      	movs	r3, #3
 8012cd6:	e029      	b.n	8012d2c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012cde:	2be9      	cmp	r3, #233	; 0xe9
 8012ce0:	d009      	beq.n	8012cf6 <check_fs+0x66>
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012ce8:	2beb      	cmp	r3, #235	; 0xeb
 8012cea:	d11e      	bne.n	8012d2a <check_fs+0x9a>
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012cf2:	2b90      	cmp	r3, #144	; 0x90
 8012cf4:	d119      	bne.n	8012d2a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	3338      	adds	r3, #56	; 0x38
 8012cfa:	3336      	adds	r3, #54	; 0x36
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	f7fe fccb 	bl	8011698 <ld_dword>
 8012d02:	4603      	mov	r3, r0
 8012d04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012d08:	4a0a      	ldr	r2, [pc, #40]	; (8012d34 <check_fs+0xa4>)
 8012d0a:	4293      	cmp	r3, r2
 8012d0c:	d101      	bne.n	8012d12 <check_fs+0x82>
 8012d0e:	2300      	movs	r3, #0
 8012d10:	e00c      	b.n	8012d2c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	3338      	adds	r3, #56	; 0x38
 8012d16:	3352      	adds	r3, #82	; 0x52
 8012d18:	4618      	mov	r0, r3
 8012d1a:	f7fe fcbd 	bl	8011698 <ld_dword>
 8012d1e:	4602      	mov	r2, r0
 8012d20:	4b05      	ldr	r3, [pc, #20]	; (8012d38 <check_fs+0xa8>)
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d101      	bne.n	8012d2a <check_fs+0x9a>
 8012d26:	2300      	movs	r3, #0
 8012d28:	e000      	b.n	8012d2c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012d2a:	2302      	movs	r3, #2
}
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	3708      	adds	r7, #8
 8012d30:	46bd      	mov	sp, r7
 8012d32:	bd80      	pop	{r7, pc}
 8012d34:	00544146 	.word	0x00544146
 8012d38:	33544146 	.word	0x33544146

08012d3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b096      	sub	sp, #88	; 0x58
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	60f8      	str	r0, [r7, #12]
 8012d44:	60b9      	str	r1, [r7, #8]
 8012d46:	4613      	mov	r3, r2
 8012d48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012d4a:	68bb      	ldr	r3, [r7, #8]
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012d50:	68f8      	ldr	r0, [r7, #12]
 8012d52:	f7ff ff58 	bl	8012c06 <get_ldnumber>
 8012d56:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	da01      	bge.n	8012d62 <find_volume+0x26>
 8012d5e:	230b      	movs	r3, #11
 8012d60:	e268      	b.n	8013234 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012d62:	4ab0      	ldr	r2, [pc, #704]	; (8013024 <find_volume+0x2e8>)
 8012d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d6a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d101      	bne.n	8012d76 <find_volume+0x3a>
 8012d72:	230c      	movs	r3, #12
 8012d74:	e25e      	b.n	8013234 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d7a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012d7c:	79fb      	ldrb	r3, [r7, #7]
 8012d7e:	f023 0301 	bic.w	r3, r3, #1
 8012d82:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d01a      	beq.n	8012dc2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d8e:	785b      	ldrb	r3, [r3, #1]
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7fe fbcb 	bl	801152c <disk_status>
 8012d96:	4603      	mov	r3, r0
 8012d98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012d9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012da0:	f003 0301 	and.w	r3, r3, #1
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d10c      	bne.n	8012dc2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012da8:	79fb      	ldrb	r3, [r7, #7]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d007      	beq.n	8012dbe <find_volume+0x82>
 8012dae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012db2:	f003 0304 	and.w	r3, r3, #4
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d001      	beq.n	8012dbe <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012dba:	230a      	movs	r3, #10
 8012dbc:	e23a      	b.n	8013234 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	e238      	b.n	8013234 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dca:	b2da      	uxtb	r2, r3
 8012dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dce:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dd2:	785b      	ldrb	r3, [r3, #1]
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7fe fbc3 	bl	8011560 <disk_initialize>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012de0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012de4:	f003 0301 	and.w	r3, r3, #1
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d001      	beq.n	8012df0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012dec:	2303      	movs	r3, #3
 8012dee:	e221      	b.n	8013234 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012df0:	79fb      	ldrb	r3, [r7, #7]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d007      	beq.n	8012e06 <find_volume+0xca>
 8012df6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dfa:	f003 0304 	and.w	r3, r3, #4
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d001      	beq.n	8012e06 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012e02:	230a      	movs	r3, #10
 8012e04:	e216      	b.n	8013234 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e08:	7858      	ldrb	r0, [r3, #1]
 8012e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e0c:	330c      	adds	r3, #12
 8012e0e:	461a      	mov	r2, r3
 8012e10:	2102      	movs	r1, #2
 8012e12:	f7fe fc0b 	bl	801162c <disk_ioctl>
 8012e16:	4603      	mov	r3, r0
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d001      	beq.n	8012e20 <find_volume+0xe4>
 8012e1c:	2301      	movs	r3, #1
 8012e1e:	e209      	b.n	8013234 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e22:	899b      	ldrh	r3, [r3, #12]
 8012e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012e28:	d80d      	bhi.n	8012e46 <find_volume+0x10a>
 8012e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e2c:	899b      	ldrh	r3, [r3, #12]
 8012e2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e32:	d308      	bcc.n	8012e46 <find_volume+0x10a>
 8012e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e36:	899b      	ldrh	r3, [r3, #12]
 8012e38:	461a      	mov	r2, r3
 8012e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e3c:	899b      	ldrh	r3, [r3, #12]
 8012e3e:	3b01      	subs	r3, #1
 8012e40:	4013      	ands	r3, r2
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d001      	beq.n	8012e4a <find_volume+0x10e>
 8012e46:	2301      	movs	r3, #1
 8012e48:	e1f4      	b.n	8013234 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012e4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012e50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012e52:	f7ff ff1d 	bl	8012c90 <check_fs>
 8012e56:	4603      	mov	r3, r0
 8012e58:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012e5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e60:	2b02      	cmp	r3, #2
 8012e62:	d14b      	bne.n	8012efc <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012e64:	2300      	movs	r3, #0
 8012e66:	643b      	str	r3, [r7, #64]	; 0x40
 8012e68:	e01f      	b.n	8012eaa <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e6c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e72:	011b      	lsls	r3, r3, #4
 8012e74:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012e78:	4413      	add	r3, r2
 8012e7a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e7e:	3304      	adds	r3, #4
 8012e80:	781b      	ldrb	r3, [r3, #0]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d006      	beq.n	8012e94 <find_volume+0x158>
 8012e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e88:	3308      	adds	r3, #8
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7fe fc04 	bl	8011698 <ld_dword>
 8012e90:	4602      	mov	r2, r0
 8012e92:	e000      	b.n	8012e96 <find_volume+0x15a>
 8012e94:	2200      	movs	r2, #0
 8012e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e98:	009b      	lsls	r3, r3, #2
 8012e9a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012e9e:	440b      	add	r3, r1
 8012ea0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ea6:	3301      	adds	r3, #1
 8012ea8:	643b      	str	r3, [r7, #64]	; 0x40
 8012eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eac:	2b03      	cmp	r3, #3
 8012eae:	d9dc      	bls.n	8012e6a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d002      	beq.n	8012ec0 <find_volume+0x184>
 8012eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ebc:	3b01      	subs	r3, #1
 8012ebe:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ec2:	009b      	lsls	r3, r3, #2
 8012ec4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012ec8:	4413      	add	r3, r2
 8012eca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012ece:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012ed0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d005      	beq.n	8012ee2 <find_volume+0x1a6>
 8012ed6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012ed8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012eda:	f7ff fed9 	bl	8012c90 <check_fs>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	e000      	b.n	8012ee4 <find_volume+0x1a8>
 8012ee2:	2303      	movs	r3, #3
 8012ee4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012ee8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	d905      	bls.n	8012efc <find_volume+0x1c0>
 8012ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ef2:	3301      	adds	r3, #1
 8012ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8012ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ef8:	2b03      	cmp	r3, #3
 8012efa:	d9e1      	bls.n	8012ec0 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012efc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f00:	2b04      	cmp	r3, #4
 8012f02:	d101      	bne.n	8012f08 <find_volume+0x1cc>
 8012f04:	2301      	movs	r3, #1
 8012f06:	e195      	b.n	8013234 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f0c:	2b01      	cmp	r3, #1
 8012f0e:	d901      	bls.n	8012f14 <find_volume+0x1d8>
 8012f10:	230d      	movs	r3, #13
 8012f12:	e18f      	b.n	8013234 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f16:	3338      	adds	r3, #56	; 0x38
 8012f18:	330b      	adds	r3, #11
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	f7fe fba4 	bl	8011668 <ld_word>
 8012f20:	4603      	mov	r3, r0
 8012f22:	461a      	mov	r2, r3
 8012f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f26:	899b      	ldrh	r3, [r3, #12]
 8012f28:	429a      	cmp	r2, r3
 8012f2a:	d001      	beq.n	8012f30 <find_volume+0x1f4>
 8012f2c:	230d      	movs	r3, #13
 8012f2e:	e181      	b.n	8013234 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f32:	3338      	adds	r3, #56	; 0x38
 8012f34:	3316      	adds	r3, #22
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7fe fb96 	bl	8011668 <ld_word>
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d106      	bne.n	8012f54 <find_volume+0x218>
 8012f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f48:	3338      	adds	r3, #56	; 0x38
 8012f4a:	3324      	adds	r3, #36	; 0x24
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7fe fba3 	bl	8011698 <ld_dword>
 8012f52:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012f58:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f5c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f62:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f66:	789b      	ldrb	r3, [r3, #2]
 8012f68:	2b01      	cmp	r3, #1
 8012f6a:	d005      	beq.n	8012f78 <find_volume+0x23c>
 8012f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f6e:	789b      	ldrb	r3, [r3, #2]
 8012f70:	2b02      	cmp	r3, #2
 8012f72:	d001      	beq.n	8012f78 <find_volume+0x23c>
 8012f74:	230d      	movs	r3, #13
 8012f76:	e15d      	b.n	8013234 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f7a:	789b      	ldrb	r3, [r3, #2]
 8012f7c:	461a      	mov	r2, r3
 8012f7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f80:	fb02 f303 	mul.w	r3, r2, r3
 8012f84:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012f8c:	b29a      	uxth	r2, r3
 8012f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f90:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f94:	895b      	ldrh	r3, [r3, #10]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d008      	beq.n	8012fac <find_volume+0x270>
 8012f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f9c:	895b      	ldrh	r3, [r3, #10]
 8012f9e:	461a      	mov	r2, r3
 8012fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fa2:	895b      	ldrh	r3, [r3, #10]
 8012fa4:	3b01      	subs	r3, #1
 8012fa6:	4013      	ands	r3, r2
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d001      	beq.n	8012fb0 <find_volume+0x274>
 8012fac:	230d      	movs	r3, #13
 8012fae:	e141      	b.n	8013234 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fb2:	3338      	adds	r3, #56	; 0x38
 8012fb4:	3311      	adds	r3, #17
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	f7fe fb56 	bl	8011668 <ld_word>
 8012fbc:	4603      	mov	r3, r0
 8012fbe:	461a      	mov	r2, r3
 8012fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc6:	891b      	ldrh	r3, [r3, #8]
 8012fc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012fca:	8992      	ldrh	r2, [r2, #12]
 8012fcc:	0952      	lsrs	r2, r2, #5
 8012fce:	b292      	uxth	r2, r2
 8012fd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8012fd4:	fb02 f201 	mul.w	r2, r2, r1
 8012fd8:	1a9b      	subs	r3, r3, r2
 8012fda:	b29b      	uxth	r3, r3
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d001      	beq.n	8012fe4 <find_volume+0x2a8>
 8012fe0:	230d      	movs	r3, #13
 8012fe2:	e127      	b.n	8013234 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fe6:	3338      	adds	r3, #56	; 0x38
 8012fe8:	3313      	adds	r3, #19
 8012fea:	4618      	mov	r0, r3
 8012fec:	f7fe fb3c 	bl	8011668 <ld_word>
 8012ff0:	4603      	mov	r3, r0
 8012ff2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d106      	bne.n	8013008 <find_volume+0x2cc>
 8012ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ffc:	3338      	adds	r3, #56	; 0x38
 8012ffe:	3320      	adds	r3, #32
 8013000:	4618      	mov	r0, r3
 8013002:	f7fe fb49 	bl	8011698 <ld_dword>
 8013006:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300a:	3338      	adds	r3, #56	; 0x38
 801300c:	330e      	adds	r3, #14
 801300e:	4618      	mov	r0, r3
 8013010:	f7fe fb2a 	bl	8011668 <ld_word>
 8013014:	4603      	mov	r3, r0
 8013016:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013018:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801301a:	2b00      	cmp	r3, #0
 801301c:	d104      	bne.n	8013028 <find_volume+0x2ec>
 801301e:	230d      	movs	r3, #13
 8013020:	e108      	b.n	8013234 <find_volume+0x4f8>
 8013022:	bf00      	nop
 8013024:	200422cc 	.word	0x200422cc

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013028:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801302a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801302c:	4413      	add	r3, r2
 801302e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013030:	8911      	ldrh	r1, [r2, #8]
 8013032:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013034:	8992      	ldrh	r2, [r2, #12]
 8013036:	0952      	lsrs	r2, r2, #5
 8013038:	b292      	uxth	r2, r2
 801303a:	fbb1 f2f2 	udiv	r2, r1, r2
 801303e:	b292      	uxth	r2, r2
 8013040:	4413      	add	r3, r2
 8013042:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8013044:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013048:	429a      	cmp	r2, r3
 801304a:	d201      	bcs.n	8013050 <find_volume+0x314>
 801304c:	230d      	movs	r3, #13
 801304e:	e0f1      	b.n	8013234 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013054:	1ad3      	subs	r3, r2, r3
 8013056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013058:	8952      	ldrh	r2, [r2, #10]
 801305a:	fbb3 f3f2 	udiv	r3, r3, r2
 801305e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013062:	2b00      	cmp	r3, #0
 8013064:	d101      	bne.n	801306a <find_volume+0x32e>
 8013066:	230d      	movs	r3, #13
 8013068:	e0e4      	b.n	8013234 <find_volume+0x4f8>
		fmt = FS_FAT32;
 801306a:	2303      	movs	r3, #3
 801306c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013072:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013076:	4293      	cmp	r3, r2
 8013078:	d802      	bhi.n	8013080 <find_volume+0x344>
 801307a:	2302      	movs	r3, #2
 801307c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013082:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013086:	4293      	cmp	r3, r2
 8013088:	d802      	bhi.n	8013090 <find_volume+0x354>
 801308a:	2301      	movs	r3, #1
 801308c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013092:	1c9a      	adds	r2, r3, #2
 8013094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013096:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8013098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801309a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801309c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801309e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80130a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130a2:	441a      	add	r2, r3
 80130a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80130a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80130aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ac:	441a      	add	r2, r3
 80130ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b0:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80130b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130b6:	2b03      	cmp	r3, #3
 80130b8:	d11e      	bne.n	80130f8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80130ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130bc:	3338      	adds	r3, #56	; 0x38
 80130be:	332a      	adds	r3, #42	; 0x2a
 80130c0:	4618      	mov	r0, r3
 80130c2:	f7fe fad1 	bl	8011668 <ld_word>
 80130c6:	4603      	mov	r3, r0
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d001      	beq.n	80130d0 <find_volume+0x394>
 80130cc:	230d      	movs	r3, #13
 80130ce:	e0b1      	b.n	8013234 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80130d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d2:	891b      	ldrh	r3, [r3, #8]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d001      	beq.n	80130dc <find_volume+0x3a0>
 80130d8:	230d      	movs	r3, #13
 80130da:	e0ab      	b.n	8013234 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80130dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130de:	3338      	adds	r3, #56	; 0x38
 80130e0:	332c      	adds	r3, #44	; 0x2c
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7fe fad8 	bl	8011698 <ld_dword>
 80130e8:	4602      	mov	r2, r0
 80130ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ec:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80130ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f0:	69db      	ldr	r3, [r3, #28]
 80130f2:	009b      	lsls	r3, r3, #2
 80130f4:	647b      	str	r3, [r7, #68]	; 0x44
 80130f6:	e01f      	b.n	8013138 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80130f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130fa:	891b      	ldrh	r3, [r3, #8]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d101      	bne.n	8013104 <find_volume+0x3c8>
 8013100:	230d      	movs	r3, #13
 8013102:	e097      	b.n	8013234 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013106:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801310a:	441a      	add	r2, r3
 801310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801310e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013110:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013114:	2b02      	cmp	r3, #2
 8013116:	d103      	bne.n	8013120 <find_volume+0x3e4>
 8013118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801311a:	69db      	ldr	r3, [r3, #28]
 801311c:	005b      	lsls	r3, r3, #1
 801311e:	e00a      	b.n	8013136 <find_volume+0x3fa>
 8013120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013122:	69da      	ldr	r2, [r3, #28]
 8013124:	4613      	mov	r3, r2
 8013126:	005b      	lsls	r3, r3, #1
 8013128:	4413      	add	r3, r2
 801312a:	085a      	lsrs	r2, r3, #1
 801312c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801312e:	69db      	ldr	r3, [r3, #28]
 8013130:	f003 0301 	and.w	r3, r3, #1
 8013134:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013136:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801313a:	6a1a      	ldr	r2, [r3, #32]
 801313c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801313e:	899b      	ldrh	r3, [r3, #12]
 8013140:	4619      	mov	r1, r3
 8013142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013144:	440b      	add	r3, r1
 8013146:	3b01      	subs	r3, #1
 8013148:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801314a:	8989      	ldrh	r1, [r1, #12]
 801314c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013150:	429a      	cmp	r2, r3
 8013152:	d201      	bcs.n	8013158 <find_volume+0x41c>
 8013154:	230d      	movs	r3, #13
 8013156:	e06d      	b.n	8013234 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801315a:	f04f 32ff 	mov.w	r2, #4294967295
 801315e:	615a      	str	r2, [r3, #20]
 8013160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013162:	695a      	ldr	r2, [r3, #20]
 8013164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013166:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801316a:	2280      	movs	r2, #128	; 0x80
 801316c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801316e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013172:	2b03      	cmp	r3, #3
 8013174:	d149      	bne.n	801320a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013178:	3338      	adds	r3, #56	; 0x38
 801317a:	3330      	adds	r3, #48	; 0x30
 801317c:	4618      	mov	r0, r3
 801317e:	f7fe fa73 	bl	8011668 <ld_word>
 8013182:	4603      	mov	r3, r0
 8013184:	2b01      	cmp	r3, #1
 8013186:	d140      	bne.n	801320a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801318a:	3301      	adds	r3, #1
 801318c:	4619      	mov	r1, r3
 801318e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013190:	f7fe fd1a 	bl	8011bc8 <move_window>
 8013194:	4603      	mov	r3, r0
 8013196:	2b00      	cmp	r3, #0
 8013198:	d137      	bne.n	801320a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801319c:	2200      	movs	r2, #0
 801319e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80131a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a2:	3338      	adds	r3, #56	; 0x38
 80131a4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80131a8:	4618      	mov	r0, r3
 80131aa:	f7fe fa5d 	bl	8011668 <ld_word>
 80131ae:	4603      	mov	r3, r0
 80131b0:	461a      	mov	r2, r3
 80131b2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80131b6:	429a      	cmp	r2, r3
 80131b8:	d127      	bne.n	801320a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80131ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131bc:	3338      	adds	r3, #56	; 0x38
 80131be:	4618      	mov	r0, r3
 80131c0:	f7fe fa6a 	bl	8011698 <ld_dword>
 80131c4:	4602      	mov	r2, r0
 80131c6:	4b1d      	ldr	r3, [pc, #116]	; (801323c <find_volume+0x500>)
 80131c8:	429a      	cmp	r2, r3
 80131ca:	d11e      	bne.n	801320a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80131cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ce:	3338      	adds	r3, #56	; 0x38
 80131d0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80131d4:	4618      	mov	r0, r3
 80131d6:	f7fe fa5f 	bl	8011698 <ld_dword>
 80131da:	4602      	mov	r2, r0
 80131dc:	4b18      	ldr	r3, [pc, #96]	; (8013240 <find_volume+0x504>)
 80131de:	429a      	cmp	r2, r3
 80131e0:	d113      	bne.n	801320a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80131e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e4:	3338      	adds	r3, #56	; 0x38
 80131e6:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80131ea:	4618      	mov	r0, r3
 80131ec:	f7fe fa54 	bl	8011698 <ld_dword>
 80131f0:	4602      	mov	r2, r0
 80131f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131f4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80131f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131f8:	3338      	adds	r3, #56	; 0x38
 80131fa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80131fe:	4618      	mov	r0, r3
 8013200:	f7fe fa4a 	bl	8011698 <ld_dword>
 8013204:	4602      	mov	r2, r0
 8013206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013208:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801320a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801320c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013210:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013212:	4b0c      	ldr	r3, [pc, #48]	; (8013244 <find_volume+0x508>)
 8013214:	881b      	ldrh	r3, [r3, #0]
 8013216:	3301      	adds	r3, #1
 8013218:	b29a      	uxth	r2, r3
 801321a:	4b0a      	ldr	r3, [pc, #40]	; (8013244 <find_volume+0x508>)
 801321c:	801a      	strh	r2, [r3, #0]
 801321e:	4b09      	ldr	r3, [pc, #36]	; (8013244 <find_volume+0x508>)
 8013220:	881a      	ldrh	r2, [r3, #0]
 8013222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013224:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8013226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013228:	2200      	movs	r2, #0
 801322a:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801322c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801322e:	f7fe fc63 	bl	8011af8 <clear_lock>
#endif
	return FR_OK;
 8013232:	2300      	movs	r3, #0
}
 8013234:	4618      	mov	r0, r3
 8013236:	3758      	adds	r7, #88	; 0x58
 8013238:	46bd      	mov	sp, r7
 801323a:	bd80      	pop	{r7, pc}
 801323c:	41615252 	.word	0x41615252
 8013240:	61417272 	.word	0x61417272
 8013244:	200422d0 	.word	0x200422d0

08013248 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013248:	b580      	push	{r7, lr}
 801324a:	b084      	sub	sp, #16
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
 8013250:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013252:	2309      	movs	r3, #9
 8013254:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d01c      	beq.n	8013296 <validate+0x4e>
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d018      	beq.n	8013296 <validate+0x4e>
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	781b      	ldrb	r3, [r3, #0]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d013      	beq.n	8013296 <validate+0x4e>
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	889a      	ldrh	r2, [r3, #4]
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	88db      	ldrh	r3, [r3, #6]
 8013278:	429a      	cmp	r2, r3
 801327a:	d10c      	bne.n	8013296 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	785b      	ldrb	r3, [r3, #1]
 8013282:	4618      	mov	r0, r3
 8013284:	f7fe f952 	bl	801152c <disk_status>
 8013288:	4603      	mov	r3, r0
 801328a:	f003 0301 	and.w	r3, r3, #1
 801328e:	2b00      	cmp	r3, #0
 8013290:	d101      	bne.n	8013296 <validate+0x4e>
			res = FR_OK;
 8013292:	2300      	movs	r3, #0
 8013294:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013296:	7bfb      	ldrb	r3, [r7, #15]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d102      	bne.n	80132a2 <validate+0x5a>
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	e000      	b.n	80132a4 <validate+0x5c>
 80132a2:	2300      	movs	r3, #0
 80132a4:	683a      	ldr	r2, [r7, #0]
 80132a6:	6013      	str	r3, [r2, #0]
	return res;
 80132a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80132aa:	4618      	mov	r0, r3
 80132ac:	3710      	adds	r7, #16
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}
	...

080132b4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b088      	sub	sp, #32
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	60f8      	str	r0, [r7, #12]
 80132bc:	60b9      	str	r1, [r7, #8]
 80132be:	4613      	mov	r3, r2
 80132c0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80132c6:	f107 0310 	add.w	r3, r7, #16
 80132ca:	4618      	mov	r0, r3
 80132cc:	f7ff fc9b 	bl	8012c06 <get_ldnumber>
 80132d0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80132d2:	69fb      	ldr	r3, [r7, #28]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	da01      	bge.n	80132dc <f_mount+0x28>
 80132d8:	230b      	movs	r3, #11
 80132da:	e02b      	b.n	8013334 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80132dc:	4a17      	ldr	r2, [pc, #92]	; (801333c <f_mount+0x88>)
 80132de:	69fb      	ldr	r3, [r7, #28]
 80132e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80132e4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80132e6:	69bb      	ldr	r3, [r7, #24]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d005      	beq.n	80132f8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80132ec:	69b8      	ldr	r0, [r7, #24]
 80132ee:	f7fe fc03 	bl	8011af8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80132f2:	69bb      	ldr	r3, [r7, #24]
 80132f4:	2200      	movs	r2, #0
 80132f6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d002      	beq.n	8013304 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	2200      	movs	r2, #0
 8013302:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013304:	68fa      	ldr	r2, [r7, #12]
 8013306:	490d      	ldr	r1, [pc, #52]	; (801333c <f_mount+0x88>)
 8013308:	69fb      	ldr	r3, [r7, #28]
 801330a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d002      	beq.n	801331a <f_mount+0x66>
 8013314:	79fb      	ldrb	r3, [r7, #7]
 8013316:	2b01      	cmp	r3, #1
 8013318:	d001      	beq.n	801331e <f_mount+0x6a>
 801331a:	2300      	movs	r3, #0
 801331c:	e00a      	b.n	8013334 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801331e:	f107 010c 	add.w	r1, r7, #12
 8013322:	f107 0308 	add.w	r3, r7, #8
 8013326:	2200      	movs	r2, #0
 8013328:	4618      	mov	r0, r3
 801332a:	f7ff fd07 	bl	8012d3c <find_volume>
 801332e:	4603      	mov	r3, r0
 8013330:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013332:	7dfb      	ldrb	r3, [r7, #23]
}
 8013334:	4618      	mov	r0, r3
 8013336:	3720      	adds	r7, #32
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}
 801333c:	200422cc 	.word	0x200422cc

08013340 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b098      	sub	sp, #96	; 0x60
 8013344:	af00      	add	r7, sp, #0
 8013346:	60f8      	str	r0, [r7, #12]
 8013348:	60b9      	str	r1, [r7, #8]
 801334a:	4613      	mov	r3, r2
 801334c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d101      	bne.n	8013358 <f_open+0x18>
 8013354:	2309      	movs	r3, #9
 8013356:	e1ba      	b.n	80136ce <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013358:	79fb      	ldrb	r3, [r7, #7]
 801335a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801335e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013360:	79fa      	ldrb	r2, [r7, #7]
 8013362:	f107 0110 	add.w	r1, r7, #16
 8013366:	f107 0308 	add.w	r3, r7, #8
 801336a:	4618      	mov	r0, r3
 801336c:	f7ff fce6 	bl	8012d3c <find_volume>
 8013370:	4603      	mov	r3, r0
 8013372:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013376:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801337a:	2b00      	cmp	r3, #0
 801337c:	f040 819e 	bne.w	80136bc <f_open+0x37c>
		dj.obj.fs = fs;
 8013380:	693b      	ldr	r3, [r7, #16]
 8013382:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013384:	68ba      	ldr	r2, [r7, #8]
 8013386:	f107 0314 	add.w	r3, r7, #20
 801338a:	4611      	mov	r1, r2
 801338c:	4618      	mov	r0, r3
 801338e:	f7ff fba5 	bl	8012adc <follow_path>
 8013392:	4603      	mov	r3, r0
 8013394:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013398:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801339c:	2b00      	cmp	r3, #0
 801339e:	d11a      	bne.n	80133d6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80133a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80133a4:	b25b      	sxtb	r3, r3
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	da03      	bge.n	80133b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80133aa:	2306      	movs	r3, #6
 80133ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80133b0:	e011      	b.n	80133d6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80133b2:	79fb      	ldrb	r3, [r7, #7]
 80133b4:	f023 0301 	bic.w	r3, r3, #1
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	bf14      	ite	ne
 80133bc:	2301      	movne	r3, #1
 80133be:	2300      	moveq	r3, #0
 80133c0:	b2db      	uxtb	r3, r3
 80133c2:	461a      	mov	r2, r3
 80133c4:	f107 0314 	add.w	r3, r7, #20
 80133c8:	4611      	mov	r1, r2
 80133ca:	4618      	mov	r0, r3
 80133cc:	f7fe fa4c 	bl	8011868 <chk_lock>
 80133d0:	4603      	mov	r3, r0
 80133d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80133d6:	79fb      	ldrb	r3, [r7, #7]
 80133d8:	f003 031c 	and.w	r3, r3, #28
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d07e      	beq.n	80134de <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80133e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d017      	beq.n	8013418 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80133e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133ec:	2b04      	cmp	r3, #4
 80133ee:	d10e      	bne.n	801340e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80133f0:	f7fe fa96 	bl	8011920 <enq_lock>
 80133f4:	4603      	mov	r3, r0
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d006      	beq.n	8013408 <f_open+0xc8>
 80133fa:	f107 0314 	add.w	r3, r7, #20
 80133fe:	4618      	mov	r0, r3
 8013400:	f7ff fa52 	bl	80128a8 <dir_register>
 8013404:	4603      	mov	r3, r0
 8013406:	e000      	b.n	801340a <f_open+0xca>
 8013408:	2312      	movs	r3, #18
 801340a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801340e:	79fb      	ldrb	r3, [r7, #7]
 8013410:	f043 0308 	orr.w	r3, r3, #8
 8013414:	71fb      	strb	r3, [r7, #7]
 8013416:	e010      	b.n	801343a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013418:	7ebb      	ldrb	r3, [r7, #26]
 801341a:	f003 0311 	and.w	r3, r3, #17
 801341e:	2b00      	cmp	r3, #0
 8013420:	d003      	beq.n	801342a <f_open+0xea>
					res = FR_DENIED;
 8013422:	2307      	movs	r3, #7
 8013424:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013428:	e007      	b.n	801343a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801342a:	79fb      	ldrb	r3, [r7, #7]
 801342c:	f003 0304 	and.w	r3, r3, #4
 8013430:	2b00      	cmp	r3, #0
 8013432:	d002      	beq.n	801343a <f_open+0xfa>
 8013434:	2308      	movs	r3, #8
 8013436:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801343a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801343e:	2b00      	cmp	r3, #0
 8013440:	d167      	bne.n	8013512 <f_open+0x1d2>
 8013442:	79fb      	ldrb	r3, [r7, #7]
 8013444:	f003 0308 	and.w	r3, r3, #8
 8013448:	2b00      	cmp	r3, #0
 801344a:	d062      	beq.n	8013512 <f_open+0x1d2>
				dw = GET_FATTIME();
 801344c:	4ba2      	ldr	r3, [pc, #648]	; (80136d8 <f_open+0x398>)
 801344e:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013452:	330e      	adds	r3, #14
 8013454:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013456:	4618      	mov	r0, r3
 8013458:	f7fe f95c 	bl	8011714 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801345c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801345e:	3316      	adds	r3, #22
 8013460:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013462:	4618      	mov	r0, r3
 8013464:	f7fe f956 	bl	8011714 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801346a:	330b      	adds	r3, #11
 801346c:	2220      	movs	r2, #32
 801346e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013470:	693b      	ldr	r3, [r7, #16]
 8013472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013474:	4611      	mov	r1, r2
 8013476:	4618      	mov	r0, r3
 8013478:	f7ff f925 	bl	80126c6 <ld_clust>
 801347c:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801347e:	693b      	ldr	r3, [r7, #16]
 8013480:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013482:	2200      	movs	r2, #0
 8013484:	4618      	mov	r0, r3
 8013486:	f7ff f93d 	bl	8012704 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801348a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801348c:	331c      	adds	r3, #28
 801348e:	2100      	movs	r1, #0
 8013490:	4618      	mov	r0, r3
 8013492:	f7fe f93f 	bl	8011714 <st_dword>
					fs->wflag = 1;
 8013496:	693b      	ldr	r3, [r7, #16]
 8013498:	2201      	movs	r2, #1
 801349a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801349c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d037      	beq.n	8013512 <f_open+0x1d2>
						dw = fs->winsect;
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134a6:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80134a8:	f107 0314 	add.w	r3, r7, #20
 80134ac:	2200      	movs	r2, #0
 80134ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80134b0:	4618      	mov	r0, r3
 80134b2:	f7fe fe2d 	bl	8012110 <remove_chain>
 80134b6:	4603      	mov	r3, r0
 80134b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80134bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d126      	bne.n	8013512 <f_open+0x1d2>
							res = move_window(fs, dw);
 80134c4:	693b      	ldr	r3, [r7, #16]
 80134c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80134c8:	4618      	mov	r0, r3
 80134ca:	f7fe fb7d 	bl	8011bc8 <move_window>
 80134ce:	4603      	mov	r3, r0
 80134d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80134d4:	693b      	ldr	r3, [r7, #16]
 80134d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80134d8:	3a01      	subs	r2, #1
 80134da:	611a      	str	r2, [r3, #16]
 80134dc:	e019      	b.n	8013512 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80134de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d115      	bne.n	8013512 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80134e6:	7ebb      	ldrb	r3, [r7, #26]
 80134e8:	f003 0310 	and.w	r3, r3, #16
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d003      	beq.n	80134f8 <f_open+0x1b8>
					res = FR_NO_FILE;
 80134f0:	2304      	movs	r3, #4
 80134f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80134f6:	e00c      	b.n	8013512 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80134f8:	79fb      	ldrb	r3, [r7, #7]
 80134fa:	f003 0302 	and.w	r3, r3, #2
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d007      	beq.n	8013512 <f_open+0x1d2>
 8013502:	7ebb      	ldrb	r3, [r7, #26]
 8013504:	f003 0301 	and.w	r3, r3, #1
 8013508:	2b00      	cmp	r3, #0
 801350a:	d002      	beq.n	8013512 <f_open+0x1d2>
						res = FR_DENIED;
 801350c:	2307      	movs	r3, #7
 801350e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013512:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013516:	2b00      	cmp	r3, #0
 8013518:	d128      	bne.n	801356c <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801351a:	79fb      	ldrb	r3, [r7, #7]
 801351c:	f003 0308 	and.w	r3, r3, #8
 8013520:	2b00      	cmp	r3, #0
 8013522:	d003      	beq.n	801352c <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8013524:	79fb      	ldrb	r3, [r7, #7]
 8013526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801352a:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801352c:	693b      	ldr	r3, [r7, #16]
 801352e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8013534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801353a:	79fb      	ldrb	r3, [r7, #7]
 801353c:	f023 0301 	bic.w	r3, r3, #1
 8013540:	2b00      	cmp	r3, #0
 8013542:	bf14      	ite	ne
 8013544:	2301      	movne	r3, #1
 8013546:	2300      	moveq	r3, #0
 8013548:	b2db      	uxtb	r3, r3
 801354a:	461a      	mov	r2, r3
 801354c:	f107 0314 	add.w	r3, r7, #20
 8013550:	4611      	mov	r1, r2
 8013552:	4618      	mov	r0, r3
 8013554:	f7fe fa06 	bl	8011964 <inc_lock>
 8013558:	4602      	mov	r2, r0
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	691b      	ldr	r3, [r3, #16]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d102      	bne.n	801356c <f_open+0x22c>
 8013566:	2302      	movs	r3, #2
 8013568:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801356c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013570:	2b00      	cmp	r3, #0
 8013572:	f040 80a3 	bne.w	80136bc <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013576:	693b      	ldr	r3, [r7, #16]
 8013578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801357a:	4611      	mov	r1, r2
 801357c:	4618      	mov	r0, r3
 801357e:	f7ff f8a2 	bl	80126c6 <ld_clust>
 8013582:	4602      	mov	r2, r0
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801358a:	331c      	adds	r3, #28
 801358c:	4618      	mov	r0, r3
 801358e:	f7fe f883 	bl	8011698 <ld_dword>
 8013592:	4602      	mov	r2, r0
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	2200      	movs	r2, #0
 801359c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801359e:	693a      	ldr	r2, [r7, #16]
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80135a4:	693b      	ldr	r3, [r7, #16]
 80135a6:	88da      	ldrh	r2, [r3, #6]
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	79fa      	ldrb	r2, [r7, #7]
 80135b0:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	2200      	movs	r2, #0
 80135b6:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	2200      	movs	r2, #0
 80135bc:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	2200      	movs	r2, #0
 80135c2:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	3330      	adds	r3, #48	; 0x30
 80135c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80135cc:	2100      	movs	r1, #0
 80135ce:	4618      	mov	r0, r3
 80135d0:	f7fe f8ed 	bl	80117ae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80135d4:	79fb      	ldrb	r3, [r7, #7]
 80135d6:	f003 0320 	and.w	r3, r3, #32
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d06e      	beq.n	80136bc <f_open+0x37c>
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	68db      	ldr	r3, [r3, #12]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d06a      	beq.n	80136bc <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	68da      	ldr	r2, [r3, #12]
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80135ee:	693b      	ldr	r3, [r7, #16]
 80135f0:	895b      	ldrh	r3, [r3, #10]
 80135f2:	461a      	mov	r2, r3
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	899b      	ldrh	r3, [r3, #12]
 80135f8:	fb03 f302 	mul.w	r3, r3, r2
 80135fc:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	689b      	ldr	r3, [r3, #8]
 8013602:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	68db      	ldr	r3, [r3, #12]
 8013608:	657b      	str	r3, [r7, #84]	; 0x54
 801360a:	e016      	b.n	801363a <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 801360c:	68fb      	ldr	r3, [r7, #12]
 801360e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013610:	4618      	mov	r0, r3
 8013612:	f7fe fb96 	bl	8011d42 <get_fat>
 8013616:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801361a:	2b01      	cmp	r3, #1
 801361c:	d802      	bhi.n	8013624 <f_open+0x2e4>
 801361e:	2302      	movs	r3, #2
 8013620:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013624:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013626:	f1b3 3fff 	cmp.w	r3, #4294967295
 801362a:	d102      	bne.n	8013632 <f_open+0x2f2>
 801362c:	2301      	movs	r3, #1
 801362e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013632:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013636:	1ad3      	subs	r3, r2, r3
 8013638:	657b      	str	r3, [r7, #84]	; 0x54
 801363a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801363e:	2b00      	cmp	r3, #0
 8013640:	d103      	bne.n	801364a <f_open+0x30a>
 8013642:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013646:	429a      	cmp	r2, r3
 8013648:	d8e0      	bhi.n	801360c <f_open+0x2cc>
				}
				fp->clust = clst;
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801364e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013650:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013654:	2b00      	cmp	r3, #0
 8013656:	d131      	bne.n	80136bc <f_open+0x37c>
 8013658:	693b      	ldr	r3, [r7, #16]
 801365a:	899b      	ldrh	r3, [r3, #12]
 801365c:	461a      	mov	r2, r3
 801365e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013660:	fbb3 f1f2 	udiv	r1, r3, r2
 8013664:	fb02 f201 	mul.w	r2, r2, r1
 8013668:	1a9b      	subs	r3, r3, r2
 801366a:	2b00      	cmp	r3, #0
 801366c:	d026      	beq.n	80136bc <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801366e:	693b      	ldr	r3, [r7, #16]
 8013670:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013672:	4618      	mov	r0, r3
 8013674:	f7fe fb46 	bl	8011d04 <clust2sect>
 8013678:	6478      	str	r0, [r7, #68]	; 0x44
 801367a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801367c:	2b00      	cmp	r3, #0
 801367e:	d103      	bne.n	8013688 <f_open+0x348>
						res = FR_INT_ERR;
 8013680:	2302      	movs	r3, #2
 8013682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013686:	e019      	b.n	80136bc <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	899b      	ldrh	r3, [r3, #12]
 801368c:	461a      	mov	r2, r3
 801368e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013690:	fbb3 f2f2 	udiv	r2, r3, r2
 8013694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013696:	441a      	add	r2, r3
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801369c:	693b      	ldr	r3, [r7, #16]
 801369e:	7858      	ldrb	r0, [r3, #1]
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	6a1a      	ldr	r2, [r3, #32]
 80136aa:	2301      	movs	r3, #1
 80136ac:	f7fd ff7e 	bl	80115ac <disk_read>
 80136b0:	4603      	mov	r3, r0
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d002      	beq.n	80136bc <f_open+0x37c>
 80136b6:	2301      	movs	r3, #1
 80136b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80136bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d002      	beq.n	80136ca <f_open+0x38a>
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	2200      	movs	r2, #0
 80136c8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80136ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80136ce:	4618      	mov	r0, r3
 80136d0:	3760      	adds	r7, #96	; 0x60
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bd80      	pop	{r7, pc}
 80136d6:	bf00      	nop
 80136d8:	274a0000 	.word	0x274a0000

080136dc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b08e      	sub	sp, #56	; 0x38
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	60f8      	str	r0, [r7, #12]
 80136e4:	60b9      	str	r1, [r7, #8]
 80136e6:	607a      	str	r2, [r7, #4]
 80136e8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80136ea:	68bb      	ldr	r3, [r7, #8]
 80136ec:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	2200      	movs	r2, #0
 80136f2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	f107 0214 	add.w	r2, r7, #20
 80136fa:	4611      	mov	r1, r2
 80136fc:	4618      	mov	r0, r3
 80136fe:	f7ff fda3 	bl	8013248 <validate>
 8013702:	4603      	mov	r3, r0
 8013704:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013708:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801370c:	2b00      	cmp	r3, #0
 801370e:	d107      	bne.n	8013720 <f_read+0x44>
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	7d5b      	ldrb	r3, [r3, #21]
 8013714:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013718:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801371c:	2b00      	cmp	r3, #0
 801371e:	d002      	beq.n	8013726 <f_read+0x4a>
 8013720:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013724:	e135      	b.n	8013992 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	7d1b      	ldrb	r3, [r3, #20]
 801372a:	f003 0301 	and.w	r3, r3, #1
 801372e:	2b00      	cmp	r3, #0
 8013730:	d101      	bne.n	8013736 <f_read+0x5a>
 8013732:	2307      	movs	r3, #7
 8013734:	e12d      	b.n	8013992 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	68da      	ldr	r2, [r3, #12]
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	699b      	ldr	r3, [r3, #24]
 801373e:	1ad3      	subs	r3, r2, r3
 8013740:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8013742:	687a      	ldr	r2, [r7, #4]
 8013744:	6a3b      	ldr	r3, [r7, #32]
 8013746:	429a      	cmp	r2, r3
 8013748:	f240 811e 	bls.w	8013988 <f_read+0x2ac>
 801374c:	6a3b      	ldr	r3, [r7, #32]
 801374e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013750:	e11a      	b.n	8013988 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	699b      	ldr	r3, [r3, #24]
 8013756:	697a      	ldr	r2, [r7, #20]
 8013758:	8992      	ldrh	r2, [r2, #12]
 801375a:	fbb3 f1f2 	udiv	r1, r3, r2
 801375e:	fb02 f201 	mul.w	r2, r2, r1
 8013762:	1a9b      	subs	r3, r3, r2
 8013764:	2b00      	cmp	r3, #0
 8013766:	f040 80d5 	bne.w	8013914 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	699b      	ldr	r3, [r3, #24]
 801376e:	697a      	ldr	r2, [r7, #20]
 8013770:	8992      	ldrh	r2, [r2, #12]
 8013772:	fbb3 f3f2 	udiv	r3, r3, r2
 8013776:	697a      	ldr	r2, [r7, #20]
 8013778:	8952      	ldrh	r2, [r2, #10]
 801377a:	3a01      	subs	r2, #1
 801377c:	4013      	ands	r3, r2
 801377e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013780:	69fb      	ldr	r3, [r7, #28]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d12f      	bne.n	80137e6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	699b      	ldr	r3, [r3, #24]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d103      	bne.n	8013796 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	689b      	ldr	r3, [r3, #8]
 8013792:	633b      	str	r3, [r7, #48]	; 0x30
 8013794:	e013      	b.n	80137be <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801379a:	2b00      	cmp	r3, #0
 801379c:	d007      	beq.n	80137ae <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	699b      	ldr	r3, [r3, #24]
 80137a2:	4619      	mov	r1, r3
 80137a4:	68f8      	ldr	r0, [r7, #12]
 80137a6:	f7fe fdb0 	bl	801230a <clmt_clust>
 80137aa:	6338      	str	r0, [r7, #48]	; 0x30
 80137ac:	e007      	b.n	80137be <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80137ae:	68fa      	ldr	r2, [r7, #12]
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	69db      	ldr	r3, [r3, #28]
 80137b4:	4619      	mov	r1, r3
 80137b6:	4610      	mov	r0, r2
 80137b8:	f7fe fac3 	bl	8011d42 <get_fat>
 80137bc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80137be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c0:	2b01      	cmp	r3, #1
 80137c2:	d804      	bhi.n	80137ce <f_read+0xf2>
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	2202      	movs	r2, #2
 80137c8:	755a      	strb	r2, [r3, #21]
 80137ca:	2302      	movs	r3, #2
 80137cc:	e0e1      	b.n	8013992 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80137ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137d4:	d104      	bne.n	80137e0 <f_read+0x104>
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	2201      	movs	r2, #1
 80137da:	755a      	strb	r2, [r3, #21]
 80137dc:	2301      	movs	r3, #1
 80137de:	e0d8      	b.n	8013992 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137e4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80137e6:	697a      	ldr	r2, [r7, #20]
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	69db      	ldr	r3, [r3, #28]
 80137ec:	4619      	mov	r1, r3
 80137ee:	4610      	mov	r0, r2
 80137f0:	f7fe fa88 	bl	8011d04 <clust2sect>
 80137f4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80137f6:	69bb      	ldr	r3, [r7, #24]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d104      	bne.n	8013806 <f_read+0x12a>
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	2202      	movs	r2, #2
 8013800:	755a      	strb	r2, [r3, #21]
 8013802:	2302      	movs	r3, #2
 8013804:	e0c5      	b.n	8013992 <f_read+0x2b6>
			sect += csect;
 8013806:	69ba      	ldr	r2, [r7, #24]
 8013808:	69fb      	ldr	r3, [r7, #28]
 801380a:	4413      	add	r3, r2
 801380c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801380e:	697b      	ldr	r3, [r7, #20]
 8013810:	899b      	ldrh	r3, [r3, #12]
 8013812:	461a      	mov	r2, r3
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	fbb3 f3f2 	udiv	r3, r3, r2
 801381a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801381e:	2b00      	cmp	r3, #0
 8013820:	d041      	beq.n	80138a6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013822:	69fa      	ldr	r2, [r7, #28]
 8013824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013826:	4413      	add	r3, r2
 8013828:	697a      	ldr	r2, [r7, #20]
 801382a:	8952      	ldrh	r2, [r2, #10]
 801382c:	4293      	cmp	r3, r2
 801382e:	d905      	bls.n	801383c <f_read+0x160>
					cc = fs->csize - csect;
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	895b      	ldrh	r3, [r3, #10]
 8013834:	461a      	mov	r2, r3
 8013836:	69fb      	ldr	r3, [r7, #28]
 8013838:	1ad3      	subs	r3, r2, r3
 801383a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	7858      	ldrb	r0, [r3, #1]
 8013840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013842:	69ba      	ldr	r2, [r7, #24]
 8013844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013846:	f7fd feb1 	bl	80115ac <disk_read>
 801384a:	4603      	mov	r3, r0
 801384c:	2b00      	cmp	r3, #0
 801384e:	d004      	beq.n	801385a <f_read+0x17e>
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	2201      	movs	r2, #1
 8013854:	755a      	strb	r2, [r3, #21]
 8013856:	2301      	movs	r3, #1
 8013858:	e09b      	b.n	8013992 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	7d1b      	ldrb	r3, [r3, #20]
 801385e:	b25b      	sxtb	r3, r3
 8013860:	2b00      	cmp	r3, #0
 8013862:	da18      	bge.n	8013896 <f_read+0x1ba>
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	6a1a      	ldr	r2, [r3, #32]
 8013868:	69bb      	ldr	r3, [r7, #24]
 801386a:	1ad3      	subs	r3, r2, r3
 801386c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801386e:	429a      	cmp	r2, r3
 8013870:	d911      	bls.n	8013896 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	6a1a      	ldr	r2, [r3, #32]
 8013876:	69bb      	ldr	r3, [r7, #24]
 8013878:	1ad3      	subs	r3, r2, r3
 801387a:	697a      	ldr	r2, [r7, #20]
 801387c:	8992      	ldrh	r2, [r2, #12]
 801387e:	fb02 f303 	mul.w	r3, r2, r3
 8013882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013884:	18d0      	adds	r0, r2, r3
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801388c:	697b      	ldr	r3, [r7, #20]
 801388e:	899b      	ldrh	r3, [r3, #12]
 8013890:	461a      	mov	r2, r3
 8013892:	f7fd ff6b 	bl	801176c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	899b      	ldrh	r3, [r3, #12]
 801389a:	461a      	mov	r2, r3
 801389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801389e:	fb02 f303 	mul.w	r3, r2, r3
 80138a2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80138a4:	e05c      	b.n	8013960 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	6a1b      	ldr	r3, [r3, #32]
 80138aa:	69ba      	ldr	r2, [r7, #24]
 80138ac:	429a      	cmp	r2, r3
 80138ae:	d02e      	beq.n	801390e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	7d1b      	ldrb	r3, [r3, #20]
 80138b4:	b25b      	sxtb	r3, r3
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	da18      	bge.n	80138ec <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80138ba:	697b      	ldr	r3, [r7, #20]
 80138bc:	7858      	ldrb	r0, [r3, #1]
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	6a1a      	ldr	r2, [r3, #32]
 80138c8:	2301      	movs	r3, #1
 80138ca:	f7fd fe8f 	bl	80115ec <disk_write>
 80138ce:	4603      	mov	r3, r0
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d004      	beq.n	80138de <f_read+0x202>
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	2201      	movs	r2, #1
 80138d8:	755a      	strb	r2, [r3, #21]
 80138da:	2301      	movs	r3, #1
 80138dc:	e059      	b.n	8013992 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	7d1b      	ldrb	r3, [r3, #20]
 80138e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80138e6:	b2da      	uxtb	r2, r3
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80138ec:	697b      	ldr	r3, [r7, #20]
 80138ee:	7858      	ldrb	r0, [r3, #1]
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80138f6:	2301      	movs	r3, #1
 80138f8:	69ba      	ldr	r2, [r7, #24]
 80138fa:	f7fd fe57 	bl	80115ac <disk_read>
 80138fe:	4603      	mov	r3, r0
 8013900:	2b00      	cmp	r3, #0
 8013902:	d004      	beq.n	801390e <f_read+0x232>
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	2201      	movs	r2, #1
 8013908:	755a      	strb	r2, [r3, #21]
 801390a:	2301      	movs	r3, #1
 801390c:	e041      	b.n	8013992 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	69ba      	ldr	r2, [r7, #24]
 8013912:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013914:	697b      	ldr	r3, [r7, #20]
 8013916:	899b      	ldrh	r3, [r3, #12]
 8013918:	4618      	mov	r0, r3
 801391a:	68fb      	ldr	r3, [r7, #12]
 801391c:	699b      	ldr	r3, [r3, #24]
 801391e:	697a      	ldr	r2, [r7, #20]
 8013920:	8992      	ldrh	r2, [r2, #12]
 8013922:	fbb3 f1f2 	udiv	r1, r3, r2
 8013926:	fb02 f201 	mul.w	r2, r2, r1
 801392a:	1a9b      	subs	r3, r3, r2
 801392c:	1ac3      	subs	r3, r0, r3
 801392e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	429a      	cmp	r2, r3
 8013936:	d901      	bls.n	801393c <f_read+0x260>
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	699b      	ldr	r3, [r3, #24]
 8013946:	697a      	ldr	r2, [r7, #20]
 8013948:	8992      	ldrh	r2, [r2, #12]
 801394a:	fbb3 f0f2 	udiv	r0, r3, r2
 801394e:	fb02 f200 	mul.w	r2, r2, r0
 8013952:	1a9b      	subs	r3, r3, r2
 8013954:	440b      	add	r3, r1
 8013956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013958:	4619      	mov	r1, r3
 801395a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801395c:	f7fd ff06 	bl	801176c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013964:	4413      	add	r3, r2
 8013966:	627b      	str	r3, [r7, #36]	; 0x24
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	699a      	ldr	r2, [r3, #24]
 801396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801396e:	441a      	add	r2, r3
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	619a      	str	r2, [r3, #24]
 8013974:	683b      	ldr	r3, [r7, #0]
 8013976:	681a      	ldr	r2, [r3, #0]
 8013978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801397a:	441a      	add	r2, r3
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	601a      	str	r2, [r3, #0]
 8013980:	687a      	ldr	r2, [r7, #4]
 8013982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013984:	1ad3      	subs	r3, r2, r3
 8013986:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	2b00      	cmp	r3, #0
 801398c:	f47f aee1 	bne.w	8013752 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013990:	2300      	movs	r3, #0
}
 8013992:	4618      	mov	r0, r3
 8013994:	3738      	adds	r7, #56	; 0x38
 8013996:	46bd      	mov	sp, r7
 8013998:	bd80      	pop	{r7, pc}

0801399a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801399a:	b580      	push	{r7, lr}
 801399c:	b08c      	sub	sp, #48	; 0x30
 801399e:	af00      	add	r7, sp, #0
 80139a0:	60f8      	str	r0, [r7, #12]
 80139a2:	60b9      	str	r1, [r7, #8]
 80139a4:	607a      	str	r2, [r7, #4]
 80139a6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80139a8:	68bb      	ldr	r3, [r7, #8]
 80139aa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80139ac:	683b      	ldr	r3, [r7, #0]
 80139ae:	2200      	movs	r2, #0
 80139b0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	f107 0210 	add.w	r2, r7, #16
 80139b8:	4611      	mov	r1, r2
 80139ba:	4618      	mov	r0, r3
 80139bc:	f7ff fc44 	bl	8013248 <validate>
 80139c0:	4603      	mov	r3, r0
 80139c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80139c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d107      	bne.n	80139de <f_write+0x44>
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	7d5b      	ldrb	r3, [r3, #21]
 80139d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80139d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d002      	beq.n	80139e4 <f_write+0x4a>
 80139de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80139e2:	e16a      	b.n	8013cba <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	7d1b      	ldrb	r3, [r3, #20]
 80139e8:	f003 0302 	and.w	r3, r3, #2
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d101      	bne.n	80139f4 <f_write+0x5a>
 80139f0:	2307      	movs	r3, #7
 80139f2:	e162      	b.n	8013cba <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	699a      	ldr	r2, [r3, #24]
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	441a      	add	r2, r3
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	699b      	ldr	r3, [r3, #24]
 8013a00:	429a      	cmp	r2, r3
 8013a02:	f080 814c 	bcs.w	8013c9e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	699b      	ldr	r3, [r3, #24]
 8013a0a:	43db      	mvns	r3, r3
 8013a0c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013a0e:	e146      	b.n	8013c9e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	699b      	ldr	r3, [r3, #24]
 8013a14:	693a      	ldr	r2, [r7, #16]
 8013a16:	8992      	ldrh	r2, [r2, #12]
 8013a18:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a1c:	fb02 f201 	mul.w	r2, r2, r1
 8013a20:	1a9b      	subs	r3, r3, r2
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	f040 80f1 	bne.w	8013c0a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	699b      	ldr	r3, [r3, #24]
 8013a2c:	693a      	ldr	r2, [r7, #16]
 8013a2e:	8992      	ldrh	r2, [r2, #12]
 8013a30:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a34:	693a      	ldr	r2, [r7, #16]
 8013a36:	8952      	ldrh	r2, [r2, #10]
 8013a38:	3a01      	subs	r2, #1
 8013a3a:	4013      	ands	r3, r2
 8013a3c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013a3e:	69bb      	ldr	r3, [r7, #24]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d143      	bne.n	8013acc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	699b      	ldr	r3, [r3, #24]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d10c      	bne.n	8013a66 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	689b      	ldr	r3, [r3, #8]
 8013a50:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d11a      	bne.n	8013a8e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	2100      	movs	r1, #0
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f7fe fbbc 	bl	80121da <create_chain>
 8013a62:	62b8      	str	r0, [r7, #40]	; 0x28
 8013a64:	e013      	b.n	8013a8e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d007      	beq.n	8013a7e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	699b      	ldr	r3, [r3, #24]
 8013a72:	4619      	mov	r1, r3
 8013a74:	68f8      	ldr	r0, [r7, #12]
 8013a76:	f7fe fc48 	bl	801230a <clmt_clust>
 8013a7a:	62b8      	str	r0, [r7, #40]	; 0x28
 8013a7c:	e007      	b.n	8013a8e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013a7e:	68fa      	ldr	r2, [r7, #12]
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	69db      	ldr	r3, [r3, #28]
 8013a84:	4619      	mov	r1, r3
 8013a86:	4610      	mov	r0, r2
 8013a88:	f7fe fba7 	bl	80121da <create_chain>
 8013a8c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	f000 8109 	beq.w	8013ca8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a98:	2b01      	cmp	r3, #1
 8013a9a:	d104      	bne.n	8013aa6 <f_write+0x10c>
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	2202      	movs	r2, #2
 8013aa0:	755a      	strb	r2, [r3, #21]
 8013aa2:	2302      	movs	r3, #2
 8013aa4:	e109      	b.n	8013cba <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aac:	d104      	bne.n	8013ab8 <f_write+0x11e>
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	2201      	movs	r2, #1
 8013ab2:	755a      	strb	r2, [r3, #21]
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	e100      	b.n	8013cba <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013abc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	689b      	ldr	r3, [r3, #8]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d102      	bne.n	8013acc <f_write+0x132>
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013aca:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	7d1b      	ldrb	r3, [r3, #20]
 8013ad0:	b25b      	sxtb	r3, r3
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	da18      	bge.n	8013b08 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ad6:	693b      	ldr	r3, [r7, #16]
 8013ad8:	7858      	ldrb	r0, [r3, #1]
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	6a1a      	ldr	r2, [r3, #32]
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	f7fd fd81 	bl	80115ec <disk_write>
 8013aea:	4603      	mov	r3, r0
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d004      	beq.n	8013afa <f_write+0x160>
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	2201      	movs	r2, #1
 8013af4:	755a      	strb	r2, [r3, #21]
 8013af6:	2301      	movs	r3, #1
 8013af8:	e0df      	b.n	8013cba <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	7d1b      	ldrb	r3, [r3, #20]
 8013afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b02:	b2da      	uxtb	r2, r3
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013b08:	693a      	ldr	r2, [r7, #16]
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	69db      	ldr	r3, [r3, #28]
 8013b0e:	4619      	mov	r1, r3
 8013b10:	4610      	mov	r0, r2
 8013b12:	f7fe f8f7 	bl	8011d04 <clust2sect>
 8013b16:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013b18:	697b      	ldr	r3, [r7, #20]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d104      	bne.n	8013b28 <f_write+0x18e>
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	2202      	movs	r2, #2
 8013b22:	755a      	strb	r2, [r3, #21]
 8013b24:	2302      	movs	r3, #2
 8013b26:	e0c8      	b.n	8013cba <f_write+0x320>
			sect += csect;
 8013b28:	697a      	ldr	r2, [r7, #20]
 8013b2a:	69bb      	ldr	r3, [r7, #24]
 8013b2c:	4413      	add	r3, r2
 8013b2e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013b30:	693b      	ldr	r3, [r7, #16]
 8013b32:	899b      	ldrh	r3, [r3, #12]
 8013b34:	461a      	mov	r2, r3
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b3c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013b3e:	6a3b      	ldr	r3, [r7, #32]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d043      	beq.n	8013bcc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013b44:	69ba      	ldr	r2, [r7, #24]
 8013b46:	6a3b      	ldr	r3, [r7, #32]
 8013b48:	4413      	add	r3, r2
 8013b4a:	693a      	ldr	r2, [r7, #16]
 8013b4c:	8952      	ldrh	r2, [r2, #10]
 8013b4e:	4293      	cmp	r3, r2
 8013b50:	d905      	bls.n	8013b5e <f_write+0x1c4>
					cc = fs->csize - csect;
 8013b52:	693b      	ldr	r3, [r7, #16]
 8013b54:	895b      	ldrh	r3, [r3, #10]
 8013b56:	461a      	mov	r2, r3
 8013b58:	69bb      	ldr	r3, [r7, #24]
 8013b5a:	1ad3      	subs	r3, r2, r3
 8013b5c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013b5e:	693b      	ldr	r3, [r7, #16]
 8013b60:	7858      	ldrb	r0, [r3, #1]
 8013b62:	6a3b      	ldr	r3, [r7, #32]
 8013b64:	697a      	ldr	r2, [r7, #20]
 8013b66:	69f9      	ldr	r1, [r7, #28]
 8013b68:	f7fd fd40 	bl	80115ec <disk_write>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d004      	beq.n	8013b7c <f_write+0x1e2>
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	2201      	movs	r2, #1
 8013b76:	755a      	strb	r2, [r3, #21]
 8013b78:	2301      	movs	r3, #1
 8013b7a:	e09e      	b.n	8013cba <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	6a1a      	ldr	r2, [r3, #32]
 8013b80:	697b      	ldr	r3, [r7, #20]
 8013b82:	1ad3      	subs	r3, r2, r3
 8013b84:	6a3a      	ldr	r2, [r7, #32]
 8013b86:	429a      	cmp	r2, r3
 8013b88:	d918      	bls.n	8013bbc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	6a1a      	ldr	r2, [r3, #32]
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	1ad3      	subs	r3, r2, r3
 8013b98:	693a      	ldr	r2, [r7, #16]
 8013b9a:	8992      	ldrh	r2, [r2, #12]
 8013b9c:	fb02 f303 	mul.w	r3, r2, r3
 8013ba0:	69fa      	ldr	r2, [r7, #28]
 8013ba2:	18d1      	adds	r1, r2, r3
 8013ba4:	693b      	ldr	r3, [r7, #16]
 8013ba6:	899b      	ldrh	r3, [r3, #12]
 8013ba8:	461a      	mov	r2, r3
 8013baa:	f7fd fddf 	bl	801176c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	7d1b      	ldrb	r3, [r3, #20]
 8013bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013bb6:	b2da      	uxtb	r2, r3
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013bbc:	693b      	ldr	r3, [r7, #16]
 8013bbe:	899b      	ldrh	r3, [r3, #12]
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	6a3b      	ldr	r3, [r7, #32]
 8013bc4:	fb02 f303 	mul.w	r3, r2, r3
 8013bc8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013bca:	e04b      	b.n	8013c64 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	6a1b      	ldr	r3, [r3, #32]
 8013bd0:	697a      	ldr	r2, [r7, #20]
 8013bd2:	429a      	cmp	r2, r3
 8013bd4:	d016      	beq.n	8013c04 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	699a      	ldr	r2, [r3, #24]
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013bde:	429a      	cmp	r2, r3
 8013be0:	d210      	bcs.n	8013c04 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013be2:	693b      	ldr	r3, [r7, #16]
 8013be4:	7858      	ldrb	r0, [r3, #1]
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013bec:	2301      	movs	r3, #1
 8013bee:	697a      	ldr	r2, [r7, #20]
 8013bf0:	f7fd fcdc 	bl	80115ac <disk_read>
 8013bf4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d004      	beq.n	8013c04 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	2201      	movs	r2, #1
 8013bfe:	755a      	strb	r2, [r3, #21]
 8013c00:	2301      	movs	r3, #1
 8013c02:	e05a      	b.n	8013cba <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	697a      	ldr	r2, [r7, #20]
 8013c08:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013c0a:	693b      	ldr	r3, [r7, #16]
 8013c0c:	899b      	ldrh	r3, [r3, #12]
 8013c0e:	4618      	mov	r0, r3
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	699b      	ldr	r3, [r3, #24]
 8013c14:	693a      	ldr	r2, [r7, #16]
 8013c16:	8992      	ldrh	r2, [r2, #12]
 8013c18:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c1c:	fb02 f201 	mul.w	r2, r2, r1
 8013c20:	1a9b      	subs	r3, r3, r2
 8013c22:	1ac3      	subs	r3, r0, r3
 8013c24:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	429a      	cmp	r2, r3
 8013c2c:	d901      	bls.n	8013c32 <f_write+0x298>
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	699b      	ldr	r3, [r3, #24]
 8013c3c:	693a      	ldr	r2, [r7, #16]
 8013c3e:	8992      	ldrh	r2, [r2, #12]
 8013c40:	fbb3 f0f2 	udiv	r0, r3, r2
 8013c44:	fb02 f200 	mul.w	r2, r2, r0
 8013c48:	1a9b      	subs	r3, r3, r2
 8013c4a:	440b      	add	r3, r1
 8013c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c4e:	69f9      	ldr	r1, [r7, #28]
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7fd fd8b 	bl	801176c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	7d1b      	ldrb	r3, [r3, #20]
 8013c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013c5e:	b2da      	uxtb	r2, r3
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013c64:	69fa      	ldr	r2, [r7, #28]
 8013c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c68:	4413      	add	r3, r2
 8013c6a:	61fb      	str	r3, [r7, #28]
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	699a      	ldr	r2, [r3, #24]
 8013c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c72:	441a      	add	r2, r3
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	619a      	str	r2, [r3, #24]
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	68da      	ldr	r2, [r3, #12]
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	699b      	ldr	r3, [r3, #24]
 8013c80:	429a      	cmp	r2, r3
 8013c82:	bf38      	it	cc
 8013c84:	461a      	movcc	r2, r3
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	60da      	str	r2, [r3, #12]
 8013c8a:	683b      	ldr	r3, [r7, #0]
 8013c8c:	681a      	ldr	r2, [r3, #0]
 8013c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c90:	441a      	add	r2, r3
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	601a      	str	r2, [r3, #0]
 8013c96:	687a      	ldr	r2, [r7, #4]
 8013c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c9a:	1ad3      	subs	r3, r2, r3
 8013c9c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	f47f aeb5 	bne.w	8013a10 <f_write+0x76>
 8013ca6:	e000      	b.n	8013caa <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013ca8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	7d1b      	ldrb	r3, [r3, #20]
 8013cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013cb2:	b2da      	uxtb	r2, r3
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013cb8:	2300      	movs	r3, #0
}
 8013cba:	4618      	mov	r0, r3
 8013cbc:	3730      	adds	r7, #48	; 0x30
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	bd80      	pop	{r7, pc}
	...

08013cc4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b086      	sub	sp, #24
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	f107 0208 	add.w	r2, r7, #8
 8013cd2:	4611      	mov	r1, r2
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7ff fab7 	bl	8013248 <validate>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013cde:	7dfb      	ldrb	r3, [r7, #23]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d167      	bne.n	8013db4 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	7d1b      	ldrb	r3, [r3, #20]
 8013ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d061      	beq.n	8013db4 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	7d1b      	ldrb	r3, [r3, #20]
 8013cf4:	b25b      	sxtb	r3, r3
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	da15      	bge.n	8013d26 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013cfa:	68bb      	ldr	r3, [r7, #8]
 8013cfc:	7858      	ldrb	r0, [r3, #1]
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	6a1a      	ldr	r2, [r3, #32]
 8013d08:	2301      	movs	r3, #1
 8013d0a:	f7fd fc6f 	bl	80115ec <disk_write>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d001      	beq.n	8013d18 <f_sync+0x54>
 8013d14:	2301      	movs	r3, #1
 8013d16:	e04e      	b.n	8013db6 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	7d1b      	ldrb	r3, [r3, #20]
 8013d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d20:	b2da      	uxtb	r2, r3
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013d26:	4b26      	ldr	r3, [pc, #152]	; (8013dc0 <f_sync+0xfc>)
 8013d28:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013d2a:	68ba      	ldr	r2, [r7, #8]
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d30:	4619      	mov	r1, r3
 8013d32:	4610      	mov	r0, r2
 8013d34:	f7fd ff48 	bl	8011bc8 <move_window>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013d3c:	7dfb      	ldrb	r3, [r7, #23]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d138      	bne.n	8013db4 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d46:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	330b      	adds	r3, #11
 8013d4c:	781a      	ldrb	r2, [r3, #0]
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	330b      	adds	r3, #11
 8013d52:	f042 0220 	orr.w	r2, r2, #32
 8013d56:	b2d2      	uxtb	r2, r2
 8013d58:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	6818      	ldr	r0, [r3, #0]
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	689b      	ldr	r3, [r3, #8]
 8013d62:	461a      	mov	r2, r3
 8013d64:	68f9      	ldr	r1, [r7, #12]
 8013d66:	f7fe fccd 	bl	8012704 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	f103 021c 	add.w	r2, r3, #28
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	68db      	ldr	r3, [r3, #12]
 8013d74:	4619      	mov	r1, r3
 8013d76:	4610      	mov	r0, r2
 8013d78:	f7fd fccc 	bl	8011714 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	3316      	adds	r3, #22
 8013d80:	6939      	ldr	r1, [r7, #16]
 8013d82:	4618      	mov	r0, r3
 8013d84:	f7fd fcc6 	bl	8011714 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	3312      	adds	r3, #18
 8013d8c:	2100      	movs	r1, #0
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7fd fca5 	bl	80116de <st_word>
					fs->wflag = 1;
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	2201      	movs	r2, #1
 8013d98:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013d9a:	68bb      	ldr	r3, [r7, #8]
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	f7fd ff41 	bl	8011c24 <sync_fs>
 8013da2:	4603      	mov	r3, r0
 8013da4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	7d1b      	ldrb	r3, [r3, #20]
 8013daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013dae:	b2da      	uxtb	r2, r3
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013db6:	4618      	mov	r0, r3
 8013db8:	3718      	adds	r7, #24
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd80      	pop	{r7, pc}
 8013dbe:	bf00      	nop
 8013dc0:	274a0000 	.word	0x274a0000

08013dc4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	b084      	sub	sp, #16
 8013dc8:	af00      	add	r7, sp, #0
 8013dca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013dcc:	6878      	ldr	r0, [r7, #4]
 8013dce:	f7ff ff79 	bl	8013cc4 <f_sync>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013dd6:	7bfb      	ldrb	r3, [r7, #15]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d118      	bne.n	8013e0e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f107 0208 	add.w	r2, r7, #8
 8013de2:	4611      	mov	r1, r2
 8013de4:	4618      	mov	r0, r3
 8013de6:	f7ff fa2f 	bl	8013248 <validate>
 8013dea:	4603      	mov	r3, r0
 8013dec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013dee:	7bfb      	ldrb	r3, [r7, #15]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d10c      	bne.n	8013e0e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	691b      	ldr	r3, [r3, #16]
 8013df8:	4618      	mov	r0, r3
 8013dfa:	f7fd fe41 	bl	8011a80 <dec_lock>
 8013dfe:	4603      	mov	r3, r0
 8013e00:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013e02:	7bfb      	ldrb	r3, [r7, #15]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d102      	bne.n	8013e0e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e10:	4618      	mov	r0, r3
 8013e12:	3710      	adds	r7, #16
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}

08013e18 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013e18:	b590      	push	{r4, r7, lr}
 8013e1a:	b091      	sub	sp, #68	; 0x44
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013e20:	f107 0108 	add.w	r1, r7, #8
 8013e24:	1d3b      	adds	r3, r7, #4
 8013e26:	2200      	movs	r2, #0
 8013e28:	4618      	mov	r0, r3
 8013e2a:	f7fe ff87 	bl	8012d3c <find_volume>
 8013e2e:	4603      	mov	r3, r0
 8013e30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013e34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d131      	bne.n	8013ea0 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013e3c:	68bb      	ldr	r3, [r7, #8]
 8013e3e:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013e40:	687a      	ldr	r2, [r7, #4]
 8013e42:	f107 030c 	add.w	r3, r7, #12
 8013e46:	4611      	mov	r1, r2
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f7fe fe47 	bl	8012adc <follow_path>
 8013e4e:	4603      	mov	r3, r0
 8013e50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013e54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d11a      	bne.n	8013e92 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013e5c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013e60:	b25b      	sxtb	r3, r3
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	da03      	bge.n	8013e6e <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	697a      	ldr	r2, [r7, #20]
 8013e6a:	619a      	str	r2, [r3, #24]
 8013e6c:	e011      	b.n	8013e92 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013e6e:	7cbb      	ldrb	r3, [r7, #18]
 8013e70:	f003 0310 	and.w	r3, r3, #16
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d009      	beq.n	8013e8c <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013e78:	68bb      	ldr	r3, [r7, #8]
 8013e7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e7c:	68bc      	ldr	r4, [r7, #8]
 8013e7e:	4611      	mov	r1, r2
 8013e80:	4618      	mov	r0, r3
 8013e82:	f7fe fc20 	bl	80126c6 <ld_clust>
 8013e86:	4603      	mov	r3, r0
 8013e88:	61a3      	str	r3, [r4, #24]
 8013e8a:	e002      	b.n	8013e92 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013e8c:	2305      	movs	r3, #5
 8013e8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013e92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e96:	2b04      	cmp	r3, #4
 8013e98:	d102      	bne.n	8013ea0 <f_chdir+0x88>
 8013e9a:	2305      	movs	r3, #5
 8013e9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013ea0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	3744      	adds	r7, #68	; 0x44
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd90      	pop	{r4, r7, pc}

08013eac <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013eac:	b580      	push	{r7, lr}
 8013eae:	b090      	sub	sp, #64	; 0x40
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
 8013eb4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	f107 0208 	add.w	r2, r7, #8
 8013ebc:	4611      	mov	r1, r2
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	f7ff f9c2 	bl	8013248 <validate>
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013eca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d103      	bne.n	8013eda <f_lseek+0x2e>
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	7d5b      	ldrb	r3, [r3, #21]
 8013ed6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013eda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d002      	beq.n	8013ee8 <f_lseek+0x3c>
 8013ee2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ee6:	e201      	b.n	80142ec <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	f000 80d9 	beq.w	80140a4 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ef8:	d15a      	bne.n	8013fb0 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013efe:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f02:	1d1a      	adds	r2, r3, #4
 8013f04:	627a      	str	r2, [r7, #36]	; 0x24
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	617b      	str	r3, [r7, #20]
 8013f0a:	2302      	movs	r3, #2
 8013f0c:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	689b      	ldr	r3, [r3, #8]
 8013f12:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d03a      	beq.n	8013f90 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f1c:	613b      	str	r3, [r7, #16]
 8013f1e:	2300      	movs	r3, #0
 8013f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f24:	3302      	adds	r3, #2
 8013f26:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f2a:	60fb      	str	r3, [r7, #12]
 8013f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f2e:	3301      	adds	r3, #1
 8013f30:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013f36:	4618      	mov	r0, r3
 8013f38:	f7fd ff03 	bl	8011d42 <get_fat>
 8013f3c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f40:	2b01      	cmp	r3, #1
 8013f42:	d804      	bhi.n	8013f4e <f_lseek+0xa2>
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2202      	movs	r2, #2
 8013f48:	755a      	strb	r2, [r3, #21]
 8013f4a:	2302      	movs	r3, #2
 8013f4c:	e1ce      	b.n	80142ec <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f54:	d104      	bne.n	8013f60 <f_lseek+0xb4>
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	2201      	movs	r2, #1
 8013f5a:	755a      	strb	r2, [r3, #21]
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	e1c5      	b.n	80142ec <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	3301      	adds	r3, #1
 8013f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d0de      	beq.n	8013f28 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013f6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f6c:	697b      	ldr	r3, [r7, #20]
 8013f6e:	429a      	cmp	r2, r3
 8013f70:	d809      	bhi.n	8013f86 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f74:	1d1a      	adds	r2, r3, #4
 8013f76:	627a      	str	r2, [r7, #36]	; 0x24
 8013f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f7a:	601a      	str	r2, [r3, #0]
 8013f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f7e:	1d1a      	adds	r2, r3, #4
 8013f80:	627a      	str	r2, [r7, #36]	; 0x24
 8013f82:	693a      	ldr	r2, [r7, #16]
 8013f84:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	69db      	ldr	r3, [r3, #28]
 8013f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f8c:	429a      	cmp	r2, r3
 8013f8e:	d3c4      	bcc.n	8013f1a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f96:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	429a      	cmp	r2, r3
 8013f9e:	d803      	bhi.n	8013fa8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	601a      	str	r2, [r3, #0]
 8013fa6:	e19f      	b.n	80142e8 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013fa8:	2311      	movs	r3, #17
 8013faa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013fae:	e19b      	b.n	80142e8 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	68db      	ldr	r3, [r3, #12]
 8013fb4:	683a      	ldr	r2, [r7, #0]
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	d902      	bls.n	8013fc0 <f_lseek+0x114>
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	68db      	ldr	r3, [r3, #12]
 8013fbe:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	683a      	ldr	r2, [r7, #0]
 8013fc4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	f000 818d 	beq.w	80142e8 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	3b01      	subs	r3, #1
 8013fd2:	4619      	mov	r1, r3
 8013fd4:	6878      	ldr	r0, [r7, #4]
 8013fd6:	f7fe f998 	bl	801230a <clmt_clust>
 8013fda:	4602      	mov	r2, r0
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013fe0:	68ba      	ldr	r2, [r7, #8]
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	69db      	ldr	r3, [r3, #28]
 8013fe6:	4619      	mov	r1, r3
 8013fe8:	4610      	mov	r0, r2
 8013fea:	f7fd fe8b 	bl	8011d04 <clust2sect>
 8013fee:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013ff0:	69bb      	ldr	r3, [r7, #24]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d104      	bne.n	8014000 <f_lseek+0x154>
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	2202      	movs	r2, #2
 8013ffa:	755a      	strb	r2, [r3, #21]
 8013ffc:	2302      	movs	r3, #2
 8013ffe:	e175      	b.n	80142ec <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	3b01      	subs	r3, #1
 8014004:	68ba      	ldr	r2, [r7, #8]
 8014006:	8992      	ldrh	r2, [r2, #12]
 8014008:	fbb3 f3f2 	udiv	r3, r3, r2
 801400c:	68ba      	ldr	r2, [r7, #8]
 801400e:	8952      	ldrh	r2, [r2, #10]
 8014010:	3a01      	subs	r2, #1
 8014012:	4013      	ands	r3, r2
 8014014:	69ba      	ldr	r2, [r7, #24]
 8014016:	4413      	add	r3, r2
 8014018:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	699b      	ldr	r3, [r3, #24]
 801401e:	68ba      	ldr	r2, [r7, #8]
 8014020:	8992      	ldrh	r2, [r2, #12]
 8014022:	fbb3 f1f2 	udiv	r1, r3, r2
 8014026:	fb02 f201 	mul.w	r2, r2, r1
 801402a:	1a9b      	subs	r3, r3, r2
 801402c:	2b00      	cmp	r3, #0
 801402e:	f000 815b 	beq.w	80142e8 <f_lseek+0x43c>
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	6a1b      	ldr	r3, [r3, #32]
 8014036:	69ba      	ldr	r2, [r7, #24]
 8014038:	429a      	cmp	r2, r3
 801403a:	f000 8155 	beq.w	80142e8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	7d1b      	ldrb	r3, [r3, #20]
 8014042:	b25b      	sxtb	r3, r3
 8014044:	2b00      	cmp	r3, #0
 8014046:	da18      	bge.n	801407a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014048:	68bb      	ldr	r3, [r7, #8]
 801404a:	7858      	ldrb	r0, [r3, #1]
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	6a1a      	ldr	r2, [r3, #32]
 8014056:	2301      	movs	r3, #1
 8014058:	f7fd fac8 	bl	80115ec <disk_write>
 801405c:	4603      	mov	r3, r0
 801405e:	2b00      	cmp	r3, #0
 8014060:	d004      	beq.n	801406c <f_lseek+0x1c0>
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	2201      	movs	r2, #1
 8014066:	755a      	strb	r2, [r3, #21]
 8014068:	2301      	movs	r3, #1
 801406a:	e13f      	b.n	80142ec <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	7d1b      	ldrb	r3, [r3, #20]
 8014070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014074:	b2da      	uxtb	r2, r3
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	7858      	ldrb	r0, [r3, #1]
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014084:	2301      	movs	r3, #1
 8014086:	69ba      	ldr	r2, [r7, #24]
 8014088:	f7fd fa90 	bl	80115ac <disk_read>
 801408c:	4603      	mov	r3, r0
 801408e:	2b00      	cmp	r3, #0
 8014090:	d004      	beq.n	801409c <f_lseek+0x1f0>
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	2201      	movs	r2, #1
 8014096:	755a      	strb	r2, [r3, #21]
 8014098:	2301      	movs	r3, #1
 801409a:	e127      	b.n	80142ec <f_lseek+0x440>
#endif
					fp->sect = dsc;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	69ba      	ldr	r2, [r7, #24]
 80140a0:	621a      	str	r2, [r3, #32]
 80140a2:	e121      	b.n	80142e8 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	68db      	ldr	r3, [r3, #12]
 80140a8:	683a      	ldr	r2, [r7, #0]
 80140aa:	429a      	cmp	r2, r3
 80140ac:	d908      	bls.n	80140c0 <f_lseek+0x214>
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	7d1b      	ldrb	r3, [r3, #20]
 80140b2:	f003 0302 	and.w	r3, r3, #2
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d102      	bne.n	80140c0 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	68db      	ldr	r3, [r3, #12]
 80140be:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	699b      	ldr	r3, [r3, #24]
 80140c4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80140c6:	2300      	movs	r3, #0
 80140c8:	637b      	str	r3, [r7, #52]	; 0x34
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140ce:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	f000 80b5 	beq.w	8014242 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80140d8:	68bb      	ldr	r3, [r7, #8]
 80140da:	895b      	ldrh	r3, [r3, #10]
 80140dc:	461a      	mov	r2, r3
 80140de:	68bb      	ldr	r3, [r7, #8]
 80140e0:	899b      	ldrh	r3, [r3, #12]
 80140e2:	fb03 f302 	mul.w	r3, r3, r2
 80140e6:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80140e8:	6a3b      	ldr	r3, [r7, #32]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d01b      	beq.n	8014126 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80140ee:	683b      	ldr	r3, [r7, #0]
 80140f0:	1e5a      	subs	r2, r3, #1
 80140f2:	69fb      	ldr	r3, [r7, #28]
 80140f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80140f8:	6a3b      	ldr	r3, [r7, #32]
 80140fa:	1e59      	subs	r1, r3, #1
 80140fc:	69fb      	ldr	r3, [r7, #28]
 80140fe:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014102:	429a      	cmp	r2, r3
 8014104:	d30f      	bcc.n	8014126 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014106:	6a3b      	ldr	r3, [r7, #32]
 8014108:	1e5a      	subs	r2, r3, #1
 801410a:	69fb      	ldr	r3, [r7, #28]
 801410c:	425b      	negs	r3, r3
 801410e:	401a      	ands	r2, r3
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	699b      	ldr	r3, [r3, #24]
 8014118:	683a      	ldr	r2, [r7, #0]
 801411a:	1ad3      	subs	r3, r2, r3
 801411c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	69db      	ldr	r3, [r3, #28]
 8014122:	63bb      	str	r3, [r7, #56]	; 0x38
 8014124:	e022      	b.n	801416c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	689b      	ldr	r3, [r3, #8]
 801412a:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801412c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801412e:	2b00      	cmp	r3, #0
 8014130:	d119      	bne.n	8014166 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	2100      	movs	r1, #0
 8014136:	4618      	mov	r0, r3
 8014138:	f7fe f84f 	bl	80121da <create_chain>
 801413c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014140:	2b01      	cmp	r3, #1
 8014142:	d104      	bne.n	801414e <f_lseek+0x2a2>
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	2202      	movs	r2, #2
 8014148:	755a      	strb	r2, [r3, #21]
 801414a:	2302      	movs	r3, #2
 801414c:	e0ce      	b.n	80142ec <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014154:	d104      	bne.n	8014160 <f_lseek+0x2b4>
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	2201      	movs	r2, #1
 801415a:	755a      	strb	r2, [r3, #21]
 801415c:	2301      	movs	r3, #1
 801415e:	e0c5      	b.n	80142ec <f_lseek+0x440>
					fp->obj.sclust = clst;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014164:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801416a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801416c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801416e:	2b00      	cmp	r3, #0
 8014170:	d067      	beq.n	8014242 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8014172:	e03a      	b.n	80141ea <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8014174:	683a      	ldr	r2, [r7, #0]
 8014176:	69fb      	ldr	r3, [r7, #28]
 8014178:	1ad3      	subs	r3, r2, r3
 801417a:	603b      	str	r3, [r7, #0]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	699a      	ldr	r2, [r3, #24]
 8014180:	69fb      	ldr	r3, [r7, #28]
 8014182:	441a      	add	r2, r3
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	7d1b      	ldrb	r3, [r3, #20]
 801418c:	f003 0302 	and.w	r3, r3, #2
 8014190:	2b00      	cmp	r3, #0
 8014192:	d00b      	beq.n	80141ac <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014198:	4618      	mov	r0, r3
 801419a:	f7fe f81e 	bl	80121da <create_chain>
 801419e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80141a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d108      	bne.n	80141b8 <f_lseek+0x30c>
							ofs = 0; break;
 80141a6:	2300      	movs	r3, #0
 80141a8:	603b      	str	r3, [r7, #0]
 80141aa:	e022      	b.n	80141f2 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80141b0:	4618      	mov	r0, r3
 80141b2:	f7fd fdc6 	bl	8011d42 <get_fat>
 80141b6:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80141b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141be:	d104      	bne.n	80141ca <f_lseek+0x31e>
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	2201      	movs	r2, #1
 80141c4:	755a      	strb	r2, [r3, #21]
 80141c6:	2301      	movs	r3, #1
 80141c8:	e090      	b.n	80142ec <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80141ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141cc:	2b01      	cmp	r3, #1
 80141ce:	d904      	bls.n	80141da <f_lseek+0x32e>
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	69db      	ldr	r3, [r3, #28]
 80141d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80141d6:	429a      	cmp	r2, r3
 80141d8:	d304      	bcc.n	80141e4 <f_lseek+0x338>
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	2202      	movs	r2, #2
 80141de:	755a      	strb	r2, [r3, #21]
 80141e0:	2302      	movs	r3, #2
 80141e2:	e083      	b.n	80142ec <f_lseek+0x440>
					fp->clust = clst;
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80141e8:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80141ea:	683a      	ldr	r2, [r7, #0]
 80141ec:	69fb      	ldr	r3, [r7, #28]
 80141ee:	429a      	cmp	r2, r3
 80141f0:	d8c0      	bhi.n	8014174 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	699a      	ldr	r2, [r3, #24]
 80141f6:	683b      	ldr	r3, [r7, #0]
 80141f8:	441a      	add	r2, r3
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80141fe:	68bb      	ldr	r3, [r7, #8]
 8014200:	899b      	ldrh	r3, [r3, #12]
 8014202:	461a      	mov	r2, r3
 8014204:	683b      	ldr	r3, [r7, #0]
 8014206:	fbb3 f1f2 	udiv	r1, r3, r2
 801420a:	fb02 f201 	mul.w	r2, r2, r1
 801420e:	1a9b      	subs	r3, r3, r2
 8014210:	2b00      	cmp	r3, #0
 8014212:	d016      	beq.n	8014242 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014214:	68bb      	ldr	r3, [r7, #8]
 8014216:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014218:	4618      	mov	r0, r3
 801421a:	f7fd fd73 	bl	8011d04 <clust2sect>
 801421e:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014222:	2b00      	cmp	r3, #0
 8014224:	d104      	bne.n	8014230 <f_lseek+0x384>
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	2202      	movs	r2, #2
 801422a:	755a      	strb	r2, [r3, #21]
 801422c:	2302      	movs	r3, #2
 801422e:	e05d      	b.n	80142ec <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014230:	68bb      	ldr	r3, [r7, #8]
 8014232:	899b      	ldrh	r3, [r3, #12]
 8014234:	461a      	mov	r2, r3
 8014236:	683b      	ldr	r3, [r7, #0]
 8014238:	fbb3 f3f2 	udiv	r3, r3, r2
 801423c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801423e:	4413      	add	r3, r2
 8014240:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	699a      	ldr	r2, [r3, #24]
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	68db      	ldr	r3, [r3, #12]
 801424a:	429a      	cmp	r2, r3
 801424c:	d90a      	bls.n	8014264 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	699a      	ldr	r2, [r3, #24]
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	7d1b      	ldrb	r3, [r3, #20]
 801425a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801425e:	b2da      	uxtb	r2, r3
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	699b      	ldr	r3, [r3, #24]
 8014268:	68ba      	ldr	r2, [r7, #8]
 801426a:	8992      	ldrh	r2, [r2, #12]
 801426c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014270:	fb02 f201 	mul.w	r2, r2, r1
 8014274:	1a9b      	subs	r3, r3, r2
 8014276:	2b00      	cmp	r3, #0
 8014278:	d036      	beq.n	80142e8 <f_lseek+0x43c>
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	6a1b      	ldr	r3, [r3, #32]
 801427e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014280:	429a      	cmp	r2, r3
 8014282:	d031      	beq.n	80142e8 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	7d1b      	ldrb	r3, [r3, #20]
 8014288:	b25b      	sxtb	r3, r3
 801428a:	2b00      	cmp	r3, #0
 801428c:	da18      	bge.n	80142c0 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801428e:	68bb      	ldr	r3, [r7, #8]
 8014290:	7858      	ldrb	r0, [r3, #1]
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	6a1a      	ldr	r2, [r3, #32]
 801429c:	2301      	movs	r3, #1
 801429e:	f7fd f9a5 	bl	80115ec <disk_write>
 80142a2:	4603      	mov	r3, r0
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d004      	beq.n	80142b2 <f_lseek+0x406>
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	2201      	movs	r2, #1
 80142ac:	755a      	strb	r2, [r3, #21]
 80142ae:	2301      	movs	r3, #1
 80142b0:	e01c      	b.n	80142ec <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	7d1b      	ldrb	r3, [r3, #20]
 80142b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80142ba:	b2da      	uxtb	r2, r3
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80142c0:	68bb      	ldr	r3, [r7, #8]
 80142c2:	7858      	ldrb	r0, [r3, #1]
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80142ca:	2301      	movs	r3, #1
 80142cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142ce:	f7fd f96d 	bl	80115ac <disk_read>
 80142d2:	4603      	mov	r3, r0
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d004      	beq.n	80142e2 <f_lseek+0x436>
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2201      	movs	r2, #1
 80142dc:	755a      	strb	r2, [r3, #21]
 80142de:	2301      	movs	r3, #1
 80142e0:	e004      	b.n	80142ec <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142e6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80142e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80142ec:	4618      	mov	r0, r3
 80142ee:	3740      	adds	r7, #64	; 0x40
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}

080142f4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b09e      	sub	sp, #120	; 0x78
 80142f8:	af00      	add	r7, sp, #0
 80142fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80142fc:	2300      	movs	r3, #0
 80142fe:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014300:	f107 010c 	add.w	r1, r7, #12
 8014304:	1d3b      	adds	r3, r7, #4
 8014306:	2202      	movs	r2, #2
 8014308:	4618      	mov	r0, r3
 801430a:	f7fe fd17 	bl	8012d3c <find_volume>
 801430e:	4603      	mov	r3, r0
 8014310:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8014318:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801431c:	2b00      	cmp	r3, #0
 801431e:	f040 80a4 	bne.w	801446a <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8014322:	687a      	ldr	r2, [r7, #4]
 8014324:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014328:	4611      	mov	r1, r2
 801432a:	4618      	mov	r0, r3
 801432c:	f7fe fbd6 	bl	8012adc <follow_path>
 8014330:	4603      	mov	r3, r0
 8014332:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8014336:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801433a:	2b00      	cmp	r3, #0
 801433c:	d108      	bne.n	8014350 <f_unlink+0x5c>
 801433e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014342:	f003 0320 	and.w	r3, r3, #32
 8014346:	2b00      	cmp	r3, #0
 8014348:	d002      	beq.n	8014350 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 801434a:	2306      	movs	r3, #6
 801434c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014350:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014354:	2b00      	cmp	r3, #0
 8014356:	d108      	bne.n	801436a <f_unlink+0x76>
 8014358:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801435c:	2102      	movs	r1, #2
 801435e:	4618      	mov	r0, r3
 8014360:	f7fd fa82 	bl	8011868 <chk_lock>
 8014364:	4603      	mov	r3, r0
 8014366:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801436a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801436e:	2b00      	cmp	r3, #0
 8014370:	d17b      	bne.n	801446a <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014372:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014376:	b25b      	sxtb	r3, r3
 8014378:	2b00      	cmp	r3, #0
 801437a:	da03      	bge.n	8014384 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801437c:	2306      	movs	r3, #6
 801437e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014382:	e008      	b.n	8014396 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8014384:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014388:	f003 0301 	and.w	r3, r3, #1
 801438c:	2b00      	cmp	r3, #0
 801438e:	d002      	beq.n	8014396 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8014390:	2307      	movs	r3, #7
 8014392:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8014396:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801439a:	2b00      	cmp	r3, #0
 801439c:	d13d      	bne.n	801441a <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80143a2:	4611      	mov	r1, r2
 80143a4:	4618      	mov	r0, r3
 80143a6:	f7fe f98e 	bl	80126c6 <ld_clust>
 80143aa:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80143ac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80143b0:	f003 0310 	and.w	r3, r3, #16
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d030      	beq.n	801441a <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	699b      	ldr	r3, [r3, #24]
 80143bc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80143be:	429a      	cmp	r2, r3
 80143c0:	d103      	bne.n	80143ca <f_unlink+0xd6>
						res = FR_DENIED;
 80143c2:	2307      	movs	r3, #7
 80143c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80143c8:	e027      	b.n	801441a <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80143ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80143d0:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80143d2:	f107 0310 	add.w	r3, r7, #16
 80143d6:	2100      	movs	r1, #0
 80143d8:	4618      	mov	r0, r3
 80143da:	f7fd ffce 	bl	801237a <dir_sdi>
 80143de:	4603      	mov	r3, r0
 80143e0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80143e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d116      	bne.n	801441a <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80143ec:	f107 0310 	add.w	r3, r7, #16
 80143f0:	2100      	movs	r1, #0
 80143f2:	4618      	mov	r0, r3
 80143f4:	f7fe f9a6 	bl	8012744 <dir_read>
 80143f8:	4603      	mov	r3, r0
 80143fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80143fe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014402:	2b00      	cmp	r3, #0
 8014404:	d102      	bne.n	801440c <f_unlink+0x118>
 8014406:	2307      	movs	r3, #7
 8014408:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801440c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014410:	2b04      	cmp	r3, #4
 8014412:	d102      	bne.n	801441a <f_unlink+0x126>
 8014414:	2300      	movs	r3, #0
 8014416:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 801441a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801441e:	2b00      	cmp	r3, #0
 8014420:	d123      	bne.n	801446a <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8014422:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014426:	4618      	mov	r0, r3
 8014428:	f7fe fa70 	bl	801290c <dir_remove>
 801442c:	4603      	mov	r3, r0
 801442e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8014432:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014436:	2b00      	cmp	r3, #0
 8014438:	d10c      	bne.n	8014454 <f_unlink+0x160>
 801443a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801443c:	2b00      	cmp	r3, #0
 801443e:	d009      	beq.n	8014454 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014440:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014444:	2200      	movs	r2, #0
 8014446:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014448:	4618      	mov	r0, r3
 801444a:	f7fd fe61 	bl	8012110 <remove_chain>
 801444e:	4603      	mov	r3, r0
 8014450:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8014454:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014458:	2b00      	cmp	r3, #0
 801445a:	d106      	bne.n	801446a <f_unlink+0x176>
 801445c:	68fb      	ldr	r3, [r7, #12]
 801445e:	4618      	mov	r0, r3
 8014460:	f7fd fbe0 	bl	8011c24 <sync_fs>
 8014464:	4603      	mov	r3, r0
 8014466:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801446a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801446e:	4618      	mov	r0, r3
 8014470:	3778      	adds	r7, #120	; 0x78
 8014472:	46bd      	mov	sp, r7
 8014474:	bd80      	pop	{r7, pc}
	...

08014478 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b096      	sub	sp, #88	; 0x58
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014480:	f107 0108 	add.w	r1, r7, #8
 8014484:	1d3b      	adds	r3, r7, #4
 8014486:	2202      	movs	r2, #2
 8014488:	4618      	mov	r0, r3
 801448a:	f7fe fc57 	bl	8012d3c <find_volume>
 801448e:	4603      	mov	r3, r0
 8014490:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8014494:	68bb      	ldr	r3, [r7, #8]
 8014496:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8014498:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801449c:	2b00      	cmp	r3, #0
 801449e:	f040 80fe 	bne.w	801469e <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80144a2:	687a      	ldr	r2, [r7, #4]
 80144a4:	f107 030c 	add.w	r3, r7, #12
 80144a8:	4611      	mov	r1, r2
 80144aa:	4618      	mov	r0, r3
 80144ac:	f7fe fb16 	bl	8012adc <follow_path>
 80144b0:	4603      	mov	r3, r0
 80144b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80144b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d102      	bne.n	80144c4 <f_mkdir+0x4c>
 80144be:	2308      	movs	r3, #8
 80144c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80144c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144c8:	2b04      	cmp	r3, #4
 80144ca:	d108      	bne.n	80144de <f_mkdir+0x66>
 80144cc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80144d0:	f003 0320 	and.w	r3, r3, #32
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d002      	beq.n	80144de <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80144d8:	2306      	movs	r3, #6
 80144da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80144de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144e2:	2b04      	cmp	r3, #4
 80144e4:	f040 80db 	bne.w	801469e <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80144e8:	f107 030c 	add.w	r3, r7, #12
 80144ec:	2100      	movs	r1, #0
 80144ee:	4618      	mov	r0, r3
 80144f0:	f7fd fe73 	bl	80121da <create_chain>
 80144f4:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	895b      	ldrh	r3, [r3, #10]
 80144fa:	461a      	mov	r2, r3
 80144fc:	68bb      	ldr	r3, [r7, #8]
 80144fe:	899b      	ldrh	r3, [r3, #12]
 8014500:	fb03 f302 	mul.w	r3, r3, r2
 8014504:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8014506:	2300      	movs	r3, #0
 8014508:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801450c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801450e:	2b00      	cmp	r3, #0
 8014510:	d102      	bne.n	8014518 <f_mkdir+0xa0>
 8014512:	2307      	movs	r3, #7
 8014514:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801451a:	2b01      	cmp	r3, #1
 801451c:	d102      	bne.n	8014524 <f_mkdir+0xac>
 801451e:	2302      	movs	r3, #2
 8014520:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014524:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014526:	f1b3 3fff 	cmp.w	r3, #4294967295
 801452a:	d102      	bne.n	8014532 <f_mkdir+0xba>
 801452c:	2301      	movs	r3, #1
 801452e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8014532:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014536:	2b00      	cmp	r3, #0
 8014538:	d106      	bne.n	8014548 <f_mkdir+0xd0>
 801453a:	68bb      	ldr	r3, [r7, #8]
 801453c:	4618      	mov	r0, r3
 801453e:	f7fd faff 	bl	8011b40 <sync_window>
 8014542:	4603      	mov	r3, r0
 8014544:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014548:	4b58      	ldr	r3, [pc, #352]	; (80146ac <f_mkdir+0x234>)
 801454a:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 801454c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014550:	2b00      	cmp	r3, #0
 8014552:	d16c      	bne.n	801462e <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014558:	4618      	mov	r0, r3
 801455a:	f7fd fbd3 	bl	8011d04 <clust2sect>
 801455e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	3338      	adds	r3, #56	; 0x38
 8014564:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8014566:	68bb      	ldr	r3, [r7, #8]
 8014568:	899b      	ldrh	r3, [r3, #12]
 801456a:	461a      	mov	r2, r3
 801456c:	2100      	movs	r1, #0
 801456e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014570:	f7fd f91d 	bl	80117ae <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014574:	220b      	movs	r2, #11
 8014576:	2120      	movs	r1, #32
 8014578:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801457a:	f7fd f918 	bl	80117ae <mem_set>
					dir[DIR_Name] = '.';
 801457e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014580:	222e      	movs	r2, #46	; 0x2e
 8014582:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014586:	330b      	adds	r3, #11
 8014588:	2210      	movs	r2, #16
 801458a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801458c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801458e:	3316      	adds	r3, #22
 8014590:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014592:	4618      	mov	r0, r3
 8014594:	f7fd f8be 	bl	8011714 <st_dword>
					st_clust(fs, dir, dcl);
 8014598:	68bb      	ldr	r3, [r7, #8]
 801459a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801459c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801459e:	4618      	mov	r0, r3
 80145a0:	f7fe f8b0 	bl	8012704 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80145a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145a6:	3320      	adds	r3, #32
 80145a8:	2220      	movs	r2, #32
 80145aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80145ac:	4618      	mov	r0, r3
 80145ae:	f7fd f8dd 	bl	801176c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80145b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145b4:	3321      	adds	r3, #33	; 0x21
 80145b6:	222e      	movs	r2, #46	; 0x2e
 80145b8:	701a      	strb	r2, [r3, #0]
 80145ba:	697b      	ldr	r3, [r7, #20]
 80145bc:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80145be:	68bb      	ldr	r3, [r7, #8]
 80145c0:	781b      	ldrb	r3, [r3, #0]
 80145c2:	2b03      	cmp	r3, #3
 80145c4:	d106      	bne.n	80145d4 <f_mkdir+0x15c>
 80145c6:	68bb      	ldr	r3, [r7, #8]
 80145c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80145cc:	429a      	cmp	r2, r3
 80145ce:	d101      	bne.n	80145d4 <f_mkdir+0x15c>
 80145d0:	2300      	movs	r3, #0
 80145d2:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80145d4:	68b8      	ldr	r0, [r7, #8]
 80145d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145d8:	3320      	adds	r3, #32
 80145da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80145dc:	4619      	mov	r1, r3
 80145de:	f7fe f891 	bl	8012704 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80145e2:	68bb      	ldr	r3, [r7, #8]
 80145e4:	895b      	ldrh	r3, [r3, #10]
 80145e6:	653b      	str	r3, [r7, #80]	; 0x50
 80145e8:	e01c      	b.n	8014624 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 80145ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80145ec:	1c5a      	adds	r2, r3, #1
 80145ee:	64fa      	str	r2, [r7, #76]	; 0x4c
 80145f0:	68ba      	ldr	r2, [r7, #8]
 80145f2:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80145f4:	68bb      	ldr	r3, [r7, #8]
 80145f6:	2201      	movs	r2, #1
 80145f8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80145fa:	68bb      	ldr	r3, [r7, #8]
 80145fc:	4618      	mov	r0, r3
 80145fe:	f7fd fa9f 	bl	8011b40 <sync_window>
 8014602:	4603      	mov	r3, r0
 8014604:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014608:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801460c:	2b00      	cmp	r3, #0
 801460e:	d10d      	bne.n	801462c <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8014610:	68bb      	ldr	r3, [r7, #8]
 8014612:	899b      	ldrh	r3, [r3, #12]
 8014614:	461a      	mov	r2, r3
 8014616:	2100      	movs	r1, #0
 8014618:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801461a:	f7fd f8c8 	bl	80117ae <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801461e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014620:	3b01      	subs	r3, #1
 8014622:	653b      	str	r3, [r7, #80]	; 0x50
 8014624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014626:	2b00      	cmp	r3, #0
 8014628:	d1df      	bne.n	80145ea <f_mkdir+0x172>
 801462a:	e000      	b.n	801462e <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 801462c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801462e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014632:	2b00      	cmp	r3, #0
 8014634:	d107      	bne.n	8014646 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8014636:	f107 030c 	add.w	r3, r7, #12
 801463a:	4618      	mov	r0, r3
 801463c:	f7fe f934 	bl	80128a8 <dir_register>
 8014640:	4603      	mov	r3, r0
 8014642:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8014646:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801464a:	2b00      	cmp	r3, #0
 801464c:	d120      	bne.n	8014690 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014650:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014654:	3316      	adds	r3, #22
 8014656:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014658:	4618      	mov	r0, r3
 801465a:	f7fd f85b 	bl	8011714 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801465e:	68bb      	ldr	r3, [r7, #8]
 8014660:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014662:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014664:	4618      	mov	r0, r3
 8014666:	f7fe f84d 	bl	8012704 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801466a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801466c:	330b      	adds	r3, #11
 801466e:	2210      	movs	r2, #16
 8014670:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014672:	68bb      	ldr	r3, [r7, #8]
 8014674:	2201      	movs	r2, #1
 8014676:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014678:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801467c:	2b00      	cmp	r3, #0
 801467e:	d10e      	bne.n	801469e <f_mkdir+0x226>
					res = sync_fs(fs);
 8014680:	68bb      	ldr	r3, [r7, #8]
 8014682:	4618      	mov	r0, r3
 8014684:	f7fd face 	bl	8011c24 <sync_fs>
 8014688:	4603      	mov	r3, r0
 801468a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801468e:	e006      	b.n	801469e <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014690:	f107 030c 	add.w	r3, r7, #12
 8014694:	2200      	movs	r2, #0
 8014696:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014698:	4618      	mov	r0, r3
 801469a:	f7fd fd39 	bl	8012110 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801469e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80146a2:	4618      	mov	r0, r3
 80146a4:	3758      	adds	r7, #88	; 0x58
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bd80      	pop	{r7, pc}
 80146aa:	bf00      	nop
 80146ac:	274a0000 	.word	0x274a0000

080146b0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b088      	sub	sp, #32
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	60f8      	str	r0, [r7, #12]
 80146b8:	60b9      	str	r1, [r7, #8]
 80146ba:	607a      	str	r2, [r7, #4]
	int n = 0;
 80146bc:	2300      	movs	r3, #0
 80146be:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80146c4:	e017      	b.n	80146f6 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80146c6:	f107 0310 	add.w	r3, r7, #16
 80146ca:	f107 0114 	add.w	r1, r7, #20
 80146ce:	2201      	movs	r2, #1
 80146d0:	6878      	ldr	r0, [r7, #4]
 80146d2:	f7ff f803 	bl	80136dc <f_read>
		if (rc != 1) break;
 80146d6:	693b      	ldr	r3, [r7, #16]
 80146d8:	2b01      	cmp	r3, #1
 80146da:	d112      	bne.n	8014702 <f_gets+0x52>
		c = s[0];
 80146dc:	7d3b      	ldrb	r3, [r7, #20]
 80146de:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80146e0:	69bb      	ldr	r3, [r7, #24]
 80146e2:	1c5a      	adds	r2, r3, #1
 80146e4:	61ba      	str	r2, [r7, #24]
 80146e6:	7dfa      	ldrb	r2, [r7, #23]
 80146e8:	701a      	strb	r2, [r3, #0]
		n++;
 80146ea:	69fb      	ldr	r3, [r7, #28]
 80146ec:	3301      	adds	r3, #1
 80146ee:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80146f0:	7dfb      	ldrb	r3, [r7, #23]
 80146f2:	2b0a      	cmp	r3, #10
 80146f4:	d007      	beq.n	8014706 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80146f6:	68bb      	ldr	r3, [r7, #8]
 80146f8:	3b01      	subs	r3, #1
 80146fa:	69fa      	ldr	r2, [r7, #28]
 80146fc:	429a      	cmp	r2, r3
 80146fe:	dbe2      	blt.n	80146c6 <f_gets+0x16>
 8014700:	e002      	b.n	8014708 <f_gets+0x58>
		if (rc != 1) break;
 8014702:	bf00      	nop
 8014704:	e000      	b.n	8014708 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8014706:	bf00      	nop
	}
	*p = 0;
 8014708:	69bb      	ldr	r3, [r7, #24]
 801470a:	2200      	movs	r2, #0
 801470c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801470e:	69fb      	ldr	r3, [r7, #28]
 8014710:	2b00      	cmp	r3, #0
 8014712:	d001      	beq.n	8014718 <f_gets+0x68>
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	e000      	b.n	801471a <f_gets+0x6a>
 8014718:	2300      	movs	r3, #0
}
 801471a:	4618      	mov	r0, r3
 801471c:	3720      	adds	r7, #32
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}
	...

08014724 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014724:	b480      	push	{r7}
 8014726:	b087      	sub	sp, #28
 8014728:	af00      	add	r7, sp, #0
 801472a:	60f8      	str	r0, [r7, #12]
 801472c:	60b9      	str	r1, [r7, #8]
 801472e:	4613      	mov	r3, r2
 8014730:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014732:	2301      	movs	r3, #1
 8014734:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014736:	2300      	movs	r3, #0
 8014738:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801473a:	4b1f      	ldr	r3, [pc, #124]	; (80147b8 <FATFS_LinkDriverEx+0x94>)
 801473c:	7a5b      	ldrb	r3, [r3, #9]
 801473e:	b2db      	uxtb	r3, r3
 8014740:	2b00      	cmp	r3, #0
 8014742:	d131      	bne.n	80147a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014744:	4b1c      	ldr	r3, [pc, #112]	; (80147b8 <FATFS_LinkDriverEx+0x94>)
 8014746:	7a5b      	ldrb	r3, [r3, #9]
 8014748:	b2db      	uxtb	r3, r3
 801474a:	461a      	mov	r2, r3
 801474c:	4b1a      	ldr	r3, [pc, #104]	; (80147b8 <FATFS_LinkDriverEx+0x94>)
 801474e:	2100      	movs	r1, #0
 8014750:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014752:	4b19      	ldr	r3, [pc, #100]	; (80147b8 <FATFS_LinkDriverEx+0x94>)
 8014754:	7a5b      	ldrb	r3, [r3, #9]
 8014756:	b2db      	uxtb	r3, r3
 8014758:	4a17      	ldr	r2, [pc, #92]	; (80147b8 <FATFS_LinkDriverEx+0x94>)
 801475a:	009b      	lsls	r3, r3, #2
 801475c:	4413      	add	r3, r2
 801475e:	68fa      	ldr	r2, [r7, #12]
 8014760:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014762:	4b15      	ldr	r3, [pc, #84]	; (80147b8 <FATFS_LinkDriverEx+0x94>)
 8014764:	7a5b      	ldrb	r3, [r3, #9]
 8014766:	b2db      	uxtb	r3, r3
 8014768:	461a      	mov	r2, r3
 801476a:	4b13      	ldr	r3, [pc, #76]	; (80147b8 <FATFS_LinkDriverEx+0x94>)
 801476c:	4413      	add	r3, r2
 801476e:	79fa      	ldrb	r2, [r7, #7]
 8014770:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014772:	4b11      	ldr	r3, [pc, #68]	; (80147b8 <FATFS_LinkDriverEx+0x94>)
 8014774:	7a5b      	ldrb	r3, [r3, #9]
 8014776:	b2db      	uxtb	r3, r3
 8014778:	1c5a      	adds	r2, r3, #1
 801477a:	b2d1      	uxtb	r1, r2
 801477c:	4a0e      	ldr	r2, [pc, #56]	; (80147b8 <FATFS_LinkDriverEx+0x94>)
 801477e:	7251      	strb	r1, [r2, #9]
 8014780:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014782:	7dbb      	ldrb	r3, [r7, #22]
 8014784:	3330      	adds	r3, #48	; 0x30
 8014786:	b2da      	uxtb	r2, r3
 8014788:	68bb      	ldr	r3, [r7, #8]
 801478a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801478c:	68bb      	ldr	r3, [r7, #8]
 801478e:	3301      	adds	r3, #1
 8014790:	223a      	movs	r2, #58	; 0x3a
 8014792:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014794:	68bb      	ldr	r3, [r7, #8]
 8014796:	3302      	adds	r3, #2
 8014798:	222f      	movs	r2, #47	; 0x2f
 801479a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801479c:	68bb      	ldr	r3, [r7, #8]
 801479e:	3303      	adds	r3, #3
 80147a0:	2200      	movs	r2, #0
 80147a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80147a4:	2300      	movs	r3, #0
 80147a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80147a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80147aa:	4618      	mov	r0, r3
 80147ac:	371c      	adds	r7, #28
 80147ae:	46bd      	mov	sp, r7
 80147b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b4:	4770      	bx	lr
 80147b6:	bf00      	nop
 80147b8:	200422f4 	.word	0x200422f4

080147bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b082      	sub	sp, #8
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
 80147c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80147c6:	2200      	movs	r2, #0
 80147c8:	6839      	ldr	r1, [r7, #0]
 80147ca:	6878      	ldr	r0, [r7, #4]
 80147cc:	f7ff ffaa 	bl	8014724 <FATFS_LinkDriverEx>
 80147d0:	4603      	mov	r3, r0
}
 80147d2:	4618      	mov	r0, r3
 80147d4:	3708      	adds	r7, #8
 80147d6:	46bd      	mov	sp, r7
 80147d8:	bd80      	pop	{r7, pc}

080147da <__cxa_guard_acquire>:
 80147da:	6803      	ldr	r3, [r0, #0]
 80147dc:	07db      	lsls	r3, r3, #31
 80147de:	d406      	bmi.n	80147ee <__cxa_guard_acquire+0x14>
 80147e0:	7843      	ldrb	r3, [r0, #1]
 80147e2:	b103      	cbz	r3, 80147e6 <__cxa_guard_acquire+0xc>
 80147e4:	deff      	udf	#255	; 0xff
 80147e6:	2301      	movs	r3, #1
 80147e8:	7043      	strb	r3, [r0, #1]
 80147ea:	4618      	mov	r0, r3
 80147ec:	4770      	bx	lr
 80147ee:	2000      	movs	r0, #0
 80147f0:	4770      	bx	lr

080147f2 <__cxa_guard_release>:
 80147f2:	2301      	movs	r3, #1
 80147f4:	6003      	str	r3, [r0, #0]
 80147f6:	4770      	bx	lr

080147f8 <cos>:
 80147f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80147fa:	ec51 0b10 	vmov	r0, r1, d0
 80147fe:	4a1e      	ldr	r2, [pc, #120]	; (8014878 <cos+0x80>)
 8014800:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014804:	4293      	cmp	r3, r2
 8014806:	dc06      	bgt.n	8014816 <cos+0x1e>
 8014808:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8014870 <cos+0x78>
 801480c:	f000 fa74 	bl	8014cf8 <__kernel_cos>
 8014810:	ec51 0b10 	vmov	r0, r1, d0
 8014814:	e007      	b.n	8014826 <cos+0x2e>
 8014816:	4a19      	ldr	r2, [pc, #100]	; (801487c <cos+0x84>)
 8014818:	4293      	cmp	r3, r2
 801481a:	dd09      	ble.n	8014830 <cos+0x38>
 801481c:	ee10 2a10 	vmov	r2, s0
 8014820:	460b      	mov	r3, r1
 8014822:	f7eb fd49 	bl	80002b8 <__aeabi_dsub>
 8014826:	ec41 0b10 	vmov	d0, r0, r1
 801482a:	b005      	add	sp, #20
 801482c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014830:	4668      	mov	r0, sp
 8014832:	f000 f86d 	bl	8014910 <__ieee754_rem_pio2>
 8014836:	f000 0003 	and.w	r0, r0, #3
 801483a:	2801      	cmp	r0, #1
 801483c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014840:	ed9d 0b00 	vldr	d0, [sp]
 8014844:	d007      	beq.n	8014856 <cos+0x5e>
 8014846:	2802      	cmp	r0, #2
 8014848:	d00e      	beq.n	8014868 <cos+0x70>
 801484a:	2800      	cmp	r0, #0
 801484c:	d0de      	beq.n	801480c <cos+0x14>
 801484e:	2001      	movs	r0, #1
 8014850:	f000 fe5a 	bl	8015508 <__kernel_sin>
 8014854:	e7dc      	b.n	8014810 <cos+0x18>
 8014856:	f000 fe57 	bl	8015508 <__kernel_sin>
 801485a:	ec53 2b10 	vmov	r2, r3, d0
 801485e:	ee10 0a10 	vmov	r0, s0
 8014862:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014866:	e7de      	b.n	8014826 <cos+0x2e>
 8014868:	f000 fa46 	bl	8014cf8 <__kernel_cos>
 801486c:	e7f5      	b.n	801485a <cos+0x62>
 801486e:	bf00      	nop
	...
 8014878:	3fe921fb 	.word	0x3fe921fb
 801487c:	7fefffff 	.word	0x7fefffff

08014880 <sin>:
 8014880:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014882:	ec51 0b10 	vmov	r0, r1, d0
 8014886:	4a20      	ldr	r2, [pc, #128]	; (8014908 <sin+0x88>)
 8014888:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801488c:	4293      	cmp	r3, r2
 801488e:	dc07      	bgt.n	80148a0 <sin+0x20>
 8014890:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014900 <sin+0x80>
 8014894:	2000      	movs	r0, #0
 8014896:	f000 fe37 	bl	8015508 <__kernel_sin>
 801489a:	ec51 0b10 	vmov	r0, r1, d0
 801489e:	e007      	b.n	80148b0 <sin+0x30>
 80148a0:	4a1a      	ldr	r2, [pc, #104]	; (801490c <sin+0x8c>)
 80148a2:	4293      	cmp	r3, r2
 80148a4:	dd09      	ble.n	80148ba <sin+0x3a>
 80148a6:	ee10 2a10 	vmov	r2, s0
 80148aa:	460b      	mov	r3, r1
 80148ac:	f7eb fd04 	bl	80002b8 <__aeabi_dsub>
 80148b0:	ec41 0b10 	vmov	d0, r0, r1
 80148b4:	b005      	add	sp, #20
 80148b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80148ba:	4668      	mov	r0, sp
 80148bc:	f000 f828 	bl	8014910 <__ieee754_rem_pio2>
 80148c0:	f000 0003 	and.w	r0, r0, #3
 80148c4:	2801      	cmp	r0, #1
 80148c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80148ca:	ed9d 0b00 	vldr	d0, [sp]
 80148ce:	d004      	beq.n	80148da <sin+0x5a>
 80148d0:	2802      	cmp	r0, #2
 80148d2:	d005      	beq.n	80148e0 <sin+0x60>
 80148d4:	b970      	cbnz	r0, 80148f4 <sin+0x74>
 80148d6:	2001      	movs	r0, #1
 80148d8:	e7dd      	b.n	8014896 <sin+0x16>
 80148da:	f000 fa0d 	bl	8014cf8 <__kernel_cos>
 80148de:	e7dc      	b.n	801489a <sin+0x1a>
 80148e0:	2001      	movs	r0, #1
 80148e2:	f000 fe11 	bl	8015508 <__kernel_sin>
 80148e6:	ec53 2b10 	vmov	r2, r3, d0
 80148ea:	ee10 0a10 	vmov	r0, s0
 80148ee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80148f2:	e7dd      	b.n	80148b0 <sin+0x30>
 80148f4:	f000 fa00 	bl	8014cf8 <__kernel_cos>
 80148f8:	e7f5      	b.n	80148e6 <sin+0x66>
 80148fa:	bf00      	nop
 80148fc:	f3af 8000 	nop.w
	...
 8014908:	3fe921fb 	.word	0x3fe921fb
 801490c:	7fefffff 	.word	0x7fefffff

08014910 <__ieee754_rem_pio2>:
 8014910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014914:	ec57 6b10 	vmov	r6, r7, d0
 8014918:	4bc3      	ldr	r3, [pc, #780]	; (8014c28 <__ieee754_rem_pio2+0x318>)
 801491a:	b08d      	sub	sp, #52	; 0x34
 801491c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014920:	4598      	cmp	r8, r3
 8014922:	4604      	mov	r4, r0
 8014924:	9704      	str	r7, [sp, #16]
 8014926:	dc07      	bgt.n	8014938 <__ieee754_rem_pio2+0x28>
 8014928:	2200      	movs	r2, #0
 801492a:	2300      	movs	r3, #0
 801492c:	ed84 0b00 	vstr	d0, [r4]
 8014930:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014934:	2500      	movs	r5, #0
 8014936:	e027      	b.n	8014988 <__ieee754_rem_pio2+0x78>
 8014938:	4bbc      	ldr	r3, [pc, #752]	; (8014c2c <__ieee754_rem_pio2+0x31c>)
 801493a:	4598      	cmp	r8, r3
 801493c:	dc75      	bgt.n	8014a2a <__ieee754_rem_pio2+0x11a>
 801493e:	9b04      	ldr	r3, [sp, #16]
 8014940:	4dbb      	ldr	r5, [pc, #748]	; (8014c30 <__ieee754_rem_pio2+0x320>)
 8014942:	2b00      	cmp	r3, #0
 8014944:	ee10 0a10 	vmov	r0, s0
 8014948:	a3a9      	add	r3, pc, #676	; (adr r3, 8014bf0 <__ieee754_rem_pio2+0x2e0>)
 801494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801494e:	4639      	mov	r1, r7
 8014950:	dd36      	ble.n	80149c0 <__ieee754_rem_pio2+0xb0>
 8014952:	f7eb fcb1 	bl	80002b8 <__aeabi_dsub>
 8014956:	45a8      	cmp	r8, r5
 8014958:	4606      	mov	r6, r0
 801495a:	460f      	mov	r7, r1
 801495c:	d018      	beq.n	8014990 <__ieee754_rem_pio2+0x80>
 801495e:	a3a6      	add	r3, pc, #664	; (adr r3, 8014bf8 <__ieee754_rem_pio2+0x2e8>)
 8014960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014964:	f7eb fca8 	bl	80002b8 <__aeabi_dsub>
 8014968:	4602      	mov	r2, r0
 801496a:	460b      	mov	r3, r1
 801496c:	e9c4 2300 	strd	r2, r3, [r4]
 8014970:	4630      	mov	r0, r6
 8014972:	4639      	mov	r1, r7
 8014974:	f7eb fca0 	bl	80002b8 <__aeabi_dsub>
 8014978:	a39f      	add	r3, pc, #636	; (adr r3, 8014bf8 <__ieee754_rem_pio2+0x2e8>)
 801497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801497e:	f7eb fc9b 	bl	80002b8 <__aeabi_dsub>
 8014982:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014986:	2501      	movs	r5, #1
 8014988:	4628      	mov	r0, r5
 801498a:	b00d      	add	sp, #52	; 0x34
 801498c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014990:	a39b      	add	r3, pc, #620	; (adr r3, 8014c00 <__ieee754_rem_pio2+0x2f0>)
 8014992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014996:	f7eb fc8f 	bl	80002b8 <__aeabi_dsub>
 801499a:	a39b      	add	r3, pc, #620	; (adr r3, 8014c08 <__ieee754_rem_pio2+0x2f8>)
 801499c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149a0:	4606      	mov	r6, r0
 80149a2:	460f      	mov	r7, r1
 80149a4:	f7eb fc88 	bl	80002b8 <__aeabi_dsub>
 80149a8:	4602      	mov	r2, r0
 80149aa:	460b      	mov	r3, r1
 80149ac:	e9c4 2300 	strd	r2, r3, [r4]
 80149b0:	4630      	mov	r0, r6
 80149b2:	4639      	mov	r1, r7
 80149b4:	f7eb fc80 	bl	80002b8 <__aeabi_dsub>
 80149b8:	a393      	add	r3, pc, #588	; (adr r3, 8014c08 <__ieee754_rem_pio2+0x2f8>)
 80149ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149be:	e7de      	b.n	801497e <__ieee754_rem_pio2+0x6e>
 80149c0:	f7eb fc7c 	bl	80002bc <__adddf3>
 80149c4:	45a8      	cmp	r8, r5
 80149c6:	4606      	mov	r6, r0
 80149c8:	460f      	mov	r7, r1
 80149ca:	d016      	beq.n	80149fa <__ieee754_rem_pio2+0xea>
 80149cc:	a38a      	add	r3, pc, #552	; (adr r3, 8014bf8 <__ieee754_rem_pio2+0x2e8>)
 80149ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149d2:	f7eb fc73 	bl	80002bc <__adddf3>
 80149d6:	4602      	mov	r2, r0
 80149d8:	460b      	mov	r3, r1
 80149da:	e9c4 2300 	strd	r2, r3, [r4]
 80149de:	4630      	mov	r0, r6
 80149e0:	4639      	mov	r1, r7
 80149e2:	f7eb fc69 	bl	80002b8 <__aeabi_dsub>
 80149e6:	a384      	add	r3, pc, #528	; (adr r3, 8014bf8 <__ieee754_rem_pio2+0x2e8>)
 80149e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ec:	f7eb fc66 	bl	80002bc <__adddf3>
 80149f0:	f04f 35ff 	mov.w	r5, #4294967295
 80149f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80149f8:	e7c6      	b.n	8014988 <__ieee754_rem_pio2+0x78>
 80149fa:	a381      	add	r3, pc, #516	; (adr r3, 8014c00 <__ieee754_rem_pio2+0x2f0>)
 80149fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a00:	f7eb fc5c 	bl	80002bc <__adddf3>
 8014a04:	a380      	add	r3, pc, #512	; (adr r3, 8014c08 <__ieee754_rem_pio2+0x2f8>)
 8014a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a0a:	4606      	mov	r6, r0
 8014a0c:	460f      	mov	r7, r1
 8014a0e:	f7eb fc55 	bl	80002bc <__adddf3>
 8014a12:	4602      	mov	r2, r0
 8014a14:	460b      	mov	r3, r1
 8014a16:	e9c4 2300 	strd	r2, r3, [r4]
 8014a1a:	4630      	mov	r0, r6
 8014a1c:	4639      	mov	r1, r7
 8014a1e:	f7eb fc4b 	bl	80002b8 <__aeabi_dsub>
 8014a22:	a379      	add	r3, pc, #484	; (adr r3, 8014c08 <__ieee754_rem_pio2+0x2f8>)
 8014a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a28:	e7e0      	b.n	80149ec <__ieee754_rem_pio2+0xdc>
 8014a2a:	4b82      	ldr	r3, [pc, #520]	; (8014c34 <__ieee754_rem_pio2+0x324>)
 8014a2c:	4598      	cmp	r8, r3
 8014a2e:	f300 80d0 	bgt.w	8014bd2 <__ieee754_rem_pio2+0x2c2>
 8014a32:	f000 fe23 	bl	801567c <fabs>
 8014a36:	ec57 6b10 	vmov	r6, r7, d0
 8014a3a:	ee10 0a10 	vmov	r0, s0
 8014a3e:	a374      	add	r3, pc, #464	; (adr r3, 8014c10 <__ieee754_rem_pio2+0x300>)
 8014a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a44:	4639      	mov	r1, r7
 8014a46:	f7eb fdef 	bl	8000628 <__aeabi_dmul>
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	4b7a      	ldr	r3, [pc, #488]	; (8014c38 <__ieee754_rem_pio2+0x328>)
 8014a4e:	f7eb fc35 	bl	80002bc <__adddf3>
 8014a52:	f7ec f899 	bl	8000b88 <__aeabi_d2iz>
 8014a56:	4605      	mov	r5, r0
 8014a58:	f7eb fd7c 	bl	8000554 <__aeabi_i2d>
 8014a5c:	a364      	add	r3, pc, #400	; (adr r3, 8014bf0 <__ieee754_rem_pio2+0x2e0>)
 8014a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014a66:	f7eb fddf 	bl	8000628 <__aeabi_dmul>
 8014a6a:	4602      	mov	r2, r0
 8014a6c:	460b      	mov	r3, r1
 8014a6e:	4630      	mov	r0, r6
 8014a70:	4639      	mov	r1, r7
 8014a72:	f7eb fc21 	bl	80002b8 <__aeabi_dsub>
 8014a76:	a360      	add	r3, pc, #384	; (adr r3, 8014bf8 <__ieee754_rem_pio2+0x2e8>)
 8014a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a7c:	4682      	mov	sl, r0
 8014a7e:	468b      	mov	fp, r1
 8014a80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a84:	f7eb fdd0 	bl	8000628 <__aeabi_dmul>
 8014a88:	2d1f      	cmp	r5, #31
 8014a8a:	4606      	mov	r6, r0
 8014a8c:	460f      	mov	r7, r1
 8014a8e:	dc0c      	bgt.n	8014aaa <__ieee754_rem_pio2+0x19a>
 8014a90:	1e6a      	subs	r2, r5, #1
 8014a92:	4b6a      	ldr	r3, [pc, #424]	; (8014c3c <__ieee754_rem_pio2+0x32c>)
 8014a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a98:	4543      	cmp	r3, r8
 8014a9a:	d006      	beq.n	8014aaa <__ieee754_rem_pio2+0x19a>
 8014a9c:	4632      	mov	r2, r6
 8014a9e:	463b      	mov	r3, r7
 8014aa0:	4650      	mov	r0, sl
 8014aa2:	4659      	mov	r1, fp
 8014aa4:	f7eb fc08 	bl	80002b8 <__aeabi_dsub>
 8014aa8:	e00e      	b.n	8014ac8 <__ieee754_rem_pio2+0x1b8>
 8014aaa:	4632      	mov	r2, r6
 8014aac:	463b      	mov	r3, r7
 8014aae:	4650      	mov	r0, sl
 8014ab0:	4659      	mov	r1, fp
 8014ab2:	f7eb fc01 	bl	80002b8 <__aeabi_dsub>
 8014ab6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014aba:	9305      	str	r3, [sp, #20]
 8014abc:	9a05      	ldr	r2, [sp, #20]
 8014abe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014ac2:	1ad3      	subs	r3, r2, r3
 8014ac4:	2b10      	cmp	r3, #16
 8014ac6:	dc02      	bgt.n	8014ace <__ieee754_rem_pio2+0x1be>
 8014ac8:	e9c4 0100 	strd	r0, r1, [r4]
 8014acc:	e039      	b.n	8014b42 <__ieee754_rem_pio2+0x232>
 8014ace:	a34c      	add	r3, pc, #304	; (adr r3, 8014c00 <__ieee754_rem_pio2+0x2f0>)
 8014ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ad8:	f7eb fda6 	bl	8000628 <__aeabi_dmul>
 8014adc:	4606      	mov	r6, r0
 8014ade:	460f      	mov	r7, r1
 8014ae0:	4602      	mov	r2, r0
 8014ae2:	460b      	mov	r3, r1
 8014ae4:	4650      	mov	r0, sl
 8014ae6:	4659      	mov	r1, fp
 8014ae8:	f7eb fbe6 	bl	80002b8 <__aeabi_dsub>
 8014aec:	4602      	mov	r2, r0
 8014aee:	460b      	mov	r3, r1
 8014af0:	4680      	mov	r8, r0
 8014af2:	4689      	mov	r9, r1
 8014af4:	4650      	mov	r0, sl
 8014af6:	4659      	mov	r1, fp
 8014af8:	f7eb fbde 	bl	80002b8 <__aeabi_dsub>
 8014afc:	4632      	mov	r2, r6
 8014afe:	463b      	mov	r3, r7
 8014b00:	f7eb fbda 	bl	80002b8 <__aeabi_dsub>
 8014b04:	a340      	add	r3, pc, #256	; (adr r3, 8014c08 <__ieee754_rem_pio2+0x2f8>)
 8014b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b0a:	4606      	mov	r6, r0
 8014b0c:	460f      	mov	r7, r1
 8014b0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b12:	f7eb fd89 	bl	8000628 <__aeabi_dmul>
 8014b16:	4632      	mov	r2, r6
 8014b18:	463b      	mov	r3, r7
 8014b1a:	f7eb fbcd 	bl	80002b8 <__aeabi_dsub>
 8014b1e:	4602      	mov	r2, r0
 8014b20:	460b      	mov	r3, r1
 8014b22:	4606      	mov	r6, r0
 8014b24:	460f      	mov	r7, r1
 8014b26:	4640      	mov	r0, r8
 8014b28:	4649      	mov	r1, r9
 8014b2a:	f7eb fbc5 	bl	80002b8 <__aeabi_dsub>
 8014b2e:	9a05      	ldr	r2, [sp, #20]
 8014b30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014b34:	1ad3      	subs	r3, r2, r3
 8014b36:	2b31      	cmp	r3, #49	; 0x31
 8014b38:	dc20      	bgt.n	8014b7c <__ieee754_rem_pio2+0x26c>
 8014b3a:	e9c4 0100 	strd	r0, r1, [r4]
 8014b3e:	46c2      	mov	sl, r8
 8014b40:	46cb      	mov	fp, r9
 8014b42:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014b46:	4650      	mov	r0, sl
 8014b48:	4642      	mov	r2, r8
 8014b4a:	464b      	mov	r3, r9
 8014b4c:	4659      	mov	r1, fp
 8014b4e:	f7eb fbb3 	bl	80002b8 <__aeabi_dsub>
 8014b52:	463b      	mov	r3, r7
 8014b54:	4632      	mov	r2, r6
 8014b56:	f7eb fbaf 	bl	80002b8 <__aeabi_dsub>
 8014b5a:	9b04      	ldr	r3, [sp, #16]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014b62:	f6bf af11 	bge.w	8014988 <__ieee754_rem_pio2+0x78>
 8014b66:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014b6a:	6063      	str	r3, [r4, #4]
 8014b6c:	f8c4 8000 	str.w	r8, [r4]
 8014b70:	60a0      	str	r0, [r4, #8]
 8014b72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014b76:	60e3      	str	r3, [r4, #12]
 8014b78:	426d      	negs	r5, r5
 8014b7a:	e705      	b.n	8014988 <__ieee754_rem_pio2+0x78>
 8014b7c:	a326      	add	r3, pc, #152	; (adr r3, 8014c18 <__ieee754_rem_pio2+0x308>)
 8014b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b86:	f7eb fd4f 	bl	8000628 <__aeabi_dmul>
 8014b8a:	4606      	mov	r6, r0
 8014b8c:	460f      	mov	r7, r1
 8014b8e:	4602      	mov	r2, r0
 8014b90:	460b      	mov	r3, r1
 8014b92:	4640      	mov	r0, r8
 8014b94:	4649      	mov	r1, r9
 8014b96:	f7eb fb8f 	bl	80002b8 <__aeabi_dsub>
 8014b9a:	4602      	mov	r2, r0
 8014b9c:	460b      	mov	r3, r1
 8014b9e:	4682      	mov	sl, r0
 8014ba0:	468b      	mov	fp, r1
 8014ba2:	4640      	mov	r0, r8
 8014ba4:	4649      	mov	r1, r9
 8014ba6:	f7eb fb87 	bl	80002b8 <__aeabi_dsub>
 8014baa:	4632      	mov	r2, r6
 8014bac:	463b      	mov	r3, r7
 8014bae:	f7eb fb83 	bl	80002b8 <__aeabi_dsub>
 8014bb2:	a31b      	add	r3, pc, #108	; (adr r3, 8014c20 <__ieee754_rem_pio2+0x310>)
 8014bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bb8:	4606      	mov	r6, r0
 8014bba:	460f      	mov	r7, r1
 8014bbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014bc0:	f7eb fd32 	bl	8000628 <__aeabi_dmul>
 8014bc4:	4632      	mov	r2, r6
 8014bc6:	463b      	mov	r3, r7
 8014bc8:	f7eb fb76 	bl	80002b8 <__aeabi_dsub>
 8014bcc:	4606      	mov	r6, r0
 8014bce:	460f      	mov	r7, r1
 8014bd0:	e764      	b.n	8014a9c <__ieee754_rem_pio2+0x18c>
 8014bd2:	4b1b      	ldr	r3, [pc, #108]	; (8014c40 <__ieee754_rem_pio2+0x330>)
 8014bd4:	4598      	cmp	r8, r3
 8014bd6:	dd35      	ble.n	8014c44 <__ieee754_rem_pio2+0x334>
 8014bd8:	ee10 2a10 	vmov	r2, s0
 8014bdc:	463b      	mov	r3, r7
 8014bde:	4630      	mov	r0, r6
 8014be0:	4639      	mov	r1, r7
 8014be2:	f7eb fb69 	bl	80002b8 <__aeabi_dsub>
 8014be6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014bea:	e9c4 0100 	strd	r0, r1, [r4]
 8014bee:	e6a1      	b.n	8014934 <__ieee754_rem_pio2+0x24>
 8014bf0:	54400000 	.word	0x54400000
 8014bf4:	3ff921fb 	.word	0x3ff921fb
 8014bf8:	1a626331 	.word	0x1a626331
 8014bfc:	3dd0b461 	.word	0x3dd0b461
 8014c00:	1a600000 	.word	0x1a600000
 8014c04:	3dd0b461 	.word	0x3dd0b461
 8014c08:	2e037073 	.word	0x2e037073
 8014c0c:	3ba3198a 	.word	0x3ba3198a
 8014c10:	6dc9c883 	.word	0x6dc9c883
 8014c14:	3fe45f30 	.word	0x3fe45f30
 8014c18:	2e000000 	.word	0x2e000000
 8014c1c:	3ba3198a 	.word	0x3ba3198a
 8014c20:	252049c1 	.word	0x252049c1
 8014c24:	397b839a 	.word	0x397b839a
 8014c28:	3fe921fb 	.word	0x3fe921fb
 8014c2c:	4002d97b 	.word	0x4002d97b
 8014c30:	3ff921fb 	.word	0x3ff921fb
 8014c34:	413921fb 	.word	0x413921fb
 8014c38:	3fe00000 	.word	0x3fe00000
 8014c3c:	0801a1a4 	.word	0x0801a1a4
 8014c40:	7fefffff 	.word	0x7fefffff
 8014c44:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014c48:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014c4c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014c50:	4630      	mov	r0, r6
 8014c52:	460f      	mov	r7, r1
 8014c54:	f7eb ff98 	bl	8000b88 <__aeabi_d2iz>
 8014c58:	f7eb fc7c 	bl	8000554 <__aeabi_i2d>
 8014c5c:	4602      	mov	r2, r0
 8014c5e:	460b      	mov	r3, r1
 8014c60:	4630      	mov	r0, r6
 8014c62:	4639      	mov	r1, r7
 8014c64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014c68:	f7eb fb26 	bl	80002b8 <__aeabi_dsub>
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	4b1f      	ldr	r3, [pc, #124]	; (8014cec <__ieee754_rem_pio2+0x3dc>)
 8014c70:	f7eb fcda 	bl	8000628 <__aeabi_dmul>
 8014c74:	460f      	mov	r7, r1
 8014c76:	4606      	mov	r6, r0
 8014c78:	f7eb ff86 	bl	8000b88 <__aeabi_d2iz>
 8014c7c:	f7eb fc6a 	bl	8000554 <__aeabi_i2d>
 8014c80:	4602      	mov	r2, r0
 8014c82:	460b      	mov	r3, r1
 8014c84:	4630      	mov	r0, r6
 8014c86:	4639      	mov	r1, r7
 8014c88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014c8c:	f7eb fb14 	bl	80002b8 <__aeabi_dsub>
 8014c90:	2200      	movs	r2, #0
 8014c92:	4b16      	ldr	r3, [pc, #88]	; (8014cec <__ieee754_rem_pio2+0x3dc>)
 8014c94:	f7eb fcc8 	bl	8000628 <__aeabi_dmul>
 8014c98:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014c9c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014ca0:	f04f 0803 	mov.w	r8, #3
 8014ca4:	2600      	movs	r6, #0
 8014ca6:	2700      	movs	r7, #0
 8014ca8:	4632      	mov	r2, r6
 8014caa:	463b      	mov	r3, r7
 8014cac:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014cb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8014cb4:	f7eb ff20 	bl	8000af8 <__aeabi_dcmpeq>
 8014cb8:	b9b0      	cbnz	r0, 8014ce8 <__ieee754_rem_pio2+0x3d8>
 8014cba:	4b0d      	ldr	r3, [pc, #52]	; (8014cf0 <__ieee754_rem_pio2+0x3e0>)
 8014cbc:	9301      	str	r3, [sp, #4]
 8014cbe:	2302      	movs	r3, #2
 8014cc0:	9300      	str	r3, [sp, #0]
 8014cc2:	462a      	mov	r2, r5
 8014cc4:	4643      	mov	r3, r8
 8014cc6:	4621      	mov	r1, r4
 8014cc8:	a806      	add	r0, sp, #24
 8014cca:	f000 f8dd 	bl	8014e88 <__kernel_rem_pio2>
 8014cce:	9b04      	ldr	r3, [sp, #16]
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	4605      	mov	r5, r0
 8014cd4:	f6bf ae58 	bge.w	8014988 <__ieee754_rem_pio2+0x78>
 8014cd8:	6863      	ldr	r3, [r4, #4]
 8014cda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014cde:	6063      	str	r3, [r4, #4]
 8014ce0:	68e3      	ldr	r3, [r4, #12]
 8014ce2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014ce6:	e746      	b.n	8014b76 <__ieee754_rem_pio2+0x266>
 8014ce8:	46d0      	mov	r8, sl
 8014cea:	e7dd      	b.n	8014ca8 <__ieee754_rem_pio2+0x398>
 8014cec:	41700000 	.word	0x41700000
 8014cf0:	0801a224 	.word	0x0801a224
 8014cf4:	00000000 	.word	0x00000000

08014cf8 <__kernel_cos>:
 8014cf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cfc:	ec59 8b10 	vmov	r8, r9, d0
 8014d00:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014d04:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014d08:	ed2d 8b02 	vpush	{d8}
 8014d0c:	eeb0 8a41 	vmov.f32	s16, s2
 8014d10:	eef0 8a61 	vmov.f32	s17, s3
 8014d14:	da07      	bge.n	8014d26 <__kernel_cos+0x2e>
 8014d16:	ee10 0a10 	vmov	r0, s0
 8014d1a:	4649      	mov	r1, r9
 8014d1c:	f7eb ff34 	bl	8000b88 <__aeabi_d2iz>
 8014d20:	2800      	cmp	r0, #0
 8014d22:	f000 8089 	beq.w	8014e38 <__kernel_cos+0x140>
 8014d26:	4642      	mov	r2, r8
 8014d28:	464b      	mov	r3, r9
 8014d2a:	4640      	mov	r0, r8
 8014d2c:	4649      	mov	r1, r9
 8014d2e:	f7eb fc7b 	bl	8000628 <__aeabi_dmul>
 8014d32:	2200      	movs	r2, #0
 8014d34:	4b4e      	ldr	r3, [pc, #312]	; (8014e70 <__kernel_cos+0x178>)
 8014d36:	4604      	mov	r4, r0
 8014d38:	460d      	mov	r5, r1
 8014d3a:	f7eb fc75 	bl	8000628 <__aeabi_dmul>
 8014d3e:	a340      	add	r3, pc, #256	; (adr r3, 8014e40 <__kernel_cos+0x148>)
 8014d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d44:	4682      	mov	sl, r0
 8014d46:	468b      	mov	fp, r1
 8014d48:	4620      	mov	r0, r4
 8014d4a:	4629      	mov	r1, r5
 8014d4c:	f7eb fc6c 	bl	8000628 <__aeabi_dmul>
 8014d50:	a33d      	add	r3, pc, #244	; (adr r3, 8014e48 <__kernel_cos+0x150>)
 8014d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d56:	f7eb fab1 	bl	80002bc <__adddf3>
 8014d5a:	4622      	mov	r2, r4
 8014d5c:	462b      	mov	r3, r5
 8014d5e:	f7eb fc63 	bl	8000628 <__aeabi_dmul>
 8014d62:	a33b      	add	r3, pc, #236	; (adr r3, 8014e50 <__kernel_cos+0x158>)
 8014d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d68:	f7eb faa6 	bl	80002b8 <__aeabi_dsub>
 8014d6c:	4622      	mov	r2, r4
 8014d6e:	462b      	mov	r3, r5
 8014d70:	f7eb fc5a 	bl	8000628 <__aeabi_dmul>
 8014d74:	a338      	add	r3, pc, #224	; (adr r3, 8014e58 <__kernel_cos+0x160>)
 8014d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d7a:	f7eb fa9f 	bl	80002bc <__adddf3>
 8014d7e:	4622      	mov	r2, r4
 8014d80:	462b      	mov	r3, r5
 8014d82:	f7eb fc51 	bl	8000628 <__aeabi_dmul>
 8014d86:	a336      	add	r3, pc, #216	; (adr r3, 8014e60 <__kernel_cos+0x168>)
 8014d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d8c:	f7eb fa94 	bl	80002b8 <__aeabi_dsub>
 8014d90:	4622      	mov	r2, r4
 8014d92:	462b      	mov	r3, r5
 8014d94:	f7eb fc48 	bl	8000628 <__aeabi_dmul>
 8014d98:	a333      	add	r3, pc, #204	; (adr r3, 8014e68 <__kernel_cos+0x170>)
 8014d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d9e:	f7eb fa8d 	bl	80002bc <__adddf3>
 8014da2:	4622      	mov	r2, r4
 8014da4:	462b      	mov	r3, r5
 8014da6:	f7eb fc3f 	bl	8000628 <__aeabi_dmul>
 8014daa:	4622      	mov	r2, r4
 8014dac:	462b      	mov	r3, r5
 8014dae:	f7eb fc3b 	bl	8000628 <__aeabi_dmul>
 8014db2:	ec53 2b18 	vmov	r2, r3, d8
 8014db6:	4604      	mov	r4, r0
 8014db8:	460d      	mov	r5, r1
 8014dba:	4640      	mov	r0, r8
 8014dbc:	4649      	mov	r1, r9
 8014dbe:	f7eb fc33 	bl	8000628 <__aeabi_dmul>
 8014dc2:	460b      	mov	r3, r1
 8014dc4:	4602      	mov	r2, r0
 8014dc6:	4629      	mov	r1, r5
 8014dc8:	4620      	mov	r0, r4
 8014dca:	f7eb fa75 	bl	80002b8 <__aeabi_dsub>
 8014dce:	4b29      	ldr	r3, [pc, #164]	; (8014e74 <__kernel_cos+0x17c>)
 8014dd0:	429e      	cmp	r6, r3
 8014dd2:	4680      	mov	r8, r0
 8014dd4:	4689      	mov	r9, r1
 8014dd6:	dc11      	bgt.n	8014dfc <__kernel_cos+0x104>
 8014dd8:	4602      	mov	r2, r0
 8014dda:	460b      	mov	r3, r1
 8014ddc:	4650      	mov	r0, sl
 8014dde:	4659      	mov	r1, fp
 8014de0:	f7eb fa6a 	bl	80002b8 <__aeabi_dsub>
 8014de4:	460b      	mov	r3, r1
 8014de6:	4924      	ldr	r1, [pc, #144]	; (8014e78 <__kernel_cos+0x180>)
 8014de8:	4602      	mov	r2, r0
 8014dea:	2000      	movs	r0, #0
 8014dec:	f7eb fa64 	bl	80002b8 <__aeabi_dsub>
 8014df0:	ecbd 8b02 	vpop	{d8}
 8014df4:	ec41 0b10 	vmov	d0, r0, r1
 8014df8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dfc:	4b1f      	ldr	r3, [pc, #124]	; (8014e7c <__kernel_cos+0x184>)
 8014dfe:	491e      	ldr	r1, [pc, #120]	; (8014e78 <__kernel_cos+0x180>)
 8014e00:	429e      	cmp	r6, r3
 8014e02:	bfcc      	ite	gt
 8014e04:	4d1e      	ldrgt	r5, [pc, #120]	; (8014e80 <__kernel_cos+0x188>)
 8014e06:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014e0a:	2400      	movs	r4, #0
 8014e0c:	4622      	mov	r2, r4
 8014e0e:	462b      	mov	r3, r5
 8014e10:	2000      	movs	r0, #0
 8014e12:	f7eb fa51 	bl	80002b8 <__aeabi_dsub>
 8014e16:	4622      	mov	r2, r4
 8014e18:	4606      	mov	r6, r0
 8014e1a:	460f      	mov	r7, r1
 8014e1c:	462b      	mov	r3, r5
 8014e1e:	4650      	mov	r0, sl
 8014e20:	4659      	mov	r1, fp
 8014e22:	f7eb fa49 	bl	80002b8 <__aeabi_dsub>
 8014e26:	4642      	mov	r2, r8
 8014e28:	464b      	mov	r3, r9
 8014e2a:	f7eb fa45 	bl	80002b8 <__aeabi_dsub>
 8014e2e:	4602      	mov	r2, r0
 8014e30:	460b      	mov	r3, r1
 8014e32:	4630      	mov	r0, r6
 8014e34:	4639      	mov	r1, r7
 8014e36:	e7d9      	b.n	8014dec <__kernel_cos+0xf4>
 8014e38:	2000      	movs	r0, #0
 8014e3a:	490f      	ldr	r1, [pc, #60]	; (8014e78 <__kernel_cos+0x180>)
 8014e3c:	e7d8      	b.n	8014df0 <__kernel_cos+0xf8>
 8014e3e:	bf00      	nop
 8014e40:	be8838d4 	.word	0xbe8838d4
 8014e44:	bda8fae9 	.word	0xbda8fae9
 8014e48:	bdb4b1c4 	.word	0xbdb4b1c4
 8014e4c:	3e21ee9e 	.word	0x3e21ee9e
 8014e50:	809c52ad 	.word	0x809c52ad
 8014e54:	3e927e4f 	.word	0x3e927e4f
 8014e58:	19cb1590 	.word	0x19cb1590
 8014e5c:	3efa01a0 	.word	0x3efa01a0
 8014e60:	16c15177 	.word	0x16c15177
 8014e64:	3f56c16c 	.word	0x3f56c16c
 8014e68:	5555554c 	.word	0x5555554c
 8014e6c:	3fa55555 	.word	0x3fa55555
 8014e70:	3fe00000 	.word	0x3fe00000
 8014e74:	3fd33332 	.word	0x3fd33332
 8014e78:	3ff00000 	.word	0x3ff00000
 8014e7c:	3fe90000 	.word	0x3fe90000
 8014e80:	3fd20000 	.word	0x3fd20000
 8014e84:	00000000 	.word	0x00000000

08014e88 <__kernel_rem_pio2>:
 8014e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e8c:	ed2d 8b02 	vpush	{d8}
 8014e90:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014e94:	1ed4      	subs	r4, r2, #3
 8014e96:	9308      	str	r3, [sp, #32]
 8014e98:	9101      	str	r1, [sp, #4]
 8014e9a:	4bc5      	ldr	r3, [pc, #788]	; (80151b0 <__kernel_rem_pio2+0x328>)
 8014e9c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014e9e:	9009      	str	r0, [sp, #36]	; 0x24
 8014ea0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014ea4:	9304      	str	r3, [sp, #16]
 8014ea6:	9b08      	ldr	r3, [sp, #32]
 8014ea8:	3b01      	subs	r3, #1
 8014eaa:	9307      	str	r3, [sp, #28]
 8014eac:	2318      	movs	r3, #24
 8014eae:	fb94 f4f3 	sdiv	r4, r4, r3
 8014eb2:	f06f 0317 	mvn.w	r3, #23
 8014eb6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014eba:	fb04 3303 	mla	r3, r4, r3, r3
 8014ebe:	eb03 0a02 	add.w	sl, r3, r2
 8014ec2:	9b04      	ldr	r3, [sp, #16]
 8014ec4:	9a07      	ldr	r2, [sp, #28]
 8014ec6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80151a0 <__kernel_rem_pio2+0x318>
 8014eca:	eb03 0802 	add.w	r8, r3, r2
 8014ece:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014ed0:	1aa7      	subs	r7, r4, r2
 8014ed2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014ed6:	ae22      	add	r6, sp, #136	; 0x88
 8014ed8:	2500      	movs	r5, #0
 8014eda:	4545      	cmp	r5, r8
 8014edc:	dd13      	ble.n	8014f06 <__kernel_rem_pio2+0x7e>
 8014ede:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80151a0 <__kernel_rem_pio2+0x318>
 8014ee2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014ee6:	2600      	movs	r6, #0
 8014ee8:	9b04      	ldr	r3, [sp, #16]
 8014eea:	429e      	cmp	r6, r3
 8014eec:	dc32      	bgt.n	8014f54 <__kernel_rem_pio2+0xcc>
 8014eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ef0:	9302      	str	r3, [sp, #8]
 8014ef2:	9b08      	ldr	r3, [sp, #32]
 8014ef4:	199d      	adds	r5, r3, r6
 8014ef6:	ab22      	add	r3, sp, #136	; 0x88
 8014ef8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014efc:	9306      	str	r3, [sp, #24]
 8014efe:	ec59 8b18 	vmov	r8, r9, d8
 8014f02:	2700      	movs	r7, #0
 8014f04:	e01f      	b.n	8014f46 <__kernel_rem_pio2+0xbe>
 8014f06:	42ef      	cmn	r7, r5
 8014f08:	d407      	bmi.n	8014f1a <__kernel_rem_pio2+0x92>
 8014f0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014f0e:	f7eb fb21 	bl	8000554 <__aeabi_i2d>
 8014f12:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014f16:	3501      	adds	r5, #1
 8014f18:	e7df      	b.n	8014eda <__kernel_rem_pio2+0x52>
 8014f1a:	ec51 0b18 	vmov	r0, r1, d8
 8014f1e:	e7f8      	b.n	8014f12 <__kernel_rem_pio2+0x8a>
 8014f20:	9906      	ldr	r1, [sp, #24]
 8014f22:	9d02      	ldr	r5, [sp, #8]
 8014f24:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014f28:	9106      	str	r1, [sp, #24]
 8014f2a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8014f2e:	9502      	str	r5, [sp, #8]
 8014f30:	f7eb fb7a 	bl	8000628 <__aeabi_dmul>
 8014f34:	4602      	mov	r2, r0
 8014f36:	460b      	mov	r3, r1
 8014f38:	4640      	mov	r0, r8
 8014f3a:	4649      	mov	r1, r9
 8014f3c:	f7eb f9be 	bl	80002bc <__adddf3>
 8014f40:	3701      	adds	r7, #1
 8014f42:	4680      	mov	r8, r0
 8014f44:	4689      	mov	r9, r1
 8014f46:	9b07      	ldr	r3, [sp, #28]
 8014f48:	429f      	cmp	r7, r3
 8014f4a:	dde9      	ble.n	8014f20 <__kernel_rem_pio2+0x98>
 8014f4c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014f50:	3601      	adds	r6, #1
 8014f52:	e7c9      	b.n	8014ee8 <__kernel_rem_pio2+0x60>
 8014f54:	9b04      	ldr	r3, [sp, #16]
 8014f56:	aa0e      	add	r2, sp, #56	; 0x38
 8014f58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014f5c:	930c      	str	r3, [sp, #48]	; 0x30
 8014f5e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014f60:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014f64:	9c04      	ldr	r4, [sp, #16]
 8014f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8014f68:	ab9a      	add	r3, sp, #616	; 0x268
 8014f6a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8014f6e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014f72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014f76:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014f7a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014f7e:	ab9a      	add	r3, sp, #616	; 0x268
 8014f80:	445b      	add	r3, fp
 8014f82:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8014f86:	2500      	movs	r5, #0
 8014f88:	1b63      	subs	r3, r4, r5
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	dc78      	bgt.n	8015080 <__kernel_rem_pio2+0x1f8>
 8014f8e:	4650      	mov	r0, sl
 8014f90:	ec49 8b10 	vmov	d0, r8, r9
 8014f94:	f000 fc00 	bl	8015798 <scalbn>
 8014f98:	ec57 6b10 	vmov	r6, r7, d0
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014fa2:	ee10 0a10 	vmov	r0, s0
 8014fa6:	4639      	mov	r1, r7
 8014fa8:	f7eb fb3e 	bl	8000628 <__aeabi_dmul>
 8014fac:	ec41 0b10 	vmov	d0, r0, r1
 8014fb0:	f000 fb6e 	bl	8015690 <floor>
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	ec51 0b10 	vmov	r0, r1, d0
 8014fba:	4b7e      	ldr	r3, [pc, #504]	; (80151b4 <__kernel_rem_pio2+0x32c>)
 8014fbc:	f7eb fb34 	bl	8000628 <__aeabi_dmul>
 8014fc0:	4602      	mov	r2, r0
 8014fc2:	460b      	mov	r3, r1
 8014fc4:	4630      	mov	r0, r6
 8014fc6:	4639      	mov	r1, r7
 8014fc8:	f7eb f976 	bl	80002b8 <__aeabi_dsub>
 8014fcc:	460f      	mov	r7, r1
 8014fce:	4606      	mov	r6, r0
 8014fd0:	f7eb fdda 	bl	8000b88 <__aeabi_d2iz>
 8014fd4:	9006      	str	r0, [sp, #24]
 8014fd6:	f7eb fabd 	bl	8000554 <__aeabi_i2d>
 8014fda:	4602      	mov	r2, r0
 8014fdc:	460b      	mov	r3, r1
 8014fde:	4630      	mov	r0, r6
 8014fe0:	4639      	mov	r1, r7
 8014fe2:	f7eb f969 	bl	80002b8 <__aeabi_dsub>
 8014fe6:	f1ba 0f00 	cmp.w	sl, #0
 8014fea:	4606      	mov	r6, r0
 8014fec:	460f      	mov	r7, r1
 8014fee:	dd6c      	ble.n	80150ca <__kernel_rem_pio2+0x242>
 8014ff0:	1e62      	subs	r2, r4, #1
 8014ff2:	ab0e      	add	r3, sp, #56	; 0x38
 8014ff4:	f1ca 0118 	rsb	r1, sl, #24
 8014ff8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014ffc:	9d06      	ldr	r5, [sp, #24]
 8014ffe:	fa40 f301 	asr.w	r3, r0, r1
 8015002:	441d      	add	r5, r3
 8015004:	408b      	lsls	r3, r1
 8015006:	1ac0      	subs	r0, r0, r3
 8015008:	ab0e      	add	r3, sp, #56	; 0x38
 801500a:	9506      	str	r5, [sp, #24]
 801500c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8015010:	f1ca 0317 	rsb	r3, sl, #23
 8015014:	fa40 f303 	asr.w	r3, r0, r3
 8015018:	9302      	str	r3, [sp, #8]
 801501a:	9b02      	ldr	r3, [sp, #8]
 801501c:	2b00      	cmp	r3, #0
 801501e:	dd62      	ble.n	80150e6 <__kernel_rem_pio2+0x25e>
 8015020:	9b06      	ldr	r3, [sp, #24]
 8015022:	2200      	movs	r2, #0
 8015024:	3301      	adds	r3, #1
 8015026:	9306      	str	r3, [sp, #24]
 8015028:	4615      	mov	r5, r2
 801502a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801502e:	4294      	cmp	r4, r2
 8015030:	f300 8095 	bgt.w	801515e <__kernel_rem_pio2+0x2d6>
 8015034:	f1ba 0f00 	cmp.w	sl, #0
 8015038:	dd07      	ble.n	801504a <__kernel_rem_pio2+0x1c2>
 801503a:	f1ba 0f01 	cmp.w	sl, #1
 801503e:	f000 80a2 	beq.w	8015186 <__kernel_rem_pio2+0x2fe>
 8015042:	f1ba 0f02 	cmp.w	sl, #2
 8015046:	f000 80c1 	beq.w	80151cc <__kernel_rem_pio2+0x344>
 801504a:	9b02      	ldr	r3, [sp, #8]
 801504c:	2b02      	cmp	r3, #2
 801504e:	d14a      	bne.n	80150e6 <__kernel_rem_pio2+0x25e>
 8015050:	4632      	mov	r2, r6
 8015052:	463b      	mov	r3, r7
 8015054:	2000      	movs	r0, #0
 8015056:	4958      	ldr	r1, [pc, #352]	; (80151b8 <__kernel_rem_pio2+0x330>)
 8015058:	f7eb f92e 	bl	80002b8 <__aeabi_dsub>
 801505c:	4606      	mov	r6, r0
 801505e:	460f      	mov	r7, r1
 8015060:	2d00      	cmp	r5, #0
 8015062:	d040      	beq.n	80150e6 <__kernel_rem_pio2+0x25e>
 8015064:	4650      	mov	r0, sl
 8015066:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80151a8 <__kernel_rem_pio2+0x320>
 801506a:	f000 fb95 	bl	8015798 <scalbn>
 801506e:	4630      	mov	r0, r6
 8015070:	4639      	mov	r1, r7
 8015072:	ec53 2b10 	vmov	r2, r3, d0
 8015076:	f7eb f91f 	bl	80002b8 <__aeabi_dsub>
 801507a:	4606      	mov	r6, r0
 801507c:	460f      	mov	r7, r1
 801507e:	e032      	b.n	80150e6 <__kernel_rem_pio2+0x25e>
 8015080:	2200      	movs	r2, #0
 8015082:	4b4e      	ldr	r3, [pc, #312]	; (80151bc <__kernel_rem_pio2+0x334>)
 8015084:	4640      	mov	r0, r8
 8015086:	4649      	mov	r1, r9
 8015088:	f7eb face 	bl	8000628 <__aeabi_dmul>
 801508c:	f7eb fd7c 	bl	8000b88 <__aeabi_d2iz>
 8015090:	f7eb fa60 	bl	8000554 <__aeabi_i2d>
 8015094:	2200      	movs	r2, #0
 8015096:	4b4a      	ldr	r3, [pc, #296]	; (80151c0 <__kernel_rem_pio2+0x338>)
 8015098:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801509c:	f7eb fac4 	bl	8000628 <__aeabi_dmul>
 80150a0:	4602      	mov	r2, r0
 80150a2:	460b      	mov	r3, r1
 80150a4:	4640      	mov	r0, r8
 80150a6:	4649      	mov	r1, r9
 80150a8:	f7eb f906 	bl	80002b8 <__aeabi_dsub>
 80150ac:	f7eb fd6c 	bl	8000b88 <__aeabi_d2iz>
 80150b0:	ab0e      	add	r3, sp, #56	; 0x38
 80150b2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80150b6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80150ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150be:	f7eb f8fd 	bl	80002bc <__adddf3>
 80150c2:	3501      	adds	r5, #1
 80150c4:	4680      	mov	r8, r0
 80150c6:	4689      	mov	r9, r1
 80150c8:	e75e      	b.n	8014f88 <__kernel_rem_pio2+0x100>
 80150ca:	d105      	bne.n	80150d8 <__kernel_rem_pio2+0x250>
 80150cc:	1e63      	subs	r3, r4, #1
 80150ce:	aa0e      	add	r2, sp, #56	; 0x38
 80150d0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80150d4:	15c3      	asrs	r3, r0, #23
 80150d6:	e79f      	b.n	8015018 <__kernel_rem_pio2+0x190>
 80150d8:	2200      	movs	r2, #0
 80150da:	4b3a      	ldr	r3, [pc, #232]	; (80151c4 <__kernel_rem_pio2+0x33c>)
 80150dc:	f7eb fd2a 	bl	8000b34 <__aeabi_dcmpge>
 80150e0:	2800      	cmp	r0, #0
 80150e2:	d139      	bne.n	8015158 <__kernel_rem_pio2+0x2d0>
 80150e4:	9002      	str	r0, [sp, #8]
 80150e6:	2200      	movs	r2, #0
 80150e8:	2300      	movs	r3, #0
 80150ea:	4630      	mov	r0, r6
 80150ec:	4639      	mov	r1, r7
 80150ee:	f7eb fd03 	bl	8000af8 <__aeabi_dcmpeq>
 80150f2:	2800      	cmp	r0, #0
 80150f4:	f000 80c7 	beq.w	8015286 <__kernel_rem_pio2+0x3fe>
 80150f8:	1e65      	subs	r5, r4, #1
 80150fa:	462b      	mov	r3, r5
 80150fc:	2200      	movs	r2, #0
 80150fe:	9904      	ldr	r1, [sp, #16]
 8015100:	428b      	cmp	r3, r1
 8015102:	da6a      	bge.n	80151da <__kernel_rem_pio2+0x352>
 8015104:	2a00      	cmp	r2, #0
 8015106:	f000 8088 	beq.w	801521a <__kernel_rem_pio2+0x392>
 801510a:	ab0e      	add	r3, sp, #56	; 0x38
 801510c:	f1aa 0a18 	sub.w	sl, sl, #24
 8015110:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8015114:	2b00      	cmp	r3, #0
 8015116:	f000 80b4 	beq.w	8015282 <__kernel_rem_pio2+0x3fa>
 801511a:	4650      	mov	r0, sl
 801511c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80151a8 <__kernel_rem_pio2+0x320>
 8015120:	f000 fb3a 	bl	8015798 <scalbn>
 8015124:	00ec      	lsls	r4, r5, #3
 8015126:	ab72      	add	r3, sp, #456	; 0x1c8
 8015128:	191e      	adds	r6, r3, r4
 801512a:	ec59 8b10 	vmov	r8, r9, d0
 801512e:	f106 0a08 	add.w	sl, r6, #8
 8015132:	462f      	mov	r7, r5
 8015134:	2f00      	cmp	r7, #0
 8015136:	f280 80df 	bge.w	80152f8 <__kernel_rem_pio2+0x470>
 801513a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80151a0 <__kernel_rem_pio2+0x318>
 801513e:	f04f 0a00 	mov.w	sl, #0
 8015142:	eba5 030a 	sub.w	r3, r5, sl
 8015146:	2b00      	cmp	r3, #0
 8015148:	f2c0 810a 	blt.w	8015360 <__kernel_rem_pio2+0x4d8>
 801514c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80151c8 <__kernel_rem_pio2+0x340>
 8015150:	ec59 8b18 	vmov	r8, r9, d8
 8015154:	2700      	movs	r7, #0
 8015156:	e0f5      	b.n	8015344 <__kernel_rem_pio2+0x4bc>
 8015158:	2302      	movs	r3, #2
 801515a:	9302      	str	r3, [sp, #8]
 801515c:	e760      	b.n	8015020 <__kernel_rem_pio2+0x198>
 801515e:	ab0e      	add	r3, sp, #56	; 0x38
 8015160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015164:	b94d      	cbnz	r5, 801517a <__kernel_rem_pio2+0x2f2>
 8015166:	b12b      	cbz	r3, 8015174 <__kernel_rem_pio2+0x2ec>
 8015168:	a80e      	add	r0, sp, #56	; 0x38
 801516a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801516e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8015172:	2301      	movs	r3, #1
 8015174:	3201      	adds	r2, #1
 8015176:	461d      	mov	r5, r3
 8015178:	e759      	b.n	801502e <__kernel_rem_pio2+0x1a6>
 801517a:	a80e      	add	r0, sp, #56	; 0x38
 801517c:	1acb      	subs	r3, r1, r3
 801517e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8015182:	462b      	mov	r3, r5
 8015184:	e7f6      	b.n	8015174 <__kernel_rem_pio2+0x2ec>
 8015186:	1e62      	subs	r2, r4, #1
 8015188:	ab0e      	add	r3, sp, #56	; 0x38
 801518a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801518e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015192:	a90e      	add	r1, sp, #56	; 0x38
 8015194:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015198:	e757      	b.n	801504a <__kernel_rem_pio2+0x1c2>
 801519a:	bf00      	nop
 801519c:	f3af 8000 	nop.w
	...
 80151ac:	3ff00000 	.word	0x3ff00000
 80151b0:	0801a370 	.word	0x0801a370
 80151b4:	40200000 	.word	0x40200000
 80151b8:	3ff00000 	.word	0x3ff00000
 80151bc:	3e700000 	.word	0x3e700000
 80151c0:	41700000 	.word	0x41700000
 80151c4:	3fe00000 	.word	0x3fe00000
 80151c8:	0801a330 	.word	0x0801a330
 80151cc:	1e62      	subs	r2, r4, #1
 80151ce:	ab0e      	add	r3, sp, #56	; 0x38
 80151d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80151d8:	e7db      	b.n	8015192 <__kernel_rem_pio2+0x30a>
 80151da:	a90e      	add	r1, sp, #56	; 0x38
 80151dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80151e0:	3b01      	subs	r3, #1
 80151e2:	430a      	orrs	r2, r1
 80151e4:	e78b      	b.n	80150fe <__kernel_rem_pio2+0x276>
 80151e6:	3301      	adds	r3, #1
 80151e8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80151ec:	2900      	cmp	r1, #0
 80151ee:	d0fa      	beq.n	80151e6 <__kernel_rem_pio2+0x35e>
 80151f0:	9a08      	ldr	r2, [sp, #32]
 80151f2:	4422      	add	r2, r4
 80151f4:	00d2      	lsls	r2, r2, #3
 80151f6:	a922      	add	r1, sp, #136	; 0x88
 80151f8:	18e3      	adds	r3, r4, r3
 80151fa:	9206      	str	r2, [sp, #24]
 80151fc:	440a      	add	r2, r1
 80151fe:	9302      	str	r3, [sp, #8]
 8015200:	f10b 0108 	add.w	r1, fp, #8
 8015204:	f102 0308 	add.w	r3, r2, #8
 8015208:	1c66      	adds	r6, r4, #1
 801520a:	910a      	str	r1, [sp, #40]	; 0x28
 801520c:	2500      	movs	r5, #0
 801520e:	930d      	str	r3, [sp, #52]	; 0x34
 8015210:	9b02      	ldr	r3, [sp, #8]
 8015212:	42b3      	cmp	r3, r6
 8015214:	da04      	bge.n	8015220 <__kernel_rem_pio2+0x398>
 8015216:	461c      	mov	r4, r3
 8015218:	e6a6      	b.n	8014f68 <__kernel_rem_pio2+0xe0>
 801521a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801521c:	2301      	movs	r3, #1
 801521e:	e7e3      	b.n	80151e8 <__kernel_rem_pio2+0x360>
 8015220:	9b06      	ldr	r3, [sp, #24]
 8015222:	18ef      	adds	r7, r5, r3
 8015224:	ab22      	add	r3, sp, #136	; 0x88
 8015226:	441f      	add	r7, r3
 8015228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801522a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801522e:	f7eb f991 	bl	8000554 <__aeabi_i2d>
 8015232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015234:	461c      	mov	r4, r3
 8015236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015238:	e9c7 0100 	strd	r0, r1, [r7]
 801523c:	eb03 0b05 	add.w	fp, r3, r5
 8015240:	2700      	movs	r7, #0
 8015242:	f04f 0800 	mov.w	r8, #0
 8015246:	f04f 0900 	mov.w	r9, #0
 801524a:	9b07      	ldr	r3, [sp, #28]
 801524c:	429f      	cmp	r7, r3
 801524e:	dd08      	ble.n	8015262 <__kernel_rem_pio2+0x3da>
 8015250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015252:	aa72      	add	r2, sp, #456	; 0x1c8
 8015254:	18eb      	adds	r3, r5, r3
 8015256:	4413      	add	r3, r2
 8015258:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801525c:	3601      	adds	r6, #1
 801525e:	3508      	adds	r5, #8
 8015260:	e7d6      	b.n	8015210 <__kernel_rem_pio2+0x388>
 8015262:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8015266:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801526a:	f7eb f9dd 	bl	8000628 <__aeabi_dmul>
 801526e:	4602      	mov	r2, r0
 8015270:	460b      	mov	r3, r1
 8015272:	4640      	mov	r0, r8
 8015274:	4649      	mov	r1, r9
 8015276:	f7eb f821 	bl	80002bc <__adddf3>
 801527a:	3701      	adds	r7, #1
 801527c:	4680      	mov	r8, r0
 801527e:	4689      	mov	r9, r1
 8015280:	e7e3      	b.n	801524a <__kernel_rem_pio2+0x3c2>
 8015282:	3d01      	subs	r5, #1
 8015284:	e741      	b.n	801510a <__kernel_rem_pio2+0x282>
 8015286:	f1ca 0000 	rsb	r0, sl, #0
 801528a:	ec47 6b10 	vmov	d0, r6, r7
 801528e:	f000 fa83 	bl	8015798 <scalbn>
 8015292:	ec57 6b10 	vmov	r6, r7, d0
 8015296:	2200      	movs	r2, #0
 8015298:	4b99      	ldr	r3, [pc, #612]	; (8015500 <__kernel_rem_pio2+0x678>)
 801529a:	ee10 0a10 	vmov	r0, s0
 801529e:	4639      	mov	r1, r7
 80152a0:	f7eb fc48 	bl	8000b34 <__aeabi_dcmpge>
 80152a4:	b1f8      	cbz	r0, 80152e6 <__kernel_rem_pio2+0x45e>
 80152a6:	2200      	movs	r2, #0
 80152a8:	4b96      	ldr	r3, [pc, #600]	; (8015504 <__kernel_rem_pio2+0x67c>)
 80152aa:	4630      	mov	r0, r6
 80152ac:	4639      	mov	r1, r7
 80152ae:	f7eb f9bb 	bl	8000628 <__aeabi_dmul>
 80152b2:	f7eb fc69 	bl	8000b88 <__aeabi_d2iz>
 80152b6:	4680      	mov	r8, r0
 80152b8:	f7eb f94c 	bl	8000554 <__aeabi_i2d>
 80152bc:	2200      	movs	r2, #0
 80152be:	4b90      	ldr	r3, [pc, #576]	; (8015500 <__kernel_rem_pio2+0x678>)
 80152c0:	f7eb f9b2 	bl	8000628 <__aeabi_dmul>
 80152c4:	460b      	mov	r3, r1
 80152c6:	4602      	mov	r2, r0
 80152c8:	4639      	mov	r1, r7
 80152ca:	4630      	mov	r0, r6
 80152cc:	f7ea fff4 	bl	80002b8 <__aeabi_dsub>
 80152d0:	f7eb fc5a 	bl	8000b88 <__aeabi_d2iz>
 80152d4:	1c65      	adds	r5, r4, #1
 80152d6:	ab0e      	add	r3, sp, #56	; 0x38
 80152d8:	f10a 0a18 	add.w	sl, sl, #24
 80152dc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80152e0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80152e4:	e719      	b.n	801511a <__kernel_rem_pio2+0x292>
 80152e6:	4630      	mov	r0, r6
 80152e8:	4639      	mov	r1, r7
 80152ea:	f7eb fc4d 	bl	8000b88 <__aeabi_d2iz>
 80152ee:	ab0e      	add	r3, sp, #56	; 0x38
 80152f0:	4625      	mov	r5, r4
 80152f2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80152f6:	e710      	b.n	801511a <__kernel_rem_pio2+0x292>
 80152f8:	ab0e      	add	r3, sp, #56	; 0x38
 80152fa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80152fe:	f7eb f929 	bl	8000554 <__aeabi_i2d>
 8015302:	4642      	mov	r2, r8
 8015304:	464b      	mov	r3, r9
 8015306:	f7eb f98f 	bl	8000628 <__aeabi_dmul>
 801530a:	2200      	movs	r2, #0
 801530c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8015310:	4b7c      	ldr	r3, [pc, #496]	; (8015504 <__kernel_rem_pio2+0x67c>)
 8015312:	4640      	mov	r0, r8
 8015314:	4649      	mov	r1, r9
 8015316:	f7eb f987 	bl	8000628 <__aeabi_dmul>
 801531a:	3f01      	subs	r7, #1
 801531c:	4680      	mov	r8, r0
 801531e:	4689      	mov	r9, r1
 8015320:	e708      	b.n	8015134 <__kernel_rem_pio2+0x2ac>
 8015322:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8015326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801532a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801532e:	f7eb f97b 	bl	8000628 <__aeabi_dmul>
 8015332:	4602      	mov	r2, r0
 8015334:	460b      	mov	r3, r1
 8015336:	4640      	mov	r0, r8
 8015338:	4649      	mov	r1, r9
 801533a:	f7ea ffbf 	bl	80002bc <__adddf3>
 801533e:	3701      	adds	r7, #1
 8015340:	4680      	mov	r8, r0
 8015342:	4689      	mov	r9, r1
 8015344:	9b04      	ldr	r3, [sp, #16]
 8015346:	429f      	cmp	r7, r3
 8015348:	dc01      	bgt.n	801534e <__kernel_rem_pio2+0x4c6>
 801534a:	45ba      	cmp	sl, r7
 801534c:	dae9      	bge.n	8015322 <__kernel_rem_pio2+0x49a>
 801534e:	ab4a      	add	r3, sp, #296	; 0x128
 8015350:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015354:	e9c3 8900 	strd	r8, r9, [r3]
 8015358:	f10a 0a01 	add.w	sl, sl, #1
 801535c:	3e08      	subs	r6, #8
 801535e:	e6f0      	b.n	8015142 <__kernel_rem_pio2+0x2ba>
 8015360:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8015362:	2b03      	cmp	r3, #3
 8015364:	d85b      	bhi.n	801541e <__kernel_rem_pio2+0x596>
 8015366:	e8df f003 	tbb	[pc, r3]
 801536a:	264a      	.short	0x264a
 801536c:	0226      	.short	0x0226
 801536e:	ab9a      	add	r3, sp, #616	; 0x268
 8015370:	441c      	add	r4, r3
 8015372:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8015376:	46a2      	mov	sl, r4
 8015378:	46ab      	mov	fp, r5
 801537a:	f1bb 0f00 	cmp.w	fp, #0
 801537e:	dc6c      	bgt.n	801545a <__kernel_rem_pio2+0x5d2>
 8015380:	46a2      	mov	sl, r4
 8015382:	46ab      	mov	fp, r5
 8015384:	f1bb 0f01 	cmp.w	fp, #1
 8015388:	f300 8086 	bgt.w	8015498 <__kernel_rem_pio2+0x610>
 801538c:	2000      	movs	r0, #0
 801538e:	2100      	movs	r1, #0
 8015390:	2d01      	cmp	r5, #1
 8015392:	f300 80a0 	bgt.w	80154d6 <__kernel_rem_pio2+0x64e>
 8015396:	9b02      	ldr	r3, [sp, #8]
 8015398:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801539c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	f040 809e 	bne.w	80154e2 <__kernel_rem_pio2+0x65a>
 80153a6:	9b01      	ldr	r3, [sp, #4]
 80153a8:	e9c3 7800 	strd	r7, r8, [r3]
 80153ac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80153b0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80153b4:	e033      	b.n	801541e <__kernel_rem_pio2+0x596>
 80153b6:	3408      	adds	r4, #8
 80153b8:	ab4a      	add	r3, sp, #296	; 0x128
 80153ba:	441c      	add	r4, r3
 80153bc:	462e      	mov	r6, r5
 80153be:	2000      	movs	r0, #0
 80153c0:	2100      	movs	r1, #0
 80153c2:	2e00      	cmp	r6, #0
 80153c4:	da3a      	bge.n	801543c <__kernel_rem_pio2+0x5b4>
 80153c6:	9b02      	ldr	r3, [sp, #8]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d03d      	beq.n	8015448 <__kernel_rem_pio2+0x5c0>
 80153cc:	4602      	mov	r2, r0
 80153ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80153d2:	9c01      	ldr	r4, [sp, #4]
 80153d4:	e9c4 2300 	strd	r2, r3, [r4]
 80153d8:	4602      	mov	r2, r0
 80153da:	460b      	mov	r3, r1
 80153dc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80153e0:	f7ea ff6a 	bl	80002b8 <__aeabi_dsub>
 80153e4:	ae4c      	add	r6, sp, #304	; 0x130
 80153e6:	2401      	movs	r4, #1
 80153e8:	42a5      	cmp	r5, r4
 80153ea:	da30      	bge.n	801544e <__kernel_rem_pio2+0x5c6>
 80153ec:	9b02      	ldr	r3, [sp, #8]
 80153ee:	b113      	cbz	r3, 80153f6 <__kernel_rem_pio2+0x56e>
 80153f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80153f4:	4619      	mov	r1, r3
 80153f6:	9b01      	ldr	r3, [sp, #4]
 80153f8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80153fc:	e00f      	b.n	801541e <__kernel_rem_pio2+0x596>
 80153fe:	ab9a      	add	r3, sp, #616	; 0x268
 8015400:	441c      	add	r4, r3
 8015402:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8015406:	2000      	movs	r0, #0
 8015408:	2100      	movs	r1, #0
 801540a:	2d00      	cmp	r5, #0
 801540c:	da10      	bge.n	8015430 <__kernel_rem_pio2+0x5a8>
 801540e:	9b02      	ldr	r3, [sp, #8]
 8015410:	b113      	cbz	r3, 8015418 <__kernel_rem_pio2+0x590>
 8015412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015416:	4619      	mov	r1, r3
 8015418:	9b01      	ldr	r3, [sp, #4]
 801541a:	e9c3 0100 	strd	r0, r1, [r3]
 801541e:	9b06      	ldr	r3, [sp, #24]
 8015420:	f003 0007 	and.w	r0, r3, #7
 8015424:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8015428:	ecbd 8b02 	vpop	{d8}
 801542c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015430:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015434:	f7ea ff42 	bl	80002bc <__adddf3>
 8015438:	3d01      	subs	r5, #1
 801543a:	e7e6      	b.n	801540a <__kernel_rem_pio2+0x582>
 801543c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015440:	f7ea ff3c 	bl	80002bc <__adddf3>
 8015444:	3e01      	subs	r6, #1
 8015446:	e7bc      	b.n	80153c2 <__kernel_rem_pio2+0x53a>
 8015448:	4602      	mov	r2, r0
 801544a:	460b      	mov	r3, r1
 801544c:	e7c1      	b.n	80153d2 <__kernel_rem_pio2+0x54a>
 801544e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8015452:	f7ea ff33 	bl	80002bc <__adddf3>
 8015456:	3401      	adds	r4, #1
 8015458:	e7c6      	b.n	80153e8 <__kernel_rem_pio2+0x560>
 801545a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801545e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015462:	4640      	mov	r0, r8
 8015464:	ec53 2b17 	vmov	r2, r3, d7
 8015468:	4649      	mov	r1, r9
 801546a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801546e:	f7ea ff25 	bl	80002bc <__adddf3>
 8015472:	4602      	mov	r2, r0
 8015474:	460b      	mov	r3, r1
 8015476:	4606      	mov	r6, r0
 8015478:	460f      	mov	r7, r1
 801547a:	4640      	mov	r0, r8
 801547c:	4649      	mov	r1, r9
 801547e:	f7ea ff1b 	bl	80002b8 <__aeabi_dsub>
 8015482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015486:	f7ea ff19 	bl	80002bc <__adddf3>
 801548a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801548e:	e9ca 0100 	strd	r0, r1, [sl]
 8015492:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8015496:	e770      	b.n	801537a <__kernel_rem_pio2+0x4f2>
 8015498:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801549c:	ed3a 7b02 	vldmdb	sl!, {d7}
 80154a0:	4630      	mov	r0, r6
 80154a2:	ec53 2b17 	vmov	r2, r3, d7
 80154a6:	4639      	mov	r1, r7
 80154a8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80154ac:	f7ea ff06 	bl	80002bc <__adddf3>
 80154b0:	4602      	mov	r2, r0
 80154b2:	460b      	mov	r3, r1
 80154b4:	4680      	mov	r8, r0
 80154b6:	4689      	mov	r9, r1
 80154b8:	4630      	mov	r0, r6
 80154ba:	4639      	mov	r1, r7
 80154bc:	f7ea fefc 	bl	80002b8 <__aeabi_dsub>
 80154c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80154c4:	f7ea fefa 	bl	80002bc <__adddf3>
 80154c8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80154cc:	e9ca 0100 	strd	r0, r1, [sl]
 80154d0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80154d4:	e756      	b.n	8015384 <__kernel_rem_pio2+0x4fc>
 80154d6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80154da:	f7ea feef 	bl	80002bc <__adddf3>
 80154de:	3d01      	subs	r5, #1
 80154e0:	e756      	b.n	8015390 <__kernel_rem_pio2+0x508>
 80154e2:	9b01      	ldr	r3, [sp, #4]
 80154e4:	9a01      	ldr	r2, [sp, #4]
 80154e6:	601f      	str	r7, [r3, #0]
 80154e8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80154ec:	605c      	str	r4, [r3, #4]
 80154ee:	609d      	str	r5, [r3, #8]
 80154f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80154f4:	60d3      	str	r3, [r2, #12]
 80154f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80154fa:	6110      	str	r0, [r2, #16]
 80154fc:	6153      	str	r3, [r2, #20]
 80154fe:	e78e      	b.n	801541e <__kernel_rem_pio2+0x596>
 8015500:	41700000 	.word	0x41700000
 8015504:	3e700000 	.word	0x3e700000

08015508 <__kernel_sin>:
 8015508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801550c:	ec55 4b10 	vmov	r4, r5, d0
 8015510:	b085      	sub	sp, #20
 8015512:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015516:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801551a:	ed8d 1b00 	vstr	d1, [sp]
 801551e:	9002      	str	r0, [sp, #8]
 8015520:	da06      	bge.n	8015530 <__kernel_sin+0x28>
 8015522:	ee10 0a10 	vmov	r0, s0
 8015526:	4629      	mov	r1, r5
 8015528:	f7eb fb2e 	bl	8000b88 <__aeabi_d2iz>
 801552c:	2800      	cmp	r0, #0
 801552e:	d051      	beq.n	80155d4 <__kernel_sin+0xcc>
 8015530:	4622      	mov	r2, r4
 8015532:	462b      	mov	r3, r5
 8015534:	4620      	mov	r0, r4
 8015536:	4629      	mov	r1, r5
 8015538:	f7eb f876 	bl	8000628 <__aeabi_dmul>
 801553c:	4682      	mov	sl, r0
 801553e:	468b      	mov	fp, r1
 8015540:	4602      	mov	r2, r0
 8015542:	460b      	mov	r3, r1
 8015544:	4620      	mov	r0, r4
 8015546:	4629      	mov	r1, r5
 8015548:	f7eb f86e 	bl	8000628 <__aeabi_dmul>
 801554c:	a341      	add	r3, pc, #260	; (adr r3, 8015654 <__kernel_sin+0x14c>)
 801554e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015552:	4680      	mov	r8, r0
 8015554:	4689      	mov	r9, r1
 8015556:	4650      	mov	r0, sl
 8015558:	4659      	mov	r1, fp
 801555a:	f7eb f865 	bl	8000628 <__aeabi_dmul>
 801555e:	a33f      	add	r3, pc, #252	; (adr r3, 801565c <__kernel_sin+0x154>)
 8015560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015564:	f7ea fea8 	bl	80002b8 <__aeabi_dsub>
 8015568:	4652      	mov	r2, sl
 801556a:	465b      	mov	r3, fp
 801556c:	f7eb f85c 	bl	8000628 <__aeabi_dmul>
 8015570:	a33c      	add	r3, pc, #240	; (adr r3, 8015664 <__kernel_sin+0x15c>)
 8015572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015576:	f7ea fea1 	bl	80002bc <__adddf3>
 801557a:	4652      	mov	r2, sl
 801557c:	465b      	mov	r3, fp
 801557e:	f7eb f853 	bl	8000628 <__aeabi_dmul>
 8015582:	a33a      	add	r3, pc, #232	; (adr r3, 801566c <__kernel_sin+0x164>)
 8015584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015588:	f7ea fe96 	bl	80002b8 <__aeabi_dsub>
 801558c:	4652      	mov	r2, sl
 801558e:	465b      	mov	r3, fp
 8015590:	f7eb f84a 	bl	8000628 <__aeabi_dmul>
 8015594:	a337      	add	r3, pc, #220	; (adr r3, 8015674 <__kernel_sin+0x16c>)
 8015596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801559a:	f7ea fe8f 	bl	80002bc <__adddf3>
 801559e:	9b02      	ldr	r3, [sp, #8]
 80155a0:	4606      	mov	r6, r0
 80155a2:	460f      	mov	r7, r1
 80155a4:	b9db      	cbnz	r3, 80155de <__kernel_sin+0xd6>
 80155a6:	4602      	mov	r2, r0
 80155a8:	460b      	mov	r3, r1
 80155aa:	4650      	mov	r0, sl
 80155ac:	4659      	mov	r1, fp
 80155ae:	f7eb f83b 	bl	8000628 <__aeabi_dmul>
 80155b2:	a325      	add	r3, pc, #148	; (adr r3, 8015648 <__kernel_sin+0x140>)
 80155b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155b8:	f7ea fe7e 	bl	80002b8 <__aeabi_dsub>
 80155bc:	4642      	mov	r2, r8
 80155be:	464b      	mov	r3, r9
 80155c0:	f7eb f832 	bl	8000628 <__aeabi_dmul>
 80155c4:	4602      	mov	r2, r0
 80155c6:	460b      	mov	r3, r1
 80155c8:	4620      	mov	r0, r4
 80155ca:	4629      	mov	r1, r5
 80155cc:	f7ea fe76 	bl	80002bc <__adddf3>
 80155d0:	4604      	mov	r4, r0
 80155d2:	460d      	mov	r5, r1
 80155d4:	ec45 4b10 	vmov	d0, r4, r5
 80155d8:	b005      	add	sp, #20
 80155da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155de:	2200      	movs	r2, #0
 80155e0:	4b1b      	ldr	r3, [pc, #108]	; (8015650 <__kernel_sin+0x148>)
 80155e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155e6:	f7eb f81f 	bl	8000628 <__aeabi_dmul>
 80155ea:	4632      	mov	r2, r6
 80155ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80155f0:	463b      	mov	r3, r7
 80155f2:	4640      	mov	r0, r8
 80155f4:	4649      	mov	r1, r9
 80155f6:	f7eb f817 	bl	8000628 <__aeabi_dmul>
 80155fa:	4602      	mov	r2, r0
 80155fc:	460b      	mov	r3, r1
 80155fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015602:	f7ea fe59 	bl	80002b8 <__aeabi_dsub>
 8015606:	4652      	mov	r2, sl
 8015608:	465b      	mov	r3, fp
 801560a:	f7eb f80d 	bl	8000628 <__aeabi_dmul>
 801560e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015612:	f7ea fe51 	bl	80002b8 <__aeabi_dsub>
 8015616:	a30c      	add	r3, pc, #48	; (adr r3, 8015648 <__kernel_sin+0x140>)
 8015618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801561c:	4606      	mov	r6, r0
 801561e:	460f      	mov	r7, r1
 8015620:	4640      	mov	r0, r8
 8015622:	4649      	mov	r1, r9
 8015624:	f7eb f800 	bl	8000628 <__aeabi_dmul>
 8015628:	4602      	mov	r2, r0
 801562a:	460b      	mov	r3, r1
 801562c:	4630      	mov	r0, r6
 801562e:	4639      	mov	r1, r7
 8015630:	f7ea fe44 	bl	80002bc <__adddf3>
 8015634:	4602      	mov	r2, r0
 8015636:	460b      	mov	r3, r1
 8015638:	4620      	mov	r0, r4
 801563a:	4629      	mov	r1, r5
 801563c:	f7ea fe3c 	bl	80002b8 <__aeabi_dsub>
 8015640:	e7c6      	b.n	80155d0 <__kernel_sin+0xc8>
 8015642:	bf00      	nop
 8015644:	f3af 8000 	nop.w
 8015648:	55555549 	.word	0x55555549
 801564c:	3fc55555 	.word	0x3fc55555
 8015650:	3fe00000 	.word	0x3fe00000
 8015654:	5acfd57c 	.word	0x5acfd57c
 8015658:	3de5d93a 	.word	0x3de5d93a
 801565c:	8a2b9ceb 	.word	0x8a2b9ceb
 8015660:	3e5ae5e6 	.word	0x3e5ae5e6
 8015664:	57b1fe7d 	.word	0x57b1fe7d
 8015668:	3ec71de3 	.word	0x3ec71de3
 801566c:	19c161d5 	.word	0x19c161d5
 8015670:	3f2a01a0 	.word	0x3f2a01a0
 8015674:	1110f8a6 	.word	0x1110f8a6
 8015678:	3f811111 	.word	0x3f811111

0801567c <fabs>:
 801567c:	ec51 0b10 	vmov	r0, r1, d0
 8015680:	ee10 2a10 	vmov	r2, s0
 8015684:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015688:	ec43 2b10 	vmov	d0, r2, r3
 801568c:	4770      	bx	lr
	...

08015690 <floor>:
 8015690:	ec51 0b10 	vmov	r0, r1, d0
 8015694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015698:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801569c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80156a0:	2e13      	cmp	r6, #19
 80156a2:	460c      	mov	r4, r1
 80156a4:	ee10 5a10 	vmov	r5, s0
 80156a8:	4680      	mov	r8, r0
 80156aa:	dc34      	bgt.n	8015716 <floor+0x86>
 80156ac:	2e00      	cmp	r6, #0
 80156ae:	da16      	bge.n	80156de <floor+0x4e>
 80156b0:	a335      	add	r3, pc, #212	; (adr r3, 8015788 <floor+0xf8>)
 80156b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156b6:	f7ea fe01 	bl	80002bc <__adddf3>
 80156ba:	2200      	movs	r2, #0
 80156bc:	2300      	movs	r3, #0
 80156be:	f7eb fa43 	bl	8000b48 <__aeabi_dcmpgt>
 80156c2:	b148      	cbz	r0, 80156d8 <floor+0x48>
 80156c4:	2c00      	cmp	r4, #0
 80156c6:	da59      	bge.n	801577c <floor+0xec>
 80156c8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80156cc:	4a30      	ldr	r2, [pc, #192]	; (8015790 <floor+0x100>)
 80156ce:	432b      	orrs	r3, r5
 80156d0:	2500      	movs	r5, #0
 80156d2:	42ab      	cmp	r3, r5
 80156d4:	bf18      	it	ne
 80156d6:	4614      	movne	r4, r2
 80156d8:	4621      	mov	r1, r4
 80156da:	4628      	mov	r0, r5
 80156dc:	e025      	b.n	801572a <floor+0x9a>
 80156de:	4f2d      	ldr	r7, [pc, #180]	; (8015794 <floor+0x104>)
 80156e0:	4137      	asrs	r7, r6
 80156e2:	ea01 0307 	and.w	r3, r1, r7
 80156e6:	4303      	orrs	r3, r0
 80156e8:	d01f      	beq.n	801572a <floor+0x9a>
 80156ea:	a327      	add	r3, pc, #156	; (adr r3, 8015788 <floor+0xf8>)
 80156ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156f0:	f7ea fde4 	bl	80002bc <__adddf3>
 80156f4:	2200      	movs	r2, #0
 80156f6:	2300      	movs	r3, #0
 80156f8:	f7eb fa26 	bl	8000b48 <__aeabi_dcmpgt>
 80156fc:	2800      	cmp	r0, #0
 80156fe:	d0eb      	beq.n	80156d8 <floor+0x48>
 8015700:	2c00      	cmp	r4, #0
 8015702:	bfbe      	ittt	lt
 8015704:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015708:	fa43 f606 	asrlt.w	r6, r3, r6
 801570c:	19a4      	addlt	r4, r4, r6
 801570e:	ea24 0407 	bic.w	r4, r4, r7
 8015712:	2500      	movs	r5, #0
 8015714:	e7e0      	b.n	80156d8 <floor+0x48>
 8015716:	2e33      	cmp	r6, #51	; 0x33
 8015718:	dd0b      	ble.n	8015732 <floor+0xa2>
 801571a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801571e:	d104      	bne.n	801572a <floor+0x9a>
 8015720:	ee10 2a10 	vmov	r2, s0
 8015724:	460b      	mov	r3, r1
 8015726:	f7ea fdc9 	bl	80002bc <__adddf3>
 801572a:	ec41 0b10 	vmov	d0, r0, r1
 801572e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015732:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8015736:	f04f 33ff 	mov.w	r3, #4294967295
 801573a:	fa23 f707 	lsr.w	r7, r3, r7
 801573e:	4207      	tst	r7, r0
 8015740:	d0f3      	beq.n	801572a <floor+0x9a>
 8015742:	a311      	add	r3, pc, #68	; (adr r3, 8015788 <floor+0xf8>)
 8015744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015748:	f7ea fdb8 	bl	80002bc <__adddf3>
 801574c:	2200      	movs	r2, #0
 801574e:	2300      	movs	r3, #0
 8015750:	f7eb f9fa 	bl	8000b48 <__aeabi_dcmpgt>
 8015754:	2800      	cmp	r0, #0
 8015756:	d0bf      	beq.n	80156d8 <floor+0x48>
 8015758:	2c00      	cmp	r4, #0
 801575a:	da02      	bge.n	8015762 <floor+0xd2>
 801575c:	2e14      	cmp	r6, #20
 801575e:	d103      	bne.n	8015768 <floor+0xd8>
 8015760:	3401      	adds	r4, #1
 8015762:	ea25 0507 	bic.w	r5, r5, r7
 8015766:	e7b7      	b.n	80156d8 <floor+0x48>
 8015768:	2301      	movs	r3, #1
 801576a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801576e:	fa03 f606 	lsl.w	r6, r3, r6
 8015772:	4435      	add	r5, r6
 8015774:	4545      	cmp	r5, r8
 8015776:	bf38      	it	cc
 8015778:	18e4      	addcc	r4, r4, r3
 801577a:	e7f2      	b.n	8015762 <floor+0xd2>
 801577c:	2500      	movs	r5, #0
 801577e:	462c      	mov	r4, r5
 8015780:	e7aa      	b.n	80156d8 <floor+0x48>
 8015782:	bf00      	nop
 8015784:	f3af 8000 	nop.w
 8015788:	8800759c 	.word	0x8800759c
 801578c:	7e37e43c 	.word	0x7e37e43c
 8015790:	bff00000 	.word	0xbff00000
 8015794:	000fffff 	.word	0x000fffff

08015798 <scalbn>:
 8015798:	b570      	push	{r4, r5, r6, lr}
 801579a:	ec55 4b10 	vmov	r4, r5, d0
 801579e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80157a2:	4606      	mov	r6, r0
 80157a4:	462b      	mov	r3, r5
 80157a6:	b9aa      	cbnz	r2, 80157d4 <scalbn+0x3c>
 80157a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80157ac:	4323      	orrs	r3, r4
 80157ae:	d03b      	beq.n	8015828 <scalbn+0x90>
 80157b0:	4b31      	ldr	r3, [pc, #196]	; (8015878 <scalbn+0xe0>)
 80157b2:	4629      	mov	r1, r5
 80157b4:	2200      	movs	r2, #0
 80157b6:	ee10 0a10 	vmov	r0, s0
 80157ba:	f7ea ff35 	bl	8000628 <__aeabi_dmul>
 80157be:	4b2f      	ldr	r3, [pc, #188]	; (801587c <scalbn+0xe4>)
 80157c0:	429e      	cmp	r6, r3
 80157c2:	4604      	mov	r4, r0
 80157c4:	460d      	mov	r5, r1
 80157c6:	da12      	bge.n	80157ee <scalbn+0x56>
 80157c8:	a327      	add	r3, pc, #156	; (adr r3, 8015868 <scalbn+0xd0>)
 80157ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ce:	f7ea ff2b 	bl	8000628 <__aeabi_dmul>
 80157d2:	e009      	b.n	80157e8 <scalbn+0x50>
 80157d4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80157d8:	428a      	cmp	r2, r1
 80157da:	d10c      	bne.n	80157f6 <scalbn+0x5e>
 80157dc:	ee10 2a10 	vmov	r2, s0
 80157e0:	4620      	mov	r0, r4
 80157e2:	4629      	mov	r1, r5
 80157e4:	f7ea fd6a 	bl	80002bc <__adddf3>
 80157e8:	4604      	mov	r4, r0
 80157ea:	460d      	mov	r5, r1
 80157ec:	e01c      	b.n	8015828 <scalbn+0x90>
 80157ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80157f2:	460b      	mov	r3, r1
 80157f4:	3a36      	subs	r2, #54	; 0x36
 80157f6:	4432      	add	r2, r6
 80157f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80157fc:	428a      	cmp	r2, r1
 80157fe:	dd0b      	ble.n	8015818 <scalbn+0x80>
 8015800:	ec45 4b11 	vmov	d1, r4, r5
 8015804:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015870 <scalbn+0xd8>
 8015808:	f000 f83c 	bl	8015884 <copysign>
 801580c:	a318      	add	r3, pc, #96	; (adr r3, 8015870 <scalbn+0xd8>)
 801580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015812:	ec51 0b10 	vmov	r0, r1, d0
 8015816:	e7da      	b.n	80157ce <scalbn+0x36>
 8015818:	2a00      	cmp	r2, #0
 801581a:	dd08      	ble.n	801582e <scalbn+0x96>
 801581c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015820:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015824:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015828:	ec45 4b10 	vmov	d0, r4, r5
 801582c:	bd70      	pop	{r4, r5, r6, pc}
 801582e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015832:	da0d      	bge.n	8015850 <scalbn+0xb8>
 8015834:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015838:	429e      	cmp	r6, r3
 801583a:	ec45 4b11 	vmov	d1, r4, r5
 801583e:	dce1      	bgt.n	8015804 <scalbn+0x6c>
 8015840:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015868 <scalbn+0xd0>
 8015844:	f000 f81e 	bl	8015884 <copysign>
 8015848:	a307      	add	r3, pc, #28	; (adr r3, 8015868 <scalbn+0xd0>)
 801584a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801584e:	e7e0      	b.n	8015812 <scalbn+0x7a>
 8015850:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015854:	3236      	adds	r2, #54	; 0x36
 8015856:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801585a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801585e:	4620      	mov	r0, r4
 8015860:	4629      	mov	r1, r5
 8015862:	2200      	movs	r2, #0
 8015864:	4b06      	ldr	r3, [pc, #24]	; (8015880 <scalbn+0xe8>)
 8015866:	e7b2      	b.n	80157ce <scalbn+0x36>
 8015868:	c2f8f359 	.word	0xc2f8f359
 801586c:	01a56e1f 	.word	0x01a56e1f
 8015870:	8800759c 	.word	0x8800759c
 8015874:	7e37e43c 	.word	0x7e37e43c
 8015878:	43500000 	.word	0x43500000
 801587c:	ffff3cb0 	.word	0xffff3cb0
 8015880:	3c900000 	.word	0x3c900000

08015884 <copysign>:
 8015884:	ec51 0b10 	vmov	r0, r1, d0
 8015888:	ee11 0a90 	vmov	r0, s3
 801588c:	ee10 2a10 	vmov	r2, s0
 8015890:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015894:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015898:	ea41 0300 	orr.w	r3, r1, r0
 801589c:	ec43 2b10 	vmov	d0, r2, r3
 80158a0:	4770      	bx	lr
	...

080158a4 <__errno>:
 80158a4:	4b01      	ldr	r3, [pc, #4]	; (80158ac <__errno+0x8>)
 80158a6:	6818      	ldr	r0, [r3, #0]
 80158a8:	4770      	bx	lr
 80158aa:	bf00      	nop
 80158ac:	2000000c 	.word	0x2000000c

080158b0 <__libc_init_array>:
 80158b0:	b570      	push	{r4, r5, r6, lr}
 80158b2:	4e0d      	ldr	r6, [pc, #52]	; (80158e8 <__libc_init_array+0x38>)
 80158b4:	4c0d      	ldr	r4, [pc, #52]	; (80158ec <__libc_init_array+0x3c>)
 80158b6:	1ba4      	subs	r4, r4, r6
 80158b8:	10a4      	asrs	r4, r4, #2
 80158ba:	2500      	movs	r5, #0
 80158bc:	42a5      	cmp	r5, r4
 80158be:	d109      	bne.n	80158d4 <__libc_init_array+0x24>
 80158c0:	4e0b      	ldr	r6, [pc, #44]	; (80158f0 <__libc_init_array+0x40>)
 80158c2:	4c0c      	ldr	r4, [pc, #48]	; (80158f4 <__libc_init_array+0x44>)
 80158c4:	f004 f9e6 	bl	8019c94 <_init>
 80158c8:	1ba4      	subs	r4, r4, r6
 80158ca:	10a4      	asrs	r4, r4, #2
 80158cc:	2500      	movs	r5, #0
 80158ce:	42a5      	cmp	r5, r4
 80158d0:	d105      	bne.n	80158de <__libc_init_array+0x2e>
 80158d2:	bd70      	pop	{r4, r5, r6, pc}
 80158d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80158d8:	4798      	blx	r3
 80158da:	3501      	adds	r5, #1
 80158dc:	e7ee      	b.n	80158bc <__libc_init_array+0xc>
 80158de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80158e2:	4798      	blx	r3
 80158e4:	3501      	adds	r5, #1
 80158e6:	e7f2      	b.n	80158ce <__libc_init_array+0x1e>
 80158e8:	0801a6b4 	.word	0x0801a6b4
 80158ec:	0801a6b4 	.word	0x0801a6b4
 80158f0:	0801a6b4 	.word	0x0801a6b4
 80158f4:	0801a6bc 	.word	0x0801a6bc

080158f8 <memset>:
 80158f8:	4402      	add	r2, r0
 80158fa:	4603      	mov	r3, r0
 80158fc:	4293      	cmp	r3, r2
 80158fe:	d100      	bne.n	8015902 <memset+0xa>
 8015900:	4770      	bx	lr
 8015902:	f803 1b01 	strb.w	r1, [r3], #1
 8015906:	e7f9      	b.n	80158fc <memset+0x4>

08015908 <__cvt>:
 8015908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801590c:	ec55 4b10 	vmov	r4, r5, d0
 8015910:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015912:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015916:	2d00      	cmp	r5, #0
 8015918:	460e      	mov	r6, r1
 801591a:	4691      	mov	r9, r2
 801591c:	4619      	mov	r1, r3
 801591e:	bfb8      	it	lt
 8015920:	4622      	movlt	r2, r4
 8015922:	462b      	mov	r3, r5
 8015924:	f027 0720 	bic.w	r7, r7, #32
 8015928:	bfbb      	ittet	lt
 801592a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801592e:	461d      	movlt	r5, r3
 8015930:	2300      	movge	r3, #0
 8015932:	232d      	movlt	r3, #45	; 0x2d
 8015934:	bfb8      	it	lt
 8015936:	4614      	movlt	r4, r2
 8015938:	2f46      	cmp	r7, #70	; 0x46
 801593a:	700b      	strb	r3, [r1, #0]
 801593c:	d004      	beq.n	8015948 <__cvt+0x40>
 801593e:	2f45      	cmp	r7, #69	; 0x45
 8015940:	d100      	bne.n	8015944 <__cvt+0x3c>
 8015942:	3601      	adds	r6, #1
 8015944:	2102      	movs	r1, #2
 8015946:	e000      	b.n	801594a <__cvt+0x42>
 8015948:	2103      	movs	r1, #3
 801594a:	ab03      	add	r3, sp, #12
 801594c:	9301      	str	r3, [sp, #4]
 801594e:	ab02      	add	r3, sp, #8
 8015950:	9300      	str	r3, [sp, #0]
 8015952:	4632      	mov	r2, r6
 8015954:	4653      	mov	r3, sl
 8015956:	ec45 4b10 	vmov	d0, r4, r5
 801595a:	f001 fdfd 	bl	8017558 <_dtoa_r>
 801595e:	2f47      	cmp	r7, #71	; 0x47
 8015960:	4680      	mov	r8, r0
 8015962:	d102      	bne.n	801596a <__cvt+0x62>
 8015964:	f019 0f01 	tst.w	r9, #1
 8015968:	d026      	beq.n	80159b8 <__cvt+0xb0>
 801596a:	2f46      	cmp	r7, #70	; 0x46
 801596c:	eb08 0906 	add.w	r9, r8, r6
 8015970:	d111      	bne.n	8015996 <__cvt+0x8e>
 8015972:	f898 3000 	ldrb.w	r3, [r8]
 8015976:	2b30      	cmp	r3, #48	; 0x30
 8015978:	d10a      	bne.n	8015990 <__cvt+0x88>
 801597a:	2200      	movs	r2, #0
 801597c:	2300      	movs	r3, #0
 801597e:	4620      	mov	r0, r4
 8015980:	4629      	mov	r1, r5
 8015982:	f7eb f8b9 	bl	8000af8 <__aeabi_dcmpeq>
 8015986:	b918      	cbnz	r0, 8015990 <__cvt+0x88>
 8015988:	f1c6 0601 	rsb	r6, r6, #1
 801598c:	f8ca 6000 	str.w	r6, [sl]
 8015990:	f8da 3000 	ldr.w	r3, [sl]
 8015994:	4499      	add	r9, r3
 8015996:	2200      	movs	r2, #0
 8015998:	2300      	movs	r3, #0
 801599a:	4620      	mov	r0, r4
 801599c:	4629      	mov	r1, r5
 801599e:	f7eb f8ab 	bl	8000af8 <__aeabi_dcmpeq>
 80159a2:	b938      	cbnz	r0, 80159b4 <__cvt+0xac>
 80159a4:	2230      	movs	r2, #48	; 0x30
 80159a6:	9b03      	ldr	r3, [sp, #12]
 80159a8:	454b      	cmp	r3, r9
 80159aa:	d205      	bcs.n	80159b8 <__cvt+0xb0>
 80159ac:	1c59      	adds	r1, r3, #1
 80159ae:	9103      	str	r1, [sp, #12]
 80159b0:	701a      	strb	r2, [r3, #0]
 80159b2:	e7f8      	b.n	80159a6 <__cvt+0x9e>
 80159b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80159b8:	9b03      	ldr	r3, [sp, #12]
 80159ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80159bc:	eba3 0308 	sub.w	r3, r3, r8
 80159c0:	4640      	mov	r0, r8
 80159c2:	6013      	str	r3, [r2, #0]
 80159c4:	b004      	add	sp, #16
 80159c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080159ca <__exponent>:
 80159ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80159cc:	2900      	cmp	r1, #0
 80159ce:	4604      	mov	r4, r0
 80159d0:	bfba      	itte	lt
 80159d2:	4249      	neglt	r1, r1
 80159d4:	232d      	movlt	r3, #45	; 0x2d
 80159d6:	232b      	movge	r3, #43	; 0x2b
 80159d8:	2909      	cmp	r1, #9
 80159da:	f804 2b02 	strb.w	r2, [r4], #2
 80159de:	7043      	strb	r3, [r0, #1]
 80159e0:	dd20      	ble.n	8015a24 <__exponent+0x5a>
 80159e2:	f10d 0307 	add.w	r3, sp, #7
 80159e6:	461f      	mov	r7, r3
 80159e8:	260a      	movs	r6, #10
 80159ea:	fb91 f5f6 	sdiv	r5, r1, r6
 80159ee:	fb06 1115 	mls	r1, r6, r5, r1
 80159f2:	3130      	adds	r1, #48	; 0x30
 80159f4:	2d09      	cmp	r5, #9
 80159f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80159fa:	f103 32ff 	add.w	r2, r3, #4294967295
 80159fe:	4629      	mov	r1, r5
 8015a00:	dc09      	bgt.n	8015a16 <__exponent+0x4c>
 8015a02:	3130      	adds	r1, #48	; 0x30
 8015a04:	3b02      	subs	r3, #2
 8015a06:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015a0a:	42bb      	cmp	r3, r7
 8015a0c:	4622      	mov	r2, r4
 8015a0e:	d304      	bcc.n	8015a1a <__exponent+0x50>
 8015a10:	1a10      	subs	r0, r2, r0
 8015a12:	b003      	add	sp, #12
 8015a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a16:	4613      	mov	r3, r2
 8015a18:	e7e7      	b.n	80159ea <__exponent+0x20>
 8015a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015a1e:	f804 2b01 	strb.w	r2, [r4], #1
 8015a22:	e7f2      	b.n	8015a0a <__exponent+0x40>
 8015a24:	2330      	movs	r3, #48	; 0x30
 8015a26:	4419      	add	r1, r3
 8015a28:	7083      	strb	r3, [r0, #2]
 8015a2a:	1d02      	adds	r2, r0, #4
 8015a2c:	70c1      	strb	r1, [r0, #3]
 8015a2e:	e7ef      	b.n	8015a10 <__exponent+0x46>

08015a30 <_printf_float>:
 8015a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a34:	b08d      	sub	sp, #52	; 0x34
 8015a36:	460c      	mov	r4, r1
 8015a38:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015a3c:	4616      	mov	r6, r2
 8015a3e:	461f      	mov	r7, r3
 8015a40:	4605      	mov	r5, r0
 8015a42:	f002 fe7b 	bl	801873c <_localeconv_r>
 8015a46:	6803      	ldr	r3, [r0, #0]
 8015a48:	9304      	str	r3, [sp, #16]
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	f7ea fbd8 	bl	8000200 <strlen>
 8015a50:	2300      	movs	r3, #0
 8015a52:	930a      	str	r3, [sp, #40]	; 0x28
 8015a54:	f8d8 3000 	ldr.w	r3, [r8]
 8015a58:	9005      	str	r0, [sp, #20]
 8015a5a:	3307      	adds	r3, #7
 8015a5c:	f023 0307 	bic.w	r3, r3, #7
 8015a60:	f103 0208 	add.w	r2, r3, #8
 8015a64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015a68:	f8d4 b000 	ldr.w	fp, [r4]
 8015a6c:	f8c8 2000 	str.w	r2, [r8]
 8015a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a74:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015a78:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015a7c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015a80:	9307      	str	r3, [sp, #28]
 8015a82:	f8cd 8018 	str.w	r8, [sp, #24]
 8015a86:	f04f 32ff 	mov.w	r2, #4294967295
 8015a8a:	4ba7      	ldr	r3, [pc, #668]	; (8015d28 <_printf_float+0x2f8>)
 8015a8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015a90:	f7eb f864 	bl	8000b5c <__aeabi_dcmpun>
 8015a94:	bb70      	cbnz	r0, 8015af4 <_printf_float+0xc4>
 8015a96:	f04f 32ff 	mov.w	r2, #4294967295
 8015a9a:	4ba3      	ldr	r3, [pc, #652]	; (8015d28 <_printf_float+0x2f8>)
 8015a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015aa0:	f7eb f83e 	bl	8000b20 <__aeabi_dcmple>
 8015aa4:	bb30      	cbnz	r0, 8015af4 <_printf_float+0xc4>
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	4640      	mov	r0, r8
 8015aac:	4649      	mov	r1, r9
 8015aae:	f7eb f82d 	bl	8000b0c <__aeabi_dcmplt>
 8015ab2:	b110      	cbz	r0, 8015aba <_printf_float+0x8a>
 8015ab4:	232d      	movs	r3, #45	; 0x2d
 8015ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015aba:	4a9c      	ldr	r2, [pc, #624]	; (8015d2c <_printf_float+0x2fc>)
 8015abc:	4b9c      	ldr	r3, [pc, #624]	; (8015d30 <_printf_float+0x300>)
 8015abe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015ac2:	bf8c      	ite	hi
 8015ac4:	4690      	movhi	r8, r2
 8015ac6:	4698      	movls	r8, r3
 8015ac8:	2303      	movs	r3, #3
 8015aca:	f02b 0204 	bic.w	r2, fp, #4
 8015ace:	6123      	str	r3, [r4, #16]
 8015ad0:	6022      	str	r2, [r4, #0]
 8015ad2:	f04f 0900 	mov.w	r9, #0
 8015ad6:	9700      	str	r7, [sp, #0]
 8015ad8:	4633      	mov	r3, r6
 8015ada:	aa0b      	add	r2, sp, #44	; 0x2c
 8015adc:	4621      	mov	r1, r4
 8015ade:	4628      	mov	r0, r5
 8015ae0:	f000 f9e6 	bl	8015eb0 <_printf_common>
 8015ae4:	3001      	adds	r0, #1
 8015ae6:	f040 808d 	bne.w	8015c04 <_printf_float+0x1d4>
 8015aea:	f04f 30ff 	mov.w	r0, #4294967295
 8015aee:	b00d      	add	sp, #52	; 0x34
 8015af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015af4:	4642      	mov	r2, r8
 8015af6:	464b      	mov	r3, r9
 8015af8:	4640      	mov	r0, r8
 8015afa:	4649      	mov	r1, r9
 8015afc:	f7eb f82e 	bl	8000b5c <__aeabi_dcmpun>
 8015b00:	b110      	cbz	r0, 8015b08 <_printf_float+0xd8>
 8015b02:	4a8c      	ldr	r2, [pc, #560]	; (8015d34 <_printf_float+0x304>)
 8015b04:	4b8c      	ldr	r3, [pc, #560]	; (8015d38 <_printf_float+0x308>)
 8015b06:	e7da      	b.n	8015abe <_printf_float+0x8e>
 8015b08:	6861      	ldr	r1, [r4, #4]
 8015b0a:	1c4b      	adds	r3, r1, #1
 8015b0c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015b10:	a80a      	add	r0, sp, #40	; 0x28
 8015b12:	d13e      	bne.n	8015b92 <_printf_float+0x162>
 8015b14:	2306      	movs	r3, #6
 8015b16:	6063      	str	r3, [r4, #4]
 8015b18:	2300      	movs	r3, #0
 8015b1a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015b1e:	ab09      	add	r3, sp, #36	; 0x24
 8015b20:	9300      	str	r3, [sp, #0]
 8015b22:	ec49 8b10 	vmov	d0, r8, r9
 8015b26:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015b2a:	6022      	str	r2, [r4, #0]
 8015b2c:	f8cd a004 	str.w	sl, [sp, #4]
 8015b30:	6861      	ldr	r1, [r4, #4]
 8015b32:	4628      	mov	r0, r5
 8015b34:	f7ff fee8 	bl	8015908 <__cvt>
 8015b38:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015b3c:	2b47      	cmp	r3, #71	; 0x47
 8015b3e:	4680      	mov	r8, r0
 8015b40:	d109      	bne.n	8015b56 <_printf_float+0x126>
 8015b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b44:	1cd8      	adds	r0, r3, #3
 8015b46:	db02      	blt.n	8015b4e <_printf_float+0x11e>
 8015b48:	6862      	ldr	r2, [r4, #4]
 8015b4a:	4293      	cmp	r3, r2
 8015b4c:	dd47      	ble.n	8015bde <_printf_float+0x1ae>
 8015b4e:	f1aa 0a02 	sub.w	sl, sl, #2
 8015b52:	fa5f fa8a 	uxtb.w	sl, sl
 8015b56:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015b5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015b5c:	d824      	bhi.n	8015ba8 <_printf_float+0x178>
 8015b5e:	3901      	subs	r1, #1
 8015b60:	4652      	mov	r2, sl
 8015b62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015b66:	9109      	str	r1, [sp, #36]	; 0x24
 8015b68:	f7ff ff2f 	bl	80159ca <__exponent>
 8015b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b6e:	1813      	adds	r3, r2, r0
 8015b70:	2a01      	cmp	r2, #1
 8015b72:	4681      	mov	r9, r0
 8015b74:	6123      	str	r3, [r4, #16]
 8015b76:	dc02      	bgt.n	8015b7e <_printf_float+0x14e>
 8015b78:	6822      	ldr	r2, [r4, #0]
 8015b7a:	07d1      	lsls	r1, r2, #31
 8015b7c:	d501      	bpl.n	8015b82 <_printf_float+0x152>
 8015b7e:	3301      	adds	r3, #1
 8015b80:	6123      	str	r3, [r4, #16]
 8015b82:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d0a5      	beq.n	8015ad6 <_printf_float+0xa6>
 8015b8a:	232d      	movs	r3, #45	; 0x2d
 8015b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b90:	e7a1      	b.n	8015ad6 <_printf_float+0xa6>
 8015b92:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015b96:	f000 8177 	beq.w	8015e88 <_printf_float+0x458>
 8015b9a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015b9e:	d1bb      	bne.n	8015b18 <_printf_float+0xe8>
 8015ba0:	2900      	cmp	r1, #0
 8015ba2:	d1b9      	bne.n	8015b18 <_printf_float+0xe8>
 8015ba4:	2301      	movs	r3, #1
 8015ba6:	e7b6      	b.n	8015b16 <_printf_float+0xe6>
 8015ba8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015bac:	d119      	bne.n	8015be2 <_printf_float+0x1b2>
 8015bae:	2900      	cmp	r1, #0
 8015bb0:	6863      	ldr	r3, [r4, #4]
 8015bb2:	dd0c      	ble.n	8015bce <_printf_float+0x19e>
 8015bb4:	6121      	str	r1, [r4, #16]
 8015bb6:	b913      	cbnz	r3, 8015bbe <_printf_float+0x18e>
 8015bb8:	6822      	ldr	r2, [r4, #0]
 8015bba:	07d2      	lsls	r2, r2, #31
 8015bbc:	d502      	bpl.n	8015bc4 <_printf_float+0x194>
 8015bbe:	3301      	adds	r3, #1
 8015bc0:	440b      	add	r3, r1
 8015bc2:	6123      	str	r3, [r4, #16]
 8015bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bc6:	65a3      	str	r3, [r4, #88]	; 0x58
 8015bc8:	f04f 0900 	mov.w	r9, #0
 8015bcc:	e7d9      	b.n	8015b82 <_printf_float+0x152>
 8015bce:	b913      	cbnz	r3, 8015bd6 <_printf_float+0x1a6>
 8015bd0:	6822      	ldr	r2, [r4, #0]
 8015bd2:	07d0      	lsls	r0, r2, #31
 8015bd4:	d501      	bpl.n	8015bda <_printf_float+0x1aa>
 8015bd6:	3302      	adds	r3, #2
 8015bd8:	e7f3      	b.n	8015bc2 <_printf_float+0x192>
 8015bda:	2301      	movs	r3, #1
 8015bdc:	e7f1      	b.n	8015bc2 <_printf_float+0x192>
 8015bde:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015be2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015be6:	4293      	cmp	r3, r2
 8015be8:	db05      	blt.n	8015bf6 <_printf_float+0x1c6>
 8015bea:	6822      	ldr	r2, [r4, #0]
 8015bec:	6123      	str	r3, [r4, #16]
 8015bee:	07d1      	lsls	r1, r2, #31
 8015bf0:	d5e8      	bpl.n	8015bc4 <_printf_float+0x194>
 8015bf2:	3301      	adds	r3, #1
 8015bf4:	e7e5      	b.n	8015bc2 <_printf_float+0x192>
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	bfd4      	ite	le
 8015bfa:	f1c3 0302 	rsble	r3, r3, #2
 8015bfe:	2301      	movgt	r3, #1
 8015c00:	4413      	add	r3, r2
 8015c02:	e7de      	b.n	8015bc2 <_printf_float+0x192>
 8015c04:	6823      	ldr	r3, [r4, #0]
 8015c06:	055a      	lsls	r2, r3, #21
 8015c08:	d407      	bmi.n	8015c1a <_printf_float+0x1ea>
 8015c0a:	6923      	ldr	r3, [r4, #16]
 8015c0c:	4642      	mov	r2, r8
 8015c0e:	4631      	mov	r1, r6
 8015c10:	4628      	mov	r0, r5
 8015c12:	47b8      	blx	r7
 8015c14:	3001      	adds	r0, #1
 8015c16:	d12b      	bne.n	8015c70 <_printf_float+0x240>
 8015c18:	e767      	b.n	8015aea <_printf_float+0xba>
 8015c1a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015c1e:	f240 80dc 	bls.w	8015dda <_printf_float+0x3aa>
 8015c22:	2200      	movs	r2, #0
 8015c24:	2300      	movs	r3, #0
 8015c26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015c2a:	f7ea ff65 	bl	8000af8 <__aeabi_dcmpeq>
 8015c2e:	2800      	cmp	r0, #0
 8015c30:	d033      	beq.n	8015c9a <_printf_float+0x26a>
 8015c32:	2301      	movs	r3, #1
 8015c34:	4a41      	ldr	r2, [pc, #260]	; (8015d3c <_printf_float+0x30c>)
 8015c36:	4631      	mov	r1, r6
 8015c38:	4628      	mov	r0, r5
 8015c3a:	47b8      	blx	r7
 8015c3c:	3001      	adds	r0, #1
 8015c3e:	f43f af54 	beq.w	8015aea <_printf_float+0xba>
 8015c42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015c46:	429a      	cmp	r2, r3
 8015c48:	db02      	blt.n	8015c50 <_printf_float+0x220>
 8015c4a:	6823      	ldr	r3, [r4, #0]
 8015c4c:	07d8      	lsls	r0, r3, #31
 8015c4e:	d50f      	bpl.n	8015c70 <_printf_float+0x240>
 8015c50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015c54:	4631      	mov	r1, r6
 8015c56:	4628      	mov	r0, r5
 8015c58:	47b8      	blx	r7
 8015c5a:	3001      	adds	r0, #1
 8015c5c:	f43f af45 	beq.w	8015aea <_printf_float+0xba>
 8015c60:	f04f 0800 	mov.w	r8, #0
 8015c64:	f104 091a 	add.w	r9, r4, #26
 8015c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c6a:	3b01      	subs	r3, #1
 8015c6c:	4543      	cmp	r3, r8
 8015c6e:	dc09      	bgt.n	8015c84 <_printf_float+0x254>
 8015c70:	6823      	ldr	r3, [r4, #0]
 8015c72:	079b      	lsls	r3, r3, #30
 8015c74:	f100 8103 	bmi.w	8015e7e <_printf_float+0x44e>
 8015c78:	68e0      	ldr	r0, [r4, #12]
 8015c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c7c:	4298      	cmp	r0, r3
 8015c7e:	bfb8      	it	lt
 8015c80:	4618      	movlt	r0, r3
 8015c82:	e734      	b.n	8015aee <_printf_float+0xbe>
 8015c84:	2301      	movs	r3, #1
 8015c86:	464a      	mov	r2, r9
 8015c88:	4631      	mov	r1, r6
 8015c8a:	4628      	mov	r0, r5
 8015c8c:	47b8      	blx	r7
 8015c8e:	3001      	adds	r0, #1
 8015c90:	f43f af2b 	beq.w	8015aea <_printf_float+0xba>
 8015c94:	f108 0801 	add.w	r8, r8, #1
 8015c98:	e7e6      	b.n	8015c68 <_printf_float+0x238>
 8015c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	dc2b      	bgt.n	8015cf8 <_printf_float+0x2c8>
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	4a26      	ldr	r2, [pc, #152]	; (8015d3c <_printf_float+0x30c>)
 8015ca4:	4631      	mov	r1, r6
 8015ca6:	4628      	mov	r0, r5
 8015ca8:	47b8      	blx	r7
 8015caa:	3001      	adds	r0, #1
 8015cac:	f43f af1d 	beq.w	8015aea <_printf_float+0xba>
 8015cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cb2:	b923      	cbnz	r3, 8015cbe <_printf_float+0x28e>
 8015cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cb6:	b913      	cbnz	r3, 8015cbe <_printf_float+0x28e>
 8015cb8:	6823      	ldr	r3, [r4, #0]
 8015cba:	07d9      	lsls	r1, r3, #31
 8015cbc:	d5d8      	bpl.n	8015c70 <_printf_float+0x240>
 8015cbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015cc2:	4631      	mov	r1, r6
 8015cc4:	4628      	mov	r0, r5
 8015cc6:	47b8      	blx	r7
 8015cc8:	3001      	adds	r0, #1
 8015cca:	f43f af0e 	beq.w	8015aea <_printf_float+0xba>
 8015cce:	f04f 0900 	mov.w	r9, #0
 8015cd2:	f104 0a1a 	add.w	sl, r4, #26
 8015cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cd8:	425b      	negs	r3, r3
 8015cda:	454b      	cmp	r3, r9
 8015cdc:	dc01      	bgt.n	8015ce2 <_printf_float+0x2b2>
 8015cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ce0:	e794      	b.n	8015c0c <_printf_float+0x1dc>
 8015ce2:	2301      	movs	r3, #1
 8015ce4:	4652      	mov	r2, sl
 8015ce6:	4631      	mov	r1, r6
 8015ce8:	4628      	mov	r0, r5
 8015cea:	47b8      	blx	r7
 8015cec:	3001      	adds	r0, #1
 8015cee:	f43f aefc 	beq.w	8015aea <_printf_float+0xba>
 8015cf2:	f109 0901 	add.w	r9, r9, #1
 8015cf6:	e7ee      	b.n	8015cd6 <_printf_float+0x2a6>
 8015cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015cfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	bfa8      	it	ge
 8015d00:	461a      	movge	r2, r3
 8015d02:	2a00      	cmp	r2, #0
 8015d04:	4691      	mov	r9, r2
 8015d06:	dd07      	ble.n	8015d18 <_printf_float+0x2e8>
 8015d08:	4613      	mov	r3, r2
 8015d0a:	4631      	mov	r1, r6
 8015d0c:	4642      	mov	r2, r8
 8015d0e:	4628      	mov	r0, r5
 8015d10:	47b8      	blx	r7
 8015d12:	3001      	adds	r0, #1
 8015d14:	f43f aee9 	beq.w	8015aea <_printf_float+0xba>
 8015d18:	f104 031a 	add.w	r3, r4, #26
 8015d1c:	f04f 0b00 	mov.w	fp, #0
 8015d20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015d24:	9306      	str	r3, [sp, #24]
 8015d26:	e015      	b.n	8015d54 <_printf_float+0x324>
 8015d28:	7fefffff 	.word	0x7fefffff
 8015d2c:	0801a384 	.word	0x0801a384
 8015d30:	0801a380 	.word	0x0801a380
 8015d34:	0801a38c 	.word	0x0801a38c
 8015d38:	0801a388 	.word	0x0801a388
 8015d3c:	0801a543 	.word	0x0801a543
 8015d40:	2301      	movs	r3, #1
 8015d42:	9a06      	ldr	r2, [sp, #24]
 8015d44:	4631      	mov	r1, r6
 8015d46:	4628      	mov	r0, r5
 8015d48:	47b8      	blx	r7
 8015d4a:	3001      	adds	r0, #1
 8015d4c:	f43f aecd 	beq.w	8015aea <_printf_float+0xba>
 8015d50:	f10b 0b01 	add.w	fp, fp, #1
 8015d54:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015d58:	ebaa 0309 	sub.w	r3, sl, r9
 8015d5c:	455b      	cmp	r3, fp
 8015d5e:	dcef      	bgt.n	8015d40 <_printf_float+0x310>
 8015d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d64:	429a      	cmp	r2, r3
 8015d66:	44d0      	add	r8, sl
 8015d68:	db15      	blt.n	8015d96 <_printf_float+0x366>
 8015d6a:	6823      	ldr	r3, [r4, #0]
 8015d6c:	07da      	lsls	r2, r3, #31
 8015d6e:	d412      	bmi.n	8015d96 <_printf_float+0x366>
 8015d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015d74:	eba3 020a 	sub.w	r2, r3, sl
 8015d78:	eba3 0a01 	sub.w	sl, r3, r1
 8015d7c:	4592      	cmp	sl, r2
 8015d7e:	bfa8      	it	ge
 8015d80:	4692      	movge	sl, r2
 8015d82:	f1ba 0f00 	cmp.w	sl, #0
 8015d86:	dc0e      	bgt.n	8015da6 <_printf_float+0x376>
 8015d88:	f04f 0800 	mov.w	r8, #0
 8015d8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015d90:	f104 091a 	add.w	r9, r4, #26
 8015d94:	e019      	b.n	8015dca <_printf_float+0x39a>
 8015d96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015d9a:	4631      	mov	r1, r6
 8015d9c:	4628      	mov	r0, r5
 8015d9e:	47b8      	blx	r7
 8015da0:	3001      	adds	r0, #1
 8015da2:	d1e5      	bne.n	8015d70 <_printf_float+0x340>
 8015da4:	e6a1      	b.n	8015aea <_printf_float+0xba>
 8015da6:	4653      	mov	r3, sl
 8015da8:	4642      	mov	r2, r8
 8015daa:	4631      	mov	r1, r6
 8015dac:	4628      	mov	r0, r5
 8015dae:	47b8      	blx	r7
 8015db0:	3001      	adds	r0, #1
 8015db2:	d1e9      	bne.n	8015d88 <_printf_float+0x358>
 8015db4:	e699      	b.n	8015aea <_printf_float+0xba>
 8015db6:	2301      	movs	r3, #1
 8015db8:	464a      	mov	r2, r9
 8015dba:	4631      	mov	r1, r6
 8015dbc:	4628      	mov	r0, r5
 8015dbe:	47b8      	blx	r7
 8015dc0:	3001      	adds	r0, #1
 8015dc2:	f43f ae92 	beq.w	8015aea <_printf_float+0xba>
 8015dc6:	f108 0801 	add.w	r8, r8, #1
 8015dca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015dce:	1a9b      	subs	r3, r3, r2
 8015dd0:	eba3 030a 	sub.w	r3, r3, sl
 8015dd4:	4543      	cmp	r3, r8
 8015dd6:	dcee      	bgt.n	8015db6 <_printf_float+0x386>
 8015dd8:	e74a      	b.n	8015c70 <_printf_float+0x240>
 8015dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ddc:	2a01      	cmp	r2, #1
 8015dde:	dc01      	bgt.n	8015de4 <_printf_float+0x3b4>
 8015de0:	07db      	lsls	r3, r3, #31
 8015de2:	d53a      	bpl.n	8015e5a <_printf_float+0x42a>
 8015de4:	2301      	movs	r3, #1
 8015de6:	4642      	mov	r2, r8
 8015de8:	4631      	mov	r1, r6
 8015dea:	4628      	mov	r0, r5
 8015dec:	47b8      	blx	r7
 8015dee:	3001      	adds	r0, #1
 8015df0:	f43f ae7b 	beq.w	8015aea <_printf_float+0xba>
 8015df4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015df8:	4631      	mov	r1, r6
 8015dfa:	4628      	mov	r0, r5
 8015dfc:	47b8      	blx	r7
 8015dfe:	3001      	adds	r0, #1
 8015e00:	f108 0801 	add.w	r8, r8, #1
 8015e04:	f43f ae71 	beq.w	8015aea <_printf_float+0xba>
 8015e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e0a:	2200      	movs	r2, #0
 8015e0c:	f103 3aff 	add.w	sl, r3, #4294967295
 8015e10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015e14:	2300      	movs	r3, #0
 8015e16:	f7ea fe6f 	bl	8000af8 <__aeabi_dcmpeq>
 8015e1a:	b9c8      	cbnz	r0, 8015e50 <_printf_float+0x420>
 8015e1c:	4653      	mov	r3, sl
 8015e1e:	4642      	mov	r2, r8
 8015e20:	4631      	mov	r1, r6
 8015e22:	4628      	mov	r0, r5
 8015e24:	47b8      	blx	r7
 8015e26:	3001      	adds	r0, #1
 8015e28:	d10e      	bne.n	8015e48 <_printf_float+0x418>
 8015e2a:	e65e      	b.n	8015aea <_printf_float+0xba>
 8015e2c:	2301      	movs	r3, #1
 8015e2e:	4652      	mov	r2, sl
 8015e30:	4631      	mov	r1, r6
 8015e32:	4628      	mov	r0, r5
 8015e34:	47b8      	blx	r7
 8015e36:	3001      	adds	r0, #1
 8015e38:	f43f ae57 	beq.w	8015aea <_printf_float+0xba>
 8015e3c:	f108 0801 	add.w	r8, r8, #1
 8015e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e42:	3b01      	subs	r3, #1
 8015e44:	4543      	cmp	r3, r8
 8015e46:	dcf1      	bgt.n	8015e2c <_printf_float+0x3fc>
 8015e48:	464b      	mov	r3, r9
 8015e4a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015e4e:	e6de      	b.n	8015c0e <_printf_float+0x1de>
 8015e50:	f04f 0800 	mov.w	r8, #0
 8015e54:	f104 0a1a 	add.w	sl, r4, #26
 8015e58:	e7f2      	b.n	8015e40 <_printf_float+0x410>
 8015e5a:	2301      	movs	r3, #1
 8015e5c:	e7df      	b.n	8015e1e <_printf_float+0x3ee>
 8015e5e:	2301      	movs	r3, #1
 8015e60:	464a      	mov	r2, r9
 8015e62:	4631      	mov	r1, r6
 8015e64:	4628      	mov	r0, r5
 8015e66:	47b8      	blx	r7
 8015e68:	3001      	adds	r0, #1
 8015e6a:	f43f ae3e 	beq.w	8015aea <_printf_float+0xba>
 8015e6e:	f108 0801 	add.w	r8, r8, #1
 8015e72:	68e3      	ldr	r3, [r4, #12]
 8015e74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e76:	1a9b      	subs	r3, r3, r2
 8015e78:	4543      	cmp	r3, r8
 8015e7a:	dcf0      	bgt.n	8015e5e <_printf_float+0x42e>
 8015e7c:	e6fc      	b.n	8015c78 <_printf_float+0x248>
 8015e7e:	f04f 0800 	mov.w	r8, #0
 8015e82:	f104 0919 	add.w	r9, r4, #25
 8015e86:	e7f4      	b.n	8015e72 <_printf_float+0x442>
 8015e88:	2900      	cmp	r1, #0
 8015e8a:	f43f ae8b 	beq.w	8015ba4 <_printf_float+0x174>
 8015e8e:	2300      	movs	r3, #0
 8015e90:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015e94:	ab09      	add	r3, sp, #36	; 0x24
 8015e96:	9300      	str	r3, [sp, #0]
 8015e98:	ec49 8b10 	vmov	d0, r8, r9
 8015e9c:	6022      	str	r2, [r4, #0]
 8015e9e:	f8cd a004 	str.w	sl, [sp, #4]
 8015ea2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015ea6:	4628      	mov	r0, r5
 8015ea8:	f7ff fd2e 	bl	8015908 <__cvt>
 8015eac:	4680      	mov	r8, r0
 8015eae:	e648      	b.n	8015b42 <_printf_float+0x112>

08015eb0 <_printf_common>:
 8015eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015eb4:	4691      	mov	r9, r2
 8015eb6:	461f      	mov	r7, r3
 8015eb8:	688a      	ldr	r2, [r1, #8]
 8015eba:	690b      	ldr	r3, [r1, #16]
 8015ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015ec0:	4293      	cmp	r3, r2
 8015ec2:	bfb8      	it	lt
 8015ec4:	4613      	movlt	r3, r2
 8015ec6:	f8c9 3000 	str.w	r3, [r9]
 8015eca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015ece:	4606      	mov	r6, r0
 8015ed0:	460c      	mov	r4, r1
 8015ed2:	b112      	cbz	r2, 8015eda <_printf_common+0x2a>
 8015ed4:	3301      	adds	r3, #1
 8015ed6:	f8c9 3000 	str.w	r3, [r9]
 8015eda:	6823      	ldr	r3, [r4, #0]
 8015edc:	0699      	lsls	r1, r3, #26
 8015ede:	bf42      	ittt	mi
 8015ee0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015ee4:	3302      	addmi	r3, #2
 8015ee6:	f8c9 3000 	strmi.w	r3, [r9]
 8015eea:	6825      	ldr	r5, [r4, #0]
 8015eec:	f015 0506 	ands.w	r5, r5, #6
 8015ef0:	d107      	bne.n	8015f02 <_printf_common+0x52>
 8015ef2:	f104 0a19 	add.w	sl, r4, #25
 8015ef6:	68e3      	ldr	r3, [r4, #12]
 8015ef8:	f8d9 2000 	ldr.w	r2, [r9]
 8015efc:	1a9b      	subs	r3, r3, r2
 8015efe:	42ab      	cmp	r3, r5
 8015f00:	dc28      	bgt.n	8015f54 <_printf_common+0xa4>
 8015f02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015f06:	6822      	ldr	r2, [r4, #0]
 8015f08:	3300      	adds	r3, #0
 8015f0a:	bf18      	it	ne
 8015f0c:	2301      	movne	r3, #1
 8015f0e:	0692      	lsls	r2, r2, #26
 8015f10:	d42d      	bmi.n	8015f6e <_printf_common+0xbe>
 8015f12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015f16:	4639      	mov	r1, r7
 8015f18:	4630      	mov	r0, r6
 8015f1a:	47c0      	blx	r8
 8015f1c:	3001      	adds	r0, #1
 8015f1e:	d020      	beq.n	8015f62 <_printf_common+0xb2>
 8015f20:	6823      	ldr	r3, [r4, #0]
 8015f22:	68e5      	ldr	r5, [r4, #12]
 8015f24:	f8d9 2000 	ldr.w	r2, [r9]
 8015f28:	f003 0306 	and.w	r3, r3, #6
 8015f2c:	2b04      	cmp	r3, #4
 8015f2e:	bf08      	it	eq
 8015f30:	1aad      	subeq	r5, r5, r2
 8015f32:	68a3      	ldr	r3, [r4, #8]
 8015f34:	6922      	ldr	r2, [r4, #16]
 8015f36:	bf0c      	ite	eq
 8015f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015f3c:	2500      	movne	r5, #0
 8015f3e:	4293      	cmp	r3, r2
 8015f40:	bfc4      	itt	gt
 8015f42:	1a9b      	subgt	r3, r3, r2
 8015f44:	18ed      	addgt	r5, r5, r3
 8015f46:	f04f 0900 	mov.w	r9, #0
 8015f4a:	341a      	adds	r4, #26
 8015f4c:	454d      	cmp	r5, r9
 8015f4e:	d11a      	bne.n	8015f86 <_printf_common+0xd6>
 8015f50:	2000      	movs	r0, #0
 8015f52:	e008      	b.n	8015f66 <_printf_common+0xb6>
 8015f54:	2301      	movs	r3, #1
 8015f56:	4652      	mov	r2, sl
 8015f58:	4639      	mov	r1, r7
 8015f5a:	4630      	mov	r0, r6
 8015f5c:	47c0      	blx	r8
 8015f5e:	3001      	adds	r0, #1
 8015f60:	d103      	bne.n	8015f6a <_printf_common+0xba>
 8015f62:	f04f 30ff 	mov.w	r0, #4294967295
 8015f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f6a:	3501      	adds	r5, #1
 8015f6c:	e7c3      	b.n	8015ef6 <_printf_common+0x46>
 8015f6e:	18e1      	adds	r1, r4, r3
 8015f70:	1c5a      	adds	r2, r3, #1
 8015f72:	2030      	movs	r0, #48	; 0x30
 8015f74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015f78:	4422      	add	r2, r4
 8015f7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015f7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015f82:	3302      	adds	r3, #2
 8015f84:	e7c5      	b.n	8015f12 <_printf_common+0x62>
 8015f86:	2301      	movs	r3, #1
 8015f88:	4622      	mov	r2, r4
 8015f8a:	4639      	mov	r1, r7
 8015f8c:	4630      	mov	r0, r6
 8015f8e:	47c0      	blx	r8
 8015f90:	3001      	adds	r0, #1
 8015f92:	d0e6      	beq.n	8015f62 <_printf_common+0xb2>
 8015f94:	f109 0901 	add.w	r9, r9, #1
 8015f98:	e7d8      	b.n	8015f4c <_printf_common+0x9c>
	...

08015f9c <_printf_i>:
 8015f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015fa0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015fa4:	460c      	mov	r4, r1
 8015fa6:	7e09      	ldrb	r1, [r1, #24]
 8015fa8:	b085      	sub	sp, #20
 8015faa:	296e      	cmp	r1, #110	; 0x6e
 8015fac:	4617      	mov	r7, r2
 8015fae:	4606      	mov	r6, r0
 8015fb0:	4698      	mov	r8, r3
 8015fb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015fb4:	f000 80b3 	beq.w	801611e <_printf_i+0x182>
 8015fb8:	d822      	bhi.n	8016000 <_printf_i+0x64>
 8015fba:	2963      	cmp	r1, #99	; 0x63
 8015fbc:	d036      	beq.n	801602c <_printf_i+0x90>
 8015fbe:	d80a      	bhi.n	8015fd6 <_printf_i+0x3a>
 8015fc0:	2900      	cmp	r1, #0
 8015fc2:	f000 80b9 	beq.w	8016138 <_printf_i+0x19c>
 8015fc6:	2958      	cmp	r1, #88	; 0x58
 8015fc8:	f000 8083 	beq.w	80160d2 <_printf_i+0x136>
 8015fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015fd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015fd4:	e032      	b.n	801603c <_printf_i+0xa0>
 8015fd6:	2964      	cmp	r1, #100	; 0x64
 8015fd8:	d001      	beq.n	8015fde <_printf_i+0x42>
 8015fda:	2969      	cmp	r1, #105	; 0x69
 8015fdc:	d1f6      	bne.n	8015fcc <_printf_i+0x30>
 8015fde:	6820      	ldr	r0, [r4, #0]
 8015fe0:	6813      	ldr	r3, [r2, #0]
 8015fe2:	0605      	lsls	r5, r0, #24
 8015fe4:	f103 0104 	add.w	r1, r3, #4
 8015fe8:	d52a      	bpl.n	8016040 <_printf_i+0xa4>
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	6011      	str	r1, [r2, #0]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	da03      	bge.n	8015ffa <_printf_i+0x5e>
 8015ff2:	222d      	movs	r2, #45	; 0x2d
 8015ff4:	425b      	negs	r3, r3
 8015ff6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015ffa:	486f      	ldr	r0, [pc, #444]	; (80161b8 <_printf_i+0x21c>)
 8015ffc:	220a      	movs	r2, #10
 8015ffe:	e039      	b.n	8016074 <_printf_i+0xd8>
 8016000:	2973      	cmp	r1, #115	; 0x73
 8016002:	f000 809d 	beq.w	8016140 <_printf_i+0x1a4>
 8016006:	d808      	bhi.n	801601a <_printf_i+0x7e>
 8016008:	296f      	cmp	r1, #111	; 0x6f
 801600a:	d020      	beq.n	801604e <_printf_i+0xb2>
 801600c:	2970      	cmp	r1, #112	; 0x70
 801600e:	d1dd      	bne.n	8015fcc <_printf_i+0x30>
 8016010:	6823      	ldr	r3, [r4, #0]
 8016012:	f043 0320 	orr.w	r3, r3, #32
 8016016:	6023      	str	r3, [r4, #0]
 8016018:	e003      	b.n	8016022 <_printf_i+0x86>
 801601a:	2975      	cmp	r1, #117	; 0x75
 801601c:	d017      	beq.n	801604e <_printf_i+0xb2>
 801601e:	2978      	cmp	r1, #120	; 0x78
 8016020:	d1d4      	bne.n	8015fcc <_printf_i+0x30>
 8016022:	2378      	movs	r3, #120	; 0x78
 8016024:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016028:	4864      	ldr	r0, [pc, #400]	; (80161bc <_printf_i+0x220>)
 801602a:	e055      	b.n	80160d8 <_printf_i+0x13c>
 801602c:	6813      	ldr	r3, [r2, #0]
 801602e:	1d19      	adds	r1, r3, #4
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	6011      	str	r1, [r2, #0]
 8016034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801603c:	2301      	movs	r3, #1
 801603e:	e08c      	b.n	801615a <_printf_i+0x1be>
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	6011      	str	r1, [r2, #0]
 8016044:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016048:	bf18      	it	ne
 801604a:	b21b      	sxthne	r3, r3
 801604c:	e7cf      	b.n	8015fee <_printf_i+0x52>
 801604e:	6813      	ldr	r3, [r2, #0]
 8016050:	6825      	ldr	r5, [r4, #0]
 8016052:	1d18      	adds	r0, r3, #4
 8016054:	6010      	str	r0, [r2, #0]
 8016056:	0628      	lsls	r0, r5, #24
 8016058:	d501      	bpl.n	801605e <_printf_i+0xc2>
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	e002      	b.n	8016064 <_printf_i+0xc8>
 801605e:	0668      	lsls	r0, r5, #25
 8016060:	d5fb      	bpl.n	801605a <_printf_i+0xbe>
 8016062:	881b      	ldrh	r3, [r3, #0]
 8016064:	4854      	ldr	r0, [pc, #336]	; (80161b8 <_printf_i+0x21c>)
 8016066:	296f      	cmp	r1, #111	; 0x6f
 8016068:	bf14      	ite	ne
 801606a:	220a      	movne	r2, #10
 801606c:	2208      	moveq	r2, #8
 801606e:	2100      	movs	r1, #0
 8016070:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016074:	6865      	ldr	r5, [r4, #4]
 8016076:	60a5      	str	r5, [r4, #8]
 8016078:	2d00      	cmp	r5, #0
 801607a:	f2c0 8095 	blt.w	80161a8 <_printf_i+0x20c>
 801607e:	6821      	ldr	r1, [r4, #0]
 8016080:	f021 0104 	bic.w	r1, r1, #4
 8016084:	6021      	str	r1, [r4, #0]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d13d      	bne.n	8016106 <_printf_i+0x16a>
 801608a:	2d00      	cmp	r5, #0
 801608c:	f040 808e 	bne.w	80161ac <_printf_i+0x210>
 8016090:	4665      	mov	r5, ip
 8016092:	2a08      	cmp	r2, #8
 8016094:	d10b      	bne.n	80160ae <_printf_i+0x112>
 8016096:	6823      	ldr	r3, [r4, #0]
 8016098:	07db      	lsls	r3, r3, #31
 801609a:	d508      	bpl.n	80160ae <_printf_i+0x112>
 801609c:	6923      	ldr	r3, [r4, #16]
 801609e:	6862      	ldr	r2, [r4, #4]
 80160a0:	429a      	cmp	r2, r3
 80160a2:	bfde      	ittt	le
 80160a4:	2330      	movle	r3, #48	; 0x30
 80160a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80160aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80160ae:	ebac 0305 	sub.w	r3, ip, r5
 80160b2:	6123      	str	r3, [r4, #16]
 80160b4:	f8cd 8000 	str.w	r8, [sp]
 80160b8:	463b      	mov	r3, r7
 80160ba:	aa03      	add	r2, sp, #12
 80160bc:	4621      	mov	r1, r4
 80160be:	4630      	mov	r0, r6
 80160c0:	f7ff fef6 	bl	8015eb0 <_printf_common>
 80160c4:	3001      	adds	r0, #1
 80160c6:	d14d      	bne.n	8016164 <_printf_i+0x1c8>
 80160c8:	f04f 30ff 	mov.w	r0, #4294967295
 80160cc:	b005      	add	sp, #20
 80160ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160d2:	4839      	ldr	r0, [pc, #228]	; (80161b8 <_printf_i+0x21c>)
 80160d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80160d8:	6813      	ldr	r3, [r2, #0]
 80160da:	6821      	ldr	r1, [r4, #0]
 80160dc:	1d1d      	adds	r5, r3, #4
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	6015      	str	r5, [r2, #0]
 80160e2:	060a      	lsls	r2, r1, #24
 80160e4:	d50b      	bpl.n	80160fe <_printf_i+0x162>
 80160e6:	07ca      	lsls	r2, r1, #31
 80160e8:	bf44      	itt	mi
 80160ea:	f041 0120 	orrmi.w	r1, r1, #32
 80160ee:	6021      	strmi	r1, [r4, #0]
 80160f0:	b91b      	cbnz	r3, 80160fa <_printf_i+0x15e>
 80160f2:	6822      	ldr	r2, [r4, #0]
 80160f4:	f022 0220 	bic.w	r2, r2, #32
 80160f8:	6022      	str	r2, [r4, #0]
 80160fa:	2210      	movs	r2, #16
 80160fc:	e7b7      	b.n	801606e <_printf_i+0xd2>
 80160fe:	064d      	lsls	r5, r1, #25
 8016100:	bf48      	it	mi
 8016102:	b29b      	uxthmi	r3, r3
 8016104:	e7ef      	b.n	80160e6 <_printf_i+0x14a>
 8016106:	4665      	mov	r5, ip
 8016108:	fbb3 f1f2 	udiv	r1, r3, r2
 801610c:	fb02 3311 	mls	r3, r2, r1, r3
 8016110:	5cc3      	ldrb	r3, [r0, r3]
 8016112:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016116:	460b      	mov	r3, r1
 8016118:	2900      	cmp	r1, #0
 801611a:	d1f5      	bne.n	8016108 <_printf_i+0x16c>
 801611c:	e7b9      	b.n	8016092 <_printf_i+0xf6>
 801611e:	6813      	ldr	r3, [r2, #0]
 8016120:	6825      	ldr	r5, [r4, #0]
 8016122:	6961      	ldr	r1, [r4, #20]
 8016124:	1d18      	adds	r0, r3, #4
 8016126:	6010      	str	r0, [r2, #0]
 8016128:	0628      	lsls	r0, r5, #24
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	d501      	bpl.n	8016132 <_printf_i+0x196>
 801612e:	6019      	str	r1, [r3, #0]
 8016130:	e002      	b.n	8016138 <_printf_i+0x19c>
 8016132:	066a      	lsls	r2, r5, #25
 8016134:	d5fb      	bpl.n	801612e <_printf_i+0x192>
 8016136:	8019      	strh	r1, [r3, #0]
 8016138:	2300      	movs	r3, #0
 801613a:	6123      	str	r3, [r4, #16]
 801613c:	4665      	mov	r5, ip
 801613e:	e7b9      	b.n	80160b4 <_printf_i+0x118>
 8016140:	6813      	ldr	r3, [r2, #0]
 8016142:	1d19      	adds	r1, r3, #4
 8016144:	6011      	str	r1, [r2, #0]
 8016146:	681d      	ldr	r5, [r3, #0]
 8016148:	6862      	ldr	r2, [r4, #4]
 801614a:	2100      	movs	r1, #0
 801614c:	4628      	mov	r0, r5
 801614e:	f7ea f85f 	bl	8000210 <memchr>
 8016152:	b108      	cbz	r0, 8016158 <_printf_i+0x1bc>
 8016154:	1b40      	subs	r0, r0, r5
 8016156:	6060      	str	r0, [r4, #4]
 8016158:	6863      	ldr	r3, [r4, #4]
 801615a:	6123      	str	r3, [r4, #16]
 801615c:	2300      	movs	r3, #0
 801615e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016162:	e7a7      	b.n	80160b4 <_printf_i+0x118>
 8016164:	6923      	ldr	r3, [r4, #16]
 8016166:	462a      	mov	r2, r5
 8016168:	4639      	mov	r1, r7
 801616a:	4630      	mov	r0, r6
 801616c:	47c0      	blx	r8
 801616e:	3001      	adds	r0, #1
 8016170:	d0aa      	beq.n	80160c8 <_printf_i+0x12c>
 8016172:	6823      	ldr	r3, [r4, #0]
 8016174:	079b      	lsls	r3, r3, #30
 8016176:	d413      	bmi.n	80161a0 <_printf_i+0x204>
 8016178:	68e0      	ldr	r0, [r4, #12]
 801617a:	9b03      	ldr	r3, [sp, #12]
 801617c:	4298      	cmp	r0, r3
 801617e:	bfb8      	it	lt
 8016180:	4618      	movlt	r0, r3
 8016182:	e7a3      	b.n	80160cc <_printf_i+0x130>
 8016184:	2301      	movs	r3, #1
 8016186:	464a      	mov	r2, r9
 8016188:	4639      	mov	r1, r7
 801618a:	4630      	mov	r0, r6
 801618c:	47c0      	blx	r8
 801618e:	3001      	adds	r0, #1
 8016190:	d09a      	beq.n	80160c8 <_printf_i+0x12c>
 8016192:	3501      	adds	r5, #1
 8016194:	68e3      	ldr	r3, [r4, #12]
 8016196:	9a03      	ldr	r2, [sp, #12]
 8016198:	1a9b      	subs	r3, r3, r2
 801619a:	42ab      	cmp	r3, r5
 801619c:	dcf2      	bgt.n	8016184 <_printf_i+0x1e8>
 801619e:	e7eb      	b.n	8016178 <_printf_i+0x1dc>
 80161a0:	2500      	movs	r5, #0
 80161a2:	f104 0919 	add.w	r9, r4, #25
 80161a6:	e7f5      	b.n	8016194 <_printf_i+0x1f8>
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d1ac      	bne.n	8016106 <_printf_i+0x16a>
 80161ac:	7803      	ldrb	r3, [r0, #0]
 80161ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80161b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80161b6:	e76c      	b.n	8016092 <_printf_i+0xf6>
 80161b8:	0801a390 	.word	0x0801a390
 80161bc:	0801a3a1 	.word	0x0801a3a1

080161c0 <_scanf_float>:
 80161c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161c4:	469a      	mov	sl, r3
 80161c6:	688b      	ldr	r3, [r1, #8]
 80161c8:	4616      	mov	r6, r2
 80161ca:	1e5a      	subs	r2, r3, #1
 80161cc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80161d0:	b087      	sub	sp, #28
 80161d2:	bf83      	ittte	hi
 80161d4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80161d8:	189b      	addhi	r3, r3, r2
 80161da:	9301      	strhi	r3, [sp, #4]
 80161dc:	2300      	movls	r3, #0
 80161de:	bf86      	itte	hi
 80161e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80161e4:	608b      	strhi	r3, [r1, #8]
 80161e6:	9301      	strls	r3, [sp, #4]
 80161e8:	680b      	ldr	r3, [r1, #0]
 80161ea:	4688      	mov	r8, r1
 80161ec:	f04f 0b00 	mov.w	fp, #0
 80161f0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80161f4:	f848 3b1c 	str.w	r3, [r8], #28
 80161f8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80161fc:	4607      	mov	r7, r0
 80161fe:	460c      	mov	r4, r1
 8016200:	4645      	mov	r5, r8
 8016202:	465a      	mov	r2, fp
 8016204:	46d9      	mov	r9, fp
 8016206:	f8cd b008 	str.w	fp, [sp, #8]
 801620a:	68a1      	ldr	r1, [r4, #8]
 801620c:	b181      	cbz	r1, 8016230 <_scanf_float+0x70>
 801620e:	6833      	ldr	r3, [r6, #0]
 8016210:	781b      	ldrb	r3, [r3, #0]
 8016212:	2b49      	cmp	r3, #73	; 0x49
 8016214:	d071      	beq.n	80162fa <_scanf_float+0x13a>
 8016216:	d84d      	bhi.n	80162b4 <_scanf_float+0xf4>
 8016218:	2b39      	cmp	r3, #57	; 0x39
 801621a:	d840      	bhi.n	801629e <_scanf_float+0xde>
 801621c:	2b31      	cmp	r3, #49	; 0x31
 801621e:	f080 8088 	bcs.w	8016332 <_scanf_float+0x172>
 8016222:	2b2d      	cmp	r3, #45	; 0x2d
 8016224:	f000 8090 	beq.w	8016348 <_scanf_float+0x188>
 8016228:	d815      	bhi.n	8016256 <_scanf_float+0x96>
 801622a:	2b2b      	cmp	r3, #43	; 0x2b
 801622c:	f000 808c 	beq.w	8016348 <_scanf_float+0x188>
 8016230:	f1b9 0f00 	cmp.w	r9, #0
 8016234:	d003      	beq.n	801623e <_scanf_float+0x7e>
 8016236:	6823      	ldr	r3, [r4, #0]
 8016238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801623c:	6023      	str	r3, [r4, #0]
 801623e:	3a01      	subs	r2, #1
 8016240:	2a01      	cmp	r2, #1
 8016242:	f200 80ea 	bhi.w	801641a <_scanf_float+0x25a>
 8016246:	4545      	cmp	r5, r8
 8016248:	f200 80dc 	bhi.w	8016404 <_scanf_float+0x244>
 801624c:	2601      	movs	r6, #1
 801624e:	4630      	mov	r0, r6
 8016250:	b007      	add	sp, #28
 8016252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016256:	2b2e      	cmp	r3, #46	; 0x2e
 8016258:	f000 809f 	beq.w	801639a <_scanf_float+0x1da>
 801625c:	2b30      	cmp	r3, #48	; 0x30
 801625e:	d1e7      	bne.n	8016230 <_scanf_float+0x70>
 8016260:	6820      	ldr	r0, [r4, #0]
 8016262:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016266:	d064      	beq.n	8016332 <_scanf_float+0x172>
 8016268:	9b01      	ldr	r3, [sp, #4]
 801626a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801626e:	6020      	str	r0, [r4, #0]
 8016270:	f109 0901 	add.w	r9, r9, #1
 8016274:	b11b      	cbz	r3, 801627e <_scanf_float+0xbe>
 8016276:	3b01      	subs	r3, #1
 8016278:	3101      	adds	r1, #1
 801627a:	9301      	str	r3, [sp, #4]
 801627c:	60a1      	str	r1, [r4, #8]
 801627e:	68a3      	ldr	r3, [r4, #8]
 8016280:	3b01      	subs	r3, #1
 8016282:	60a3      	str	r3, [r4, #8]
 8016284:	6923      	ldr	r3, [r4, #16]
 8016286:	3301      	adds	r3, #1
 8016288:	6123      	str	r3, [r4, #16]
 801628a:	6873      	ldr	r3, [r6, #4]
 801628c:	3b01      	subs	r3, #1
 801628e:	2b00      	cmp	r3, #0
 8016290:	6073      	str	r3, [r6, #4]
 8016292:	f340 80ac 	ble.w	80163ee <_scanf_float+0x22e>
 8016296:	6833      	ldr	r3, [r6, #0]
 8016298:	3301      	adds	r3, #1
 801629a:	6033      	str	r3, [r6, #0]
 801629c:	e7b5      	b.n	801620a <_scanf_float+0x4a>
 801629e:	2b45      	cmp	r3, #69	; 0x45
 80162a0:	f000 8085 	beq.w	80163ae <_scanf_float+0x1ee>
 80162a4:	2b46      	cmp	r3, #70	; 0x46
 80162a6:	d06a      	beq.n	801637e <_scanf_float+0x1be>
 80162a8:	2b41      	cmp	r3, #65	; 0x41
 80162aa:	d1c1      	bne.n	8016230 <_scanf_float+0x70>
 80162ac:	2a01      	cmp	r2, #1
 80162ae:	d1bf      	bne.n	8016230 <_scanf_float+0x70>
 80162b0:	2202      	movs	r2, #2
 80162b2:	e046      	b.n	8016342 <_scanf_float+0x182>
 80162b4:	2b65      	cmp	r3, #101	; 0x65
 80162b6:	d07a      	beq.n	80163ae <_scanf_float+0x1ee>
 80162b8:	d818      	bhi.n	80162ec <_scanf_float+0x12c>
 80162ba:	2b54      	cmp	r3, #84	; 0x54
 80162bc:	d066      	beq.n	801638c <_scanf_float+0x1cc>
 80162be:	d811      	bhi.n	80162e4 <_scanf_float+0x124>
 80162c0:	2b4e      	cmp	r3, #78	; 0x4e
 80162c2:	d1b5      	bne.n	8016230 <_scanf_float+0x70>
 80162c4:	2a00      	cmp	r2, #0
 80162c6:	d146      	bne.n	8016356 <_scanf_float+0x196>
 80162c8:	f1b9 0f00 	cmp.w	r9, #0
 80162cc:	d145      	bne.n	801635a <_scanf_float+0x19a>
 80162ce:	6821      	ldr	r1, [r4, #0]
 80162d0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80162d4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80162d8:	d13f      	bne.n	801635a <_scanf_float+0x19a>
 80162da:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80162de:	6021      	str	r1, [r4, #0]
 80162e0:	2201      	movs	r2, #1
 80162e2:	e02e      	b.n	8016342 <_scanf_float+0x182>
 80162e4:	2b59      	cmp	r3, #89	; 0x59
 80162e6:	d01e      	beq.n	8016326 <_scanf_float+0x166>
 80162e8:	2b61      	cmp	r3, #97	; 0x61
 80162ea:	e7de      	b.n	80162aa <_scanf_float+0xea>
 80162ec:	2b6e      	cmp	r3, #110	; 0x6e
 80162ee:	d0e9      	beq.n	80162c4 <_scanf_float+0x104>
 80162f0:	d815      	bhi.n	801631e <_scanf_float+0x15e>
 80162f2:	2b66      	cmp	r3, #102	; 0x66
 80162f4:	d043      	beq.n	801637e <_scanf_float+0x1be>
 80162f6:	2b69      	cmp	r3, #105	; 0x69
 80162f8:	d19a      	bne.n	8016230 <_scanf_float+0x70>
 80162fa:	f1bb 0f00 	cmp.w	fp, #0
 80162fe:	d138      	bne.n	8016372 <_scanf_float+0x1b2>
 8016300:	f1b9 0f00 	cmp.w	r9, #0
 8016304:	d197      	bne.n	8016236 <_scanf_float+0x76>
 8016306:	6821      	ldr	r1, [r4, #0]
 8016308:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801630c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016310:	d195      	bne.n	801623e <_scanf_float+0x7e>
 8016312:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016316:	6021      	str	r1, [r4, #0]
 8016318:	f04f 0b01 	mov.w	fp, #1
 801631c:	e011      	b.n	8016342 <_scanf_float+0x182>
 801631e:	2b74      	cmp	r3, #116	; 0x74
 8016320:	d034      	beq.n	801638c <_scanf_float+0x1cc>
 8016322:	2b79      	cmp	r3, #121	; 0x79
 8016324:	d184      	bne.n	8016230 <_scanf_float+0x70>
 8016326:	f1bb 0f07 	cmp.w	fp, #7
 801632a:	d181      	bne.n	8016230 <_scanf_float+0x70>
 801632c:	f04f 0b08 	mov.w	fp, #8
 8016330:	e007      	b.n	8016342 <_scanf_float+0x182>
 8016332:	eb12 0f0b 	cmn.w	r2, fp
 8016336:	f47f af7b 	bne.w	8016230 <_scanf_float+0x70>
 801633a:	6821      	ldr	r1, [r4, #0]
 801633c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016340:	6021      	str	r1, [r4, #0]
 8016342:	702b      	strb	r3, [r5, #0]
 8016344:	3501      	adds	r5, #1
 8016346:	e79a      	b.n	801627e <_scanf_float+0xbe>
 8016348:	6821      	ldr	r1, [r4, #0]
 801634a:	0608      	lsls	r0, r1, #24
 801634c:	f57f af70 	bpl.w	8016230 <_scanf_float+0x70>
 8016350:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016354:	e7f4      	b.n	8016340 <_scanf_float+0x180>
 8016356:	2a02      	cmp	r2, #2
 8016358:	d047      	beq.n	80163ea <_scanf_float+0x22a>
 801635a:	f1bb 0f01 	cmp.w	fp, #1
 801635e:	d003      	beq.n	8016368 <_scanf_float+0x1a8>
 8016360:	f1bb 0f04 	cmp.w	fp, #4
 8016364:	f47f af64 	bne.w	8016230 <_scanf_float+0x70>
 8016368:	f10b 0b01 	add.w	fp, fp, #1
 801636c:	fa5f fb8b 	uxtb.w	fp, fp
 8016370:	e7e7      	b.n	8016342 <_scanf_float+0x182>
 8016372:	f1bb 0f03 	cmp.w	fp, #3
 8016376:	d0f7      	beq.n	8016368 <_scanf_float+0x1a8>
 8016378:	f1bb 0f05 	cmp.w	fp, #5
 801637c:	e7f2      	b.n	8016364 <_scanf_float+0x1a4>
 801637e:	f1bb 0f02 	cmp.w	fp, #2
 8016382:	f47f af55 	bne.w	8016230 <_scanf_float+0x70>
 8016386:	f04f 0b03 	mov.w	fp, #3
 801638a:	e7da      	b.n	8016342 <_scanf_float+0x182>
 801638c:	f1bb 0f06 	cmp.w	fp, #6
 8016390:	f47f af4e 	bne.w	8016230 <_scanf_float+0x70>
 8016394:	f04f 0b07 	mov.w	fp, #7
 8016398:	e7d3      	b.n	8016342 <_scanf_float+0x182>
 801639a:	6821      	ldr	r1, [r4, #0]
 801639c:	0588      	lsls	r0, r1, #22
 801639e:	f57f af47 	bpl.w	8016230 <_scanf_float+0x70>
 80163a2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80163a6:	6021      	str	r1, [r4, #0]
 80163a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80163ac:	e7c9      	b.n	8016342 <_scanf_float+0x182>
 80163ae:	6821      	ldr	r1, [r4, #0]
 80163b0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80163b4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80163b8:	d006      	beq.n	80163c8 <_scanf_float+0x208>
 80163ba:	0548      	lsls	r0, r1, #21
 80163bc:	f57f af38 	bpl.w	8016230 <_scanf_float+0x70>
 80163c0:	f1b9 0f00 	cmp.w	r9, #0
 80163c4:	f43f af3b 	beq.w	801623e <_scanf_float+0x7e>
 80163c8:	0588      	lsls	r0, r1, #22
 80163ca:	bf58      	it	pl
 80163cc:	9802      	ldrpl	r0, [sp, #8]
 80163ce:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80163d2:	bf58      	it	pl
 80163d4:	eba9 0000 	subpl.w	r0, r9, r0
 80163d8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80163dc:	bf58      	it	pl
 80163de:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80163e2:	6021      	str	r1, [r4, #0]
 80163e4:	f04f 0900 	mov.w	r9, #0
 80163e8:	e7ab      	b.n	8016342 <_scanf_float+0x182>
 80163ea:	2203      	movs	r2, #3
 80163ec:	e7a9      	b.n	8016342 <_scanf_float+0x182>
 80163ee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80163f2:	9205      	str	r2, [sp, #20]
 80163f4:	4631      	mov	r1, r6
 80163f6:	4638      	mov	r0, r7
 80163f8:	4798      	blx	r3
 80163fa:	9a05      	ldr	r2, [sp, #20]
 80163fc:	2800      	cmp	r0, #0
 80163fe:	f43f af04 	beq.w	801620a <_scanf_float+0x4a>
 8016402:	e715      	b.n	8016230 <_scanf_float+0x70>
 8016404:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016408:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801640c:	4632      	mov	r2, r6
 801640e:	4638      	mov	r0, r7
 8016410:	4798      	blx	r3
 8016412:	6923      	ldr	r3, [r4, #16]
 8016414:	3b01      	subs	r3, #1
 8016416:	6123      	str	r3, [r4, #16]
 8016418:	e715      	b.n	8016246 <_scanf_float+0x86>
 801641a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801641e:	2b06      	cmp	r3, #6
 8016420:	d80a      	bhi.n	8016438 <_scanf_float+0x278>
 8016422:	f1bb 0f02 	cmp.w	fp, #2
 8016426:	d968      	bls.n	80164fa <_scanf_float+0x33a>
 8016428:	f1ab 0b03 	sub.w	fp, fp, #3
 801642c:	fa5f fb8b 	uxtb.w	fp, fp
 8016430:	eba5 0b0b 	sub.w	fp, r5, fp
 8016434:	455d      	cmp	r5, fp
 8016436:	d14b      	bne.n	80164d0 <_scanf_float+0x310>
 8016438:	6823      	ldr	r3, [r4, #0]
 801643a:	05da      	lsls	r2, r3, #23
 801643c:	d51f      	bpl.n	801647e <_scanf_float+0x2be>
 801643e:	055b      	lsls	r3, r3, #21
 8016440:	d468      	bmi.n	8016514 <_scanf_float+0x354>
 8016442:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016446:	6923      	ldr	r3, [r4, #16]
 8016448:	2965      	cmp	r1, #101	; 0x65
 801644a:	f103 33ff 	add.w	r3, r3, #4294967295
 801644e:	f105 3bff 	add.w	fp, r5, #4294967295
 8016452:	6123      	str	r3, [r4, #16]
 8016454:	d00d      	beq.n	8016472 <_scanf_float+0x2b2>
 8016456:	2945      	cmp	r1, #69	; 0x45
 8016458:	d00b      	beq.n	8016472 <_scanf_float+0x2b2>
 801645a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801645e:	4632      	mov	r2, r6
 8016460:	4638      	mov	r0, r7
 8016462:	4798      	blx	r3
 8016464:	6923      	ldr	r3, [r4, #16]
 8016466:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801646a:	3b01      	subs	r3, #1
 801646c:	f1a5 0b02 	sub.w	fp, r5, #2
 8016470:	6123      	str	r3, [r4, #16]
 8016472:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016476:	4632      	mov	r2, r6
 8016478:	4638      	mov	r0, r7
 801647a:	4798      	blx	r3
 801647c:	465d      	mov	r5, fp
 801647e:	6826      	ldr	r6, [r4, #0]
 8016480:	f016 0610 	ands.w	r6, r6, #16
 8016484:	d17a      	bne.n	801657c <_scanf_float+0x3bc>
 8016486:	702e      	strb	r6, [r5, #0]
 8016488:	6823      	ldr	r3, [r4, #0]
 801648a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801648e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016492:	d142      	bne.n	801651a <_scanf_float+0x35a>
 8016494:	9b02      	ldr	r3, [sp, #8]
 8016496:	eba9 0303 	sub.w	r3, r9, r3
 801649a:	425a      	negs	r2, r3
 801649c:	2b00      	cmp	r3, #0
 801649e:	d149      	bne.n	8016534 <_scanf_float+0x374>
 80164a0:	2200      	movs	r2, #0
 80164a2:	4641      	mov	r1, r8
 80164a4:	4638      	mov	r0, r7
 80164a6:	f000 ff0b 	bl	80172c0 <_strtod_r>
 80164aa:	6825      	ldr	r5, [r4, #0]
 80164ac:	f8da 3000 	ldr.w	r3, [sl]
 80164b0:	f015 0f02 	tst.w	r5, #2
 80164b4:	f103 0204 	add.w	r2, r3, #4
 80164b8:	ec59 8b10 	vmov	r8, r9, d0
 80164bc:	f8ca 2000 	str.w	r2, [sl]
 80164c0:	d043      	beq.n	801654a <_scanf_float+0x38a>
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	e9c3 8900 	strd	r8, r9, [r3]
 80164c8:	68e3      	ldr	r3, [r4, #12]
 80164ca:	3301      	adds	r3, #1
 80164cc:	60e3      	str	r3, [r4, #12]
 80164ce:	e6be      	b.n	801624e <_scanf_float+0x8e>
 80164d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80164d4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80164d8:	4632      	mov	r2, r6
 80164da:	4638      	mov	r0, r7
 80164dc:	4798      	blx	r3
 80164de:	6923      	ldr	r3, [r4, #16]
 80164e0:	3b01      	subs	r3, #1
 80164e2:	6123      	str	r3, [r4, #16]
 80164e4:	e7a6      	b.n	8016434 <_scanf_float+0x274>
 80164e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80164ea:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80164ee:	4632      	mov	r2, r6
 80164f0:	4638      	mov	r0, r7
 80164f2:	4798      	blx	r3
 80164f4:	6923      	ldr	r3, [r4, #16]
 80164f6:	3b01      	subs	r3, #1
 80164f8:	6123      	str	r3, [r4, #16]
 80164fa:	4545      	cmp	r5, r8
 80164fc:	d8f3      	bhi.n	80164e6 <_scanf_float+0x326>
 80164fe:	e6a5      	b.n	801624c <_scanf_float+0x8c>
 8016500:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016504:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016508:	4632      	mov	r2, r6
 801650a:	4638      	mov	r0, r7
 801650c:	4798      	blx	r3
 801650e:	6923      	ldr	r3, [r4, #16]
 8016510:	3b01      	subs	r3, #1
 8016512:	6123      	str	r3, [r4, #16]
 8016514:	4545      	cmp	r5, r8
 8016516:	d8f3      	bhi.n	8016500 <_scanf_float+0x340>
 8016518:	e698      	b.n	801624c <_scanf_float+0x8c>
 801651a:	9b03      	ldr	r3, [sp, #12]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d0bf      	beq.n	80164a0 <_scanf_float+0x2e0>
 8016520:	9904      	ldr	r1, [sp, #16]
 8016522:	230a      	movs	r3, #10
 8016524:	4632      	mov	r2, r6
 8016526:	3101      	adds	r1, #1
 8016528:	4638      	mov	r0, r7
 801652a:	f000 ff55 	bl	80173d8 <_strtol_r>
 801652e:	9b03      	ldr	r3, [sp, #12]
 8016530:	9d04      	ldr	r5, [sp, #16]
 8016532:	1ac2      	subs	r2, r0, r3
 8016534:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016538:	429d      	cmp	r5, r3
 801653a:	bf28      	it	cs
 801653c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016540:	490f      	ldr	r1, [pc, #60]	; (8016580 <_scanf_float+0x3c0>)
 8016542:	4628      	mov	r0, r5
 8016544:	f000 f858 	bl	80165f8 <siprintf>
 8016548:	e7aa      	b.n	80164a0 <_scanf_float+0x2e0>
 801654a:	f015 0504 	ands.w	r5, r5, #4
 801654e:	d1b8      	bne.n	80164c2 <_scanf_float+0x302>
 8016550:	681f      	ldr	r7, [r3, #0]
 8016552:	ee10 2a10 	vmov	r2, s0
 8016556:	464b      	mov	r3, r9
 8016558:	ee10 0a10 	vmov	r0, s0
 801655c:	4649      	mov	r1, r9
 801655e:	f7ea fafd 	bl	8000b5c <__aeabi_dcmpun>
 8016562:	b128      	cbz	r0, 8016570 <_scanf_float+0x3b0>
 8016564:	4628      	mov	r0, r5
 8016566:	f000 f80d 	bl	8016584 <nanf>
 801656a:	ed87 0a00 	vstr	s0, [r7]
 801656e:	e7ab      	b.n	80164c8 <_scanf_float+0x308>
 8016570:	4640      	mov	r0, r8
 8016572:	4649      	mov	r1, r9
 8016574:	f7ea fb50 	bl	8000c18 <__aeabi_d2f>
 8016578:	6038      	str	r0, [r7, #0]
 801657a:	e7a5      	b.n	80164c8 <_scanf_float+0x308>
 801657c:	2600      	movs	r6, #0
 801657e:	e666      	b.n	801624e <_scanf_float+0x8e>
 8016580:	0801a3b2 	.word	0x0801a3b2

08016584 <nanf>:
 8016584:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801658c <nanf+0x8>
 8016588:	4770      	bx	lr
 801658a:	bf00      	nop
 801658c:	7fc00000 	.word	0x7fc00000

08016590 <sniprintf>:
 8016590:	b40c      	push	{r2, r3}
 8016592:	b530      	push	{r4, r5, lr}
 8016594:	4b17      	ldr	r3, [pc, #92]	; (80165f4 <sniprintf+0x64>)
 8016596:	1e0c      	subs	r4, r1, #0
 8016598:	b09d      	sub	sp, #116	; 0x74
 801659a:	681d      	ldr	r5, [r3, #0]
 801659c:	da08      	bge.n	80165b0 <sniprintf+0x20>
 801659e:	238b      	movs	r3, #139	; 0x8b
 80165a0:	602b      	str	r3, [r5, #0]
 80165a2:	f04f 30ff 	mov.w	r0, #4294967295
 80165a6:	b01d      	add	sp, #116	; 0x74
 80165a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80165ac:	b002      	add	sp, #8
 80165ae:	4770      	bx	lr
 80165b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80165b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80165b8:	bf14      	ite	ne
 80165ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80165be:	4623      	moveq	r3, r4
 80165c0:	9304      	str	r3, [sp, #16]
 80165c2:	9307      	str	r3, [sp, #28]
 80165c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165c8:	9002      	str	r0, [sp, #8]
 80165ca:	9006      	str	r0, [sp, #24]
 80165cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80165d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80165d2:	ab21      	add	r3, sp, #132	; 0x84
 80165d4:	a902      	add	r1, sp, #8
 80165d6:	4628      	mov	r0, r5
 80165d8:	9301      	str	r3, [sp, #4]
 80165da:	f002 fdf1 	bl	80191c0 <_svfiprintf_r>
 80165de:	1c43      	adds	r3, r0, #1
 80165e0:	bfbc      	itt	lt
 80165e2:	238b      	movlt	r3, #139	; 0x8b
 80165e4:	602b      	strlt	r3, [r5, #0]
 80165e6:	2c00      	cmp	r4, #0
 80165e8:	d0dd      	beq.n	80165a6 <sniprintf+0x16>
 80165ea:	9b02      	ldr	r3, [sp, #8]
 80165ec:	2200      	movs	r2, #0
 80165ee:	701a      	strb	r2, [r3, #0]
 80165f0:	e7d9      	b.n	80165a6 <sniprintf+0x16>
 80165f2:	bf00      	nop
 80165f4:	2000000c 	.word	0x2000000c

080165f8 <siprintf>:
 80165f8:	b40e      	push	{r1, r2, r3}
 80165fa:	b500      	push	{lr}
 80165fc:	b09c      	sub	sp, #112	; 0x70
 80165fe:	ab1d      	add	r3, sp, #116	; 0x74
 8016600:	9002      	str	r0, [sp, #8]
 8016602:	9006      	str	r0, [sp, #24]
 8016604:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016608:	4809      	ldr	r0, [pc, #36]	; (8016630 <siprintf+0x38>)
 801660a:	9107      	str	r1, [sp, #28]
 801660c:	9104      	str	r1, [sp, #16]
 801660e:	4909      	ldr	r1, [pc, #36]	; (8016634 <siprintf+0x3c>)
 8016610:	f853 2b04 	ldr.w	r2, [r3], #4
 8016614:	9105      	str	r1, [sp, #20]
 8016616:	6800      	ldr	r0, [r0, #0]
 8016618:	9301      	str	r3, [sp, #4]
 801661a:	a902      	add	r1, sp, #8
 801661c:	f002 fdd0 	bl	80191c0 <_svfiprintf_r>
 8016620:	9b02      	ldr	r3, [sp, #8]
 8016622:	2200      	movs	r2, #0
 8016624:	701a      	strb	r2, [r3, #0]
 8016626:	b01c      	add	sp, #112	; 0x70
 8016628:	f85d eb04 	ldr.w	lr, [sp], #4
 801662c:	b003      	add	sp, #12
 801662e:	4770      	bx	lr
 8016630:	2000000c 	.word	0x2000000c
 8016634:	ffff0208 	.word	0xffff0208

08016638 <siscanf>:
 8016638:	b40e      	push	{r1, r2, r3}
 801663a:	b530      	push	{r4, r5, lr}
 801663c:	b09c      	sub	sp, #112	; 0x70
 801663e:	ac1f      	add	r4, sp, #124	; 0x7c
 8016640:	f44f 7201 	mov.w	r2, #516	; 0x204
 8016644:	f854 5b04 	ldr.w	r5, [r4], #4
 8016648:	f8ad 2014 	strh.w	r2, [sp, #20]
 801664c:	9002      	str	r0, [sp, #8]
 801664e:	9006      	str	r0, [sp, #24]
 8016650:	f7e9 fdd6 	bl	8000200 <strlen>
 8016654:	4b0b      	ldr	r3, [pc, #44]	; (8016684 <siscanf+0x4c>)
 8016656:	9003      	str	r0, [sp, #12]
 8016658:	9007      	str	r0, [sp, #28]
 801665a:	930b      	str	r3, [sp, #44]	; 0x2c
 801665c:	480a      	ldr	r0, [pc, #40]	; (8016688 <siscanf+0x50>)
 801665e:	9401      	str	r4, [sp, #4]
 8016660:	2300      	movs	r3, #0
 8016662:	930f      	str	r3, [sp, #60]	; 0x3c
 8016664:	9314      	str	r3, [sp, #80]	; 0x50
 8016666:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801666a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801666e:	462a      	mov	r2, r5
 8016670:	4623      	mov	r3, r4
 8016672:	a902      	add	r1, sp, #8
 8016674:	6800      	ldr	r0, [r0, #0]
 8016676:	f002 fef5 	bl	8019464 <__ssvfiscanf_r>
 801667a:	b01c      	add	sp, #112	; 0x70
 801667c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016680:	b003      	add	sp, #12
 8016682:	4770      	bx	lr
 8016684:	0801668d 	.word	0x0801668d
 8016688:	2000000c 	.word	0x2000000c

0801668c <__seofread>:
 801668c:	2000      	movs	r0, #0
 801668e:	4770      	bx	lr

08016690 <strcpy>:
 8016690:	4603      	mov	r3, r0
 8016692:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016696:	f803 2b01 	strb.w	r2, [r3], #1
 801669a:	2a00      	cmp	r2, #0
 801669c:	d1f9      	bne.n	8016692 <strcpy+0x2>
 801669e:	4770      	bx	lr

080166a0 <sulp>:
 80166a0:	b570      	push	{r4, r5, r6, lr}
 80166a2:	4604      	mov	r4, r0
 80166a4:	460d      	mov	r5, r1
 80166a6:	ec45 4b10 	vmov	d0, r4, r5
 80166aa:	4616      	mov	r6, r2
 80166ac:	f002 fb44 	bl	8018d38 <__ulp>
 80166b0:	ec51 0b10 	vmov	r0, r1, d0
 80166b4:	b17e      	cbz	r6, 80166d6 <sulp+0x36>
 80166b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80166ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80166be:	2b00      	cmp	r3, #0
 80166c0:	dd09      	ble.n	80166d6 <sulp+0x36>
 80166c2:	051b      	lsls	r3, r3, #20
 80166c4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80166c8:	2400      	movs	r4, #0
 80166ca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80166ce:	4622      	mov	r2, r4
 80166d0:	462b      	mov	r3, r5
 80166d2:	f7e9 ffa9 	bl	8000628 <__aeabi_dmul>
 80166d6:	bd70      	pop	{r4, r5, r6, pc}

080166d8 <_strtod_l>:
 80166d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166dc:	461f      	mov	r7, r3
 80166de:	b0a1      	sub	sp, #132	; 0x84
 80166e0:	2300      	movs	r3, #0
 80166e2:	4681      	mov	r9, r0
 80166e4:	4638      	mov	r0, r7
 80166e6:	460e      	mov	r6, r1
 80166e8:	9217      	str	r2, [sp, #92]	; 0x5c
 80166ea:	931c      	str	r3, [sp, #112]	; 0x70
 80166ec:	f002 f824 	bl	8018738 <__localeconv_l>
 80166f0:	4680      	mov	r8, r0
 80166f2:	6800      	ldr	r0, [r0, #0]
 80166f4:	f7e9 fd84 	bl	8000200 <strlen>
 80166f8:	f04f 0a00 	mov.w	sl, #0
 80166fc:	4604      	mov	r4, r0
 80166fe:	f04f 0b00 	mov.w	fp, #0
 8016702:	961b      	str	r6, [sp, #108]	; 0x6c
 8016704:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016706:	781a      	ldrb	r2, [r3, #0]
 8016708:	2a0d      	cmp	r2, #13
 801670a:	d832      	bhi.n	8016772 <_strtod_l+0x9a>
 801670c:	2a09      	cmp	r2, #9
 801670e:	d236      	bcs.n	801677e <_strtod_l+0xa6>
 8016710:	2a00      	cmp	r2, #0
 8016712:	d03e      	beq.n	8016792 <_strtod_l+0xba>
 8016714:	2300      	movs	r3, #0
 8016716:	930d      	str	r3, [sp, #52]	; 0x34
 8016718:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801671a:	782b      	ldrb	r3, [r5, #0]
 801671c:	2b30      	cmp	r3, #48	; 0x30
 801671e:	f040 80ac 	bne.w	801687a <_strtod_l+0x1a2>
 8016722:	786b      	ldrb	r3, [r5, #1]
 8016724:	2b58      	cmp	r3, #88	; 0x58
 8016726:	d001      	beq.n	801672c <_strtod_l+0x54>
 8016728:	2b78      	cmp	r3, #120	; 0x78
 801672a:	d167      	bne.n	80167fc <_strtod_l+0x124>
 801672c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801672e:	9301      	str	r3, [sp, #4]
 8016730:	ab1c      	add	r3, sp, #112	; 0x70
 8016732:	9300      	str	r3, [sp, #0]
 8016734:	9702      	str	r7, [sp, #8]
 8016736:	ab1d      	add	r3, sp, #116	; 0x74
 8016738:	4a88      	ldr	r2, [pc, #544]	; (801695c <_strtod_l+0x284>)
 801673a:	a91b      	add	r1, sp, #108	; 0x6c
 801673c:	4648      	mov	r0, r9
 801673e:	f001 fd12 	bl	8018166 <__gethex>
 8016742:	f010 0407 	ands.w	r4, r0, #7
 8016746:	4606      	mov	r6, r0
 8016748:	d005      	beq.n	8016756 <_strtod_l+0x7e>
 801674a:	2c06      	cmp	r4, #6
 801674c:	d12b      	bne.n	80167a6 <_strtod_l+0xce>
 801674e:	3501      	adds	r5, #1
 8016750:	2300      	movs	r3, #0
 8016752:	951b      	str	r5, [sp, #108]	; 0x6c
 8016754:	930d      	str	r3, [sp, #52]	; 0x34
 8016756:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016758:	2b00      	cmp	r3, #0
 801675a:	f040 859a 	bne.w	8017292 <_strtod_l+0xbba>
 801675e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016760:	b1e3      	cbz	r3, 801679c <_strtod_l+0xc4>
 8016762:	4652      	mov	r2, sl
 8016764:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016768:	ec43 2b10 	vmov	d0, r2, r3
 801676c:	b021      	add	sp, #132	; 0x84
 801676e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016772:	2a2b      	cmp	r2, #43	; 0x2b
 8016774:	d015      	beq.n	80167a2 <_strtod_l+0xca>
 8016776:	2a2d      	cmp	r2, #45	; 0x2d
 8016778:	d004      	beq.n	8016784 <_strtod_l+0xac>
 801677a:	2a20      	cmp	r2, #32
 801677c:	d1ca      	bne.n	8016714 <_strtod_l+0x3c>
 801677e:	3301      	adds	r3, #1
 8016780:	931b      	str	r3, [sp, #108]	; 0x6c
 8016782:	e7bf      	b.n	8016704 <_strtod_l+0x2c>
 8016784:	2201      	movs	r2, #1
 8016786:	920d      	str	r2, [sp, #52]	; 0x34
 8016788:	1c5a      	adds	r2, r3, #1
 801678a:	921b      	str	r2, [sp, #108]	; 0x6c
 801678c:	785b      	ldrb	r3, [r3, #1]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d1c2      	bne.n	8016718 <_strtod_l+0x40>
 8016792:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016794:	961b      	str	r6, [sp, #108]	; 0x6c
 8016796:	2b00      	cmp	r3, #0
 8016798:	f040 8579 	bne.w	801728e <_strtod_l+0xbb6>
 801679c:	4652      	mov	r2, sl
 801679e:	465b      	mov	r3, fp
 80167a0:	e7e2      	b.n	8016768 <_strtod_l+0x90>
 80167a2:	2200      	movs	r2, #0
 80167a4:	e7ef      	b.n	8016786 <_strtod_l+0xae>
 80167a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80167a8:	b13a      	cbz	r2, 80167ba <_strtod_l+0xe2>
 80167aa:	2135      	movs	r1, #53	; 0x35
 80167ac:	a81e      	add	r0, sp, #120	; 0x78
 80167ae:	f002 fbbb 	bl	8018f28 <__copybits>
 80167b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80167b4:	4648      	mov	r0, r9
 80167b6:	f002 f828 	bl	801880a <_Bfree>
 80167ba:	3c01      	subs	r4, #1
 80167bc:	2c04      	cmp	r4, #4
 80167be:	d806      	bhi.n	80167ce <_strtod_l+0xf6>
 80167c0:	e8df f004 	tbb	[pc, r4]
 80167c4:	1714030a 	.word	0x1714030a
 80167c8:	0a          	.byte	0x0a
 80167c9:	00          	.byte	0x00
 80167ca:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80167ce:	0730      	lsls	r0, r6, #28
 80167d0:	d5c1      	bpl.n	8016756 <_strtod_l+0x7e>
 80167d2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80167d6:	e7be      	b.n	8016756 <_strtod_l+0x7e>
 80167d8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80167dc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80167de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80167e2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80167e6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80167ea:	e7f0      	b.n	80167ce <_strtod_l+0xf6>
 80167ec:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016960 <_strtod_l+0x288>
 80167f0:	e7ed      	b.n	80167ce <_strtod_l+0xf6>
 80167f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80167f6:	f04f 3aff 	mov.w	sl, #4294967295
 80167fa:	e7e8      	b.n	80167ce <_strtod_l+0xf6>
 80167fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167fe:	1c5a      	adds	r2, r3, #1
 8016800:	921b      	str	r2, [sp, #108]	; 0x6c
 8016802:	785b      	ldrb	r3, [r3, #1]
 8016804:	2b30      	cmp	r3, #48	; 0x30
 8016806:	d0f9      	beq.n	80167fc <_strtod_l+0x124>
 8016808:	2b00      	cmp	r3, #0
 801680a:	d0a4      	beq.n	8016756 <_strtod_l+0x7e>
 801680c:	2301      	movs	r3, #1
 801680e:	2500      	movs	r5, #0
 8016810:	9306      	str	r3, [sp, #24]
 8016812:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016814:	9308      	str	r3, [sp, #32]
 8016816:	9507      	str	r5, [sp, #28]
 8016818:	9505      	str	r5, [sp, #20]
 801681a:	220a      	movs	r2, #10
 801681c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801681e:	7807      	ldrb	r7, [r0, #0]
 8016820:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8016824:	b2d9      	uxtb	r1, r3
 8016826:	2909      	cmp	r1, #9
 8016828:	d929      	bls.n	801687e <_strtod_l+0x1a6>
 801682a:	4622      	mov	r2, r4
 801682c:	f8d8 1000 	ldr.w	r1, [r8]
 8016830:	f003 f902 	bl	8019a38 <strncmp>
 8016834:	2800      	cmp	r0, #0
 8016836:	d031      	beq.n	801689c <_strtod_l+0x1c4>
 8016838:	2000      	movs	r0, #0
 801683a:	9c05      	ldr	r4, [sp, #20]
 801683c:	9004      	str	r0, [sp, #16]
 801683e:	463b      	mov	r3, r7
 8016840:	4602      	mov	r2, r0
 8016842:	2b65      	cmp	r3, #101	; 0x65
 8016844:	d001      	beq.n	801684a <_strtod_l+0x172>
 8016846:	2b45      	cmp	r3, #69	; 0x45
 8016848:	d114      	bne.n	8016874 <_strtod_l+0x19c>
 801684a:	b924      	cbnz	r4, 8016856 <_strtod_l+0x17e>
 801684c:	b910      	cbnz	r0, 8016854 <_strtod_l+0x17c>
 801684e:	9b06      	ldr	r3, [sp, #24]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d09e      	beq.n	8016792 <_strtod_l+0xba>
 8016854:	2400      	movs	r4, #0
 8016856:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016858:	1c73      	adds	r3, r6, #1
 801685a:	931b      	str	r3, [sp, #108]	; 0x6c
 801685c:	7873      	ldrb	r3, [r6, #1]
 801685e:	2b2b      	cmp	r3, #43	; 0x2b
 8016860:	d078      	beq.n	8016954 <_strtod_l+0x27c>
 8016862:	2b2d      	cmp	r3, #45	; 0x2d
 8016864:	d070      	beq.n	8016948 <_strtod_l+0x270>
 8016866:	f04f 0c00 	mov.w	ip, #0
 801686a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801686e:	2f09      	cmp	r7, #9
 8016870:	d97c      	bls.n	801696c <_strtod_l+0x294>
 8016872:	961b      	str	r6, [sp, #108]	; 0x6c
 8016874:	f04f 0e00 	mov.w	lr, #0
 8016878:	e09a      	b.n	80169b0 <_strtod_l+0x2d8>
 801687a:	2300      	movs	r3, #0
 801687c:	e7c7      	b.n	801680e <_strtod_l+0x136>
 801687e:	9905      	ldr	r1, [sp, #20]
 8016880:	2908      	cmp	r1, #8
 8016882:	bfdd      	ittte	le
 8016884:	9907      	ldrle	r1, [sp, #28]
 8016886:	fb02 3301 	mlale	r3, r2, r1, r3
 801688a:	9307      	strle	r3, [sp, #28]
 801688c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016890:	9b05      	ldr	r3, [sp, #20]
 8016892:	3001      	adds	r0, #1
 8016894:	3301      	adds	r3, #1
 8016896:	9305      	str	r3, [sp, #20]
 8016898:	901b      	str	r0, [sp, #108]	; 0x6c
 801689a:	e7bf      	b.n	801681c <_strtod_l+0x144>
 801689c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801689e:	191a      	adds	r2, r3, r4
 80168a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80168a2:	9a05      	ldr	r2, [sp, #20]
 80168a4:	5d1b      	ldrb	r3, [r3, r4]
 80168a6:	2a00      	cmp	r2, #0
 80168a8:	d037      	beq.n	801691a <_strtod_l+0x242>
 80168aa:	9c05      	ldr	r4, [sp, #20]
 80168ac:	4602      	mov	r2, r0
 80168ae:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80168b2:	2909      	cmp	r1, #9
 80168b4:	d913      	bls.n	80168de <_strtod_l+0x206>
 80168b6:	2101      	movs	r1, #1
 80168b8:	9104      	str	r1, [sp, #16]
 80168ba:	e7c2      	b.n	8016842 <_strtod_l+0x16a>
 80168bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168be:	1c5a      	adds	r2, r3, #1
 80168c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80168c2:	785b      	ldrb	r3, [r3, #1]
 80168c4:	3001      	adds	r0, #1
 80168c6:	2b30      	cmp	r3, #48	; 0x30
 80168c8:	d0f8      	beq.n	80168bc <_strtod_l+0x1e4>
 80168ca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80168ce:	2a08      	cmp	r2, #8
 80168d0:	f200 84e4 	bhi.w	801729c <_strtod_l+0xbc4>
 80168d4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80168d6:	9208      	str	r2, [sp, #32]
 80168d8:	4602      	mov	r2, r0
 80168da:	2000      	movs	r0, #0
 80168dc:	4604      	mov	r4, r0
 80168de:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80168e2:	f100 0101 	add.w	r1, r0, #1
 80168e6:	d012      	beq.n	801690e <_strtod_l+0x236>
 80168e8:	440a      	add	r2, r1
 80168ea:	eb00 0c04 	add.w	ip, r0, r4
 80168ee:	4621      	mov	r1, r4
 80168f0:	270a      	movs	r7, #10
 80168f2:	458c      	cmp	ip, r1
 80168f4:	d113      	bne.n	801691e <_strtod_l+0x246>
 80168f6:	1821      	adds	r1, r4, r0
 80168f8:	2908      	cmp	r1, #8
 80168fa:	f104 0401 	add.w	r4, r4, #1
 80168fe:	4404      	add	r4, r0
 8016900:	dc19      	bgt.n	8016936 <_strtod_l+0x25e>
 8016902:	9b07      	ldr	r3, [sp, #28]
 8016904:	210a      	movs	r1, #10
 8016906:	fb01 e303 	mla	r3, r1, r3, lr
 801690a:	9307      	str	r3, [sp, #28]
 801690c:	2100      	movs	r1, #0
 801690e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016910:	1c58      	adds	r0, r3, #1
 8016912:	901b      	str	r0, [sp, #108]	; 0x6c
 8016914:	785b      	ldrb	r3, [r3, #1]
 8016916:	4608      	mov	r0, r1
 8016918:	e7c9      	b.n	80168ae <_strtod_l+0x1d6>
 801691a:	9805      	ldr	r0, [sp, #20]
 801691c:	e7d3      	b.n	80168c6 <_strtod_l+0x1ee>
 801691e:	2908      	cmp	r1, #8
 8016920:	f101 0101 	add.w	r1, r1, #1
 8016924:	dc03      	bgt.n	801692e <_strtod_l+0x256>
 8016926:	9b07      	ldr	r3, [sp, #28]
 8016928:	437b      	muls	r3, r7
 801692a:	9307      	str	r3, [sp, #28]
 801692c:	e7e1      	b.n	80168f2 <_strtod_l+0x21a>
 801692e:	2910      	cmp	r1, #16
 8016930:	bfd8      	it	le
 8016932:	437d      	mulle	r5, r7
 8016934:	e7dd      	b.n	80168f2 <_strtod_l+0x21a>
 8016936:	2c10      	cmp	r4, #16
 8016938:	bfdc      	itt	le
 801693a:	210a      	movle	r1, #10
 801693c:	fb01 e505 	mlale	r5, r1, r5, lr
 8016940:	e7e4      	b.n	801690c <_strtod_l+0x234>
 8016942:	2301      	movs	r3, #1
 8016944:	9304      	str	r3, [sp, #16]
 8016946:	e781      	b.n	801684c <_strtod_l+0x174>
 8016948:	f04f 0c01 	mov.w	ip, #1
 801694c:	1cb3      	adds	r3, r6, #2
 801694e:	931b      	str	r3, [sp, #108]	; 0x6c
 8016950:	78b3      	ldrb	r3, [r6, #2]
 8016952:	e78a      	b.n	801686a <_strtod_l+0x192>
 8016954:	f04f 0c00 	mov.w	ip, #0
 8016958:	e7f8      	b.n	801694c <_strtod_l+0x274>
 801695a:	bf00      	nop
 801695c:	0801a3b8 	.word	0x0801a3b8
 8016960:	7ff00000 	.word	0x7ff00000
 8016964:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016966:	1c5f      	adds	r7, r3, #1
 8016968:	971b      	str	r7, [sp, #108]	; 0x6c
 801696a:	785b      	ldrb	r3, [r3, #1]
 801696c:	2b30      	cmp	r3, #48	; 0x30
 801696e:	d0f9      	beq.n	8016964 <_strtod_l+0x28c>
 8016970:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016974:	2f08      	cmp	r7, #8
 8016976:	f63f af7d 	bhi.w	8016874 <_strtod_l+0x19c>
 801697a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801697e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016980:	930a      	str	r3, [sp, #40]	; 0x28
 8016982:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016984:	1c5f      	adds	r7, r3, #1
 8016986:	971b      	str	r7, [sp, #108]	; 0x6c
 8016988:	785b      	ldrb	r3, [r3, #1]
 801698a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801698e:	f1b8 0f09 	cmp.w	r8, #9
 8016992:	d937      	bls.n	8016a04 <_strtod_l+0x32c>
 8016994:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016996:	1a7f      	subs	r7, r7, r1
 8016998:	2f08      	cmp	r7, #8
 801699a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801699e:	dc37      	bgt.n	8016a10 <_strtod_l+0x338>
 80169a0:	45be      	cmp	lr, r7
 80169a2:	bfa8      	it	ge
 80169a4:	46be      	movge	lr, r7
 80169a6:	f1bc 0f00 	cmp.w	ip, #0
 80169aa:	d001      	beq.n	80169b0 <_strtod_l+0x2d8>
 80169ac:	f1ce 0e00 	rsb	lr, lr, #0
 80169b0:	2c00      	cmp	r4, #0
 80169b2:	d151      	bne.n	8016a58 <_strtod_l+0x380>
 80169b4:	2800      	cmp	r0, #0
 80169b6:	f47f aece 	bne.w	8016756 <_strtod_l+0x7e>
 80169ba:	9a06      	ldr	r2, [sp, #24]
 80169bc:	2a00      	cmp	r2, #0
 80169be:	f47f aeca 	bne.w	8016756 <_strtod_l+0x7e>
 80169c2:	9a04      	ldr	r2, [sp, #16]
 80169c4:	2a00      	cmp	r2, #0
 80169c6:	f47f aee4 	bne.w	8016792 <_strtod_l+0xba>
 80169ca:	2b4e      	cmp	r3, #78	; 0x4e
 80169cc:	d027      	beq.n	8016a1e <_strtod_l+0x346>
 80169ce:	dc21      	bgt.n	8016a14 <_strtod_l+0x33c>
 80169d0:	2b49      	cmp	r3, #73	; 0x49
 80169d2:	f47f aede 	bne.w	8016792 <_strtod_l+0xba>
 80169d6:	49a0      	ldr	r1, [pc, #640]	; (8016c58 <_strtod_l+0x580>)
 80169d8:	a81b      	add	r0, sp, #108	; 0x6c
 80169da:	f001 fdf7 	bl	80185cc <__match>
 80169de:	2800      	cmp	r0, #0
 80169e0:	f43f aed7 	beq.w	8016792 <_strtod_l+0xba>
 80169e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169e6:	499d      	ldr	r1, [pc, #628]	; (8016c5c <_strtod_l+0x584>)
 80169e8:	3b01      	subs	r3, #1
 80169ea:	a81b      	add	r0, sp, #108	; 0x6c
 80169ec:	931b      	str	r3, [sp, #108]	; 0x6c
 80169ee:	f001 fded 	bl	80185cc <__match>
 80169f2:	b910      	cbnz	r0, 80169fa <_strtod_l+0x322>
 80169f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169f6:	3301      	adds	r3, #1
 80169f8:	931b      	str	r3, [sp, #108]	; 0x6c
 80169fa:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016c70 <_strtod_l+0x598>
 80169fe:	f04f 0a00 	mov.w	sl, #0
 8016a02:	e6a8      	b.n	8016756 <_strtod_l+0x7e>
 8016a04:	210a      	movs	r1, #10
 8016a06:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016a0a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016a0e:	e7b8      	b.n	8016982 <_strtod_l+0x2aa>
 8016a10:	46be      	mov	lr, r7
 8016a12:	e7c8      	b.n	80169a6 <_strtod_l+0x2ce>
 8016a14:	2b69      	cmp	r3, #105	; 0x69
 8016a16:	d0de      	beq.n	80169d6 <_strtod_l+0x2fe>
 8016a18:	2b6e      	cmp	r3, #110	; 0x6e
 8016a1a:	f47f aeba 	bne.w	8016792 <_strtod_l+0xba>
 8016a1e:	4990      	ldr	r1, [pc, #576]	; (8016c60 <_strtod_l+0x588>)
 8016a20:	a81b      	add	r0, sp, #108	; 0x6c
 8016a22:	f001 fdd3 	bl	80185cc <__match>
 8016a26:	2800      	cmp	r0, #0
 8016a28:	f43f aeb3 	beq.w	8016792 <_strtod_l+0xba>
 8016a2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a2e:	781b      	ldrb	r3, [r3, #0]
 8016a30:	2b28      	cmp	r3, #40	; 0x28
 8016a32:	d10e      	bne.n	8016a52 <_strtod_l+0x37a>
 8016a34:	aa1e      	add	r2, sp, #120	; 0x78
 8016a36:	498b      	ldr	r1, [pc, #556]	; (8016c64 <_strtod_l+0x58c>)
 8016a38:	a81b      	add	r0, sp, #108	; 0x6c
 8016a3a:	f001 fddb 	bl	80185f4 <__hexnan>
 8016a3e:	2805      	cmp	r0, #5
 8016a40:	d107      	bne.n	8016a52 <_strtod_l+0x37a>
 8016a42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016a44:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016a48:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016a4c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016a50:	e681      	b.n	8016756 <_strtod_l+0x7e>
 8016a52:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016c78 <_strtod_l+0x5a0>
 8016a56:	e7d2      	b.n	80169fe <_strtod_l+0x326>
 8016a58:	ebae 0302 	sub.w	r3, lr, r2
 8016a5c:	9306      	str	r3, [sp, #24]
 8016a5e:	9b05      	ldr	r3, [sp, #20]
 8016a60:	9807      	ldr	r0, [sp, #28]
 8016a62:	2b00      	cmp	r3, #0
 8016a64:	bf08      	it	eq
 8016a66:	4623      	moveq	r3, r4
 8016a68:	2c10      	cmp	r4, #16
 8016a6a:	9305      	str	r3, [sp, #20]
 8016a6c:	46a0      	mov	r8, r4
 8016a6e:	bfa8      	it	ge
 8016a70:	f04f 0810 	movge.w	r8, #16
 8016a74:	f7e9 fd5e 	bl	8000534 <__aeabi_ui2d>
 8016a78:	2c09      	cmp	r4, #9
 8016a7a:	4682      	mov	sl, r0
 8016a7c:	468b      	mov	fp, r1
 8016a7e:	dc13      	bgt.n	8016aa8 <_strtod_l+0x3d0>
 8016a80:	9b06      	ldr	r3, [sp, #24]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	f43f ae67 	beq.w	8016756 <_strtod_l+0x7e>
 8016a88:	9b06      	ldr	r3, [sp, #24]
 8016a8a:	dd7a      	ble.n	8016b82 <_strtod_l+0x4aa>
 8016a8c:	2b16      	cmp	r3, #22
 8016a8e:	dc61      	bgt.n	8016b54 <_strtod_l+0x47c>
 8016a90:	4a75      	ldr	r2, [pc, #468]	; (8016c68 <_strtod_l+0x590>)
 8016a92:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016a96:	e9de 0100 	ldrd	r0, r1, [lr]
 8016a9a:	4652      	mov	r2, sl
 8016a9c:	465b      	mov	r3, fp
 8016a9e:	f7e9 fdc3 	bl	8000628 <__aeabi_dmul>
 8016aa2:	4682      	mov	sl, r0
 8016aa4:	468b      	mov	fp, r1
 8016aa6:	e656      	b.n	8016756 <_strtod_l+0x7e>
 8016aa8:	4b6f      	ldr	r3, [pc, #444]	; (8016c68 <_strtod_l+0x590>)
 8016aaa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016aae:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016ab2:	f7e9 fdb9 	bl	8000628 <__aeabi_dmul>
 8016ab6:	4606      	mov	r6, r0
 8016ab8:	4628      	mov	r0, r5
 8016aba:	460f      	mov	r7, r1
 8016abc:	f7e9 fd3a 	bl	8000534 <__aeabi_ui2d>
 8016ac0:	4602      	mov	r2, r0
 8016ac2:	460b      	mov	r3, r1
 8016ac4:	4630      	mov	r0, r6
 8016ac6:	4639      	mov	r1, r7
 8016ac8:	f7e9 fbf8 	bl	80002bc <__adddf3>
 8016acc:	2c0f      	cmp	r4, #15
 8016ace:	4682      	mov	sl, r0
 8016ad0:	468b      	mov	fp, r1
 8016ad2:	ddd5      	ble.n	8016a80 <_strtod_l+0x3a8>
 8016ad4:	9b06      	ldr	r3, [sp, #24]
 8016ad6:	eba4 0808 	sub.w	r8, r4, r8
 8016ada:	4498      	add	r8, r3
 8016adc:	f1b8 0f00 	cmp.w	r8, #0
 8016ae0:	f340 8096 	ble.w	8016c10 <_strtod_l+0x538>
 8016ae4:	f018 030f 	ands.w	r3, r8, #15
 8016ae8:	d00a      	beq.n	8016b00 <_strtod_l+0x428>
 8016aea:	495f      	ldr	r1, [pc, #380]	; (8016c68 <_strtod_l+0x590>)
 8016aec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016af0:	4652      	mov	r2, sl
 8016af2:	465b      	mov	r3, fp
 8016af4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016af8:	f7e9 fd96 	bl	8000628 <__aeabi_dmul>
 8016afc:	4682      	mov	sl, r0
 8016afe:	468b      	mov	fp, r1
 8016b00:	f038 080f 	bics.w	r8, r8, #15
 8016b04:	d073      	beq.n	8016bee <_strtod_l+0x516>
 8016b06:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016b0a:	dd47      	ble.n	8016b9c <_strtod_l+0x4c4>
 8016b0c:	2400      	movs	r4, #0
 8016b0e:	46a0      	mov	r8, r4
 8016b10:	9407      	str	r4, [sp, #28]
 8016b12:	9405      	str	r4, [sp, #20]
 8016b14:	2322      	movs	r3, #34	; 0x22
 8016b16:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016c70 <_strtod_l+0x598>
 8016b1a:	f8c9 3000 	str.w	r3, [r9]
 8016b1e:	f04f 0a00 	mov.w	sl, #0
 8016b22:	9b07      	ldr	r3, [sp, #28]
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	f43f ae16 	beq.w	8016756 <_strtod_l+0x7e>
 8016b2a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016b2c:	4648      	mov	r0, r9
 8016b2e:	f001 fe6c 	bl	801880a <_Bfree>
 8016b32:	9905      	ldr	r1, [sp, #20]
 8016b34:	4648      	mov	r0, r9
 8016b36:	f001 fe68 	bl	801880a <_Bfree>
 8016b3a:	4641      	mov	r1, r8
 8016b3c:	4648      	mov	r0, r9
 8016b3e:	f001 fe64 	bl	801880a <_Bfree>
 8016b42:	9907      	ldr	r1, [sp, #28]
 8016b44:	4648      	mov	r0, r9
 8016b46:	f001 fe60 	bl	801880a <_Bfree>
 8016b4a:	4621      	mov	r1, r4
 8016b4c:	4648      	mov	r0, r9
 8016b4e:	f001 fe5c 	bl	801880a <_Bfree>
 8016b52:	e600      	b.n	8016756 <_strtod_l+0x7e>
 8016b54:	9a06      	ldr	r2, [sp, #24]
 8016b56:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016b5a:	4293      	cmp	r3, r2
 8016b5c:	dbba      	blt.n	8016ad4 <_strtod_l+0x3fc>
 8016b5e:	4d42      	ldr	r5, [pc, #264]	; (8016c68 <_strtod_l+0x590>)
 8016b60:	f1c4 040f 	rsb	r4, r4, #15
 8016b64:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016b68:	4652      	mov	r2, sl
 8016b6a:	465b      	mov	r3, fp
 8016b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b70:	f7e9 fd5a 	bl	8000628 <__aeabi_dmul>
 8016b74:	9b06      	ldr	r3, [sp, #24]
 8016b76:	1b1c      	subs	r4, r3, r4
 8016b78:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016b7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016b80:	e78d      	b.n	8016a9e <_strtod_l+0x3c6>
 8016b82:	f113 0f16 	cmn.w	r3, #22
 8016b86:	dba5      	blt.n	8016ad4 <_strtod_l+0x3fc>
 8016b88:	4a37      	ldr	r2, [pc, #220]	; (8016c68 <_strtod_l+0x590>)
 8016b8a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016b8e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016b92:	4650      	mov	r0, sl
 8016b94:	4659      	mov	r1, fp
 8016b96:	f7e9 fe71 	bl	800087c <__aeabi_ddiv>
 8016b9a:	e782      	b.n	8016aa2 <_strtod_l+0x3ca>
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	4e33      	ldr	r6, [pc, #204]	; (8016c6c <_strtod_l+0x594>)
 8016ba0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016ba4:	4650      	mov	r0, sl
 8016ba6:	4659      	mov	r1, fp
 8016ba8:	461d      	mov	r5, r3
 8016baa:	f1b8 0f01 	cmp.w	r8, #1
 8016bae:	dc21      	bgt.n	8016bf4 <_strtod_l+0x51c>
 8016bb0:	b10b      	cbz	r3, 8016bb6 <_strtod_l+0x4de>
 8016bb2:	4682      	mov	sl, r0
 8016bb4:	468b      	mov	fp, r1
 8016bb6:	4b2d      	ldr	r3, [pc, #180]	; (8016c6c <_strtod_l+0x594>)
 8016bb8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016bbc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016bc0:	4652      	mov	r2, sl
 8016bc2:	465b      	mov	r3, fp
 8016bc4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016bc8:	f7e9 fd2e 	bl	8000628 <__aeabi_dmul>
 8016bcc:	4b28      	ldr	r3, [pc, #160]	; (8016c70 <_strtod_l+0x598>)
 8016bce:	460a      	mov	r2, r1
 8016bd0:	400b      	ands	r3, r1
 8016bd2:	4928      	ldr	r1, [pc, #160]	; (8016c74 <_strtod_l+0x59c>)
 8016bd4:	428b      	cmp	r3, r1
 8016bd6:	4682      	mov	sl, r0
 8016bd8:	d898      	bhi.n	8016b0c <_strtod_l+0x434>
 8016bda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016bde:	428b      	cmp	r3, r1
 8016be0:	bf86      	itte	hi
 8016be2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016c7c <_strtod_l+0x5a4>
 8016be6:	f04f 3aff 	movhi.w	sl, #4294967295
 8016bea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016bee:	2300      	movs	r3, #0
 8016bf0:	9304      	str	r3, [sp, #16]
 8016bf2:	e077      	b.n	8016ce4 <_strtod_l+0x60c>
 8016bf4:	f018 0f01 	tst.w	r8, #1
 8016bf8:	d006      	beq.n	8016c08 <_strtod_l+0x530>
 8016bfa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c02:	f7e9 fd11 	bl	8000628 <__aeabi_dmul>
 8016c06:	2301      	movs	r3, #1
 8016c08:	3501      	adds	r5, #1
 8016c0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016c0e:	e7cc      	b.n	8016baa <_strtod_l+0x4d2>
 8016c10:	d0ed      	beq.n	8016bee <_strtod_l+0x516>
 8016c12:	f1c8 0800 	rsb	r8, r8, #0
 8016c16:	f018 020f 	ands.w	r2, r8, #15
 8016c1a:	d00a      	beq.n	8016c32 <_strtod_l+0x55a>
 8016c1c:	4b12      	ldr	r3, [pc, #72]	; (8016c68 <_strtod_l+0x590>)
 8016c1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016c22:	4650      	mov	r0, sl
 8016c24:	4659      	mov	r1, fp
 8016c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c2a:	f7e9 fe27 	bl	800087c <__aeabi_ddiv>
 8016c2e:	4682      	mov	sl, r0
 8016c30:	468b      	mov	fp, r1
 8016c32:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016c36:	d0da      	beq.n	8016bee <_strtod_l+0x516>
 8016c38:	f1b8 0f1f 	cmp.w	r8, #31
 8016c3c:	dd20      	ble.n	8016c80 <_strtod_l+0x5a8>
 8016c3e:	2400      	movs	r4, #0
 8016c40:	46a0      	mov	r8, r4
 8016c42:	9407      	str	r4, [sp, #28]
 8016c44:	9405      	str	r4, [sp, #20]
 8016c46:	2322      	movs	r3, #34	; 0x22
 8016c48:	f04f 0a00 	mov.w	sl, #0
 8016c4c:	f04f 0b00 	mov.w	fp, #0
 8016c50:	f8c9 3000 	str.w	r3, [r9]
 8016c54:	e765      	b.n	8016b22 <_strtod_l+0x44a>
 8016c56:	bf00      	nop
 8016c58:	0801a385 	.word	0x0801a385
 8016c5c:	0801a40b 	.word	0x0801a40b
 8016c60:	0801a38d 	.word	0x0801a38d
 8016c64:	0801a3cc 	.word	0x0801a3cc
 8016c68:	0801a448 	.word	0x0801a448
 8016c6c:	0801a420 	.word	0x0801a420
 8016c70:	7ff00000 	.word	0x7ff00000
 8016c74:	7ca00000 	.word	0x7ca00000
 8016c78:	fff80000 	.word	0xfff80000
 8016c7c:	7fefffff 	.word	0x7fefffff
 8016c80:	f018 0310 	ands.w	r3, r8, #16
 8016c84:	bf18      	it	ne
 8016c86:	236a      	movne	r3, #106	; 0x6a
 8016c88:	4da0      	ldr	r5, [pc, #640]	; (8016f0c <_strtod_l+0x834>)
 8016c8a:	9304      	str	r3, [sp, #16]
 8016c8c:	4650      	mov	r0, sl
 8016c8e:	4659      	mov	r1, fp
 8016c90:	2300      	movs	r3, #0
 8016c92:	f1b8 0f00 	cmp.w	r8, #0
 8016c96:	f300 810a 	bgt.w	8016eae <_strtod_l+0x7d6>
 8016c9a:	b10b      	cbz	r3, 8016ca0 <_strtod_l+0x5c8>
 8016c9c:	4682      	mov	sl, r0
 8016c9e:	468b      	mov	fp, r1
 8016ca0:	9b04      	ldr	r3, [sp, #16]
 8016ca2:	b1bb      	cbz	r3, 8016cd4 <_strtod_l+0x5fc>
 8016ca4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016ca8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	4659      	mov	r1, fp
 8016cb0:	dd10      	ble.n	8016cd4 <_strtod_l+0x5fc>
 8016cb2:	2b1f      	cmp	r3, #31
 8016cb4:	f340 8107 	ble.w	8016ec6 <_strtod_l+0x7ee>
 8016cb8:	2b34      	cmp	r3, #52	; 0x34
 8016cba:	bfde      	ittt	le
 8016cbc:	3b20      	suble	r3, #32
 8016cbe:	f04f 32ff 	movle.w	r2, #4294967295
 8016cc2:	fa02 f303 	lslle.w	r3, r2, r3
 8016cc6:	f04f 0a00 	mov.w	sl, #0
 8016cca:	bfcc      	ite	gt
 8016ccc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016cd0:	ea03 0b01 	andle.w	fp, r3, r1
 8016cd4:	2200      	movs	r2, #0
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	4650      	mov	r0, sl
 8016cda:	4659      	mov	r1, fp
 8016cdc:	f7e9 ff0c 	bl	8000af8 <__aeabi_dcmpeq>
 8016ce0:	2800      	cmp	r0, #0
 8016ce2:	d1ac      	bne.n	8016c3e <_strtod_l+0x566>
 8016ce4:	9b07      	ldr	r3, [sp, #28]
 8016ce6:	9300      	str	r3, [sp, #0]
 8016ce8:	9a05      	ldr	r2, [sp, #20]
 8016cea:	9908      	ldr	r1, [sp, #32]
 8016cec:	4623      	mov	r3, r4
 8016cee:	4648      	mov	r0, r9
 8016cf0:	f001 fddd 	bl	80188ae <__s2b>
 8016cf4:	9007      	str	r0, [sp, #28]
 8016cf6:	2800      	cmp	r0, #0
 8016cf8:	f43f af08 	beq.w	8016b0c <_strtod_l+0x434>
 8016cfc:	9a06      	ldr	r2, [sp, #24]
 8016cfe:	9b06      	ldr	r3, [sp, #24]
 8016d00:	2a00      	cmp	r2, #0
 8016d02:	f1c3 0300 	rsb	r3, r3, #0
 8016d06:	bfa8      	it	ge
 8016d08:	2300      	movge	r3, #0
 8016d0a:	930e      	str	r3, [sp, #56]	; 0x38
 8016d0c:	2400      	movs	r4, #0
 8016d0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016d12:	9316      	str	r3, [sp, #88]	; 0x58
 8016d14:	46a0      	mov	r8, r4
 8016d16:	9b07      	ldr	r3, [sp, #28]
 8016d18:	4648      	mov	r0, r9
 8016d1a:	6859      	ldr	r1, [r3, #4]
 8016d1c:	f001 fd41 	bl	80187a2 <_Balloc>
 8016d20:	9005      	str	r0, [sp, #20]
 8016d22:	2800      	cmp	r0, #0
 8016d24:	f43f aef6 	beq.w	8016b14 <_strtod_l+0x43c>
 8016d28:	9b07      	ldr	r3, [sp, #28]
 8016d2a:	691a      	ldr	r2, [r3, #16]
 8016d2c:	3202      	adds	r2, #2
 8016d2e:	f103 010c 	add.w	r1, r3, #12
 8016d32:	0092      	lsls	r2, r2, #2
 8016d34:	300c      	adds	r0, #12
 8016d36:	f001 fd29 	bl	801878c <memcpy>
 8016d3a:	aa1e      	add	r2, sp, #120	; 0x78
 8016d3c:	a91d      	add	r1, sp, #116	; 0x74
 8016d3e:	ec4b ab10 	vmov	d0, sl, fp
 8016d42:	4648      	mov	r0, r9
 8016d44:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016d48:	f002 f86c 	bl	8018e24 <__d2b>
 8016d4c:	901c      	str	r0, [sp, #112]	; 0x70
 8016d4e:	2800      	cmp	r0, #0
 8016d50:	f43f aee0 	beq.w	8016b14 <_strtod_l+0x43c>
 8016d54:	2101      	movs	r1, #1
 8016d56:	4648      	mov	r0, r9
 8016d58:	f001 fe35 	bl	80189c6 <__i2b>
 8016d5c:	4680      	mov	r8, r0
 8016d5e:	2800      	cmp	r0, #0
 8016d60:	f43f aed8 	beq.w	8016b14 <_strtod_l+0x43c>
 8016d64:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016d66:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016d68:	2e00      	cmp	r6, #0
 8016d6a:	bfab      	itete	ge
 8016d6c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016d6e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016d70:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016d72:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016d74:	bfac      	ite	ge
 8016d76:	18f7      	addge	r7, r6, r3
 8016d78:	1b9d      	sublt	r5, r3, r6
 8016d7a:	9b04      	ldr	r3, [sp, #16]
 8016d7c:	1af6      	subs	r6, r6, r3
 8016d7e:	4416      	add	r6, r2
 8016d80:	4b63      	ldr	r3, [pc, #396]	; (8016f10 <_strtod_l+0x838>)
 8016d82:	3e01      	subs	r6, #1
 8016d84:	429e      	cmp	r6, r3
 8016d86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016d8a:	f280 80af 	bge.w	8016eec <_strtod_l+0x814>
 8016d8e:	1b9b      	subs	r3, r3, r6
 8016d90:	2b1f      	cmp	r3, #31
 8016d92:	eba2 0203 	sub.w	r2, r2, r3
 8016d96:	f04f 0101 	mov.w	r1, #1
 8016d9a:	f300 809b 	bgt.w	8016ed4 <_strtod_l+0x7fc>
 8016d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8016da2:	930f      	str	r3, [sp, #60]	; 0x3c
 8016da4:	2300      	movs	r3, #0
 8016da6:	930a      	str	r3, [sp, #40]	; 0x28
 8016da8:	18be      	adds	r6, r7, r2
 8016daa:	9b04      	ldr	r3, [sp, #16]
 8016dac:	42b7      	cmp	r7, r6
 8016dae:	4415      	add	r5, r2
 8016db0:	441d      	add	r5, r3
 8016db2:	463b      	mov	r3, r7
 8016db4:	bfa8      	it	ge
 8016db6:	4633      	movge	r3, r6
 8016db8:	42ab      	cmp	r3, r5
 8016dba:	bfa8      	it	ge
 8016dbc:	462b      	movge	r3, r5
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	bfc2      	ittt	gt
 8016dc2:	1af6      	subgt	r6, r6, r3
 8016dc4:	1aed      	subgt	r5, r5, r3
 8016dc6:	1aff      	subgt	r7, r7, r3
 8016dc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016dca:	b1bb      	cbz	r3, 8016dfc <_strtod_l+0x724>
 8016dcc:	4641      	mov	r1, r8
 8016dce:	461a      	mov	r2, r3
 8016dd0:	4648      	mov	r0, r9
 8016dd2:	f001 fe97 	bl	8018b04 <__pow5mult>
 8016dd6:	4680      	mov	r8, r0
 8016dd8:	2800      	cmp	r0, #0
 8016dda:	f43f ae9b 	beq.w	8016b14 <_strtod_l+0x43c>
 8016dde:	4601      	mov	r1, r0
 8016de0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016de2:	4648      	mov	r0, r9
 8016de4:	f001 fdf8 	bl	80189d8 <__multiply>
 8016de8:	900c      	str	r0, [sp, #48]	; 0x30
 8016dea:	2800      	cmp	r0, #0
 8016dec:	f43f ae92 	beq.w	8016b14 <_strtod_l+0x43c>
 8016df0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016df2:	4648      	mov	r0, r9
 8016df4:	f001 fd09 	bl	801880a <_Bfree>
 8016df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016dfa:	931c      	str	r3, [sp, #112]	; 0x70
 8016dfc:	2e00      	cmp	r6, #0
 8016dfe:	dc7a      	bgt.n	8016ef6 <_strtod_l+0x81e>
 8016e00:	9b06      	ldr	r3, [sp, #24]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	dd08      	ble.n	8016e18 <_strtod_l+0x740>
 8016e06:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016e08:	9905      	ldr	r1, [sp, #20]
 8016e0a:	4648      	mov	r0, r9
 8016e0c:	f001 fe7a 	bl	8018b04 <__pow5mult>
 8016e10:	9005      	str	r0, [sp, #20]
 8016e12:	2800      	cmp	r0, #0
 8016e14:	f43f ae7e 	beq.w	8016b14 <_strtod_l+0x43c>
 8016e18:	2d00      	cmp	r5, #0
 8016e1a:	dd08      	ble.n	8016e2e <_strtod_l+0x756>
 8016e1c:	462a      	mov	r2, r5
 8016e1e:	9905      	ldr	r1, [sp, #20]
 8016e20:	4648      	mov	r0, r9
 8016e22:	f001 febd 	bl	8018ba0 <__lshift>
 8016e26:	9005      	str	r0, [sp, #20]
 8016e28:	2800      	cmp	r0, #0
 8016e2a:	f43f ae73 	beq.w	8016b14 <_strtod_l+0x43c>
 8016e2e:	2f00      	cmp	r7, #0
 8016e30:	dd08      	ble.n	8016e44 <_strtod_l+0x76c>
 8016e32:	4641      	mov	r1, r8
 8016e34:	463a      	mov	r2, r7
 8016e36:	4648      	mov	r0, r9
 8016e38:	f001 feb2 	bl	8018ba0 <__lshift>
 8016e3c:	4680      	mov	r8, r0
 8016e3e:	2800      	cmp	r0, #0
 8016e40:	f43f ae68 	beq.w	8016b14 <_strtod_l+0x43c>
 8016e44:	9a05      	ldr	r2, [sp, #20]
 8016e46:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016e48:	4648      	mov	r0, r9
 8016e4a:	f001 ff17 	bl	8018c7c <__mdiff>
 8016e4e:	4604      	mov	r4, r0
 8016e50:	2800      	cmp	r0, #0
 8016e52:	f43f ae5f 	beq.w	8016b14 <_strtod_l+0x43c>
 8016e56:	68c3      	ldr	r3, [r0, #12]
 8016e58:	930c      	str	r3, [sp, #48]	; 0x30
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	60c3      	str	r3, [r0, #12]
 8016e5e:	4641      	mov	r1, r8
 8016e60:	f001 fef2 	bl	8018c48 <__mcmp>
 8016e64:	2800      	cmp	r0, #0
 8016e66:	da55      	bge.n	8016f14 <_strtod_l+0x83c>
 8016e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e6a:	b9e3      	cbnz	r3, 8016ea6 <_strtod_l+0x7ce>
 8016e6c:	f1ba 0f00 	cmp.w	sl, #0
 8016e70:	d119      	bne.n	8016ea6 <_strtod_l+0x7ce>
 8016e72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016e76:	b9b3      	cbnz	r3, 8016ea6 <_strtod_l+0x7ce>
 8016e78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016e7c:	0d1b      	lsrs	r3, r3, #20
 8016e7e:	051b      	lsls	r3, r3, #20
 8016e80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016e84:	d90f      	bls.n	8016ea6 <_strtod_l+0x7ce>
 8016e86:	6963      	ldr	r3, [r4, #20]
 8016e88:	b913      	cbnz	r3, 8016e90 <_strtod_l+0x7b8>
 8016e8a:	6923      	ldr	r3, [r4, #16]
 8016e8c:	2b01      	cmp	r3, #1
 8016e8e:	dd0a      	ble.n	8016ea6 <_strtod_l+0x7ce>
 8016e90:	4621      	mov	r1, r4
 8016e92:	2201      	movs	r2, #1
 8016e94:	4648      	mov	r0, r9
 8016e96:	f001 fe83 	bl	8018ba0 <__lshift>
 8016e9a:	4641      	mov	r1, r8
 8016e9c:	4604      	mov	r4, r0
 8016e9e:	f001 fed3 	bl	8018c48 <__mcmp>
 8016ea2:	2800      	cmp	r0, #0
 8016ea4:	dc67      	bgt.n	8016f76 <_strtod_l+0x89e>
 8016ea6:	9b04      	ldr	r3, [sp, #16]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d171      	bne.n	8016f90 <_strtod_l+0x8b8>
 8016eac:	e63d      	b.n	8016b2a <_strtod_l+0x452>
 8016eae:	f018 0f01 	tst.w	r8, #1
 8016eb2:	d004      	beq.n	8016ebe <_strtod_l+0x7e6>
 8016eb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016eb8:	f7e9 fbb6 	bl	8000628 <__aeabi_dmul>
 8016ebc:	2301      	movs	r3, #1
 8016ebe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016ec2:	3508      	adds	r5, #8
 8016ec4:	e6e5      	b.n	8016c92 <_strtod_l+0x5ba>
 8016ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8016eca:	fa02 f303 	lsl.w	r3, r2, r3
 8016ece:	ea03 0a0a 	and.w	sl, r3, sl
 8016ed2:	e6ff      	b.n	8016cd4 <_strtod_l+0x5fc>
 8016ed4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016ed8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016edc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016ee0:	36e2      	adds	r6, #226	; 0xe2
 8016ee2:	fa01 f306 	lsl.w	r3, r1, r6
 8016ee6:	930a      	str	r3, [sp, #40]	; 0x28
 8016ee8:	910f      	str	r1, [sp, #60]	; 0x3c
 8016eea:	e75d      	b.n	8016da8 <_strtod_l+0x6d0>
 8016eec:	2300      	movs	r3, #0
 8016eee:	930a      	str	r3, [sp, #40]	; 0x28
 8016ef0:	2301      	movs	r3, #1
 8016ef2:	930f      	str	r3, [sp, #60]	; 0x3c
 8016ef4:	e758      	b.n	8016da8 <_strtod_l+0x6d0>
 8016ef6:	4632      	mov	r2, r6
 8016ef8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016efa:	4648      	mov	r0, r9
 8016efc:	f001 fe50 	bl	8018ba0 <__lshift>
 8016f00:	901c      	str	r0, [sp, #112]	; 0x70
 8016f02:	2800      	cmp	r0, #0
 8016f04:	f47f af7c 	bne.w	8016e00 <_strtod_l+0x728>
 8016f08:	e604      	b.n	8016b14 <_strtod_l+0x43c>
 8016f0a:	bf00      	nop
 8016f0c:	0801a3e0 	.word	0x0801a3e0
 8016f10:	fffffc02 	.word	0xfffffc02
 8016f14:	465d      	mov	r5, fp
 8016f16:	f040 8086 	bne.w	8017026 <_strtod_l+0x94e>
 8016f1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016f1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016f20:	b32a      	cbz	r2, 8016f6e <_strtod_l+0x896>
 8016f22:	4aaf      	ldr	r2, [pc, #700]	; (80171e0 <_strtod_l+0xb08>)
 8016f24:	4293      	cmp	r3, r2
 8016f26:	d153      	bne.n	8016fd0 <_strtod_l+0x8f8>
 8016f28:	9b04      	ldr	r3, [sp, #16]
 8016f2a:	4650      	mov	r0, sl
 8016f2c:	b1d3      	cbz	r3, 8016f64 <_strtod_l+0x88c>
 8016f2e:	4aad      	ldr	r2, [pc, #692]	; (80171e4 <_strtod_l+0xb0c>)
 8016f30:	402a      	ands	r2, r5
 8016f32:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016f36:	f04f 31ff 	mov.w	r1, #4294967295
 8016f3a:	d816      	bhi.n	8016f6a <_strtod_l+0x892>
 8016f3c:	0d12      	lsrs	r2, r2, #20
 8016f3e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016f42:	fa01 f303 	lsl.w	r3, r1, r3
 8016f46:	4298      	cmp	r0, r3
 8016f48:	d142      	bne.n	8016fd0 <_strtod_l+0x8f8>
 8016f4a:	4ba7      	ldr	r3, [pc, #668]	; (80171e8 <_strtod_l+0xb10>)
 8016f4c:	429d      	cmp	r5, r3
 8016f4e:	d102      	bne.n	8016f56 <_strtod_l+0x87e>
 8016f50:	3001      	adds	r0, #1
 8016f52:	f43f addf 	beq.w	8016b14 <_strtod_l+0x43c>
 8016f56:	4ba3      	ldr	r3, [pc, #652]	; (80171e4 <_strtod_l+0xb0c>)
 8016f58:	402b      	ands	r3, r5
 8016f5a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016f5e:	f04f 0a00 	mov.w	sl, #0
 8016f62:	e7a0      	b.n	8016ea6 <_strtod_l+0x7ce>
 8016f64:	f04f 33ff 	mov.w	r3, #4294967295
 8016f68:	e7ed      	b.n	8016f46 <_strtod_l+0x86e>
 8016f6a:	460b      	mov	r3, r1
 8016f6c:	e7eb      	b.n	8016f46 <_strtod_l+0x86e>
 8016f6e:	bb7b      	cbnz	r3, 8016fd0 <_strtod_l+0x8f8>
 8016f70:	f1ba 0f00 	cmp.w	sl, #0
 8016f74:	d12c      	bne.n	8016fd0 <_strtod_l+0x8f8>
 8016f76:	9904      	ldr	r1, [sp, #16]
 8016f78:	4a9a      	ldr	r2, [pc, #616]	; (80171e4 <_strtod_l+0xb0c>)
 8016f7a:	465b      	mov	r3, fp
 8016f7c:	b1f1      	cbz	r1, 8016fbc <_strtod_l+0x8e4>
 8016f7e:	ea02 010b 	and.w	r1, r2, fp
 8016f82:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016f86:	dc19      	bgt.n	8016fbc <_strtod_l+0x8e4>
 8016f88:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016f8c:	f77f ae5b 	ble.w	8016c46 <_strtod_l+0x56e>
 8016f90:	4a96      	ldr	r2, [pc, #600]	; (80171ec <_strtod_l+0xb14>)
 8016f92:	2300      	movs	r3, #0
 8016f94:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016f98:	4650      	mov	r0, sl
 8016f9a:	4659      	mov	r1, fp
 8016f9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016fa0:	f7e9 fb42 	bl	8000628 <__aeabi_dmul>
 8016fa4:	4682      	mov	sl, r0
 8016fa6:	468b      	mov	fp, r1
 8016fa8:	2900      	cmp	r1, #0
 8016faa:	f47f adbe 	bne.w	8016b2a <_strtod_l+0x452>
 8016fae:	2800      	cmp	r0, #0
 8016fb0:	f47f adbb 	bne.w	8016b2a <_strtod_l+0x452>
 8016fb4:	2322      	movs	r3, #34	; 0x22
 8016fb6:	f8c9 3000 	str.w	r3, [r9]
 8016fba:	e5b6      	b.n	8016b2a <_strtod_l+0x452>
 8016fbc:	4013      	ands	r3, r2
 8016fbe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016fc2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016fc6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016fca:	f04f 3aff 	mov.w	sl, #4294967295
 8016fce:	e76a      	b.n	8016ea6 <_strtod_l+0x7ce>
 8016fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fd2:	b193      	cbz	r3, 8016ffa <_strtod_l+0x922>
 8016fd4:	422b      	tst	r3, r5
 8016fd6:	f43f af66 	beq.w	8016ea6 <_strtod_l+0x7ce>
 8016fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016fdc:	9a04      	ldr	r2, [sp, #16]
 8016fde:	4650      	mov	r0, sl
 8016fe0:	4659      	mov	r1, fp
 8016fe2:	b173      	cbz	r3, 8017002 <_strtod_l+0x92a>
 8016fe4:	f7ff fb5c 	bl	80166a0 <sulp>
 8016fe8:	4602      	mov	r2, r0
 8016fea:	460b      	mov	r3, r1
 8016fec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016ff0:	f7e9 f964 	bl	80002bc <__adddf3>
 8016ff4:	4682      	mov	sl, r0
 8016ff6:	468b      	mov	fp, r1
 8016ff8:	e755      	b.n	8016ea6 <_strtod_l+0x7ce>
 8016ffa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ffc:	ea13 0f0a 	tst.w	r3, sl
 8017000:	e7e9      	b.n	8016fd6 <_strtod_l+0x8fe>
 8017002:	f7ff fb4d 	bl	80166a0 <sulp>
 8017006:	4602      	mov	r2, r0
 8017008:	460b      	mov	r3, r1
 801700a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801700e:	f7e9 f953 	bl	80002b8 <__aeabi_dsub>
 8017012:	2200      	movs	r2, #0
 8017014:	2300      	movs	r3, #0
 8017016:	4682      	mov	sl, r0
 8017018:	468b      	mov	fp, r1
 801701a:	f7e9 fd6d 	bl	8000af8 <__aeabi_dcmpeq>
 801701e:	2800      	cmp	r0, #0
 8017020:	f47f ae11 	bne.w	8016c46 <_strtod_l+0x56e>
 8017024:	e73f      	b.n	8016ea6 <_strtod_l+0x7ce>
 8017026:	4641      	mov	r1, r8
 8017028:	4620      	mov	r0, r4
 801702a:	f001 ff4a 	bl	8018ec2 <__ratio>
 801702e:	ec57 6b10 	vmov	r6, r7, d0
 8017032:	2200      	movs	r2, #0
 8017034:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017038:	ee10 0a10 	vmov	r0, s0
 801703c:	4639      	mov	r1, r7
 801703e:	f7e9 fd6f 	bl	8000b20 <__aeabi_dcmple>
 8017042:	2800      	cmp	r0, #0
 8017044:	d077      	beq.n	8017136 <_strtod_l+0xa5e>
 8017046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017048:	2b00      	cmp	r3, #0
 801704a:	d04a      	beq.n	80170e2 <_strtod_l+0xa0a>
 801704c:	4b68      	ldr	r3, [pc, #416]	; (80171f0 <_strtod_l+0xb18>)
 801704e:	2200      	movs	r2, #0
 8017050:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017054:	4f66      	ldr	r7, [pc, #408]	; (80171f0 <_strtod_l+0xb18>)
 8017056:	2600      	movs	r6, #0
 8017058:	4b62      	ldr	r3, [pc, #392]	; (80171e4 <_strtod_l+0xb0c>)
 801705a:	402b      	ands	r3, r5
 801705c:	930f      	str	r3, [sp, #60]	; 0x3c
 801705e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017060:	4b64      	ldr	r3, [pc, #400]	; (80171f4 <_strtod_l+0xb1c>)
 8017062:	429a      	cmp	r2, r3
 8017064:	f040 80ce 	bne.w	8017204 <_strtod_l+0xb2c>
 8017068:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801706c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017070:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8017074:	ec4b ab10 	vmov	d0, sl, fp
 8017078:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801707c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017080:	f001 fe5a 	bl	8018d38 <__ulp>
 8017084:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017088:	ec53 2b10 	vmov	r2, r3, d0
 801708c:	f7e9 facc 	bl	8000628 <__aeabi_dmul>
 8017090:	4652      	mov	r2, sl
 8017092:	465b      	mov	r3, fp
 8017094:	f7e9 f912 	bl	80002bc <__adddf3>
 8017098:	460b      	mov	r3, r1
 801709a:	4952      	ldr	r1, [pc, #328]	; (80171e4 <_strtod_l+0xb0c>)
 801709c:	4a56      	ldr	r2, [pc, #344]	; (80171f8 <_strtod_l+0xb20>)
 801709e:	4019      	ands	r1, r3
 80170a0:	4291      	cmp	r1, r2
 80170a2:	4682      	mov	sl, r0
 80170a4:	d95b      	bls.n	801715e <_strtod_l+0xa86>
 80170a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170a8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80170ac:	4293      	cmp	r3, r2
 80170ae:	d103      	bne.n	80170b8 <_strtod_l+0x9e0>
 80170b0:	9b08      	ldr	r3, [sp, #32]
 80170b2:	3301      	adds	r3, #1
 80170b4:	f43f ad2e 	beq.w	8016b14 <_strtod_l+0x43c>
 80170b8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80171e8 <_strtod_l+0xb10>
 80170bc:	f04f 3aff 	mov.w	sl, #4294967295
 80170c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80170c2:	4648      	mov	r0, r9
 80170c4:	f001 fba1 	bl	801880a <_Bfree>
 80170c8:	9905      	ldr	r1, [sp, #20]
 80170ca:	4648      	mov	r0, r9
 80170cc:	f001 fb9d 	bl	801880a <_Bfree>
 80170d0:	4641      	mov	r1, r8
 80170d2:	4648      	mov	r0, r9
 80170d4:	f001 fb99 	bl	801880a <_Bfree>
 80170d8:	4621      	mov	r1, r4
 80170da:	4648      	mov	r0, r9
 80170dc:	f001 fb95 	bl	801880a <_Bfree>
 80170e0:	e619      	b.n	8016d16 <_strtod_l+0x63e>
 80170e2:	f1ba 0f00 	cmp.w	sl, #0
 80170e6:	d11a      	bne.n	801711e <_strtod_l+0xa46>
 80170e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80170ec:	b9eb      	cbnz	r3, 801712a <_strtod_l+0xa52>
 80170ee:	2200      	movs	r2, #0
 80170f0:	4b3f      	ldr	r3, [pc, #252]	; (80171f0 <_strtod_l+0xb18>)
 80170f2:	4630      	mov	r0, r6
 80170f4:	4639      	mov	r1, r7
 80170f6:	f7e9 fd09 	bl	8000b0c <__aeabi_dcmplt>
 80170fa:	b9c8      	cbnz	r0, 8017130 <_strtod_l+0xa58>
 80170fc:	4630      	mov	r0, r6
 80170fe:	4639      	mov	r1, r7
 8017100:	2200      	movs	r2, #0
 8017102:	4b3e      	ldr	r3, [pc, #248]	; (80171fc <_strtod_l+0xb24>)
 8017104:	f7e9 fa90 	bl	8000628 <__aeabi_dmul>
 8017108:	4606      	mov	r6, r0
 801710a:	460f      	mov	r7, r1
 801710c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017110:	9618      	str	r6, [sp, #96]	; 0x60
 8017112:	9319      	str	r3, [sp, #100]	; 0x64
 8017114:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017118:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801711c:	e79c      	b.n	8017058 <_strtod_l+0x980>
 801711e:	f1ba 0f01 	cmp.w	sl, #1
 8017122:	d102      	bne.n	801712a <_strtod_l+0xa52>
 8017124:	2d00      	cmp	r5, #0
 8017126:	f43f ad8e 	beq.w	8016c46 <_strtod_l+0x56e>
 801712a:	2200      	movs	r2, #0
 801712c:	4b34      	ldr	r3, [pc, #208]	; (8017200 <_strtod_l+0xb28>)
 801712e:	e78f      	b.n	8017050 <_strtod_l+0x978>
 8017130:	2600      	movs	r6, #0
 8017132:	4f32      	ldr	r7, [pc, #200]	; (80171fc <_strtod_l+0xb24>)
 8017134:	e7ea      	b.n	801710c <_strtod_l+0xa34>
 8017136:	4b31      	ldr	r3, [pc, #196]	; (80171fc <_strtod_l+0xb24>)
 8017138:	4630      	mov	r0, r6
 801713a:	4639      	mov	r1, r7
 801713c:	2200      	movs	r2, #0
 801713e:	f7e9 fa73 	bl	8000628 <__aeabi_dmul>
 8017142:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017144:	4606      	mov	r6, r0
 8017146:	460f      	mov	r7, r1
 8017148:	b933      	cbnz	r3, 8017158 <_strtod_l+0xa80>
 801714a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801714e:	9010      	str	r0, [sp, #64]	; 0x40
 8017150:	9311      	str	r3, [sp, #68]	; 0x44
 8017152:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017156:	e7df      	b.n	8017118 <_strtod_l+0xa40>
 8017158:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801715c:	e7f9      	b.n	8017152 <_strtod_l+0xa7a>
 801715e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017162:	9b04      	ldr	r3, [sp, #16]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d1ab      	bne.n	80170c0 <_strtod_l+0x9e8>
 8017168:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801716c:	0d1b      	lsrs	r3, r3, #20
 801716e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017170:	051b      	lsls	r3, r3, #20
 8017172:	429a      	cmp	r2, r3
 8017174:	465d      	mov	r5, fp
 8017176:	d1a3      	bne.n	80170c0 <_strtod_l+0x9e8>
 8017178:	4639      	mov	r1, r7
 801717a:	4630      	mov	r0, r6
 801717c:	f7e9 fd04 	bl	8000b88 <__aeabi_d2iz>
 8017180:	f7e9 f9e8 	bl	8000554 <__aeabi_i2d>
 8017184:	460b      	mov	r3, r1
 8017186:	4602      	mov	r2, r0
 8017188:	4639      	mov	r1, r7
 801718a:	4630      	mov	r0, r6
 801718c:	f7e9 f894 	bl	80002b8 <__aeabi_dsub>
 8017190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017192:	4606      	mov	r6, r0
 8017194:	460f      	mov	r7, r1
 8017196:	b933      	cbnz	r3, 80171a6 <_strtod_l+0xace>
 8017198:	f1ba 0f00 	cmp.w	sl, #0
 801719c:	d103      	bne.n	80171a6 <_strtod_l+0xace>
 801719e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80171a2:	2d00      	cmp	r5, #0
 80171a4:	d06d      	beq.n	8017282 <_strtod_l+0xbaa>
 80171a6:	a30a      	add	r3, pc, #40	; (adr r3, 80171d0 <_strtod_l+0xaf8>)
 80171a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ac:	4630      	mov	r0, r6
 80171ae:	4639      	mov	r1, r7
 80171b0:	f7e9 fcac 	bl	8000b0c <__aeabi_dcmplt>
 80171b4:	2800      	cmp	r0, #0
 80171b6:	f47f acb8 	bne.w	8016b2a <_strtod_l+0x452>
 80171ba:	a307      	add	r3, pc, #28	; (adr r3, 80171d8 <_strtod_l+0xb00>)
 80171bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171c0:	4630      	mov	r0, r6
 80171c2:	4639      	mov	r1, r7
 80171c4:	f7e9 fcc0 	bl	8000b48 <__aeabi_dcmpgt>
 80171c8:	2800      	cmp	r0, #0
 80171ca:	f43f af79 	beq.w	80170c0 <_strtod_l+0x9e8>
 80171ce:	e4ac      	b.n	8016b2a <_strtod_l+0x452>
 80171d0:	94a03595 	.word	0x94a03595
 80171d4:	3fdfffff 	.word	0x3fdfffff
 80171d8:	35afe535 	.word	0x35afe535
 80171dc:	3fe00000 	.word	0x3fe00000
 80171e0:	000fffff 	.word	0x000fffff
 80171e4:	7ff00000 	.word	0x7ff00000
 80171e8:	7fefffff 	.word	0x7fefffff
 80171ec:	39500000 	.word	0x39500000
 80171f0:	3ff00000 	.word	0x3ff00000
 80171f4:	7fe00000 	.word	0x7fe00000
 80171f8:	7c9fffff 	.word	0x7c9fffff
 80171fc:	3fe00000 	.word	0x3fe00000
 8017200:	bff00000 	.word	0xbff00000
 8017204:	9b04      	ldr	r3, [sp, #16]
 8017206:	b333      	cbz	r3, 8017256 <_strtod_l+0xb7e>
 8017208:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801720a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801720e:	d822      	bhi.n	8017256 <_strtod_l+0xb7e>
 8017210:	a327      	add	r3, pc, #156	; (adr r3, 80172b0 <_strtod_l+0xbd8>)
 8017212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017216:	4630      	mov	r0, r6
 8017218:	4639      	mov	r1, r7
 801721a:	f7e9 fc81 	bl	8000b20 <__aeabi_dcmple>
 801721e:	b1a0      	cbz	r0, 801724a <_strtod_l+0xb72>
 8017220:	4639      	mov	r1, r7
 8017222:	4630      	mov	r0, r6
 8017224:	f7e9 fcd8 	bl	8000bd8 <__aeabi_d2uiz>
 8017228:	2800      	cmp	r0, #0
 801722a:	bf08      	it	eq
 801722c:	2001      	moveq	r0, #1
 801722e:	f7e9 f981 	bl	8000534 <__aeabi_ui2d>
 8017232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017234:	4606      	mov	r6, r0
 8017236:	460f      	mov	r7, r1
 8017238:	bb03      	cbnz	r3, 801727c <_strtod_l+0xba4>
 801723a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801723e:	9012      	str	r0, [sp, #72]	; 0x48
 8017240:	9313      	str	r3, [sp, #76]	; 0x4c
 8017242:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8017246:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801724a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801724c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801724e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017252:	1a9b      	subs	r3, r3, r2
 8017254:	930b      	str	r3, [sp, #44]	; 0x2c
 8017256:	ed9d 0b08 	vldr	d0, [sp, #32]
 801725a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801725e:	f001 fd6b 	bl	8018d38 <__ulp>
 8017262:	4650      	mov	r0, sl
 8017264:	ec53 2b10 	vmov	r2, r3, d0
 8017268:	4659      	mov	r1, fp
 801726a:	f7e9 f9dd 	bl	8000628 <__aeabi_dmul>
 801726e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017272:	f7e9 f823 	bl	80002bc <__adddf3>
 8017276:	4682      	mov	sl, r0
 8017278:	468b      	mov	fp, r1
 801727a:	e772      	b.n	8017162 <_strtod_l+0xa8a>
 801727c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017280:	e7df      	b.n	8017242 <_strtod_l+0xb6a>
 8017282:	a30d      	add	r3, pc, #52	; (adr r3, 80172b8 <_strtod_l+0xbe0>)
 8017284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017288:	f7e9 fc40 	bl	8000b0c <__aeabi_dcmplt>
 801728c:	e79c      	b.n	80171c8 <_strtod_l+0xaf0>
 801728e:	2300      	movs	r3, #0
 8017290:	930d      	str	r3, [sp, #52]	; 0x34
 8017292:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017294:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017296:	6013      	str	r3, [r2, #0]
 8017298:	f7ff ba61 	b.w	801675e <_strtod_l+0x86>
 801729c:	2b65      	cmp	r3, #101	; 0x65
 801729e:	f04f 0200 	mov.w	r2, #0
 80172a2:	f43f ab4e 	beq.w	8016942 <_strtod_l+0x26a>
 80172a6:	2101      	movs	r1, #1
 80172a8:	4614      	mov	r4, r2
 80172aa:	9104      	str	r1, [sp, #16]
 80172ac:	f7ff bacb 	b.w	8016846 <_strtod_l+0x16e>
 80172b0:	ffc00000 	.word	0xffc00000
 80172b4:	41dfffff 	.word	0x41dfffff
 80172b8:	94a03595 	.word	0x94a03595
 80172bc:	3fcfffff 	.word	0x3fcfffff

080172c0 <_strtod_r>:
 80172c0:	4b05      	ldr	r3, [pc, #20]	; (80172d8 <_strtod_r+0x18>)
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	b410      	push	{r4}
 80172c6:	6a1b      	ldr	r3, [r3, #32]
 80172c8:	4c04      	ldr	r4, [pc, #16]	; (80172dc <_strtod_r+0x1c>)
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	bf08      	it	eq
 80172ce:	4623      	moveq	r3, r4
 80172d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172d4:	f7ff ba00 	b.w	80166d8 <_strtod_l>
 80172d8:	2000000c 	.word	0x2000000c
 80172dc:	20000070 	.word	0x20000070

080172e0 <_strtol_l.isra.0>:
 80172e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80172e4:	4680      	mov	r8, r0
 80172e6:	4689      	mov	r9, r1
 80172e8:	4692      	mov	sl, r2
 80172ea:	461e      	mov	r6, r3
 80172ec:	460f      	mov	r7, r1
 80172ee:	463d      	mov	r5, r7
 80172f0:	9808      	ldr	r0, [sp, #32]
 80172f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80172f6:	f001 fa0d 	bl	8018714 <__locale_ctype_ptr_l>
 80172fa:	4420      	add	r0, r4
 80172fc:	7843      	ldrb	r3, [r0, #1]
 80172fe:	f013 0308 	ands.w	r3, r3, #8
 8017302:	d132      	bne.n	801736a <_strtol_l.isra.0+0x8a>
 8017304:	2c2d      	cmp	r4, #45	; 0x2d
 8017306:	d132      	bne.n	801736e <_strtol_l.isra.0+0x8e>
 8017308:	787c      	ldrb	r4, [r7, #1]
 801730a:	1cbd      	adds	r5, r7, #2
 801730c:	2201      	movs	r2, #1
 801730e:	2e00      	cmp	r6, #0
 8017310:	d05d      	beq.n	80173ce <_strtol_l.isra.0+0xee>
 8017312:	2e10      	cmp	r6, #16
 8017314:	d109      	bne.n	801732a <_strtol_l.isra.0+0x4a>
 8017316:	2c30      	cmp	r4, #48	; 0x30
 8017318:	d107      	bne.n	801732a <_strtol_l.isra.0+0x4a>
 801731a:	782b      	ldrb	r3, [r5, #0]
 801731c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017320:	2b58      	cmp	r3, #88	; 0x58
 8017322:	d14f      	bne.n	80173c4 <_strtol_l.isra.0+0xe4>
 8017324:	786c      	ldrb	r4, [r5, #1]
 8017326:	2610      	movs	r6, #16
 8017328:	3502      	adds	r5, #2
 801732a:	2a00      	cmp	r2, #0
 801732c:	bf14      	ite	ne
 801732e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8017332:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8017336:	2700      	movs	r7, #0
 8017338:	fbb1 fcf6 	udiv	ip, r1, r6
 801733c:	4638      	mov	r0, r7
 801733e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8017342:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8017346:	2b09      	cmp	r3, #9
 8017348:	d817      	bhi.n	801737a <_strtol_l.isra.0+0x9a>
 801734a:	461c      	mov	r4, r3
 801734c:	42a6      	cmp	r6, r4
 801734e:	dd23      	ble.n	8017398 <_strtol_l.isra.0+0xb8>
 8017350:	1c7b      	adds	r3, r7, #1
 8017352:	d007      	beq.n	8017364 <_strtol_l.isra.0+0x84>
 8017354:	4584      	cmp	ip, r0
 8017356:	d31c      	bcc.n	8017392 <_strtol_l.isra.0+0xb2>
 8017358:	d101      	bne.n	801735e <_strtol_l.isra.0+0x7e>
 801735a:	45a6      	cmp	lr, r4
 801735c:	db19      	blt.n	8017392 <_strtol_l.isra.0+0xb2>
 801735e:	fb00 4006 	mla	r0, r0, r6, r4
 8017362:	2701      	movs	r7, #1
 8017364:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017368:	e7eb      	b.n	8017342 <_strtol_l.isra.0+0x62>
 801736a:	462f      	mov	r7, r5
 801736c:	e7bf      	b.n	80172ee <_strtol_l.isra.0+0xe>
 801736e:	2c2b      	cmp	r4, #43	; 0x2b
 8017370:	bf04      	itt	eq
 8017372:	1cbd      	addeq	r5, r7, #2
 8017374:	787c      	ldrbeq	r4, [r7, #1]
 8017376:	461a      	mov	r2, r3
 8017378:	e7c9      	b.n	801730e <_strtol_l.isra.0+0x2e>
 801737a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801737e:	2b19      	cmp	r3, #25
 8017380:	d801      	bhi.n	8017386 <_strtol_l.isra.0+0xa6>
 8017382:	3c37      	subs	r4, #55	; 0x37
 8017384:	e7e2      	b.n	801734c <_strtol_l.isra.0+0x6c>
 8017386:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801738a:	2b19      	cmp	r3, #25
 801738c:	d804      	bhi.n	8017398 <_strtol_l.isra.0+0xb8>
 801738e:	3c57      	subs	r4, #87	; 0x57
 8017390:	e7dc      	b.n	801734c <_strtol_l.isra.0+0x6c>
 8017392:	f04f 37ff 	mov.w	r7, #4294967295
 8017396:	e7e5      	b.n	8017364 <_strtol_l.isra.0+0x84>
 8017398:	1c7b      	adds	r3, r7, #1
 801739a:	d108      	bne.n	80173ae <_strtol_l.isra.0+0xce>
 801739c:	2322      	movs	r3, #34	; 0x22
 801739e:	f8c8 3000 	str.w	r3, [r8]
 80173a2:	4608      	mov	r0, r1
 80173a4:	f1ba 0f00 	cmp.w	sl, #0
 80173a8:	d107      	bne.n	80173ba <_strtol_l.isra.0+0xda>
 80173aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173ae:	b102      	cbz	r2, 80173b2 <_strtol_l.isra.0+0xd2>
 80173b0:	4240      	negs	r0, r0
 80173b2:	f1ba 0f00 	cmp.w	sl, #0
 80173b6:	d0f8      	beq.n	80173aa <_strtol_l.isra.0+0xca>
 80173b8:	b10f      	cbz	r7, 80173be <_strtol_l.isra.0+0xde>
 80173ba:	f105 39ff 	add.w	r9, r5, #4294967295
 80173be:	f8ca 9000 	str.w	r9, [sl]
 80173c2:	e7f2      	b.n	80173aa <_strtol_l.isra.0+0xca>
 80173c4:	2430      	movs	r4, #48	; 0x30
 80173c6:	2e00      	cmp	r6, #0
 80173c8:	d1af      	bne.n	801732a <_strtol_l.isra.0+0x4a>
 80173ca:	2608      	movs	r6, #8
 80173cc:	e7ad      	b.n	801732a <_strtol_l.isra.0+0x4a>
 80173ce:	2c30      	cmp	r4, #48	; 0x30
 80173d0:	d0a3      	beq.n	801731a <_strtol_l.isra.0+0x3a>
 80173d2:	260a      	movs	r6, #10
 80173d4:	e7a9      	b.n	801732a <_strtol_l.isra.0+0x4a>
	...

080173d8 <_strtol_r>:
 80173d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80173da:	4c06      	ldr	r4, [pc, #24]	; (80173f4 <_strtol_r+0x1c>)
 80173dc:	4d06      	ldr	r5, [pc, #24]	; (80173f8 <_strtol_r+0x20>)
 80173de:	6824      	ldr	r4, [r4, #0]
 80173e0:	6a24      	ldr	r4, [r4, #32]
 80173e2:	2c00      	cmp	r4, #0
 80173e4:	bf08      	it	eq
 80173e6:	462c      	moveq	r4, r5
 80173e8:	9400      	str	r4, [sp, #0]
 80173ea:	f7ff ff79 	bl	80172e0 <_strtol_l.isra.0>
 80173ee:	b003      	add	sp, #12
 80173f0:	bd30      	pop	{r4, r5, pc}
 80173f2:	bf00      	nop
 80173f4:	2000000c 	.word	0x2000000c
 80173f8:	20000070 	.word	0x20000070

080173fc <_vsiprintf_r>:
 80173fc:	b500      	push	{lr}
 80173fe:	b09b      	sub	sp, #108	; 0x6c
 8017400:	9100      	str	r1, [sp, #0]
 8017402:	9104      	str	r1, [sp, #16]
 8017404:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017408:	9105      	str	r1, [sp, #20]
 801740a:	9102      	str	r1, [sp, #8]
 801740c:	4905      	ldr	r1, [pc, #20]	; (8017424 <_vsiprintf_r+0x28>)
 801740e:	9103      	str	r1, [sp, #12]
 8017410:	4669      	mov	r1, sp
 8017412:	f001 fed5 	bl	80191c0 <_svfiprintf_r>
 8017416:	9b00      	ldr	r3, [sp, #0]
 8017418:	2200      	movs	r2, #0
 801741a:	701a      	strb	r2, [r3, #0]
 801741c:	b01b      	add	sp, #108	; 0x6c
 801741e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017422:	bf00      	nop
 8017424:	ffff0208 	.word	0xffff0208

08017428 <vsiprintf>:
 8017428:	4613      	mov	r3, r2
 801742a:	460a      	mov	r2, r1
 801742c:	4601      	mov	r1, r0
 801742e:	4802      	ldr	r0, [pc, #8]	; (8017438 <vsiprintf+0x10>)
 8017430:	6800      	ldr	r0, [r0, #0]
 8017432:	f7ff bfe3 	b.w	80173fc <_vsiprintf_r>
 8017436:	bf00      	nop
 8017438:	2000000c 	.word	0x2000000c

0801743c <quorem>:
 801743c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017440:	6903      	ldr	r3, [r0, #16]
 8017442:	690c      	ldr	r4, [r1, #16]
 8017444:	42a3      	cmp	r3, r4
 8017446:	4680      	mov	r8, r0
 8017448:	f2c0 8082 	blt.w	8017550 <quorem+0x114>
 801744c:	3c01      	subs	r4, #1
 801744e:	f101 0714 	add.w	r7, r1, #20
 8017452:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017456:	f100 0614 	add.w	r6, r0, #20
 801745a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801745e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017462:	eb06 030c 	add.w	r3, r6, ip
 8017466:	3501      	adds	r5, #1
 8017468:	eb07 090c 	add.w	r9, r7, ip
 801746c:	9301      	str	r3, [sp, #4]
 801746e:	fbb0 f5f5 	udiv	r5, r0, r5
 8017472:	b395      	cbz	r5, 80174da <quorem+0x9e>
 8017474:	f04f 0a00 	mov.w	sl, #0
 8017478:	4638      	mov	r0, r7
 801747a:	46b6      	mov	lr, r6
 801747c:	46d3      	mov	fp, sl
 801747e:	f850 2b04 	ldr.w	r2, [r0], #4
 8017482:	b293      	uxth	r3, r2
 8017484:	fb05 a303 	mla	r3, r5, r3, sl
 8017488:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801748c:	b29b      	uxth	r3, r3
 801748e:	ebab 0303 	sub.w	r3, fp, r3
 8017492:	0c12      	lsrs	r2, r2, #16
 8017494:	f8de b000 	ldr.w	fp, [lr]
 8017498:	fb05 a202 	mla	r2, r5, r2, sl
 801749c:	fa13 f38b 	uxtah	r3, r3, fp
 80174a0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80174a4:	fa1f fb82 	uxth.w	fp, r2
 80174a8:	f8de 2000 	ldr.w	r2, [lr]
 80174ac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80174b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80174b4:	b29b      	uxth	r3, r3
 80174b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80174ba:	4581      	cmp	r9, r0
 80174bc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80174c0:	f84e 3b04 	str.w	r3, [lr], #4
 80174c4:	d2db      	bcs.n	801747e <quorem+0x42>
 80174c6:	f856 300c 	ldr.w	r3, [r6, ip]
 80174ca:	b933      	cbnz	r3, 80174da <quorem+0x9e>
 80174cc:	9b01      	ldr	r3, [sp, #4]
 80174ce:	3b04      	subs	r3, #4
 80174d0:	429e      	cmp	r6, r3
 80174d2:	461a      	mov	r2, r3
 80174d4:	d330      	bcc.n	8017538 <quorem+0xfc>
 80174d6:	f8c8 4010 	str.w	r4, [r8, #16]
 80174da:	4640      	mov	r0, r8
 80174dc:	f001 fbb4 	bl	8018c48 <__mcmp>
 80174e0:	2800      	cmp	r0, #0
 80174e2:	db25      	blt.n	8017530 <quorem+0xf4>
 80174e4:	3501      	adds	r5, #1
 80174e6:	4630      	mov	r0, r6
 80174e8:	f04f 0c00 	mov.w	ip, #0
 80174ec:	f857 2b04 	ldr.w	r2, [r7], #4
 80174f0:	f8d0 e000 	ldr.w	lr, [r0]
 80174f4:	b293      	uxth	r3, r2
 80174f6:	ebac 0303 	sub.w	r3, ip, r3
 80174fa:	0c12      	lsrs	r2, r2, #16
 80174fc:	fa13 f38e 	uxtah	r3, r3, lr
 8017500:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017504:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017508:	b29b      	uxth	r3, r3
 801750a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801750e:	45b9      	cmp	r9, r7
 8017510:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017514:	f840 3b04 	str.w	r3, [r0], #4
 8017518:	d2e8      	bcs.n	80174ec <quorem+0xb0>
 801751a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801751e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8017522:	b92a      	cbnz	r2, 8017530 <quorem+0xf4>
 8017524:	3b04      	subs	r3, #4
 8017526:	429e      	cmp	r6, r3
 8017528:	461a      	mov	r2, r3
 801752a:	d30b      	bcc.n	8017544 <quorem+0x108>
 801752c:	f8c8 4010 	str.w	r4, [r8, #16]
 8017530:	4628      	mov	r0, r5
 8017532:	b003      	add	sp, #12
 8017534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017538:	6812      	ldr	r2, [r2, #0]
 801753a:	3b04      	subs	r3, #4
 801753c:	2a00      	cmp	r2, #0
 801753e:	d1ca      	bne.n	80174d6 <quorem+0x9a>
 8017540:	3c01      	subs	r4, #1
 8017542:	e7c5      	b.n	80174d0 <quorem+0x94>
 8017544:	6812      	ldr	r2, [r2, #0]
 8017546:	3b04      	subs	r3, #4
 8017548:	2a00      	cmp	r2, #0
 801754a:	d1ef      	bne.n	801752c <quorem+0xf0>
 801754c:	3c01      	subs	r4, #1
 801754e:	e7ea      	b.n	8017526 <quorem+0xea>
 8017550:	2000      	movs	r0, #0
 8017552:	e7ee      	b.n	8017532 <quorem+0xf6>
 8017554:	0000      	movs	r0, r0
	...

08017558 <_dtoa_r>:
 8017558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801755c:	ec57 6b10 	vmov	r6, r7, d0
 8017560:	b097      	sub	sp, #92	; 0x5c
 8017562:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017564:	9106      	str	r1, [sp, #24]
 8017566:	4604      	mov	r4, r0
 8017568:	920b      	str	r2, [sp, #44]	; 0x2c
 801756a:	9312      	str	r3, [sp, #72]	; 0x48
 801756c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017570:	e9cd 6700 	strd	r6, r7, [sp]
 8017574:	b93d      	cbnz	r5, 8017586 <_dtoa_r+0x2e>
 8017576:	2010      	movs	r0, #16
 8017578:	f001 f8ee 	bl	8018758 <malloc>
 801757c:	6260      	str	r0, [r4, #36]	; 0x24
 801757e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017582:	6005      	str	r5, [r0, #0]
 8017584:	60c5      	str	r5, [r0, #12]
 8017586:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017588:	6819      	ldr	r1, [r3, #0]
 801758a:	b151      	cbz	r1, 80175a2 <_dtoa_r+0x4a>
 801758c:	685a      	ldr	r2, [r3, #4]
 801758e:	604a      	str	r2, [r1, #4]
 8017590:	2301      	movs	r3, #1
 8017592:	4093      	lsls	r3, r2
 8017594:	608b      	str	r3, [r1, #8]
 8017596:	4620      	mov	r0, r4
 8017598:	f001 f937 	bl	801880a <_Bfree>
 801759c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801759e:	2200      	movs	r2, #0
 80175a0:	601a      	str	r2, [r3, #0]
 80175a2:	1e3b      	subs	r3, r7, #0
 80175a4:	bfbb      	ittet	lt
 80175a6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80175aa:	9301      	strlt	r3, [sp, #4]
 80175ac:	2300      	movge	r3, #0
 80175ae:	2201      	movlt	r2, #1
 80175b0:	bfac      	ite	ge
 80175b2:	f8c8 3000 	strge.w	r3, [r8]
 80175b6:	f8c8 2000 	strlt.w	r2, [r8]
 80175ba:	4baf      	ldr	r3, [pc, #700]	; (8017878 <_dtoa_r+0x320>)
 80175bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80175c0:	ea33 0308 	bics.w	r3, r3, r8
 80175c4:	d114      	bne.n	80175f0 <_dtoa_r+0x98>
 80175c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80175c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80175cc:	6013      	str	r3, [r2, #0]
 80175ce:	9b00      	ldr	r3, [sp, #0]
 80175d0:	b923      	cbnz	r3, 80175dc <_dtoa_r+0x84>
 80175d2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80175d6:	2800      	cmp	r0, #0
 80175d8:	f000 8542 	beq.w	8018060 <_dtoa_r+0xb08>
 80175dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80175de:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801788c <_dtoa_r+0x334>
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	f000 8544 	beq.w	8018070 <_dtoa_r+0xb18>
 80175e8:	f10b 0303 	add.w	r3, fp, #3
 80175ec:	f000 bd3e 	b.w	801806c <_dtoa_r+0xb14>
 80175f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80175f4:	2200      	movs	r2, #0
 80175f6:	2300      	movs	r3, #0
 80175f8:	4630      	mov	r0, r6
 80175fa:	4639      	mov	r1, r7
 80175fc:	f7e9 fa7c 	bl	8000af8 <__aeabi_dcmpeq>
 8017600:	4681      	mov	r9, r0
 8017602:	b168      	cbz	r0, 8017620 <_dtoa_r+0xc8>
 8017604:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017606:	2301      	movs	r3, #1
 8017608:	6013      	str	r3, [r2, #0]
 801760a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801760c:	2b00      	cmp	r3, #0
 801760e:	f000 8524 	beq.w	801805a <_dtoa_r+0xb02>
 8017612:	4b9a      	ldr	r3, [pc, #616]	; (801787c <_dtoa_r+0x324>)
 8017614:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017616:	f103 3bff 	add.w	fp, r3, #4294967295
 801761a:	6013      	str	r3, [r2, #0]
 801761c:	f000 bd28 	b.w	8018070 <_dtoa_r+0xb18>
 8017620:	aa14      	add	r2, sp, #80	; 0x50
 8017622:	a915      	add	r1, sp, #84	; 0x54
 8017624:	ec47 6b10 	vmov	d0, r6, r7
 8017628:	4620      	mov	r0, r4
 801762a:	f001 fbfb 	bl	8018e24 <__d2b>
 801762e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8017632:	9004      	str	r0, [sp, #16]
 8017634:	2d00      	cmp	r5, #0
 8017636:	d07c      	beq.n	8017732 <_dtoa_r+0x1da>
 8017638:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801763c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017640:	46b2      	mov	sl, r6
 8017642:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8017646:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801764a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801764e:	2200      	movs	r2, #0
 8017650:	4b8b      	ldr	r3, [pc, #556]	; (8017880 <_dtoa_r+0x328>)
 8017652:	4650      	mov	r0, sl
 8017654:	4659      	mov	r1, fp
 8017656:	f7e8 fe2f 	bl	80002b8 <__aeabi_dsub>
 801765a:	a381      	add	r3, pc, #516	; (adr r3, 8017860 <_dtoa_r+0x308>)
 801765c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017660:	f7e8 ffe2 	bl	8000628 <__aeabi_dmul>
 8017664:	a380      	add	r3, pc, #512	; (adr r3, 8017868 <_dtoa_r+0x310>)
 8017666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801766a:	f7e8 fe27 	bl	80002bc <__adddf3>
 801766e:	4606      	mov	r6, r0
 8017670:	4628      	mov	r0, r5
 8017672:	460f      	mov	r7, r1
 8017674:	f7e8 ff6e 	bl	8000554 <__aeabi_i2d>
 8017678:	a37d      	add	r3, pc, #500	; (adr r3, 8017870 <_dtoa_r+0x318>)
 801767a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801767e:	f7e8 ffd3 	bl	8000628 <__aeabi_dmul>
 8017682:	4602      	mov	r2, r0
 8017684:	460b      	mov	r3, r1
 8017686:	4630      	mov	r0, r6
 8017688:	4639      	mov	r1, r7
 801768a:	f7e8 fe17 	bl	80002bc <__adddf3>
 801768e:	4606      	mov	r6, r0
 8017690:	460f      	mov	r7, r1
 8017692:	f7e9 fa79 	bl	8000b88 <__aeabi_d2iz>
 8017696:	2200      	movs	r2, #0
 8017698:	4682      	mov	sl, r0
 801769a:	2300      	movs	r3, #0
 801769c:	4630      	mov	r0, r6
 801769e:	4639      	mov	r1, r7
 80176a0:	f7e9 fa34 	bl	8000b0c <__aeabi_dcmplt>
 80176a4:	b148      	cbz	r0, 80176ba <_dtoa_r+0x162>
 80176a6:	4650      	mov	r0, sl
 80176a8:	f7e8 ff54 	bl	8000554 <__aeabi_i2d>
 80176ac:	4632      	mov	r2, r6
 80176ae:	463b      	mov	r3, r7
 80176b0:	f7e9 fa22 	bl	8000af8 <__aeabi_dcmpeq>
 80176b4:	b908      	cbnz	r0, 80176ba <_dtoa_r+0x162>
 80176b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80176ba:	f1ba 0f16 	cmp.w	sl, #22
 80176be:	d859      	bhi.n	8017774 <_dtoa_r+0x21c>
 80176c0:	4970      	ldr	r1, [pc, #448]	; (8017884 <_dtoa_r+0x32c>)
 80176c2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80176c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80176ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80176ce:	f7e9 fa3b 	bl	8000b48 <__aeabi_dcmpgt>
 80176d2:	2800      	cmp	r0, #0
 80176d4:	d050      	beq.n	8017778 <_dtoa_r+0x220>
 80176d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80176da:	2300      	movs	r3, #0
 80176dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80176de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80176e0:	1b5d      	subs	r5, r3, r5
 80176e2:	f1b5 0801 	subs.w	r8, r5, #1
 80176e6:	bf49      	itett	mi
 80176e8:	f1c5 0301 	rsbmi	r3, r5, #1
 80176ec:	2300      	movpl	r3, #0
 80176ee:	9305      	strmi	r3, [sp, #20]
 80176f0:	f04f 0800 	movmi.w	r8, #0
 80176f4:	bf58      	it	pl
 80176f6:	9305      	strpl	r3, [sp, #20]
 80176f8:	f1ba 0f00 	cmp.w	sl, #0
 80176fc:	db3e      	blt.n	801777c <_dtoa_r+0x224>
 80176fe:	2300      	movs	r3, #0
 8017700:	44d0      	add	r8, sl
 8017702:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017706:	9307      	str	r3, [sp, #28]
 8017708:	9b06      	ldr	r3, [sp, #24]
 801770a:	2b09      	cmp	r3, #9
 801770c:	f200 8090 	bhi.w	8017830 <_dtoa_r+0x2d8>
 8017710:	2b05      	cmp	r3, #5
 8017712:	bfc4      	itt	gt
 8017714:	3b04      	subgt	r3, #4
 8017716:	9306      	strgt	r3, [sp, #24]
 8017718:	9b06      	ldr	r3, [sp, #24]
 801771a:	f1a3 0302 	sub.w	r3, r3, #2
 801771e:	bfcc      	ite	gt
 8017720:	2500      	movgt	r5, #0
 8017722:	2501      	movle	r5, #1
 8017724:	2b03      	cmp	r3, #3
 8017726:	f200 808f 	bhi.w	8017848 <_dtoa_r+0x2f0>
 801772a:	e8df f003 	tbb	[pc, r3]
 801772e:	7f7d      	.short	0x7f7d
 8017730:	7131      	.short	0x7131
 8017732:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8017736:	441d      	add	r5, r3
 8017738:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801773c:	2820      	cmp	r0, #32
 801773e:	dd13      	ble.n	8017768 <_dtoa_r+0x210>
 8017740:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8017744:	9b00      	ldr	r3, [sp, #0]
 8017746:	fa08 f800 	lsl.w	r8, r8, r0
 801774a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801774e:	fa23 f000 	lsr.w	r0, r3, r0
 8017752:	ea48 0000 	orr.w	r0, r8, r0
 8017756:	f7e8 feed 	bl	8000534 <__aeabi_ui2d>
 801775a:	2301      	movs	r3, #1
 801775c:	4682      	mov	sl, r0
 801775e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017762:	3d01      	subs	r5, #1
 8017764:	9313      	str	r3, [sp, #76]	; 0x4c
 8017766:	e772      	b.n	801764e <_dtoa_r+0xf6>
 8017768:	9b00      	ldr	r3, [sp, #0]
 801776a:	f1c0 0020 	rsb	r0, r0, #32
 801776e:	fa03 f000 	lsl.w	r0, r3, r0
 8017772:	e7f0      	b.n	8017756 <_dtoa_r+0x1fe>
 8017774:	2301      	movs	r3, #1
 8017776:	e7b1      	b.n	80176dc <_dtoa_r+0x184>
 8017778:	900f      	str	r0, [sp, #60]	; 0x3c
 801777a:	e7b0      	b.n	80176de <_dtoa_r+0x186>
 801777c:	9b05      	ldr	r3, [sp, #20]
 801777e:	eba3 030a 	sub.w	r3, r3, sl
 8017782:	9305      	str	r3, [sp, #20]
 8017784:	f1ca 0300 	rsb	r3, sl, #0
 8017788:	9307      	str	r3, [sp, #28]
 801778a:	2300      	movs	r3, #0
 801778c:	930e      	str	r3, [sp, #56]	; 0x38
 801778e:	e7bb      	b.n	8017708 <_dtoa_r+0x1b0>
 8017790:	2301      	movs	r3, #1
 8017792:	930a      	str	r3, [sp, #40]	; 0x28
 8017794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017796:	2b00      	cmp	r3, #0
 8017798:	dd59      	ble.n	801784e <_dtoa_r+0x2f6>
 801779a:	9302      	str	r3, [sp, #8]
 801779c:	4699      	mov	r9, r3
 801779e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80177a0:	2200      	movs	r2, #0
 80177a2:	6072      	str	r2, [r6, #4]
 80177a4:	2204      	movs	r2, #4
 80177a6:	f102 0014 	add.w	r0, r2, #20
 80177aa:	4298      	cmp	r0, r3
 80177ac:	6871      	ldr	r1, [r6, #4]
 80177ae:	d953      	bls.n	8017858 <_dtoa_r+0x300>
 80177b0:	4620      	mov	r0, r4
 80177b2:	f000 fff6 	bl	80187a2 <_Balloc>
 80177b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80177b8:	6030      	str	r0, [r6, #0]
 80177ba:	f1b9 0f0e 	cmp.w	r9, #14
 80177be:	f8d3 b000 	ldr.w	fp, [r3]
 80177c2:	f200 80e6 	bhi.w	8017992 <_dtoa_r+0x43a>
 80177c6:	2d00      	cmp	r5, #0
 80177c8:	f000 80e3 	beq.w	8017992 <_dtoa_r+0x43a>
 80177cc:	ed9d 7b00 	vldr	d7, [sp]
 80177d0:	f1ba 0f00 	cmp.w	sl, #0
 80177d4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80177d8:	dd74      	ble.n	80178c4 <_dtoa_r+0x36c>
 80177da:	4a2a      	ldr	r2, [pc, #168]	; (8017884 <_dtoa_r+0x32c>)
 80177dc:	f00a 030f 	and.w	r3, sl, #15
 80177e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80177e4:	ed93 7b00 	vldr	d7, [r3]
 80177e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80177ec:	06f0      	lsls	r0, r6, #27
 80177ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 80177f2:	d565      	bpl.n	80178c0 <_dtoa_r+0x368>
 80177f4:	4b24      	ldr	r3, [pc, #144]	; (8017888 <_dtoa_r+0x330>)
 80177f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80177fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80177fe:	f7e9 f83d 	bl	800087c <__aeabi_ddiv>
 8017802:	e9cd 0100 	strd	r0, r1, [sp]
 8017806:	f006 060f 	and.w	r6, r6, #15
 801780a:	2503      	movs	r5, #3
 801780c:	4f1e      	ldr	r7, [pc, #120]	; (8017888 <_dtoa_r+0x330>)
 801780e:	e04c      	b.n	80178aa <_dtoa_r+0x352>
 8017810:	2301      	movs	r3, #1
 8017812:	930a      	str	r3, [sp, #40]	; 0x28
 8017814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017816:	4453      	add	r3, sl
 8017818:	f103 0901 	add.w	r9, r3, #1
 801781c:	9302      	str	r3, [sp, #8]
 801781e:	464b      	mov	r3, r9
 8017820:	2b01      	cmp	r3, #1
 8017822:	bfb8      	it	lt
 8017824:	2301      	movlt	r3, #1
 8017826:	e7ba      	b.n	801779e <_dtoa_r+0x246>
 8017828:	2300      	movs	r3, #0
 801782a:	e7b2      	b.n	8017792 <_dtoa_r+0x23a>
 801782c:	2300      	movs	r3, #0
 801782e:	e7f0      	b.n	8017812 <_dtoa_r+0x2ba>
 8017830:	2501      	movs	r5, #1
 8017832:	2300      	movs	r3, #0
 8017834:	9306      	str	r3, [sp, #24]
 8017836:	950a      	str	r5, [sp, #40]	; 0x28
 8017838:	f04f 33ff 	mov.w	r3, #4294967295
 801783c:	9302      	str	r3, [sp, #8]
 801783e:	4699      	mov	r9, r3
 8017840:	2200      	movs	r2, #0
 8017842:	2312      	movs	r3, #18
 8017844:	920b      	str	r2, [sp, #44]	; 0x2c
 8017846:	e7aa      	b.n	801779e <_dtoa_r+0x246>
 8017848:	2301      	movs	r3, #1
 801784a:	930a      	str	r3, [sp, #40]	; 0x28
 801784c:	e7f4      	b.n	8017838 <_dtoa_r+0x2e0>
 801784e:	2301      	movs	r3, #1
 8017850:	9302      	str	r3, [sp, #8]
 8017852:	4699      	mov	r9, r3
 8017854:	461a      	mov	r2, r3
 8017856:	e7f5      	b.n	8017844 <_dtoa_r+0x2ec>
 8017858:	3101      	adds	r1, #1
 801785a:	6071      	str	r1, [r6, #4]
 801785c:	0052      	lsls	r2, r2, #1
 801785e:	e7a2      	b.n	80177a6 <_dtoa_r+0x24e>
 8017860:	636f4361 	.word	0x636f4361
 8017864:	3fd287a7 	.word	0x3fd287a7
 8017868:	8b60c8b3 	.word	0x8b60c8b3
 801786c:	3fc68a28 	.word	0x3fc68a28
 8017870:	509f79fb 	.word	0x509f79fb
 8017874:	3fd34413 	.word	0x3fd34413
 8017878:	7ff00000 	.word	0x7ff00000
 801787c:	0801a544 	.word	0x0801a544
 8017880:	3ff80000 	.word	0x3ff80000
 8017884:	0801a448 	.word	0x0801a448
 8017888:	0801a420 	.word	0x0801a420
 801788c:	0801a411 	.word	0x0801a411
 8017890:	07f1      	lsls	r1, r6, #31
 8017892:	d508      	bpl.n	80178a6 <_dtoa_r+0x34e>
 8017894:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017898:	e9d7 2300 	ldrd	r2, r3, [r7]
 801789c:	f7e8 fec4 	bl	8000628 <__aeabi_dmul>
 80178a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80178a4:	3501      	adds	r5, #1
 80178a6:	1076      	asrs	r6, r6, #1
 80178a8:	3708      	adds	r7, #8
 80178aa:	2e00      	cmp	r6, #0
 80178ac:	d1f0      	bne.n	8017890 <_dtoa_r+0x338>
 80178ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80178b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178b6:	f7e8 ffe1 	bl	800087c <__aeabi_ddiv>
 80178ba:	e9cd 0100 	strd	r0, r1, [sp]
 80178be:	e01a      	b.n	80178f6 <_dtoa_r+0x39e>
 80178c0:	2502      	movs	r5, #2
 80178c2:	e7a3      	b.n	801780c <_dtoa_r+0x2b4>
 80178c4:	f000 80a0 	beq.w	8017a08 <_dtoa_r+0x4b0>
 80178c8:	f1ca 0600 	rsb	r6, sl, #0
 80178cc:	4b9f      	ldr	r3, [pc, #636]	; (8017b4c <_dtoa_r+0x5f4>)
 80178ce:	4fa0      	ldr	r7, [pc, #640]	; (8017b50 <_dtoa_r+0x5f8>)
 80178d0:	f006 020f 	and.w	r2, r6, #15
 80178d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80178d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80178e0:	f7e8 fea2 	bl	8000628 <__aeabi_dmul>
 80178e4:	e9cd 0100 	strd	r0, r1, [sp]
 80178e8:	1136      	asrs	r6, r6, #4
 80178ea:	2300      	movs	r3, #0
 80178ec:	2502      	movs	r5, #2
 80178ee:	2e00      	cmp	r6, #0
 80178f0:	d17f      	bne.n	80179f2 <_dtoa_r+0x49a>
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	d1e1      	bne.n	80178ba <_dtoa_r+0x362>
 80178f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	f000 8087 	beq.w	8017a0c <_dtoa_r+0x4b4>
 80178fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017902:	2200      	movs	r2, #0
 8017904:	4b93      	ldr	r3, [pc, #588]	; (8017b54 <_dtoa_r+0x5fc>)
 8017906:	4630      	mov	r0, r6
 8017908:	4639      	mov	r1, r7
 801790a:	f7e9 f8ff 	bl	8000b0c <__aeabi_dcmplt>
 801790e:	2800      	cmp	r0, #0
 8017910:	d07c      	beq.n	8017a0c <_dtoa_r+0x4b4>
 8017912:	f1b9 0f00 	cmp.w	r9, #0
 8017916:	d079      	beq.n	8017a0c <_dtoa_r+0x4b4>
 8017918:	9b02      	ldr	r3, [sp, #8]
 801791a:	2b00      	cmp	r3, #0
 801791c:	dd35      	ble.n	801798a <_dtoa_r+0x432>
 801791e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8017922:	9308      	str	r3, [sp, #32]
 8017924:	4639      	mov	r1, r7
 8017926:	2200      	movs	r2, #0
 8017928:	4b8b      	ldr	r3, [pc, #556]	; (8017b58 <_dtoa_r+0x600>)
 801792a:	4630      	mov	r0, r6
 801792c:	f7e8 fe7c 	bl	8000628 <__aeabi_dmul>
 8017930:	e9cd 0100 	strd	r0, r1, [sp]
 8017934:	9f02      	ldr	r7, [sp, #8]
 8017936:	3501      	adds	r5, #1
 8017938:	4628      	mov	r0, r5
 801793a:	f7e8 fe0b 	bl	8000554 <__aeabi_i2d>
 801793e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017942:	f7e8 fe71 	bl	8000628 <__aeabi_dmul>
 8017946:	2200      	movs	r2, #0
 8017948:	4b84      	ldr	r3, [pc, #528]	; (8017b5c <_dtoa_r+0x604>)
 801794a:	f7e8 fcb7 	bl	80002bc <__adddf3>
 801794e:	4605      	mov	r5, r0
 8017950:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017954:	2f00      	cmp	r7, #0
 8017956:	d15d      	bne.n	8017a14 <_dtoa_r+0x4bc>
 8017958:	2200      	movs	r2, #0
 801795a:	4b81      	ldr	r3, [pc, #516]	; (8017b60 <_dtoa_r+0x608>)
 801795c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017960:	f7e8 fcaa 	bl	80002b8 <__aeabi_dsub>
 8017964:	462a      	mov	r2, r5
 8017966:	4633      	mov	r3, r6
 8017968:	e9cd 0100 	strd	r0, r1, [sp]
 801796c:	f7e9 f8ec 	bl	8000b48 <__aeabi_dcmpgt>
 8017970:	2800      	cmp	r0, #0
 8017972:	f040 8288 	bne.w	8017e86 <_dtoa_r+0x92e>
 8017976:	462a      	mov	r2, r5
 8017978:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801797c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017980:	f7e9 f8c4 	bl	8000b0c <__aeabi_dcmplt>
 8017984:	2800      	cmp	r0, #0
 8017986:	f040 827c 	bne.w	8017e82 <_dtoa_r+0x92a>
 801798a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801798e:	e9cd 2300 	strd	r2, r3, [sp]
 8017992:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017994:	2b00      	cmp	r3, #0
 8017996:	f2c0 8150 	blt.w	8017c3a <_dtoa_r+0x6e2>
 801799a:	f1ba 0f0e 	cmp.w	sl, #14
 801799e:	f300 814c 	bgt.w	8017c3a <_dtoa_r+0x6e2>
 80179a2:	4b6a      	ldr	r3, [pc, #424]	; (8017b4c <_dtoa_r+0x5f4>)
 80179a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80179a8:	ed93 7b00 	vldr	d7, [r3]
 80179ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80179b4:	f280 80d8 	bge.w	8017b68 <_dtoa_r+0x610>
 80179b8:	f1b9 0f00 	cmp.w	r9, #0
 80179bc:	f300 80d4 	bgt.w	8017b68 <_dtoa_r+0x610>
 80179c0:	f040 825e 	bne.w	8017e80 <_dtoa_r+0x928>
 80179c4:	2200      	movs	r2, #0
 80179c6:	4b66      	ldr	r3, [pc, #408]	; (8017b60 <_dtoa_r+0x608>)
 80179c8:	ec51 0b17 	vmov	r0, r1, d7
 80179cc:	f7e8 fe2c 	bl	8000628 <__aeabi_dmul>
 80179d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80179d4:	f7e9 f8ae 	bl	8000b34 <__aeabi_dcmpge>
 80179d8:	464f      	mov	r7, r9
 80179da:	464e      	mov	r6, r9
 80179dc:	2800      	cmp	r0, #0
 80179de:	f040 8234 	bne.w	8017e4a <_dtoa_r+0x8f2>
 80179e2:	2331      	movs	r3, #49	; 0x31
 80179e4:	f10b 0501 	add.w	r5, fp, #1
 80179e8:	f88b 3000 	strb.w	r3, [fp]
 80179ec:	f10a 0a01 	add.w	sl, sl, #1
 80179f0:	e22f      	b.n	8017e52 <_dtoa_r+0x8fa>
 80179f2:	07f2      	lsls	r2, r6, #31
 80179f4:	d505      	bpl.n	8017a02 <_dtoa_r+0x4aa>
 80179f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80179fa:	f7e8 fe15 	bl	8000628 <__aeabi_dmul>
 80179fe:	3501      	adds	r5, #1
 8017a00:	2301      	movs	r3, #1
 8017a02:	1076      	asrs	r6, r6, #1
 8017a04:	3708      	adds	r7, #8
 8017a06:	e772      	b.n	80178ee <_dtoa_r+0x396>
 8017a08:	2502      	movs	r5, #2
 8017a0a:	e774      	b.n	80178f6 <_dtoa_r+0x39e>
 8017a0c:	f8cd a020 	str.w	sl, [sp, #32]
 8017a10:	464f      	mov	r7, r9
 8017a12:	e791      	b.n	8017938 <_dtoa_r+0x3e0>
 8017a14:	4b4d      	ldr	r3, [pc, #308]	; (8017b4c <_dtoa_r+0x5f4>)
 8017a16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017a1a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d047      	beq.n	8017ab4 <_dtoa_r+0x55c>
 8017a24:	4602      	mov	r2, r0
 8017a26:	460b      	mov	r3, r1
 8017a28:	2000      	movs	r0, #0
 8017a2a:	494e      	ldr	r1, [pc, #312]	; (8017b64 <_dtoa_r+0x60c>)
 8017a2c:	f7e8 ff26 	bl	800087c <__aeabi_ddiv>
 8017a30:	462a      	mov	r2, r5
 8017a32:	4633      	mov	r3, r6
 8017a34:	f7e8 fc40 	bl	80002b8 <__aeabi_dsub>
 8017a38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017a3c:	465d      	mov	r5, fp
 8017a3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a42:	f7e9 f8a1 	bl	8000b88 <__aeabi_d2iz>
 8017a46:	4606      	mov	r6, r0
 8017a48:	f7e8 fd84 	bl	8000554 <__aeabi_i2d>
 8017a4c:	4602      	mov	r2, r0
 8017a4e:	460b      	mov	r3, r1
 8017a50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a54:	f7e8 fc30 	bl	80002b8 <__aeabi_dsub>
 8017a58:	3630      	adds	r6, #48	; 0x30
 8017a5a:	f805 6b01 	strb.w	r6, [r5], #1
 8017a5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017a62:	e9cd 0100 	strd	r0, r1, [sp]
 8017a66:	f7e9 f851 	bl	8000b0c <__aeabi_dcmplt>
 8017a6a:	2800      	cmp	r0, #0
 8017a6c:	d163      	bne.n	8017b36 <_dtoa_r+0x5de>
 8017a6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a72:	2000      	movs	r0, #0
 8017a74:	4937      	ldr	r1, [pc, #220]	; (8017b54 <_dtoa_r+0x5fc>)
 8017a76:	f7e8 fc1f 	bl	80002b8 <__aeabi_dsub>
 8017a7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017a7e:	f7e9 f845 	bl	8000b0c <__aeabi_dcmplt>
 8017a82:	2800      	cmp	r0, #0
 8017a84:	f040 80b7 	bne.w	8017bf6 <_dtoa_r+0x69e>
 8017a88:	eba5 030b 	sub.w	r3, r5, fp
 8017a8c:	429f      	cmp	r7, r3
 8017a8e:	f77f af7c 	ble.w	801798a <_dtoa_r+0x432>
 8017a92:	2200      	movs	r2, #0
 8017a94:	4b30      	ldr	r3, [pc, #192]	; (8017b58 <_dtoa_r+0x600>)
 8017a96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017a9a:	f7e8 fdc5 	bl	8000628 <__aeabi_dmul>
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017aa4:	4b2c      	ldr	r3, [pc, #176]	; (8017b58 <_dtoa_r+0x600>)
 8017aa6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017aaa:	f7e8 fdbd 	bl	8000628 <__aeabi_dmul>
 8017aae:	e9cd 0100 	strd	r0, r1, [sp]
 8017ab2:	e7c4      	b.n	8017a3e <_dtoa_r+0x4e6>
 8017ab4:	462a      	mov	r2, r5
 8017ab6:	4633      	mov	r3, r6
 8017ab8:	f7e8 fdb6 	bl	8000628 <__aeabi_dmul>
 8017abc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017ac0:	eb0b 0507 	add.w	r5, fp, r7
 8017ac4:	465e      	mov	r6, fp
 8017ac6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017aca:	f7e9 f85d 	bl	8000b88 <__aeabi_d2iz>
 8017ace:	4607      	mov	r7, r0
 8017ad0:	f7e8 fd40 	bl	8000554 <__aeabi_i2d>
 8017ad4:	3730      	adds	r7, #48	; 0x30
 8017ad6:	4602      	mov	r2, r0
 8017ad8:	460b      	mov	r3, r1
 8017ada:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ade:	f7e8 fbeb 	bl	80002b8 <__aeabi_dsub>
 8017ae2:	f806 7b01 	strb.w	r7, [r6], #1
 8017ae6:	42ae      	cmp	r6, r5
 8017ae8:	e9cd 0100 	strd	r0, r1, [sp]
 8017aec:	f04f 0200 	mov.w	r2, #0
 8017af0:	d126      	bne.n	8017b40 <_dtoa_r+0x5e8>
 8017af2:	4b1c      	ldr	r3, [pc, #112]	; (8017b64 <_dtoa_r+0x60c>)
 8017af4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017af8:	f7e8 fbe0 	bl	80002bc <__adddf3>
 8017afc:	4602      	mov	r2, r0
 8017afe:	460b      	mov	r3, r1
 8017b00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b04:	f7e9 f820 	bl	8000b48 <__aeabi_dcmpgt>
 8017b08:	2800      	cmp	r0, #0
 8017b0a:	d174      	bne.n	8017bf6 <_dtoa_r+0x69e>
 8017b0c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017b10:	2000      	movs	r0, #0
 8017b12:	4914      	ldr	r1, [pc, #80]	; (8017b64 <_dtoa_r+0x60c>)
 8017b14:	f7e8 fbd0 	bl	80002b8 <__aeabi_dsub>
 8017b18:	4602      	mov	r2, r0
 8017b1a:	460b      	mov	r3, r1
 8017b1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b20:	f7e8 fff4 	bl	8000b0c <__aeabi_dcmplt>
 8017b24:	2800      	cmp	r0, #0
 8017b26:	f43f af30 	beq.w	801798a <_dtoa_r+0x432>
 8017b2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017b2e:	2b30      	cmp	r3, #48	; 0x30
 8017b30:	f105 32ff 	add.w	r2, r5, #4294967295
 8017b34:	d002      	beq.n	8017b3c <_dtoa_r+0x5e4>
 8017b36:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017b3a:	e04a      	b.n	8017bd2 <_dtoa_r+0x67a>
 8017b3c:	4615      	mov	r5, r2
 8017b3e:	e7f4      	b.n	8017b2a <_dtoa_r+0x5d2>
 8017b40:	4b05      	ldr	r3, [pc, #20]	; (8017b58 <_dtoa_r+0x600>)
 8017b42:	f7e8 fd71 	bl	8000628 <__aeabi_dmul>
 8017b46:	e9cd 0100 	strd	r0, r1, [sp]
 8017b4a:	e7bc      	b.n	8017ac6 <_dtoa_r+0x56e>
 8017b4c:	0801a448 	.word	0x0801a448
 8017b50:	0801a420 	.word	0x0801a420
 8017b54:	3ff00000 	.word	0x3ff00000
 8017b58:	40240000 	.word	0x40240000
 8017b5c:	401c0000 	.word	0x401c0000
 8017b60:	40140000 	.word	0x40140000
 8017b64:	3fe00000 	.word	0x3fe00000
 8017b68:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017b6c:	465d      	mov	r5, fp
 8017b6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b72:	4630      	mov	r0, r6
 8017b74:	4639      	mov	r1, r7
 8017b76:	f7e8 fe81 	bl	800087c <__aeabi_ddiv>
 8017b7a:	f7e9 f805 	bl	8000b88 <__aeabi_d2iz>
 8017b7e:	4680      	mov	r8, r0
 8017b80:	f7e8 fce8 	bl	8000554 <__aeabi_i2d>
 8017b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b88:	f7e8 fd4e 	bl	8000628 <__aeabi_dmul>
 8017b8c:	4602      	mov	r2, r0
 8017b8e:	460b      	mov	r3, r1
 8017b90:	4630      	mov	r0, r6
 8017b92:	4639      	mov	r1, r7
 8017b94:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017b98:	f7e8 fb8e 	bl	80002b8 <__aeabi_dsub>
 8017b9c:	f805 6b01 	strb.w	r6, [r5], #1
 8017ba0:	eba5 060b 	sub.w	r6, r5, fp
 8017ba4:	45b1      	cmp	r9, r6
 8017ba6:	4602      	mov	r2, r0
 8017ba8:	460b      	mov	r3, r1
 8017baa:	d139      	bne.n	8017c20 <_dtoa_r+0x6c8>
 8017bac:	f7e8 fb86 	bl	80002bc <__adddf3>
 8017bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017bb4:	4606      	mov	r6, r0
 8017bb6:	460f      	mov	r7, r1
 8017bb8:	f7e8 ffc6 	bl	8000b48 <__aeabi_dcmpgt>
 8017bbc:	b9c8      	cbnz	r0, 8017bf2 <_dtoa_r+0x69a>
 8017bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017bc2:	4630      	mov	r0, r6
 8017bc4:	4639      	mov	r1, r7
 8017bc6:	f7e8 ff97 	bl	8000af8 <__aeabi_dcmpeq>
 8017bca:	b110      	cbz	r0, 8017bd2 <_dtoa_r+0x67a>
 8017bcc:	f018 0f01 	tst.w	r8, #1
 8017bd0:	d10f      	bne.n	8017bf2 <_dtoa_r+0x69a>
 8017bd2:	9904      	ldr	r1, [sp, #16]
 8017bd4:	4620      	mov	r0, r4
 8017bd6:	f000 fe18 	bl	801880a <_Bfree>
 8017bda:	2300      	movs	r3, #0
 8017bdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017bde:	702b      	strb	r3, [r5, #0]
 8017be0:	f10a 0301 	add.w	r3, sl, #1
 8017be4:	6013      	str	r3, [r2, #0]
 8017be6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	f000 8241 	beq.w	8018070 <_dtoa_r+0xb18>
 8017bee:	601d      	str	r5, [r3, #0]
 8017bf0:	e23e      	b.n	8018070 <_dtoa_r+0xb18>
 8017bf2:	f8cd a020 	str.w	sl, [sp, #32]
 8017bf6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017bfa:	2a39      	cmp	r2, #57	; 0x39
 8017bfc:	f105 33ff 	add.w	r3, r5, #4294967295
 8017c00:	d108      	bne.n	8017c14 <_dtoa_r+0x6bc>
 8017c02:	459b      	cmp	fp, r3
 8017c04:	d10a      	bne.n	8017c1c <_dtoa_r+0x6c4>
 8017c06:	9b08      	ldr	r3, [sp, #32]
 8017c08:	3301      	adds	r3, #1
 8017c0a:	9308      	str	r3, [sp, #32]
 8017c0c:	2330      	movs	r3, #48	; 0x30
 8017c0e:	f88b 3000 	strb.w	r3, [fp]
 8017c12:	465b      	mov	r3, fp
 8017c14:	781a      	ldrb	r2, [r3, #0]
 8017c16:	3201      	adds	r2, #1
 8017c18:	701a      	strb	r2, [r3, #0]
 8017c1a:	e78c      	b.n	8017b36 <_dtoa_r+0x5de>
 8017c1c:	461d      	mov	r5, r3
 8017c1e:	e7ea      	b.n	8017bf6 <_dtoa_r+0x69e>
 8017c20:	2200      	movs	r2, #0
 8017c22:	4b9b      	ldr	r3, [pc, #620]	; (8017e90 <_dtoa_r+0x938>)
 8017c24:	f7e8 fd00 	bl	8000628 <__aeabi_dmul>
 8017c28:	2200      	movs	r2, #0
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	4606      	mov	r6, r0
 8017c2e:	460f      	mov	r7, r1
 8017c30:	f7e8 ff62 	bl	8000af8 <__aeabi_dcmpeq>
 8017c34:	2800      	cmp	r0, #0
 8017c36:	d09a      	beq.n	8017b6e <_dtoa_r+0x616>
 8017c38:	e7cb      	b.n	8017bd2 <_dtoa_r+0x67a>
 8017c3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017c3c:	2a00      	cmp	r2, #0
 8017c3e:	f000 808b 	beq.w	8017d58 <_dtoa_r+0x800>
 8017c42:	9a06      	ldr	r2, [sp, #24]
 8017c44:	2a01      	cmp	r2, #1
 8017c46:	dc6e      	bgt.n	8017d26 <_dtoa_r+0x7ce>
 8017c48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017c4a:	2a00      	cmp	r2, #0
 8017c4c:	d067      	beq.n	8017d1e <_dtoa_r+0x7c6>
 8017c4e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017c52:	9f07      	ldr	r7, [sp, #28]
 8017c54:	9d05      	ldr	r5, [sp, #20]
 8017c56:	9a05      	ldr	r2, [sp, #20]
 8017c58:	2101      	movs	r1, #1
 8017c5a:	441a      	add	r2, r3
 8017c5c:	4620      	mov	r0, r4
 8017c5e:	9205      	str	r2, [sp, #20]
 8017c60:	4498      	add	r8, r3
 8017c62:	f000 feb0 	bl	80189c6 <__i2b>
 8017c66:	4606      	mov	r6, r0
 8017c68:	2d00      	cmp	r5, #0
 8017c6a:	dd0c      	ble.n	8017c86 <_dtoa_r+0x72e>
 8017c6c:	f1b8 0f00 	cmp.w	r8, #0
 8017c70:	dd09      	ble.n	8017c86 <_dtoa_r+0x72e>
 8017c72:	4545      	cmp	r5, r8
 8017c74:	9a05      	ldr	r2, [sp, #20]
 8017c76:	462b      	mov	r3, r5
 8017c78:	bfa8      	it	ge
 8017c7a:	4643      	movge	r3, r8
 8017c7c:	1ad2      	subs	r2, r2, r3
 8017c7e:	9205      	str	r2, [sp, #20]
 8017c80:	1aed      	subs	r5, r5, r3
 8017c82:	eba8 0803 	sub.w	r8, r8, r3
 8017c86:	9b07      	ldr	r3, [sp, #28]
 8017c88:	b1eb      	cbz	r3, 8017cc6 <_dtoa_r+0x76e>
 8017c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d067      	beq.n	8017d60 <_dtoa_r+0x808>
 8017c90:	b18f      	cbz	r7, 8017cb6 <_dtoa_r+0x75e>
 8017c92:	4631      	mov	r1, r6
 8017c94:	463a      	mov	r2, r7
 8017c96:	4620      	mov	r0, r4
 8017c98:	f000 ff34 	bl	8018b04 <__pow5mult>
 8017c9c:	9a04      	ldr	r2, [sp, #16]
 8017c9e:	4601      	mov	r1, r0
 8017ca0:	4606      	mov	r6, r0
 8017ca2:	4620      	mov	r0, r4
 8017ca4:	f000 fe98 	bl	80189d8 <__multiply>
 8017ca8:	9904      	ldr	r1, [sp, #16]
 8017caa:	9008      	str	r0, [sp, #32]
 8017cac:	4620      	mov	r0, r4
 8017cae:	f000 fdac 	bl	801880a <_Bfree>
 8017cb2:	9b08      	ldr	r3, [sp, #32]
 8017cb4:	9304      	str	r3, [sp, #16]
 8017cb6:	9b07      	ldr	r3, [sp, #28]
 8017cb8:	1bda      	subs	r2, r3, r7
 8017cba:	d004      	beq.n	8017cc6 <_dtoa_r+0x76e>
 8017cbc:	9904      	ldr	r1, [sp, #16]
 8017cbe:	4620      	mov	r0, r4
 8017cc0:	f000 ff20 	bl	8018b04 <__pow5mult>
 8017cc4:	9004      	str	r0, [sp, #16]
 8017cc6:	2101      	movs	r1, #1
 8017cc8:	4620      	mov	r0, r4
 8017cca:	f000 fe7c 	bl	80189c6 <__i2b>
 8017cce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017cd0:	4607      	mov	r7, r0
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	f000 81d0 	beq.w	8018078 <_dtoa_r+0xb20>
 8017cd8:	461a      	mov	r2, r3
 8017cda:	4601      	mov	r1, r0
 8017cdc:	4620      	mov	r0, r4
 8017cde:	f000 ff11 	bl	8018b04 <__pow5mult>
 8017ce2:	9b06      	ldr	r3, [sp, #24]
 8017ce4:	2b01      	cmp	r3, #1
 8017ce6:	4607      	mov	r7, r0
 8017ce8:	dc40      	bgt.n	8017d6c <_dtoa_r+0x814>
 8017cea:	9b00      	ldr	r3, [sp, #0]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d139      	bne.n	8017d64 <_dtoa_r+0x80c>
 8017cf0:	9b01      	ldr	r3, [sp, #4]
 8017cf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d136      	bne.n	8017d68 <_dtoa_r+0x810>
 8017cfa:	9b01      	ldr	r3, [sp, #4]
 8017cfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017d00:	0d1b      	lsrs	r3, r3, #20
 8017d02:	051b      	lsls	r3, r3, #20
 8017d04:	b12b      	cbz	r3, 8017d12 <_dtoa_r+0x7ba>
 8017d06:	9b05      	ldr	r3, [sp, #20]
 8017d08:	3301      	adds	r3, #1
 8017d0a:	9305      	str	r3, [sp, #20]
 8017d0c:	f108 0801 	add.w	r8, r8, #1
 8017d10:	2301      	movs	r3, #1
 8017d12:	9307      	str	r3, [sp, #28]
 8017d14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d12a      	bne.n	8017d70 <_dtoa_r+0x818>
 8017d1a:	2001      	movs	r0, #1
 8017d1c:	e030      	b.n	8017d80 <_dtoa_r+0x828>
 8017d1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017d20:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017d24:	e795      	b.n	8017c52 <_dtoa_r+0x6fa>
 8017d26:	9b07      	ldr	r3, [sp, #28]
 8017d28:	f109 37ff 	add.w	r7, r9, #4294967295
 8017d2c:	42bb      	cmp	r3, r7
 8017d2e:	bfbf      	itttt	lt
 8017d30:	9b07      	ldrlt	r3, [sp, #28]
 8017d32:	9707      	strlt	r7, [sp, #28]
 8017d34:	1afa      	sublt	r2, r7, r3
 8017d36:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017d38:	bfbb      	ittet	lt
 8017d3a:	189b      	addlt	r3, r3, r2
 8017d3c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017d3e:	1bdf      	subge	r7, r3, r7
 8017d40:	2700      	movlt	r7, #0
 8017d42:	f1b9 0f00 	cmp.w	r9, #0
 8017d46:	bfb5      	itete	lt
 8017d48:	9b05      	ldrlt	r3, [sp, #20]
 8017d4a:	9d05      	ldrge	r5, [sp, #20]
 8017d4c:	eba3 0509 	sublt.w	r5, r3, r9
 8017d50:	464b      	movge	r3, r9
 8017d52:	bfb8      	it	lt
 8017d54:	2300      	movlt	r3, #0
 8017d56:	e77e      	b.n	8017c56 <_dtoa_r+0x6fe>
 8017d58:	9f07      	ldr	r7, [sp, #28]
 8017d5a:	9d05      	ldr	r5, [sp, #20]
 8017d5c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017d5e:	e783      	b.n	8017c68 <_dtoa_r+0x710>
 8017d60:	9a07      	ldr	r2, [sp, #28]
 8017d62:	e7ab      	b.n	8017cbc <_dtoa_r+0x764>
 8017d64:	2300      	movs	r3, #0
 8017d66:	e7d4      	b.n	8017d12 <_dtoa_r+0x7ba>
 8017d68:	9b00      	ldr	r3, [sp, #0]
 8017d6a:	e7d2      	b.n	8017d12 <_dtoa_r+0x7ba>
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	9307      	str	r3, [sp, #28]
 8017d70:	693b      	ldr	r3, [r7, #16]
 8017d72:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017d76:	6918      	ldr	r0, [r3, #16]
 8017d78:	f000 fdd7 	bl	801892a <__hi0bits>
 8017d7c:	f1c0 0020 	rsb	r0, r0, #32
 8017d80:	4440      	add	r0, r8
 8017d82:	f010 001f 	ands.w	r0, r0, #31
 8017d86:	d047      	beq.n	8017e18 <_dtoa_r+0x8c0>
 8017d88:	f1c0 0320 	rsb	r3, r0, #32
 8017d8c:	2b04      	cmp	r3, #4
 8017d8e:	dd3b      	ble.n	8017e08 <_dtoa_r+0x8b0>
 8017d90:	9b05      	ldr	r3, [sp, #20]
 8017d92:	f1c0 001c 	rsb	r0, r0, #28
 8017d96:	4403      	add	r3, r0
 8017d98:	9305      	str	r3, [sp, #20]
 8017d9a:	4405      	add	r5, r0
 8017d9c:	4480      	add	r8, r0
 8017d9e:	9b05      	ldr	r3, [sp, #20]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	dd05      	ble.n	8017db0 <_dtoa_r+0x858>
 8017da4:	461a      	mov	r2, r3
 8017da6:	9904      	ldr	r1, [sp, #16]
 8017da8:	4620      	mov	r0, r4
 8017daa:	f000 fef9 	bl	8018ba0 <__lshift>
 8017dae:	9004      	str	r0, [sp, #16]
 8017db0:	f1b8 0f00 	cmp.w	r8, #0
 8017db4:	dd05      	ble.n	8017dc2 <_dtoa_r+0x86a>
 8017db6:	4639      	mov	r1, r7
 8017db8:	4642      	mov	r2, r8
 8017dba:	4620      	mov	r0, r4
 8017dbc:	f000 fef0 	bl	8018ba0 <__lshift>
 8017dc0:	4607      	mov	r7, r0
 8017dc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017dc4:	b353      	cbz	r3, 8017e1c <_dtoa_r+0x8c4>
 8017dc6:	4639      	mov	r1, r7
 8017dc8:	9804      	ldr	r0, [sp, #16]
 8017dca:	f000 ff3d 	bl	8018c48 <__mcmp>
 8017dce:	2800      	cmp	r0, #0
 8017dd0:	da24      	bge.n	8017e1c <_dtoa_r+0x8c4>
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	220a      	movs	r2, #10
 8017dd6:	9904      	ldr	r1, [sp, #16]
 8017dd8:	4620      	mov	r0, r4
 8017dda:	f000 fd2d 	bl	8018838 <__multadd>
 8017dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017de0:	9004      	str	r0, [sp, #16]
 8017de2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	f000 814d 	beq.w	8018086 <_dtoa_r+0xb2e>
 8017dec:	2300      	movs	r3, #0
 8017dee:	4631      	mov	r1, r6
 8017df0:	220a      	movs	r2, #10
 8017df2:	4620      	mov	r0, r4
 8017df4:	f000 fd20 	bl	8018838 <__multadd>
 8017df8:	9b02      	ldr	r3, [sp, #8]
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	4606      	mov	r6, r0
 8017dfe:	dc4f      	bgt.n	8017ea0 <_dtoa_r+0x948>
 8017e00:	9b06      	ldr	r3, [sp, #24]
 8017e02:	2b02      	cmp	r3, #2
 8017e04:	dd4c      	ble.n	8017ea0 <_dtoa_r+0x948>
 8017e06:	e011      	b.n	8017e2c <_dtoa_r+0x8d4>
 8017e08:	d0c9      	beq.n	8017d9e <_dtoa_r+0x846>
 8017e0a:	9a05      	ldr	r2, [sp, #20]
 8017e0c:	331c      	adds	r3, #28
 8017e0e:	441a      	add	r2, r3
 8017e10:	9205      	str	r2, [sp, #20]
 8017e12:	441d      	add	r5, r3
 8017e14:	4498      	add	r8, r3
 8017e16:	e7c2      	b.n	8017d9e <_dtoa_r+0x846>
 8017e18:	4603      	mov	r3, r0
 8017e1a:	e7f6      	b.n	8017e0a <_dtoa_r+0x8b2>
 8017e1c:	f1b9 0f00 	cmp.w	r9, #0
 8017e20:	dc38      	bgt.n	8017e94 <_dtoa_r+0x93c>
 8017e22:	9b06      	ldr	r3, [sp, #24]
 8017e24:	2b02      	cmp	r3, #2
 8017e26:	dd35      	ble.n	8017e94 <_dtoa_r+0x93c>
 8017e28:	f8cd 9008 	str.w	r9, [sp, #8]
 8017e2c:	9b02      	ldr	r3, [sp, #8]
 8017e2e:	b963      	cbnz	r3, 8017e4a <_dtoa_r+0x8f2>
 8017e30:	4639      	mov	r1, r7
 8017e32:	2205      	movs	r2, #5
 8017e34:	4620      	mov	r0, r4
 8017e36:	f000 fcff 	bl	8018838 <__multadd>
 8017e3a:	4601      	mov	r1, r0
 8017e3c:	4607      	mov	r7, r0
 8017e3e:	9804      	ldr	r0, [sp, #16]
 8017e40:	f000 ff02 	bl	8018c48 <__mcmp>
 8017e44:	2800      	cmp	r0, #0
 8017e46:	f73f adcc 	bgt.w	80179e2 <_dtoa_r+0x48a>
 8017e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e4c:	465d      	mov	r5, fp
 8017e4e:	ea6f 0a03 	mvn.w	sl, r3
 8017e52:	f04f 0900 	mov.w	r9, #0
 8017e56:	4639      	mov	r1, r7
 8017e58:	4620      	mov	r0, r4
 8017e5a:	f000 fcd6 	bl	801880a <_Bfree>
 8017e5e:	2e00      	cmp	r6, #0
 8017e60:	f43f aeb7 	beq.w	8017bd2 <_dtoa_r+0x67a>
 8017e64:	f1b9 0f00 	cmp.w	r9, #0
 8017e68:	d005      	beq.n	8017e76 <_dtoa_r+0x91e>
 8017e6a:	45b1      	cmp	r9, r6
 8017e6c:	d003      	beq.n	8017e76 <_dtoa_r+0x91e>
 8017e6e:	4649      	mov	r1, r9
 8017e70:	4620      	mov	r0, r4
 8017e72:	f000 fcca 	bl	801880a <_Bfree>
 8017e76:	4631      	mov	r1, r6
 8017e78:	4620      	mov	r0, r4
 8017e7a:	f000 fcc6 	bl	801880a <_Bfree>
 8017e7e:	e6a8      	b.n	8017bd2 <_dtoa_r+0x67a>
 8017e80:	2700      	movs	r7, #0
 8017e82:	463e      	mov	r6, r7
 8017e84:	e7e1      	b.n	8017e4a <_dtoa_r+0x8f2>
 8017e86:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017e8a:	463e      	mov	r6, r7
 8017e8c:	e5a9      	b.n	80179e2 <_dtoa_r+0x48a>
 8017e8e:	bf00      	nop
 8017e90:	40240000 	.word	0x40240000
 8017e94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e96:	f8cd 9008 	str.w	r9, [sp, #8]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	f000 80fa 	beq.w	8018094 <_dtoa_r+0xb3c>
 8017ea0:	2d00      	cmp	r5, #0
 8017ea2:	dd05      	ble.n	8017eb0 <_dtoa_r+0x958>
 8017ea4:	4631      	mov	r1, r6
 8017ea6:	462a      	mov	r2, r5
 8017ea8:	4620      	mov	r0, r4
 8017eaa:	f000 fe79 	bl	8018ba0 <__lshift>
 8017eae:	4606      	mov	r6, r0
 8017eb0:	9b07      	ldr	r3, [sp, #28]
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d04c      	beq.n	8017f50 <_dtoa_r+0x9f8>
 8017eb6:	6871      	ldr	r1, [r6, #4]
 8017eb8:	4620      	mov	r0, r4
 8017eba:	f000 fc72 	bl	80187a2 <_Balloc>
 8017ebe:	6932      	ldr	r2, [r6, #16]
 8017ec0:	3202      	adds	r2, #2
 8017ec2:	4605      	mov	r5, r0
 8017ec4:	0092      	lsls	r2, r2, #2
 8017ec6:	f106 010c 	add.w	r1, r6, #12
 8017eca:	300c      	adds	r0, #12
 8017ecc:	f000 fc5e 	bl	801878c <memcpy>
 8017ed0:	2201      	movs	r2, #1
 8017ed2:	4629      	mov	r1, r5
 8017ed4:	4620      	mov	r0, r4
 8017ed6:	f000 fe63 	bl	8018ba0 <__lshift>
 8017eda:	9b00      	ldr	r3, [sp, #0]
 8017edc:	f8cd b014 	str.w	fp, [sp, #20]
 8017ee0:	f003 0301 	and.w	r3, r3, #1
 8017ee4:	46b1      	mov	r9, r6
 8017ee6:	9307      	str	r3, [sp, #28]
 8017ee8:	4606      	mov	r6, r0
 8017eea:	4639      	mov	r1, r7
 8017eec:	9804      	ldr	r0, [sp, #16]
 8017eee:	f7ff faa5 	bl	801743c <quorem>
 8017ef2:	4649      	mov	r1, r9
 8017ef4:	4605      	mov	r5, r0
 8017ef6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017efa:	9804      	ldr	r0, [sp, #16]
 8017efc:	f000 fea4 	bl	8018c48 <__mcmp>
 8017f00:	4632      	mov	r2, r6
 8017f02:	9000      	str	r0, [sp, #0]
 8017f04:	4639      	mov	r1, r7
 8017f06:	4620      	mov	r0, r4
 8017f08:	f000 feb8 	bl	8018c7c <__mdiff>
 8017f0c:	68c3      	ldr	r3, [r0, #12]
 8017f0e:	4602      	mov	r2, r0
 8017f10:	bb03      	cbnz	r3, 8017f54 <_dtoa_r+0x9fc>
 8017f12:	4601      	mov	r1, r0
 8017f14:	9008      	str	r0, [sp, #32]
 8017f16:	9804      	ldr	r0, [sp, #16]
 8017f18:	f000 fe96 	bl	8018c48 <__mcmp>
 8017f1c:	9a08      	ldr	r2, [sp, #32]
 8017f1e:	4603      	mov	r3, r0
 8017f20:	4611      	mov	r1, r2
 8017f22:	4620      	mov	r0, r4
 8017f24:	9308      	str	r3, [sp, #32]
 8017f26:	f000 fc70 	bl	801880a <_Bfree>
 8017f2a:	9b08      	ldr	r3, [sp, #32]
 8017f2c:	b9a3      	cbnz	r3, 8017f58 <_dtoa_r+0xa00>
 8017f2e:	9a06      	ldr	r2, [sp, #24]
 8017f30:	b992      	cbnz	r2, 8017f58 <_dtoa_r+0xa00>
 8017f32:	9a07      	ldr	r2, [sp, #28]
 8017f34:	b982      	cbnz	r2, 8017f58 <_dtoa_r+0xa00>
 8017f36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017f3a:	d029      	beq.n	8017f90 <_dtoa_r+0xa38>
 8017f3c:	9b00      	ldr	r3, [sp, #0]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	dd01      	ble.n	8017f46 <_dtoa_r+0x9ee>
 8017f42:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017f46:	9b05      	ldr	r3, [sp, #20]
 8017f48:	1c5d      	adds	r5, r3, #1
 8017f4a:	f883 8000 	strb.w	r8, [r3]
 8017f4e:	e782      	b.n	8017e56 <_dtoa_r+0x8fe>
 8017f50:	4630      	mov	r0, r6
 8017f52:	e7c2      	b.n	8017eda <_dtoa_r+0x982>
 8017f54:	2301      	movs	r3, #1
 8017f56:	e7e3      	b.n	8017f20 <_dtoa_r+0x9c8>
 8017f58:	9a00      	ldr	r2, [sp, #0]
 8017f5a:	2a00      	cmp	r2, #0
 8017f5c:	db04      	blt.n	8017f68 <_dtoa_r+0xa10>
 8017f5e:	d125      	bne.n	8017fac <_dtoa_r+0xa54>
 8017f60:	9a06      	ldr	r2, [sp, #24]
 8017f62:	bb1a      	cbnz	r2, 8017fac <_dtoa_r+0xa54>
 8017f64:	9a07      	ldr	r2, [sp, #28]
 8017f66:	bb0a      	cbnz	r2, 8017fac <_dtoa_r+0xa54>
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	ddec      	ble.n	8017f46 <_dtoa_r+0x9ee>
 8017f6c:	2201      	movs	r2, #1
 8017f6e:	9904      	ldr	r1, [sp, #16]
 8017f70:	4620      	mov	r0, r4
 8017f72:	f000 fe15 	bl	8018ba0 <__lshift>
 8017f76:	4639      	mov	r1, r7
 8017f78:	9004      	str	r0, [sp, #16]
 8017f7a:	f000 fe65 	bl	8018c48 <__mcmp>
 8017f7e:	2800      	cmp	r0, #0
 8017f80:	dc03      	bgt.n	8017f8a <_dtoa_r+0xa32>
 8017f82:	d1e0      	bne.n	8017f46 <_dtoa_r+0x9ee>
 8017f84:	f018 0f01 	tst.w	r8, #1
 8017f88:	d0dd      	beq.n	8017f46 <_dtoa_r+0x9ee>
 8017f8a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017f8e:	d1d8      	bne.n	8017f42 <_dtoa_r+0x9ea>
 8017f90:	9b05      	ldr	r3, [sp, #20]
 8017f92:	9a05      	ldr	r2, [sp, #20]
 8017f94:	1c5d      	adds	r5, r3, #1
 8017f96:	2339      	movs	r3, #57	; 0x39
 8017f98:	7013      	strb	r3, [r2, #0]
 8017f9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017f9e:	2b39      	cmp	r3, #57	; 0x39
 8017fa0:	f105 32ff 	add.w	r2, r5, #4294967295
 8017fa4:	d04f      	beq.n	8018046 <_dtoa_r+0xaee>
 8017fa6:	3301      	adds	r3, #1
 8017fa8:	7013      	strb	r3, [r2, #0]
 8017faa:	e754      	b.n	8017e56 <_dtoa_r+0x8fe>
 8017fac:	9a05      	ldr	r2, [sp, #20]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	f102 0501 	add.w	r5, r2, #1
 8017fb4:	dd06      	ble.n	8017fc4 <_dtoa_r+0xa6c>
 8017fb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017fba:	d0e9      	beq.n	8017f90 <_dtoa_r+0xa38>
 8017fbc:	f108 0801 	add.w	r8, r8, #1
 8017fc0:	9b05      	ldr	r3, [sp, #20]
 8017fc2:	e7c2      	b.n	8017f4a <_dtoa_r+0x9f2>
 8017fc4:	9a02      	ldr	r2, [sp, #8]
 8017fc6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017fca:	eba5 030b 	sub.w	r3, r5, fp
 8017fce:	4293      	cmp	r3, r2
 8017fd0:	d021      	beq.n	8018016 <_dtoa_r+0xabe>
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	220a      	movs	r2, #10
 8017fd6:	9904      	ldr	r1, [sp, #16]
 8017fd8:	4620      	mov	r0, r4
 8017fda:	f000 fc2d 	bl	8018838 <__multadd>
 8017fde:	45b1      	cmp	r9, r6
 8017fe0:	9004      	str	r0, [sp, #16]
 8017fe2:	f04f 0300 	mov.w	r3, #0
 8017fe6:	f04f 020a 	mov.w	r2, #10
 8017fea:	4649      	mov	r1, r9
 8017fec:	4620      	mov	r0, r4
 8017fee:	d105      	bne.n	8017ffc <_dtoa_r+0xaa4>
 8017ff0:	f000 fc22 	bl	8018838 <__multadd>
 8017ff4:	4681      	mov	r9, r0
 8017ff6:	4606      	mov	r6, r0
 8017ff8:	9505      	str	r5, [sp, #20]
 8017ffa:	e776      	b.n	8017eea <_dtoa_r+0x992>
 8017ffc:	f000 fc1c 	bl	8018838 <__multadd>
 8018000:	4631      	mov	r1, r6
 8018002:	4681      	mov	r9, r0
 8018004:	2300      	movs	r3, #0
 8018006:	220a      	movs	r2, #10
 8018008:	4620      	mov	r0, r4
 801800a:	f000 fc15 	bl	8018838 <__multadd>
 801800e:	4606      	mov	r6, r0
 8018010:	e7f2      	b.n	8017ff8 <_dtoa_r+0xaa0>
 8018012:	f04f 0900 	mov.w	r9, #0
 8018016:	2201      	movs	r2, #1
 8018018:	9904      	ldr	r1, [sp, #16]
 801801a:	4620      	mov	r0, r4
 801801c:	f000 fdc0 	bl	8018ba0 <__lshift>
 8018020:	4639      	mov	r1, r7
 8018022:	9004      	str	r0, [sp, #16]
 8018024:	f000 fe10 	bl	8018c48 <__mcmp>
 8018028:	2800      	cmp	r0, #0
 801802a:	dcb6      	bgt.n	8017f9a <_dtoa_r+0xa42>
 801802c:	d102      	bne.n	8018034 <_dtoa_r+0xadc>
 801802e:	f018 0f01 	tst.w	r8, #1
 8018032:	d1b2      	bne.n	8017f9a <_dtoa_r+0xa42>
 8018034:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018038:	2b30      	cmp	r3, #48	; 0x30
 801803a:	f105 32ff 	add.w	r2, r5, #4294967295
 801803e:	f47f af0a 	bne.w	8017e56 <_dtoa_r+0x8fe>
 8018042:	4615      	mov	r5, r2
 8018044:	e7f6      	b.n	8018034 <_dtoa_r+0xadc>
 8018046:	4593      	cmp	fp, r2
 8018048:	d105      	bne.n	8018056 <_dtoa_r+0xafe>
 801804a:	2331      	movs	r3, #49	; 0x31
 801804c:	f10a 0a01 	add.w	sl, sl, #1
 8018050:	f88b 3000 	strb.w	r3, [fp]
 8018054:	e6ff      	b.n	8017e56 <_dtoa_r+0x8fe>
 8018056:	4615      	mov	r5, r2
 8018058:	e79f      	b.n	8017f9a <_dtoa_r+0xa42>
 801805a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80180c0 <_dtoa_r+0xb68>
 801805e:	e007      	b.n	8018070 <_dtoa_r+0xb18>
 8018060:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018062:	f8df b060 	ldr.w	fp, [pc, #96]	; 80180c4 <_dtoa_r+0xb6c>
 8018066:	b11b      	cbz	r3, 8018070 <_dtoa_r+0xb18>
 8018068:	f10b 0308 	add.w	r3, fp, #8
 801806c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801806e:	6013      	str	r3, [r2, #0]
 8018070:	4658      	mov	r0, fp
 8018072:	b017      	add	sp, #92	; 0x5c
 8018074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018078:	9b06      	ldr	r3, [sp, #24]
 801807a:	2b01      	cmp	r3, #1
 801807c:	f77f ae35 	ble.w	8017cea <_dtoa_r+0x792>
 8018080:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018082:	9307      	str	r3, [sp, #28]
 8018084:	e649      	b.n	8017d1a <_dtoa_r+0x7c2>
 8018086:	9b02      	ldr	r3, [sp, #8]
 8018088:	2b00      	cmp	r3, #0
 801808a:	dc03      	bgt.n	8018094 <_dtoa_r+0xb3c>
 801808c:	9b06      	ldr	r3, [sp, #24]
 801808e:	2b02      	cmp	r3, #2
 8018090:	f73f aecc 	bgt.w	8017e2c <_dtoa_r+0x8d4>
 8018094:	465d      	mov	r5, fp
 8018096:	4639      	mov	r1, r7
 8018098:	9804      	ldr	r0, [sp, #16]
 801809a:	f7ff f9cf 	bl	801743c <quorem>
 801809e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80180a2:	f805 8b01 	strb.w	r8, [r5], #1
 80180a6:	9a02      	ldr	r2, [sp, #8]
 80180a8:	eba5 030b 	sub.w	r3, r5, fp
 80180ac:	429a      	cmp	r2, r3
 80180ae:	ddb0      	ble.n	8018012 <_dtoa_r+0xaba>
 80180b0:	2300      	movs	r3, #0
 80180b2:	220a      	movs	r2, #10
 80180b4:	9904      	ldr	r1, [sp, #16]
 80180b6:	4620      	mov	r0, r4
 80180b8:	f000 fbbe 	bl	8018838 <__multadd>
 80180bc:	9004      	str	r0, [sp, #16]
 80180be:	e7ea      	b.n	8018096 <_dtoa_r+0xb3e>
 80180c0:	0801a543 	.word	0x0801a543
 80180c4:	0801a408 	.word	0x0801a408

080180c8 <rshift>:
 80180c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180ca:	6906      	ldr	r6, [r0, #16]
 80180cc:	114b      	asrs	r3, r1, #5
 80180ce:	429e      	cmp	r6, r3
 80180d0:	f100 0414 	add.w	r4, r0, #20
 80180d4:	dd30      	ble.n	8018138 <rshift+0x70>
 80180d6:	f011 011f 	ands.w	r1, r1, #31
 80180da:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80180de:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80180e2:	d108      	bne.n	80180f6 <rshift+0x2e>
 80180e4:	4621      	mov	r1, r4
 80180e6:	42b2      	cmp	r2, r6
 80180e8:	460b      	mov	r3, r1
 80180ea:	d211      	bcs.n	8018110 <rshift+0x48>
 80180ec:	f852 3b04 	ldr.w	r3, [r2], #4
 80180f0:	f841 3b04 	str.w	r3, [r1], #4
 80180f4:	e7f7      	b.n	80180e6 <rshift+0x1e>
 80180f6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80180fa:	f1c1 0c20 	rsb	ip, r1, #32
 80180fe:	40cd      	lsrs	r5, r1
 8018100:	3204      	adds	r2, #4
 8018102:	4623      	mov	r3, r4
 8018104:	42b2      	cmp	r2, r6
 8018106:	4617      	mov	r7, r2
 8018108:	d30c      	bcc.n	8018124 <rshift+0x5c>
 801810a:	601d      	str	r5, [r3, #0]
 801810c:	b105      	cbz	r5, 8018110 <rshift+0x48>
 801810e:	3304      	adds	r3, #4
 8018110:	1b1a      	subs	r2, r3, r4
 8018112:	42a3      	cmp	r3, r4
 8018114:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018118:	bf08      	it	eq
 801811a:	2300      	moveq	r3, #0
 801811c:	6102      	str	r2, [r0, #16]
 801811e:	bf08      	it	eq
 8018120:	6143      	streq	r3, [r0, #20]
 8018122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018124:	683f      	ldr	r7, [r7, #0]
 8018126:	fa07 f70c 	lsl.w	r7, r7, ip
 801812a:	433d      	orrs	r5, r7
 801812c:	f843 5b04 	str.w	r5, [r3], #4
 8018130:	f852 5b04 	ldr.w	r5, [r2], #4
 8018134:	40cd      	lsrs	r5, r1
 8018136:	e7e5      	b.n	8018104 <rshift+0x3c>
 8018138:	4623      	mov	r3, r4
 801813a:	e7e9      	b.n	8018110 <rshift+0x48>

0801813c <__hexdig_fun>:
 801813c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018140:	2b09      	cmp	r3, #9
 8018142:	d802      	bhi.n	801814a <__hexdig_fun+0xe>
 8018144:	3820      	subs	r0, #32
 8018146:	b2c0      	uxtb	r0, r0
 8018148:	4770      	bx	lr
 801814a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801814e:	2b05      	cmp	r3, #5
 8018150:	d801      	bhi.n	8018156 <__hexdig_fun+0x1a>
 8018152:	3847      	subs	r0, #71	; 0x47
 8018154:	e7f7      	b.n	8018146 <__hexdig_fun+0xa>
 8018156:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801815a:	2b05      	cmp	r3, #5
 801815c:	d801      	bhi.n	8018162 <__hexdig_fun+0x26>
 801815e:	3827      	subs	r0, #39	; 0x27
 8018160:	e7f1      	b.n	8018146 <__hexdig_fun+0xa>
 8018162:	2000      	movs	r0, #0
 8018164:	4770      	bx	lr

08018166 <__gethex>:
 8018166:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801816a:	b08b      	sub	sp, #44	; 0x2c
 801816c:	468a      	mov	sl, r1
 801816e:	9002      	str	r0, [sp, #8]
 8018170:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018172:	9306      	str	r3, [sp, #24]
 8018174:	4690      	mov	r8, r2
 8018176:	f000 fadf 	bl	8018738 <__localeconv_l>
 801817a:	6803      	ldr	r3, [r0, #0]
 801817c:	9303      	str	r3, [sp, #12]
 801817e:	4618      	mov	r0, r3
 8018180:	f7e8 f83e 	bl	8000200 <strlen>
 8018184:	9b03      	ldr	r3, [sp, #12]
 8018186:	9001      	str	r0, [sp, #4]
 8018188:	4403      	add	r3, r0
 801818a:	f04f 0b00 	mov.w	fp, #0
 801818e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018192:	9307      	str	r3, [sp, #28]
 8018194:	f8da 3000 	ldr.w	r3, [sl]
 8018198:	3302      	adds	r3, #2
 801819a:	461f      	mov	r7, r3
 801819c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80181a0:	2830      	cmp	r0, #48	; 0x30
 80181a2:	d06c      	beq.n	801827e <__gethex+0x118>
 80181a4:	f7ff ffca 	bl	801813c <__hexdig_fun>
 80181a8:	4604      	mov	r4, r0
 80181aa:	2800      	cmp	r0, #0
 80181ac:	d16a      	bne.n	8018284 <__gethex+0x11e>
 80181ae:	9a01      	ldr	r2, [sp, #4]
 80181b0:	9903      	ldr	r1, [sp, #12]
 80181b2:	4638      	mov	r0, r7
 80181b4:	f001 fc40 	bl	8019a38 <strncmp>
 80181b8:	2800      	cmp	r0, #0
 80181ba:	d166      	bne.n	801828a <__gethex+0x124>
 80181bc:	9b01      	ldr	r3, [sp, #4]
 80181be:	5cf8      	ldrb	r0, [r7, r3]
 80181c0:	18fe      	adds	r6, r7, r3
 80181c2:	f7ff ffbb 	bl	801813c <__hexdig_fun>
 80181c6:	2800      	cmp	r0, #0
 80181c8:	d062      	beq.n	8018290 <__gethex+0x12a>
 80181ca:	4633      	mov	r3, r6
 80181cc:	7818      	ldrb	r0, [r3, #0]
 80181ce:	2830      	cmp	r0, #48	; 0x30
 80181d0:	461f      	mov	r7, r3
 80181d2:	f103 0301 	add.w	r3, r3, #1
 80181d6:	d0f9      	beq.n	80181cc <__gethex+0x66>
 80181d8:	f7ff ffb0 	bl	801813c <__hexdig_fun>
 80181dc:	fab0 f580 	clz	r5, r0
 80181e0:	096d      	lsrs	r5, r5, #5
 80181e2:	4634      	mov	r4, r6
 80181e4:	f04f 0b01 	mov.w	fp, #1
 80181e8:	463a      	mov	r2, r7
 80181ea:	4616      	mov	r6, r2
 80181ec:	3201      	adds	r2, #1
 80181ee:	7830      	ldrb	r0, [r6, #0]
 80181f0:	f7ff ffa4 	bl	801813c <__hexdig_fun>
 80181f4:	2800      	cmp	r0, #0
 80181f6:	d1f8      	bne.n	80181ea <__gethex+0x84>
 80181f8:	9a01      	ldr	r2, [sp, #4]
 80181fa:	9903      	ldr	r1, [sp, #12]
 80181fc:	4630      	mov	r0, r6
 80181fe:	f001 fc1b 	bl	8019a38 <strncmp>
 8018202:	b950      	cbnz	r0, 801821a <__gethex+0xb4>
 8018204:	b954      	cbnz	r4, 801821c <__gethex+0xb6>
 8018206:	9b01      	ldr	r3, [sp, #4]
 8018208:	18f4      	adds	r4, r6, r3
 801820a:	4622      	mov	r2, r4
 801820c:	4616      	mov	r6, r2
 801820e:	3201      	adds	r2, #1
 8018210:	7830      	ldrb	r0, [r6, #0]
 8018212:	f7ff ff93 	bl	801813c <__hexdig_fun>
 8018216:	2800      	cmp	r0, #0
 8018218:	d1f8      	bne.n	801820c <__gethex+0xa6>
 801821a:	b10c      	cbz	r4, 8018220 <__gethex+0xba>
 801821c:	1ba4      	subs	r4, r4, r6
 801821e:	00a4      	lsls	r4, r4, #2
 8018220:	7833      	ldrb	r3, [r6, #0]
 8018222:	2b50      	cmp	r3, #80	; 0x50
 8018224:	d001      	beq.n	801822a <__gethex+0xc4>
 8018226:	2b70      	cmp	r3, #112	; 0x70
 8018228:	d140      	bne.n	80182ac <__gethex+0x146>
 801822a:	7873      	ldrb	r3, [r6, #1]
 801822c:	2b2b      	cmp	r3, #43	; 0x2b
 801822e:	d031      	beq.n	8018294 <__gethex+0x12e>
 8018230:	2b2d      	cmp	r3, #45	; 0x2d
 8018232:	d033      	beq.n	801829c <__gethex+0x136>
 8018234:	1c71      	adds	r1, r6, #1
 8018236:	f04f 0900 	mov.w	r9, #0
 801823a:	7808      	ldrb	r0, [r1, #0]
 801823c:	f7ff ff7e 	bl	801813c <__hexdig_fun>
 8018240:	1e43      	subs	r3, r0, #1
 8018242:	b2db      	uxtb	r3, r3
 8018244:	2b18      	cmp	r3, #24
 8018246:	d831      	bhi.n	80182ac <__gethex+0x146>
 8018248:	f1a0 0210 	sub.w	r2, r0, #16
 801824c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018250:	f7ff ff74 	bl	801813c <__hexdig_fun>
 8018254:	1e43      	subs	r3, r0, #1
 8018256:	b2db      	uxtb	r3, r3
 8018258:	2b18      	cmp	r3, #24
 801825a:	d922      	bls.n	80182a2 <__gethex+0x13c>
 801825c:	f1b9 0f00 	cmp.w	r9, #0
 8018260:	d000      	beq.n	8018264 <__gethex+0xfe>
 8018262:	4252      	negs	r2, r2
 8018264:	4414      	add	r4, r2
 8018266:	f8ca 1000 	str.w	r1, [sl]
 801826a:	b30d      	cbz	r5, 80182b0 <__gethex+0x14a>
 801826c:	f1bb 0f00 	cmp.w	fp, #0
 8018270:	bf0c      	ite	eq
 8018272:	2706      	moveq	r7, #6
 8018274:	2700      	movne	r7, #0
 8018276:	4638      	mov	r0, r7
 8018278:	b00b      	add	sp, #44	; 0x2c
 801827a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801827e:	f10b 0b01 	add.w	fp, fp, #1
 8018282:	e78a      	b.n	801819a <__gethex+0x34>
 8018284:	2500      	movs	r5, #0
 8018286:	462c      	mov	r4, r5
 8018288:	e7ae      	b.n	80181e8 <__gethex+0x82>
 801828a:	463e      	mov	r6, r7
 801828c:	2501      	movs	r5, #1
 801828e:	e7c7      	b.n	8018220 <__gethex+0xba>
 8018290:	4604      	mov	r4, r0
 8018292:	e7fb      	b.n	801828c <__gethex+0x126>
 8018294:	f04f 0900 	mov.w	r9, #0
 8018298:	1cb1      	adds	r1, r6, #2
 801829a:	e7ce      	b.n	801823a <__gethex+0xd4>
 801829c:	f04f 0901 	mov.w	r9, #1
 80182a0:	e7fa      	b.n	8018298 <__gethex+0x132>
 80182a2:	230a      	movs	r3, #10
 80182a4:	fb03 0202 	mla	r2, r3, r2, r0
 80182a8:	3a10      	subs	r2, #16
 80182aa:	e7cf      	b.n	801824c <__gethex+0xe6>
 80182ac:	4631      	mov	r1, r6
 80182ae:	e7da      	b.n	8018266 <__gethex+0x100>
 80182b0:	1bf3      	subs	r3, r6, r7
 80182b2:	3b01      	subs	r3, #1
 80182b4:	4629      	mov	r1, r5
 80182b6:	2b07      	cmp	r3, #7
 80182b8:	dc49      	bgt.n	801834e <__gethex+0x1e8>
 80182ba:	9802      	ldr	r0, [sp, #8]
 80182bc:	f000 fa71 	bl	80187a2 <_Balloc>
 80182c0:	9b01      	ldr	r3, [sp, #4]
 80182c2:	f100 0914 	add.w	r9, r0, #20
 80182c6:	f04f 0b00 	mov.w	fp, #0
 80182ca:	f1c3 0301 	rsb	r3, r3, #1
 80182ce:	4605      	mov	r5, r0
 80182d0:	f8cd 9010 	str.w	r9, [sp, #16]
 80182d4:	46da      	mov	sl, fp
 80182d6:	9308      	str	r3, [sp, #32]
 80182d8:	42b7      	cmp	r7, r6
 80182da:	d33b      	bcc.n	8018354 <__gethex+0x1ee>
 80182dc:	9804      	ldr	r0, [sp, #16]
 80182de:	f840 ab04 	str.w	sl, [r0], #4
 80182e2:	eba0 0009 	sub.w	r0, r0, r9
 80182e6:	1080      	asrs	r0, r0, #2
 80182e8:	6128      	str	r0, [r5, #16]
 80182ea:	0147      	lsls	r7, r0, #5
 80182ec:	4650      	mov	r0, sl
 80182ee:	f000 fb1c 	bl	801892a <__hi0bits>
 80182f2:	f8d8 6000 	ldr.w	r6, [r8]
 80182f6:	1a3f      	subs	r7, r7, r0
 80182f8:	42b7      	cmp	r7, r6
 80182fa:	dd64      	ble.n	80183c6 <__gethex+0x260>
 80182fc:	1bbf      	subs	r7, r7, r6
 80182fe:	4639      	mov	r1, r7
 8018300:	4628      	mov	r0, r5
 8018302:	f000 fe2b 	bl	8018f5c <__any_on>
 8018306:	4682      	mov	sl, r0
 8018308:	b178      	cbz	r0, 801832a <__gethex+0x1c4>
 801830a:	1e7b      	subs	r3, r7, #1
 801830c:	1159      	asrs	r1, r3, #5
 801830e:	f003 021f 	and.w	r2, r3, #31
 8018312:	f04f 0a01 	mov.w	sl, #1
 8018316:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801831a:	fa0a f202 	lsl.w	r2, sl, r2
 801831e:	420a      	tst	r2, r1
 8018320:	d003      	beq.n	801832a <__gethex+0x1c4>
 8018322:	4553      	cmp	r3, sl
 8018324:	dc46      	bgt.n	80183b4 <__gethex+0x24e>
 8018326:	f04f 0a02 	mov.w	sl, #2
 801832a:	4639      	mov	r1, r7
 801832c:	4628      	mov	r0, r5
 801832e:	f7ff fecb 	bl	80180c8 <rshift>
 8018332:	443c      	add	r4, r7
 8018334:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018338:	42a3      	cmp	r3, r4
 801833a:	da52      	bge.n	80183e2 <__gethex+0x27c>
 801833c:	4629      	mov	r1, r5
 801833e:	9802      	ldr	r0, [sp, #8]
 8018340:	f000 fa63 	bl	801880a <_Bfree>
 8018344:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018346:	2300      	movs	r3, #0
 8018348:	6013      	str	r3, [r2, #0]
 801834a:	27a3      	movs	r7, #163	; 0xa3
 801834c:	e793      	b.n	8018276 <__gethex+0x110>
 801834e:	3101      	adds	r1, #1
 8018350:	105b      	asrs	r3, r3, #1
 8018352:	e7b0      	b.n	80182b6 <__gethex+0x150>
 8018354:	1e73      	subs	r3, r6, #1
 8018356:	9305      	str	r3, [sp, #20]
 8018358:	9a07      	ldr	r2, [sp, #28]
 801835a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801835e:	4293      	cmp	r3, r2
 8018360:	d018      	beq.n	8018394 <__gethex+0x22e>
 8018362:	f1bb 0f20 	cmp.w	fp, #32
 8018366:	d107      	bne.n	8018378 <__gethex+0x212>
 8018368:	9b04      	ldr	r3, [sp, #16]
 801836a:	f8c3 a000 	str.w	sl, [r3]
 801836e:	3304      	adds	r3, #4
 8018370:	f04f 0a00 	mov.w	sl, #0
 8018374:	9304      	str	r3, [sp, #16]
 8018376:	46d3      	mov	fp, sl
 8018378:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801837c:	f7ff fede 	bl	801813c <__hexdig_fun>
 8018380:	f000 000f 	and.w	r0, r0, #15
 8018384:	fa00 f00b 	lsl.w	r0, r0, fp
 8018388:	ea4a 0a00 	orr.w	sl, sl, r0
 801838c:	f10b 0b04 	add.w	fp, fp, #4
 8018390:	9b05      	ldr	r3, [sp, #20]
 8018392:	e00d      	b.n	80183b0 <__gethex+0x24a>
 8018394:	9b05      	ldr	r3, [sp, #20]
 8018396:	9a08      	ldr	r2, [sp, #32]
 8018398:	4413      	add	r3, r2
 801839a:	42bb      	cmp	r3, r7
 801839c:	d3e1      	bcc.n	8018362 <__gethex+0x1fc>
 801839e:	4618      	mov	r0, r3
 80183a0:	9a01      	ldr	r2, [sp, #4]
 80183a2:	9903      	ldr	r1, [sp, #12]
 80183a4:	9309      	str	r3, [sp, #36]	; 0x24
 80183a6:	f001 fb47 	bl	8019a38 <strncmp>
 80183aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183ac:	2800      	cmp	r0, #0
 80183ae:	d1d8      	bne.n	8018362 <__gethex+0x1fc>
 80183b0:	461e      	mov	r6, r3
 80183b2:	e791      	b.n	80182d8 <__gethex+0x172>
 80183b4:	1eb9      	subs	r1, r7, #2
 80183b6:	4628      	mov	r0, r5
 80183b8:	f000 fdd0 	bl	8018f5c <__any_on>
 80183bc:	2800      	cmp	r0, #0
 80183be:	d0b2      	beq.n	8018326 <__gethex+0x1c0>
 80183c0:	f04f 0a03 	mov.w	sl, #3
 80183c4:	e7b1      	b.n	801832a <__gethex+0x1c4>
 80183c6:	da09      	bge.n	80183dc <__gethex+0x276>
 80183c8:	1bf7      	subs	r7, r6, r7
 80183ca:	4629      	mov	r1, r5
 80183cc:	463a      	mov	r2, r7
 80183ce:	9802      	ldr	r0, [sp, #8]
 80183d0:	f000 fbe6 	bl	8018ba0 <__lshift>
 80183d4:	1be4      	subs	r4, r4, r7
 80183d6:	4605      	mov	r5, r0
 80183d8:	f100 0914 	add.w	r9, r0, #20
 80183dc:	f04f 0a00 	mov.w	sl, #0
 80183e0:	e7a8      	b.n	8018334 <__gethex+0x1ce>
 80183e2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80183e6:	42a0      	cmp	r0, r4
 80183e8:	dd6a      	ble.n	80184c0 <__gethex+0x35a>
 80183ea:	1b04      	subs	r4, r0, r4
 80183ec:	42a6      	cmp	r6, r4
 80183ee:	dc2e      	bgt.n	801844e <__gethex+0x2e8>
 80183f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80183f4:	2b02      	cmp	r3, #2
 80183f6:	d022      	beq.n	801843e <__gethex+0x2d8>
 80183f8:	2b03      	cmp	r3, #3
 80183fa:	d024      	beq.n	8018446 <__gethex+0x2e0>
 80183fc:	2b01      	cmp	r3, #1
 80183fe:	d115      	bne.n	801842c <__gethex+0x2c6>
 8018400:	42a6      	cmp	r6, r4
 8018402:	d113      	bne.n	801842c <__gethex+0x2c6>
 8018404:	2e01      	cmp	r6, #1
 8018406:	dc0b      	bgt.n	8018420 <__gethex+0x2ba>
 8018408:	9a06      	ldr	r2, [sp, #24]
 801840a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801840e:	6013      	str	r3, [r2, #0]
 8018410:	2301      	movs	r3, #1
 8018412:	612b      	str	r3, [r5, #16]
 8018414:	f8c9 3000 	str.w	r3, [r9]
 8018418:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801841a:	2762      	movs	r7, #98	; 0x62
 801841c:	601d      	str	r5, [r3, #0]
 801841e:	e72a      	b.n	8018276 <__gethex+0x110>
 8018420:	1e71      	subs	r1, r6, #1
 8018422:	4628      	mov	r0, r5
 8018424:	f000 fd9a 	bl	8018f5c <__any_on>
 8018428:	2800      	cmp	r0, #0
 801842a:	d1ed      	bne.n	8018408 <__gethex+0x2a2>
 801842c:	4629      	mov	r1, r5
 801842e:	9802      	ldr	r0, [sp, #8]
 8018430:	f000 f9eb 	bl	801880a <_Bfree>
 8018434:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018436:	2300      	movs	r3, #0
 8018438:	6013      	str	r3, [r2, #0]
 801843a:	2750      	movs	r7, #80	; 0x50
 801843c:	e71b      	b.n	8018276 <__gethex+0x110>
 801843e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018440:	2b00      	cmp	r3, #0
 8018442:	d0e1      	beq.n	8018408 <__gethex+0x2a2>
 8018444:	e7f2      	b.n	801842c <__gethex+0x2c6>
 8018446:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018448:	2b00      	cmp	r3, #0
 801844a:	d1dd      	bne.n	8018408 <__gethex+0x2a2>
 801844c:	e7ee      	b.n	801842c <__gethex+0x2c6>
 801844e:	1e67      	subs	r7, r4, #1
 8018450:	f1ba 0f00 	cmp.w	sl, #0
 8018454:	d131      	bne.n	80184ba <__gethex+0x354>
 8018456:	b127      	cbz	r7, 8018462 <__gethex+0x2fc>
 8018458:	4639      	mov	r1, r7
 801845a:	4628      	mov	r0, r5
 801845c:	f000 fd7e 	bl	8018f5c <__any_on>
 8018460:	4682      	mov	sl, r0
 8018462:	117a      	asrs	r2, r7, #5
 8018464:	2301      	movs	r3, #1
 8018466:	f007 071f 	and.w	r7, r7, #31
 801846a:	fa03 f707 	lsl.w	r7, r3, r7
 801846e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018472:	4621      	mov	r1, r4
 8018474:	421f      	tst	r7, r3
 8018476:	4628      	mov	r0, r5
 8018478:	bf18      	it	ne
 801847a:	f04a 0a02 	orrne.w	sl, sl, #2
 801847e:	1b36      	subs	r6, r6, r4
 8018480:	f7ff fe22 	bl	80180c8 <rshift>
 8018484:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018488:	2702      	movs	r7, #2
 801848a:	f1ba 0f00 	cmp.w	sl, #0
 801848e:	d048      	beq.n	8018522 <__gethex+0x3bc>
 8018490:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018494:	2b02      	cmp	r3, #2
 8018496:	d015      	beq.n	80184c4 <__gethex+0x35e>
 8018498:	2b03      	cmp	r3, #3
 801849a:	d017      	beq.n	80184cc <__gethex+0x366>
 801849c:	2b01      	cmp	r3, #1
 801849e:	d109      	bne.n	80184b4 <__gethex+0x34e>
 80184a0:	f01a 0f02 	tst.w	sl, #2
 80184a4:	d006      	beq.n	80184b4 <__gethex+0x34e>
 80184a6:	f8d9 3000 	ldr.w	r3, [r9]
 80184aa:	ea4a 0a03 	orr.w	sl, sl, r3
 80184ae:	f01a 0f01 	tst.w	sl, #1
 80184b2:	d10e      	bne.n	80184d2 <__gethex+0x36c>
 80184b4:	f047 0710 	orr.w	r7, r7, #16
 80184b8:	e033      	b.n	8018522 <__gethex+0x3bc>
 80184ba:	f04f 0a01 	mov.w	sl, #1
 80184be:	e7d0      	b.n	8018462 <__gethex+0x2fc>
 80184c0:	2701      	movs	r7, #1
 80184c2:	e7e2      	b.n	801848a <__gethex+0x324>
 80184c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184c6:	f1c3 0301 	rsb	r3, r3, #1
 80184ca:	9315      	str	r3, [sp, #84]	; 0x54
 80184cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d0f0      	beq.n	80184b4 <__gethex+0x34e>
 80184d2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80184d6:	f105 0314 	add.w	r3, r5, #20
 80184da:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80184de:	eb03 010a 	add.w	r1, r3, sl
 80184e2:	f04f 0c00 	mov.w	ip, #0
 80184e6:	4618      	mov	r0, r3
 80184e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80184ec:	f1b2 3fff 	cmp.w	r2, #4294967295
 80184f0:	d01c      	beq.n	801852c <__gethex+0x3c6>
 80184f2:	3201      	adds	r2, #1
 80184f4:	6002      	str	r2, [r0, #0]
 80184f6:	2f02      	cmp	r7, #2
 80184f8:	f105 0314 	add.w	r3, r5, #20
 80184fc:	d138      	bne.n	8018570 <__gethex+0x40a>
 80184fe:	f8d8 2000 	ldr.w	r2, [r8]
 8018502:	3a01      	subs	r2, #1
 8018504:	42b2      	cmp	r2, r6
 8018506:	d10a      	bne.n	801851e <__gethex+0x3b8>
 8018508:	1171      	asrs	r1, r6, #5
 801850a:	2201      	movs	r2, #1
 801850c:	f006 061f 	and.w	r6, r6, #31
 8018510:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018514:	fa02 f606 	lsl.w	r6, r2, r6
 8018518:	421e      	tst	r6, r3
 801851a:	bf18      	it	ne
 801851c:	4617      	movne	r7, r2
 801851e:	f047 0720 	orr.w	r7, r7, #32
 8018522:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018524:	601d      	str	r5, [r3, #0]
 8018526:	9b06      	ldr	r3, [sp, #24]
 8018528:	601c      	str	r4, [r3, #0]
 801852a:	e6a4      	b.n	8018276 <__gethex+0x110>
 801852c:	4299      	cmp	r1, r3
 801852e:	f843 cc04 	str.w	ip, [r3, #-4]
 8018532:	d8d8      	bhi.n	80184e6 <__gethex+0x380>
 8018534:	68ab      	ldr	r3, [r5, #8]
 8018536:	4599      	cmp	r9, r3
 8018538:	db12      	blt.n	8018560 <__gethex+0x3fa>
 801853a:	6869      	ldr	r1, [r5, #4]
 801853c:	9802      	ldr	r0, [sp, #8]
 801853e:	3101      	adds	r1, #1
 8018540:	f000 f92f 	bl	80187a2 <_Balloc>
 8018544:	692a      	ldr	r2, [r5, #16]
 8018546:	3202      	adds	r2, #2
 8018548:	f105 010c 	add.w	r1, r5, #12
 801854c:	4683      	mov	fp, r0
 801854e:	0092      	lsls	r2, r2, #2
 8018550:	300c      	adds	r0, #12
 8018552:	f000 f91b 	bl	801878c <memcpy>
 8018556:	4629      	mov	r1, r5
 8018558:	9802      	ldr	r0, [sp, #8]
 801855a:	f000 f956 	bl	801880a <_Bfree>
 801855e:	465d      	mov	r5, fp
 8018560:	692b      	ldr	r3, [r5, #16]
 8018562:	1c5a      	adds	r2, r3, #1
 8018564:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018568:	612a      	str	r2, [r5, #16]
 801856a:	2201      	movs	r2, #1
 801856c:	615a      	str	r2, [r3, #20]
 801856e:	e7c2      	b.n	80184f6 <__gethex+0x390>
 8018570:	692a      	ldr	r2, [r5, #16]
 8018572:	454a      	cmp	r2, r9
 8018574:	dd0b      	ble.n	801858e <__gethex+0x428>
 8018576:	2101      	movs	r1, #1
 8018578:	4628      	mov	r0, r5
 801857a:	f7ff fda5 	bl	80180c8 <rshift>
 801857e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018582:	3401      	adds	r4, #1
 8018584:	42a3      	cmp	r3, r4
 8018586:	f6ff aed9 	blt.w	801833c <__gethex+0x1d6>
 801858a:	2701      	movs	r7, #1
 801858c:	e7c7      	b.n	801851e <__gethex+0x3b8>
 801858e:	f016 061f 	ands.w	r6, r6, #31
 8018592:	d0fa      	beq.n	801858a <__gethex+0x424>
 8018594:	449a      	add	sl, r3
 8018596:	f1c6 0620 	rsb	r6, r6, #32
 801859a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801859e:	f000 f9c4 	bl	801892a <__hi0bits>
 80185a2:	42b0      	cmp	r0, r6
 80185a4:	dbe7      	blt.n	8018576 <__gethex+0x410>
 80185a6:	e7f0      	b.n	801858a <__gethex+0x424>

080185a8 <L_shift>:
 80185a8:	f1c2 0208 	rsb	r2, r2, #8
 80185ac:	0092      	lsls	r2, r2, #2
 80185ae:	b570      	push	{r4, r5, r6, lr}
 80185b0:	f1c2 0620 	rsb	r6, r2, #32
 80185b4:	6843      	ldr	r3, [r0, #4]
 80185b6:	6804      	ldr	r4, [r0, #0]
 80185b8:	fa03 f506 	lsl.w	r5, r3, r6
 80185bc:	432c      	orrs	r4, r5
 80185be:	40d3      	lsrs	r3, r2
 80185c0:	6004      	str	r4, [r0, #0]
 80185c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80185c6:	4288      	cmp	r0, r1
 80185c8:	d3f4      	bcc.n	80185b4 <L_shift+0xc>
 80185ca:	bd70      	pop	{r4, r5, r6, pc}

080185cc <__match>:
 80185cc:	b530      	push	{r4, r5, lr}
 80185ce:	6803      	ldr	r3, [r0, #0]
 80185d0:	3301      	adds	r3, #1
 80185d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80185d6:	b914      	cbnz	r4, 80185de <__match+0x12>
 80185d8:	6003      	str	r3, [r0, #0]
 80185da:	2001      	movs	r0, #1
 80185dc:	bd30      	pop	{r4, r5, pc}
 80185de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80185e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80185e6:	2d19      	cmp	r5, #25
 80185e8:	bf98      	it	ls
 80185ea:	3220      	addls	r2, #32
 80185ec:	42a2      	cmp	r2, r4
 80185ee:	d0f0      	beq.n	80185d2 <__match+0x6>
 80185f0:	2000      	movs	r0, #0
 80185f2:	e7f3      	b.n	80185dc <__match+0x10>

080185f4 <__hexnan>:
 80185f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185f8:	680b      	ldr	r3, [r1, #0]
 80185fa:	6801      	ldr	r1, [r0, #0]
 80185fc:	115f      	asrs	r7, r3, #5
 80185fe:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8018602:	f013 031f 	ands.w	r3, r3, #31
 8018606:	b087      	sub	sp, #28
 8018608:	bf18      	it	ne
 801860a:	3704      	addne	r7, #4
 801860c:	2500      	movs	r5, #0
 801860e:	1f3e      	subs	r6, r7, #4
 8018610:	4682      	mov	sl, r0
 8018612:	4690      	mov	r8, r2
 8018614:	9301      	str	r3, [sp, #4]
 8018616:	f847 5c04 	str.w	r5, [r7, #-4]
 801861a:	46b1      	mov	r9, r6
 801861c:	4634      	mov	r4, r6
 801861e:	9502      	str	r5, [sp, #8]
 8018620:	46ab      	mov	fp, r5
 8018622:	784a      	ldrb	r2, [r1, #1]
 8018624:	1c4b      	adds	r3, r1, #1
 8018626:	9303      	str	r3, [sp, #12]
 8018628:	b342      	cbz	r2, 801867c <__hexnan+0x88>
 801862a:	4610      	mov	r0, r2
 801862c:	9105      	str	r1, [sp, #20]
 801862e:	9204      	str	r2, [sp, #16]
 8018630:	f7ff fd84 	bl	801813c <__hexdig_fun>
 8018634:	2800      	cmp	r0, #0
 8018636:	d143      	bne.n	80186c0 <__hexnan+0xcc>
 8018638:	9a04      	ldr	r2, [sp, #16]
 801863a:	9905      	ldr	r1, [sp, #20]
 801863c:	2a20      	cmp	r2, #32
 801863e:	d818      	bhi.n	8018672 <__hexnan+0x7e>
 8018640:	9b02      	ldr	r3, [sp, #8]
 8018642:	459b      	cmp	fp, r3
 8018644:	dd13      	ble.n	801866e <__hexnan+0x7a>
 8018646:	454c      	cmp	r4, r9
 8018648:	d206      	bcs.n	8018658 <__hexnan+0x64>
 801864a:	2d07      	cmp	r5, #7
 801864c:	dc04      	bgt.n	8018658 <__hexnan+0x64>
 801864e:	462a      	mov	r2, r5
 8018650:	4649      	mov	r1, r9
 8018652:	4620      	mov	r0, r4
 8018654:	f7ff ffa8 	bl	80185a8 <L_shift>
 8018658:	4544      	cmp	r4, r8
 801865a:	d944      	bls.n	80186e6 <__hexnan+0xf2>
 801865c:	2300      	movs	r3, #0
 801865e:	f1a4 0904 	sub.w	r9, r4, #4
 8018662:	f844 3c04 	str.w	r3, [r4, #-4]
 8018666:	f8cd b008 	str.w	fp, [sp, #8]
 801866a:	464c      	mov	r4, r9
 801866c:	461d      	mov	r5, r3
 801866e:	9903      	ldr	r1, [sp, #12]
 8018670:	e7d7      	b.n	8018622 <__hexnan+0x2e>
 8018672:	2a29      	cmp	r2, #41	; 0x29
 8018674:	d14a      	bne.n	801870c <__hexnan+0x118>
 8018676:	3102      	adds	r1, #2
 8018678:	f8ca 1000 	str.w	r1, [sl]
 801867c:	f1bb 0f00 	cmp.w	fp, #0
 8018680:	d044      	beq.n	801870c <__hexnan+0x118>
 8018682:	454c      	cmp	r4, r9
 8018684:	d206      	bcs.n	8018694 <__hexnan+0xa0>
 8018686:	2d07      	cmp	r5, #7
 8018688:	dc04      	bgt.n	8018694 <__hexnan+0xa0>
 801868a:	462a      	mov	r2, r5
 801868c:	4649      	mov	r1, r9
 801868e:	4620      	mov	r0, r4
 8018690:	f7ff ff8a 	bl	80185a8 <L_shift>
 8018694:	4544      	cmp	r4, r8
 8018696:	d928      	bls.n	80186ea <__hexnan+0xf6>
 8018698:	4643      	mov	r3, r8
 801869a:	f854 2b04 	ldr.w	r2, [r4], #4
 801869e:	f843 2b04 	str.w	r2, [r3], #4
 80186a2:	42a6      	cmp	r6, r4
 80186a4:	d2f9      	bcs.n	801869a <__hexnan+0xa6>
 80186a6:	2200      	movs	r2, #0
 80186a8:	f843 2b04 	str.w	r2, [r3], #4
 80186ac:	429e      	cmp	r6, r3
 80186ae:	d2fb      	bcs.n	80186a8 <__hexnan+0xb4>
 80186b0:	6833      	ldr	r3, [r6, #0]
 80186b2:	b91b      	cbnz	r3, 80186bc <__hexnan+0xc8>
 80186b4:	4546      	cmp	r6, r8
 80186b6:	d127      	bne.n	8018708 <__hexnan+0x114>
 80186b8:	2301      	movs	r3, #1
 80186ba:	6033      	str	r3, [r6, #0]
 80186bc:	2005      	movs	r0, #5
 80186be:	e026      	b.n	801870e <__hexnan+0x11a>
 80186c0:	3501      	adds	r5, #1
 80186c2:	2d08      	cmp	r5, #8
 80186c4:	f10b 0b01 	add.w	fp, fp, #1
 80186c8:	dd06      	ble.n	80186d8 <__hexnan+0xe4>
 80186ca:	4544      	cmp	r4, r8
 80186cc:	d9cf      	bls.n	801866e <__hexnan+0x7a>
 80186ce:	2300      	movs	r3, #0
 80186d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80186d4:	2501      	movs	r5, #1
 80186d6:	3c04      	subs	r4, #4
 80186d8:	6822      	ldr	r2, [r4, #0]
 80186da:	f000 000f 	and.w	r0, r0, #15
 80186de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80186e2:	6020      	str	r0, [r4, #0]
 80186e4:	e7c3      	b.n	801866e <__hexnan+0x7a>
 80186e6:	2508      	movs	r5, #8
 80186e8:	e7c1      	b.n	801866e <__hexnan+0x7a>
 80186ea:	9b01      	ldr	r3, [sp, #4]
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d0df      	beq.n	80186b0 <__hexnan+0xbc>
 80186f0:	f04f 32ff 	mov.w	r2, #4294967295
 80186f4:	f1c3 0320 	rsb	r3, r3, #32
 80186f8:	fa22 f303 	lsr.w	r3, r2, r3
 80186fc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018700:	401a      	ands	r2, r3
 8018702:	f847 2c04 	str.w	r2, [r7, #-4]
 8018706:	e7d3      	b.n	80186b0 <__hexnan+0xbc>
 8018708:	3e04      	subs	r6, #4
 801870a:	e7d1      	b.n	80186b0 <__hexnan+0xbc>
 801870c:	2004      	movs	r0, #4
 801870e:	b007      	add	sp, #28
 8018710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018714 <__locale_ctype_ptr_l>:
 8018714:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018718:	4770      	bx	lr
	...

0801871c <__locale_ctype_ptr>:
 801871c:	4b04      	ldr	r3, [pc, #16]	; (8018730 <__locale_ctype_ptr+0x14>)
 801871e:	4a05      	ldr	r2, [pc, #20]	; (8018734 <__locale_ctype_ptr+0x18>)
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	6a1b      	ldr	r3, [r3, #32]
 8018724:	2b00      	cmp	r3, #0
 8018726:	bf08      	it	eq
 8018728:	4613      	moveq	r3, r2
 801872a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801872e:	4770      	bx	lr
 8018730:	2000000c 	.word	0x2000000c
 8018734:	20000070 	.word	0x20000070

08018738 <__localeconv_l>:
 8018738:	30f0      	adds	r0, #240	; 0xf0
 801873a:	4770      	bx	lr

0801873c <_localeconv_r>:
 801873c:	4b04      	ldr	r3, [pc, #16]	; (8018750 <_localeconv_r+0x14>)
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	6a18      	ldr	r0, [r3, #32]
 8018742:	4b04      	ldr	r3, [pc, #16]	; (8018754 <_localeconv_r+0x18>)
 8018744:	2800      	cmp	r0, #0
 8018746:	bf08      	it	eq
 8018748:	4618      	moveq	r0, r3
 801874a:	30f0      	adds	r0, #240	; 0xf0
 801874c:	4770      	bx	lr
 801874e:	bf00      	nop
 8018750:	2000000c 	.word	0x2000000c
 8018754:	20000070 	.word	0x20000070

08018758 <malloc>:
 8018758:	4b02      	ldr	r3, [pc, #8]	; (8018764 <malloc+0xc>)
 801875a:	4601      	mov	r1, r0
 801875c:	6818      	ldr	r0, [r3, #0]
 801875e:	f000 bc7b 	b.w	8019058 <_malloc_r>
 8018762:	bf00      	nop
 8018764:	2000000c 	.word	0x2000000c

08018768 <__ascii_mbtowc>:
 8018768:	b082      	sub	sp, #8
 801876a:	b901      	cbnz	r1, 801876e <__ascii_mbtowc+0x6>
 801876c:	a901      	add	r1, sp, #4
 801876e:	b142      	cbz	r2, 8018782 <__ascii_mbtowc+0x1a>
 8018770:	b14b      	cbz	r3, 8018786 <__ascii_mbtowc+0x1e>
 8018772:	7813      	ldrb	r3, [r2, #0]
 8018774:	600b      	str	r3, [r1, #0]
 8018776:	7812      	ldrb	r2, [r2, #0]
 8018778:	1c10      	adds	r0, r2, #0
 801877a:	bf18      	it	ne
 801877c:	2001      	movne	r0, #1
 801877e:	b002      	add	sp, #8
 8018780:	4770      	bx	lr
 8018782:	4610      	mov	r0, r2
 8018784:	e7fb      	b.n	801877e <__ascii_mbtowc+0x16>
 8018786:	f06f 0001 	mvn.w	r0, #1
 801878a:	e7f8      	b.n	801877e <__ascii_mbtowc+0x16>

0801878c <memcpy>:
 801878c:	b510      	push	{r4, lr}
 801878e:	1e43      	subs	r3, r0, #1
 8018790:	440a      	add	r2, r1
 8018792:	4291      	cmp	r1, r2
 8018794:	d100      	bne.n	8018798 <memcpy+0xc>
 8018796:	bd10      	pop	{r4, pc}
 8018798:	f811 4b01 	ldrb.w	r4, [r1], #1
 801879c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80187a0:	e7f7      	b.n	8018792 <memcpy+0x6>

080187a2 <_Balloc>:
 80187a2:	b570      	push	{r4, r5, r6, lr}
 80187a4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80187a6:	4604      	mov	r4, r0
 80187a8:	460e      	mov	r6, r1
 80187aa:	b93d      	cbnz	r5, 80187bc <_Balloc+0x1a>
 80187ac:	2010      	movs	r0, #16
 80187ae:	f7ff ffd3 	bl	8018758 <malloc>
 80187b2:	6260      	str	r0, [r4, #36]	; 0x24
 80187b4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80187b8:	6005      	str	r5, [r0, #0]
 80187ba:	60c5      	str	r5, [r0, #12]
 80187bc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80187be:	68eb      	ldr	r3, [r5, #12]
 80187c0:	b183      	cbz	r3, 80187e4 <_Balloc+0x42>
 80187c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80187c4:	68db      	ldr	r3, [r3, #12]
 80187c6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80187ca:	b9b8      	cbnz	r0, 80187fc <_Balloc+0x5a>
 80187cc:	2101      	movs	r1, #1
 80187ce:	fa01 f506 	lsl.w	r5, r1, r6
 80187d2:	1d6a      	adds	r2, r5, #5
 80187d4:	0092      	lsls	r2, r2, #2
 80187d6:	4620      	mov	r0, r4
 80187d8:	f000 fbe1 	bl	8018f9e <_calloc_r>
 80187dc:	b160      	cbz	r0, 80187f8 <_Balloc+0x56>
 80187de:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80187e2:	e00e      	b.n	8018802 <_Balloc+0x60>
 80187e4:	2221      	movs	r2, #33	; 0x21
 80187e6:	2104      	movs	r1, #4
 80187e8:	4620      	mov	r0, r4
 80187ea:	f000 fbd8 	bl	8018f9e <_calloc_r>
 80187ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80187f0:	60e8      	str	r0, [r5, #12]
 80187f2:	68db      	ldr	r3, [r3, #12]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d1e4      	bne.n	80187c2 <_Balloc+0x20>
 80187f8:	2000      	movs	r0, #0
 80187fa:	bd70      	pop	{r4, r5, r6, pc}
 80187fc:	6802      	ldr	r2, [r0, #0]
 80187fe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8018802:	2300      	movs	r3, #0
 8018804:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018808:	e7f7      	b.n	80187fa <_Balloc+0x58>

0801880a <_Bfree>:
 801880a:	b570      	push	{r4, r5, r6, lr}
 801880c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801880e:	4606      	mov	r6, r0
 8018810:	460d      	mov	r5, r1
 8018812:	b93c      	cbnz	r4, 8018824 <_Bfree+0x1a>
 8018814:	2010      	movs	r0, #16
 8018816:	f7ff ff9f 	bl	8018758 <malloc>
 801881a:	6270      	str	r0, [r6, #36]	; 0x24
 801881c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018820:	6004      	str	r4, [r0, #0]
 8018822:	60c4      	str	r4, [r0, #12]
 8018824:	b13d      	cbz	r5, 8018836 <_Bfree+0x2c>
 8018826:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018828:	686a      	ldr	r2, [r5, #4]
 801882a:	68db      	ldr	r3, [r3, #12]
 801882c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018830:	6029      	str	r1, [r5, #0]
 8018832:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8018836:	bd70      	pop	{r4, r5, r6, pc}

08018838 <__multadd>:
 8018838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801883c:	690d      	ldr	r5, [r1, #16]
 801883e:	461f      	mov	r7, r3
 8018840:	4606      	mov	r6, r0
 8018842:	460c      	mov	r4, r1
 8018844:	f101 0c14 	add.w	ip, r1, #20
 8018848:	2300      	movs	r3, #0
 801884a:	f8dc 0000 	ldr.w	r0, [ip]
 801884e:	b281      	uxth	r1, r0
 8018850:	fb02 7101 	mla	r1, r2, r1, r7
 8018854:	0c0f      	lsrs	r7, r1, #16
 8018856:	0c00      	lsrs	r0, r0, #16
 8018858:	fb02 7000 	mla	r0, r2, r0, r7
 801885c:	b289      	uxth	r1, r1
 801885e:	3301      	adds	r3, #1
 8018860:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018864:	429d      	cmp	r5, r3
 8018866:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801886a:	f84c 1b04 	str.w	r1, [ip], #4
 801886e:	dcec      	bgt.n	801884a <__multadd+0x12>
 8018870:	b1d7      	cbz	r7, 80188a8 <__multadd+0x70>
 8018872:	68a3      	ldr	r3, [r4, #8]
 8018874:	42ab      	cmp	r3, r5
 8018876:	dc12      	bgt.n	801889e <__multadd+0x66>
 8018878:	6861      	ldr	r1, [r4, #4]
 801887a:	4630      	mov	r0, r6
 801887c:	3101      	adds	r1, #1
 801887e:	f7ff ff90 	bl	80187a2 <_Balloc>
 8018882:	6922      	ldr	r2, [r4, #16]
 8018884:	3202      	adds	r2, #2
 8018886:	f104 010c 	add.w	r1, r4, #12
 801888a:	4680      	mov	r8, r0
 801888c:	0092      	lsls	r2, r2, #2
 801888e:	300c      	adds	r0, #12
 8018890:	f7ff ff7c 	bl	801878c <memcpy>
 8018894:	4621      	mov	r1, r4
 8018896:	4630      	mov	r0, r6
 8018898:	f7ff ffb7 	bl	801880a <_Bfree>
 801889c:	4644      	mov	r4, r8
 801889e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80188a2:	3501      	adds	r5, #1
 80188a4:	615f      	str	r7, [r3, #20]
 80188a6:	6125      	str	r5, [r4, #16]
 80188a8:	4620      	mov	r0, r4
 80188aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080188ae <__s2b>:
 80188ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80188b2:	460c      	mov	r4, r1
 80188b4:	4615      	mov	r5, r2
 80188b6:	461f      	mov	r7, r3
 80188b8:	2209      	movs	r2, #9
 80188ba:	3308      	adds	r3, #8
 80188bc:	4606      	mov	r6, r0
 80188be:	fb93 f3f2 	sdiv	r3, r3, r2
 80188c2:	2100      	movs	r1, #0
 80188c4:	2201      	movs	r2, #1
 80188c6:	429a      	cmp	r2, r3
 80188c8:	db20      	blt.n	801890c <__s2b+0x5e>
 80188ca:	4630      	mov	r0, r6
 80188cc:	f7ff ff69 	bl	80187a2 <_Balloc>
 80188d0:	9b08      	ldr	r3, [sp, #32]
 80188d2:	6143      	str	r3, [r0, #20]
 80188d4:	2d09      	cmp	r5, #9
 80188d6:	f04f 0301 	mov.w	r3, #1
 80188da:	6103      	str	r3, [r0, #16]
 80188dc:	dd19      	ble.n	8018912 <__s2b+0x64>
 80188de:	f104 0809 	add.w	r8, r4, #9
 80188e2:	46c1      	mov	r9, r8
 80188e4:	442c      	add	r4, r5
 80188e6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80188ea:	4601      	mov	r1, r0
 80188ec:	3b30      	subs	r3, #48	; 0x30
 80188ee:	220a      	movs	r2, #10
 80188f0:	4630      	mov	r0, r6
 80188f2:	f7ff ffa1 	bl	8018838 <__multadd>
 80188f6:	45a1      	cmp	r9, r4
 80188f8:	d1f5      	bne.n	80188e6 <__s2b+0x38>
 80188fa:	eb08 0405 	add.w	r4, r8, r5
 80188fe:	3c08      	subs	r4, #8
 8018900:	1b2d      	subs	r5, r5, r4
 8018902:	1963      	adds	r3, r4, r5
 8018904:	42bb      	cmp	r3, r7
 8018906:	db07      	blt.n	8018918 <__s2b+0x6a>
 8018908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801890c:	0052      	lsls	r2, r2, #1
 801890e:	3101      	adds	r1, #1
 8018910:	e7d9      	b.n	80188c6 <__s2b+0x18>
 8018912:	340a      	adds	r4, #10
 8018914:	2509      	movs	r5, #9
 8018916:	e7f3      	b.n	8018900 <__s2b+0x52>
 8018918:	f814 3b01 	ldrb.w	r3, [r4], #1
 801891c:	4601      	mov	r1, r0
 801891e:	3b30      	subs	r3, #48	; 0x30
 8018920:	220a      	movs	r2, #10
 8018922:	4630      	mov	r0, r6
 8018924:	f7ff ff88 	bl	8018838 <__multadd>
 8018928:	e7eb      	b.n	8018902 <__s2b+0x54>

0801892a <__hi0bits>:
 801892a:	0c02      	lsrs	r2, r0, #16
 801892c:	0412      	lsls	r2, r2, #16
 801892e:	4603      	mov	r3, r0
 8018930:	b9b2      	cbnz	r2, 8018960 <__hi0bits+0x36>
 8018932:	0403      	lsls	r3, r0, #16
 8018934:	2010      	movs	r0, #16
 8018936:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801893a:	bf04      	itt	eq
 801893c:	021b      	lsleq	r3, r3, #8
 801893e:	3008      	addeq	r0, #8
 8018940:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018944:	bf04      	itt	eq
 8018946:	011b      	lsleq	r3, r3, #4
 8018948:	3004      	addeq	r0, #4
 801894a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801894e:	bf04      	itt	eq
 8018950:	009b      	lsleq	r3, r3, #2
 8018952:	3002      	addeq	r0, #2
 8018954:	2b00      	cmp	r3, #0
 8018956:	db06      	blt.n	8018966 <__hi0bits+0x3c>
 8018958:	005b      	lsls	r3, r3, #1
 801895a:	d503      	bpl.n	8018964 <__hi0bits+0x3a>
 801895c:	3001      	adds	r0, #1
 801895e:	4770      	bx	lr
 8018960:	2000      	movs	r0, #0
 8018962:	e7e8      	b.n	8018936 <__hi0bits+0xc>
 8018964:	2020      	movs	r0, #32
 8018966:	4770      	bx	lr

08018968 <__lo0bits>:
 8018968:	6803      	ldr	r3, [r0, #0]
 801896a:	f013 0207 	ands.w	r2, r3, #7
 801896e:	4601      	mov	r1, r0
 8018970:	d00b      	beq.n	801898a <__lo0bits+0x22>
 8018972:	07da      	lsls	r2, r3, #31
 8018974:	d423      	bmi.n	80189be <__lo0bits+0x56>
 8018976:	0798      	lsls	r0, r3, #30
 8018978:	bf49      	itett	mi
 801897a:	085b      	lsrmi	r3, r3, #1
 801897c:	089b      	lsrpl	r3, r3, #2
 801897e:	2001      	movmi	r0, #1
 8018980:	600b      	strmi	r3, [r1, #0]
 8018982:	bf5c      	itt	pl
 8018984:	600b      	strpl	r3, [r1, #0]
 8018986:	2002      	movpl	r0, #2
 8018988:	4770      	bx	lr
 801898a:	b298      	uxth	r0, r3
 801898c:	b9a8      	cbnz	r0, 80189ba <__lo0bits+0x52>
 801898e:	0c1b      	lsrs	r3, r3, #16
 8018990:	2010      	movs	r0, #16
 8018992:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018996:	bf04      	itt	eq
 8018998:	0a1b      	lsreq	r3, r3, #8
 801899a:	3008      	addeq	r0, #8
 801899c:	071a      	lsls	r2, r3, #28
 801899e:	bf04      	itt	eq
 80189a0:	091b      	lsreq	r3, r3, #4
 80189a2:	3004      	addeq	r0, #4
 80189a4:	079a      	lsls	r2, r3, #30
 80189a6:	bf04      	itt	eq
 80189a8:	089b      	lsreq	r3, r3, #2
 80189aa:	3002      	addeq	r0, #2
 80189ac:	07da      	lsls	r2, r3, #31
 80189ae:	d402      	bmi.n	80189b6 <__lo0bits+0x4e>
 80189b0:	085b      	lsrs	r3, r3, #1
 80189b2:	d006      	beq.n	80189c2 <__lo0bits+0x5a>
 80189b4:	3001      	adds	r0, #1
 80189b6:	600b      	str	r3, [r1, #0]
 80189b8:	4770      	bx	lr
 80189ba:	4610      	mov	r0, r2
 80189bc:	e7e9      	b.n	8018992 <__lo0bits+0x2a>
 80189be:	2000      	movs	r0, #0
 80189c0:	4770      	bx	lr
 80189c2:	2020      	movs	r0, #32
 80189c4:	4770      	bx	lr

080189c6 <__i2b>:
 80189c6:	b510      	push	{r4, lr}
 80189c8:	460c      	mov	r4, r1
 80189ca:	2101      	movs	r1, #1
 80189cc:	f7ff fee9 	bl	80187a2 <_Balloc>
 80189d0:	2201      	movs	r2, #1
 80189d2:	6144      	str	r4, [r0, #20]
 80189d4:	6102      	str	r2, [r0, #16]
 80189d6:	bd10      	pop	{r4, pc}

080189d8 <__multiply>:
 80189d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189dc:	4614      	mov	r4, r2
 80189de:	690a      	ldr	r2, [r1, #16]
 80189e0:	6923      	ldr	r3, [r4, #16]
 80189e2:	429a      	cmp	r2, r3
 80189e4:	bfb8      	it	lt
 80189e6:	460b      	movlt	r3, r1
 80189e8:	4688      	mov	r8, r1
 80189ea:	bfbc      	itt	lt
 80189ec:	46a0      	movlt	r8, r4
 80189ee:	461c      	movlt	r4, r3
 80189f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80189f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80189f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80189fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018a00:	eb07 0609 	add.w	r6, r7, r9
 8018a04:	42b3      	cmp	r3, r6
 8018a06:	bfb8      	it	lt
 8018a08:	3101      	addlt	r1, #1
 8018a0a:	f7ff feca 	bl	80187a2 <_Balloc>
 8018a0e:	f100 0514 	add.w	r5, r0, #20
 8018a12:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018a16:	462b      	mov	r3, r5
 8018a18:	2200      	movs	r2, #0
 8018a1a:	4573      	cmp	r3, lr
 8018a1c:	d316      	bcc.n	8018a4c <__multiply+0x74>
 8018a1e:	f104 0214 	add.w	r2, r4, #20
 8018a22:	f108 0114 	add.w	r1, r8, #20
 8018a26:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018a2a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018a2e:	9300      	str	r3, [sp, #0]
 8018a30:	9b00      	ldr	r3, [sp, #0]
 8018a32:	9201      	str	r2, [sp, #4]
 8018a34:	4293      	cmp	r3, r2
 8018a36:	d80c      	bhi.n	8018a52 <__multiply+0x7a>
 8018a38:	2e00      	cmp	r6, #0
 8018a3a:	dd03      	ble.n	8018a44 <__multiply+0x6c>
 8018a3c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d05d      	beq.n	8018b00 <__multiply+0x128>
 8018a44:	6106      	str	r6, [r0, #16]
 8018a46:	b003      	add	sp, #12
 8018a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a4c:	f843 2b04 	str.w	r2, [r3], #4
 8018a50:	e7e3      	b.n	8018a1a <__multiply+0x42>
 8018a52:	f8b2 b000 	ldrh.w	fp, [r2]
 8018a56:	f1bb 0f00 	cmp.w	fp, #0
 8018a5a:	d023      	beq.n	8018aa4 <__multiply+0xcc>
 8018a5c:	4689      	mov	r9, r1
 8018a5e:	46ac      	mov	ip, r5
 8018a60:	f04f 0800 	mov.w	r8, #0
 8018a64:	f859 4b04 	ldr.w	r4, [r9], #4
 8018a68:	f8dc a000 	ldr.w	sl, [ip]
 8018a6c:	b2a3      	uxth	r3, r4
 8018a6e:	fa1f fa8a 	uxth.w	sl, sl
 8018a72:	fb0b a303 	mla	r3, fp, r3, sl
 8018a76:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018a7a:	f8dc 4000 	ldr.w	r4, [ip]
 8018a7e:	4443      	add	r3, r8
 8018a80:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018a84:	fb0b 840a 	mla	r4, fp, sl, r8
 8018a88:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018a8c:	46e2      	mov	sl, ip
 8018a8e:	b29b      	uxth	r3, r3
 8018a90:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018a94:	454f      	cmp	r7, r9
 8018a96:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018a9a:	f84a 3b04 	str.w	r3, [sl], #4
 8018a9e:	d82b      	bhi.n	8018af8 <__multiply+0x120>
 8018aa0:	f8cc 8004 	str.w	r8, [ip, #4]
 8018aa4:	9b01      	ldr	r3, [sp, #4]
 8018aa6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018aaa:	3204      	adds	r2, #4
 8018aac:	f1ba 0f00 	cmp.w	sl, #0
 8018ab0:	d020      	beq.n	8018af4 <__multiply+0x11c>
 8018ab2:	682b      	ldr	r3, [r5, #0]
 8018ab4:	4689      	mov	r9, r1
 8018ab6:	46a8      	mov	r8, r5
 8018ab8:	f04f 0b00 	mov.w	fp, #0
 8018abc:	f8b9 c000 	ldrh.w	ip, [r9]
 8018ac0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018ac4:	fb0a 440c 	mla	r4, sl, ip, r4
 8018ac8:	445c      	add	r4, fp
 8018aca:	46c4      	mov	ip, r8
 8018acc:	b29b      	uxth	r3, r3
 8018ace:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018ad2:	f84c 3b04 	str.w	r3, [ip], #4
 8018ad6:	f859 3b04 	ldr.w	r3, [r9], #4
 8018ada:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018ade:	0c1b      	lsrs	r3, r3, #16
 8018ae0:	fb0a b303 	mla	r3, sl, r3, fp
 8018ae4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018ae8:	454f      	cmp	r7, r9
 8018aea:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018aee:	d805      	bhi.n	8018afc <__multiply+0x124>
 8018af0:	f8c8 3004 	str.w	r3, [r8, #4]
 8018af4:	3504      	adds	r5, #4
 8018af6:	e79b      	b.n	8018a30 <__multiply+0x58>
 8018af8:	46d4      	mov	ip, sl
 8018afa:	e7b3      	b.n	8018a64 <__multiply+0x8c>
 8018afc:	46e0      	mov	r8, ip
 8018afe:	e7dd      	b.n	8018abc <__multiply+0xe4>
 8018b00:	3e01      	subs	r6, #1
 8018b02:	e799      	b.n	8018a38 <__multiply+0x60>

08018b04 <__pow5mult>:
 8018b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b08:	4615      	mov	r5, r2
 8018b0a:	f012 0203 	ands.w	r2, r2, #3
 8018b0e:	4606      	mov	r6, r0
 8018b10:	460f      	mov	r7, r1
 8018b12:	d007      	beq.n	8018b24 <__pow5mult+0x20>
 8018b14:	3a01      	subs	r2, #1
 8018b16:	4c21      	ldr	r4, [pc, #132]	; (8018b9c <__pow5mult+0x98>)
 8018b18:	2300      	movs	r3, #0
 8018b1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018b1e:	f7ff fe8b 	bl	8018838 <__multadd>
 8018b22:	4607      	mov	r7, r0
 8018b24:	10ad      	asrs	r5, r5, #2
 8018b26:	d035      	beq.n	8018b94 <__pow5mult+0x90>
 8018b28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018b2a:	b93c      	cbnz	r4, 8018b3c <__pow5mult+0x38>
 8018b2c:	2010      	movs	r0, #16
 8018b2e:	f7ff fe13 	bl	8018758 <malloc>
 8018b32:	6270      	str	r0, [r6, #36]	; 0x24
 8018b34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018b38:	6004      	str	r4, [r0, #0]
 8018b3a:	60c4      	str	r4, [r0, #12]
 8018b3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018b40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018b44:	b94c      	cbnz	r4, 8018b5a <__pow5mult+0x56>
 8018b46:	f240 2171 	movw	r1, #625	; 0x271
 8018b4a:	4630      	mov	r0, r6
 8018b4c:	f7ff ff3b 	bl	80189c6 <__i2b>
 8018b50:	2300      	movs	r3, #0
 8018b52:	f8c8 0008 	str.w	r0, [r8, #8]
 8018b56:	4604      	mov	r4, r0
 8018b58:	6003      	str	r3, [r0, #0]
 8018b5a:	f04f 0800 	mov.w	r8, #0
 8018b5e:	07eb      	lsls	r3, r5, #31
 8018b60:	d50a      	bpl.n	8018b78 <__pow5mult+0x74>
 8018b62:	4639      	mov	r1, r7
 8018b64:	4622      	mov	r2, r4
 8018b66:	4630      	mov	r0, r6
 8018b68:	f7ff ff36 	bl	80189d8 <__multiply>
 8018b6c:	4639      	mov	r1, r7
 8018b6e:	4681      	mov	r9, r0
 8018b70:	4630      	mov	r0, r6
 8018b72:	f7ff fe4a 	bl	801880a <_Bfree>
 8018b76:	464f      	mov	r7, r9
 8018b78:	106d      	asrs	r5, r5, #1
 8018b7a:	d00b      	beq.n	8018b94 <__pow5mult+0x90>
 8018b7c:	6820      	ldr	r0, [r4, #0]
 8018b7e:	b938      	cbnz	r0, 8018b90 <__pow5mult+0x8c>
 8018b80:	4622      	mov	r2, r4
 8018b82:	4621      	mov	r1, r4
 8018b84:	4630      	mov	r0, r6
 8018b86:	f7ff ff27 	bl	80189d8 <__multiply>
 8018b8a:	6020      	str	r0, [r4, #0]
 8018b8c:	f8c0 8000 	str.w	r8, [r0]
 8018b90:	4604      	mov	r4, r0
 8018b92:	e7e4      	b.n	8018b5e <__pow5mult+0x5a>
 8018b94:	4638      	mov	r0, r7
 8018b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b9a:	bf00      	nop
 8018b9c:	0801a510 	.word	0x0801a510

08018ba0 <__lshift>:
 8018ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ba4:	460c      	mov	r4, r1
 8018ba6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018baa:	6923      	ldr	r3, [r4, #16]
 8018bac:	6849      	ldr	r1, [r1, #4]
 8018bae:	eb0a 0903 	add.w	r9, sl, r3
 8018bb2:	68a3      	ldr	r3, [r4, #8]
 8018bb4:	4607      	mov	r7, r0
 8018bb6:	4616      	mov	r6, r2
 8018bb8:	f109 0501 	add.w	r5, r9, #1
 8018bbc:	42ab      	cmp	r3, r5
 8018bbe:	db32      	blt.n	8018c26 <__lshift+0x86>
 8018bc0:	4638      	mov	r0, r7
 8018bc2:	f7ff fdee 	bl	80187a2 <_Balloc>
 8018bc6:	2300      	movs	r3, #0
 8018bc8:	4680      	mov	r8, r0
 8018bca:	f100 0114 	add.w	r1, r0, #20
 8018bce:	461a      	mov	r2, r3
 8018bd0:	4553      	cmp	r3, sl
 8018bd2:	db2b      	blt.n	8018c2c <__lshift+0x8c>
 8018bd4:	6920      	ldr	r0, [r4, #16]
 8018bd6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018bda:	f104 0314 	add.w	r3, r4, #20
 8018bde:	f016 021f 	ands.w	r2, r6, #31
 8018be2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018be6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018bea:	d025      	beq.n	8018c38 <__lshift+0x98>
 8018bec:	f1c2 0e20 	rsb	lr, r2, #32
 8018bf0:	2000      	movs	r0, #0
 8018bf2:	681e      	ldr	r6, [r3, #0]
 8018bf4:	468a      	mov	sl, r1
 8018bf6:	4096      	lsls	r6, r2
 8018bf8:	4330      	orrs	r0, r6
 8018bfa:	f84a 0b04 	str.w	r0, [sl], #4
 8018bfe:	f853 0b04 	ldr.w	r0, [r3], #4
 8018c02:	459c      	cmp	ip, r3
 8018c04:	fa20 f00e 	lsr.w	r0, r0, lr
 8018c08:	d814      	bhi.n	8018c34 <__lshift+0x94>
 8018c0a:	6048      	str	r0, [r1, #4]
 8018c0c:	b108      	cbz	r0, 8018c12 <__lshift+0x72>
 8018c0e:	f109 0502 	add.w	r5, r9, #2
 8018c12:	3d01      	subs	r5, #1
 8018c14:	4638      	mov	r0, r7
 8018c16:	f8c8 5010 	str.w	r5, [r8, #16]
 8018c1a:	4621      	mov	r1, r4
 8018c1c:	f7ff fdf5 	bl	801880a <_Bfree>
 8018c20:	4640      	mov	r0, r8
 8018c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c26:	3101      	adds	r1, #1
 8018c28:	005b      	lsls	r3, r3, #1
 8018c2a:	e7c7      	b.n	8018bbc <__lshift+0x1c>
 8018c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018c30:	3301      	adds	r3, #1
 8018c32:	e7cd      	b.n	8018bd0 <__lshift+0x30>
 8018c34:	4651      	mov	r1, sl
 8018c36:	e7dc      	b.n	8018bf2 <__lshift+0x52>
 8018c38:	3904      	subs	r1, #4
 8018c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c3e:	f841 2f04 	str.w	r2, [r1, #4]!
 8018c42:	459c      	cmp	ip, r3
 8018c44:	d8f9      	bhi.n	8018c3a <__lshift+0x9a>
 8018c46:	e7e4      	b.n	8018c12 <__lshift+0x72>

08018c48 <__mcmp>:
 8018c48:	6903      	ldr	r3, [r0, #16]
 8018c4a:	690a      	ldr	r2, [r1, #16]
 8018c4c:	1a9b      	subs	r3, r3, r2
 8018c4e:	b530      	push	{r4, r5, lr}
 8018c50:	d10c      	bne.n	8018c6c <__mcmp+0x24>
 8018c52:	0092      	lsls	r2, r2, #2
 8018c54:	3014      	adds	r0, #20
 8018c56:	3114      	adds	r1, #20
 8018c58:	1884      	adds	r4, r0, r2
 8018c5a:	4411      	add	r1, r2
 8018c5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018c60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018c64:	4295      	cmp	r5, r2
 8018c66:	d003      	beq.n	8018c70 <__mcmp+0x28>
 8018c68:	d305      	bcc.n	8018c76 <__mcmp+0x2e>
 8018c6a:	2301      	movs	r3, #1
 8018c6c:	4618      	mov	r0, r3
 8018c6e:	bd30      	pop	{r4, r5, pc}
 8018c70:	42a0      	cmp	r0, r4
 8018c72:	d3f3      	bcc.n	8018c5c <__mcmp+0x14>
 8018c74:	e7fa      	b.n	8018c6c <__mcmp+0x24>
 8018c76:	f04f 33ff 	mov.w	r3, #4294967295
 8018c7a:	e7f7      	b.n	8018c6c <__mcmp+0x24>

08018c7c <__mdiff>:
 8018c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c80:	460d      	mov	r5, r1
 8018c82:	4607      	mov	r7, r0
 8018c84:	4611      	mov	r1, r2
 8018c86:	4628      	mov	r0, r5
 8018c88:	4614      	mov	r4, r2
 8018c8a:	f7ff ffdd 	bl	8018c48 <__mcmp>
 8018c8e:	1e06      	subs	r6, r0, #0
 8018c90:	d108      	bne.n	8018ca4 <__mdiff+0x28>
 8018c92:	4631      	mov	r1, r6
 8018c94:	4638      	mov	r0, r7
 8018c96:	f7ff fd84 	bl	80187a2 <_Balloc>
 8018c9a:	2301      	movs	r3, #1
 8018c9c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ca4:	bfa4      	itt	ge
 8018ca6:	4623      	movge	r3, r4
 8018ca8:	462c      	movge	r4, r5
 8018caa:	4638      	mov	r0, r7
 8018cac:	6861      	ldr	r1, [r4, #4]
 8018cae:	bfa6      	itte	ge
 8018cb0:	461d      	movge	r5, r3
 8018cb2:	2600      	movge	r6, #0
 8018cb4:	2601      	movlt	r6, #1
 8018cb6:	f7ff fd74 	bl	80187a2 <_Balloc>
 8018cba:	692b      	ldr	r3, [r5, #16]
 8018cbc:	60c6      	str	r6, [r0, #12]
 8018cbe:	6926      	ldr	r6, [r4, #16]
 8018cc0:	f105 0914 	add.w	r9, r5, #20
 8018cc4:	f104 0214 	add.w	r2, r4, #20
 8018cc8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018ccc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018cd0:	f100 0514 	add.w	r5, r0, #20
 8018cd4:	f04f 0e00 	mov.w	lr, #0
 8018cd8:	f852 ab04 	ldr.w	sl, [r2], #4
 8018cdc:	f859 4b04 	ldr.w	r4, [r9], #4
 8018ce0:	fa1e f18a 	uxtah	r1, lr, sl
 8018ce4:	b2a3      	uxth	r3, r4
 8018ce6:	1ac9      	subs	r1, r1, r3
 8018ce8:	0c23      	lsrs	r3, r4, #16
 8018cea:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018cee:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018cf2:	b289      	uxth	r1, r1
 8018cf4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018cf8:	45c8      	cmp	r8, r9
 8018cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018cfe:	4694      	mov	ip, r2
 8018d00:	f845 3b04 	str.w	r3, [r5], #4
 8018d04:	d8e8      	bhi.n	8018cd8 <__mdiff+0x5c>
 8018d06:	45bc      	cmp	ip, r7
 8018d08:	d304      	bcc.n	8018d14 <__mdiff+0x98>
 8018d0a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018d0e:	b183      	cbz	r3, 8018d32 <__mdiff+0xb6>
 8018d10:	6106      	str	r6, [r0, #16]
 8018d12:	e7c5      	b.n	8018ca0 <__mdiff+0x24>
 8018d14:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018d18:	fa1e f381 	uxtah	r3, lr, r1
 8018d1c:	141a      	asrs	r2, r3, #16
 8018d1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018d22:	b29b      	uxth	r3, r3
 8018d24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018d28:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018d2c:	f845 3b04 	str.w	r3, [r5], #4
 8018d30:	e7e9      	b.n	8018d06 <__mdiff+0x8a>
 8018d32:	3e01      	subs	r6, #1
 8018d34:	e7e9      	b.n	8018d0a <__mdiff+0x8e>
	...

08018d38 <__ulp>:
 8018d38:	4b12      	ldr	r3, [pc, #72]	; (8018d84 <__ulp+0x4c>)
 8018d3a:	ee10 2a90 	vmov	r2, s1
 8018d3e:	401a      	ands	r2, r3
 8018d40:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	dd04      	ble.n	8018d52 <__ulp+0x1a>
 8018d48:	2000      	movs	r0, #0
 8018d4a:	4619      	mov	r1, r3
 8018d4c:	ec41 0b10 	vmov	d0, r0, r1
 8018d50:	4770      	bx	lr
 8018d52:	425b      	negs	r3, r3
 8018d54:	151b      	asrs	r3, r3, #20
 8018d56:	2b13      	cmp	r3, #19
 8018d58:	f04f 0000 	mov.w	r0, #0
 8018d5c:	f04f 0100 	mov.w	r1, #0
 8018d60:	dc04      	bgt.n	8018d6c <__ulp+0x34>
 8018d62:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018d66:	fa42 f103 	asr.w	r1, r2, r3
 8018d6a:	e7ef      	b.n	8018d4c <__ulp+0x14>
 8018d6c:	3b14      	subs	r3, #20
 8018d6e:	2b1e      	cmp	r3, #30
 8018d70:	f04f 0201 	mov.w	r2, #1
 8018d74:	bfda      	itte	le
 8018d76:	f1c3 031f 	rsble	r3, r3, #31
 8018d7a:	fa02 f303 	lslle.w	r3, r2, r3
 8018d7e:	4613      	movgt	r3, r2
 8018d80:	4618      	mov	r0, r3
 8018d82:	e7e3      	b.n	8018d4c <__ulp+0x14>
 8018d84:	7ff00000 	.word	0x7ff00000

08018d88 <__b2d>:
 8018d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d8a:	6905      	ldr	r5, [r0, #16]
 8018d8c:	f100 0714 	add.w	r7, r0, #20
 8018d90:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018d94:	1f2e      	subs	r6, r5, #4
 8018d96:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018d9a:	4620      	mov	r0, r4
 8018d9c:	f7ff fdc5 	bl	801892a <__hi0bits>
 8018da0:	f1c0 0320 	rsb	r3, r0, #32
 8018da4:	280a      	cmp	r0, #10
 8018da6:	600b      	str	r3, [r1, #0]
 8018da8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018e20 <__b2d+0x98>
 8018dac:	dc14      	bgt.n	8018dd8 <__b2d+0x50>
 8018dae:	f1c0 0e0b 	rsb	lr, r0, #11
 8018db2:	fa24 f10e 	lsr.w	r1, r4, lr
 8018db6:	42b7      	cmp	r7, r6
 8018db8:	ea41 030c 	orr.w	r3, r1, ip
 8018dbc:	bf34      	ite	cc
 8018dbe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018dc2:	2100      	movcs	r1, #0
 8018dc4:	3015      	adds	r0, #21
 8018dc6:	fa04 f000 	lsl.w	r0, r4, r0
 8018dca:	fa21 f10e 	lsr.w	r1, r1, lr
 8018dce:	ea40 0201 	orr.w	r2, r0, r1
 8018dd2:	ec43 2b10 	vmov	d0, r2, r3
 8018dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018dd8:	42b7      	cmp	r7, r6
 8018dda:	bf3a      	itte	cc
 8018ddc:	f1a5 0608 	subcc.w	r6, r5, #8
 8018de0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018de4:	2100      	movcs	r1, #0
 8018de6:	380b      	subs	r0, #11
 8018de8:	d015      	beq.n	8018e16 <__b2d+0x8e>
 8018dea:	4084      	lsls	r4, r0
 8018dec:	f1c0 0520 	rsb	r5, r0, #32
 8018df0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018df4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018df8:	42be      	cmp	r6, r7
 8018dfa:	fa21 fc05 	lsr.w	ip, r1, r5
 8018dfe:	ea44 030c 	orr.w	r3, r4, ip
 8018e02:	bf8c      	ite	hi
 8018e04:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018e08:	2400      	movls	r4, #0
 8018e0a:	fa01 f000 	lsl.w	r0, r1, r0
 8018e0e:	40ec      	lsrs	r4, r5
 8018e10:	ea40 0204 	orr.w	r2, r0, r4
 8018e14:	e7dd      	b.n	8018dd2 <__b2d+0x4a>
 8018e16:	ea44 030c 	orr.w	r3, r4, ip
 8018e1a:	460a      	mov	r2, r1
 8018e1c:	e7d9      	b.n	8018dd2 <__b2d+0x4a>
 8018e1e:	bf00      	nop
 8018e20:	3ff00000 	.word	0x3ff00000

08018e24 <__d2b>:
 8018e24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018e28:	460e      	mov	r6, r1
 8018e2a:	2101      	movs	r1, #1
 8018e2c:	ec59 8b10 	vmov	r8, r9, d0
 8018e30:	4615      	mov	r5, r2
 8018e32:	f7ff fcb6 	bl	80187a2 <_Balloc>
 8018e36:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018e3a:	4607      	mov	r7, r0
 8018e3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018e40:	bb34      	cbnz	r4, 8018e90 <__d2b+0x6c>
 8018e42:	9301      	str	r3, [sp, #4]
 8018e44:	f1b8 0300 	subs.w	r3, r8, #0
 8018e48:	d027      	beq.n	8018e9a <__d2b+0x76>
 8018e4a:	a802      	add	r0, sp, #8
 8018e4c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018e50:	f7ff fd8a 	bl	8018968 <__lo0bits>
 8018e54:	9900      	ldr	r1, [sp, #0]
 8018e56:	b1f0      	cbz	r0, 8018e96 <__d2b+0x72>
 8018e58:	9a01      	ldr	r2, [sp, #4]
 8018e5a:	f1c0 0320 	rsb	r3, r0, #32
 8018e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8018e62:	430b      	orrs	r3, r1
 8018e64:	40c2      	lsrs	r2, r0
 8018e66:	617b      	str	r3, [r7, #20]
 8018e68:	9201      	str	r2, [sp, #4]
 8018e6a:	9b01      	ldr	r3, [sp, #4]
 8018e6c:	61bb      	str	r3, [r7, #24]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	bf14      	ite	ne
 8018e72:	2102      	movne	r1, #2
 8018e74:	2101      	moveq	r1, #1
 8018e76:	6139      	str	r1, [r7, #16]
 8018e78:	b1c4      	cbz	r4, 8018eac <__d2b+0x88>
 8018e7a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018e7e:	4404      	add	r4, r0
 8018e80:	6034      	str	r4, [r6, #0]
 8018e82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018e86:	6028      	str	r0, [r5, #0]
 8018e88:	4638      	mov	r0, r7
 8018e8a:	b003      	add	sp, #12
 8018e8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018e90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018e94:	e7d5      	b.n	8018e42 <__d2b+0x1e>
 8018e96:	6179      	str	r1, [r7, #20]
 8018e98:	e7e7      	b.n	8018e6a <__d2b+0x46>
 8018e9a:	a801      	add	r0, sp, #4
 8018e9c:	f7ff fd64 	bl	8018968 <__lo0bits>
 8018ea0:	9b01      	ldr	r3, [sp, #4]
 8018ea2:	617b      	str	r3, [r7, #20]
 8018ea4:	2101      	movs	r1, #1
 8018ea6:	6139      	str	r1, [r7, #16]
 8018ea8:	3020      	adds	r0, #32
 8018eaa:	e7e5      	b.n	8018e78 <__d2b+0x54>
 8018eac:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018eb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018eb4:	6030      	str	r0, [r6, #0]
 8018eb6:	6918      	ldr	r0, [r3, #16]
 8018eb8:	f7ff fd37 	bl	801892a <__hi0bits>
 8018ebc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018ec0:	e7e1      	b.n	8018e86 <__d2b+0x62>

08018ec2 <__ratio>:
 8018ec2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ec6:	4688      	mov	r8, r1
 8018ec8:	4669      	mov	r1, sp
 8018eca:	4681      	mov	r9, r0
 8018ecc:	f7ff ff5c 	bl	8018d88 <__b2d>
 8018ed0:	a901      	add	r1, sp, #4
 8018ed2:	4640      	mov	r0, r8
 8018ed4:	ec57 6b10 	vmov	r6, r7, d0
 8018ed8:	f7ff ff56 	bl	8018d88 <__b2d>
 8018edc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018ee0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018ee4:	eba3 0c02 	sub.w	ip, r3, r2
 8018ee8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018eec:	1a9b      	subs	r3, r3, r2
 8018eee:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018ef2:	ec5b ab10 	vmov	sl, fp, d0
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	bfce      	itee	gt
 8018efa:	463a      	movgt	r2, r7
 8018efc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018f00:	465a      	movle	r2, fp
 8018f02:	4659      	mov	r1, fp
 8018f04:	463d      	mov	r5, r7
 8018f06:	bfd4      	ite	le
 8018f08:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018f0c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018f10:	4630      	mov	r0, r6
 8018f12:	ee10 2a10 	vmov	r2, s0
 8018f16:	460b      	mov	r3, r1
 8018f18:	4629      	mov	r1, r5
 8018f1a:	f7e7 fcaf 	bl	800087c <__aeabi_ddiv>
 8018f1e:	ec41 0b10 	vmov	d0, r0, r1
 8018f22:	b003      	add	sp, #12
 8018f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f28 <__copybits>:
 8018f28:	3901      	subs	r1, #1
 8018f2a:	b510      	push	{r4, lr}
 8018f2c:	1149      	asrs	r1, r1, #5
 8018f2e:	6914      	ldr	r4, [r2, #16]
 8018f30:	3101      	adds	r1, #1
 8018f32:	f102 0314 	add.w	r3, r2, #20
 8018f36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018f3a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018f3e:	42a3      	cmp	r3, r4
 8018f40:	4602      	mov	r2, r0
 8018f42:	d303      	bcc.n	8018f4c <__copybits+0x24>
 8018f44:	2300      	movs	r3, #0
 8018f46:	428a      	cmp	r2, r1
 8018f48:	d305      	bcc.n	8018f56 <__copybits+0x2e>
 8018f4a:	bd10      	pop	{r4, pc}
 8018f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f50:	f840 2b04 	str.w	r2, [r0], #4
 8018f54:	e7f3      	b.n	8018f3e <__copybits+0x16>
 8018f56:	f842 3b04 	str.w	r3, [r2], #4
 8018f5a:	e7f4      	b.n	8018f46 <__copybits+0x1e>

08018f5c <__any_on>:
 8018f5c:	f100 0214 	add.w	r2, r0, #20
 8018f60:	6900      	ldr	r0, [r0, #16]
 8018f62:	114b      	asrs	r3, r1, #5
 8018f64:	4298      	cmp	r0, r3
 8018f66:	b510      	push	{r4, lr}
 8018f68:	db11      	blt.n	8018f8e <__any_on+0x32>
 8018f6a:	dd0a      	ble.n	8018f82 <__any_on+0x26>
 8018f6c:	f011 011f 	ands.w	r1, r1, #31
 8018f70:	d007      	beq.n	8018f82 <__any_on+0x26>
 8018f72:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018f76:	fa24 f001 	lsr.w	r0, r4, r1
 8018f7a:	fa00 f101 	lsl.w	r1, r0, r1
 8018f7e:	428c      	cmp	r4, r1
 8018f80:	d10b      	bne.n	8018f9a <__any_on+0x3e>
 8018f82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018f86:	4293      	cmp	r3, r2
 8018f88:	d803      	bhi.n	8018f92 <__any_on+0x36>
 8018f8a:	2000      	movs	r0, #0
 8018f8c:	bd10      	pop	{r4, pc}
 8018f8e:	4603      	mov	r3, r0
 8018f90:	e7f7      	b.n	8018f82 <__any_on+0x26>
 8018f92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018f96:	2900      	cmp	r1, #0
 8018f98:	d0f5      	beq.n	8018f86 <__any_on+0x2a>
 8018f9a:	2001      	movs	r0, #1
 8018f9c:	e7f6      	b.n	8018f8c <__any_on+0x30>

08018f9e <_calloc_r>:
 8018f9e:	b538      	push	{r3, r4, r5, lr}
 8018fa0:	fb02 f401 	mul.w	r4, r2, r1
 8018fa4:	4621      	mov	r1, r4
 8018fa6:	f000 f857 	bl	8019058 <_malloc_r>
 8018faa:	4605      	mov	r5, r0
 8018fac:	b118      	cbz	r0, 8018fb6 <_calloc_r+0x18>
 8018fae:	4622      	mov	r2, r4
 8018fb0:	2100      	movs	r1, #0
 8018fb2:	f7fc fca1 	bl	80158f8 <memset>
 8018fb6:	4628      	mov	r0, r5
 8018fb8:	bd38      	pop	{r3, r4, r5, pc}
	...

08018fbc <_free_r>:
 8018fbc:	b538      	push	{r3, r4, r5, lr}
 8018fbe:	4605      	mov	r5, r0
 8018fc0:	2900      	cmp	r1, #0
 8018fc2:	d045      	beq.n	8019050 <_free_r+0x94>
 8018fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018fc8:	1f0c      	subs	r4, r1, #4
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	bfb8      	it	lt
 8018fce:	18e4      	addlt	r4, r4, r3
 8018fd0:	f000 fe30 	bl	8019c34 <__malloc_lock>
 8018fd4:	4a1f      	ldr	r2, [pc, #124]	; (8019054 <_free_r+0x98>)
 8018fd6:	6813      	ldr	r3, [r2, #0]
 8018fd8:	4610      	mov	r0, r2
 8018fda:	b933      	cbnz	r3, 8018fea <_free_r+0x2e>
 8018fdc:	6063      	str	r3, [r4, #4]
 8018fde:	6014      	str	r4, [r2, #0]
 8018fe0:	4628      	mov	r0, r5
 8018fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018fe6:	f000 be26 	b.w	8019c36 <__malloc_unlock>
 8018fea:	42a3      	cmp	r3, r4
 8018fec:	d90c      	bls.n	8019008 <_free_r+0x4c>
 8018fee:	6821      	ldr	r1, [r4, #0]
 8018ff0:	1862      	adds	r2, r4, r1
 8018ff2:	4293      	cmp	r3, r2
 8018ff4:	bf04      	itt	eq
 8018ff6:	681a      	ldreq	r2, [r3, #0]
 8018ff8:	685b      	ldreq	r3, [r3, #4]
 8018ffa:	6063      	str	r3, [r4, #4]
 8018ffc:	bf04      	itt	eq
 8018ffe:	1852      	addeq	r2, r2, r1
 8019000:	6022      	streq	r2, [r4, #0]
 8019002:	6004      	str	r4, [r0, #0]
 8019004:	e7ec      	b.n	8018fe0 <_free_r+0x24>
 8019006:	4613      	mov	r3, r2
 8019008:	685a      	ldr	r2, [r3, #4]
 801900a:	b10a      	cbz	r2, 8019010 <_free_r+0x54>
 801900c:	42a2      	cmp	r2, r4
 801900e:	d9fa      	bls.n	8019006 <_free_r+0x4a>
 8019010:	6819      	ldr	r1, [r3, #0]
 8019012:	1858      	adds	r0, r3, r1
 8019014:	42a0      	cmp	r0, r4
 8019016:	d10b      	bne.n	8019030 <_free_r+0x74>
 8019018:	6820      	ldr	r0, [r4, #0]
 801901a:	4401      	add	r1, r0
 801901c:	1858      	adds	r0, r3, r1
 801901e:	4282      	cmp	r2, r0
 8019020:	6019      	str	r1, [r3, #0]
 8019022:	d1dd      	bne.n	8018fe0 <_free_r+0x24>
 8019024:	6810      	ldr	r0, [r2, #0]
 8019026:	6852      	ldr	r2, [r2, #4]
 8019028:	605a      	str	r2, [r3, #4]
 801902a:	4401      	add	r1, r0
 801902c:	6019      	str	r1, [r3, #0]
 801902e:	e7d7      	b.n	8018fe0 <_free_r+0x24>
 8019030:	d902      	bls.n	8019038 <_free_r+0x7c>
 8019032:	230c      	movs	r3, #12
 8019034:	602b      	str	r3, [r5, #0]
 8019036:	e7d3      	b.n	8018fe0 <_free_r+0x24>
 8019038:	6820      	ldr	r0, [r4, #0]
 801903a:	1821      	adds	r1, r4, r0
 801903c:	428a      	cmp	r2, r1
 801903e:	bf04      	itt	eq
 8019040:	6811      	ldreq	r1, [r2, #0]
 8019042:	6852      	ldreq	r2, [r2, #4]
 8019044:	6062      	str	r2, [r4, #4]
 8019046:	bf04      	itt	eq
 8019048:	1809      	addeq	r1, r1, r0
 801904a:	6021      	streq	r1, [r4, #0]
 801904c:	605c      	str	r4, [r3, #4]
 801904e:	e7c7      	b.n	8018fe0 <_free_r+0x24>
 8019050:	bd38      	pop	{r3, r4, r5, pc}
 8019052:	bf00      	nop
 8019054:	20042300 	.word	0x20042300

08019058 <_malloc_r>:
 8019058:	b570      	push	{r4, r5, r6, lr}
 801905a:	1ccd      	adds	r5, r1, #3
 801905c:	f025 0503 	bic.w	r5, r5, #3
 8019060:	3508      	adds	r5, #8
 8019062:	2d0c      	cmp	r5, #12
 8019064:	bf38      	it	cc
 8019066:	250c      	movcc	r5, #12
 8019068:	2d00      	cmp	r5, #0
 801906a:	4606      	mov	r6, r0
 801906c:	db01      	blt.n	8019072 <_malloc_r+0x1a>
 801906e:	42a9      	cmp	r1, r5
 8019070:	d903      	bls.n	801907a <_malloc_r+0x22>
 8019072:	230c      	movs	r3, #12
 8019074:	6033      	str	r3, [r6, #0]
 8019076:	2000      	movs	r0, #0
 8019078:	bd70      	pop	{r4, r5, r6, pc}
 801907a:	f000 fddb 	bl	8019c34 <__malloc_lock>
 801907e:	4a21      	ldr	r2, [pc, #132]	; (8019104 <_malloc_r+0xac>)
 8019080:	6814      	ldr	r4, [r2, #0]
 8019082:	4621      	mov	r1, r4
 8019084:	b991      	cbnz	r1, 80190ac <_malloc_r+0x54>
 8019086:	4c20      	ldr	r4, [pc, #128]	; (8019108 <_malloc_r+0xb0>)
 8019088:	6823      	ldr	r3, [r4, #0]
 801908a:	b91b      	cbnz	r3, 8019094 <_malloc_r+0x3c>
 801908c:	4630      	mov	r0, r6
 801908e:	f000 fc91 	bl	80199b4 <_sbrk_r>
 8019092:	6020      	str	r0, [r4, #0]
 8019094:	4629      	mov	r1, r5
 8019096:	4630      	mov	r0, r6
 8019098:	f000 fc8c 	bl	80199b4 <_sbrk_r>
 801909c:	1c43      	adds	r3, r0, #1
 801909e:	d124      	bne.n	80190ea <_malloc_r+0x92>
 80190a0:	230c      	movs	r3, #12
 80190a2:	6033      	str	r3, [r6, #0]
 80190a4:	4630      	mov	r0, r6
 80190a6:	f000 fdc6 	bl	8019c36 <__malloc_unlock>
 80190aa:	e7e4      	b.n	8019076 <_malloc_r+0x1e>
 80190ac:	680b      	ldr	r3, [r1, #0]
 80190ae:	1b5b      	subs	r3, r3, r5
 80190b0:	d418      	bmi.n	80190e4 <_malloc_r+0x8c>
 80190b2:	2b0b      	cmp	r3, #11
 80190b4:	d90f      	bls.n	80190d6 <_malloc_r+0x7e>
 80190b6:	600b      	str	r3, [r1, #0]
 80190b8:	50cd      	str	r5, [r1, r3]
 80190ba:	18cc      	adds	r4, r1, r3
 80190bc:	4630      	mov	r0, r6
 80190be:	f000 fdba 	bl	8019c36 <__malloc_unlock>
 80190c2:	f104 000b 	add.w	r0, r4, #11
 80190c6:	1d23      	adds	r3, r4, #4
 80190c8:	f020 0007 	bic.w	r0, r0, #7
 80190cc:	1ac3      	subs	r3, r0, r3
 80190ce:	d0d3      	beq.n	8019078 <_malloc_r+0x20>
 80190d0:	425a      	negs	r2, r3
 80190d2:	50e2      	str	r2, [r4, r3]
 80190d4:	e7d0      	b.n	8019078 <_malloc_r+0x20>
 80190d6:	428c      	cmp	r4, r1
 80190d8:	684b      	ldr	r3, [r1, #4]
 80190da:	bf16      	itet	ne
 80190dc:	6063      	strne	r3, [r4, #4]
 80190de:	6013      	streq	r3, [r2, #0]
 80190e0:	460c      	movne	r4, r1
 80190e2:	e7eb      	b.n	80190bc <_malloc_r+0x64>
 80190e4:	460c      	mov	r4, r1
 80190e6:	6849      	ldr	r1, [r1, #4]
 80190e8:	e7cc      	b.n	8019084 <_malloc_r+0x2c>
 80190ea:	1cc4      	adds	r4, r0, #3
 80190ec:	f024 0403 	bic.w	r4, r4, #3
 80190f0:	42a0      	cmp	r0, r4
 80190f2:	d005      	beq.n	8019100 <_malloc_r+0xa8>
 80190f4:	1a21      	subs	r1, r4, r0
 80190f6:	4630      	mov	r0, r6
 80190f8:	f000 fc5c 	bl	80199b4 <_sbrk_r>
 80190fc:	3001      	adds	r0, #1
 80190fe:	d0cf      	beq.n	80190a0 <_malloc_r+0x48>
 8019100:	6025      	str	r5, [r4, #0]
 8019102:	e7db      	b.n	80190bc <_malloc_r+0x64>
 8019104:	20042300 	.word	0x20042300
 8019108:	20042304 	.word	0x20042304

0801910c <__ssputs_r>:
 801910c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019110:	688e      	ldr	r6, [r1, #8]
 8019112:	429e      	cmp	r6, r3
 8019114:	4682      	mov	sl, r0
 8019116:	460c      	mov	r4, r1
 8019118:	4690      	mov	r8, r2
 801911a:	4699      	mov	r9, r3
 801911c:	d837      	bhi.n	801918e <__ssputs_r+0x82>
 801911e:	898a      	ldrh	r2, [r1, #12]
 8019120:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019124:	d031      	beq.n	801918a <__ssputs_r+0x7e>
 8019126:	6825      	ldr	r5, [r4, #0]
 8019128:	6909      	ldr	r1, [r1, #16]
 801912a:	1a6f      	subs	r7, r5, r1
 801912c:	6965      	ldr	r5, [r4, #20]
 801912e:	2302      	movs	r3, #2
 8019130:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019134:	fb95 f5f3 	sdiv	r5, r5, r3
 8019138:	f109 0301 	add.w	r3, r9, #1
 801913c:	443b      	add	r3, r7
 801913e:	429d      	cmp	r5, r3
 8019140:	bf38      	it	cc
 8019142:	461d      	movcc	r5, r3
 8019144:	0553      	lsls	r3, r2, #21
 8019146:	d530      	bpl.n	80191aa <__ssputs_r+0x9e>
 8019148:	4629      	mov	r1, r5
 801914a:	f7ff ff85 	bl	8019058 <_malloc_r>
 801914e:	4606      	mov	r6, r0
 8019150:	b950      	cbnz	r0, 8019168 <__ssputs_r+0x5c>
 8019152:	230c      	movs	r3, #12
 8019154:	f8ca 3000 	str.w	r3, [sl]
 8019158:	89a3      	ldrh	r3, [r4, #12]
 801915a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801915e:	81a3      	strh	r3, [r4, #12]
 8019160:	f04f 30ff 	mov.w	r0, #4294967295
 8019164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019168:	463a      	mov	r2, r7
 801916a:	6921      	ldr	r1, [r4, #16]
 801916c:	f7ff fb0e 	bl	801878c <memcpy>
 8019170:	89a3      	ldrh	r3, [r4, #12]
 8019172:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801917a:	81a3      	strh	r3, [r4, #12]
 801917c:	6126      	str	r6, [r4, #16]
 801917e:	6165      	str	r5, [r4, #20]
 8019180:	443e      	add	r6, r7
 8019182:	1bed      	subs	r5, r5, r7
 8019184:	6026      	str	r6, [r4, #0]
 8019186:	60a5      	str	r5, [r4, #8]
 8019188:	464e      	mov	r6, r9
 801918a:	454e      	cmp	r6, r9
 801918c:	d900      	bls.n	8019190 <__ssputs_r+0x84>
 801918e:	464e      	mov	r6, r9
 8019190:	4632      	mov	r2, r6
 8019192:	4641      	mov	r1, r8
 8019194:	6820      	ldr	r0, [r4, #0]
 8019196:	f000 fd34 	bl	8019c02 <memmove>
 801919a:	68a3      	ldr	r3, [r4, #8]
 801919c:	1b9b      	subs	r3, r3, r6
 801919e:	60a3      	str	r3, [r4, #8]
 80191a0:	6823      	ldr	r3, [r4, #0]
 80191a2:	441e      	add	r6, r3
 80191a4:	6026      	str	r6, [r4, #0]
 80191a6:	2000      	movs	r0, #0
 80191a8:	e7dc      	b.n	8019164 <__ssputs_r+0x58>
 80191aa:	462a      	mov	r2, r5
 80191ac:	f000 fd44 	bl	8019c38 <_realloc_r>
 80191b0:	4606      	mov	r6, r0
 80191b2:	2800      	cmp	r0, #0
 80191b4:	d1e2      	bne.n	801917c <__ssputs_r+0x70>
 80191b6:	6921      	ldr	r1, [r4, #16]
 80191b8:	4650      	mov	r0, sl
 80191ba:	f7ff feff 	bl	8018fbc <_free_r>
 80191be:	e7c8      	b.n	8019152 <__ssputs_r+0x46>

080191c0 <_svfiprintf_r>:
 80191c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191c4:	461d      	mov	r5, r3
 80191c6:	898b      	ldrh	r3, [r1, #12]
 80191c8:	061f      	lsls	r7, r3, #24
 80191ca:	b09d      	sub	sp, #116	; 0x74
 80191cc:	4680      	mov	r8, r0
 80191ce:	460c      	mov	r4, r1
 80191d0:	4616      	mov	r6, r2
 80191d2:	d50f      	bpl.n	80191f4 <_svfiprintf_r+0x34>
 80191d4:	690b      	ldr	r3, [r1, #16]
 80191d6:	b96b      	cbnz	r3, 80191f4 <_svfiprintf_r+0x34>
 80191d8:	2140      	movs	r1, #64	; 0x40
 80191da:	f7ff ff3d 	bl	8019058 <_malloc_r>
 80191de:	6020      	str	r0, [r4, #0]
 80191e0:	6120      	str	r0, [r4, #16]
 80191e2:	b928      	cbnz	r0, 80191f0 <_svfiprintf_r+0x30>
 80191e4:	230c      	movs	r3, #12
 80191e6:	f8c8 3000 	str.w	r3, [r8]
 80191ea:	f04f 30ff 	mov.w	r0, #4294967295
 80191ee:	e0c8      	b.n	8019382 <_svfiprintf_r+0x1c2>
 80191f0:	2340      	movs	r3, #64	; 0x40
 80191f2:	6163      	str	r3, [r4, #20]
 80191f4:	2300      	movs	r3, #0
 80191f6:	9309      	str	r3, [sp, #36]	; 0x24
 80191f8:	2320      	movs	r3, #32
 80191fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80191fe:	2330      	movs	r3, #48	; 0x30
 8019200:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019204:	9503      	str	r5, [sp, #12]
 8019206:	f04f 0b01 	mov.w	fp, #1
 801920a:	4637      	mov	r7, r6
 801920c:	463d      	mov	r5, r7
 801920e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019212:	b10b      	cbz	r3, 8019218 <_svfiprintf_r+0x58>
 8019214:	2b25      	cmp	r3, #37	; 0x25
 8019216:	d13e      	bne.n	8019296 <_svfiprintf_r+0xd6>
 8019218:	ebb7 0a06 	subs.w	sl, r7, r6
 801921c:	d00b      	beq.n	8019236 <_svfiprintf_r+0x76>
 801921e:	4653      	mov	r3, sl
 8019220:	4632      	mov	r2, r6
 8019222:	4621      	mov	r1, r4
 8019224:	4640      	mov	r0, r8
 8019226:	f7ff ff71 	bl	801910c <__ssputs_r>
 801922a:	3001      	adds	r0, #1
 801922c:	f000 80a4 	beq.w	8019378 <_svfiprintf_r+0x1b8>
 8019230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019232:	4453      	add	r3, sl
 8019234:	9309      	str	r3, [sp, #36]	; 0x24
 8019236:	783b      	ldrb	r3, [r7, #0]
 8019238:	2b00      	cmp	r3, #0
 801923a:	f000 809d 	beq.w	8019378 <_svfiprintf_r+0x1b8>
 801923e:	2300      	movs	r3, #0
 8019240:	f04f 32ff 	mov.w	r2, #4294967295
 8019244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019248:	9304      	str	r3, [sp, #16]
 801924a:	9307      	str	r3, [sp, #28]
 801924c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019250:	931a      	str	r3, [sp, #104]	; 0x68
 8019252:	462f      	mov	r7, r5
 8019254:	2205      	movs	r2, #5
 8019256:	f817 1b01 	ldrb.w	r1, [r7], #1
 801925a:	4850      	ldr	r0, [pc, #320]	; (801939c <_svfiprintf_r+0x1dc>)
 801925c:	f7e6 ffd8 	bl	8000210 <memchr>
 8019260:	9b04      	ldr	r3, [sp, #16]
 8019262:	b9d0      	cbnz	r0, 801929a <_svfiprintf_r+0xda>
 8019264:	06d9      	lsls	r1, r3, #27
 8019266:	bf44      	itt	mi
 8019268:	2220      	movmi	r2, #32
 801926a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801926e:	071a      	lsls	r2, r3, #28
 8019270:	bf44      	itt	mi
 8019272:	222b      	movmi	r2, #43	; 0x2b
 8019274:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019278:	782a      	ldrb	r2, [r5, #0]
 801927a:	2a2a      	cmp	r2, #42	; 0x2a
 801927c:	d015      	beq.n	80192aa <_svfiprintf_r+0xea>
 801927e:	9a07      	ldr	r2, [sp, #28]
 8019280:	462f      	mov	r7, r5
 8019282:	2000      	movs	r0, #0
 8019284:	250a      	movs	r5, #10
 8019286:	4639      	mov	r1, r7
 8019288:	f811 3b01 	ldrb.w	r3, [r1], #1
 801928c:	3b30      	subs	r3, #48	; 0x30
 801928e:	2b09      	cmp	r3, #9
 8019290:	d94d      	bls.n	801932e <_svfiprintf_r+0x16e>
 8019292:	b1b8      	cbz	r0, 80192c4 <_svfiprintf_r+0x104>
 8019294:	e00f      	b.n	80192b6 <_svfiprintf_r+0xf6>
 8019296:	462f      	mov	r7, r5
 8019298:	e7b8      	b.n	801920c <_svfiprintf_r+0x4c>
 801929a:	4a40      	ldr	r2, [pc, #256]	; (801939c <_svfiprintf_r+0x1dc>)
 801929c:	1a80      	subs	r0, r0, r2
 801929e:	fa0b f000 	lsl.w	r0, fp, r0
 80192a2:	4318      	orrs	r0, r3
 80192a4:	9004      	str	r0, [sp, #16]
 80192a6:	463d      	mov	r5, r7
 80192a8:	e7d3      	b.n	8019252 <_svfiprintf_r+0x92>
 80192aa:	9a03      	ldr	r2, [sp, #12]
 80192ac:	1d11      	adds	r1, r2, #4
 80192ae:	6812      	ldr	r2, [r2, #0]
 80192b0:	9103      	str	r1, [sp, #12]
 80192b2:	2a00      	cmp	r2, #0
 80192b4:	db01      	blt.n	80192ba <_svfiprintf_r+0xfa>
 80192b6:	9207      	str	r2, [sp, #28]
 80192b8:	e004      	b.n	80192c4 <_svfiprintf_r+0x104>
 80192ba:	4252      	negs	r2, r2
 80192bc:	f043 0302 	orr.w	r3, r3, #2
 80192c0:	9207      	str	r2, [sp, #28]
 80192c2:	9304      	str	r3, [sp, #16]
 80192c4:	783b      	ldrb	r3, [r7, #0]
 80192c6:	2b2e      	cmp	r3, #46	; 0x2e
 80192c8:	d10c      	bne.n	80192e4 <_svfiprintf_r+0x124>
 80192ca:	787b      	ldrb	r3, [r7, #1]
 80192cc:	2b2a      	cmp	r3, #42	; 0x2a
 80192ce:	d133      	bne.n	8019338 <_svfiprintf_r+0x178>
 80192d0:	9b03      	ldr	r3, [sp, #12]
 80192d2:	1d1a      	adds	r2, r3, #4
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	9203      	str	r2, [sp, #12]
 80192d8:	2b00      	cmp	r3, #0
 80192da:	bfb8      	it	lt
 80192dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80192e0:	3702      	adds	r7, #2
 80192e2:	9305      	str	r3, [sp, #20]
 80192e4:	4d2e      	ldr	r5, [pc, #184]	; (80193a0 <_svfiprintf_r+0x1e0>)
 80192e6:	7839      	ldrb	r1, [r7, #0]
 80192e8:	2203      	movs	r2, #3
 80192ea:	4628      	mov	r0, r5
 80192ec:	f7e6 ff90 	bl	8000210 <memchr>
 80192f0:	b138      	cbz	r0, 8019302 <_svfiprintf_r+0x142>
 80192f2:	2340      	movs	r3, #64	; 0x40
 80192f4:	1b40      	subs	r0, r0, r5
 80192f6:	fa03 f000 	lsl.w	r0, r3, r0
 80192fa:	9b04      	ldr	r3, [sp, #16]
 80192fc:	4303      	orrs	r3, r0
 80192fe:	3701      	adds	r7, #1
 8019300:	9304      	str	r3, [sp, #16]
 8019302:	7839      	ldrb	r1, [r7, #0]
 8019304:	4827      	ldr	r0, [pc, #156]	; (80193a4 <_svfiprintf_r+0x1e4>)
 8019306:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801930a:	2206      	movs	r2, #6
 801930c:	1c7e      	adds	r6, r7, #1
 801930e:	f7e6 ff7f 	bl	8000210 <memchr>
 8019312:	2800      	cmp	r0, #0
 8019314:	d038      	beq.n	8019388 <_svfiprintf_r+0x1c8>
 8019316:	4b24      	ldr	r3, [pc, #144]	; (80193a8 <_svfiprintf_r+0x1e8>)
 8019318:	bb13      	cbnz	r3, 8019360 <_svfiprintf_r+0x1a0>
 801931a:	9b03      	ldr	r3, [sp, #12]
 801931c:	3307      	adds	r3, #7
 801931e:	f023 0307 	bic.w	r3, r3, #7
 8019322:	3308      	adds	r3, #8
 8019324:	9303      	str	r3, [sp, #12]
 8019326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019328:	444b      	add	r3, r9
 801932a:	9309      	str	r3, [sp, #36]	; 0x24
 801932c:	e76d      	b.n	801920a <_svfiprintf_r+0x4a>
 801932e:	fb05 3202 	mla	r2, r5, r2, r3
 8019332:	2001      	movs	r0, #1
 8019334:	460f      	mov	r7, r1
 8019336:	e7a6      	b.n	8019286 <_svfiprintf_r+0xc6>
 8019338:	2300      	movs	r3, #0
 801933a:	3701      	adds	r7, #1
 801933c:	9305      	str	r3, [sp, #20]
 801933e:	4619      	mov	r1, r3
 8019340:	250a      	movs	r5, #10
 8019342:	4638      	mov	r0, r7
 8019344:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019348:	3a30      	subs	r2, #48	; 0x30
 801934a:	2a09      	cmp	r2, #9
 801934c:	d903      	bls.n	8019356 <_svfiprintf_r+0x196>
 801934e:	2b00      	cmp	r3, #0
 8019350:	d0c8      	beq.n	80192e4 <_svfiprintf_r+0x124>
 8019352:	9105      	str	r1, [sp, #20]
 8019354:	e7c6      	b.n	80192e4 <_svfiprintf_r+0x124>
 8019356:	fb05 2101 	mla	r1, r5, r1, r2
 801935a:	2301      	movs	r3, #1
 801935c:	4607      	mov	r7, r0
 801935e:	e7f0      	b.n	8019342 <_svfiprintf_r+0x182>
 8019360:	ab03      	add	r3, sp, #12
 8019362:	9300      	str	r3, [sp, #0]
 8019364:	4622      	mov	r2, r4
 8019366:	4b11      	ldr	r3, [pc, #68]	; (80193ac <_svfiprintf_r+0x1ec>)
 8019368:	a904      	add	r1, sp, #16
 801936a:	4640      	mov	r0, r8
 801936c:	f7fc fb60 	bl	8015a30 <_printf_float>
 8019370:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019374:	4681      	mov	r9, r0
 8019376:	d1d6      	bne.n	8019326 <_svfiprintf_r+0x166>
 8019378:	89a3      	ldrh	r3, [r4, #12]
 801937a:	065b      	lsls	r3, r3, #25
 801937c:	f53f af35 	bmi.w	80191ea <_svfiprintf_r+0x2a>
 8019380:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019382:	b01d      	add	sp, #116	; 0x74
 8019384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019388:	ab03      	add	r3, sp, #12
 801938a:	9300      	str	r3, [sp, #0]
 801938c:	4622      	mov	r2, r4
 801938e:	4b07      	ldr	r3, [pc, #28]	; (80193ac <_svfiprintf_r+0x1ec>)
 8019390:	a904      	add	r1, sp, #16
 8019392:	4640      	mov	r0, r8
 8019394:	f7fc fe02 	bl	8015f9c <_printf_i>
 8019398:	e7ea      	b.n	8019370 <_svfiprintf_r+0x1b0>
 801939a:	bf00      	nop
 801939c:	0801a51c 	.word	0x0801a51c
 80193a0:	0801a522 	.word	0x0801a522
 80193a4:	0801a526 	.word	0x0801a526
 80193a8:	08015a31 	.word	0x08015a31
 80193ac:	0801910d 	.word	0x0801910d

080193b0 <_sungetc_r>:
 80193b0:	b538      	push	{r3, r4, r5, lr}
 80193b2:	1c4b      	adds	r3, r1, #1
 80193b4:	4614      	mov	r4, r2
 80193b6:	d103      	bne.n	80193c0 <_sungetc_r+0x10>
 80193b8:	f04f 35ff 	mov.w	r5, #4294967295
 80193bc:	4628      	mov	r0, r5
 80193be:	bd38      	pop	{r3, r4, r5, pc}
 80193c0:	8993      	ldrh	r3, [r2, #12]
 80193c2:	f023 0320 	bic.w	r3, r3, #32
 80193c6:	8193      	strh	r3, [r2, #12]
 80193c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80193ca:	6852      	ldr	r2, [r2, #4]
 80193cc:	b2cd      	uxtb	r5, r1
 80193ce:	b18b      	cbz	r3, 80193f4 <_sungetc_r+0x44>
 80193d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80193d2:	4293      	cmp	r3, r2
 80193d4:	dd08      	ble.n	80193e8 <_sungetc_r+0x38>
 80193d6:	6823      	ldr	r3, [r4, #0]
 80193d8:	1e5a      	subs	r2, r3, #1
 80193da:	6022      	str	r2, [r4, #0]
 80193dc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80193e0:	6863      	ldr	r3, [r4, #4]
 80193e2:	3301      	adds	r3, #1
 80193e4:	6063      	str	r3, [r4, #4]
 80193e6:	e7e9      	b.n	80193bc <_sungetc_r+0xc>
 80193e8:	4621      	mov	r1, r4
 80193ea:	f000 fbc3 	bl	8019b74 <__submore>
 80193ee:	2800      	cmp	r0, #0
 80193f0:	d0f1      	beq.n	80193d6 <_sungetc_r+0x26>
 80193f2:	e7e1      	b.n	80193b8 <_sungetc_r+0x8>
 80193f4:	6921      	ldr	r1, [r4, #16]
 80193f6:	6823      	ldr	r3, [r4, #0]
 80193f8:	b151      	cbz	r1, 8019410 <_sungetc_r+0x60>
 80193fa:	4299      	cmp	r1, r3
 80193fc:	d208      	bcs.n	8019410 <_sungetc_r+0x60>
 80193fe:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8019402:	42a9      	cmp	r1, r5
 8019404:	d104      	bne.n	8019410 <_sungetc_r+0x60>
 8019406:	3b01      	subs	r3, #1
 8019408:	3201      	adds	r2, #1
 801940a:	6023      	str	r3, [r4, #0]
 801940c:	6062      	str	r2, [r4, #4]
 801940e:	e7d5      	b.n	80193bc <_sungetc_r+0xc>
 8019410:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8019414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019418:	6363      	str	r3, [r4, #52]	; 0x34
 801941a:	2303      	movs	r3, #3
 801941c:	63a3      	str	r3, [r4, #56]	; 0x38
 801941e:	4623      	mov	r3, r4
 8019420:	f803 5f46 	strb.w	r5, [r3, #70]!
 8019424:	6023      	str	r3, [r4, #0]
 8019426:	2301      	movs	r3, #1
 8019428:	e7dc      	b.n	80193e4 <_sungetc_r+0x34>

0801942a <__ssrefill_r>:
 801942a:	b510      	push	{r4, lr}
 801942c:	460c      	mov	r4, r1
 801942e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019430:	b169      	cbz	r1, 801944e <__ssrefill_r+0x24>
 8019432:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019436:	4299      	cmp	r1, r3
 8019438:	d001      	beq.n	801943e <__ssrefill_r+0x14>
 801943a:	f7ff fdbf 	bl	8018fbc <_free_r>
 801943e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019440:	6063      	str	r3, [r4, #4]
 8019442:	2000      	movs	r0, #0
 8019444:	6360      	str	r0, [r4, #52]	; 0x34
 8019446:	b113      	cbz	r3, 801944e <__ssrefill_r+0x24>
 8019448:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801944a:	6023      	str	r3, [r4, #0]
 801944c:	bd10      	pop	{r4, pc}
 801944e:	6923      	ldr	r3, [r4, #16]
 8019450:	6023      	str	r3, [r4, #0]
 8019452:	2300      	movs	r3, #0
 8019454:	6063      	str	r3, [r4, #4]
 8019456:	89a3      	ldrh	r3, [r4, #12]
 8019458:	f043 0320 	orr.w	r3, r3, #32
 801945c:	81a3      	strh	r3, [r4, #12]
 801945e:	f04f 30ff 	mov.w	r0, #4294967295
 8019462:	e7f3      	b.n	801944c <__ssrefill_r+0x22>

08019464 <__ssvfiscanf_r>:
 8019464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019468:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801946c:	460c      	mov	r4, r1
 801946e:	2100      	movs	r1, #0
 8019470:	9144      	str	r1, [sp, #272]	; 0x110
 8019472:	9145      	str	r1, [sp, #276]	; 0x114
 8019474:	499f      	ldr	r1, [pc, #636]	; (80196f4 <__ssvfiscanf_r+0x290>)
 8019476:	91a0      	str	r1, [sp, #640]	; 0x280
 8019478:	f10d 0804 	add.w	r8, sp, #4
 801947c:	499e      	ldr	r1, [pc, #632]	; (80196f8 <__ssvfiscanf_r+0x294>)
 801947e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80196fc <__ssvfiscanf_r+0x298>
 8019482:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019486:	4606      	mov	r6, r0
 8019488:	4692      	mov	sl, r2
 801948a:	91a1      	str	r1, [sp, #644]	; 0x284
 801948c:	9300      	str	r3, [sp, #0]
 801948e:	270a      	movs	r7, #10
 8019490:	f89a 3000 	ldrb.w	r3, [sl]
 8019494:	2b00      	cmp	r3, #0
 8019496:	f000 812a 	beq.w	80196ee <__ssvfiscanf_r+0x28a>
 801949a:	4655      	mov	r5, sl
 801949c:	f7ff f93e 	bl	801871c <__locale_ctype_ptr>
 80194a0:	f815 bb01 	ldrb.w	fp, [r5], #1
 80194a4:	4458      	add	r0, fp
 80194a6:	7843      	ldrb	r3, [r0, #1]
 80194a8:	f013 0308 	ands.w	r3, r3, #8
 80194ac:	d01c      	beq.n	80194e8 <__ssvfiscanf_r+0x84>
 80194ae:	6863      	ldr	r3, [r4, #4]
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	dd12      	ble.n	80194da <__ssvfiscanf_r+0x76>
 80194b4:	f7ff f932 	bl	801871c <__locale_ctype_ptr>
 80194b8:	6823      	ldr	r3, [r4, #0]
 80194ba:	781a      	ldrb	r2, [r3, #0]
 80194bc:	4410      	add	r0, r2
 80194be:	7842      	ldrb	r2, [r0, #1]
 80194c0:	0712      	lsls	r2, r2, #28
 80194c2:	d401      	bmi.n	80194c8 <__ssvfiscanf_r+0x64>
 80194c4:	46aa      	mov	sl, r5
 80194c6:	e7e3      	b.n	8019490 <__ssvfiscanf_r+0x2c>
 80194c8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80194ca:	3201      	adds	r2, #1
 80194cc:	9245      	str	r2, [sp, #276]	; 0x114
 80194ce:	6862      	ldr	r2, [r4, #4]
 80194d0:	3301      	adds	r3, #1
 80194d2:	3a01      	subs	r2, #1
 80194d4:	6062      	str	r2, [r4, #4]
 80194d6:	6023      	str	r3, [r4, #0]
 80194d8:	e7e9      	b.n	80194ae <__ssvfiscanf_r+0x4a>
 80194da:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80194dc:	4621      	mov	r1, r4
 80194de:	4630      	mov	r0, r6
 80194e0:	4798      	blx	r3
 80194e2:	2800      	cmp	r0, #0
 80194e4:	d0e6      	beq.n	80194b4 <__ssvfiscanf_r+0x50>
 80194e6:	e7ed      	b.n	80194c4 <__ssvfiscanf_r+0x60>
 80194e8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80194ec:	f040 8082 	bne.w	80195f4 <__ssvfiscanf_r+0x190>
 80194f0:	9343      	str	r3, [sp, #268]	; 0x10c
 80194f2:	9341      	str	r3, [sp, #260]	; 0x104
 80194f4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80194f8:	2b2a      	cmp	r3, #42	; 0x2a
 80194fa:	d103      	bne.n	8019504 <__ssvfiscanf_r+0xa0>
 80194fc:	2310      	movs	r3, #16
 80194fe:	9341      	str	r3, [sp, #260]	; 0x104
 8019500:	f10a 0502 	add.w	r5, sl, #2
 8019504:	46aa      	mov	sl, r5
 8019506:	f815 1b01 	ldrb.w	r1, [r5], #1
 801950a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801950e:	2a09      	cmp	r2, #9
 8019510:	d922      	bls.n	8019558 <__ssvfiscanf_r+0xf4>
 8019512:	2203      	movs	r2, #3
 8019514:	4879      	ldr	r0, [pc, #484]	; (80196fc <__ssvfiscanf_r+0x298>)
 8019516:	f7e6 fe7b 	bl	8000210 <memchr>
 801951a:	b138      	cbz	r0, 801952c <__ssvfiscanf_r+0xc8>
 801951c:	eba0 0309 	sub.w	r3, r0, r9
 8019520:	2001      	movs	r0, #1
 8019522:	4098      	lsls	r0, r3
 8019524:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019526:	4318      	orrs	r0, r3
 8019528:	9041      	str	r0, [sp, #260]	; 0x104
 801952a:	46aa      	mov	sl, r5
 801952c:	f89a 3000 	ldrb.w	r3, [sl]
 8019530:	2b67      	cmp	r3, #103	; 0x67
 8019532:	f10a 0501 	add.w	r5, sl, #1
 8019536:	d82b      	bhi.n	8019590 <__ssvfiscanf_r+0x12c>
 8019538:	2b65      	cmp	r3, #101	; 0x65
 801953a:	f080 809f 	bcs.w	801967c <__ssvfiscanf_r+0x218>
 801953e:	2b47      	cmp	r3, #71	; 0x47
 8019540:	d810      	bhi.n	8019564 <__ssvfiscanf_r+0x100>
 8019542:	2b45      	cmp	r3, #69	; 0x45
 8019544:	f080 809a 	bcs.w	801967c <__ssvfiscanf_r+0x218>
 8019548:	2b00      	cmp	r3, #0
 801954a:	d06c      	beq.n	8019626 <__ssvfiscanf_r+0x1c2>
 801954c:	2b25      	cmp	r3, #37	; 0x25
 801954e:	d051      	beq.n	80195f4 <__ssvfiscanf_r+0x190>
 8019550:	2303      	movs	r3, #3
 8019552:	9347      	str	r3, [sp, #284]	; 0x11c
 8019554:	9742      	str	r7, [sp, #264]	; 0x108
 8019556:	e027      	b.n	80195a8 <__ssvfiscanf_r+0x144>
 8019558:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801955a:	fb07 1303 	mla	r3, r7, r3, r1
 801955e:	3b30      	subs	r3, #48	; 0x30
 8019560:	9343      	str	r3, [sp, #268]	; 0x10c
 8019562:	e7cf      	b.n	8019504 <__ssvfiscanf_r+0xa0>
 8019564:	2b5b      	cmp	r3, #91	; 0x5b
 8019566:	d06a      	beq.n	801963e <__ssvfiscanf_r+0x1da>
 8019568:	d80c      	bhi.n	8019584 <__ssvfiscanf_r+0x120>
 801956a:	2b58      	cmp	r3, #88	; 0x58
 801956c:	d1f0      	bne.n	8019550 <__ssvfiscanf_r+0xec>
 801956e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019574:	9241      	str	r2, [sp, #260]	; 0x104
 8019576:	2210      	movs	r2, #16
 8019578:	9242      	str	r2, [sp, #264]	; 0x108
 801957a:	2b6e      	cmp	r3, #110	; 0x6e
 801957c:	bf8c      	ite	hi
 801957e:	2304      	movhi	r3, #4
 8019580:	2303      	movls	r3, #3
 8019582:	e010      	b.n	80195a6 <__ssvfiscanf_r+0x142>
 8019584:	2b63      	cmp	r3, #99	; 0x63
 8019586:	d065      	beq.n	8019654 <__ssvfiscanf_r+0x1f0>
 8019588:	2b64      	cmp	r3, #100	; 0x64
 801958a:	d1e1      	bne.n	8019550 <__ssvfiscanf_r+0xec>
 801958c:	9742      	str	r7, [sp, #264]	; 0x108
 801958e:	e7f4      	b.n	801957a <__ssvfiscanf_r+0x116>
 8019590:	2b70      	cmp	r3, #112	; 0x70
 8019592:	d04b      	beq.n	801962c <__ssvfiscanf_r+0x1c8>
 8019594:	d826      	bhi.n	80195e4 <__ssvfiscanf_r+0x180>
 8019596:	2b6e      	cmp	r3, #110	; 0x6e
 8019598:	d062      	beq.n	8019660 <__ssvfiscanf_r+0x1fc>
 801959a:	d84c      	bhi.n	8019636 <__ssvfiscanf_r+0x1d2>
 801959c:	2b69      	cmp	r3, #105	; 0x69
 801959e:	d1d7      	bne.n	8019550 <__ssvfiscanf_r+0xec>
 80195a0:	2300      	movs	r3, #0
 80195a2:	9342      	str	r3, [sp, #264]	; 0x108
 80195a4:	2303      	movs	r3, #3
 80195a6:	9347      	str	r3, [sp, #284]	; 0x11c
 80195a8:	6863      	ldr	r3, [r4, #4]
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	dd68      	ble.n	8019680 <__ssvfiscanf_r+0x21c>
 80195ae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80195b0:	0659      	lsls	r1, r3, #25
 80195b2:	d407      	bmi.n	80195c4 <__ssvfiscanf_r+0x160>
 80195b4:	f7ff f8b2 	bl	801871c <__locale_ctype_ptr>
 80195b8:	6823      	ldr	r3, [r4, #0]
 80195ba:	781a      	ldrb	r2, [r3, #0]
 80195bc:	4410      	add	r0, r2
 80195be:	7842      	ldrb	r2, [r0, #1]
 80195c0:	0712      	lsls	r2, r2, #28
 80195c2:	d464      	bmi.n	801968e <__ssvfiscanf_r+0x22a>
 80195c4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80195c6:	2b02      	cmp	r3, #2
 80195c8:	dc73      	bgt.n	80196b2 <__ssvfiscanf_r+0x24e>
 80195ca:	466b      	mov	r3, sp
 80195cc:	4622      	mov	r2, r4
 80195ce:	a941      	add	r1, sp, #260	; 0x104
 80195d0:	4630      	mov	r0, r6
 80195d2:	f000 f897 	bl	8019704 <_scanf_chars>
 80195d6:	2801      	cmp	r0, #1
 80195d8:	f000 8089 	beq.w	80196ee <__ssvfiscanf_r+0x28a>
 80195dc:	2802      	cmp	r0, #2
 80195de:	f47f af71 	bne.w	80194c4 <__ssvfiscanf_r+0x60>
 80195e2:	e01d      	b.n	8019620 <__ssvfiscanf_r+0x1bc>
 80195e4:	2b75      	cmp	r3, #117	; 0x75
 80195e6:	d0d1      	beq.n	801958c <__ssvfiscanf_r+0x128>
 80195e8:	2b78      	cmp	r3, #120	; 0x78
 80195ea:	d0c0      	beq.n	801956e <__ssvfiscanf_r+0x10a>
 80195ec:	2b73      	cmp	r3, #115	; 0x73
 80195ee:	d1af      	bne.n	8019550 <__ssvfiscanf_r+0xec>
 80195f0:	2302      	movs	r3, #2
 80195f2:	e7d8      	b.n	80195a6 <__ssvfiscanf_r+0x142>
 80195f4:	6863      	ldr	r3, [r4, #4]
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	dd0c      	ble.n	8019614 <__ssvfiscanf_r+0x1b0>
 80195fa:	6823      	ldr	r3, [r4, #0]
 80195fc:	781a      	ldrb	r2, [r3, #0]
 80195fe:	455a      	cmp	r2, fp
 8019600:	d175      	bne.n	80196ee <__ssvfiscanf_r+0x28a>
 8019602:	3301      	adds	r3, #1
 8019604:	6862      	ldr	r2, [r4, #4]
 8019606:	6023      	str	r3, [r4, #0]
 8019608:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801960a:	3a01      	subs	r2, #1
 801960c:	3301      	adds	r3, #1
 801960e:	6062      	str	r2, [r4, #4]
 8019610:	9345      	str	r3, [sp, #276]	; 0x114
 8019612:	e757      	b.n	80194c4 <__ssvfiscanf_r+0x60>
 8019614:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019616:	4621      	mov	r1, r4
 8019618:	4630      	mov	r0, r6
 801961a:	4798      	blx	r3
 801961c:	2800      	cmp	r0, #0
 801961e:	d0ec      	beq.n	80195fa <__ssvfiscanf_r+0x196>
 8019620:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019622:	2800      	cmp	r0, #0
 8019624:	d159      	bne.n	80196da <__ssvfiscanf_r+0x276>
 8019626:	f04f 30ff 	mov.w	r0, #4294967295
 801962a:	e05c      	b.n	80196e6 <__ssvfiscanf_r+0x282>
 801962c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801962e:	f042 0220 	orr.w	r2, r2, #32
 8019632:	9241      	str	r2, [sp, #260]	; 0x104
 8019634:	e79b      	b.n	801956e <__ssvfiscanf_r+0x10a>
 8019636:	2308      	movs	r3, #8
 8019638:	9342      	str	r3, [sp, #264]	; 0x108
 801963a:	2304      	movs	r3, #4
 801963c:	e7b3      	b.n	80195a6 <__ssvfiscanf_r+0x142>
 801963e:	4629      	mov	r1, r5
 8019640:	4640      	mov	r0, r8
 8019642:	f000 f9c7 	bl	80199d4 <__sccl>
 8019646:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801964c:	9341      	str	r3, [sp, #260]	; 0x104
 801964e:	4605      	mov	r5, r0
 8019650:	2301      	movs	r3, #1
 8019652:	e7a8      	b.n	80195a6 <__ssvfiscanf_r+0x142>
 8019654:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801965a:	9341      	str	r3, [sp, #260]	; 0x104
 801965c:	2300      	movs	r3, #0
 801965e:	e7a2      	b.n	80195a6 <__ssvfiscanf_r+0x142>
 8019660:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019662:	06c3      	lsls	r3, r0, #27
 8019664:	f53f af2e 	bmi.w	80194c4 <__ssvfiscanf_r+0x60>
 8019668:	9b00      	ldr	r3, [sp, #0]
 801966a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801966c:	1d19      	adds	r1, r3, #4
 801966e:	9100      	str	r1, [sp, #0]
 8019670:	681b      	ldr	r3, [r3, #0]
 8019672:	07c0      	lsls	r0, r0, #31
 8019674:	bf4c      	ite	mi
 8019676:	801a      	strhmi	r2, [r3, #0]
 8019678:	601a      	strpl	r2, [r3, #0]
 801967a:	e723      	b.n	80194c4 <__ssvfiscanf_r+0x60>
 801967c:	2305      	movs	r3, #5
 801967e:	e792      	b.n	80195a6 <__ssvfiscanf_r+0x142>
 8019680:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019682:	4621      	mov	r1, r4
 8019684:	4630      	mov	r0, r6
 8019686:	4798      	blx	r3
 8019688:	2800      	cmp	r0, #0
 801968a:	d090      	beq.n	80195ae <__ssvfiscanf_r+0x14a>
 801968c:	e7c8      	b.n	8019620 <__ssvfiscanf_r+0x1bc>
 801968e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019690:	3201      	adds	r2, #1
 8019692:	9245      	str	r2, [sp, #276]	; 0x114
 8019694:	6862      	ldr	r2, [r4, #4]
 8019696:	3a01      	subs	r2, #1
 8019698:	2a00      	cmp	r2, #0
 801969a:	6062      	str	r2, [r4, #4]
 801969c:	dd02      	ble.n	80196a4 <__ssvfiscanf_r+0x240>
 801969e:	3301      	adds	r3, #1
 80196a0:	6023      	str	r3, [r4, #0]
 80196a2:	e787      	b.n	80195b4 <__ssvfiscanf_r+0x150>
 80196a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80196a6:	4621      	mov	r1, r4
 80196a8:	4630      	mov	r0, r6
 80196aa:	4798      	blx	r3
 80196ac:	2800      	cmp	r0, #0
 80196ae:	d081      	beq.n	80195b4 <__ssvfiscanf_r+0x150>
 80196b0:	e7b6      	b.n	8019620 <__ssvfiscanf_r+0x1bc>
 80196b2:	2b04      	cmp	r3, #4
 80196b4:	dc06      	bgt.n	80196c4 <__ssvfiscanf_r+0x260>
 80196b6:	466b      	mov	r3, sp
 80196b8:	4622      	mov	r2, r4
 80196ba:	a941      	add	r1, sp, #260	; 0x104
 80196bc:	4630      	mov	r0, r6
 80196be:	f000 f885 	bl	80197cc <_scanf_i>
 80196c2:	e788      	b.n	80195d6 <__ssvfiscanf_r+0x172>
 80196c4:	4b0e      	ldr	r3, [pc, #56]	; (8019700 <__ssvfiscanf_r+0x29c>)
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	f43f aefc 	beq.w	80194c4 <__ssvfiscanf_r+0x60>
 80196cc:	466b      	mov	r3, sp
 80196ce:	4622      	mov	r2, r4
 80196d0:	a941      	add	r1, sp, #260	; 0x104
 80196d2:	4630      	mov	r0, r6
 80196d4:	f7fc fd74 	bl	80161c0 <_scanf_float>
 80196d8:	e77d      	b.n	80195d6 <__ssvfiscanf_r+0x172>
 80196da:	89a3      	ldrh	r3, [r4, #12]
 80196dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80196e0:	bf18      	it	ne
 80196e2:	f04f 30ff 	movne.w	r0, #4294967295
 80196e6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80196ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196ee:	9844      	ldr	r0, [sp, #272]	; 0x110
 80196f0:	e7f9      	b.n	80196e6 <__ssvfiscanf_r+0x282>
 80196f2:	bf00      	nop
 80196f4:	080193b1 	.word	0x080193b1
 80196f8:	0801942b 	.word	0x0801942b
 80196fc:	0801a522 	.word	0x0801a522
 8019700:	080161c1 	.word	0x080161c1

08019704 <_scanf_chars>:
 8019704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019708:	4615      	mov	r5, r2
 801970a:	688a      	ldr	r2, [r1, #8]
 801970c:	4680      	mov	r8, r0
 801970e:	460c      	mov	r4, r1
 8019710:	b932      	cbnz	r2, 8019720 <_scanf_chars+0x1c>
 8019712:	698a      	ldr	r2, [r1, #24]
 8019714:	2a00      	cmp	r2, #0
 8019716:	bf14      	ite	ne
 8019718:	f04f 32ff 	movne.w	r2, #4294967295
 801971c:	2201      	moveq	r2, #1
 801971e:	608a      	str	r2, [r1, #8]
 8019720:	6822      	ldr	r2, [r4, #0]
 8019722:	06d1      	lsls	r1, r2, #27
 8019724:	bf5f      	itttt	pl
 8019726:	681a      	ldrpl	r2, [r3, #0]
 8019728:	1d11      	addpl	r1, r2, #4
 801972a:	6019      	strpl	r1, [r3, #0]
 801972c:	6817      	ldrpl	r7, [r2, #0]
 801972e:	2600      	movs	r6, #0
 8019730:	69a3      	ldr	r3, [r4, #24]
 8019732:	b1db      	cbz	r3, 801976c <_scanf_chars+0x68>
 8019734:	2b01      	cmp	r3, #1
 8019736:	d107      	bne.n	8019748 <_scanf_chars+0x44>
 8019738:	682b      	ldr	r3, [r5, #0]
 801973a:	6962      	ldr	r2, [r4, #20]
 801973c:	781b      	ldrb	r3, [r3, #0]
 801973e:	5cd3      	ldrb	r3, [r2, r3]
 8019740:	b9a3      	cbnz	r3, 801976c <_scanf_chars+0x68>
 8019742:	2e00      	cmp	r6, #0
 8019744:	d132      	bne.n	80197ac <_scanf_chars+0xa8>
 8019746:	e006      	b.n	8019756 <_scanf_chars+0x52>
 8019748:	2b02      	cmp	r3, #2
 801974a:	d007      	beq.n	801975c <_scanf_chars+0x58>
 801974c:	2e00      	cmp	r6, #0
 801974e:	d12d      	bne.n	80197ac <_scanf_chars+0xa8>
 8019750:	69a3      	ldr	r3, [r4, #24]
 8019752:	2b01      	cmp	r3, #1
 8019754:	d12a      	bne.n	80197ac <_scanf_chars+0xa8>
 8019756:	2001      	movs	r0, #1
 8019758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801975c:	f7fe ffde 	bl	801871c <__locale_ctype_ptr>
 8019760:	682b      	ldr	r3, [r5, #0]
 8019762:	781b      	ldrb	r3, [r3, #0]
 8019764:	4418      	add	r0, r3
 8019766:	7843      	ldrb	r3, [r0, #1]
 8019768:	071b      	lsls	r3, r3, #28
 801976a:	d4ef      	bmi.n	801974c <_scanf_chars+0x48>
 801976c:	6823      	ldr	r3, [r4, #0]
 801976e:	06da      	lsls	r2, r3, #27
 8019770:	bf5e      	ittt	pl
 8019772:	682b      	ldrpl	r3, [r5, #0]
 8019774:	781b      	ldrbpl	r3, [r3, #0]
 8019776:	703b      	strbpl	r3, [r7, #0]
 8019778:	682a      	ldr	r2, [r5, #0]
 801977a:	686b      	ldr	r3, [r5, #4]
 801977c:	f102 0201 	add.w	r2, r2, #1
 8019780:	602a      	str	r2, [r5, #0]
 8019782:	68a2      	ldr	r2, [r4, #8]
 8019784:	f103 33ff 	add.w	r3, r3, #4294967295
 8019788:	f102 32ff 	add.w	r2, r2, #4294967295
 801978c:	606b      	str	r3, [r5, #4]
 801978e:	f106 0601 	add.w	r6, r6, #1
 8019792:	bf58      	it	pl
 8019794:	3701      	addpl	r7, #1
 8019796:	60a2      	str	r2, [r4, #8]
 8019798:	b142      	cbz	r2, 80197ac <_scanf_chars+0xa8>
 801979a:	2b00      	cmp	r3, #0
 801979c:	dcc8      	bgt.n	8019730 <_scanf_chars+0x2c>
 801979e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80197a2:	4629      	mov	r1, r5
 80197a4:	4640      	mov	r0, r8
 80197a6:	4798      	blx	r3
 80197a8:	2800      	cmp	r0, #0
 80197aa:	d0c1      	beq.n	8019730 <_scanf_chars+0x2c>
 80197ac:	6823      	ldr	r3, [r4, #0]
 80197ae:	f013 0310 	ands.w	r3, r3, #16
 80197b2:	d105      	bne.n	80197c0 <_scanf_chars+0xbc>
 80197b4:	68e2      	ldr	r2, [r4, #12]
 80197b6:	3201      	adds	r2, #1
 80197b8:	60e2      	str	r2, [r4, #12]
 80197ba:	69a2      	ldr	r2, [r4, #24]
 80197bc:	b102      	cbz	r2, 80197c0 <_scanf_chars+0xbc>
 80197be:	703b      	strb	r3, [r7, #0]
 80197c0:	6923      	ldr	r3, [r4, #16]
 80197c2:	441e      	add	r6, r3
 80197c4:	6126      	str	r6, [r4, #16]
 80197c6:	2000      	movs	r0, #0
 80197c8:	e7c6      	b.n	8019758 <_scanf_chars+0x54>
	...

080197cc <_scanf_i>:
 80197cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197d0:	469a      	mov	sl, r3
 80197d2:	4b74      	ldr	r3, [pc, #464]	; (80199a4 <_scanf_i+0x1d8>)
 80197d4:	460c      	mov	r4, r1
 80197d6:	4683      	mov	fp, r0
 80197d8:	4616      	mov	r6, r2
 80197da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80197de:	b087      	sub	sp, #28
 80197e0:	ab03      	add	r3, sp, #12
 80197e2:	68a7      	ldr	r7, [r4, #8]
 80197e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80197e8:	4b6f      	ldr	r3, [pc, #444]	; (80199a8 <_scanf_i+0x1dc>)
 80197ea:	69a1      	ldr	r1, [r4, #24]
 80197ec:	4a6f      	ldr	r2, [pc, #444]	; (80199ac <_scanf_i+0x1e0>)
 80197ee:	2903      	cmp	r1, #3
 80197f0:	bf08      	it	eq
 80197f2:	461a      	moveq	r2, r3
 80197f4:	1e7b      	subs	r3, r7, #1
 80197f6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80197fa:	bf84      	itt	hi
 80197fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019800:	60a3      	strhi	r3, [r4, #8]
 8019802:	6823      	ldr	r3, [r4, #0]
 8019804:	9200      	str	r2, [sp, #0]
 8019806:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801980a:	bf88      	it	hi
 801980c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019810:	f104 091c 	add.w	r9, r4, #28
 8019814:	6023      	str	r3, [r4, #0]
 8019816:	bf8c      	ite	hi
 8019818:	197f      	addhi	r7, r7, r5
 801981a:	2700      	movls	r7, #0
 801981c:	464b      	mov	r3, r9
 801981e:	f04f 0800 	mov.w	r8, #0
 8019822:	9301      	str	r3, [sp, #4]
 8019824:	6831      	ldr	r1, [r6, #0]
 8019826:	ab03      	add	r3, sp, #12
 8019828:	2202      	movs	r2, #2
 801982a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801982e:	7809      	ldrb	r1, [r1, #0]
 8019830:	f7e6 fcee 	bl	8000210 <memchr>
 8019834:	9b01      	ldr	r3, [sp, #4]
 8019836:	b330      	cbz	r0, 8019886 <_scanf_i+0xba>
 8019838:	f1b8 0f01 	cmp.w	r8, #1
 801983c:	d15a      	bne.n	80198f4 <_scanf_i+0x128>
 801983e:	6862      	ldr	r2, [r4, #4]
 8019840:	b92a      	cbnz	r2, 801984e <_scanf_i+0x82>
 8019842:	6822      	ldr	r2, [r4, #0]
 8019844:	2108      	movs	r1, #8
 8019846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801984a:	6061      	str	r1, [r4, #4]
 801984c:	6022      	str	r2, [r4, #0]
 801984e:	6822      	ldr	r2, [r4, #0]
 8019850:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019854:	6022      	str	r2, [r4, #0]
 8019856:	68a2      	ldr	r2, [r4, #8]
 8019858:	1e51      	subs	r1, r2, #1
 801985a:	60a1      	str	r1, [r4, #8]
 801985c:	b19a      	cbz	r2, 8019886 <_scanf_i+0xba>
 801985e:	6832      	ldr	r2, [r6, #0]
 8019860:	1c51      	adds	r1, r2, #1
 8019862:	6031      	str	r1, [r6, #0]
 8019864:	7812      	ldrb	r2, [r2, #0]
 8019866:	701a      	strb	r2, [r3, #0]
 8019868:	1c5d      	adds	r5, r3, #1
 801986a:	6873      	ldr	r3, [r6, #4]
 801986c:	3b01      	subs	r3, #1
 801986e:	2b00      	cmp	r3, #0
 8019870:	6073      	str	r3, [r6, #4]
 8019872:	dc07      	bgt.n	8019884 <_scanf_i+0xb8>
 8019874:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019878:	4631      	mov	r1, r6
 801987a:	4658      	mov	r0, fp
 801987c:	4798      	blx	r3
 801987e:	2800      	cmp	r0, #0
 8019880:	f040 8086 	bne.w	8019990 <_scanf_i+0x1c4>
 8019884:	462b      	mov	r3, r5
 8019886:	f108 0801 	add.w	r8, r8, #1
 801988a:	f1b8 0f03 	cmp.w	r8, #3
 801988e:	d1c8      	bne.n	8019822 <_scanf_i+0x56>
 8019890:	6862      	ldr	r2, [r4, #4]
 8019892:	b90a      	cbnz	r2, 8019898 <_scanf_i+0xcc>
 8019894:	220a      	movs	r2, #10
 8019896:	6062      	str	r2, [r4, #4]
 8019898:	6862      	ldr	r2, [r4, #4]
 801989a:	4945      	ldr	r1, [pc, #276]	; (80199b0 <_scanf_i+0x1e4>)
 801989c:	6960      	ldr	r0, [r4, #20]
 801989e:	9301      	str	r3, [sp, #4]
 80198a0:	1a89      	subs	r1, r1, r2
 80198a2:	f000 f897 	bl	80199d4 <__sccl>
 80198a6:	9b01      	ldr	r3, [sp, #4]
 80198a8:	f04f 0800 	mov.w	r8, #0
 80198ac:	461d      	mov	r5, r3
 80198ae:	68a3      	ldr	r3, [r4, #8]
 80198b0:	6822      	ldr	r2, [r4, #0]
 80198b2:	2b00      	cmp	r3, #0
 80198b4:	d03a      	beq.n	801992c <_scanf_i+0x160>
 80198b6:	6831      	ldr	r1, [r6, #0]
 80198b8:	6960      	ldr	r0, [r4, #20]
 80198ba:	f891 c000 	ldrb.w	ip, [r1]
 80198be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80198c2:	2800      	cmp	r0, #0
 80198c4:	d032      	beq.n	801992c <_scanf_i+0x160>
 80198c6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80198ca:	d121      	bne.n	8019910 <_scanf_i+0x144>
 80198cc:	0510      	lsls	r0, r2, #20
 80198ce:	d51f      	bpl.n	8019910 <_scanf_i+0x144>
 80198d0:	f108 0801 	add.w	r8, r8, #1
 80198d4:	b117      	cbz	r7, 80198dc <_scanf_i+0x110>
 80198d6:	3301      	adds	r3, #1
 80198d8:	3f01      	subs	r7, #1
 80198da:	60a3      	str	r3, [r4, #8]
 80198dc:	6873      	ldr	r3, [r6, #4]
 80198de:	3b01      	subs	r3, #1
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	6073      	str	r3, [r6, #4]
 80198e4:	dd1b      	ble.n	801991e <_scanf_i+0x152>
 80198e6:	6833      	ldr	r3, [r6, #0]
 80198e8:	3301      	adds	r3, #1
 80198ea:	6033      	str	r3, [r6, #0]
 80198ec:	68a3      	ldr	r3, [r4, #8]
 80198ee:	3b01      	subs	r3, #1
 80198f0:	60a3      	str	r3, [r4, #8]
 80198f2:	e7dc      	b.n	80198ae <_scanf_i+0xe2>
 80198f4:	f1b8 0f02 	cmp.w	r8, #2
 80198f8:	d1ad      	bne.n	8019856 <_scanf_i+0x8a>
 80198fa:	6822      	ldr	r2, [r4, #0]
 80198fc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019900:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019904:	d1bf      	bne.n	8019886 <_scanf_i+0xba>
 8019906:	2110      	movs	r1, #16
 8019908:	6061      	str	r1, [r4, #4]
 801990a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801990e:	e7a1      	b.n	8019854 <_scanf_i+0x88>
 8019910:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019914:	6022      	str	r2, [r4, #0]
 8019916:	780b      	ldrb	r3, [r1, #0]
 8019918:	702b      	strb	r3, [r5, #0]
 801991a:	3501      	adds	r5, #1
 801991c:	e7de      	b.n	80198dc <_scanf_i+0x110>
 801991e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019922:	4631      	mov	r1, r6
 8019924:	4658      	mov	r0, fp
 8019926:	4798      	blx	r3
 8019928:	2800      	cmp	r0, #0
 801992a:	d0df      	beq.n	80198ec <_scanf_i+0x120>
 801992c:	6823      	ldr	r3, [r4, #0]
 801992e:	05d9      	lsls	r1, r3, #23
 8019930:	d50c      	bpl.n	801994c <_scanf_i+0x180>
 8019932:	454d      	cmp	r5, r9
 8019934:	d908      	bls.n	8019948 <_scanf_i+0x17c>
 8019936:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801993a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801993e:	4632      	mov	r2, r6
 8019940:	4658      	mov	r0, fp
 8019942:	4798      	blx	r3
 8019944:	1e6f      	subs	r7, r5, #1
 8019946:	463d      	mov	r5, r7
 8019948:	454d      	cmp	r5, r9
 801994a:	d029      	beq.n	80199a0 <_scanf_i+0x1d4>
 801994c:	6822      	ldr	r2, [r4, #0]
 801994e:	f012 0210 	ands.w	r2, r2, #16
 8019952:	d113      	bne.n	801997c <_scanf_i+0x1b0>
 8019954:	702a      	strb	r2, [r5, #0]
 8019956:	6863      	ldr	r3, [r4, #4]
 8019958:	9e00      	ldr	r6, [sp, #0]
 801995a:	4649      	mov	r1, r9
 801995c:	4658      	mov	r0, fp
 801995e:	47b0      	blx	r6
 8019960:	f8da 3000 	ldr.w	r3, [sl]
 8019964:	6821      	ldr	r1, [r4, #0]
 8019966:	1d1a      	adds	r2, r3, #4
 8019968:	f8ca 2000 	str.w	r2, [sl]
 801996c:	f011 0f20 	tst.w	r1, #32
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	d010      	beq.n	8019996 <_scanf_i+0x1ca>
 8019974:	6018      	str	r0, [r3, #0]
 8019976:	68e3      	ldr	r3, [r4, #12]
 8019978:	3301      	adds	r3, #1
 801997a:	60e3      	str	r3, [r4, #12]
 801997c:	eba5 0509 	sub.w	r5, r5, r9
 8019980:	44a8      	add	r8, r5
 8019982:	6925      	ldr	r5, [r4, #16]
 8019984:	4445      	add	r5, r8
 8019986:	6125      	str	r5, [r4, #16]
 8019988:	2000      	movs	r0, #0
 801998a:	b007      	add	sp, #28
 801998c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019990:	f04f 0800 	mov.w	r8, #0
 8019994:	e7ca      	b.n	801992c <_scanf_i+0x160>
 8019996:	07ca      	lsls	r2, r1, #31
 8019998:	bf4c      	ite	mi
 801999a:	8018      	strhmi	r0, [r3, #0]
 801999c:	6018      	strpl	r0, [r3, #0]
 801999e:	e7ea      	b.n	8019976 <_scanf_i+0x1aa>
 80199a0:	2001      	movs	r0, #1
 80199a2:	e7f2      	b.n	801998a <_scanf_i+0x1be>
 80199a4:	0801a0e4 	.word	0x0801a0e4
 80199a8:	080173d9 	.word	0x080173d9
 80199ac:	08019b51 	.word	0x08019b51
 80199b0:	0801a53d 	.word	0x0801a53d

080199b4 <_sbrk_r>:
 80199b4:	b538      	push	{r3, r4, r5, lr}
 80199b6:	4c06      	ldr	r4, [pc, #24]	; (80199d0 <_sbrk_r+0x1c>)
 80199b8:	2300      	movs	r3, #0
 80199ba:	4605      	mov	r5, r0
 80199bc:	4608      	mov	r0, r1
 80199be:	6023      	str	r3, [r4, #0]
 80199c0:	f7ed ffee 	bl	80079a0 <_sbrk>
 80199c4:	1c43      	adds	r3, r0, #1
 80199c6:	d102      	bne.n	80199ce <_sbrk_r+0x1a>
 80199c8:	6823      	ldr	r3, [r4, #0]
 80199ca:	b103      	cbz	r3, 80199ce <_sbrk_r+0x1a>
 80199cc:	602b      	str	r3, [r5, #0]
 80199ce:	bd38      	pop	{r3, r4, r5, pc}
 80199d0:	20046c9c 	.word	0x20046c9c

080199d4 <__sccl>:
 80199d4:	b570      	push	{r4, r5, r6, lr}
 80199d6:	780b      	ldrb	r3, [r1, #0]
 80199d8:	2b5e      	cmp	r3, #94	; 0x5e
 80199da:	bf13      	iteet	ne
 80199dc:	1c4a      	addne	r2, r1, #1
 80199de:	1c8a      	addeq	r2, r1, #2
 80199e0:	784b      	ldrbeq	r3, [r1, #1]
 80199e2:	2100      	movne	r1, #0
 80199e4:	bf08      	it	eq
 80199e6:	2101      	moveq	r1, #1
 80199e8:	1e44      	subs	r4, r0, #1
 80199ea:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80199ee:	f804 1f01 	strb.w	r1, [r4, #1]!
 80199f2:	42ac      	cmp	r4, r5
 80199f4:	d1fb      	bne.n	80199ee <__sccl+0x1a>
 80199f6:	b913      	cbnz	r3, 80199fe <__sccl+0x2a>
 80199f8:	3a01      	subs	r2, #1
 80199fa:	4610      	mov	r0, r2
 80199fc:	bd70      	pop	{r4, r5, r6, pc}
 80199fe:	f081 0401 	eor.w	r4, r1, #1
 8019a02:	54c4      	strb	r4, [r0, r3]
 8019a04:	1c51      	adds	r1, r2, #1
 8019a06:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019a0a:	2d2d      	cmp	r5, #45	; 0x2d
 8019a0c:	f101 36ff 	add.w	r6, r1, #4294967295
 8019a10:	460a      	mov	r2, r1
 8019a12:	d006      	beq.n	8019a22 <__sccl+0x4e>
 8019a14:	2d5d      	cmp	r5, #93	; 0x5d
 8019a16:	d0f0      	beq.n	80199fa <__sccl+0x26>
 8019a18:	b90d      	cbnz	r5, 8019a1e <__sccl+0x4a>
 8019a1a:	4632      	mov	r2, r6
 8019a1c:	e7ed      	b.n	80199fa <__sccl+0x26>
 8019a1e:	462b      	mov	r3, r5
 8019a20:	e7ef      	b.n	8019a02 <__sccl+0x2e>
 8019a22:	780e      	ldrb	r6, [r1, #0]
 8019a24:	2e5d      	cmp	r6, #93	; 0x5d
 8019a26:	d0fa      	beq.n	8019a1e <__sccl+0x4a>
 8019a28:	42b3      	cmp	r3, r6
 8019a2a:	dcf8      	bgt.n	8019a1e <__sccl+0x4a>
 8019a2c:	3301      	adds	r3, #1
 8019a2e:	429e      	cmp	r6, r3
 8019a30:	54c4      	strb	r4, [r0, r3]
 8019a32:	dcfb      	bgt.n	8019a2c <__sccl+0x58>
 8019a34:	3102      	adds	r1, #2
 8019a36:	e7e6      	b.n	8019a06 <__sccl+0x32>

08019a38 <strncmp>:
 8019a38:	b510      	push	{r4, lr}
 8019a3a:	b16a      	cbz	r2, 8019a58 <strncmp+0x20>
 8019a3c:	3901      	subs	r1, #1
 8019a3e:	1884      	adds	r4, r0, r2
 8019a40:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019a44:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019a48:	4293      	cmp	r3, r2
 8019a4a:	d103      	bne.n	8019a54 <strncmp+0x1c>
 8019a4c:	42a0      	cmp	r0, r4
 8019a4e:	d001      	beq.n	8019a54 <strncmp+0x1c>
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	d1f5      	bne.n	8019a40 <strncmp+0x8>
 8019a54:	1a98      	subs	r0, r3, r2
 8019a56:	bd10      	pop	{r4, pc}
 8019a58:	4610      	mov	r0, r2
 8019a5a:	e7fc      	b.n	8019a56 <strncmp+0x1e>

08019a5c <_strtoul_l.isra.0>:
 8019a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a60:	4680      	mov	r8, r0
 8019a62:	4689      	mov	r9, r1
 8019a64:	4692      	mov	sl, r2
 8019a66:	461e      	mov	r6, r3
 8019a68:	460f      	mov	r7, r1
 8019a6a:	463d      	mov	r5, r7
 8019a6c:	9808      	ldr	r0, [sp, #32]
 8019a6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019a72:	f7fe fe4f 	bl	8018714 <__locale_ctype_ptr_l>
 8019a76:	4420      	add	r0, r4
 8019a78:	7843      	ldrb	r3, [r0, #1]
 8019a7a:	f013 0308 	ands.w	r3, r3, #8
 8019a7e:	d130      	bne.n	8019ae2 <_strtoul_l.isra.0+0x86>
 8019a80:	2c2d      	cmp	r4, #45	; 0x2d
 8019a82:	d130      	bne.n	8019ae6 <_strtoul_l.isra.0+0x8a>
 8019a84:	787c      	ldrb	r4, [r7, #1]
 8019a86:	1cbd      	adds	r5, r7, #2
 8019a88:	2101      	movs	r1, #1
 8019a8a:	2e00      	cmp	r6, #0
 8019a8c:	d05c      	beq.n	8019b48 <_strtoul_l.isra.0+0xec>
 8019a8e:	2e10      	cmp	r6, #16
 8019a90:	d109      	bne.n	8019aa6 <_strtoul_l.isra.0+0x4a>
 8019a92:	2c30      	cmp	r4, #48	; 0x30
 8019a94:	d107      	bne.n	8019aa6 <_strtoul_l.isra.0+0x4a>
 8019a96:	782b      	ldrb	r3, [r5, #0]
 8019a98:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019a9c:	2b58      	cmp	r3, #88	; 0x58
 8019a9e:	d14e      	bne.n	8019b3e <_strtoul_l.isra.0+0xe2>
 8019aa0:	786c      	ldrb	r4, [r5, #1]
 8019aa2:	2610      	movs	r6, #16
 8019aa4:	3502      	adds	r5, #2
 8019aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8019aaa:	2300      	movs	r3, #0
 8019aac:	fbb2 f2f6 	udiv	r2, r2, r6
 8019ab0:	fb06 fc02 	mul.w	ip, r6, r2
 8019ab4:	ea6f 0c0c 	mvn.w	ip, ip
 8019ab8:	4618      	mov	r0, r3
 8019aba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019abe:	2f09      	cmp	r7, #9
 8019ac0:	d817      	bhi.n	8019af2 <_strtoul_l.isra.0+0x96>
 8019ac2:	463c      	mov	r4, r7
 8019ac4:	42a6      	cmp	r6, r4
 8019ac6:	dd23      	ble.n	8019b10 <_strtoul_l.isra.0+0xb4>
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	db1e      	blt.n	8019b0a <_strtoul_l.isra.0+0xae>
 8019acc:	4282      	cmp	r2, r0
 8019ace:	d31c      	bcc.n	8019b0a <_strtoul_l.isra.0+0xae>
 8019ad0:	d101      	bne.n	8019ad6 <_strtoul_l.isra.0+0x7a>
 8019ad2:	45a4      	cmp	ip, r4
 8019ad4:	db19      	blt.n	8019b0a <_strtoul_l.isra.0+0xae>
 8019ad6:	fb00 4006 	mla	r0, r0, r6, r4
 8019ada:	2301      	movs	r3, #1
 8019adc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019ae0:	e7eb      	b.n	8019aba <_strtoul_l.isra.0+0x5e>
 8019ae2:	462f      	mov	r7, r5
 8019ae4:	e7c1      	b.n	8019a6a <_strtoul_l.isra.0+0xe>
 8019ae6:	2c2b      	cmp	r4, #43	; 0x2b
 8019ae8:	bf04      	itt	eq
 8019aea:	1cbd      	addeq	r5, r7, #2
 8019aec:	787c      	ldrbeq	r4, [r7, #1]
 8019aee:	4619      	mov	r1, r3
 8019af0:	e7cb      	b.n	8019a8a <_strtoul_l.isra.0+0x2e>
 8019af2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019af6:	2f19      	cmp	r7, #25
 8019af8:	d801      	bhi.n	8019afe <_strtoul_l.isra.0+0xa2>
 8019afa:	3c37      	subs	r4, #55	; 0x37
 8019afc:	e7e2      	b.n	8019ac4 <_strtoul_l.isra.0+0x68>
 8019afe:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019b02:	2f19      	cmp	r7, #25
 8019b04:	d804      	bhi.n	8019b10 <_strtoul_l.isra.0+0xb4>
 8019b06:	3c57      	subs	r4, #87	; 0x57
 8019b08:	e7dc      	b.n	8019ac4 <_strtoul_l.isra.0+0x68>
 8019b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8019b0e:	e7e5      	b.n	8019adc <_strtoul_l.isra.0+0x80>
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	da09      	bge.n	8019b28 <_strtoul_l.isra.0+0xcc>
 8019b14:	2322      	movs	r3, #34	; 0x22
 8019b16:	f8c8 3000 	str.w	r3, [r8]
 8019b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8019b1e:	f1ba 0f00 	cmp.w	sl, #0
 8019b22:	d107      	bne.n	8019b34 <_strtoul_l.isra.0+0xd8>
 8019b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b28:	b101      	cbz	r1, 8019b2c <_strtoul_l.isra.0+0xd0>
 8019b2a:	4240      	negs	r0, r0
 8019b2c:	f1ba 0f00 	cmp.w	sl, #0
 8019b30:	d0f8      	beq.n	8019b24 <_strtoul_l.isra.0+0xc8>
 8019b32:	b10b      	cbz	r3, 8019b38 <_strtoul_l.isra.0+0xdc>
 8019b34:	f105 39ff 	add.w	r9, r5, #4294967295
 8019b38:	f8ca 9000 	str.w	r9, [sl]
 8019b3c:	e7f2      	b.n	8019b24 <_strtoul_l.isra.0+0xc8>
 8019b3e:	2430      	movs	r4, #48	; 0x30
 8019b40:	2e00      	cmp	r6, #0
 8019b42:	d1b0      	bne.n	8019aa6 <_strtoul_l.isra.0+0x4a>
 8019b44:	2608      	movs	r6, #8
 8019b46:	e7ae      	b.n	8019aa6 <_strtoul_l.isra.0+0x4a>
 8019b48:	2c30      	cmp	r4, #48	; 0x30
 8019b4a:	d0a4      	beq.n	8019a96 <_strtoul_l.isra.0+0x3a>
 8019b4c:	260a      	movs	r6, #10
 8019b4e:	e7aa      	b.n	8019aa6 <_strtoul_l.isra.0+0x4a>

08019b50 <_strtoul_r>:
 8019b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019b52:	4c06      	ldr	r4, [pc, #24]	; (8019b6c <_strtoul_r+0x1c>)
 8019b54:	4d06      	ldr	r5, [pc, #24]	; (8019b70 <_strtoul_r+0x20>)
 8019b56:	6824      	ldr	r4, [r4, #0]
 8019b58:	6a24      	ldr	r4, [r4, #32]
 8019b5a:	2c00      	cmp	r4, #0
 8019b5c:	bf08      	it	eq
 8019b5e:	462c      	moveq	r4, r5
 8019b60:	9400      	str	r4, [sp, #0]
 8019b62:	f7ff ff7b 	bl	8019a5c <_strtoul_l.isra.0>
 8019b66:	b003      	add	sp, #12
 8019b68:	bd30      	pop	{r4, r5, pc}
 8019b6a:	bf00      	nop
 8019b6c:	2000000c 	.word	0x2000000c
 8019b70:	20000070 	.word	0x20000070

08019b74 <__submore>:
 8019b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b78:	460c      	mov	r4, r1
 8019b7a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019b80:	4299      	cmp	r1, r3
 8019b82:	d11d      	bne.n	8019bc0 <__submore+0x4c>
 8019b84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019b88:	f7ff fa66 	bl	8019058 <_malloc_r>
 8019b8c:	b918      	cbnz	r0, 8019b96 <__submore+0x22>
 8019b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8019b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019b9a:	63a3      	str	r3, [r4, #56]	; 0x38
 8019b9c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019ba0:	6360      	str	r0, [r4, #52]	; 0x34
 8019ba2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019ba6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019baa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019bae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019bb2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019bb6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019bba:	6020      	str	r0, [r4, #0]
 8019bbc:	2000      	movs	r0, #0
 8019bbe:	e7e8      	b.n	8019b92 <__submore+0x1e>
 8019bc0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019bc2:	0077      	lsls	r7, r6, #1
 8019bc4:	463a      	mov	r2, r7
 8019bc6:	f000 f837 	bl	8019c38 <_realloc_r>
 8019bca:	4605      	mov	r5, r0
 8019bcc:	2800      	cmp	r0, #0
 8019bce:	d0de      	beq.n	8019b8e <__submore+0x1a>
 8019bd0:	eb00 0806 	add.w	r8, r0, r6
 8019bd4:	4601      	mov	r1, r0
 8019bd6:	4632      	mov	r2, r6
 8019bd8:	4640      	mov	r0, r8
 8019bda:	f7fe fdd7 	bl	801878c <memcpy>
 8019bde:	f8c4 8000 	str.w	r8, [r4]
 8019be2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019be6:	e7e9      	b.n	8019bbc <__submore+0x48>

08019be8 <__ascii_wctomb>:
 8019be8:	b149      	cbz	r1, 8019bfe <__ascii_wctomb+0x16>
 8019bea:	2aff      	cmp	r2, #255	; 0xff
 8019bec:	bf85      	ittet	hi
 8019bee:	238a      	movhi	r3, #138	; 0x8a
 8019bf0:	6003      	strhi	r3, [r0, #0]
 8019bf2:	700a      	strbls	r2, [r1, #0]
 8019bf4:	f04f 30ff 	movhi.w	r0, #4294967295
 8019bf8:	bf98      	it	ls
 8019bfa:	2001      	movls	r0, #1
 8019bfc:	4770      	bx	lr
 8019bfe:	4608      	mov	r0, r1
 8019c00:	4770      	bx	lr

08019c02 <memmove>:
 8019c02:	4288      	cmp	r0, r1
 8019c04:	b510      	push	{r4, lr}
 8019c06:	eb01 0302 	add.w	r3, r1, r2
 8019c0a:	d807      	bhi.n	8019c1c <memmove+0x1a>
 8019c0c:	1e42      	subs	r2, r0, #1
 8019c0e:	4299      	cmp	r1, r3
 8019c10:	d00a      	beq.n	8019c28 <memmove+0x26>
 8019c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c16:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019c1a:	e7f8      	b.n	8019c0e <memmove+0xc>
 8019c1c:	4283      	cmp	r3, r0
 8019c1e:	d9f5      	bls.n	8019c0c <memmove+0xa>
 8019c20:	1881      	adds	r1, r0, r2
 8019c22:	1ad2      	subs	r2, r2, r3
 8019c24:	42d3      	cmn	r3, r2
 8019c26:	d100      	bne.n	8019c2a <memmove+0x28>
 8019c28:	bd10      	pop	{r4, pc}
 8019c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019c2e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019c32:	e7f7      	b.n	8019c24 <memmove+0x22>

08019c34 <__malloc_lock>:
 8019c34:	4770      	bx	lr

08019c36 <__malloc_unlock>:
 8019c36:	4770      	bx	lr

08019c38 <_realloc_r>:
 8019c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c3a:	4607      	mov	r7, r0
 8019c3c:	4614      	mov	r4, r2
 8019c3e:	460e      	mov	r6, r1
 8019c40:	b921      	cbnz	r1, 8019c4c <_realloc_r+0x14>
 8019c42:	4611      	mov	r1, r2
 8019c44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019c48:	f7ff ba06 	b.w	8019058 <_malloc_r>
 8019c4c:	b922      	cbnz	r2, 8019c58 <_realloc_r+0x20>
 8019c4e:	f7ff f9b5 	bl	8018fbc <_free_r>
 8019c52:	4625      	mov	r5, r4
 8019c54:	4628      	mov	r0, r5
 8019c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c58:	f000 f814 	bl	8019c84 <_malloc_usable_size_r>
 8019c5c:	42a0      	cmp	r0, r4
 8019c5e:	d20f      	bcs.n	8019c80 <_realloc_r+0x48>
 8019c60:	4621      	mov	r1, r4
 8019c62:	4638      	mov	r0, r7
 8019c64:	f7ff f9f8 	bl	8019058 <_malloc_r>
 8019c68:	4605      	mov	r5, r0
 8019c6a:	2800      	cmp	r0, #0
 8019c6c:	d0f2      	beq.n	8019c54 <_realloc_r+0x1c>
 8019c6e:	4631      	mov	r1, r6
 8019c70:	4622      	mov	r2, r4
 8019c72:	f7fe fd8b 	bl	801878c <memcpy>
 8019c76:	4631      	mov	r1, r6
 8019c78:	4638      	mov	r0, r7
 8019c7a:	f7ff f99f 	bl	8018fbc <_free_r>
 8019c7e:	e7e9      	b.n	8019c54 <_realloc_r+0x1c>
 8019c80:	4635      	mov	r5, r6
 8019c82:	e7e7      	b.n	8019c54 <_realloc_r+0x1c>

08019c84 <_malloc_usable_size_r>:
 8019c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c88:	1f18      	subs	r0, r3, #4
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	bfbc      	itt	lt
 8019c8e:	580b      	ldrlt	r3, [r1, r0]
 8019c90:	18c0      	addlt	r0, r0, r3
 8019c92:	4770      	bx	lr

08019c94 <_init>:
 8019c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c96:	bf00      	nop
 8019c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019c9a:	bc08      	pop	{r3}
 8019c9c:	469e      	mov	lr, r3
 8019c9e:	4770      	bx	lr

08019ca0 <_fini>:
 8019ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ca2:	bf00      	nop
 8019ca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019ca6:	bc08      	pop	{r3}
 8019ca8:	469e      	mov	lr, r3
 8019caa:	4770      	bx	lr
