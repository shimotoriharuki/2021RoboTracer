
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012398  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000092c  08012558  08012558  00022558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012e84  08012e84  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08012e84  08012e84  00022e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e8c  08012e8c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e8c  08012e8c  00022e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012e90  08012e90  00022e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08012e94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b68  200001dc  08013070  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d44  08013070  00034d44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023a15  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000045e4  00000000  00000000  00053c21  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c00  00000000  00000000  00058208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a10  00000000  00000000  00059e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00031aed  00000000  00000000  0005b818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000191fd  00000000  00000000  0008d305  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010721c  00000000  00000000  000a6502  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ad71e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b90  00000000  00000000  001ad79c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08012540 	.word	0x08012540

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08012540 	.word	0x08012540

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f003 fd50 	bl	8004a7c <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20002904 	.word	0x20002904

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f003 fd38 	bl	8004a7c <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20002904 	.word	0x20002904

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f003 fbc1 	bl	80047a8 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f002 f928 	bl	800327c <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f002 f922 	bl	800327c <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f002 f91c 	bl	800327c <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f002 f916 	bl	800327c <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f002 f910 	bl	800327c <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f002 f90a 	bl	800327c <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f002 f904 	bl	800327c <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f002 f8fe 	bl	800327c <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f002 f8f8 	bl	800327c <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f002 f8f2 	bl	800327c <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f002 f8e6 	bl	800327c <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f002 f8e0 	bl	800327c <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f00e f98d 	bl	800f448 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(char *p_folder_name, char *p_file_name, short size, int *data, char state){
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	4613      	mov	r3, r2
 8001162:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f000 f8cc 	bl	8001308 <create_path>

	if(state == OVER_WRITE){
 8001170:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d108      	bne.n	800118a <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001178:	481e      	ldr	r0, [pc, #120]	; (80011f4 <sd_write_array_int+0xa0>)
 800117a:	f00b fd38 	bl	800cbee <f_chdir>
		f_unlink(filepath);	//一回消す
 800117e:	481e      	ldr	r0, [pc, #120]	; (80011f8 <sd_write_array_int+0xa4>)
 8001180:	f00b ffa3 	bl	800d0ca <f_unlink>
		f_chdir("..");
 8001184:	481d      	ldr	r0, [pc, #116]	; (80011fc <sd_write_array_int+0xa8>)
 8001186:	f00b fd32 	bl	800cbee <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 800118a:	f000 f8d3 	bl	8001334 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800118e:	2300      	movs	r3, #0
 8001190:	82fb      	strh	r3, [r7, #22]
 8001192:	e021      	b.n	80011d8 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001194:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	4413      	add	r3, r2
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a17      	ldr	r2, [pc, #92]	; (8001200 <sd_write_array_int+0xac>)
 80011a2:	2180      	movs	r1, #128	; 0x80
 80011a4:	4817      	ldr	r0, [pc, #92]	; (8001204 <sd_write_array_int+0xb0>)
 80011a6:	f00d f9bd 	bl	800e524 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <sd_write_array_int+0xb4>)
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	4619      	mov	r1, r3
 80011b0:	4815      	ldr	r0, [pc, #84]	; (8001208 <sd_write_array_int+0xb4>)
 80011b2:	f00b fd66 	bl	800cc82 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80011b6:	4813      	ldr	r0, [pc, #76]	; (8001204 <sd_write_array_int+0xb0>)
 80011b8:	f7ff f822 	bl	8000200 <strlen>
 80011bc:	4602      	mov	r2, r0
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <sd_write_array_int+0xb8>)
 80011c0:	4910      	ldr	r1, [pc, #64]	; (8001204 <sd_write_array_int+0xb0>)
 80011c2:	4811      	ldr	r0, [pc, #68]	; (8001208 <sd_write_array_int+0xb4>)
 80011c4:	f00b fad7 	bl	800c776 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80011c8:	f000 f8ce 	bl	8001368 <bufclear>
	for(short i = 0 ; i < size; i++){
 80011cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	3301      	adds	r3, #1
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	82fb      	strh	r3, [r7, #22]
 80011d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80011dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	dbd7      	blt.n	8001194 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 80011e4:	4808      	ldr	r0, [pc, #32]	; (8001208 <sd_write_array_int+0xb4>)
 80011e6:	f00b fcd8 	bl	800cb9a <f_close>

	return ret;
 80011ea:	7d7b      	ldrb	r3, [r7, #21]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200015c0 	.word	0x200015c0
 80011f8:	2000047c 	.word	0x2000047c
 80011fc:	08012560 	.word	0x08012560
 8001200:	08012564 	.word	0x08012564
 8001204:	200016c0 	.word	0x200016c0
 8001208:	20001750 	.word	0x20001750
 800120c:	20001740 	.word	0x20001740

08001210 <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(char *p_folder_name, char *p_file_name, short size, int *data){
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	4613      	mov	r3, r2
 800121e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f000 f86c 	bl	8001308 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001230:	f000 f880 	bl	8001334 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001234:	e019      	b.n	800126a <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 8001236:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	4413      	add	r3, r2
 8001240:	461a      	mov	r2, r3
 8001242:	4913      	ldr	r1, [pc, #76]	; (8001290 <sd_read_array_int+0x80>)
 8001244:	4813      	ldr	r0, [pc, #76]	; (8001294 <sd_read_array_int+0x84>)
 8001246:	f00d f9c1 	bl	800e5cc <siscanf>
		i++;
 800124a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800124e:	b29b      	uxth	r3, r3
 8001250:	3301      	adds	r3, #1
 8001252:	b29b      	uxth	r3, r3
 8001254:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001256:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800125a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800125e:	429a      	cmp	r2, r3
 8001260:	db03      	blt.n	800126a <sd_read_array_int+0x5a>
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	3b01      	subs	r3, #1
 8001266:	b29b      	uxth	r3, r3
 8001268:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <sd_read_array_int+0x88>)
 800126c:	2180      	movs	r1, #128	; 0x80
 800126e:	4809      	ldr	r0, [pc, #36]	; (8001294 <sd_read_array_int+0x84>)
 8001270:	f00c f906 	bl	800d480 <f_gets>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d1dd      	bne.n	8001236 <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800127a:	f000 f875 	bl	8001368 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800127e:	4806      	ldr	r0, [pc, #24]	; (8001298 <sd_read_array_int+0x88>)
 8001280:	f00b fc8b 	bl	800cb9a <f_close>

	return ret;
 8001284:	7d7b      	ldrb	r3, [r7, #21]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	08012568 	.word	0x08012568
 8001294:	200016c0 	.word	0x200016c0
 8001298:	20001750 	.word	0x20001750

0800129c <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80012a6:	2201      	movs	r2, #1
 80012a8:	4908      	ldr	r1, [pc, #32]	; (80012cc <sd_mount+0x30>)
 80012aa:	4809      	ldr	r0, [pc, #36]	; (80012d0 <sd_mount+0x34>)
 80012ac:	f00a fef2 	bl	800c094 <f_mount>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <sd_mount+0x20>
 80012b6:	2301      	movs	r3, #1
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	e001      	b.n	80012c0 <sd_mount+0x24>
	else ret = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	71fb      	strb	r3, [r7, #7]

	return ret;
 80012c0:	79fb      	ldrb	r3, [r7, #7]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	0801256c 	.word	0x0801256c
 80012d0:	2000057c 	.word	0x2000057c

080012d4 <sd_unmount>:
//* 役割　：　SDカードをアンマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_unmount(){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	71fb      	strb	r3, [r7, #7]

	if(f_mount(NULL, "", 1) == FR_OK) ret = 1;
 80012de:	2201      	movs	r2, #1
 80012e0:	4908      	ldr	r1, [pc, #32]	; (8001304 <sd_unmount+0x30>)
 80012e2:	2000      	movs	r0, #0
 80012e4:	f00a fed6 	bl	800c094 <f_mount>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d102      	bne.n	80012f4 <sd_unmount+0x20>
 80012ee:	2301      	movs	r3, #1
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	e001      	b.n	80012f8 <sd_unmount+0x24>
	else ret = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	71fb      	strb	r3, [r7, #7]

	return ret;
 80012f8:	79fb      	ldrb	r3, [r7, #7]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	0801256c 	.word	0x0801256c

08001308 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char *p_folder_name, char *p_file_name){
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <create_path+0x24>)
 8001316:	f00d f9c8 	bl	800e6aa <strcpy>

	sprintf(filepath, "%s", p_file_name);
 800131a:	6839      	ldr	r1, [r7, #0]
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <create_path+0x28>)
 800131e:	f00d f9c4 	bl	800e6aa <strcpy>

}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200015c0 	.word	0x200015c0
 8001330:	2000047c 	.word	0x2000047c

08001334 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001338:	4807      	ldr	r0, [pc, #28]	; (8001358 <fopen_folder_and_file+0x24>)
 800133a:	f00b ff87 	bl	800d24c <f_mkdir>

	f_chdir(dirpath);
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <fopen_folder_and_file+0x24>)
 8001340:	f00b fc55 	bl	800cbee <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001344:	2213      	movs	r2, #19
 8001346:	4905      	ldr	r1, [pc, #20]	; (800135c <fopen_folder_and_file+0x28>)
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <fopen_folder_and_file+0x2c>)
 800134a:	f00a fee9 	bl	800c120 <f_open>

	f_chdir("..");
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <fopen_folder_and_file+0x30>)
 8001350:	f00b fc4d 	bl	800cbee <f_chdir>


}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200015c0 	.word	0x200015c0
 800135c:	2000047c 	.word	0x2000047c
 8001360:	20001750 	.word	0x20001750
 8001364:	08012560 	.word	0x08012560

08001368 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	e007      	b.n	8001384 <bufclear+0x1c>
		buffer[i] = '\0';
 8001374:	4a08      	ldr	r2, [pc, #32]	; (8001398 <bufclear+0x30>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3301      	adds	r3, #1
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b7f      	cmp	r3, #127	; 0x7f
 8001388:	ddf4      	ble.n	8001374 <bufclear+0xc>
	}
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	200016c0 	.word	0x200016c0

0800139c <_ZN10LineSensor8ADCStartEv>:
//#include "Macro.h"

//int analog[AD_DATA_SIZE];

void LineSensor::ADCStart()
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	printf("class test\n");
 80013a4:	4806      	ldr	r0, [pc, #24]	; (80013c0 <_ZN10LineSensor8ADCStartEv+0x24>)
 80013a6:	f00d f8af 	bl	800e508 <puts>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	220e      	movs	r2, #14
 80013ae:	4619      	mov	r1, r3
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <_ZN10LineSensor8ADCStartEv+0x28>)
 80013b2:	f001 ffc9 	bl	8003348 <HAL_ADC_Start_DMA>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	08012570 	.word	0x08012570
 80013c4:	200028bc 	.word	0x200028bc

080013c8 <_ZN10LineSensor19updateSensorvalusesEv>:

void LineSensor::updateSensorvaluses()
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	sensor[0] = analog_val_[0];
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	881a      	ldrh	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	839a      	strh	r2, [r3, #28]
	sensor[1] = analog_val_[1];
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	885a      	ldrh	r2, [r3, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	83da      	strh	r2, [r3, #30]
	sensor[2] = analog_val_[2];
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	889a      	ldrh	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	841a      	strh	r2, [r3, #32]
	sensor[3] = analog_val_[3];
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	88da      	ldrh	r2, [r3, #6]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor[4] = analog_val_[4];
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	891a      	ldrh	r2, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	849a      	strh	r2, [r3, #36]	; 0x24
	sensor[5] = analog_val_[5];
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	895a      	ldrh	r2, [r3, #10]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor[6] = analog_val_[6];
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	899a      	ldrh	r2, [r3, #12]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor[7] = analog_val_[7];
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	89da      	ldrh	r2, [r3, #14]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor[8] = analog_val_[8];
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	8a1a      	ldrh	r2, [r3, #16]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	859a      	strh	r2, [r3, #44]	; 0x2c
	sensor[9] = analog_val_[9];
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	8a5a      	ldrh	r2, [r3, #18]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	85da      	strh	r2, [r3, #46]	; 0x2e
	sensor[10] = analog_val_[10];
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	8a9a      	ldrh	r2, [r3, #20]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	861a      	strh	r2, [r3, #48]	; 0x30
	sensor[11] = analog_val_[11];
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	8ada      	ldrh	r2, [r3, #22]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	865a      	strh	r2, [r3, #50]	; 0x32
	sensor[12] = analog_val_[12];
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	8b1a      	ldrh	r2, [r3, #24]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	869a      	strh	r2, [r3, #52]	; 0x34
	sensor[13] = analog_val_[13];
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	8b5a      	ldrh	r2, [r3, #26]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	86da      	strh	r2, [r3, #54]	; 0x36

}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001454:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001458:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	2b00      	cmp	r3, #0
 8001462:	d013      	beq.n	800148c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001464:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001468:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800146c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001470:	2b00      	cmp	r3, #0
 8001472:	d00b      	beq.n	800148c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001474:	e000      	b.n	8001478 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001476:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001478:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f9      	beq.n	8001476 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001482:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800148c:	687b      	ldr	r3, [r7, #4]
}
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	e009      	b.n	80014c0 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	60ba      	str	r2, [r7, #8]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ffc9 	bl	800144c <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	dbf1      	blt.n	80014ac <_write+0x12>
  }
  return len;
 80014c8:	687b      	ldr	r3, [r7, #4]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	80fb      	strh	r3, [r7, #6]
  //HAL_Delay(1);
  printf("EXTI callback called!\r\n");
 80014de:	4813      	ldr	r0, [pc, #76]	; (800152c <HAL_GPIO_EXTI_Callback+0x58>)
 80014e0:	f00d f812 	bl	800e508 <puts>
  if (GPIO_Pin == GPIO_PIN_0)
 80014e4:	88fb      	ldrh	r3, [r7, #6]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d102      	bne.n	80014f0 <HAL_GPIO_EXTI_Callback+0x1c>
    printf("gpio0 pushed!\r\n");
 80014ea:	4811      	ldr	r0, [pc, #68]	; (8001530 <HAL_GPIO_EXTI_Callback+0x5c>)
 80014ec:	f00d f80c 	bl	800e508 <puts>
  if (GPIO_Pin == GPIO_PIN_2)
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	d102      	bne.n	80014fc <HAL_GPIO_EXTI_Callback+0x28>
    printf("gpio2 pushed!\r\n");
 80014f6:	480f      	ldr	r0, [pc, #60]	; (8001534 <HAL_GPIO_EXTI_Callback+0x60>)
 80014f8:	f00d f806 	bl	800e508 <puts>
  if (GPIO_Pin == GPIO_PIN_7)
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	2b80      	cmp	r3, #128	; 0x80
 8001500:	d102      	bne.n	8001508 <HAL_GPIO_EXTI_Callback+0x34>
      printf("gpio7 pushed!\r\n");
 8001502:	480d      	ldr	r0, [pc, #52]	; (8001538 <HAL_GPIO_EXTI_Callback+0x64>)
 8001504:	f00d f800 	bl	800e508 <puts>
  if (GPIO_Pin == GPIO_PIN_8)
 8001508:	88fb      	ldrh	r3, [r7, #6]
 800150a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800150e:	d102      	bne.n	8001516 <HAL_GPIO_EXTI_Callback+0x42>
      printf("gpio8 pushed!\r\n");
 8001510:	480a      	ldr	r0, [pc, #40]	; (800153c <HAL_GPIO_EXTI_Callback+0x68>)
 8001512:	f00c fff9 	bl	800e508 <puts>
  if (GPIO_Pin == GPIO_PIN_10)
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800151c:	d102      	bne.n	8001524 <HAL_GPIO_EXTI_Callback+0x50>
      printf("gpio10 pushed!\r\n");
 800151e:	4808      	ldr	r0, [pc, #32]	; (8001540 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001520:	f00c fff2 	bl	800e508 <puts>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	0801257c 	.word	0x0801257c
 8001530:	08012594 	.word	0x08012594
 8001534:	080125a4 	.word	0x080125a4
 8001538:	080125b4 	.word	0x080125b4
 800153c:	080125c4 	.word	0x080125c4
 8001540:	080125d4 	.word	0x080125d4

08001544 <HAL_TIM_PeriodElapsedCallback>:

}
*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	//timer++;

	//adUpdate();
	//side =  getSideSensor();
	//updateSensorvaluses();
	cppFlip();
 800154c:	f001 fdf0 	bl	8003130 <cppFlip>
}
 8001550:	bf00      	nop
 8001552:	3708      	adds	r7, #8
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <init>:

void init()
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af02      	add	r7, sp, #8
	// ------initialize------//
	  //PWM start
	if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3) != HAL_OK){
 800155e:	2108      	movs	r1, #8
 8001560:	4829      	ldr	r0, [pc, #164]	; (8001608 <init+0xb0>)
 8001562:	f006 f819 	bl	8007598 <HAL_TIM_PWM_Start>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <init+0x18>
		Error_Handler();
 800156c:	f000 ffca 	bl	8002504 <Error_Handler>
	}
	if (HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4) != HAL_OK){
 8001570:	210c      	movs	r1, #12
 8001572:	4825      	ldr	r0, [pc, #148]	; (8001608 <init+0xb0>)
 8001574:	f006 f810 	bl	8007598 <HAL_TIM_PWM_Start>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <init+0x2a>
		Error_Handler();
 800157e:	f000 ffc1 	bl	8002504 <Error_Handler>
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK){
	      Error_Handler();
	}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 65535);
	*/
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001588:	4820      	ldr	r0, [pc, #128]	; (800160c <init+0xb4>)
 800158a:	f003 f90d 	bl	80047a8 <HAL_GPIO_WritePin>

	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800158e:	213c      	movs	r1, #60	; 0x3c
 8001590:	481f      	ldr	r0, [pc, #124]	; (8001610 <init+0xb8>)
 8001592:	f006 f8d1 	bl	8007738 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001596:	213c      	movs	r1, #60	; 0x3c
 8001598:	481e      	ldr	r0, [pc, #120]	; (8001614 <init+0xbc>)
 800159a:	f006 f8cd 	bl	8007738 <HAL_TIM_Encoder_Start>

	//Timer intrruptin start
	HAL_TIM_Base_Start_IT(&htim6);
 800159e:	481e      	ldr	r0, [pc, #120]	; (8001618 <init+0xc0>)
 80015a0:	f005 ffab 	bl	80074fa <HAL_TIM_Base_Start_IT>


	lcd_init();
 80015a4:	f7ff fd38 	bl	8001018 <lcd_init>


	if(sd_mount() == 1){
 80015a8:	f7ff fe78 	bl	800129c <sd_mount>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d103      	bne.n	80015ba <init+0x62>
	  printf("mount success\r\n");
 80015b2:	481a      	ldr	r0, [pc, #104]	; (800161c <init+0xc4>)
 80015b4:	f00c ffa8 	bl	800e508 <puts>
 80015b8:	e002      	b.n	80015c0 <init+0x68>
	}
	else{
	  printf("error\r\n");
 80015ba:	4819      	ldr	r0, [pc, #100]	; (8001620 <init+0xc8>)
 80015bc:	f00c ffa4 	bl	800e508 <puts>
	}

	data[0] = 30;
 80015c0:	4b18      	ldr	r3, [pc, #96]	; (8001624 <init+0xcc>)
 80015c2:	221e      	movs	r2, #30
 80015c4:	601a      	str	r2, [r3, #0]

	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 80015c6:	2301      	movs	r3, #1
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <init+0xcc>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	4916      	ldr	r1, [pc, #88]	; (8001628 <init+0xd0>)
 80015d0:	4816      	ldr	r0, [pc, #88]	; (800162c <init+0xd4>)
 80015d2:	f7ff fdbf 	bl	8001154 <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <init+0xd8>)
 80015d8:	2201      	movs	r2, #1
 80015da:	4913      	ldr	r1, [pc, #76]	; (8001628 <init+0xd0>)
 80015dc:	4813      	ldr	r0, [pc, #76]	; (800162c <init+0xd4>)
 80015de:	f7ff fe17 	bl	8001210 <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 80015e2:	2301      	movs	r3, #1
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <init+0xd8>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	4912      	ldr	r1, [pc, #72]	; (8001634 <init+0xdc>)
 80015ec:	480f      	ldr	r0, [pc, #60]	; (800162c <init+0xd4>)
 80015ee:	f7ff fdb1 	bl	8001154 <sd_write_array_int>

	printf("sd write and read success!!\r\n");
 80015f2:	4811      	ldr	r0, [pc, #68]	; (8001638 <init+0xe0>)
 80015f4:	f00c ff88 	bl	800e508 <puts>
	sd_unmount();
 80015f8:	f7ff fe6c 	bl	80012d4 <sd_unmount>

	cppInit();
 80015fc:	f001 fd7a 	bl	80030f4 <cppInit>
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	2000287c 	.word	0x2000287c
 800160c:	40021000 	.word	0x40021000
 8001610:	20002b20 	.word	0x20002b20
 8001614:	2000283c 	.word	0x2000283c
 8001618:	20002ae0 	.word	0x20002ae0
 800161c:	080125e4 	.word	0x080125e4
 8001620:	080125f4 	.word	0x080125f4
 8001624:	20002adc 	.word	0x20002adc
 8001628:	080125fc 	.word	0x080125fc
 800162c:	08012608 	.word	0x08012608
 8001630:	200029ec 	.word	0x200029ec
 8001634:	08012610 	.word	0x08012610
 8001638:	0801261c 	.word	0x0801261c

0800163c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001642:	f001 fda9 	bl	8003198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001646:	f000 f897 	bl	8001778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800164a:	f000 fe07 	bl	800225c <MX_GPIO_Init>
  MX_DMA_Init();
 800164e:	f000 fdd5 	bl	80021fc <MX_DMA_Init>
  MX_I2C2_Init();
 8001652:	f000 fa55 	bl	8001b00 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8001656:	f000 fa81 	bl	8001b5c <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800165a:	f000 fa9f 	bl	8001b9c <MX_SPI2_Init>
  MX_TIM1_Init();
 800165e:	f000 fad3 	bl	8001c08 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001662:	f000 fbdd 	bl	8001e20 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001666:	f000 fcab 	bl	8001fc0 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800166a:	f000 fd9d 	bl	80021a8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800166e:	f007 ff17 	bl	80094a0 <MX_FATFS_Init>
  MX_TIM6_Init();
 8001672:	f000 fc39 	bl	8001ee8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001676:	f000 fc6d 	bl	8001f54 <MX_TIM7_Init>
  MX_I2C1_Init();
 800167a:	f000 fa13 	bl	8001aa4 <MX_I2C1_Init>
  MX_TIM3_Init();
 800167e:	f000 fb6b 	bl	8001d58 <MX_TIM3_Init>
  MX_TIM10_Init();
 8001682:	f000 fcf5 	bl	8002070 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001686:	f000 fd41 	bl	800210c <MX_TIM11_Init>
  MX_ADC2_Init();
 800168a:	f000 f903 	bl	8001894 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 800168e:	f7ff ff63 	bl	8001558 <init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  // L chika
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001692:	2201      	movs	r2, #1
 8001694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001698:	482b      	ldr	r0, [pc, #172]	; (8001748 <main+0x10c>)
 800169a:	f003 f885 	bl	80047a8 <HAL_GPIO_WritePin>

	  //Motor
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 800);
 800169e:	4b2b      	ldr	r3, [pc, #172]	; (800174c <main+0x110>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80016a6:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 200);
 80016a8:	4b28      	ldr	r3, [pc, #160]	; (800174c <main+0x110>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	22c8      	movs	r2, #200	; 0xc8
 80016ae:	641a      	str	r2, [r3, #64]	; 0x40
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80016b0:	2201      	movs	r2, #1
 80016b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b6:	4826      	ldr	r0, [pc, #152]	; (8001750 <main+0x114>)
 80016b8:	f003 f876 	bl	80047a8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80016bc:	2201      	movs	r2, #1
 80016be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c2:	4823      	ldr	r0, [pc, #140]	; (8001750 <main+0x114>)
 80016c4:	f003 f870 	bl	80047a8 <HAL_GPIO_WritePin>

	  //printf("Timer: %d\n", timer);

	  HAL_Delay(1000);
 80016c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016cc:	f001 fdd6 	bl	800327c <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d6:	481c      	ldr	r0, [pc, #112]	; (8001748 <main+0x10c>)
 80016d8:	f003 f866 	bl	80047a8 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016e2:	481b      	ldr	r0, [pc, #108]	; (8001750 <main+0x114>)
 80016e4:	f003 f860 	bl	80047a8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016ee:	4818      	ldr	r0, [pc, #96]	; (8001750 <main+0x114>)
 80016f0:	f003 f85a 	bl	80047a8 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80016f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f8:	f001 fdc0 	bl	800327c <HAL_Delay>

	  //printf("AD: %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d\n", analog[0], analog[1], analog[2], analog[3], analog[4], analog[5], analog[6],
		//	  analog[7], analog[8], analog[9], analog[10], analog[11], analog[12], analog[13]);
	  printf("AD: %d, %d, %d, %d\n", ad1, ad2, ad3, ad4);
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <main+0x118>)
 80016fe:	6819      	ldr	r1, [r3, #0]
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <main+0x11c>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <main+0x120>)
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <main+0x124>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	4603      	mov	r3, r0
 8001710:	4814      	ldr	r0, [pc, #80]	; (8001764 <main+0x128>)
 8001712:	f00c fe85 	bl	800e420 <iprintf>

	  lcd_clear();
 8001716:	f7ff fcc3 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800171a:	2100      	movs	r1, #0
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff fccf 	bl	80010c0 <lcd_locate>
	  lcd_printf("LCD");
 8001722:	4811      	ldr	r0, [pc, #68]	; (8001768 <main+0x12c>)
 8001724:	f7ff fcf6 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8001728:	2101      	movs	r1, #1
 800172a:	2000      	movs	r0, #0
 800172c:	f7ff fcc8 	bl	80010c0 <lcd_locate>
	  lcd_printf("TEST");
 8001730:	480e      	ldr	r0, [pc, #56]	; (800176c <main+0x130>)
 8001732:	f7ff fcef 	bl	8001114 <lcd_printf>


	  printf("side: %d\n", side);
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <main+0x134>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4619      	mov	r1, r3
 800173c:	480d      	ldr	r0, [pc, #52]	; (8001774 <main+0x138>)
 800173e:	f00c fe6f 	bl	800e420 <iprintf>


	  cppLoop();
 8001742:	f001 fce1 	bl	8003108 <cppLoop>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001746:	e7a4      	b.n	8001692 <main+0x56>
 8001748:	40020000 	.word	0x40020000
 800174c:	2000287c 	.word	0x2000287c
 8001750:	40020c00 	.word	0x40020c00
 8001754:	20002a34 	.word	0x20002a34
 8001758:	20002a78 	.word	0x20002a78
 800175c:	20002be4 	.word	0x20002be4
 8001760:	200029f0 	.word	0x200029f0
 8001764:	0801263c 	.word	0x0801263c
 8001768:	08012650 	.word	0x08012650
 800176c:	08012654 	.word	0x08012654
 8001770:	200027e0 	.word	0x200027e0
 8001774:	0801265c 	.word	0x0801265c

08001778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b0a4      	sub	sp, #144	; 0x90
 800177c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800177e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001782:	2234      	movs	r2, #52	; 0x34
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f00c f804 	bl	800d794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800178c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	223c      	movs	r2, #60	; 0x3c
 80017a2:	2100      	movs	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f00b fff5 	bl	800d794 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4b37      	ldr	r3, [pc, #220]	; (800188c <SystemClock_Config+0x114>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a36      	ldr	r2, [pc, #216]	; (800188c <SystemClock_Config+0x114>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <SystemClock_Config+0x114>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b31      	ldr	r3, [pc, #196]	; (8001890 <SystemClock_Config+0x118>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a30      	ldr	r2, [pc, #192]	; (8001890 <SystemClock_Config+0x118>)
 80017d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b2e      	ldr	r3, [pc, #184]	; (8001890 <SystemClock_Config+0x118>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e2:	2301      	movs	r3, #1
 80017e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ec:	2302      	movs	r3, #2
 80017ee:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017f4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017f6:	2308      	movs	r3, #8
 80017f8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80017fa:	23b4      	movs	r3, #180	; 0xb4
 80017fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001800:	2302      	movs	r3, #2
 8001802:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001806:	2308      	movs	r3, #8
 8001808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 800180c:	2302      	movs	r3, #2
 800180e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001812:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001816:	4618      	mov	r0, r3
 8001818:	f004 f8b6 	bl	8005988 <HAL_RCC_OscConfig>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001822:	f000 fe6f 	bl	8002504 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001826:	f003 fc31 	bl	800508c <HAL_PWREx_EnableOverDrive>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001830:	f000 fe68 	bl	8002504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001834:	230f      	movs	r3, #15
 8001836:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001838:	2302      	movs	r3, #2
 800183a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800183c:	2300      	movs	r3, #0
 800183e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001840:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001844:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800184c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001850:	2105      	movs	r1, #5
 8001852:	4618      	mov	r0, r3
 8001854:	f003 fc6a 	bl	800512c <HAL_RCC_ClockConfig>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800185e:	f000 fe51 	bl	8002504 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001862:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001866:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001868:	2300      	movs	r3, #0
 800186a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800186c:	2300      	movs	r3, #0
 800186e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	4618      	mov	r0, r3
 8001876:	f003 fe49 	bl	800550c <HAL_RCCEx_PeriphCLKConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8001880:	f000 fe40 	bl	8002504 <Error_Handler>
  }
}
 8001884:	bf00      	nop
 8001886:	3790      	adds	r7, #144	; 0x90
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40023800 	.word	0x40023800
 8001890:	40007000 	.word	0x40007000

08001894 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800189a:	463b      	mov	r3, r7
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80018a6:	4b7c      	ldr	r3, [pc, #496]	; (8001a98 <MX_ADC2_Init+0x204>)
 80018a8:	4a7c      	ldr	r2, [pc, #496]	; (8001a9c <MX_ADC2_Init+0x208>)
 80018aa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018ac:	4b7a      	ldr	r3, [pc, #488]	; (8001a98 <MX_ADC2_Init+0x204>)
 80018ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018b2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80018b4:	4b78      	ldr	r3, [pc, #480]	; (8001a98 <MX_ADC2_Init+0x204>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80018ba:	4b77      	ldr	r3, [pc, #476]	; (8001a98 <MX_ADC2_Init+0x204>)
 80018bc:	2201      	movs	r2, #1
 80018be:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80018c0:	4b75      	ldr	r3, [pc, #468]	; (8001a98 <MX_ADC2_Init+0x204>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018c6:	4b74      	ldr	r3, [pc, #464]	; (8001a98 <MX_ADC2_Init+0x204>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018ce:	4b72      	ldr	r3, [pc, #456]	; (8001a98 <MX_ADC2_Init+0x204>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018d4:	4b70      	ldr	r3, [pc, #448]	; (8001a98 <MX_ADC2_Init+0x204>)
 80018d6:	4a72      	ldr	r2, [pc, #456]	; (8001aa0 <MX_ADC2_Init+0x20c>)
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018da:	4b6f      	ldr	r3, [pc, #444]	; (8001a98 <MX_ADC2_Init+0x204>)
 80018dc:	2200      	movs	r2, #0
 80018de:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80018e0:	4b6d      	ldr	r3, [pc, #436]	; (8001a98 <MX_ADC2_Init+0x204>)
 80018e2:	220e      	movs	r2, #14
 80018e4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80018e6:	4b6c      	ldr	r3, [pc, #432]	; (8001a98 <MX_ADC2_Init+0x204>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018ee:	4b6a      	ldr	r3, [pc, #424]	; (8001a98 <MX_ADC2_Init+0x204>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80018f4:	4868      	ldr	r0, [pc, #416]	; (8001a98 <MX_ADC2_Init+0x204>)
 80018f6:	f001 fce3 	bl	80032c0 <HAL_ADC_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001900:	f000 fe00 	bl	8002504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001904:	230a      	movs	r3, #10
 8001906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001908:	2301      	movs	r3, #1
 800190a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800190c:	2306      	movs	r3, #6
 800190e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001910:	463b      	mov	r3, r7
 8001912:	4619      	mov	r1, r3
 8001914:	4860      	ldr	r0, [pc, #384]	; (8001a98 <MX_ADC2_Init+0x204>)
 8001916:	f001 fe27 	bl	8003568 <HAL_ADC_ConfigChannel>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001920:	f000 fdf0 	bl	8002504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001924:	230b      	movs	r3, #11
 8001926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001928:	2302      	movs	r3, #2
 800192a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800192c:	463b      	mov	r3, r7
 800192e:	4619      	mov	r1, r3
 8001930:	4859      	ldr	r0, [pc, #356]	; (8001a98 <MX_ADC2_Init+0x204>)
 8001932:	f001 fe19 	bl	8003568 <HAL_ADC_ConfigChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800193c:	f000 fde2 	bl	8002504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001940:	230c      	movs	r3, #12
 8001942:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001944:	2303      	movs	r3, #3
 8001946:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001948:	463b      	mov	r3, r7
 800194a:	4619      	mov	r1, r3
 800194c:	4852      	ldr	r0, [pc, #328]	; (8001a98 <MX_ADC2_Init+0x204>)
 800194e:	f001 fe0b 	bl	8003568 <HAL_ADC_ConfigChannel>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8001958:	f000 fdd4 	bl	8002504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800195c:	230d      	movs	r3, #13
 800195e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001960:	2304      	movs	r3, #4
 8001962:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001964:	463b      	mov	r3, r7
 8001966:	4619      	mov	r1, r3
 8001968:	484b      	ldr	r0, [pc, #300]	; (8001a98 <MX_ADC2_Init+0x204>)
 800196a:	f001 fdfd 	bl	8003568 <HAL_ADC_ConfigChannel>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8001974:	f000 fdc6 	bl	8002504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001978:	2300      	movs	r3, #0
 800197a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800197c:	2305      	movs	r3, #5
 800197e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001980:	463b      	mov	r3, r7
 8001982:	4619      	mov	r1, r3
 8001984:	4844      	ldr	r0, [pc, #272]	; (8001a98 <MX_ADC2_Init+0x204>)
 8001986:	f001 fdef 	bl	8003568 <HAL_ADC_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8001990:	f000 fdb8 	bl	8002504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001994:	2301      	movs	r3, #1
 8001996:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001998:	2306      	movs	r3, #6
 800199a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800199c:	463b      	mov	r3, r7
 800199e:	4619      	mov	r1, r3
 80019a0:	483d      	ldr	r0, [pc, #244]	; (8001a98 <MX_ADC2_Init+0x204>)
 80019a2:	f001 fde1 	bl	8003568 <HAL_ADC_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80019ac:	f000 fdaa 	bl	8002504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80019b0:	2302      	movs	r3, #2
 80019b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80019b4:	2307      	movs	r3, #7
 80019b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80019b8:	463b      	mov	r3, r7
 80019ba:	4619      	mov	r1, r3
 80019bc:	4836      	ldr	r0, [pc, #216]	; (8001a98 <MX_ADC2_Init+0x204>)
 80019be:	f001 fdd3 	bl	8003568 <HAL_ADC_ConfigChannel>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80019c8:	f000 fd9c 	bl	8002504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80019cc:	2303      	movs	r3, #3
 80019ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80019d0:	2308      	movs	r3, #8
 80019d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80019d4:	463b      	mov	r3, r7
 80019d6:	4619      	mov	r1, r3
 80019d8:	482f      	ldr	r0, [pc, #188]	; (8001a98 <MX_ADC2_Init+0x204>)
 80019da:	f001 fdc5 	bl	8003568 <HAL_ADC_ConfigChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80019e4:	f000 fd8e 	bl	8002504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80019e8:	2304      	movs	r3, #4
 80019ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80019ec:	2309      	movs	r3, #9
 80019ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80019f0:	463b      	mov	r3, r7
 80019f2:	4619      	mov	r1, r3
 80019f4:	4828      	ldr	r0, [pc, #160]	; (8001a98 <MX_ADC2_Init+0x204>)
 80019f6:	f001 fdb7 	bl	8003568 <HAL_ADC_ConfigChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8001a00:	f000 fd80 	bl	8002504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001a04:	2305      	movs	r3, #5
 8001a06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8001a08:	230a      	movs	r3, #10
 8001a0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4821      	ldr	r0, [pc, #132]	; (8001a98 <MX_ADC2_Init+0x204>)
 8001a12:	f001 fda9 	bl	8003568 <HAL_ADC_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8001a1c:	f000 fd72 	bl	8002504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001a20:	2306      	movs	r3, #6
 8001a22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001a24:	230b      	movs	r3, #11
 8001a26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a28:	463b      	mov	r3, r7
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	481a      	ldr	r0, [pc, #104]	; (8001a98 <MX_ADC2_Init+0x204>)
 8001a2e:	f001 fd9b 	bl	8003568 <HAL_ADC_ConfigChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8001a38:	f000 fd64 	bl	8002504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001a3c:	2307      	movs	r3, #7
 8001a3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001a40:	230c      	movs	r3, #12
 8001a42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a44:	463b      	mov	r3, r7
 8001a46:	4619      	mov	r1, r3
 8001a48:	4813      	ldr	r0, [pc, #76]	; (8001a98 <MX_ADC2_Init+0x204>)
 8001a4a:	f001 fd8d 	bl	8003568 <HAL_ADC_ConfigChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8001a54:	f000 fd56 	bl	8002504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001a58:	2308      	movs	r3, #8
 8001a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8001a5c:	230d      	movs	r3, #13
 8001a5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a60:	463b      	mov	r3, r7
 8001a62:	4619      	mov	r1, r3
 8001a64:	480c      	ldr	r0, [pc, #48]	; (8001a98 <MX_ADC2_Init+0x204>)
 8001a66:	f001 fd7f 	bl	8003568 <HAL_ADC_ConfigChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8001a70:	f000 fd48 	bl	8002504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001a74:	2309      	movs	r3, #9
 8001a76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8001a78:	230e      	movs	r3, #14
 8001a7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	; (8001a98 <MX_ADC2_Init+0x204>)
 8001a82:	f001 fd71 	bl	8003568 <HAL_ADC_ConfigChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8001a8c:	f000 fd3a 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200028bc 	.word	0x200028bc
 8001a9c:	40012100 	.word	0x40012100
 8001aa0:	0f000001 	.word	0x0f000001

08001aa4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001aa8:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <MX_I2C1_Init+0x50>)
 8001aaa:	4a13      	ldr	r2, [pc, #76]	; (8001af8 <MX_I2C1_Init+0x54>)
 8001aac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001aae:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <MX_I2C1_Init+0x50>)
 8001ab0:	4a12      	ldr	r2, [pc, #72]	; (8001afc <MX_I2C1_Init+0x58>)
 8001ab2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ab4:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <MX_I2C1_Init+0x50>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001aba:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <MX_I2C1_Init+0x50>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <MX_I2C1_Init+0x50>)
 8001ac2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ac6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <MX_I2C1_Init+0x50>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <MX_I2C1_Init+0x50>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ad4:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <MX_I2C1_Init+0x50>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <MX_I2C1_Init+0x50>)
 8001adc:	2280      	movs	r2, #128	; 0x80
 8001ade:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ae0:	4804      	ldr	r0, [pc, #16]	; (8001af4 <MX_I2C1_Init+0x50>)
 8001ae2:	f002 fe93 	bl	800480c <HAL_I2C_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001aec:	f000 fd0a 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20002904 	.word	0x20002904
 8001af8:	40005400 	.word	0x40005400
 8001afc:	000186a0 	.word	0x000186a0

08001b00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <MX_I2C2_Init+0x50>)
 8001b06:	4a13      	ldr	r2, [pc, #76]	; (8001b54 <MX_I2C2_Init+0x54>)
 8001b08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b0a:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <MX_I2C2_Init+0x50>)
 8001b0c:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <MX_I2C2_Init+0x58>)
 8001b0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b10:	4b0f      	ldr	r3, [pc, #60]	; (8001b50 <MX_I2C2_Init+0x50>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <MX_I2C2_Init+0x50>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <MX_I2C2_Init+0x50>)
 8001b1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <MX_I2C2_Init+0x50>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <MX_I2C2_Init+0x50>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b30:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <MX_I2C2_Init+0x50>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <MX_I2C2_Init+0x50>)
 8001b38:	2280      	movs	r2, #128	; 0x80
 8001b3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b3c:	4804      	ldr	r0, [pc, #16]	; (8001b50 <MX_I2C2_Init+0x50>)
 8001b3e:	f002 fe65 	bl	800480c <HAL_I2C_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b48:	f000 fcdc 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20002998 	.word	0x20002998
 8001b54:	40005800 	.word	0x40005800
 8001b58:	000186a0 	.word	0x000186a0

08001b5c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <MX_SDIO_SD_Init+0x38>)
 8001b62:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <MX_SDIO_SD_Init+0x3c>)
 8001b64:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <MX_SDIO_SD_Init+0x38>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <MX_SDIO_SD_Init+0x38>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <MX_SDIO_SD_Init+0x38>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <MX_SDIO_SD_Init+0x38>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <MX_SDIO_SD_Init+0x38>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <MX_SDIO_SD_Init+0x38>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	20002b60 	.word	0x20002b60
 8001b98:	40012c00 	.word	0x40012c00

08001b9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001ba2:	4a18      	ldr	r2, [pc, #96]	; (8001c04 <MX_SPI2_Init+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001ba8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bae:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bb4:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bc0:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001bc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bcc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001be8:	220a      	movs	r2, #10
 8001bea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <MX_SPI2_Init+0x64>)
 8001bee:	f005 fbf5 	bl	80073dc <HAL_SPI_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001bf8:	f000 fc84 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	200027e4 	.word	0x200027e4
 8001c04:	40003800 	.word	0x40003800

08001c08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b09a      	sub	sp, #104	; 0x68
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c0e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c12:	2224      	movs	r2, #36	; 0x24
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f00b fdbc 	bl	800d794 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c26:	f107 0320 	add.w	r3, r7, #32
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
 8001c34:	611a      	str	r2, [r3, #16]
 8001c36:	615a      	str	r2, [r3, #20]
 8001c38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f00b fda7 	bl	800d794 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c46:	4b42      	ldr	r3, [pc, #264]	; (8001d50 <MX_TIM1_Init+0x148>)
 8001c48:	4a42      	ldr	r2, [pc, #264]	; (8001d54 <MX_TIM1_Init+0x14c>)
 8001c4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c4c:	4b40      	ldr	r3, [pc, #256]	; (8001d50 <MX_TIM1_Init+0x148>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c52:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <MX_TIM1_Init+0x148>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c58:	4b3d      	ldr	r3, [pc, #244]	; (8001d50 <MX_TIM1_Init+0x148>)
 8001c5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c60:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <MX_TIM1_Init+0x148>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c66:	4b3a      	ldr	r3, [pc, #232]	; (8001d50 <MX_TIM1_Init+0x148>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6c:	4b38      	ldr	r3, [pc, #224]	; (8001d50 <MX_TIM1_Init+0x148>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c72:	4837      	ldr	r0, [pc, #220]	; (8001d50 <MX_TIM1_Init+0x148>)
 8001c74:	f005 fc65 	bl	8007542 <HAL_TIM_PWM_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001c7e:	f000 fc41 	bl	8002504 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c82:	2303      	movs	r3, #3
 8001c84:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c86:	2300      	movs	r3, #0
 8001c88:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c96:	2300      	movs	r3, #0
 8001c98:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001ca6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001caa:	4619      	mov	r1, r3
 8001cac:	4828      	ldr	r0, [pc, #160]	; (8001d50 <MX_TIM1_Init+0x148>)
 8001cae:	f005 fcb1 	bl	8007614 <HAL_TIM_Encoder_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8001cb8:	f000 fc24 	bl	8002504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cc4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4821      	ldr	r0, [pc, #132]	; (8001d50 <MX_TIM1_Init+0x148>)
 8001ccc:	f006 f9d8 	bl	8008080 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8001cd6:	f000 fc15 	bl	8002504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cda:	2360      	movs	r3, #96	; 0x60
 8001cdc:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cf6:	f107 0320 	add.w	r3, r7, #32
 8001cfa:	2208      	movs	r2, #8
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4814      	ldr	r0, [pc, #80]	; (8001d50 <MX_TIM1_Init+0x148>)
 8001d00:	f005 fe5a 	bl	80079b8 <HAL_TIM_PWM_ConfigChannel>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001d0a:	f000 fbfb 	bl	8002504 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d26:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4807      	ldr	r0, [pc, #28]	; (8001d50 <MX_TIM1_Init+0x148>)
 8001d32:	f006 fa21 	bl	8008178 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001d3c:	f000 fbe2 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d40:	4803      	ldr	r0, [pc, #12]	; (8001d50 <MX_TIM1_Init+0x148>)
 8001d42:	f000 ff99 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 8001d46:	bf00      	nop
 8001d48:	3768      	adds	r7, #104	; 0x68
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20002b20 	.word	0x20002b20
 8001d54:	40010000 	.word	0x40010000

08001d58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5e:	f107 0320 	add.w	r3, r7, #32
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]
 8001d74:	611a      	str	r2, [r3, #16]
 8001d76:	615a      	str	r2, [r3, #20]
 8001d78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d7a:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <MX_TIM3_Init+0xc0>)
 8001d7c:	4a27      	ldr	r2, [pc, #156]	; (8001e1c <MX_TIM3_Init+0xc4>)
 8001d7e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <MX_TIM3_Init+0xc0>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d86:	4b24      	ldr	r3, [pc, #144]	; (8001e18 <MX_TIM3_Init+0xc0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d8c:	4b22      	ldr	r3, [pc, #136]	; (8001e18 <MX_TIM3_Init+0xc0>)
 8001d8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d94:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <MX_TIM3_Init+0xc0>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d9a:	4b1f      	ldr	r3, [pc, #124]	; (8001e18 <MX_TIM3_Init+0xc0>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001da0:	481d      	ldr	r0, [pc, #116]	; (8001e18 <MX_TIM3_Init+0xc0>)
 8001da2:	f005 fbce 	bl	8007542 <HAL_TIM_PWM_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001dac:	f000 fbaa 	bl	8002504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db0:	2300      	movs	r3, #0
 8001db2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db8:	f107 0320 	add.w	r3, r7, #32
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4816      	ldr	r0, [pc, #88]	; (8001e18 <MX_TIM3_Init+0xc0>)
 8001dc0:	f006 f95e 	bl	8008080 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001dca:	f000 fb9b 	bl	8002504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dce:	2360      	movs	r3, #96	; 0x60
 8001dd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	2200      	movs	r2, #0
 8001de2:	4619      	mov	r1, r3
 8001de4:	480c      	ldr	r0, [pc, #48]	; (8001e18 <MX_TIM3_Init+0xc0>)
 8001de6:	f005 fde7 	bl	80079b8 <HAL_TIM_PWM_ConfigChannel>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001df0:	f000 fb88 	bl	8002504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001df4:	1d3b      	adds	r3, r7, #4
 8001df6:	2204      	movs	r2, #4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4807      	ldr	r0, [pc, #28]	; (8001e18 <MX_TIM3_Init+0xc0>)
 8001dfc:	f005 fddc 	bl	80079b8 <HAL_TIM_PWM_ConfigChannel>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001e06:	f000 fb7d 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e0a:	4803      	ldr	r0, [pc, #12]	; (8001e18 <MX_TIM3_Init+0xc0>)
 8001e0c:	f000 ff34 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 8001e10:	bf00      	nop
 8001e12:	3728      	adds	r7, #40	; 0x28
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	200029f4 	.word	0x200029f4
 8001e1c:	40000400 	.word	0x40000400

08001e20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e26:	f107 0320 	add.w	r3, r7, #32
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	611a      	str	r2, [r3, #16]
 8001e3e:	615a      	str	r2, [r3, #20]
 8001e40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e42:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <MX_TIM4_Init+0xc0>)
 8001e44:	4a27      	ldr	r2, [pc, #156]	; (8001ee4 <MX_TIM4_Init+0xc4>)
 8001e46:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e48:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <MX_TIM4_Init+0xc0>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4e:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <MX_TIM4_Init+0xc0>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8001e54:	4b22      	ldr	r3, [pc, #136]	; (8001ee0 <MX_TIM4_Init+0xc0>)
 8001e56:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001e5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5c:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <MX_TIM4_Init+0xc0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e62:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <MX_TIM4_Init+0xc0>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e68:	481d      	ldr	r0, [pc, #116]	; (8001ee0 <MX_TIM4_Init+0xc0>)
 8001e6a:	f005 fb6a 	bl	8007542 <HAL_TIM_PWM_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001e74:	f000 fb46 	bl	8002504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e80:	f107 0320 	add.w	r3, r7, #32
 8001e84:	4619      	mov	r1, r3
 8001e86:	4816      	ldr	r0, [pc, #88]	; (8001ee0 <MX_TIM4_Init+0xc0>)
 8001e88:	f006 f8fa 	bl	8008080 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001e92:	f000 fb37 	bl	8002504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e96:	2360      	movs	r3, #96	; 0x60
 8001e98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	4619      	mov	r1, r3
 8001eac:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <MX_TIM4_Init+0xc0>)
 8001eae:	f005 fd83 	bl	80079b8 <HAL_TIM_PWM_ConfigChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001eb8:	f000 fb24 	bl	8002504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <MX_TIM4_Init+0xc0>)
 8001ec4:	f005 fd78 	bl	80079b8 <HAL_TIM_PWM_ConfigChannel>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001ece:	f000 fb19 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ed2:	4803      	ldr	r0, [pc, #12]	; (8001ee0 <MX_TIM4_Init+0xc0>)
 8001ed4:	f000 fed0 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	; 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2000287c 	.word	0x2000287c
 8001ee4:	40000800 	.word	0x40000800

08001ee8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eee:	463b      	mov	r3, r7
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <MX_TIM6_Init+0x64>)
 8001ef8:	4a15      	ldr	r2, [pc, #84]	; (8001f50 <MX_TIM6_Init+0x68>)
 8001efa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <MX_TIM6_Init+0x64>)
 8001efe:	2259      	movs	r2, #89	; 0x59
 8001f00:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f02:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <MX_TIM6_Init+0x64>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001f08:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <MX_TIM6_Init+0x64>)
 8001f0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f0e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <MX_TIM6_Init+0x64>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f16:	480d      	ldr	r0, [pc, #52]	; (8001f4c <MX_TIM6_Init+0x64>)
 8001f18:	f005 fac4 	bl	80074a4 <HAL_TIM_Base_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001f22:	f000 faef 	bl	8002504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f26:	2300      	movs	r3, #0
 8001f28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f2e:	463b      	mov	r3, r7
 8001f30:	4619      	mov	r1, r3
 8001f32:	4806      	ldr	r0, [pc, #24]	; (8001f4c <MX_TIM6_Init+0x64>)
 8001f34:	f006 f8a4 	bl	8008080 <HAL_TIMEx_MasterConfigSynchronization>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001f3e:	f000 fae1 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20002ae0 	.word	0x20002ae0
 8001f50:	40001000 	.word	0x40001000

08001f54 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5a:	463b      	mov	r3, r7
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <MX_TIM7_Init+0x64>)
 8001f64:	4a15      	ldr	r2, [pc, #84]	; (8001fbc <MX_TIM7_Init+0x68>)
 8001f66:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001f68:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <MX_TIM7_Init+0x64>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6e:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <MX_TIM7_Init+0x64>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <MX_TIM7_Init+0x64>)
 8001f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f7a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <MX_TIM7_Init+0x64>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001f82:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <MX_TIM7_Init+0x64>)
 8001f84:	f005 fa8e 	bl	80074a4 <HAL_TIM_Base_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001f8e:	f000 fab9 	bl	8002504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4806      	ldr	r0, [pc, #24]	; (8001fb8 <MX_TIM7_Init+0x64>)
 8001fa0:	f006 f86e 	bl	8008080 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001faa:	f000 faab 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20002c88 	.word	0x20002c88
 8001fbc:	40001400 	.word	0x40001400

08001fc0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	; 0x30
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	2224      	movs	r2, #36	; 0x24
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f00b fbe0 	bl	800d794 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001fdc:	4b22      	ldr	r3, [pc, #136]	; (8002068 <MX_TIM8_Init+0xa8>)
 8001fde:	4a23      	ldr	r2, [pc, #140]	; (800206c <MX_TIM8_Init+0xac>)
 8001fe0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001fe2:	4b21      	ldr	r3, [pc, #132]	; (8002068 <MX_TIM8_Init+0xa8>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <MX_TIM8_Init+0xa8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <MX_TIM8_Init+0xa8>)
 8001ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <MX_TIM8_Init+0xa8>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <MX_TIM8_Init+0xa8>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <MX_TIM8_Init+0xa8>)
 8002004:	2200      	movs	r2, #0
 8002006:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002008:	2303      	movs	r3, #3
 800200a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800200c:	2300      	movs	r3, #0
 800200e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002010:	2301      	movs	r3, #1
 8002012:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002014:	2300      	movs	r3, #0
 8002016:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800201c:	2300      	movs	r3, #0
 800201e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002020:	2301      	movs	r3, #1
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002024:	2300      	movs	r3, #0
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002028:	2300      	movs	r3, #0
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800202c:	f107 030c 	add.w	r3, r7, #12
 8002030:	4619      	mov	r1, r3
 8002032:	480d      	ldr	r0, [pc, #52]	; (8002068 <MX_TIM8_Init+0xa8>)
 8002034:	f005 faee 	bl	8007614 <HAL_TIM_Encoder_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800203e:	f000 fa61 	bl	8002504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800204a:	1d3b      	adds	r3, r7, #4
 800204c:	4619      	mov	r1, r3
 800204e:	4806      	ldr	r0, [pc, #24]	; (8002068 <MX_TIM8_Init+0xa8>)
 8002050:	f006 f816 	bl	8008080 <HAL_TIMEx_MasterConfigSynchronization>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800205a:	f000 fa53 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800205e:	bf00      	nop
 8002060:	3730      	adds	r7, #48	; 0x30
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000283c 	.word	0x2000283c
 800206c:	40010400 	.word	0x40010400

08002070 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002076:	1d3b      	adds	r3, r7, #4
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
 8002084:	615a      	str	r2, [r3, #20]
 8002086:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <MX_TIM10_Init+0x94>)
 800208a:	4a1f      	ldr	r2, [pc, #124]	; (8002108 <MX_TIM10_Init+0x98>)
 800208c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <MX_TIM10_Init+0x94>)
 8002090:	2200      	movs	r2, #0
 8002092:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002094:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <MX_TIM10_Init+0x94>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800209a:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <MX_TIM10_Init+0x94>)
 800209c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020a0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a2:	4b18      	ldr	r3, [pc, #96]	; (8002104 <MX_TIM10_Init+0x94>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a8:	4b16      	ldr	r3, [pc, #88]	; (8002104 <MX_TIM10_Init+0x94>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80020ae:	4815      	ldr	r0, [pc, #84]	; (8002104 <MX_TIM10_Init+0x94>)
 80020b0:	f005 f9f8 	bl	80074a4 <HAL_TIM_Base_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80020ba:	f000 fa23 	bl	8002504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80020be:	4811      	ldr	r0, [pc, #68]	; (8002104 <MX_TIM10_Init+0x94>)
 80020c0:	f005 fa3f 	bl	8007542 <HAL_TIM_PWM_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80020ca:	f000 fa1b 	bl	8002504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ce:	2360      	movs	r3, #96	; 0x60
 80020d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	2200      	movs	r2, #0
 80020e2:	4619      	mov	r1, r3
 80020e4:	4807      	ldr	r0, [pc, #28]	; (8002104 <MX_TIM10_Init+0x94>)
 80020e6:	f005 fc67 	bl	80079b8 <HAL_TIM_PWM_ConfigChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80020f0:	f000 fa08 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80020f4:	4803      	ldr	r0, [pc, #12]	; (8002104 <MX_TIM10_Init+0x94>)
 80020f6:	f000 fdbf 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 80020fa:	bf00      	nop
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20002958 	.word	0x20002958
 8002108:	40014400 	.word	0x40014400

0800210c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
 8002120:	615a      	str	r2, [r3, #20]
 8002122:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002124:	4b1e      	ldr	r3, [pc, #120]	; (80021a0 <MX_TIM11_Init+0x94>)
 8002126:	4a1f      	ldr	r2, [pc, #124]	; (80021a4 <MX_TIM11_Init+0x98>)
 8002128:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800212a:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <MX_TIM11_Init+0x94>)
 800212c:	2200      	movs	r2, #0
 800212e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002130:	4b1b      	ldr	r3, [pc, #108]	; (80021a0 <MX_TIM11_Init+0x94>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <MX_TIM11_Init+0x94>)
 8002138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800213c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213e:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <MX_TIM11_Init+0x94>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002144:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <MX_TIM11_Init+0x94>)
 8002146:	2200      	movs	r2, #0
 8002148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800214a:	4815      	ldr	r0, [pc, #84]	; (80021a0 <MX_TIM11_Init+0x94>)
 800214c:	f005 f9aa 	bl	80074a4 <HAL_TIM_Base_Init>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002156:	f000 f9d5 	bl	8002504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800215a:	4811      	ldr	r0, [pc, #68]	; (80021a0 <MX_TIM11_Init+0x94>)
 800215c:	f005 f9f1 	bl	8007542 <HAL_TIM_PWM_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002166:	f000 f9cd 	bl	8002504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800216a:	2360      	movs	r3, #96	; 0x60
 800216c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800217a:	1d3b      	adds	r3, r7, #4
 800217c:	2200      	movs	r2, #0
 800217e:	4619      	mov	r1, r3
 8002180:	4807      	ldr	r0, [pc, #28]	; (80021a0 <MX_TIM11_Init+0x94>)
 8002182:	f005 fc19 	bl	80079b8 <HAL_TIM_PWM_ConfigChannel>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800218c:	f000 f9ba 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002190:	4803      	ldr	r0, [pc, #12]	; (80021a0 <MX_TIM11_Init+0x94>)
 8002192:	f000 fd71 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 8002196:	bf00      	nop
 8002198:	3720      	adds	r7, #32
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20002a38 	.word	0x20002a38
 80021a4:	40014800 	.word	0x40014800

080021a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021ae:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <MX_USART2_UART_Init+0x50>)
 80021b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021ce:	220c      	movs	r2, #12
 80021d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80021de:	4805      	ldr	r0, [pc, #20]	; (80021f4 <MX_USART2_UART_Init+0x4c>)
 80021e0:	f006 f830 	bl	8008244 <HAL_UART_Init>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80021ea:	f000 f98b 	bl	8002504 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20002be8 	.word	0x20002be8
 80021f8:	40004400 	.word	0x40004400

080021fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <MX_DMA_Init+0x5c>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a13      	ldr	r2, [pc, #76]	; (8002258 <MX_DMA_Init+0x5c>)
 800220c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <MX_DMA_Init+0x5c>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	203a      	movs	r0, #58	; 0x3a
 8002224:	f001 fd2b 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002228:	203a      	movs	r0, #58	; 0x3a
 800222a:	f001 fd44 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	203b      	movs	r0, #59	; 0x3b
 8002234:	f001 fd23 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002238:	203b      	movs	r0, #59	; 0x3b
 800223a:	f001 fd3c 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	2045      	movs	r0, #69	; 0x45
 8002244:	f001 fd1b 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002248:	2045      	movs	r0, #69	; 0x45
 800224a:	f001 fd34 	bl	8003cb6 <HAL_NVIC_EnableIRQ>

}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800

0800225c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b08c      	sub	sp, #48	; 0x30
 8002260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002262:	f107 031c 	add.w	r3, r7, #28
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
 8002270:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
 8002276:	4b9c      	ldr	r3, [pc, #624]	; (80024e8 <MX_GPIO_Init+0x28c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	4a9b      	ldr	r2, [pc, #620]	; (80024e8 <MX_GPIO_Init+0x28c>)
 800227c:	f043 0310 	orr.w	r3, r3, #16
 8002280:	6313      	str	r3, [r2, #48]	; 0x30
 8002282:	4b99      	ldr	r3, [pc, #612]	; (80024e8 <MX_GPIO_Init+0x28c>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	61bb      	str	r3, [r7, #24]
 800228c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	4b95      	ldr	r3, [pc, #596]	; (80024e8 <MX_GPIO_Init+0x28c>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a94      	ldr	r2, [pc, #592]	; (80024e8 <MX_GPIO_Init+0x28c>)
 8002298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b92      	ldr	r3, [pc, #584]	; (80024e8 <MX_GPIO_Init+0x28c>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a6:	617b      	str	r3, [r7, #20]
 80022a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	4b8e      	ldr	r3, [pc, #568]	; (80024e8 <MX_GPIO_Init+0x28c>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a8d      	ldr	r2, [pc, #564]	; (80024e8 <MX_GPIO_Init+0x28c>)
 80022b4:	f043 0304 	orr.w	r3, r3, #4
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b8b      	ldr	r3, [pc, #556]	; (80024e8 <MX_GPIO_Init+0x28c>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0304 	and.w	r3, r3, #4
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	4b87      	ldr	r3, [pc, #540]	; (80024e8 <MX_GPIO_Init+0x28c>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a86      	ldr	r2, [pc, #536]	; (80024e8 <MX_GPIO_Init+0x28c>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b84      	ldr	r3, [pc, #528]	; (80024e8 <MX_GPIO_Init+0x28c>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	4b80      	ldr	r3, [pc, #512]	; (80024e8 <MX_GPIO_Init+0x28c>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a7f      	ldr	r2, [pc, #508]	; (80024e8 <MX_GPIO_Init+0x28c>)
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b7d      	ldr	r3, [pc, #500]	; (80024e8 <MX_GPIO_Init+0x28c>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	4b79      	ldr	r3, [pc, #484]	; (80024e8 <MX_GPIO_Init+0x28c>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	4a78      	ldr	r2, [pc, #480]	; (80024e8 <MX_GPIO_Init+0x28c>)
 8002308:	f043 0308 	orr.w	r3, r3, #8
 800230c:	6313      	str	r3, [r2, #48]	; 0x30
 800230e:	4b76      	ldr	r3, [pc, #472]	; (80024e8 <MX_GPIO_Init+0x28c>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800231a:	2200      	movs	r2, #0
 800231c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002320:	4872      	ldr	r0, [pc, #456]	; (80024ec <MX_GPIO_Init+0x290>)
 8002322:	f002 fa41 	bl	80047a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002326:	2200      	movs	r2, #0
 8002328:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800232c:	4870      	ldr	r0, [pc, #448]	; (80024f0 <MX_GPIO_Init+0x294>)
 800232e:	f002 fa3b 	bl	80047a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8002332:	2200      	movs	r2, #0
 8002334:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002338:	486e      	ldr	r0, [pc, #440]	; (80024f4 <MX_GPIO_Init+0x298>)
 800233a:	f002 fa35 	bl	80047a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800233e:	2200      	movs	r2, #0
 8002340:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8002344:	486c      	ldr	r0, [pc, #432]	; (80024f8 <MX_GPIO_Init+0x29c>)
 8002346:	f002 fa2f 	bl	80047a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800234a:	2304      	movs	r3, #4
 800234c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800234e:	2300      	movs	r3, #0
 8002350:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002352:	2301      	movs	r3, #1
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002356:	f107 031c 	add.w	r3, r7, #28
 800235a:	4619      	mov	r1, r3
 800235c:	4863      	ldr	r0, [pc, #396]	; (80024ec <MX_GPIO_Init+0x290>)
 800235e:	f002 f861 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002362:	230f      	movs	r3, #15
 8002364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002366:	2303      	movs	r3, #3
 8002368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800236e:	f107 031c 	add.w	r3, r7, #28
 8002372:	4619      	mov	r1, r3
 8002374:	4861      	ldr	r0, [pc, #388]	; (80024fc <MX_GPIO_Init+0x2a0>)
 8002376:	f002 f855 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800237a:	23e1      	movs	r3, #225	; 0xe1
 800237c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800237e:	2303      	movs	r3, #3
 8002380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002386:	f107 031c 	add.w	r3, r7, #28
 800238a:	4619      	mov	r1, r3
 800238c:	485a      	ldr	r0, [pc, #360]	; (80024f8 <MX_GPIO_Init+0x29c>)
 800238e:	f002 f849 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002392:	2303      	movs	r3, #3
 8002394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002396:	2303      	movs	r3, #3
 8002398:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239e:	f107 031c 	add.w	r3, r7, #28
 80023a2:	4619      	mov	r1, r3
 80023a4:	4852      	ldr	r0, [pc, #328]	; (80024f0 <MX_GPIO_Init+0x294>)
 80023a6:	f002 f83d 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023aa:	2304      	movs	r3, #4
 80023ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023ae:	4b54      	ldr	r3, [pc, #336]	; (8002500 <MX_GPIO_Init+0x2a4>)
 80023b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023b2:	2301      	movs	r3, #1
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	4619      	mov	r1, r3
 80023bc:	484c      	ldr	r0, [pc, #304]	; (80024f0 <MX_GPIO_Init+0x294>)
 80023be:	f002 f831 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80023c2:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80023c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023c8:	4b4d      	ldr	r3, [pc, #308]	; (8002500 <MX_GPIO_Init+0x2a4>)
 80023ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023cc:	2301      	movs	r3, #1
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023d0:	f107 031c 	add.w	r3, r7, #28
 80023d4:	4619      	mov	r1, r3
 80023d6:	4845      	ldr	r0, [pc, #276]	; (80024ec <MX_GPIO_Init+0x290>)
 80023d8:	f002 f824 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80023dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e2:	2301      	movs	r3, #1
 80023e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ea:	2300      	movs	r3, #0
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023ee:	f107 031c 	add.w	r3, r7, #28
 80023f2:	4619      	mov	r1, r3
 80023f4:	483d      	ldr	r0, [pc, #244]	; (80024ec <MX_GPIO_Init+0x290>)
 80023f6:	f002 f815 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80023fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002400:	2301      	movs	r3, #1
 8002402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002408:	2300      	movs	r3, #0
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240c:	f107 031c 	add.w	r3, r7, #28
 8002410:	4619      	mov	r1, r3
 8002412:	4837      	ldr	r0, [pc, #220]	; (80024f0 <MX_GPIO_Init+0x294>)
 8002414:	f002 f806 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002418:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800241c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002422:	2301      	movs	r3, #1
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002426:	f107 031c 	add.w	r3, r7, #28
 800242a:	4619      	mov	r1, r3
 800242c:	4831      	ldr	r0, [pc, #196]	; (80024f4 <MX_GPIO_Init+0x298>)
 800242e:	f001 fff9 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002432:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002438:	2301      	movs	r3, #1
 800243a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002440:	2300      	movs	r3, #0
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002444:	f107 031c 	add.w	r3, r7, #28
 8002448:	4619      	mov	r1, r3
 800244a:	482a      	ldr	r0, [pc, #168]	; (80024f4 <MX_GPIO_Init+0x298>)
 800244c:	f001 ffea 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002450:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002454:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002456:	2301      	movs	r3, #1
 8002458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245a:	2300      	movs	r3, #0
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245e:	2300      	movs	r3, #0
 8002460:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002462:	f107 031c 	add.w	r3, r7, #28
 8002466:	4619      	mov	r1, r3
 8002468:	4823      	ldr	r0, [pc, #140]	; (80024f8 <MX_GPIO_Init+0x29c>)
 800246a:	f001 ffdb 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800246e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002474:	2300      	movs	r3, #0
 8002476:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247c:	f107 031c 	add.w	r3, r7, #28
 8002480:	4619      	mov	r1, r3
 8002482:	481d      	ldr	r0, [pc, #116]	; (80024f8 <MX_GPIO_Init+0x29c>)
 8002484:	f001 ffce 	bl	8004424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002488:	2301      	movs	r3, #1
 800248a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800248c:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <MX_GPIO_Init+0x2a4>)
 800248e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002490:	2301      	movs	r3, #1
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002494:	f107 031c 	add.w	r3, r7, #28
 8002498:	4619      	mov	r1, r3
 800249a:	4816      	ldr	r0, [pc, #88]	; (80024f4 <MX_GPIO_Init+0x298>)
 800249c:	f001 ffc2 	bl	8004424 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80024a0:	2200      	movs	r2, #0
 80024a2:	2100      	movs	r1, #0
 80024a4:	2006      	movs	r0, #6
 80024a6:	f001 fbea 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80024aa:	2006      	movs	r0, #6
 80024ac:	f001 fc03 	bl	8003cb6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80024b0:	2200      	movs	r2, #0
 80024b2:	2100      	movs	r1, #0
 80024b4:	2008      	movs	r0, #8
 80024b6:	f001 fbe2 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80024ba:	2008      	movs	r0, #8
 80024bc:	f001 fbfb 	bl	8003cb6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2100      	movs	r1, #0
 80024c4:	2017      	movs	r0, #23
 80024c6:	f001 fbda 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80024ca:	2017      	movs	r0, #23
 80024cc:	f001 fbf3 	bl	8003cb6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024d0:	2200      	movs	r2, #0
 80024d2:	2100      	movs	r1, #0
 80024d4:	2028      	movs	r0, #40	; 0x28
 80024d6:	f001 fbd2 	bl	8003c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024da:	2028      	movs	r0, #40	; 0x28
 80024dc:	f001 fbeb 	bl	8003cb6 <HAL_NVIC_EnableIRQ>

}
 80024e0:	bf00      	nop
 80024e2:	3730      	adds	r7, #48	; 0x30
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40023800 	.word	0x40023800
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40020400 	.word	0x40020400
 80024f4:	40020c00 	.word	0x40020c00
 80024f8:	40020000 	.word	0x40020000
 80024fc:	40020800 	.word	0x40020800
 8002500:	10210000 	.word	0x10210000

08002504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002508:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800250a:	e7fe      	b.n	800250a <Error_Handler+0x6>

0800250c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_MspInit+0x4c>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <HAL_MspInit+0x4c>)
 800251c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002520:	6453      	str	r3, [r2, #68]	; 0x44
 8002522:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <HAL_MspInit+0x4c>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	603b      	str	r3, [r7, #0]
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_MspInit+0x4c>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	4a08      	ldr	r2, [pc, #32]	; (8002558 <HAL_MspInit+0x4c>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253c:	6413      	str	r3, [r2, #64]	; 0x40
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_MspInit+0x4c>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800

0800255c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08c      	sub	sp, #48	; 0x30
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 031c 	add.w	r3, r7, #28
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a4a      	ldr	r2, [pc, #296]	; (80026a4 <HAL_ADC_MspInit+0x148>)
 800257a:	4293      	cmp	r3, r2
 800257c:	f040 808e 	bne.w	800269c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002580:	2300      	movs	r3, #0
 8002582:	61bb      	str	r3, [r7, #24]
 8002584:	4b48      	ldr	r3, [pc, #288]	; (80026a8 <HAL_ADC_MspInit+0x14c>)
 8002586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002588:	4a47      	ldr	r2, [pc, #284]	; (80026a8 <HAL_ADC_MspInit+0x14c>)
 800258a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800258e:	6453      	str	r3, [r2, #68]	; 0x44
 8002590:	4b45      	ldr	r3, [pc, #276]	; (80026a8 <HAL_ADC_MspInit+0x14c>)
 8002592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	4b41      	ldr	r3, [pc, #260]	; (80026a8 <HAL_ADC_MspInit+0x14c>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	4a40      	ldr	r2, [pc, #256]	; (80026a8 <HAL_ADC_MspInit+0x14c>)
 80025a6:	f043 0304 	orr.w	r3, r3, #4
 80025aa:	6313      	str	r3, [r2, #48]	; 0x30
 80025ac:	4b3e      	ldr	r3, [pc, #248]	; (80026a8 <HAL_ADC_MspInit+0x14c>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	4b3a      	ldr	r3, [pc, #232]	; (80026a8 <HAL_ADC_MspInit+0x14c>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	4a39      	ldr	r2, [pc, #228]	; (80026a8 <HAL_ADC_MspInit+0x14c>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6313      	str	r3, [r2, #48]	; 0x30
 80025c8:	4b37      	ldr	r3, [pc, #220]	; (80026a8 <HAL_ADC_MspInit+0x14c>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025d4:	2300      	movs	r3, #0
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	4b33      	ldr	r3, [pc, #204]	; (80026a8 <HAL_ADC_MspInit+0x14c>)
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	4a32      	ldr	r2, [pc, #200]	; (80026a8 <HAL_ADC_MspInit+0x14c>)
 80025de:	f043 0302 	orr.w	r3, r3, #2
 80025e2:	6313      	str	r3, [r2, #48]	; 0x30
 80025e4:	4b30      	ldr	r3, [pc, #192]	; (80026a8 <HAL_ADC_MspInit+0x14c>)
 80025e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80025f0:	230f      	movs	r3, #15
 80025f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025f4:	2303      	movs	r3, #3
 80025f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025fc:	f107 031c 	add.w	r3, r7, #28
 8002600:	4619      	mov	r1, r3
 8002602:	482a      	ldr	r0, [pc, #168]	; (80026ac <HAL_ADC_MspInit+0x150>)
 8002604:	f001 ff0e 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002608:	23ff      	movs	r3, #255	; 0xff
 800260a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800260c:	2303      	movs	r3, #3
 800260e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002614:	f107 031c 	add.w	r3, r7, #28
 8002618:	4619      	mov	r1, r3
 800261a:	4825      	ldr	r0, [pc, #148]	; (80026b0 <HAL_ADC_MspInit+0x154>)
 800261c:	f001 ff02 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002620:	2303      	movs	r3, #3
 8002622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002624:	2303      	movs	r3, #3
 8002626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	4619      	mov	r1, r3
 8002632:	4820      	ldr	r0, [pc, #128]	; (80026b4 <HAL_ADC_MspInit+0x158>)
 8002634:	f001 fef6 	bl	8004424 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8002638:	4b1f      	ldr	r3, [pc, #124]	; (80026b8 <HAL_ADC_MspInit+0x15c>)
 800263a:	4a20      	ldr	r2, [pc, #128]	; (80026bc <HAL_ADC_MspInit+0x160>)
 800263c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800263e:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <HAL_ADC_MspInit+0x15c>)
 8002640:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002644:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002646:	4b1c      	ldr	r3, [pc, #112]	; (80026b8 <HAL_ADC_MspInit+0x15c>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800264c:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <HAL_ADC_MspInit+0x15c>)
 800264e:	2200      	movs	r2, #0
 8002650:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002652:	4b19      	ldr	r3, [pc, #100]	; (80026b8 <HAL_ADC_MspInit+0x15c>)
 8002654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002658:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800265a:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <HAL_ADC_MspInit+0x15c>)
 800265c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002660:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <HAL_ADC_MspInit+0x15c>)
 8002664:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002668:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800266a:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <HAL_ADC_MspInit+0x15c>)
 800266c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002670:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <HAL_ADC_MspInit+0x15c>)
 8002674:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002678:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800267a:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <HAL_ADC_MspInit+0x15c>)
 800267c:	2200      	movs	r2, #0
 800267e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002680:	480d      	ldr	r0, [pc, #52]	; (80026b8 <HAL_ADC_MspInit+0x15c>)
 8002682:	f001 fb33 	bl	8003cec <HAL_DMA_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 800268c:	f7ff ff3a 	bl	8002504 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a09      	ldr	r2, [pc, #36]	; (80026b8 <HAL_ADC_MspInit+0x15c>)
 8002694:	639a      	str	r2, [r3, #56]	; 0x38
 8002696:	4a08      	ldr	r2, [pc, #32]	; (80026b8 <HAL_ADC_MspInit+0x15c>)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800269c:	bf00      	nop
 800269e:	3730      	adds	r7, #48	; 0x30
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40012100 	.word	0x40012100
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40020800 	.word	0x40020800
 80026b0:	40020000 	.word	0x40020000
 80026b4:	40020400 	.word	0x40020400
 80026b8:	20002c28 	.word	0x20002c28
 80026bc:	40026440 	.word	0x40026440

080026c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08c      	sub	sp, #48	; 0x30
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 031c 	add.w	r3, r7, #28
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a32      	ldr	r2, [pc, #200]	; (80027a8 <HAL_I2C_MspInit+0xe8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d12c      	bne.n	800273c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	4b31      	ldr	r3, [pc, #196]	; (80027ac <HAL_I2C_MspInit+0xec>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a30      	ldr	r2, [pc, #192]	; (80027ac <HAL_I2C_MspInit+0xec>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b2e      	ldr	r3, [pc, #184]	; (80027ac <HAL_I2C_MspInit+0xec>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	61bb      	str	r3, [r7, #24]
 80026fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026fe:	23c0      	movs	r3, #192	; 0xc0
 8002700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002702:	2312      	movs	r3, #18
 8002704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002706:	2301      	movs	r3, #1
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270a:	2303      	movs	r3, #3
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800270e:	2304      	movs	r3, #4
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	f107 031c 	add.w	r3, r7, #28
 8002716:	4619      	mov	r1, r3
 8002718:	4825      	ldr	r0, [pc, #148]	; (80027b0 <HAL_I2C_MspInit+0xf0>)
 800271a:	f001 fe83 	bl	8004424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	4b22      	ldr	r3, [pc, #136]	; (80027ac <HAL_I2C_MspInit+0xec>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a21      	ldr	r2, [pc, #132]	; (80027ac <HAL_I2C_MspInit+0xec>)
 8002728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <HAL_I2C_MspInit+0xec>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800273a:	e031      	b.n	80027a0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <HAL_I2C_MspInit+0xf4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d12c      	bne.n	80027a0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	4b18      	ldr	r3, [pc, #96]	; (80027ac <HAL_I2C_MspInit+0xec>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a17      	ldr	r2, [pc, #92]	; (80027ac <HAL_I2C_MspInit+0xec>)
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <HAL_I2C_MspInit+0xec>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002762:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002768:	2312      	movs	r3, #18
 800276a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800276c:	2301      	movs	r3, #1
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002770:	2303      	movs	r3, #3
 8002772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002774:	2304      	movs	r3, #4
 8002776:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002778:	f107 031c 	add.w	r3, r7, #28
 800277c:	4619      	mov	r1, r3
 800277e:	480c      	ldr	r0, [pc, #48]	; (80027b0 <HAL_I2C_MspInit+0xf0>)
 8002780:	f001 fe50 	bl	8004424 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002784:	2300      	movs	r3, #0
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	4b08      	ldr	r3, [pc, #32]	; (80027ac <HAL_I2C_MspInit+0xec>)
 800278a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278c:	4a07      	ldr	r2, [pc, #28]	; (80027ac <HAL_I2C_MspInit+0xec>)
 800278e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002792:	6413      	str	r3, [r2, #64]	; 0x40
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_I2C_MspInit+0xec>)
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
}
 80027a0:	bf00      	nop
 80027a2:	3730      	adds	r7, #48	; 0x30
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40005400 	.word	0x40005400
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40020400 	.word	0x40020400
 80027b4:	40005800 	.word	0x40005800

080027b8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	; 0x28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a69      	ldr	r2, [pc, #420]	; (800297c <HAL_SD_MspInit+0x1c4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	f040 80cb 	bne.w	8002972 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	4b67      	ldr	r3, [pc, #412]	; (8002980 <HAL_SD_MspInit+0x1c8>)
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	4a66      	ldr	r2, [pc, #408]	; (8002980 <HAL_SD_MspInit+0x1c8>)
 80027e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027ea:	6453      	str	r3, [r2, #68]	; 0x44
 80027ec:	4b64      	ldr	r3, [pc, #400]	; (8002980 <HAL_SD_MspInit+0x1c8>)
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	4b60      	ldr	r3, [pc, #384]	; (8002980 <HAL_SD_MspInit+0x1c8>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	4a5f      	ldr	r2, [pc, #380]	; (8002980 <HAL_SD_MspInit+0x1c8>)
 8002802:	f043 0304 	orr.w	r3, r3, #4
 8002806:	6313      	str	r3, [r2, #48]	; 0x30
 8002808:	4b5d      	ldr	r3, [pc, #372]	; (8002980 <HAL_SD_MspInit+0x1c8>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	4b59      	ldr	r3, [pc, #356]	; (8002980 <HAL_SD_MspInit+0x1c8>)
 800281a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281c:	4a58      	ldr	r2, [pc, #352]	; (8002980 <HAL_SD_MspInit+0x1c8>)
 800281e:	f043 0308 	orr.w	r3, r3, #8
 8002822:	6313      	str	r3, [r2, #48]	; 0x30
 8002824:	4b56      	ldr	r3, [pc, #344]	; (8002980 <HAL_SD_MspInit+0x1c8>)
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	f003 0308 	and.w	r3, r3, #8
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002830:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002834:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002836:	2302      	movs	r3, #2
 8002838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800283e:	2303      	movs	r3, #3
 8002840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002842:	230c      	movs	r3, #12
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002846:	f107 0314 	add.w	r3, r7, #20
 800284a:	4619      	mov	r1, r3
 800284c:	484d      	ldr	r0, [pc, #308]	; (8002984 <HAL_SD_MspInit+0x1cc>)
 800284e:	f001 fde9 	bl	8004424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002852:	2304      	movs	r3, #4
 8002854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285e:	2303      	movs	r3, #3
 8002860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002862:	230c      	movs	r3, #12
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	4846      	ldr	r0, [pc, #280]	; (8002988 <HAL_SD_MspInit+0x1d0>)
 800286e:	f001 fdd9 	bl	8004424 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002872:	4b46      	ldr	r3, [pc, #280]	; (800298c <HAL_SD_MspInit+0x1d4>)
 8002874:	4a46      	ldr	r2, [pc, #280]	; (8002990 <HAL_SD_MspInit+0x1d8>)
 8002876:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002878:	4b44      	ldr	r3, [pc, #272]	; (800298c <HAL_SD_MspInit+0x1d4>)
 800287a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800287e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002880:	4b42      	ldr	r3, [pc, #264]	; (800298c <HAL_SD_MspInit+0x1d4>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002886:	4b41      	ldr	r3, [pc, #260]	; (800298c <HAL_SD_MspInit+0x1d4>)
 8002888:	2200      	movs	r2, #0
 800288a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800288c:	4b3f      	ldr	r3, [pc, #252]	; (800298c <HAL_SD_MspInit+0x1d4>)
 800288e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002892:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002894:	4b3d      	ldr	r3, [pc, #244]	; (800298c <HAL_SD_MspInit+0x1d4>)
 8002896:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800289a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800289c:	4b3b      	ldr	r3, [pc, #236]	; (800298c <HAL_SD_MspInit+0x1d4>)
 800289e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028a2:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80028a4:	4b39      	ldr	r3, [pc, #228]	; (800298c <HAL_SD_MspInit+0x1d4>)
 80028a6:	2220      	movs	r2, #32
 80028a8:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80028aa:	4b38      	ldr	r3, [pc, #224]	; (800298c <HAL_SD_MspInit+0x1d4>)
 80028ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028b0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80028b2:	4b36      	ldr	r3, [pc, #216]	; (800298c <HAL_SD_MspInit+0x1d4>)
 80028b4:	2204      	movs	r2, #4
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80028b8:	4b34      	ldr	r3, [pc, #208]	; (800298c <HAL_SD_MspInit+0x1d4>)
 80028ba:	2203      	movs	r2, #3
 80028bc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80028be:	4b33      	ldr	r3, [pc, #204]	; (800298c <HAL_SD_MspInit+0x1d4>)
 80028c0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80028c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80028c6:	4b31      	ldr	r3, [pc, #196]	; (800298c <HAL_SD_MspInit+0x1d4>)
 80028c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80028cc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80028ce:	482f      	ldr	r0, [pc, #188]	; (800298c <HAL_SD_MspInit+0x1d4>)
 80028d0:	f001 fa0c 	bl	8003cec <HAL_DMA_Init>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80028da:	f7ff fe13 	bl	8002504 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a2a      	ldr	r2, [pc, #168]	; (800298c <HAL_SD_MspInit+0x1d4>)
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40
 80028e4:	4a29      	ldr	r2, [pc, #164]	; (800298c <HAL_SD_MspInit+0x1d4>)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80028ea:	4b2a      	ldr	r3, [pc, #168]	; (8002994 <HAL_SD_MspInit+0x1dc>)
 80028ec:	4a2a      	ldr	r2, [pc, #168]	; (8002998 <HAL_SD_MspInit+0x1e0>)
 80028ee:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80028f0:	4b28      	ldr	r3, [pc, #160]	; (8002994 <HAL_SD_MspInit+0x1dc>)
 80028f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028f6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028f8:	4b26      	ldr	r3, [pc, #152]	; (8002994 <HAL_SD_MspInit+0x1dc>)
 80028fa:	2240      	movs	r2, #64	; 0x40
 80028fc:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028fe:	4b25      	ldr	r3, [pc, #148]	; (8002994 <HAL_SD_MspInit+0x1dc>)
 8002900:	2200      	movs	r2, #0
 8002902:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002904:	4b23      	ldr	r3, [pc, #140]	; (8002994 <HAL_SD_MspInit+0x1dc>)
 8002906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800290a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800290c:	4b21      	ldr	r3, [pc, #132]	; (8002994 <HAL_SD_MspInit+0x1dc>)
 800290e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002912:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002914:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <HAL_SD_MspInit+0x1dc>)
 8002916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800291a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800291c:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <HAL_SD_MspInit+0x1dc>)
 800291e:	2220      	movs	r2, #32
 8002920:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002922:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <HAL_SD_MspInit+0x1dc>)
 8002924:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002928:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800292a:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <HAL_SD_MspInit+0x1dc>)
 800292c:	2204      	movs	r2, #4
 800292e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002930:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_SD_MspInit+0x1dc>)
 8002932:	2203      	movs	r2, #3
 8002934:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002936:	4b17      	ldr	r3, [pc, #92]	; (8002994 <HAL_SD_MspInit+0x1dc>)
 8002938:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <HAL_SD_MspInit+0x1dc>)
 8002940:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002946:	4813      	ldr	r0, [pc, #76]	; (8002994 <HAL_SD_MspInit+0x1dc>)
 8002948:	f001 f9d0 	bl	8003cec <HAL_DMA_Init>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8002952:	f7ff fdd7 	bl	8002504 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <HAL_SD_MspInit+0x1dc>)
 800295a:	63da      	str	r2, [r3, #60]	; 0x3c
 800295c:	4a0d      	ldr	r2, [pc, #52]	; (8002994 <HAL_SD_MspInit+0x1dc>)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002962:	2200      	movs	r2, #0
 8002964:	2100      	movs	r1, #0
 8002966:	2031      	movs	r0, #49	; 0x31
 8002968:	f001 f989 	bl	8003c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800296c:	2031      	movs	r0, #49	; 0x31
 800296e:	f001 f9a2 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002972:	bf00      	nop
 8002974:	3728      	adds	r7, #40	; 0x28
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40012c00 	.word	0x40012c00
 8002980:	40023800 	.word	0x40023800
 8002984:	40020800 	.word	0x40020800
 8002988:	40020c00 	.word	0x40020c00
 800298c:	20002780 	.word	0x20002780
 8002990:	40026458 	.word	0x40026458
 8002994:	20002a7c 	.word	0x20002a7c
 8002998:	400264a0 	.word	0x400264a0

0800299c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a19      	ldr	r2, [pc, #100]	; (8002a20 <HAL_SPI_MspInit+0x84>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d12c      	bne.n	8002a18 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_SPI_MspInit+0x88>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	4a17      	ldr	r2, [pc, #92]	; (8002a24 <HAL_SPI_MspInit+0x88>)
 80029c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029cc:	6413      	str	r3, [r2, #64]	; 0x40
 80029ce:	4b15      	ldr	r3, [pc, #84]	; (8002a24 <HAL_SPI_MspInit+0x88>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <HAL_SPI_MspInit+0x88>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <HAL_SPI_MspInit+0x88>)
 80029e4:	f043 0302 	orr.w	r3, r3, #2
 80029e8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <HAL_SPI_MspInit+0x88>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80029f6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80029fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	2302      	movs	r3, #2
 80029fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a04:	2303      	movs	r3, #3
 8002a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a08:	2305      	movs	r3, #5
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	4619      	mov	r1, r3
 8002a12:	4805      	ldr	r0, [pc, #20]	; (8002a28 <HAL_SPI_MspInit+0x8c>)
 8002a14:	f001 fd06 	bl	8004424 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a18:	bf00      	nop
 8002a1a:	3728      	adds	r7, #40	; 0x28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40003800 	.word	0x40003800
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40020400 	.word	0x40020400

08002a2c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08c      	sub	sp, #48	; 0x30
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a34:	f107 031c 	add.w	r3, r7, #28
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	605a      	str	r2, [r3, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	60da      	str	r2, [r3, #12]
 8002a42:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a2d      	ldr	r2, [pc, #180]	; (8002b00 <HAL_TIM_PWM_MspInit+0xd4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d12d      	bne.n	8002aaa <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	4b2c      	ldr	r3, [pc, #176]	; (8002b04 <HAL_TIM_PWM_MspInit+0xd8>)
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	4a2b      	ldr	r2, [pc, #172]	; (8002b04 <HAL_TIM_PWM_MspInit+0xd8>)
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a5e:	4b29      	ldr	r3, [pc, #164]	; (8002b04 <HAL_TIM_PWM_MspInit+0xd8>)
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	61bb      	str	r3, [r7, #24]
 8002a68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	4b25      	ldr	r3, [pc, #148]	; (8002b04 <HAL_TIM_PWM_MspInit+0xd8>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	4a24      	ldr	r2, [pc, #144]	; (8002b04 <HAL_TIM_PWM_MspInit+0xd8>)
 8002a74:	f043 0310 	orr.w	r3, r3, #16
 8002a78:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7a:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <HAL_TIM_PWM_MspInit+0xd8>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002a86:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a94:	2300      	movs	r3, #0
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a9c:	f107 031c 	add.w	r3, r7, #28
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4819      	ldr	r0, [pc, #100]	; (8002b08 <HAL_TIM_PWM_MspInit+0xdc>)
 8002aa4:	f001 fcbe 	bl	8004424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002aa8:	e026      	b.n	8002af8 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a17      	ldr	r2, [pc, #92]	; (8002b0c <HAL_TIM_PWM_MspInit+0xe0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d10e      	bne.n	8002ad2 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <HAL_TIM_PWM_MspInit+0xd8>)
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	4a11      	ldr	r2, [pc, #68]	; (8002b04 <HAL_TIM_PWM_MspInit+0xd8>)
 8002abe:	f043 0302 	orr.w	r3, r3, #2
 8002ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <HAL_TIM_PWM_MspInit+0xd8>)
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	693b      	ldr	r3, [r7, #16]
}
 8002ad0:	e012      	b.n	8002af8 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a0e      	ldr	r2, [pc, #56]	; (8002b10 <HAL_TIM_PWM_MspInit+0xe4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d10d      	bne.n	8002af8 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	4b08      	ldr	r3, [pc, #32]	; (8002b04 <HAL_TIM_PWM_MspInit+0xd8>)
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae4:	4a07      	ldr	r2, [pc, #28]	; (8002b04 <HAL_TIM_PWM_MspInit+0xd8>)
 8002ae6:	f043 0304 	orr.w	r3, r3, #4
 8002aea:	6413      	str	r3, [r2, #64]	; 0x40
 8002aec:	4b05      	ldr	r3, [pc, #20]	; (8002b04 <HAL_TIM_PWM_MspInit+0xd8>)
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	68fb      	ldr	r3, [r7, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3730      	adds	r7, #48	; 0x30
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40010000 	.word	0x40010000
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40000400 	.word	0x40000400
 8002b10:	40000800 	.word	0x40000800

08002b14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a2c      	ldr	r2, [pc, #176]	; (8002bd4 <HAL_TIM_Base_MspInit+0xc0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d116      	bne.n	8002b54 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	4b2b      	ldr	r3, [pc, #172]	; (8002bd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	4a2a      	ldr	r2, [pc, #168]	; (8002bd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002b30:	f043 0310 	orr.w	r3, r3, #16
 8002b34:	6413      	str	r3, [r2, #64]	; 0x40
 8002b36:	4b28      	ldr	r3, [pc, #160]	; (8002bd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2100      	movs	r1, #0
 8002b46:	2036      	movs	r0, #54	; 0x36
 8002b48:	f001 f899 	bl	8003c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b4c:	2036      	movs	r0, #54	; 0x36
 8002b4e:	f001 f8b2 	bl	8003cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002b52:	e03a      	b.n	8002bca <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a20      	ldr	r2, [pc, #128]	; (8002bdc <HAL_TIM_Base_MspInit+0xc8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d10e      	bne.n	8002b7c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	4a1c      	ldr	r2, [pc, #112]	; (8002bd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002b68:	f043 0320 	orr.w	r3, r3, #32
 8002b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]
}
 8002b7a:	e026      	b.n	8002bca <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a17      	ldr	r2, [pc, #92]	; (8002be0 <HAL_TIM_Base_MspInit+0xcc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d10e      	bne.n	8002ba4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b94:	6453      	str	r3, [r2, #68]	; 0x44
 8002b96:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
}
 8002ba2:	e012      	b.n	8002bca <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM11)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <HAL_TIM_Base_MspInit+0xd0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d10d      	bne.n	8002bca <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	4a08      	ldr	r2, [pc, #32]	; (8002bd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_TIM_Base_MspInit+0xc4>)
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40001000 	.word	0x40001000
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40001400 	.word	0x40001400
 8002be0:	40014400 	.word	0x40014400
 8002be4:	40014800 	.word	0x40014800

08002be8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08a      	sub	sp, #40	; 0x28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
 8002bfe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a19      	ldr	r2, [pc, #100]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x84>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d12b      	bne.n	8002c62 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	4a17      	ldr	r2, [pc, #92]	; (8002c70 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c14:	f043 0302 	orr.w	r3, r3, #2
 8002c18:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1a:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2e:	4a10      	ldr	r2, [pc, #64]	; (8002c70 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c30:	f043 0304 	orr.w	r3, r3, #4
 8002c34:	6313      	str	r3, [r2, #48]	; 0x30
 8002c36:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <HAL_TIM_Encoder_MspInit+0x88>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c42:	23c0      	movs	r3, #192	; 0xc0
 8002c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c46:	2302      	movs	r3, #2
 8002c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c52:	2303      	movs	r3, #3
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c56:	f107 0314 	add.w	r3, r7, #20
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4805      	ldr	r0, [pc, #20]	; (8002c74 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002c5e:	f001 fbe1 	bl	8004424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002c62:	bf00      	nop
 8002c64:	3728      	adds	r7, #40	; 0x28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40010400 	.word	0x40010400
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40020800 	.word	0x40020800

08002c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08c      	sub	sp, #48	; 0x30
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 031c 	add.w	r3, r7, #28
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a5c      	ldr	r2, [pc, #368]	; (8002e08 <HAL_TIM_MspPostInit+0x190>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d11f      	bne.n	8002cda <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	4b5b      	ldr	r3, [pc, #364]	; (8002e0c <HAL_TIM_MspPostInit+0x194>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4a5a      	ldr	r2, [pc, #360]	; (8002e0c <HAL_TIM_MspPostInit+0x194>)
 8002ca4:	f043 0310 	orr.w	r3, r3, #16
 8002ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8002caa:	4b58      	ldr	r3, [pc, #352]	; (8002e0c <HAL_TIM_MspPostInit+0x194>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f003 0310 	and.w	r3, r3, #16
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002cb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ccc:	f107 031c 	add.w	r3, r7, #28
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	484f      	ldr	r0, [pc, #316]	; (8002e10 <HAL_TIM_MspPostInit+0x198>)
 8002cd4:	f001 fba6 	bl	8004424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002cd8:	e091      	b.n	8002dfe <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a4d      	ldr	r2, [pc, #308]	; (8002e14 <HAL_TIM_MspPostInit+0x19c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d11e      	bne.n	8002d22 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	4b48      	ldr	r3, [pc, #288]	; (8002e0c <HAL_TIM_MspPostInit+0x194>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cec:	4a47      	ldr	r2, [pc, #284]	; (8002e0c <HAL_TIM_MspPostInit+0x194>)
 8002cee:	f043 0302 	orr.w	r3, r3, #2
 8002cf2:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf4:	4b45      	ldr	r3, [pc, #276]	; (8002e0c <HAL_TIM_MspPostInit+0x194>)
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002d00:	2330      	movs	r3, #48	; 0x30
 8002d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d04:	2302      	movs	r3, #2
 8002d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d10:	2302      	movs	r3, #2
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d14:	f107 031c 	add.w	r3, r7, #28
 8002d18:	4619      	mov	r1, r3
 8002d1a:	483f      	ldr	r0, [pc, #252]	; (8002e18 <HAL_TIM_MspPostInit+0x1a0>)
 8002d1c:	f001 fb82 	bl	8004424 <HAL_GPIO_Init>
}
 8002d20:	e06d      	b.n	8002dfe <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a3d      	ldr	r2, [pc, #244]	; (8002e1c <HAL_TIM_MspPostInit+0x1a4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d11f      	bne.n	8002d6c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <HAL_TIM_MspPostInit+0x194>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	4a35      	ldr	r2, [pc, #212]	; (8002e0c <HAL_TIM_MspPostInit+0x194>)
 8002d36:	f043 0308 	orr.w	r3, r3, #8
 8002d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3c:	4b33      	ldr	r3, [pc, #204]	; (8002e0c <HAL_TIM_MspPostInit+0x194>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002d48:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d56:	2300      	movs	r3, #0
 8002d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d5e:	f107 031c 	add.w	r3, r7, #28
 8002d62:	4619      	mov	r1, r3
 8002d64:	482e      	ldr	r0, [pc, #184]	; (8002e20 <HAL_TIM_MspPostInit+0x1a8>)
 8002d66:	f001 fb5d 	bl	8004424 <HAL_GPIO_Init>
}
 8002d6a:	e048      	b.n	8002dfe <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2c      	ldr	r2, [pc, #176]	; (8002e24 <HAL_TIM_MspPostInit+0x1ac>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d11f      	bne.n	8002db6 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	4b24      	ldr	r3, [pc, #144]	; (8002e0c <HAL_TIM_MspPostInit+0x194>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7e:	4a23      	ldr	r2, [pc, #140]	; (8002e0c <HAL_TIM_MspPostInit+0x194>)
 8002d80:	f043 0302 	orr.w	r3, r3, #2
 8002d84:	6313      	str	r3, [r2, #48]	; 0x30
 8002d86:	4b21      	ldr	r3, [pc, #132]	; (8002e0c <HAL_TIM_MspPostInit+0x194>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da0:	2300      	movs	r3, #0
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002da4:	2303      	movs	r3, #3
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da8:	f107 031c 	add.w	r3, r7, #28
 8002dac:	4619      	mov	r1, r3
 8002dae:	481a      	ldr	r0, [pc, #104]	; (8002e18 <HAL_TIM_MspPostInit+0x1a0>)
 8002db0:	f001 fb38 	bl	8004424 <HAL_GPIO_Init>
}
 8002db4:	e023      	b.n	8002dfe <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a1b      	ldr	r2, [pc, #108]	; (8002e28 <HAL_TIM_MspPostInit+0x1b0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d11e      	bne.n	8002dfe <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <HAL_TIM_MspPostInit+0x194>)
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	4a10      	ldr	r2, [pc, #64]	; (8002e0c <HAL_TIM_MspPostInit+0x194>)
 8002dca:	f043 0302 	orr.w	r3, r3, #2
 8002dce:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <HAL_TIM_MspPostInit+0x194>)
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ddc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de2:	2302      	movs	r3, #2
 8002de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dea:	2300      	movs	r3, #0
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002dee:	2303      	movs	r3, #3
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002df2:	f107 031c 	add.w	r3, r7, #28
 8002df6:	4619      	mov	r1, r3
 8002df8:	4807      	ldr	r0, [pc, #28]	; (8002e18 <HAL_TIM_MspPostInit+0x1a0>)
 8002dfa:	f001 fb13 	bl	8004424 <HAL_GPIO_Init>
}
 8002dfe:	bf00      	nop
 8002e00:	3730      	adds	r7, #48	; 0x30
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40010000 	.word	0x40010000
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40021000 	.word	0x40021000
 8002e14:	40000400 	.word	0x40000400
 8002e18:	40020400 	.word	0x40020400
 8002e1c:	40000800 	.word	0x40000800
 8002e20:	40020c00 	.word	0x40020c00
 8002e24:	40014400 	.word	0x40014400
 8002e28:	40014800 	.word	0x40014800

08002e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b08a      	sub	sp, #40	; 0x28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e34:	f107 0314 	add.w	r3, r7, #20
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	605a      	str	r2, [r3, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	60da      	str	r2, [r3, #12]
 8002e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a19      	ldr	r2, [pc, #100]	; (8002eb0 <HAL_UART_MspInit+0x84>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d12b      	bne.n	8002ea6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
 8002e52:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <HAL_UART_MspInit+0x88>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	4a17      	ldr	r2, [pc, #92]	; (8002eb4 <HAL_UART_MspInit+0x88>)
 8002e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5e:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <HAL_UART_MspInit+0x88>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	613b      	str	r3, [r7, #16]
 8002e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <HAL_UART_MspInit+0x88>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	4a10      	ldr	r2, [pc, #64]	; (8002eb4 <HAL_UART_MspInit+0x88>)
 8002e74:	f043 0308 	orr.w	r3, r3, #8
 8002e78:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <HAL_UART_MspInit+0x88>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002e86:	2360      	movs	r3, #96	; 0x60
 8002e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e92:	2303      	movs	r3, #3
 8002e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e96:	2307      	movs	r3, #7
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e9a:	f107 0314 	add.w	r3, r7, #20
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <HAL_UART_MspInit+0x8c>)
 8002ea2:	f001 fabf 	bl	8004424 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ea6:	bf00      	nop
 8002ea8:	3728      	adds	r7, #40	; 0x28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40004400 	.word	0x40004400
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40020c00 	.word	0x40020c00

08002ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ec0:	e7fe      	b.n	8002ec0 <NMI_Handler+0x4>

08002ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec6:	e7fe      	b.n	8002ec6 <HardFault_Handler+0x4>

08002ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ecc:	e7fe      	b.n	8002ecc <MemManage_Handler+0x4>

08002ece <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ed2:	e7fe      	b.n	8002ed2 <BusFault_Handler+0x4>

08002ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ed8:	e7fe      	b.n	8002ed8 <UsageFault_Handler+0x4>

08002eda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f08:	f000 f998 	bl	800323c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f0c:	bf00      	nop
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002f14:	2001      	movs	r0, #1
 8002f16:	f001 fc61 	bl	80047dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002f1a:	bf00      	nop
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002f22:	2004      	movs	r0, #4
 8002f24:	f001 fc5a 	bl	80047dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002f28:	bf00      	nop
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002f30:	2080      	movs	r0, #128	; 0x80
 8002f32:	f001 fc53 	bl	80047dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002f36:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f3a:	f001 fc4f 	bl	80047dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002f46:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f4a:	f001 fc47 	bl	80047dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002f58:	4802      	ldr	r0, [pc, #8]	; (8002f64 <SDIO_IRQHandler+0x10>)
 8002f5a:	f003 f9bb 	bl	80062d4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20002b60 	.word	0x20002b60

08002f68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002f6c:	4802      	ldr	r0, [pc, #8]	; (8002f78 <TIM6_DAC_IRQHandler+0x10>)
 8002f6e:	f004 fc1a 	bl	80077a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20002ae0 	.word	0x20002ae0

08002f7c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002f80:	4802      	ldr	r0, [pc, #8]	; (8002f8c <DMA2_Stream2_IRQHandler+0x10>)
 8002f82:	f000 ffdb 	bl	8003f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20002c28 	.word	0x20002c28

08002f90 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002f94:	4802      	ldr	r0, [pc, #8]	; (8002fa0 <DMA2_Stream3_IRQHandler+0x10>)
 8002f96:	f000 ffd1 	bl	8003f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20002780 	.word	0x20002780

08002fa4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002fa8:	4802      	ldr	r0, [pc, #8]	; (8002fb4 <DMA2_Stream6_IRQHandler+0x10>)
 8002faa:	f000 ffc7 	bl	8003f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20002a7c 	.word	0x20002a7c

08002fb8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	e00a      	b.n	8002fe0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002fca:	f3af 8000 	nop.w
 8002fce:	4601      	mov	r1, r0
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	60ba      	str	r2, [r7, #8]
 8002fd6:	b2ca      	uxtb	r2, r1
 8002fd8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	dbf0      	blt.n	8002fca <_read+0x12>
	}

return len;
 8002fe8:	687b      	ldr	r3, [r7, #4]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
	return -1;
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800301a:	605a      	str	r2, [r3, #4]
	return 0;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <_isatty>:

int _isatty(int file)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
	return 1;
 8003032:	2301      	movs	r3, #1
}
 8003034:	4618      	mov	r0, r3
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
	return 0;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
	...

0800305c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003064:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <_sbrk+0x5c>)
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <_sbrk+0x60>)
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003070:	4b13      	ldr	r3, [pc, #76]	; (80030c0 <_sbrk+0x64>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003078:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <_sbrk+0x64>)
 800307a:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <_sbrk+0x68>)
 800307c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800307e:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <_sbrk+0x64>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	429a      	cmp	r2, r3
 800308a:	d207      	bcs.n	800309c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800308c:	f00a fb58 	bl	800d740 <__errno>
 8003090:	4602      	mov	r2, r0
 8003092:	230c      	movs	r3, #12
 8003094:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003096:	f04f 33ff 	mov.w	r3, #4294967295
 800309a:	e009      	b.n	80030b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800309c:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <_sbrk+0x64>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030a2:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <_sbrk+0x64>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <_sbrk+0x64>)
 80030ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030ae:	68fb      	ldr	r3, [r7, #12]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20050000 	.word	0x20050000
 80030bc:	00000400 	.word	0x00000400
 80030c0:	200001f8 	.word	0x200001f8
 80030c4:	20004d48 	.word	0x20004d48

080030c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030cc:	4b08      	ldr	r3, [pc, #32]	; (80030f0 <SystemInit+0x28>)
 80030ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d2:	4a07      	ldr	r2, [pc, #28]	; (80030f0 <SystemInit+0x28>)
 80030d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030dc:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <SystemInit+0x28>)
 80030de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030e2:	609a      	str	r2, [r3, #8]
#endif
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <cppInit>:
#include "LineSensor.hpp"

LineSensor line_sensor;

void cppInit(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
	line_sensor.ADCStart();
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <cppInit+0x10>)
 80030fa:	f7fe f94f 	bl	800139c <_ZN10LineSensor8ADCStartEv>

}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	200001fc 	.word	0x200001fc

08003108 <cppLoop>:
void cppLoop(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
	printf("cpp loop test\n");
 800310c:	4805      	ldr	r0, [pc, #20]	; (8003124 <cppLoop+0x1c>)
 800310e:	f00b f9fb 	bl	800e508 <puts>
	printf("cpp AD %d\n", line_sensor.sensor[0]);
 8003112:	4b05      	ldr	r3, [pc, #20]	; (8003128 <cppLoop+0x20>)
 8003114:	8b9b      	ldrh	r3, [r3, #28]
 8003116:	4619      	mov	r1, r3
 8003118:	4804      	ldr	r0, [pc, #16]	; (800312c <cppLoop+0x24>)
 800311a:	f00b f981 	bl	800e420 <iprintf>
}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	08012668 	.word	0x08012668
 8003128:	200001fc 	.word	0x200001fc
 800312c:	08012678 	.word	0x08012678

08003130 <cppFlip>:

void cppFlip(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
	line_sensor.updateSensorvaluses();
 8003134:	4802      	ldr	r0, [pc, #8]	; (8003140 <cppFlip+0x10>)
 8003136:	f7fe f947 	bl	80013c8 <_ZN10LineSensor19updateSensorvalusesEv>
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	200001fc 	.word	0x200001fc

08003144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800317c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003148:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800314a:	e003      	b.n	8003154 <LoopCopyDataInit>

0800314c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800314c:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800314e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003150:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003152:	3104      	adds	r1, #4

08003154 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003154:	480b      	ldr	r0, [pc, #44]	; (8003184 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003156:	4b0c      	ldr	r3, [pc, #48]	; (8003188 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003158:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800315a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800315c:	d3f6      	bcc.n	800314c <CopyDataInit>
  ldr  r2, =_sbss
 800315e:	4a0b      	ldr	r2, [pc, #44]	; (800318c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003160:	e002      	b.n	8003168 <LoopFillZerobss>

08003162 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003162:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003164:	f842 3b04 	str.w	r3, [r2], #4

08003168 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003168:	4b09      	ldr	r3, [pc, #36]	; (8003190 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800316a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800316c:	d3f9      	bcc.n	8003162 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800316e:	f7ff ffab 	bl	80030c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003172:	f00a faeb 	bl	800d74c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003176:	f7fe fa61 	bl	800163c <main>
  bx  lr    
 800317a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800317c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003180:	08012e94 	.word	0x08012e94
  ldr  r0, =_sdata
 8003184:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003188:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800318c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8003190:	20004d44 	.word	0x20004d44

08003194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003194:	e7fe      	b.n	8003194 <ADC_IRQHandler>
	...

08003198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800319c:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <HAL_Init+0x40>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a0d      	ldr	r2, [pc, #52]	; (80031d8 <HAL_Init+0x40>)
 80031a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031a8:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_Init+0x40>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0a      	ldr	r2, [pc, #40]	; (80031d8 <HAL_Init+0x40>)
 80031ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031b4:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <HAL_Init+0x40>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a07      	ldr	r2, [pc, #28]	; (80031d8 <HAL_Init+0x40>)
 80031ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031c0:	2003      	movs	r0, #3
 80031c2:	f000 fd51 	bl	8003c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f000 f808 	bl	80031dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031cc:	f7ff f99e 	bl	800250c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023c00 	.word	0x40023c00

080031dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031e4:	4b12      	ldr	r3, [pc, #72]	; (8003230 <HAL_InitTick+0x54>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b12      	ldr	r3, [pc, #72]	; (8003234 <HAL_InitTick+0x58>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	4619      	mov	r1, r3
 80031ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fd69 	bl	8003cd2 <HAL_SYSTICK_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e00e      	b.n	8003228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b0f      	cmp	r3, #15
 800320e:	d80a      	bhi.n	8003226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003210:	2200      	movs	r2, #0
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	f04f 30ff 	mov.w	r0, #4294967295
 8003218:	f000 fd31 	bl	8003c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800321c:	4a06      	ldr	r2, [pc, #24]	; (8003238 <HAL_InitTick+0x5c>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	e000      	b.n	8003228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
}
 8003228:	4618      	mov	r0, r3
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20000000 	.word	0x20000000
 8003234:	20000008 	.word	0x20000008
 8003238:	20000004 	.word	0x20000004

0800323c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <HAL_IncTick+0x20>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	461a      	mov	r2, r3
 8003246:	4b06      	ldr	r3, [pc, #24]	; (8003260 <HAL_IncTick+0x24>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4413      	add	r3, r2
 800324c:	4a04      	ldr	r2, [pc, #16]	; (8003260 <HAL_IncTick+0x24>)
 800324e:	6013      	str	r3, [r2, #0]
}
 8003250:	bf00      	nop
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000008 	.word	0x20000008
 8003260:	20002cc8 	.word	0x20002cc8

08003264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return uwTick;
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <HAL_GetTick+0x14>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20002cc8 	.word	0x20002cc8

0800327c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003284:	f7ff ffee 	bl	8003264 <HAL_GetTick>
 8003288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d005      	beq.n	80032a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <HAL_Delay+0x40>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	461a      	mov	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032a2:	bf00      	nop
 80032a4:	f7ff ffde 	bl	8003264 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d8f7      	bhi.n	80032a4 <HAL_Delay+0x28>
  {
  }
}
 80032b4:	bf00      	nop
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20000008 	.word	0x20000008

080032c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d101      	bne.n	80032d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e033      	b.n	800333e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d109      	bne.n	80032f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff f93c 	bl	800255c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d118      	bne.n	8003330 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003306:	f023 0302 	bic.w	r3, r3, #2
 800330a:	f043 0202 	orr.w	r2, r3, #2
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fa5a 	bl	80037cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	f023 0303 	bic.w	r3, r3, #3
 8003326:	f043 0201 	orr.w	r2, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
 800332e:	e001      	b.n	8003334 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800333c:	7bfb      	ldrb	r3, [r7, #15]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_ADC_Start_DMA+0x1e>
 8003362:	2302      	movs	r3, #2
 8003364:	e0cc      	b.n	8003500 <HAL_ADC_Start_DMA+0x1b8>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b01      	cmp	r3, #1
 800337a:	d018      	beq.n	80033ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0201 	orr.w	r2, r2, #1
 800338a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800338c:	4b5e      	ldr	r3, [pc, #376]	; (8003508 <HAL_ADC_Start_DMA+0x1c0>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a5e      	ldr	r2, [pc, #376]	; (800350c <HAL_ADC_Start_DMA+0x1c4>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	0c9a      	lsrs	r2, r3, #18
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80033a0:	e002      	b.n	80033a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	3b01      	subs	r3, #1
 80033a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f9      	bne.n	80033a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	f040 80a0 	bne.w	80034fe <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033c6:	f023 0301 	bic.w	r3, r3, #1
 80033ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033fc:	d106      	bne.n	800340c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	f023 0206 	bic.w	r2, r3, #6
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	645a      	str	r2, [r3, #68]	; 0x44
 800340a:	e002      	b.n	8003412 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800341a:	4b3d      	ldr	r3, [pc, #244]	; (8003510 <HAL_ADC_Start_DMA+0x1c8>)
 800341c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	4a3c      	ldr	r2, [pc, #240]	; (8003514 <HAL_ADC_Start_DMA+0x1cc>)
 8003424:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	4a3b      	ldr	r2, [pc, #236]	; (8003518 <HAL_ADC_Start_DMA+0x1d0>)
 800342c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003432:	4a3a      	ldr	r2, [pc, #232]	; (800351c <HAL_ADC_Start_DMA+0x1d4>)
 8003434:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800343e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800344e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800345e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	334c      	adds	r3, #76	; 0x4c
 800346a:	4619      	mov	r1, r3
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f000 fcea 	bl	8003e48 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	2b00      	cmp	r3, #0
 800347e:	d12a      	bne.n	80034d6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a26      	ldr	r2, [pc, #152]	; (8003520 <HAL_ADC_Start_DMA+0x1d8>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d015      	beq.n	80034b6 <HAL_ADC_Start_DMA+0x16e>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a25      	ldr	r2, [pc, #148]	; (8003524 <HAL_ADC_Start_DMA+0x1dc>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d105      	bne.n	80034a0 <HAL_ADC_Start_DMA+0x158>
 8003494:	4b1e      	ldr	r3, [pc, #120]	; (8003510 <HAL_ADC_Start_DMA+0x1c8>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 031f 	and.w	r3, r3, #31
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a20      	ldr	r2, [pc, #128]	; (8003528 <HAL_ADC_Start_DMA+0x1e0>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d129      	bne.n	80034fe <HAL_ADC_Start_DMA+0x1b6>
 80034aa:	4b19      	ldr	r3, [pc, #100]	; (8003510 <HAL_ADC_Start_DMA+0x1c8>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 031f 	and.w	r3, r3, #31
 80034b2:	2b0f      	cmp	r3, #15
 80034b4:	d823      	bhi.n	80034fe <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d11c      	bne.n	80034fe <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	e013      	b.n	80034fe <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a11      	ldr	r2, [pc, #68]	; (8003520 <HAL_ADC_Start_DMA+0x1d8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d10e      	bne.n	80034fe <HAL_ADC_Start_DMA+0x1b6>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d107      	bne.n	80034fe <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034fc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20000000 	.word	0x20000000
 800350c:	431bde83 	.word	0x431bde83
 8003510:	40012300 	.word	0x40012300
 8003514:	080039c5 	.word	0x080039c5
 8003518:	08003a7f 	.word	0x08003a7f
 800351c:	08003a9b 	.word	0x08003a9b
 8003520:	40012000 	.word	0x40012000
 8003524:	40012100 	.word	0x40012100
 8003528:	40012200 	.word	0x40012200

0800352c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x1c>
 8003580:	2302      	movs	r3, #2
 8003582:	e113      	b.n	80037ac <HAL_ADC_ConfigChannel+0x244>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b09      	cmp	r3, #9
 8003592:	d925      	bls.n	80035e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68d9      	ldr	r1, [r3, #12]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	3b1e      	subs	r3, #30
 80035aa:	2207      	movs	r2, #7
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43da      	mvns	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	400a      	ands	r2, r1
 80035b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68d9      	ldr	r1, [r3, #12]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	4618      	mov	r0, r3
 80035cc:	4603      	mov	r3, r0
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4403      	add	r3, r0
 80035d2:	3b1e      	subs	r3, #30
 80035d4:	409a      	lsls	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	e022      	b.n	8003626 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6919      	ldr	r1, [r3, #16]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	4613      	mov	r3, r2
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	4413      	add	r3, r2
 80035f4:	2207      	movs	r2, #7
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43da      	mvns	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	400a      	ands	r2, r1
 8003602:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6919      	ldr	r1, [r3, #16]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	b29b      	uxth	r3, r3
 8003614:	4618      	mov	r0, r3
 8003616:	4603      	mov	r3, r0
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4403      	add	r3, r0
 800361c:	409a      	lsls	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b06      	cmp	r3, #6
 800362c:	d824      	bhi.n	8003678 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	3b05      	subs	r3, #5
 8003640:	221f      	movs	r2, #31
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43da      	mvns	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	400a      	ands	r2, r1
 800364e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	b29b      	uxth	r3, r3
 800365c:	4618      	mov	r0, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	3b05      	subs	r3, #5
 800366a:	fa00 f203 	lsl.w	r2, r0, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	635a      	str	r2, [r3, #52]	; 0x34
 8003676:	e04c      	b.n	8003712 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b0c      	cmp	r3, #12
 800367e:	d824      	bhi.n	80036ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	3b23      	subs	r3, #35	; 0x23
 8003692:	221f      	movs	r2, #31
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	43da      	mvns	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	400a      	ands	r2, r1
 80036a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	4618      	mov	r0, r3
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	3b23      	subs	r3, #35	; 0x23
 80036bc:	fa00 f203 	lsl.w	r2, r0, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	631a      	str	r2, [r3, #48]	; 0x30
 80036c8:	e023      	b.n	8003712 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	3b41      	subs	r3, #65	; 0x41
 80036dc:	221f      	movs	r2, #31
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43da      	mvns	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	400a      	ands	r2, r1
 80036ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	4618      	mov	r0, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	3b41      	subs	r3, #65	; 0x41
 8003706:	fa00 f203 	lsl.w	r2, r0, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003712:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <HAL_ADC_ConfigChannel+0x250>)
 8003714:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a28      	ldr	r2, [pc, #160]	; (80037bc <HAL_ADC_ConfigChannel+0x254>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d10f      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x1d8>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2b12      	cmp	r3, #18
 8003726:	d10b      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1d      	ldr	r2, [pc, #116]	; (80037bc <HAL_ADC_ConfigChannel+0x254>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d12b      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x23a>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1c      	ldr	r2, [pc, #112]	; (80037c0 <HAL_ADC_ConfigChannel+0x258>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d003      	beq.n	800375c <HAL_ADC_ConfigChannel+0x1f4>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b11      	cmp	r3, #17
 800375a:	d122      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a11      	ldr	r2, [pc, #68]	; (80037c0 <HAL_ADC_ConfigChannel+0x258>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d111      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <HAL_ADC_ConfigChannel+0x25c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a11      	ldr	r2, [pc, #68]	; (80037c8 <HAL_ADC_ConfigChannel+0x260>)
 8003784:	fba2 2303 	umull	r2, r3, r2, r3
 8003788:	0c9a      	lsrs	r2, r3, #18
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003794:	e002      	b.n	800379c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	3b01      	subs	r3, #1
 800379a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f9      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	40012300 	.word	0x40012300
 80037bc:	40012000 	.word	0x40012000
 80037c0:	10000012 	.word	0x10000012
 80037c4:	20000000 	.word	0x20000000
 80037c8:	431bde83 	.word	0x431bde83

080037cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037d4:	4b79      	ldr	r3, [pc, #484]	; (80039bc <ADC_Init+0x1f0>)
 80037d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003800:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	021a      	lsls	r2, r3, #8
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003824:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6859      	ldr	r1, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003846:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6899      	ldr	r1, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68da      	ldr	r2, [r3, #12]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	4a58      	ldr	r2, [pc, #352]	; (80039c0 <ADC_Init+0x1f4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d022      	beq.n	80038aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003872:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6899      	ldr	r1, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003894:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6899      	ldr	r1, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	e00f      	b.n	80038ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80038c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0202 	bic.w	r2, r2, #2
 80038d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6899      	ldr	r1, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	7e1b      	ldrb	r3, [r3, #24]
 80038e4:	005a      	lsls	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01b      	beq.n	8003930 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003906:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003916:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6859      	ldr	r1, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	3b01      	subs	r3, #1
 8003924:	035a      	lsls	r2, r3, #13
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	e007      	b.n	8003940 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800393e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	3b01      	subs	r3, #1
 800395c:	051a      	lsls	r2, r3, #20
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003974:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6899      	ldr	r1, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003982:	025a      	lsls	r2, r3, #9
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800399a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6899      	ldr	r1, [r3, #8]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	029a      	lsls	r2, r3, #10
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	40012300 	.word	0x40012300
 80039c0:	0f000001 	.word	0x0f000001

080039c4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d13c      	bne.n	8003a58 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d12b      	bne.n	8003a50 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d127      	bne.n	8003a50 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d006      	beq.n	8003a1c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d119      	bne.n	8003a50 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0220 	bic.w	r2, r2, #32
 8003a2a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d105      	bne.n	8003a50 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a48:	f043 0201 	orr.w	r2, r3, #1
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f7ff fd6b 	bl	800352c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a56:	e00e      	b.n	8003a76 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f7ff fd75 	bl	8003554 <HAL_ADC_ErrorCallback>
}
 8003a6a:	e004      	b.n	8003a76 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	4798      	blx	r3
}
 8003a76:	bf00      	nop
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b084      	sub	sp, #16
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f7ff fd57 	bl	8003540 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2240      	movs	r2, #64	; 0x40
 8003aac:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	f043 0204 	orr.w	r2, r3, #4
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f7ff fd4a 	bl	8003554 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ac0:	bf00      	nop
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <__NVIC_SetPriorityGrouping>:
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <__NVIC_SetPriorityGrouping+0x44>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003afa:	4a04      	ldr	r2, [pc, #16]	; (8003b0c <__NVIC_SetPriorityGrouping+0x44>)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	60d3      	str	r3, [r2, #12]
}
 8003b00:	bf00      	nop
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	e000ed00 	.word	0xe000ed00

08003b10 <__NVIC_GetPriorityGrouping>:
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b14:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <__NVIC_GetPriorityGrouping+0x18>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	0a1b      	lsrs	r3, r3, #8
 8003b1a:	f003 0307 	and.w	r3, r3, #7
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	e000ed00 	.word	0xe000ed00

08003b2c <__NVIC_EnableIRQ>:
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	db0b      	blt.n	8003b56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	f003 021f 	and.w	r2, r3, #31
 8003b44:	4907      	ldr	r1, [pc, #28]	; (8003b64 <__NVIC_EnableIRQ+0x38>)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	e000e100 	.word	0xe000e100

08003b68 <__NVIC_SetPriority>:
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	4603      	mov	r3, r0
 8003b70:	6039      	str	r1, [r7, #0]
 8003b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	db0a      	blt.n	8003b92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	490c      	ldr	r1, [pc, #48]	; (8003bb4 <__NVIC_SetPriority+0x4c>)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	0112      	lsls	r2, r2, #4
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b90:	e00a      	b.n	8003ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	4908      	ldr	r1, [pc, #32]	; (8003bb8 <__NVIC_SetPriority+0x50>)
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	f003 030f 	and.w	r3, r3, #15
 8003b9e:	3b04      	subs	r3, #4
 8003ba0:	0112      	lsls	r2, r2, #4
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	761a      	strb	r2, [r3, #24]
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	e000e100 	.word	0xe000e100
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <NVIC_EncodePriority>:
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b089      	sub	sp, #36	; 0x24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f1c3 0307 	rsb	r3, r3, #7
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	bf28      	it	cs
 8003bda:	2304      	movcs	r3, #4
 8003bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	3304      	adds	r3, #4
 8003be2:	2b06      	cmp	r3, #6
 8003be4:	d902      	bls.n	8003bec <NVIC_EncodePriority+0x30>
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	3b03      	subs	r3, #3
 8003bea:	e000      	b.n	8003bee <NVIC_EncodePriority+0x32>
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43da      	mvns	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	401a      	ands	r2, r3
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c04:	f04f 31ff 	mov.w	r1, #4294967295
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0e:	43d9      	mvns	r1, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c14:	4313      	orrs	r3, r2
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3724      	adds	r7, #36	; 0x24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <SysTick_Config>:
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c34:	d301      	bcc.n	8003c3a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003c36:	2301      	movs	r3, #1
 8003c38:	e00f      	b.n	8003c5a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <SysTick_Config+0x40>)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c42:	210f      	movs	r1, #15
 8003c44:	f04f 30ff 	mov.w	r0, #4294967295
 8003c48:	f7ff ff8e 	bl	8003b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c4c:	4b05      	ldr	r3, [pc, #20]	; (8003c64 <SysTick_Config+0x40>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c52:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <SysTick_Config+0x40>)
 8003c54:	2207      	movs	r2, #7
 8003c56:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	e000e010 	.word	0xe000e010

08003c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff ff29 	bl	8003ac8 <__NVIC_SetPriorityGrouping>
}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b086      	sub	sp, #24
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	4603      	mov	r3, r0
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c90:	f7ff ff3e 	bl	8003b10 <__NVIC_GetPriorityGrouping>
 8003c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	6978      	ldr	r0, [r7, #20]
 8003c9c:	f7ff ff8e 	bl	8003bbc <NVIC_EncodePriority>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff ff5d 	bl	8003b68 <__NVIC_SetPriority>
}
 8003cae:	bf00      	nop
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b082      	sub	sp, #8
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff ff31 	bl	8003b2c <__NVIC_EnableIRQ>
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff ffa2 	bl	8003c24 <SysTick_Config>
 8003ce0:	4603      	mov	r3, r0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003cf8:	f7ff fab4 	bl	8003264 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e099      	b.n	8003e3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0201 	bic.w	r2, r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d28:	e00f      	b.n	8003d4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d2a:	f7ff fa9b 	bl	8003264 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b05      	cmp	r3, #5
 8003d36:	d908      	bls.n	8003d4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2203      	movs	r2, #3
 8003d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e078      	b.n	8003e3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e8      	bne.n	8003d2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4b38      	ldr	r3, [pc, #224]	; (8003e44 <HAL_DMA_Init+0x158>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a1b      	ldr	r3, [r3, #32]
 8003d94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d107      	bne.n	8003db4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	4313      	orrs	r3, r2
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f023 0307 	bic.w	r3, r3, #7
 8003dca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d117      	bne.n	8003e0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00e      	beq.n	8003e0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fa9d 	bl	8004330 <DMA_CheckFifoParam>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d008      	beq.n	8003e0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2240      	movs	r2, #64	; 0x40
 8003e00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e016      	b.n	8003e3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fa54 	bl	80042c4 <DMA_CalcBaseAndBitshift>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e24:	223f      	movs	r2, #63	; 0x3f
 8003e26:	409a      	lsls	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	f010803f 	.word	0xf010803f

08003e48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d101      	bne.n	8003e6e <HAL_DMA_Start_IT+0x26>
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	e040      	b.n	8003ef0 <HAL_DMA_Start_IT+0xa8>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d12f      	bne.n	8003ee2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	68b9      	ldr	r1, [r7, #8]
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 f9e6 	bl	8004268 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea0:	223f      	movs	r2, #63	; 0x3f
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0216 	orr.w	r2, r2, #22
 8003eb6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d007      	beq.n	8003ed0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0208 	orr.w	r2, r2, #8
 8003ece:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e005      	b.n	8003eee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
 8003eec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d004      	beq.n	8003f16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2280      	movs	r2, #128	; 0x80
 8003f10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e00c      	b.n	8003f30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2205      	movs	r2, #5
 8003f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0201 	bic.w	r2, r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f48:	4b92      	ldr	r3, [pc, #584]	; (8004194 <HAL_DMA_IRQHandler+0x258>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a92      	ldr	r2, [pc, #584]	; (8004198 <HAL_DMA_IRQHandler+0x25c>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	0a9b      	lsrs	r3, r3, #10
 8003f54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f66:	2208      	movs	r2, #8
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01a      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d013      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0204 	bic.w	r2, r2, #4
 8003f8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f94:	2208      	movs	r2, #8
 8003f96:	409a      	lsls	r2, r3
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa0:	f043 0201 	orr.w	r2, r3, #1
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fac:	2201      	movs	r2, #1
 8003fae:	409a      	lsls	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d012      	beq.n	8003fde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00b      	beq.n	8003fde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fca:	2201      	movs	r2, #1
 8003fcc:	409a      	lsls	r2, r3
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd6:	f043 0202 	orr.w	r2, r3, #2
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d012      	beq.n	8004014 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00b      	beq.n	8004014 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004000:	2204      	movs	r2, #4
 8004002:	409a      	lsls	r2, r3
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400c:	f043 0204 	orr.w	r2, r3, #4
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004018:	2210      	movs	r2, #16
 800401a:	409a      	lsls	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4013      	ands	r3, r2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d043      	beq.n	80040ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d03c      	beq.n	80040ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004036:	2210      	movs	r2, #16
 8004038:	409a      	lsls	r2, r3
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d018      	beq.n	800407e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d108      	bne.n	800406c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	2b00      	cmp	r3, #0
 8004060:	d024      	beq.n	80040ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4798      	blx	r3
 800406a:	e01f      	b.n	80040ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01b      	beq.n	80040ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	4798      	blx	r3
 800407c:	e016      	b.n	80040ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004088:	2b00      	cmp	r3, #0
 800408a:	d107      	bne.n	800409c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0208 	bic.w	r2, r2, #8
 800409a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b0:	2220      	movs	r2, #32
 80040b2:	409a      	lsls	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 808e 	beq.w	80041da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 8086 	beq.w	80041da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d2:	2220      	movs	r2, #32
 80040d4:	409a      	lsls	r2, r3
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b05      	cmp	r3, #5
 80040e4:	d136      	bne.n	8004154 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0216 	bic.w	r2, r2, #22
 80040f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004104:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	2b00      	cmp	r3, #0
 800410c:	d103      	bne.n	8004116 <HAL_DMA_IRQHandler+0x1da>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004112:	2b00      	cmp	r3, #0
 8004114:	d007      	beq.n	8004126 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0208 	bic.w	r2, r2, #8
 8004124:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412a:	223f      	movs	r2, #63	; 0x3f
 800412c:	409a      	lsls	r2, r3
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004146:	2b00      	cmp	r3, #0
 8004148:	d07d      	beq.n	8004246 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	4798      	blx	r3
        }
        return;
 8004152:	e078      	b.n	8004246 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d01c      	beq.n	800419c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d108      	bne.n	8004182 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004174:	2b00      	cmp	r3, #0
 8004176:	d030      	beq.n	80041da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	4798      	blx	r3
 8004180:	e02b      	b.n	80041da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d027      	beq.n	80041da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	4798      	blx	r3
 8004192:	e022      	b.n	80041da <HAL_DMA_IRQHandler+0x29e>
 8004194:	20000000 	.word	0x20000000
 8004198:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10f      	bne.n	80041ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0210 	bic.w	r2, r2, #16
 80041b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d032      	beq.n	8004248 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d022      	beq.n	8004234 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2205      	movs	r2, #5
 80041f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0201 	bic.w	r2, r2, #1
 8004204:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	3301      	adds	r3, #1
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	429a      	cmp	r2, r3
 8004210:	d307      	bcc.n	8004222 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f2      	bne.n	8004206 <HAL_DMA_IRQHandler+0x2ca>
 8004220:	e000      	b.n	8004224 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004222:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	4798      	blx	r3
 8004244:	e000      	b.n	8004248 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004246:	bf00      	nop
    }
  }
}
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop

08004250 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004284:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b40      	cmp	r3, #64	; 0x40
 8004294:	d108      	bne.n	80042a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042a6:	e007      	b.n	80042b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	60da      	str	r2, [r3, #12]
}
 80042b8:	bf00      	nop
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	3b10      	subs	r3, #16
 80042d4:	4a14      	ldr	r2, [pc, #80]	; (8004328 <DMA_CalcBaseAndBitshift+0x64>)
 80042d6:	fba2 2303 	umull	r2, r3, r2, r3
 80042da:	091b      	lsrs	r3, r3, #4
 80042dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042de:	4a13      	ldr	r2, [pc, #76]	; (800432c <DMA_CalcBaseAndBitshift+0x68>)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	461a      	mov	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b03      	cmp	r3, #3
 80042f0:	d909      	bls.n	8004306 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80042fa:	f023 0303 	bic.w	r3, r3, #3
 80042fe:	1d1a      	adds	r2, r3, #4
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	659a      	str	r2, [r3, #88]	; 0x58
 8004304:	e007      	b.n	8004316 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800430e:	f023 0303 	bic.w	r3, r3, #3
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	aaaaaaab 	.word	0xaaaaaaab
 800432c:	080126f0 	.word	0x080126f0

08004330 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d11f      	bne.n	800438a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b03      	cmp	r3, #3
 800434e:	d855      	bhi.n	80043fc <DMA_CheckFifoParam+0xcc>
 8004350:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <DMA_CheckFifoParam+0x28>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	08004369 	.word	0x08004369
 800435c:	0800437b 	.word	0x0800437b
 8004360:	08004369 	.word	0x08004369
 8004364:	080043fd 	.word	0x080043fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d045      	beq.n	8004400 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004378:	e042      	b.n	8004400 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004382:	d13f      	bne.n	8004404 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004388:	e03c      	b.n	8004404 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004392:	d121      	bne.n	80043d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	2b03      	cmp	r3, #3
 8004398:	d836      	bhi.n	8004408 <DMA_CheckFifoParam+0xd8>
 800439a:	a201      	add	r2, pc, #4	; (adr r2, 80043a0 <DMA_CheckFifoParam+0x70>)
 800439c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a0:	080043b1 	.word	0x080043b1
 80043a4:	080043b7 	.word	0x080043b7
 80043a8:	080043b1 	.word	0x080043b1
 80043ac:	080043c9 	.word	0x080043c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
      break;
 80043b4:	e02f      	b.n	8004416 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d024      	beq.n	800440c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c6:	e021      	b.n	800440c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80043d0:	d11e      	bne.n	8004410 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043d6:	e01b      	b.n	8004410 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d902      	bls.n	80043e4 <DMA_CheckFifoParam+0xb4>
 80043de:	2b03      	cmp	r3, #3
 80043e0:	d003      	beq.n	80043ea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043e2:	e018      	b.n	8004416 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
      break;
 80043e8:	e015      	b.n	8004416 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00e      	beq.n	8004414 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	73fb      	strb	r3, [r7, #15]
      break;
 80043fa:	e00b      	b.n	8004414 <DMA_CheckFifoParam+0xe4>
      break;
 80043fc:	bf00      	nop
 80043fe:	e00a      	b.n	8004416 <DMA_CheckFifoParam+0xe6>
      break;
 8004400:	bf00      	nop
 8004402:	e008      	b.n	8004416 <DMA_CheckFifoParam+0xe6>
      break;
 8004404:	bf00      	nop
 8004406:	e006      	b.n	8004416 <DMA_CheckFifoParam+0xe6>
      break;
 8004408:	bf00      	nop
 800440a:	e004      	b.n	8004416 <DMA_CheckFifoParam+0xe6>
      break;
 800440c:	bf00      	nop
 800440e:	e002      	b.n	8004416 <DMA_CheckFifoParam+0xe6>
      break;   
 8004410:	bf00      	nop
 8004412:	e000      	b.n	8004416 <DMA_CheckFifoParam+0xe6>
      break;
 8004414:	bf00      	nop
    }
  } 
  
  return status; 
 8004416:	7bfb      	ldrb	r3, [r7, #15]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004424:	b480      	push	{r7}
 8004426:	b089      	sub	sp, #36	; 0x24
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004432:	2300      	movs	r3, #0
 8004434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004436:	2300      	movs	r3, #0
 8004438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	e177      	b.n	8004730 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004440:	2201      	movs	r2, #1
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	4013      	ands	r3, r2
 8004452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	429a      	cmp	r2, r3
 800445a:	f040 8166 	bne.w	800472a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d00b      	beq.n	800447e <HAL_GPIO_Init+0x5a>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d007      	beq.n	800447e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004472:	2b11      	cmp	r3, #17
 8004474:	d003      	beq.n	800447e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b12      	cmp	r3, #18
 800447c:	d130      	bne.n	80044e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	2203      	movs	r2, #3
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43db      	mvns	r3, r3
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4013      	ands	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044b4:	2201      	movs	r2, #1
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	091b      	lsrs	r3, r3, #4
 80044ca:	f003 0201 	and.w	r2, r3, #1
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	fa02 f303 	lsl.w	r3, r2, r3
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	2203      	movs	r2, #3
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	43db      	mvns	r3, r3
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	4013      	ands	r3, r2
 80044f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	fa02 f303 	lsl.w	r3, r2, r3
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	4313      	orrs	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d003      	beq.n	8004520 <HAL_GPIO_Init+0xfc>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b12      	cmp	r3, #18
 800451e:	d123      	bne.n	8004568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	08da      	lsrs	r2, r3, #3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3208      	adds	r2, #8
 8004528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800452c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	f003 0307 	and.w	r3, r3, #7
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	220f      	movs	r2, #15
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	43db      	mvns	r3, r3
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	4013      	ands	r3, r2
 8004542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	4313      	orrs	r3, r2
 8004558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	08da      	lsrs	r2, r3, #3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3208      	adds	r2, #8
 8004562:	69b9      	ldr	r1, [r7, #24]
 8004564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	2203      	movs	r2, #3
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	43db      	mvns	r3, r3
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4013      	ands	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f003 0203 	and.w	r2, r3, #3
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	fa02 f303 	lsl.w	r3, r2, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4313      	orrs	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80c0 	beq.w	800472a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	4b65      	ldr	r3, [pc, #404]	; (8004744 <HAL_GPIO_Init+0x320>)
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	4a64      	ldr	r2, [pc, #400]	; (8004744 <HAL_GPIO_Init+0x320>)
 80045b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045b8:	6453      	str	r3, [r2, #68]	; 0x44
 80045ba:	4b62      	ldr	r3, [pc, #392]	; (8004744 <HAL_GPIO_Init+0x320>)
 80045bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045c6:	4a60      	ldr	r2, [pc, #384]	; (8004748 <HAL_GPIO_Init+0x324>)
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	089b      	lsrs	r3, r3, #2
 80045cc:	3302      	adds	r3, #2
 80045ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	220f      	movs	r2, #15
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	43db      	mvns	r3, r3
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	4013      	ands	r3, r2
 80045e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a57      	ldr	r2, [pc, #348]	; (800474c <HAL_GPIO_Init+0x328>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d037      	beq.n	8004662 <HAL_GPIO_Init+0x23e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a56      	ldr	r2, [pc, #344]	; (8004750 <HAL_GPIO_Init+0x32c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d031      	beq.n	800465e <HAL_GPIO_Init+0x23a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a55      	ldr	r2, [pc, #340]	; (8004754 <HAL_GPIO_Init+0x330>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d02b      	beq.n	800465a <HAL_GPIO_Init+0x236>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a54      	ldr	r2, [pc, #336]	; (8004758 <HAL_GPIO_Init+0x334>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d025      	beq.n	8004656 <HAL_GPIO_Init+0x232>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a53      	ldr	r2, [pc, #332]	; (800475c <HAL_GPIO_Init+0x338>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d01f      	beq.n	8004652 <HAL_GPIO_Init+0x22e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a52      	ldr	r2, [pc, #328]	; (8004760 <HAL_GPIO_Init+0x33c>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d019      	beq.n	800464e <HAL_GPIO_Init+0x22a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a51      	ldr	r2, [pc, #324]	; (8004764 <HAL_GPIO_Init+0x340>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d013      	beq.n	800464a <HAL_GPIO_Init+0x226>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a50      	ldr	r2, [pc, #320]	; (8004768 <HAL_GPIO_Init+0x344>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d00d      	beq.n	8004646 <HAL_GPIO_Init+0x222>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a4f      	ldr	r2, [pc, #316]	; (800476c <HAL_GPIO_Init+0x348>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d007      	beq.n	8004642 <HAL_GPIO_Init+0x21e>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a4e      	ldr	r2, [pc, #312]	; (8004770 <HAL_GPIO_Init+0x34c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d101      	bne.n	800463e <HAL_GPIO_Init+0x21a>
 800463a:	2309      	movs	r3, #9
 800463c:	e012      	b.n	8004664 <HAL_GPIO_Init+0x240>
 800463e:	230a      	movs	r3, #10
 8004640:	e010      	b.n	8004664 <HAL_GPIO_Init+0x240>
 8004642:	2308      	movs	r3, #8
 8004644:	e00e      	b.n	8004664 <HAL_GPIO_Init+0x240>
 8004646:	2307      	movs	r3, #7
 8004648:	e00c      	b.n	8004664 <HAL_GPIO_Init+0x240>
 800464a:	2306      	movs	r3, #6
 800464c:	e00a      	b.n	8004664 <HAL_GPIO_Init+0x240>
 800464e:	2305      	movs	r3, #5
 8004650:	e008      	b.n	8004664 <HAL_GPIO_Init+0x240>
 8004652:	2304      	movs	r3, #4
 8004654:	e006      	b.n	8004664 <HAL_GPIO_Init+0x240>
 8004656:	2303      	movs	r3, #3
 8004658:	e004      	b.n	8004664 <HAL_GPIO_Init+0x240>
 800465a:	2302      	movs	r3, #2
 800465c:	e002      	b.n	8004664 <HAL_GPIO_Init+0x240>
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <HAL_GPIO_Init+0x240>
 8004662:	2300      	movs	r3, #0
 8004664:	69fa      	ldr	r2, [r7, #28]
 8004666:	f002 0203 	and.w	r2, r2, #3
 800466a:	0092      	lsls	r2, r2, #2
 800466c:	4093      	lsls	r3, r2
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4313      	orrs	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004674:	4934      	ldr	r1, [pc, #208]	; (8004748 <HAL_GPIO_Init+0x324>)
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	089b      	lsrs	r3, r3, #2
 800467a:	3302      	adds	r3, #2
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004682:	4b3c      	ldr	r3, [pc, #240]	; (8004774 <HAL_GPIO_Init+0x350>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	43db      	mvns	r3, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4013      	ands	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046a6:	4a33      	ldr	r2, [pc, #204]	; (8004774 <HAL_GPIO_Init+0x350>)
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046ac:	4b31      	ldr	r3, [pc, #196]	; (8004774 <HAL_GPIO_Init+0x350>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	43db      	mvns	r3, r3
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	4013      	ands	r3, r2
 80046ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046d0:	4a28      	ldr	r2, [pc, #160]	; (8004774 <HAL_GPIO_Init+0x350>)
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046d6:	4b27      	ldr	r3, [pc, #156]	; (8004774 <HAL_GPIO_Init+0x350>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	43db      	mvns	r3, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4013      	ands	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046fa:	4a1e      	ldr	r2, [pc, #120]	; (8004774 <HAL_GPIO_Init+0x350>)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004700:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <HAL_GPIO_Init+0x350>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	43db      	mvns	r3, r3
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	4013      	ands	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004724:	4a13      	ldr	r2, [pc, #76]	; (8004774 <HAL_GPIO_Init+0x350>)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3301      	adds	r3, #1
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	2b0f      	cmp	r3, #15
 8004734:	f67f ae84 	bls.w	8004440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004738:	bf00      	nop
 800473a:	3724      	adds	r7, #36	; 0x24
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	40023800 	.word	0x40023800
 8004748:	40013800 	.word	0x40013800
 800474c:	40020000 	.word	0x40020000
 8004750:	40020400 	.word	0x40020400
 8004754:	40020800 	.word	0x40020800
 8004758:	40020c00 	.word	0x40020c00
 800475c:	40021000 	.word	0x40021000
 8004760:	40021400 	.word	0x40021400
 8004764:	40021800 	.word	0x40021800
 8004768:	40021c00 	.word	0x40021c00
 800476c:	40022000 	.word	0x40022000
 8004770:	40022400 	.word	0x40022400
 8004774:	40013c00 	.word	0x40013c00

08004778 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691a      	ldr	r2, [r3, #16]
 8004788:	887b      	ldrh	r3, [r7, #2]
 800478a:	4013      	ands	r3, r2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
 8004794:	e001      	b.n	800479a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004796:	2300      	movs	r3, #0
 8004798:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800479a:	7bfb      	ldrb	r3, [r7, #15]
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	460b      	mov	r3, r1
 80047b2:	807b      	strh	r3, [r7, #2]
 80047b4:	4613      	mov	r3, r2
 80047b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047b8:	787b      	ldrb	r3, [r7, #1]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047be:	887a      	ldrh	r2, [r7, #2]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047c4:	e003      	b.n	80047ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047c6:	887b      	ldrh	r3, [r7, #2]
 80047c8:	041a      	lsls	r2, r3, #16
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	619a      	str	r2, [r3, #24]
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
	...

080047dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80047e6:	4b08      	ldr	r3, [pc, #32]	; (8004808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047e8:	695a      	ldr	r2, [r3, #20]
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d006      	beq.n	8004800 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047f2:	4a05      	ldr	r2, [pc, #20]	; (8004808 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047f4:	88fb      	ldrh	r3, [r7, #6]
 80047f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fc fe6a 	bl	80014d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004800:	bf00      	nop
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40013c00 	.word	0x40013c00

0800480c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e11f      	b.n	8004a5e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fd ff44 	bl	80026c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2224      	movs	r2, #36	; 0x24
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f022 0201 	bic.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800485e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800486e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004870:	f000 fe24 	bl	80054bc <HAL_RCC_GetPCLK1Freq>
 8004874:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	4a7b      	ldr	r2, [pc, #492]	; (8004a68 <HAL_I2C_Init+0x25c>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d807      	bhi.n	8004890 <HAL_I2C_Init+0x84>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4a7a      	ldr	r2, [pc, #488]	; (8004a6c <HAL_I2C_Init+0x260>)
 8004884:	4293      	cmp	r3, r2
 8004886:	bf94      	ite	ls
 8004888:	2301      	movls	r3, #1
 800488a:	2300      	movhi	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	e006      	b.n	800489e <HAL_I2C_Init+0x92>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	4a77      	ldr	r2, [pc, #476]	; (8004a70 <HAL_I2C_Init+0x264>)
 8004894:	4293      	cmp	r3, r2
 8004896:	bf94      	ite	ls
 8004898:	2301      	movls	r3, #1
 800489a:	2300      	movhi	r3, #0
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e0db      	b.n	8004a5e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4a72      	ldr	r2, [pc, #456]	; (8004a74 <HAL_I2C_Init+0x268>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	0c9b      	lsrs	r3, r3, #18
 80048b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	4a64      	ldr	r2, [pc, #400]	; (8004a68 <HAL_I2C_Init+0x25c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d802      	bhi.n	80048e0 <HAL_I2C_Init+0xd4>
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	3301      	adds	r3, #1
 80048de:	e009      	b.n	80048f4 <HAL_I2C_Init+0xe8>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80048e6:	fb02 f303 	mul.w	r3, r2, r3
 80048ea:	4a63      	ldr	r2, [pc, #396]	; (8004a78 <HAL_I2C_Init+0x26c>)
 80048ec:	fba2 2303 	umull	r2, r3, r2, r3
 80048f0:	099b      	lsrs	r3, r3, #6
 80048f2:	3301      	adds	r3, #1
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6812      	ldr	r2, [r2, #0]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004906:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4956      	ldr	r1, [pc, #344]	; (8004a68 <HAL_I2C_Init+0x25c>)
 8004910:	428b      	cmp	r3, r1
 8004912:	d80d      	bhi.n	8004930 <HAL_I2C_Init+0x124>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	1e59      	subs	r1, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004922:	3301      	adds	r3, #1
 8004924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004928:	2b04      	cmp	r3, #4
 800492a:	bf38      	it	cc
 800492c:	2304      	movcc	r3, #4
 800492e:	e04f      	b.n	80049d0 <HAL_I2C_Init+0x1c4>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d111      	bne.n	800495c <HAL_I2C_Init+0x150>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	1e58      	subs	r0, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6859      	ldr	r1, [r3, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	440b      	add	r3, r1
 8004946:	fbb0 f3f3 	udiv	r3, r0, r3
 800494a:	3301      	adds	r3, #1
 800494c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	e012      	b.n	8004982 <HAL_I2C_Init+0x176>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	1e58      	subs	r0, r3, #1
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6859      	ldr	r1, [r3, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	440b      	add	r3, r1
 800496a:	0099      	lsls	r1, r3, #2
 800496c:	440b      	add	r3, r1
 800496e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004972:	3301      	adds	r3, #1
 8004974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004978:	2b00      	cmp	r3, #0
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_I2C_Init+0x17e>
 8004986:	2301      	movs	r3, #1
 8004988:	e022      	b.n	80049d0 <HAL_I2C_Init+0x1c4>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10e      	bne.n	80049b0 <HAL_I2C_Init+0x1a4>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	1e58      	subs	r0, r3, #1
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6859      	ldr	r1, [r3, #4]
 800499a:	460b      	mov	r3, r1
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	440b      	add	r3, r1
 80049a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80049a4:	3301      	adds	r3, #1
 80049a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ae:	e00f      	b.n	80049d0 <HAL_I2C_Init+0x1c4>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	1e58      	subs	r0, r3, #1
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6859      	ldr	r1, [r3, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	0099      	lsls	r1, r3, #2
 80049c0:	440b      	add	r3, r1
 80049c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049c6:	3301      	adds	r3, #1
 80049c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	6809      	ldr	r1, [r1, #0]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	69da      	ldr	r2, [r3, #28]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80049fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6911      	ldr	r1, [r2, #16]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68d2      	ldr	r2, [r2, #12]
 8004a0a:	4311      	orrs	r1, r2
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	430b      	orrs	r3, r1
 8004a12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695a      	ldr	r2, [r3, #20]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	000186a0 	.word	0x000186a0
 8004a6c:	001e847f 	.word	0x001e847f
 8004a70:	003d08ff 	.word	0x003d08ff
 8004a74:	431bde83 	.word	0x431bde83
 8004a78:	10624dd3 	.word	0x10624dd3

08004a7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af02      	add	r7, sp, #8
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	607a      	str	r2, [r7, #4]
 8004a86:	461a      	mov	r2, r3
 8004a88:	460b      	mov	r3, r1
 8004a8a:	817b      	strh	r3, [r7, #10]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a90:	f7fe fbe8 	bl	8003264 <HAL_GetTick>
 8004a94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b20      	cmp	r3, #32
 8004aa0:	f040 80e0 	bne.w	8004c64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	2319      	movs	r3, #25
 8004aaa:	2201      	movs	r2, #1
 8004aac:	4970      	ldr	r1, [pc, #448]	; (8004c70 <HAL_I2C_Master_Transmit+0x1f4>)
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 f964 	bl	8004d7c <I2C_WaitOnFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004aba:	2302      	movs	r3, #2
 8004abc:	e0d3      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_I2C_Master_Transmit+0x50>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e0cc      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d007      	beq.n	8004af2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2221      	movs	r2, #33	; 0x21
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2210      	movs	r2, #16
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	893a      	ldrh	r2, [r7, #8]
 8004b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4a50      	ldr	r2, [pc, #320]	; (8004c74 <HAL_I2C_Master_Transmit+0x1f8>)
 8004b32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004b34:	8979      	ldrh	r1, [r7, #10]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	6a3a      	ldr	r2, [r7, #32]
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 f89c 	bl	8004c78 <I2C_MasterRequestWrite>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e08d      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	613b      	str	r3, [r7, #16]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004b60:	e066      	b.n	8004c30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	6a39      	ldr	r1, [r7, #32]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f9de 	bl	8004f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00d      	beq.n	8004b8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d107      	bne.n	8004b8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e06b      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	781a      	ldrb	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d11b      	bne.n	8004c04 <HAL_I2C_Master_Transmit+0x188>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d017      	beq.n	8004c04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	781a      	ldrb	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	6a39      	ldr	r1, [r7, #32]
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 f9ce 	bl	8004faa <I2C_WaitOnBTFFlagUntilTimeout>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00d      	beq.n	8004c30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	2b04      	cmp	r3, #4
 8004c1a:	d107      	bne.n	8004c2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e01a      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d194      	bne.n	8004b62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	e000      	b.n	8004c66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c64:	2302      	movs	r3, #2
  }
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	00100002 	.word	0x00100002
 8004c74:	ffff0000 	.word	0xffff0000

08004c78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	607a      	str	r2, [r7, #4]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	460b      	mov	r3, r1
 8004c86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d006      	beq.n	8004ca2 <I2C_MasterRequestWrite+0x2a>
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d003      	beq.n	8004ca2 <I2C_MasterRequestWrite+0x2a>
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ca0:	d108      	bne.n	8004cb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	e00b      	b.n	8004ccc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	2b12      	cmp	r3, #18
 8004cba:	d107      	bne.n	8004ccc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	9300      	str	r3, [sp, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 f84f 	bl	8004d7c <I2C_WaitOnFlagUntilTimeout>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00d      	beq.n	8004d00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf2:	d103      	bne.n	8004cfc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e035      	b.n	8004d6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d08:	d108      	bne.n	8004d1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d0a:	897b      	ldrh	r3, [r7, #10]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d18:	611a      	str	r2, [r3, #16]
 8004d1a:	e01b      	b.n	8004d54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d1c:	897b      	ldrh	r3, [r7, #10]
 8004d1e:	11db      	asrs	r3, r3, #7
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	f003 0306 	and.w	r3, r3, #6
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f063 030f 	orn	r3, r3, #15
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	490e      	ldr	r1, [pc, #56]	; (8004d74 <I2C_MasterRequestWrite+0xfc>)
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f875 	bl	8004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e010      	b.n	8004d6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d4a:	897b      	ldrh	r3, [r7, #10]
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	4907      	ldr	r1, [pc, #28]	; (8004d78 <I2C_MasterRequestWrite+0x100>)
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f865 	bl	8004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e000      	b.n	8004d6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	00010008 	.word	0x00010008
 8004d78:	00010002 	.word	0x00010002

08004d7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	603b      	str	r3, [r7, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d8c:	e025      	b.n	8004dda <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d94:	d021      	beq.n	8004dda <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d96:	f7fe fa65 	bl	8003264 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d302      	bcc.n	8004dac <I2C_WaitOnFlagUntilTimeout+0x30>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d116      	bne.n	8004dda <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f043 0220 	orr.w	r2, r3, #32
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e023      	b.n	8004e22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	0c1b      	lsrs	r3, r3, #16
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d10d      	bne.n	8004e00 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	43da      	mvns	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4013      	ands	r3, r2
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	bf0c      	ite	eq
 8004df6:	2301      	moveq	r3, #1
 8004df8:	2300      	movne	r3, #0
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	e00c      	b.n	8004e1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	43da      	mvns	r2, r3
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	bf0c      	ite	eq
 8004e12:	2301      	moveq	r3, #1
 8004e14:	2300      	movne	r3, #0
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	79fb      	ldrb	r3, [r7, #7]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d0b6      	beq.n	8004d8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	60f8      	str	r0, [r7, #12]
 8004e32:	60b9      	str	r1, [r7, #8]
 8004e34:	607a      	str	r2, [r7, #4]
 8004e36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e38:	e051      	b.n	8004ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e48:	d123      	bne.n	8004e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f043 0204 	orr.w	r2, r3, #4
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e046      	b.n	8004f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d021      	beq.n	8004ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9a:	f7fe f9e3 	bl	8003264 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d302      	bcc.n	8004eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d116      	bne.n	8004ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	f043 0220 	orr.w	r2, r3, #32
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e020      	b.n	8004f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	0c1b      	lsrs	r3, r3, #16
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d10c      	bne.n	8004f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	43da      	mvns	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	bf14      	ite	ne
 8004efa:	2301      	movne	r3, #1
 8004efc:	2300      	moveq	r3, #0
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	e00b      	b.n	8004f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	43da      	mvns	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	bf14      	ite	ne
 8004f14:	2301      	movne	r3, #1
 8004f16:	2300      	moveq	r3, #0
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d18d      	bne.n	8004e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f34:	e02d      	b.n	8004f92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 f878 	bl	800502c <I2C_IsAcknowledgeFailed>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e02d      	b.n	8004fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4c:	d021      	beq.n	8004f92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f4e:	f7fe f989 	bl	8003264 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d302      	bcc.n	8004f64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d116      	bne.n	8004f92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f043 0220 	orr.w	r2, r3, #32
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e007      	b.n	8004fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9c:	2b80      	cmp	r3, #128	; 0x80
 8004f9e:	d1ca      	bne.n	8004f36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fb6:	e02d      	b.n	8005014 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f837 	bl	800502c <I2C_IsAcknowledgeFailed>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e02d      	b.n	8005024 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fce:	d021      	beq.n	8005014 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd0:	f7fe f948 	bl	8003264 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d302      	bcc.n	8004fe6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d116      	bne.n	8005014 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	f043 0220 	orr.w	r2, r3, #32
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e007      	b.n	8005024 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f003 0304 	and.w	r3, r3, #4
 800501e:	2b04      	cmp	r3, #4
 8005020:	d1ca      	bne.n	8004fb8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	695b      	ldr	r3, [r3, #20]
 800503a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800503e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005042:	d11b      	bne.n	800507c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800504c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	f043 0204 	orr.w	r2, r3, #4
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
	...

0800508c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005092:	2300      	movs	r3, #0
 8005094:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005096:	2300      	movs	r3, #0
 8005098:	603b      	str	r3, [r7, #0]
 800509a:	4b20      	ldr	r3, [pc, #128]	; (800511c <HAL_PWREx_EnableOverDrive+0x90>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	4a1f      	ldr	r2, [pc, #124]	; (800511c <HAL_PWREx_EnableOverDrive+0x90>)
 80050a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a4:	6413      	str	r3, [r2, #64]	; 0x40
 80050a6:	4b1d      	ldr	r3, [pc, #116]	; (800511c <HAL_PWREx_EnableOverDrive+0x90>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ae:	603b      	str	r3, [r7, #0]
 80050b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80050b2:	4b1b      	ldr	r3, [pc, #108]	; (8005120 <HAL_PWREx_EnableOverDrive+0x94>)
 80050b4:	2201      	movs	r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050b8:	f7fe f8d4 	bl	8003264 <HAL_GetTick>
 80050bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050be:	e009      	b.n	80050d4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050c0:	f7fe f8d0 	bl	8003264 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050ce:	d901      	bls.n	80050d4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e01f      	b.n	8005114 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050d4:	4b13      	ldr	r3, [pc, #76]	; (8005124 <HAL_PWREx_EnableOverDrive+0x98>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e0:	d1ee      	bne.n	80050c0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80050e2:	4b11      	ldr	r3, [pc, #68]	; (8005128 <HAL_PWREx_EnableOverDrive+0x9c>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050e8:	f7fe f8bc 	bl	8003264 <HAL_GetTick>
 80050ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050ee:	e009      	b.n	8005104 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050f0:	f7fe f8b8 	bl	8003264 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050fe:	d901      	bls.n	8005104 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e007      	b.n	8005114 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005104:	4b07      	ldr	r3, [pc, #28]	; (8005124 <HAL_PWREx_EnableOverDrive+0x98>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005110:	d1ee      	bne.n	80050f0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3708      	adds	r7, #8
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	40023800 	.word	0x40023800
 8005120:	420e0040 	.word	0x420e0040
 8005124:	40007000 	.word	0x40007000
 8005128:	420e0044 	.word	0x420e0044

0800512c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0cc      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005140:	4b68      	ldr	r3, [pc, #416]	; (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d90c      	bls.n	8005168 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800514e:	4b65      	ldr	r3, [pc, #404]	; (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005156:	4b63      	ldr	r3, [pc, #396]	; (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d001      	beq.n	8005168 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0b8      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d020      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d005      	beq.n	800518c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005180:	4b59      	ldr	r3, [pc, #356]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	4a58      	ldr	r2, [pc, #352]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005186:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800518a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0308 	and.w	r3, r3, #8
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005198:	4b53      	ldr	r3, [pc, #332]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	4a52      	ldr	r2, [pc, #328]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a4:	4b50      	ldr	r3, [pc, #320]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	494d      	ldr	r1, [pc, #308]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d044      	beq.n	800524c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d107      	bne.n	80051da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ca:	4b47      	ldr	r3, [pc, #284]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d119      	bne.n	800520a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e07f      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d003      	beq.n	80051ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d107      	bne.n	80051fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ea:	4b3f      	ldr	r3, [pc, #252]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d109      	bne.n	800520a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e06f      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051fa:	4b3b      	ldr	r3, [pc, #236]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e067      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800520a:	4b37      	ldr	r3, [pc, #220]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f023 0203 	bic.w	r2, r3, #3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	4934      	ldr	r1, [pc, #208]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005218:	4313      	orrs	r3, r2
 800521a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800521c:	f7fe f822 	bl	8003264 <HAL_GetTick>
 8005220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005222:	e00a      	b.n	800523a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005224:	f7fe f81e 	bl	8003264 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e04f      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523a:	4b2b      	ldr	r3, [pc, #172]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f003 020c 	and.w	r2, r3, #12
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	429a      	cmp	r2, r3
 800524a:	d1eb      	bne.n	8005224 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800524c:	4b25      	ldr	r3, [pc, #148]	; (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 030f 	and.w	r3, r3, #15
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d20c      	bcs.n	8005274 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525a:	4b22      	ldr	r3, [pc, #136]	; (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005262:	4b20      	ldr	r3, [pc, #128]	; (80052e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d001      	beq.n	8005274 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e032      	b.n	80052da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	d008      	beq.n	8005292 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005280:	4b19      	ldr	r3, [pc, #100]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	4916      	ldr	r1, [pc, #88]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 800528e:	4313      	orrs	r3, r2
 8005290:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d009      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800529e:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	490e      	ldr	r1, [pc, #56]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ae:	4313      	orrs	r3, r2
 80052b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052b2:	f000 f821 	bl	80052f8 <HAL_RCC_GetSysClockFreq>
 80052b6:	4601      	mov	r1, r0
 80052b8:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <HAL_RCC_ClockConfig+0x1bc>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	091b      	lsrs	r3, r3, #4
 80052be:	f003 030f 	and.w	r3, r3, #15
 80052c2:	4a0a      	ldr	r2, [pc, #40]	; (80052ec <HAL_RCC_ClockConfig+0x1c0>)
 80052c4:	5cd3      	ldrb	r3, [r2, r3]
 80052c6:	fa21 f303 	lsr.w	r3, r1, r3
 80052ca:	4a09      	ldr	r2, [pc, #36]	; (80052f0 <HAL_RCC_ClockConfig+0x1c4>)
 80052cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052ce:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <HAL_RCC_ClockConfig+0x1c8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fd ff82 	bl	80031dc <HAL_InitTick>

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40023c00 	.word	0x40023c00
 80052e8:	40023800 	.word	0x40023800
 80052ec:	080126d8 	.word	0x080126d8
 80052f0:	20000000 	.word	0x20000000
 80052f4:	20000004 	.word	0x20000004

080052f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	607b      	str	r3, [r7, #4]
 8005302:	2300      	movs	r3, #0
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	2300      	movs	r3, #0
 8005308:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800530e:	4b63      	ldr	r3, [pc, #396]	; (800549c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 030c 	and.w	r3, r3, #12
 8005316:	2b04      	cmp	r3, #4
 8005318:	d007      	beq.n	800532a <HAL_RCC_GetSysClockFreq+0x32>
 800531a:	2b08      	cmp	r3, #8
 800531c:	d008      	beq.n	8005330 <HAL_RCC_GetSysClockFreq+0x38>
 800531e:	2b00      	cmp	r3, #0
 8005320:	f040 80b4 	bne.w	800548c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005324:	4b5e      	ldr	r3, [pc, #376]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005326:	60bb      	str	r3, [r7, #8]
       break;
 8005328:	e0b3      	b.n	8005492 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800532a:	4b5d      	ldr	r3, [pc, #372]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800532c:	60bb      	str	r3, [r7, #8]
      break;
 800532e:	e0b0      	b.n	8005492 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005330:	4b5a      	ldr	r3, [pc, #360]	; (800549c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005338:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800533a:	4b58      	ldr	r3, [pc, #352]	; (800549c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d04a      	beq.n	80053dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005346:	4b55      	ldr	r3, [pc, #340]	; (800549c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	099b      	lsrs	r3, r3, #6
 800534c:	f04f 0400 	mov.w	r4, #0
 8005350:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	ea03 0501 	and.w	r5, r3, r1
 800535c:	ea04 0602 	and.w	r6, r4, r2
 8005360:	4629      	mov	r1, r5
 8005362:	4632      	mov	r2, r6
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	f04f 0400 	mov.w	r4, #0
 800536c:	0154      	lsls	r4, r2, #5
 800536e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005372:	014b      	lsls	r3, r1, #5
 8005374:	4619      	mov	r1, r3
 8005376:	4622      	mov	r2, r4
 8005378:	1b49      	subs	r1, r1, r5
 800537a:	eb62 0206 	sbc.w	r2, r2, r6
 800537e:	f04f 0300 	mov.w	r3, #0
 8005382:	f04f 0400 	mov.w	r4, #0
 8005386:	0194      	lsls	r4, r2, #6
 8005388:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800538c:	018b      	lsls	r3, r1, #6
 800538e:	1a5b      	subs	r3, r3, r1
 8005390:	eb64 0402 	sbc.w	r4, r4, r2
 8005394:	f04f 0100 	mov.w	r1, #0
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	00e2      	lsls	r2, r4, #3
 800539e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053a2:	00d9      	lsls	r1, r3, #3
 80053a4:	460b      	mov	r3, r1
 80053a6:	4614      	mov	r4, r2
 80053a8:	195b      	adds	r3, r3, r5
 80053aa:	eb44 0406 	adc.w	r4, r4, r6
 80053ae:	f04f 0100 	mov.w	r1, #0
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	02a2      	lsls	r2, r4, #10
 80053b8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80053bc:	0299      	lsls	r1, r3, #10
 80053be:	460b      	mov	r3, r1
 80053c0:	4614      	mov	r4, r2
 80053c2:	4618      	mov	r0, r3
 80053c4:	4621      	mov	r1, r4
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f04f 0400 	mov.w	r4, #0
 80053cc:	461a      	mov	r2, r3
 80053ce:	4623      	mov	r3, r4
 80053d0:	f7fb fc72 	bl	8000cb8 <__aeabi_uldivmod>
 80053d4:	4603      	mov	r3, r0
 80053d6:	460c      	mov	r4, r1
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	e049      	b.n	8005470 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053dc:	4b2f      	ldr	r3, [pc, #188]	; (800549c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	099b      	lsrs	r3, r3, #6
 80053e2:	f04f 0400 	mov.w	r4, #0
 80053e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	ea03 0501 	and.w	r5, r3, r1
 80053f2:	ea04 0602 	and.w	r6, r4, r2
 80053f6:	4629      	mov	r1, r5
 80053f8:	4632      	mov	r2, r6
 80053fa:	f04f 0300 	mov.w	r3, #0
 80053fe:	f04f 0400 	mov.w	r4, #0
 8005402:	0154      	lsls	r4, r2, #5
 8005404:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005408:	014b      	lsls	r3, r1, #5
 800540a:	4619      	mov	r1, r3
 800540c:	4622      	mov	r2, r4
 800540e:	1b49      	subs	r1, r1, r5
 8005410:	eb62 0206 	sbc.w	r2, r2, r6
 8005414:	f04f 0300 	mov.w	r3, #0
 8005418:	f04f 0400 	mov.w	r4, #0
 800541c:	0194      	lsls	r4, r2, #6
 800541e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005422:	018b      	lsls	r3, r1, #6
 8005424:	1a5b      	subs	r3, r3, r1
 8005426:	eb64 0402 	sbc.w	r4, r4, r2
 800542a:	f04f 0100 	mov.w	r1, #0
 800542e:	f04f 0200 	mov.w	r2, #0
 8005432:	00e2      	lsls	r2, r4, #3
 8005434:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005438:	00d9      	lsls	r1, r3, #3
 800543a:	460b      	mov	r3, r1
 800543c:	4614      	mov	r4, r2
 800543e:	195b      	adds	r3, r3, r5
 8005440:	eb44 0406 	adc.w	r4, r4, r6
 8005444:	f04f 0100 	mov.w	r1, #0
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	02a2      	lsls	r2, r4, #10
 800544e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005452:	0299      	lsls	r1, r3, #10
 8005454:	460b      	mov	r3, r1
 8005456:	4614      	mov	r4, r2
 8005458:	4618      	mov	r0, r3
 800545a:	4621      	mov	r1, r4
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f04f 0400 	mov.w	r4, #0
 8005462:	461a      	mov	r2, r3
 8005464:	4623      	mov	r3, r4
 8005466:	f7fb fc27 	bl	8000cb8 <__aeabi_uldivmod>
 800546a:	4603      	mov	r3, r0
 800546c:	460c      	mov	r4, r1
 800546e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005470:	4b0a      	ldr	r3, [pc, #40]	; (800549c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	0c1b      	lsrs	r3, r3, #16
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	3301      	adds	r3, #1
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	fbb2 f3f3 	udiv	r3, r2, r3
 8005488:	60bb      	str	r3, [r7, #8]
      break;
 800548a:	e002      	b.n	8005492 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800548c:	4b04      	ldr	r3, [pc, #16]	; (80054a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800548e:	60bb      	str	r3, [r7, #8]
      break;
 8005490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005492:	68bb      	ldr	r3, [r7, #8]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800549c:	40023800 	.word	0x40023800
 80054a0:	00f42400 	.word	0x00f42400

080054a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054a8:	4b03      	ldr	r3, [pc, #12]	; (80054b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80054aa:	681b      	ldr	r3, [r3, #0]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	20000000 	.word	0x20000000

080054bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054c0:	f7ff fff0 	bl	80054a4 <HAL_RCC_GetHCLKFreq>
 80054c4:	4601      	mov	r1, r0
 80054c6:	4b05      	ldr	r3, [pc, #20]	; (80054dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	0a9b      	lsrs	r3, r3, #10
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	4a03      	ldr	r2, [pc, #12]	; (80054e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054d2:	5cd3      	ldrb	r3, [r2, r3]
 80054d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054d8:	4618      	mov	r0, r3
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	40023800 	.word	0x40023800
 80054e0:	080126e8 	.word	0x080126e8

080054e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054e8:	f7ff ffdc 	bl	80054a4 <HAL_RCC_GetHCLKFreq>
 80054ec:	4601      	mov	r1, r0
 80054ee:	4b05      	ldr	r3, [pc, #20]	; (8005504 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	0b5b      	lsrs	r3, r3, #13
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	4a03      	ldr	r2, [pc, #12]	; (8005508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054fa:	5cd3      	ldrb	r3, [r2, r3]
 80054fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005500:	4618      	mov	r0, r3
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40023800 	.word	0x40023800
 8005508:	080126e8 	.word	0x080126e8

0800550c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b088      	sub	sp, #32
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8005520:	2300      	movs	r3, #0
 8005522:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005534:	4b66      	ldr	r3, [pc, #408]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005536:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800553a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005542:	4963      	ldr	r1, [pc, #396]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8005556:	4b5e      	ldr	r3, [pc, #376]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800555c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	495a      	ldr	r1, [pc, #360]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10b      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005580:	2b00      	cmp	r3, #0
 8005582:	d105      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800558c:	2b00      	cmp	r3, #0
 800558e:	d075      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005590:	4b50      	ldr	r3, [pc, #320]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005596:	f7fd fe65 	bl	8003264 <HAL_GetTick>
 800559a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800559c:	e008      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800559e:	f7fd fe61 	bl	8003264 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d901      	bls.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e1dc      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055b0:	4b47      	ldr	r3, [pc, #284]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f0      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d009      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	019a      	lsls	r2, r3, #6
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	071b      	lsls	r3, r3, #28
 80055d4:	493e      	ldr	r1, [pc, #248]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d01f      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80055e8:	4b39      	ldr	r3, [pc, #228]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80055ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ee:	0f1b      	lsrs	r3, r3, #28
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	019a      	lsls	r2, r3, #6
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	061b      	lsls	r3, r3, #24
 8005602:	431a      	orrs	r2, r3
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	071b      	lsls	r3, r3, #28
 8005608:	4931      	ldr	r1, [pc, #196]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005610:	4b2f      	ldr	r3, [pc, #188]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005616:	f023 021f 	bic.w	r2, r3, #31
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	3b01      	subs	r3, #1
 8005620:	492b      	ldr	r1, [pc, #172]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005622:	4313      	orrs	r3, r2
 8005624:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00d      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	019a      	lsls	r2, r3, #6
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	061b      	lsls	r3, r3, #24
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	071b      	lsls	r3, r3, #28
 8005648:	4921      	ldr	r1, [pc, #132]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005650:	4b20      	ldr	r3, [pc, #128]	; (80056d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005652:	2201      	movs	r2, #1
 8005654:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005656:	f7fd fe05 	bl	8003264 <HAL_GetTick>
 800565a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800565c:	e008      	b.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800565e:	f7fd fe01 	bl	8003264 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d901      	bls.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e17c      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005670:	4b17      	ldr	r3, [pc, #92]	; (80056d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0f0      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	2b00      	cmp	r3, #0
 8005686:	d112      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10c      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 80ce 	beq.w	800583e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80056a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056aa:	f040 80c8 	bne.w	800583e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80056ae:	4b0a      	ldr	r3, [pc, #40]	; (80056d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056b4:	f7fd fdd6 	bl	8003264 <HAL_GetTick>
 80056b8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80056ba:	e00f      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80056bc:	f7fd fdd2 	bl	8003264 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d908      	bls.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e14d      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80056ce:	bf00      	nop
 80056d0:	40023800 	.word	0x40023800
 80056d4:	42470068 	.word	0x42470068
 80056d8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80056dc:	4ba5      	ldr	r3, [pc, #660]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056e8:	d0e8      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d02e      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80056f6:	4b9f      	ldr	r3, [pc, #636]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80056f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fc:	0c1b      	lsrs	r3, r3, #16
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	3301      	adds	r3, #1
 8005704:	005b      	lsls	r3, r3, #1
 8005706:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005708:	4b9a      	ldr	r3, [pc, #616]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570e:	0f1b      	lsrs	r3, r3, #28
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	019a      	lsls	r2, r3, #6
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	085b      	lsrs	r3, r3, #1
 8005720:	3b01      	subs	r3, #1
 8005722:	041b      	lsls	r3, r3, #16
 8005724:	431a      	orrs	r2, r3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	061b      	lsls	r3, r3, #24
 800572c:	431a      	orrs	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	071b      	lsls	r3, r3, #28
 8005732:	4990      	ldr	r1, [pc, #576]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800573a:	4b8e      	ldr	r3, [pc, #568]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800573c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005740:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	3b01      	subs	r3, #1
 800574a:	021b      	lsls	r3, r3, #8
 800574c:	4989      	ldr	r1, [pc, #548]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b00      	cmp	r3, #0
 800575e:	d02c      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005760:	4b84      	ldr	r3, [pc, #528]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005766:	0c1b      	lsrs	r3, r3, #16
 8005768:	f003 0303 	and.w	r3, r3, #3
 800576c:	3301      	adds	r3, #1
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005772:	4b80      	ldr	r3, [pc, #512]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005778:	0e1b      	lsrs	r3, r3, #24
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	019a      	lsls	r2, r3, #6
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	085b      	lsrs	r3, r3, #1
 800578a:	3b01      	subs	r3, #1
 800578c:	041b      	lsls	r3, r3, #16
 800578e:	431a      	orrs	r2, r3
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	061b      	lsls	r3, r3, #24
 8005794:	431a      	orrs	r2, r3
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	071b      	lsls	r3, r3, #28
 800579c:	4975      	ldr	r1, [pc, #468]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80057a4:	4b73      	ldr	r3, [pc, #460]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b2:	4970      	ldr	r1, [pc, #448]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d024      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 80057ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ce:	d11f      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057d0:	4b68      	ldr	r3, [pc, #416]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d6:	0e1b      	lsrs	r3, r3, #24
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057de:	4b65      	ldr	r3, [pc, #404]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80057e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e4:	0f1b      	lsrs	r3, r3, #28
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	019a      	lsls	r2, r3, #6
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	085b      	lsrs	r3, r3, #1
 80057f8:	3b01      	subs	r3, #1
 80057fa:	041b      	lsls	r3, r3, #16
 80057fc:	431a      	orrs	r2, r3
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	061b      	lsls	r3, r3, #24
 8005802:	431a      	orrs	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	071b      	lsls	r3, r3, #28
 8005808:	495a      	ldr	r1, [pc, #360]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800580a:	4313      	orrs	r3, r2
 800580c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005810:	4b59      	ldr	r3, [pc, #356]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005812:	2201      	movs	r2, #1
 8005814:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005816:	f7fd fd25 	bl	8003264 <HAL_GetTick>
 800581a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800581c:	e008      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800581e:	f7fd fd21 	bl	8003264 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e09c      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005830:	4b50      	ldr	r3, [pc, #320]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800583c:	d1ef      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0320 	and.w	r3, r3, #32
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 8083 	beq.w	8005952 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800584c:	2300      	movs	r3, #0
 800584e:	60bb      	str	r3, [r7, #8]
 8005850:	4b48      	ldr	r3, [pc, #288]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	4a47      	ldr	r2, [pc, #284]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800585a:	6413      	str	r3, [r2, #64]	; 0x40
 800585c:	4b45      	ldr	r3, [pc, #276]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005864:	60bb      	str	r3, [r7, #8]
 8005866:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005868:	4b44      	ldr	r3, [pc, #272]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a43      	ldr	r2, [pc, #268]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800586e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005872:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005874:	f7fd fcf6 	bl	8003264 <HAL_GetTick>
 8005878:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800587a:	e008      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800587c:	f7fd fcf2 	bl	8003264 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d901      	bls.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e06d      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800588e:	4b3b      	ldr	r3, [pc, #236]	; (800597c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0f0      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800589a:	4b36      	ldr	r3, [pc, #216]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800589c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a2:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d02f      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d028      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058b8:	4b2e      	ldr	r3, [pc, #184]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80058ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058c2:	4b2f      	ldr	r3, [pc, #188]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80058c4:	2201      	movs	r2, #1
 80058c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058c8:	4b2d      	ldr	r3, [pc, #180]	; (8005980 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80058ce:	4a29      	ldr	r2, [pc, #164]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058d4:	4b27      	ldr	r3, [pc, #156]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80058d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d8:	f003 0301 	and.w	r3, r3, #1
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d114      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80058e0:	f7fd fcc0 	bl	8003264 <HAL_GetTick>
 80058e4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e6:	e00a      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058e8:	f7fd fcbc 	bl	8003264 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d901      	bls.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e035      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058fe:	4b1d      	ldr	r3, [pc, #116]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0ee      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005912:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005916:	d10d      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005918:	4b16      	ldr	r3, [pc, #88]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800592c:	4911      	ldr	r1, [pc, #68]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800592e:	4313      	orrs	r3, r2
 8005930:	608b      	str	r3, [r1, #8]
 8005932:	e005      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8005934:	4b0f      	ldr	r3, [pc, #60]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	4a0e      	ldr	r2, [pc, #56]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800593a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800593e:	6093      	str	r3, [r2, #8]
 8005940:	4b0c      	ldr	r3, [pc, #48]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8005942:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800594c:	4909      	ldr	r1, [pc, #36]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800594e:	4313      	orrs	r3, r2
 8005950:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0310 	and.w	r3, r3, #16
 800595a:	2b00      	cmp	r3, #0
 800595c:	d004      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005964:	4b07      	ldr	r3, [pc, #28]	; (8005984 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 8005966:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3720      	adds	r7, #32
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	40023800 	.word	0x40023800
 8005978:	42470070 	.word	0x42470070
 800597c:	40007000 	.word	0x40007000
 8005980:	42470e40 	.word	0x42470e40
 8005984:	424711e0 	.word	0x424711e0

08005988 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	d075      	beq.n	8005a8c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80059a0:	4ba2      	ldr	r3, [pc, #648]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 030c 	and.w	r3, r3, #12
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d00c      	beq.n	80059c6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ac:	4b9f      	ldr	r3, [pc, #636]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80059b4:	2b08      	cmp	r3, #8
 80059b6:	d112      	bne.n	80059de <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059b8:	4b9c      	ldr	r3, [pc, #624]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059c4:	d10b      	bne.n	80059de <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059c6:	4b99      	ldr	r3, [pc, #612]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d05b      	beq.n	8005a8a <HAL_RCC_OscConfig+0x102>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d157      	bne.n	8005a8a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e20b      	b.n	8005df6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059e6:	d106      	bne.n	80059f6 <HAL_RCC_OscConfig+0x6e>
 80059e8:	4b90      	ldr	r3, [pc, #576]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a8f      	ldr	r2, [pc, #572]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 80059ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059f2:	6013      	str	r3, [r2, #0]
 80059f4:	e01d      	b.n	8005a32 <HAL_RCC_OscConfig+0xaa>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80059fe:	d10c      	bne.n	8005a1a <HAL_RCC_OscConfig+0x92>
 8005a00:	4b8a      	ldr	r3, [pc, #552]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a89      	ldr	r2, [pc, #548]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005a06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a0a:	6013      	str	r3, [r2, #0]
 8005a0c:	4b87      	ldr	r3, [pc, #540]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a86      	ldr	r2, [pc, #536]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	e00b      	b.n	8005a32 <HAL_RCC_OscConfig+0xaa>
 8005a1a:	4b84      	ldr	r3, [pc, #528]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a83      	ldr	r2, [pc, #524]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	4b81      	ldr	r3, [pc, #516]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a80      	ldr	r2, [pc, #512]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a30:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d013      	beq.n	8005a62 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a3a:	f7fd fc13 	bl	8003264 <HAL_GetTick>
 8005a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a40:	e008      	b.n	8005a54 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a42:	f7fd fc0f 	bl	8003264 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b64      	cmp	r3, #100	; 0x64
 8005a4e:	d901      	bls.n	8005a54 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	e1d0      	b.n	8005df6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a54:	4b75      	ldr	r3, [pc, #468]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0f0      	beq.n	8005a42 <HAL_RCC_OscConfig+0xba>
 8005a60:	e014      	b.n	8005a8c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a62:	f7fd fbff 	bl	8003264 <HAL_GetTick>
 8005a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a6a:	f7fd fbfb 	bl	8003264 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b64      	cmp	r3, #100	; 0x64
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e1bc      	b.n	8005df6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a7c:	4b6b      	ldr	r3, [pc, #428]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f0      	bne.n	8005a6a <HAL_RCC_OscConfig+0xe2>
 8005a88:	e000      	b.n	8005a8c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a8a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d063      	beq.n	8005b60 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005a98:	4b64      	ldr	r3, [pc, #400]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 030c 	and.w	r3, r3, #12
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00b      	beq.n	8005abc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005aa4:	4b61      	ldr	r3, [pc, #388]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d11c      	bne.n	8005aea <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ab0:	4b5e      	ldr	r3, [pc, #376]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d116      	bne.n	8005aea <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005abc:	4b5b      	ldr	r3, [pc, #364]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d005      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x14c>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d001      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e190      	b.n	8005df6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ad4:	4b55      	ldr	r3, [pc, #340]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	4952      	ldr	r1, [pc, #328]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ae8:	e03a      	b.n	8005b60 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d020      	beq.n	8005b34 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005af2:	4b4f      	ldr	r3, [pc, #316]	; (8005c30 <HAL_RCC_OscConfig+0x2a8>)
 8005af4:	2201      	movs	r2, #1
 8005af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af8:	f7fd fbb4 	bl	8003264 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005afe:	e008      	b.n	8005b12 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b00:	f7fd fbb0 	bl	8003264 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d901      	bls.n	8005b12 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	e171      	b.n	8005df6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b12:	4b46      	ldr	r3, [pc, #280]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0f0      	beq.n	8005b00 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b1e:	4b43      	ldr	r3, [pc, #268]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	493f      	ldr	r1, [pc, #252]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	600b      	str	r3, [r1, #0]
 8005b32:	e015      	b.n	8005b60 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b34:	4b3e      	ldr	r3, [pc, #248]	; (8005c30 <HAL_RCC_OscConfig+0x2a8>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3a:	f7fd fb93 	bl	8003264 <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b40:	e008      	b.n	8005b54 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b42:	f7fd fb8f 	bl	8003264 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e150      	b.n	8005df6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b54:	4b35      	ldr	r3, [pc, #212]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1f0      	bne.n	8005b42 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d030      	beq.n	8005bce <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d016      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b74:	4b2f      	ldr	r3, [pc, #188]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7a:	f7fd fb73 	bl	8003264 <HAL_GetTick>
 8005b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b80:	e008      	b.n	8005b94 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b82:	f7fd fb6f 	bl	8003264 <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	2b02      	cmp	r3, #2
 8005b8e:	d901      	bls.n	8005b94 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e130      	b.n	8005df6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b94:	4b25      	ldr	r3, [pc, #148]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d0f0      	beq.n	8005b82 <HAL_RCC_OscConfig+0x1fa>
 8005ba0:	e015      	b.n	8005bce <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ba2:	4b24      	ldr	r3, [pc, #144]	; (8005c34 <HAL_RCC_OscConfig+0x2ac>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba8:	f7fd fb5c 	bl	8003264 <HAL_GetTick>
 8005bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bb0:	f7fd fb58 	bl	8003264 <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e119      	b.n	8005df6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bc2:	4b1a      	ldr	r3, [pc, #104]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f0      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 809f 	beq.w	8005d1a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005be0:	4b12      	ldr	r3, [pc, #72]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10f      	bne.n	8005c0c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bec:	2300      	movs	r3, #0
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	4b0e      	ldr	r3, [pc, #56]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf4:	4a0d      	ldr	r2, [pc, #52]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	; (8005c2c <HAL_RCC_OscConfig+0x2a4>)
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c0c:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <HAL_RCC_OscConfig+0x2b0>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d120      	bne.n	8005c5a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c18:	4b07      	ldr	r3, [pc, #28]	; (8005c38 <HAL_RCC_OscConfig+0x2b0>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a06      	ldr	r2, [pc, #24]	; (8005c38 <HAL_RCC_OscConfig+0x2b0>)
 8005c1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c24:	f7fd fb1e 	bl	8003264 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c2a:	e010      	b.n	8005c4e <HAL_RCC_OscConfig+0x2c6>
 8005c2c:	40023800 	.word	0x40023800
 8005c30:	42470000 	.word	0x42470000
 8005c34:	42470e80 	.word	0x42470e80
 8005c38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c3c:	f7fd fb12 	bl	8003264 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e0d3      	b.n	8005df6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c4e:	4b6c      	ldr	r3, [pc, #432]	; (8005e00 <HAL_RCC_OscConfig+0x478>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d0f0      	beq.n	8005c3c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d106      	bne.n	8005c70 <HAL_RCC_OscConfig+0x2e8>
 8005c62:	4b68      	ldr	r3, [pc, #416]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c66:	4a67      	ldr	r2, [pc, #412]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005c68:	f043 0301 	orr.w	r3, r3, #1
 8005c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c6e:	e01c      	b.n	8005caa <HAL_RCC_OscConfig+0x322>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2b05      	cmp	r3, #5
 8005c76:	d10c      	bne.n	8005c92 <HAL_RCC_OscConfig+0x30a>
 8005c78:	4b62      	ldr	r3, [pc, #392]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7c:	4a61      	ldr	r2, [pc, #388]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005c7e:	f043 0304 	orr.w	r3, r3, #4
 8005c82:	6713      	str	r3, [r2, #112]	; 0x70
 8005c84:	4b5f      	ldr	r3, [pc, #380]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c88:	4a5e      	ldr	r2, [pc, #376]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005c8a:	f043 0301 	orr.w	r3, r3, #1
 8005c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c90:	e00b      	b.n	8005caa <HAL_RCC_OscConfig+0x322>
 8005c92:	4b5c      	ldr	r3, [pc, #368]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c96:	4a5b      	ldr	r2, [pc, #364]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005c98:	f023 0301 	bic.w	r3, r3, #1
 8005c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c9e:	4b59      	ldr	r3, [pc, #356]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca2:	4a58      	ldr	r2, [pc, #352]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005ca4:	f023 0304 	bic.w	r3, r3, #4
 8005ca8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d015      	beq.n	8005cde <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb2:	f7fd fad7 	bl	8003264 <HAL_GetTick>
 8005cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb8:	e00a      	b.n	8005cd0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cba:	f7fd fad3 	bl	8003264 <HAL_GetTick>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	1ad3      	subs	r3, r2, r3
 8005cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d901      	bls.n	8005cd0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e092      	b.n	8005df6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd0:	4b4c      	ldr	r3, [pc, #304]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd4:	f003 0302 	and.w	r3, r3, #2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0ee      	beq.n	8005cba <HAL_RCC_OscConfig+0x332>
 8005cdc:	e014      	b.n	8005d08 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cde:	f7fd fac1 	bl	8003264 <HAL_GetTick>
 8005ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ce4:	e00a      	b.n	8005cfc <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ce6:	f7fd fabd 	bl	8003264 <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d901      	bls.n	8005cfc <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e07c      	b.n	8005df6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cfc:	4b41      	ldr	r3, [pc, #260]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1ee      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d08:	7dfb      	ldrb	r3, [r7, #23]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d105      	bne.n	8005d1a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d0e:	4b3d      	ldr	r3, [pc, #244]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	4a3c      	ldr	r2, [pc, #240]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d068      	beq.n	8005df4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d22:	4b38      	ldr	r3, [pc, #224]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 030c 	and.w	r3, r3, #12
 8005d2a:	2b08      	cmp	r3, #8
 8005d2c:	d060      	beq.n	8005df0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d145      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d36:	4b34      	ldr	r3, [pc, #208]	; (8005e08 <HAL_RCC_OscConfig+0x480>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3c:	f7fd fa92 	bl	8003264 <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d42:	e008      	b.n	8005d56 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d44:	f7fd fa8e 	bl	8003264 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d901      	bls.n	8005d56 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e04f      	b.n	8005df6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d56:	4b2b      	ldr	r3, [pc, #172]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1f0      	bne.n	8005d44 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69da      	ldr	r2, [r3, #28]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	019b      	lsls	r3, r3, #6
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d78:	085b      	lsrs	r3, r3, #1
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	041b      	lsls	r3, r3, #16
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	061b      	lsls	r3, r3, #24
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8c:	071b      	lsls	r3, r3, #28
 8005d8e:	491d      	ldr	r1, [pc, #116]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d94:	4b1c      	ldr	r3, [pc, #112]	; (8005e08 <HAL_RCC_OscConfig+0x480>)
 8005d96:	2201      	movs	r2, #1
 8005d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d9a:	f7fd fa63 	bl	8003264 <HAL_GetTick>
 8005d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005da0:	e008      	b.n	8005db4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005da2:	f7fd fa5f 	bl	8003264 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e020      	b.n	8005df6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005db4:	4b13      	ldr	r3, [pc, #76]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d0f0      	beq.n	8005da2 <HAL_RCC_OscConfig+0x41a>
 8005dc0:	e018      	b.n	8005df4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc2:	4b11      	ldr	r3, [pc, #68]	; (8005e08 <HAL_RCC_OscConfig+0x480>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc8:	f7fd fa4c 	bl	8003264 <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dd0:	f7fd fa48 	bl	8003264 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e009      	b.n	8005df6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005de2:	4b08      	ldr	r3, [pc, #32]	; (8005e04 <HAL_RCC_OscConfig+0x47c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1f0      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x448>
 8005dee:	e001      	b.n	8005df4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e000      	b.n	8005df6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	40007000 	.word	0x40007000
 8005e04:	40023800 	.word	0x40023800
 8005e08:	42470060 	.word	0x42470060

08005e0c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e022      	b.n	8005e64 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d105      	bne.n	8005e36 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7fc fcc1 	bl	80027b8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2203      	movs	r2, #3
 8005e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f814 	bl	8005e6c <HAL_SD_InitCard>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e00a      	b.n	8005e64 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005e62:	2300      	movs	r3, #0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005e6c:	b5b0      	push	{r4, r5, r7, lr}
 8005e6e:	b08e      	sub	sp, #56	; 0x38
 8005e70:	af04      	add	r7, sp, #16
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005e80:	2300      	movs	r3, #0
 8005e82:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005e84:	2300      	movs	r3, #0
 8005e86:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005e88:	2376      	movs	r3, #118	; 0x76
 8005e8a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681d      	ldr	r5, [r3, #0]
 8005e90:	466c      	mov	r4, sp
 8005e92:	f107 0314 	add.w	r3, r7, #20
 8005e96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e9e:	f107 0308 	add.w	r3, r7, #8
 8005ea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	f002 fd97 	bl	80089d8 <SDIO_Init>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005eb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e031      	b.n	8005f20 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005ebc:	4b1a      	ldr	r3, [pc, #104]	; (8005f28 <HAL_SD_InitCard+0xbc>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f002 fdcf 	bl	8008a6a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005ecc:	4b16      	ldr	r3, [pc, #88]	; (8005f28 <HAL_SD_InitCard+0xbc>)
 8005ece:	2201      	movs	r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 ffc6 	bl	8006e64 <SD_PowerON>
 8005ed8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00b      	beq.n	8005ef8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e013      	b.n	8005f20 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fee5 	bl	8006cc8 <SD_InitCard>
 8005efe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00b      	beq.n	8005f1e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	431a      	orrs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e000      	b.n	8005f20 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3728      	adds	r7, #40	; 0x28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bdb0      	pop	{r4, r5, r7, pc}
 8005f28:	422580a0 	.word	0x422580a0

08005f2c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08c      	sub	sp, #48	; 0x30
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
 8005f38:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d107      	bne.n	8005f54 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e0c7      	b.n	80060e4 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	f040 80c0 	bne.w	80060e2 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	441a      	add	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d907      	bls.n	8005f86 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e0ae      	b.n	80060e4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2203      	movs	r2, #3
 8005f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2200      	movs	r2, #0
 8005f94:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005fa4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	4a50      	ldr	r2, [pc, #320]	; (80060ec <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005fac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	4a4f      	ldr	r2, [pc, #316]	; (80060f0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8005fb4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	2200      	movs	r2, #0
 8005fbc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3380      	adds	r3, #128	; 0x80
 8005fc8:	4619      	mov	r1, r3
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	025b      	lsls	r3, r3, #9
 8005fd0:	089b      	lsrs	r3, r3, #2
 8005fd2:	f7fd ff39 	bl	8003e48 <HAL_DMA_Start_IT>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d017      	beq.n	800600c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005fea:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a40      	ldr	r2, [pc, #256]	; (80060f4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e06b      	b.n	80060e4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800600c:	4b3a      	ldr	r3, [pc, #232]	; (80060f8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800600e:	2201      	movs	r2, #1
 8006010:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006016:	2b01      	cmp	r3, #1
 8006018:	d002      	beq.n	8006020 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	025b      	lsls	r3, r3, #9
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006028:	4618      	mov	r0, r3
 800602a:	f002 fdb1 	bl	8008b90 <SDMMC_CmdBlockLength>
 800602e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8006030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00f      	beq.n	8006056 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a2e      	ldr	r2, [pc, #184]	; (80060f4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800603c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006044:	431a      	orrs	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e046      	b.n	80060e4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006056:	f04f 33ff 	mov.w	r3, #4294967295
 800605a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	025b      	lsls	r3, r3, #9
 8006060:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006062:	2390      	movs	r3, #144	; 0x90
 8006064:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006066:	2302      	movs	r3, #2
 8006068:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800606a:	2300      	movs	r3, #0
 800606c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800606e:	2301      	movs	r3, #1
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f107 0210 	add.w	r2, r7, #16
 800607a:	4611      	mov	r1, r2
 800607c:	4618      	mov	r0, r3
 800607e:	f002 fd5b 	bl	8008b38 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d90a      	bls.n	800609e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2282      	movs	r2, #130	; 0x82
 800608c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006094:	4618      	mov	r0, r3
 8006096:	f002 fdbf 	bl	8008c18 <SDMMC_CmdReadMultiBlock>
 800609a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800609c:	e009      	b.n	80060b2 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2281      	movs	r2, #129	; 0x81
 80060a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060aa:	4618      	mov	r0, r3
 80060ac:	f002 fd92 	bl	8008bd4 <SDMMC_CmdReadSingleBlock>
 80060b0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80060b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d012      	beq.n	80060de <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a0d      	ldr	r2, [pc, #52]	; (80060f4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80060be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c6:	431a      	orrs	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e002      	b.n	80060e4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	e000      	b.n	80060e4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 80060e2:	2302      	movs	r3, #2
  }
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3730      	adds	r7, #48	; 0x30
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	08006ad7 	.word	0x08006ad7
 80060f0:	08006b49 	.word	0x08006b49
 80060f4:	004005ff 	.word	0x004005ff
 80060f8:	4225858c 	.word	0x4225858c

080060fc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08c      	sub	sp, #48	; 0x30
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
 8006108:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d107      	bne.n	8006124 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006118:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e0ca      	b.n	80062ba <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b01      	cmp	r3, #1
 800612e:	f040 80c3 	bne.w	80062b8 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	441a      	add	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006142:	429a      	cmp	r2, r3
 8006144:	d907      	bls.n	8006156 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e0b1      	b.n	80062ba <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2203      	movs	r2, #3
 800615a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2200      	movs	r2, #0
 8006164:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 021a 	orr.w	r2, r2, #26
 8006174:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	4a52      	ldr	r2, [pc, #328]	; (80062c4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800617c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006182:	4a51      	ldr	r2, [pc, #324]	; (80062c8 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 8006184:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800618a:	2200      	movs	r2, #0
 800618c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006192:	2b01      	cmp	r3, #1
 8006194:	d002      	beq.n	800619c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	025b      	lsls	r3, r3, #9
 800619a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061a4:	4618      	mov	r0, r3
 80061a6:	f002 fcf3 	bl	8008b90 <SDMMC_CmdBlockLength>
 80061aa:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 80061ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00f      	beq.n	80061d2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a45      	ldr	r2, [pc, #276]	; (80062cc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80061b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	431a      	orrs	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e073      	b.n	80062ba <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d90a      	bls.n	80061ee <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	22a0      	movs	r2, #160	; 0xa0
 80061dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061e4:	4618      	mov	r0, r3
 80061e6:	f002 fd5b 	bl	8008ca0 <SDMMC_CmdWriteMultiBlock>
 80061ea:	62f8      	str	r0, [r7, #44]	; 0x2c
 80061ec:	e009      	b.n	8006202 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2290      	movs	r2, #144	; 0x90
 80061f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061fa:	4618      	mov	r0, r3
 80061fc:	f002 fd2e 	bl	8008c5c <SDMMC_CmdWriteSingleBlock>
 8006200:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d012      	beq.n	800622e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a2f      	ldr	r2, [pc, #188]	; (80062cc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800620e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	431a      	orrs	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e045      	b.n	80062ba <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800622e:	4b28      	ldr	r3, [pc, #160]	; (80062d0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8006230:	2201      	movs	r2, #1
 8006232:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3380      	adds	r3, #128	; 0x80
 8006240:	461a      	mov	r2, r3
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	025b      	lsls	r3, r3, #9
 8006246:	089b      	lsrs	r3, r3, #2
 8006248:	f7fd fdfe 	bl	8003e48 <HAL_DMA_Start_IT>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d01a      	beq.n	8006288 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 021a 	bic.w	r2, r2, #26
 8006260:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a19      	ldr	r2, [pc, #100]	; (80062cc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8006268:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e018      	b.n	80062ba <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006288:	f04f 33ff 	mov.w	r3, #4294967295
 800628c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	025b      	lsls	r3, r3, #9
 8006292:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006294:	2390      	movs	r3, #144	; 0x90
 8006296:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006298:	2300      	movs	r3, #0
 800629a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800629c:	2300      	movs	r3, #0
 800629e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80062a0:	2301      	movs	r3, #1
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f107 0210 	add.w	r2, r7, #16
 80062ac:	4611      	mov	r1, r2
 80062ae:	4618      	mov	r0, r3
 80062b0:	f002 fc42 	bl	8008b38 <SDIO_ConfigData>

      return HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	e000      	b.n	80062ba <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 80062b8:	2302      	movs	r3, #2
  }
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3730      	adds	r7, #48	; 0x30
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	08006aad 	.word	0x08006aad
 80062c8:	08006b49 	.word	0x08006b49
 80062cc:	004005ff 	.word	0x004005ff
 80062d0:	4225858c 	.word	0x4225858c

080062d4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d008      	beq.n	8006302 <HAL_SD_IRQHandler+0x2e>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 ffc8 	bl	8007290 <SD_Read_IT>
 8006300:	e155      	b.n	80065ae <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 808f 	beq.w	8006430 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800631a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6812      	ldr	r2, [r2, #0]
 8006326:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800632a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800632e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0201 	bic.w	r2, r2, #1
 800633e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f003 0308 	and.w	r3, r3, #8
 8006346:	2b00      	cmp	r3, #0
 8006348:	d039      	beq.n	80063be <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d104      	bne.n	800635e <HAL_SD_IRQHandler+0x8a>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b00      	cmp	r3, #0
 800635c:	d011      	beq.n	8006382 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	f002 fcbe 	bl	8008ce4 <SDMMC_CmdStopTransfer>
 8006368:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d008      	beq.n	8006382 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f91f 	bl	80065c0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f240 523a 	movw	r2, #1338	; 0x53a
 800638a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d104      	bne.n	80063ae <HAL_SD_IRQHandler+0xda>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f003 f91c 	bl	80095ec <HAL_SD_RxCpltCallback>
 80063b4:	e0fb      	b.n	80065ae <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f003 f90e 	bl	80095d8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80063bc:	e0f7      	b.n	80065ae <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 80f2 	beq.w	80065ae <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f003 0320 	and.w	r3, r3, #32
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d011      	beq.n	80063f8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4618      	mov	r0, r3
 80063da:	f002 fc83 	bl	8008ce4 <SDMMC_CmdStopTransfer>
 80063de:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d008      	beq.n	80063f8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	431a      	orrs	r2, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f8e4 	bl	80065c0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f003 0301 	and.w	r3, r3, #1
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f040 80d5 	bne.w	80065ae <HAL_SD_IRQHandler+0x2da>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	f040 80cf 	bne.w	80065ae <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 0208 	bic.w	r2, r2, #8
 800641e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f003 f8d5 	bl	80095d8 <HAL_SD_TxCpltCallback>
}
 800642e:	e0be      	b.n	80065ae <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d008      	beq.n	8006450 <HAL_SD_IRQHandler+0x17c>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f003 0308 	and.w	r3, r3, #8
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 ff72 	bl	8007332 <SD_Write_IT>
 800644e:	e0ae      	b.n	80065ae <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006456:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 80a7 	beq.w	80065ae <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d005      	beq.n	800647a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006472:	f043 0202 	orr.w	r2, r3, #2
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006480:	f003 0308 	and.w	r3, r3, #8
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648c:	f043 0208 	orr.w	r2, r3, #8
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d005      	beq.n	80064ae <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a6:	f043 0220 	orr.w	r2, r3, #32
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b4:	f003 0310 	and.w	r3, r3, #16
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c0:	f043 0210 	orr.w	r2, r3, #16
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f240 523a 	movw	r2, #1338	; 0x53a
 80064d0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80064e0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f002 fbfc 	bl	8008ce4 <SDMMC_CmdStopTransfer>
 80064ec:	4602      	mov	r2, r0
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f003 0308 	and.w	r3, r3, #8
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00a      	beq.n	8006518 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f855 	bl	80065c0 <HAL_SD_ErrorCallback>
}
 8006516:	e04a      	b.n	80065ae <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800651e:	2b00      	cmp	r3, #0
 8006520:	d045      	beq.n	80065ae <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	2b00      	cmp	r3, #0
 800652a:	d104      	bne.n	8006536 <HAL_SD_IRQHandler+0x262>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d011      	beq.n	800655a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800653a:	4a1f      	ldr	r2, [pc, #124]	; (80065b8 <HAL_SD_IRQHandler+0x2e4>)
 800653c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006542:	4618      	mov	r0, r3
 8006544:	f7fd fcd8 	bl	8003ef8 <HAL_DMA_Abort_IT>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d02f      	beq.n	80065ae <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006552:	4618      	mov	r0, r3
 8006554:	f000 fb4a 	bl	8006bec <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006558:	e029      	b.n	80065ae <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d104      	bne.n	800656e <HAL_SD_IRQHandler+0x29a>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b00      	cmp	r3, #0
 800656c:	d011      	beq.n	8006592 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	4a12      	ldr	r2, [pc, #72]	; (80065bc <HAL_SD_IRQHandler+0x2e8>)
 8006574:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	4618      	mov	r0, r3
 800657c:	f7fd fcbc 	bl	8003ef8 <HAL_DMA_Abort_IT>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d013      	beq.n	80065ae <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fb65 	bl	8006c5a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006590:	e00d      	b.n	80065ae <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f003 f80c 	bl	80095c4 <HAL_SD_AbortCallback>
}
 80065ac:	e7ff      	b.n	80065ae <HAL_SD_IRQHandler+0x2da>
 80065ae:	bf00      	nop
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	08006bed 	.word	0x08006bed
 80065bc:	08006c5b 	.word	0x08006c5b

080065c0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065e2:	0f9b      	lsrs	r3, r3, #30
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ee:	0e9b      	lsrs	r3, r3, #26
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	f003 030f 	and.w	r3, r3, #15
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006600:	0e1b      	lsrs	r3, r3, #24
 8006602:	b2db      	uxtb	r3, r3
 8006604:	f003 0303 	and.w	r3, r3, #3
 8006608:	b2da      	uxtb	r2, r3
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006612:	0c1b      	lsrs	r3, r3, #16
 8006614:	b2da      	uxtb	r2, r3
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800661e:	0a1b      	lsrs	r3, r3, #8
 8006620:	b2da      	uxtb	r2, r3
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800662a:	b2da      	uxtb	r2, r3
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006634:	0d1b      	lsrs	r3, r3, #20
 8006636:	b29a      	uxth	r2, r3
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006640:	0c1b      	lsrs	r3, r3, #16
 8006642:	b2db      	uxtb	r3, r3
 8006644:	f003 030f 	and.w	r3, r3, #15
 8006648:	b2da      	uxtb	r2, r3
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006652:	0bdb      	lsrs	r3, r3, #15
 8006654:	b2db      	uxtb	r3, r3
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	b2da      	uxtb	r2, r3
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006664:	0b9b      	lsrs	r3, r3, #14
 8006666:	b2db      	uxtb	r3, r3
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	b2da      	uxtb	r2, r3
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006676:	0b5b      	lsrs	r3, r3, #13
 8006678:	b2db      	uxtb	r3, r3
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	b2da      	uxtb	r2, r3
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006688:	0b1b      	lsrs	r3, r3, #12
 800668a:	b2db      	uxtb	r3, r3
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	b2da      	uxtb	r2, r3
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2200      	movs	r2, #0
 800669a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d163      	bne.n	800676c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066a8:	009a      	lsls	r2, r3, #2
 80066aa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80066ae:	4013      	ands	r3, r2
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80066b4:	0f92      	lsrs	r2, r2, #30
 80066b6:	431a      	orrs	r2, r3
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066c0:	0edb      	lsrs	r3, r3, #27
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	f003 0307 	and.w	r3, r3, #7
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066d2:	0e1b      	lsrs	r3, r3, #24
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	f003 0307 	and.w	r3, r3, #7
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066e4:	0d5b      	lsrs	r3, r3, #21
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	f003 0307 	and.w	r3, r3, #7
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066f6:	0c9b      	lsrs	r3, r3, #18
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	f003 0307 	and.w	r3, r3, #7
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006708:	0bdb      	lsrs	r3, r3, #15
 800670a:	b2db      	uxtb	r3, r3
 800670c:	f003 0307 	and.w	r3, r3, #7
 8006710:	b2da      	uxtb	r2, r3
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	7e1b      	ldrb	r3, [r3, #24]
 8006724:	b2db      	uxtb	r3, r3
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	3302      	adds	r3, #2
 800672c:	2201      	movs	r2, #1
 800672e:	fa02 f303 	lsl.w	r3, r2, r3
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006736:	fb02 f203 	mul.w	r2, r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	7a1b      	ldrb	r3, [r3, #8]
 8006742:	b2db      	uxtb	r3, r3
 8006744:	f003 030f 	and.w	r3, r3, #15
 8006748:	2201      	movs	r2, #1
 800674a:	409a      	lsls	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006758:	0a52      	lsrs	r2, r2, #9
 800675a:	fb02 f203 	mul.w	r2, r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006768:	661a      	str	r2, [r3, #96]	; 0x60
 800676a:	e031      	b.n	80067d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006770:	2b01      	cmp	r3, #1
 8006772:	d11d      	bne.n	80067b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006778:	041b      	lsls	r3, r3, #16
 800677a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006782:	0c1b      	lsrs	r3, r3, #16
 8006784:	431a      	orrs	r2, r3
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	3301      	adds	r3, #1
 8006790:	029a      	lsls	r2, r3, #10
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067a4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	661a      	str	r2, [r3, #96]	; 0x60
 80067ae:	e00f      	b.n	80067d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a58      	ldr	r2, [pc, #352]	; (8006918 <HAL_SD_GetCardCSD+0x344>)
 80067b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e09d      	b.n	800690c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d4:	0b9b      	lsrs	r3, r3, #14
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e6:	09db      	lsrs	r3, r3, #7
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006808:	0fdb      	lsrs	r3, r3, #31
 800680a:	b2da      	uxtb	r2, r3
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006814:	0f5b      	lsrs	r3, r3, #29
 8006816:	b2db      	uxtb	r3, r3
 8006818:	f003 0303 	and.w	r3, r3, #3
 800681c:	b2da      	uxtb	r2, r3
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006826:	0e9b      	lsrs	r3, r3, #26
 8006828:	b2db      	uxtb	r3, r3
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	b2da      	uxtb	r2, r3
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006838:	0d9b      	lsrs	r3, r3, #22
 800683a:	b2db      	uxtb	r3, r3
 800683c:	f003 030f 	and.w	r3, r3, #15
 8006840:	b2da      	uxtb	r2, r3
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684a:	0d5b      	lsrs	r3, r3, #21
 800684c:	b2db      	uxtb	r3, r3
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	b2da      	uxtb	r2, r3
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006866:	0c1b      	lsrs	r3, r3, #16
 8006868:	b2db      	uxtb	r3, r3
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	b2da      	uxtb	r2, r3
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687a:	0bdb      	lsrs	r3, r3, #15
 800687c:	b2db      	uxtb	r3, r3
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	b2da      	uxtb	r2, r3
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688e:	0b9b      	lsrs	r3, r3, #14
 8006890:	b2db      	uxtb	r3, r3
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	b2da      	uxtb	r2, r3
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a2:	0b5b      	lsrs	r3, r3, #13
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b6:	0b1b      	lsrs	r3, r3, #12
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ca:	0a9b      	lsrs	r3, r3, #10
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068de:	0a1b      	lsrs	r3, r3, #8
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	f003 0303 	and.w	r3, r3, #3
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f2:	085b      	lsrs	r3, r3, #1
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	004005ff 	.word	0x004005ff

0800691c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006974:	b5b0      	push	{r4, r5, r7, lr}
 8006976:	b08e      	sub	sp, #56	; 0x38
 8006978:	af04      	add	r7, sp, #16
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2203      	movs	r2, #3
 8006982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800698a:	2b03      	cmp	r3, #3
 800698c:	d02e      	beq.n	80069ec <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006994:	d106      	bne.n	80069a4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	639a      	str	r2, [r3, #56]	; 0x38
 80069a2:	e029      	b.n	80069f8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069aa:	d10a      	bne.n	80069c2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fb0f 	bl	8006fd0 <SD_WideBus_Enable>
 80069b2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	431a      	orrs	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	639a      	str	r2, [r3, #56]	; 0x38
 80069c0:	e01a      	b.n	80069f8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d10a      	bne.n	80069de <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fb4c 	bl	8007066 <SD_WideBus_Disable>
 80069ce:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	431a      	orrs	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	639a      	str	r2, [r3, #56]	; 0x38
 80069dc:	e00c      	b.n	80069f8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38
 80069ea:	e005      	b.n	80069f8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d009      	beq.n	8006a14 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a18      	ldr	r2, [pc, #96]	; (8006a68 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8006a06:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e024      	b.n	8006a5e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681d      	ldr	r5, [r3, #0]
 8006a3a:	466c      	mov	r4, sp
 8006a3c:	f107 0318 	add.w	r3, r7, #24
 8006a40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a48:	f107 030c 	add.w	r3, r7, #12
 8006a4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f001 ffc2 	bl	80089d8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3728      	adds	r7, #40	; 0x28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bdb0      	pop	{r4, r5, r7, pc}
 8006a66:	bf00      	nop
 8006a68:	004005ff 	.word	0x004005ff

08006a6c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b086      	sub	sp, #24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006a74:	2300      	movs	r3, #0
 8006a76:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006a78:	f107 030c 	add.w	r3, r7, #12
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fa7e 	bl	8006f80 <SD_SendStatus>
 8006a84:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	431a      	orrs	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	0a5b      	lsrs	r3, r3, #9
 8006a9c:	f003 030f 	and.w	r3, r3, #15
 8006aa0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006aa2:	693b      	ldr	r3, [r7, #16]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3718      	adds	r7, #24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ac8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae8:	2b82      	cmp	r3, #130	; 0x82
 8006aea:	d111      	bne.n	8006b10 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f002 f8f7 	bl	8008ce4 <SDMMC_CmdStopTransfer>
 8006af6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d008      	beq.n	8006b10 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	431a      	orrs	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006b0a:	68f8      	ldr	r0, [r7, #12]
 8006b0c:	f7ff fd58 	bl	80065c0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f022 0208 	bic.w	r2, r2, #8
 8006b1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f240 523a 	movw	r2, #1338	; 0x53a
 8006b28:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f002 fd57 	bl	80095ec <HAL_SD_RxCpltCallback>
#endif
}
 8006b3e:	bf00      	nop
 8006b40:	3710      	adds	r7, #16
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
	...

08006b48 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b54:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7fd fb7a 	bl	8004250 <HAL_DMA_GetError>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d03e      	beq.n	8006be0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b68:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b70:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d002      	beq.n	8006b7e <SD_DMAError+0x36>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d12d      	bne.n	8006bda <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a19      	ldr	r2, [pc, #100]	; (8006be8 <SD_DMAError+0xa0>)
 8006b84:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006b94:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006ba2:	6978      	ldr	r0, [r7, #20]
 8006ba4:	f7ff ff62 	bl	8006a6c <HAL_SD_GetCardState>
 8006ba8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	2b06      	cmp	r3, #6
 8006bae:	d002      	beq.n	8006bb6 <SD_DMAError+0x6e>
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b05      	cmp	r3, #5
 8006bb4:	d10a      	bne.n	8006bcc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f002 f892 	bl	8008ce4 <SDMMC_CmdStopTransfer>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006bda:	6978      	ldr	r0, [r7, #20]
 8006bdc:	f7ff fcf0 	bl	80065c0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006be0:	bf00      	nop
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	004005ff 	.word	0x004005ff

08006bec <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f240 523a 	movw	r2, #1338	; 0x53a
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f7ff ff31 	bl	8006a6c <HAL_SD_GetCardState>
 8006c0a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b06      	cmp	r3, #6
 8006c1e:	d002      	beq.n	8006c26 <SD_DMATxAbort+0x3a>
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2b05      	cmp	r3, #5
 8006c24:	d10a      	bne.n	8006c3c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f002 f85a 	bl	8008ce4 <SDMMC_CmdStopTransfer>
 8006c30:	4602      	mov	r2, r0
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c36:	431a      	orrs	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d103      	bne.n	8006c4c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f002 fcbd 	bl	80095c4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006c4a:	e002      	b.n	8006c52 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f7ff fcb7 	bl	80065c0 <HAL_SD_ErrorCallback>
}
 8006c52:	bf00      	nop
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c66:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f7ff fefa 	bl	8006a6c <HAL_SD_GetCardState>
 8006c78:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2b06      	cmp	r3, #6
 8006c8c:	d002      	beq.n	8006c94 <SD_DMARxAbort+0x3a>
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	2b05      	cmp	r3, #5
 8006c92:	d10a      	bne.n	8006caa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f002 f823 	bl	8008ce4 <SDMMC_CmdStopTransfer>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d103      	bne.n	8006cba <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f002 fc86 	bl	80095c4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006cb8:	e002      	b.n	8006cc0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f7ff fc80 	bl	80065c0 <HAL_SD_ErrorCallback>
}
 8006cc0:	bf00      	nop
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006cc8:	b5b0      	push	{r4, r5, r7, lr}
 8006cca:	b094      	sub	sp, #80	; 0x50
 8006ccc:	af04      	add	r7, sp, #16
 8006cce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f001 fed5 	bl	8008a88 <SDIO_GetPowerState>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d102      	bne.n	8006cea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006ce4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006ce8:	e0b7      	b.n	8006e5a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d02f      	beq.n	8006d52 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f002 f8fe 	bl	8008ef8 <SDMMC_CmdSendCID>
 8006cfc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <SD_InitCard+0x40>
    {
      return errorstate;
 8006d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d06:	e0a8      	b.n	8006e5a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f001 feff 	bl	8008b12 <SDIO_GetResponse>
 8006d14:	4602      	mov	r2, r0
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2104      	movs	r1, #4
 8006d20:	4618      	mov	r0, r3
 8006d22:	f001 fef6 	bl	8008b12 <SDIO_GetResponse>
 8006d26:	4602      	mov	r2, r0
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2108      	movs	r1, #8
 8006d32:	4618      	mov	r0, r3
 8006d34:	f001 feed 	bl	8008b12 <SDIO_GetResponse>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	210c      	movs	r1, #12
 8006d44:	4618      	mov	r0, r3
 8006d46:	f001 fee4 	bl	8008b12 <SDIO_GetResponse>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d00d      	beq.n	8006d76 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f107 020e 	add.w	r2, r7, #14
 8006d62:	4611      	mov	r1, r2
 8006d64:	4618      	mov	r0, r3
 8006d66:	f002 f904 	bl	8008f72 <SDMMC_CmdSetRelAdd>
 8006d6a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <SD_InitCard+0xae>
    {
      return errorstate;
 8006d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d74:	e071      	b.n	8006e5a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7a:	2b03      	cmp	r3, #3
 8006d7c:	d036      	beq.n	8006dec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006d7e:	89fb      	ldrh	r3, [r7, #14]
 8006d80:	461a      	mov	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d8e:	041b      	lsls	r3, r3, #16
 8006d90:	4619      	mov	r1, r3
 8006d92:	4610      	mov	r0, r2
 8006d94:	f002 f8ce 	bl	8008f34 <SDMMC_CmdSendCSD>
 8006d98:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da2:	e05a      	b.n	8006e5a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2100      	movs	r1, #0
 8006daa:	4618      	mov	r0, r3
 8006dac:	f001 feb1 	bl	8008b12 <SDIO_GetResponse>
 8006db0:	4602      	mov	r2, r0
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2104      	movs	r1, #4
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f001 fea8 	bl	8008b12 <SDIO_GetResponse>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2108      	movs	r1, #8
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f001 fe9f 	bl	8008b12 <SDIO_GetResponse>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	210c      	movs	r1, #12
 8006de0:	4618      	mov	r0, r3
 8006de2:	f001 fe96 	bl	8008b12 <SDIO_GetResponse>
 8006de6:	4602      	mov	r2, r0
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2104      	movs	r1, #4
 8006df2:	4618      	mov	r0, r3
 8006df4:	f001 fe8d 	bl	8008b12 <SDIO_GetResponse>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	0d1a      	lsrs	r2, r3, #20
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006e00:	f107 0310 	add.w	r3, r7, #16
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7ff fbe4 	bl	80065d4 <HAL_SD_GetCardCSD>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006e16:	e020      	b.n	8006e5a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6819      	ldr	r1, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e20:	041b      	lsls	r3, r3, #16
 8006e22:	f04f 0400 	mov.w	r4, #0
 8006e26:	461a      	mov	r2, r3
 8006e28:	4623      	mov	r3, r4
 8006e2a:	4608      	mov	r0, r1
 8006e2c:	f001 ff7c 	bl	8008d28 <SDMMC_CmdSelDesel>
 8006e30:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <SD_InitCard+0x174>
  {
    return errorstate;
 8006e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3a:	e00e      	b.n	8006e5a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681d      	ldr	r5, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	466c      	mov	r4, sp
 8006e44:	f103 0210 	add.w	r2, r3, #16
 8006e48:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006e4e:	3304      	adds	r3, #4
 8006e50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e52:	4628      	mov	r0, r5
 8006e54:	f001 fdc0 	bl	80089d8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3740      	adds	r7, #64	; 0x40
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006e64 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b086      	sub	sp, #24
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	617b      	str	r3, [r7, #20]
 8006e74:	2300      	movs	r3, #0
 8006e76:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f001 ff76 	bl	8008d6e <SDMMC_CmdGoIdleState>
 8006e82:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <SD_PowerON+0x2a>
  {
    return errorstate;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	e072      	b.n	8006f74 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 ff89 	bl	8008daa <SDMMC_CmdOperCond>
 8006e98:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00d      	beq.n	8006ebc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f001 ff5f 	bl	8008d6e <SDMMC_CmdGoIdleState>
 8006eb0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d004      	beq.n	8006ec2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	e05b      	b.n	8006f74 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d137      	bne.n	8006f3a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f001 ff89 	bl	8008de8 <SDMMC_CmdAppCommand>
 8006ed6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d02d      	beq.n	8006f3a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ede:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006ee2:	e047      	b.n	8006f74 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2100      	movs	r1, #0
 8006eea:	4618      	mov	r0, r3
 8006eec:	f001 ff7c 	bl	8008de8 <SDMMC_CmdAppCommand>
 8006ef0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <SD_PowerON+0x98>
    {
      return errorstate;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	e03b      	b.n	8006f74 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	491e      	ldr	r1, [pc, #120]	; (8006f7c <SD_PowerON+0x118>)
 8006f02:	4618      	mov	r0, r3
 8006f04:	f001 ff92 	bl	8008e2c <SDMMC_CmdAppOperCommand>
 8006f08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f14:	e02e      	b.n	8006f74 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f001 fdf8 	bl	8008b12 <SDIO_GetResponse>
 8006f22:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	0fdb      	lsrs	r3, r3, #31
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d101      	bne.n	8006f30 <SD_PowerON+0xcc>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <SD_PowerON+0xce>
 8006f30:	2300      	movs	r3, #0
 8006f32:	613b      	str	r3, [r7, #16]

    count++;
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	3301      	adds	r3, #1
 8006f38:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d802      	bhi.n	8006f4a <SD_PowerON+0xe6>
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d0cc      	beq.n	8006ee4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d902      	bls.n	8006f5a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006f54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f58:	e00c      	b.n	8006f74 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	645a      	str	r2, [r3, #68]	; 0x44
 8006f6a:	e002      	b.n	8006f72 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	c1100000 	.word	0xc1100000

08006f80 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d102      	bne.n	8006f96 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006f90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f94:	e018      	b.n	8006fc8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f9e:	041b      	lsls	r3, r3, #16
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	f002 f806 	bl	8008fb4 <SDMMC_CmdSendStatus>
 8006fa8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	e009      	b.n	8006fc8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2100      	movs	r1, #0
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f001 fda9 	bl	8008b12 <SDIO_GetResponse>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006fd8:	2300      	movs	r3, #0
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	2300      	movs	r3, #0
 8006fde:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f001 fd93 	bl	8008b12 <SDIO_GetResponse>
 8006fec:	4603      	mov	r3, r0
 8006fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ff6:	d102      	bne.n	8006ffe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006ff8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ffc:	e02f      	b.n	800705e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006ffe:	f107 030c 	add.w	r3, r7, #12
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f879 	bl	80070fc <SD_FindSCR>
 800700a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d001      	beq.n	8007016 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	e023      	b.n	800705e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d01c      	beq.n	800705a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007028:	041b      	lsls	r3, r3, #16
 800702a:	4619      	mov	r1, r3
 800702c:	4610      	mov	r0, r2
 800702e:	f001 fedb 	bl	8008de8 <SDMMC_CmdAppCommand>
 8007032:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	e00f      	b.n	800705e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2102      	movs	r1, #2
 8007044:	4618      	mov	r0, r3
 8007046:	f001 ff14 	bl	8008e72 <SDMMC_CmdBusWidth>
 800704a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	e003      	b.n	800705e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007056:	2300      	movs	r3, #0
 8007058:	e001      	b.n	800705e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800705a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b086      	sub	sp, #24
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800706e:	2300      	movs	r3, #0
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	2300      	movs	r3, #0
 8007074:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2100      	movs	r1, #0
 800707c:	4618      	mov	r0, r3
 800707e:	f001 fd48 	bl	8008b12 <SDIO_GetResponse>
 8007082:	4603      	mov	r3, r0
 8007084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007088:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800708c:	d102      	bne.n	8007094 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800708e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007092:	e02f      	b.n	80070f4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007094:	f107 030c 	add.w	r3, r7, #12
 8007098:	4619      	mov	r1, r3
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 f82e 	bl	80070fc <SD_FindSCR>
 80070a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	e023      	b.n	80070f4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d01c      	beq.n	80070f0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070be:	041b      	lsls	r3, r3, #16
 80070c0:	4619      	mov	r1, r3
 80070c2:	4610      	mov	r0, r2
 80070c4:	f001 fe90 	bl	8008de8 <SDMMC_CmdAppCommand>
 80070c8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	e00f      	b.n	80070f4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2100      	movs	r1, #0
 80070da:	4618      	mov	r0, r3
 80070dc:	f001 fec9 	bl	8008e72 <SDMMC_CmdBusWidth>
 80070e0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	e003      	b.n	80070f4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80070ec:	2300      	movs	r3, #0
 80070ee:	e001      	b.n	80070f4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80070f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80070fc:	b590      	push	{r4, r7, lr}
 80070fe:	b08f      	sub	sp, #60	; 0x3c
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007106:	f7fc f8ad 	bl	8003264 <HAL_GetTick>
 800710a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007110:	2300      	movs	r3, #0
 8007112:	60bb      	str	r3, [r7, #8]
 8007114:	2300      	movs	r3, #0
 8007116:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2108      	movs	r1, #8
 8007122:	4618      	mov	r0, r3
 8007124:	f001 fd34 	bl	8008b90 <SDMMC_CmdBlockLength>
 8007128:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007132:	e0a9      	b.n	8007288 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800713c:	041b      	lsls	r3, r3, #16
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f001 fe51 	bl	8008de8 <SDMMC_CmdAppCommand>
 8007146:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <SD_FindSCR+0x56>
  {
    return errorstate;
 800714e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007150:	e09a      	b.n	8007288 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007152:	f04f 33ff 	mov.w	r3, #4294967295
 8007156:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007158:	2308      	movs	r3, #8
 800715a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800715c:	2330      	movs	r3, #48	; 0x30
 800715e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007160:	2302      	movs	r3, #2
 8007162:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007164:	2300      	movs	r3, #0
 8007166:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007168:	2301      	movs	r3, #1
 800716a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f107 0210 	add.w	r2, r7, #16
 8007174:	4611      	mov	r1, r2
 8007176:	4618      	mov	r0, r3
 8007178:	f001 fcde 	bl	8008b38 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4618      	mov	r0, r3
 8007182:	f001 fe98 	bl	8008eb6 <SDMMC_CmdSendSCR>
 8007186:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	2b00      	cmp	r3, #0
 800718c:	d022      	beq.n	80071d4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800718e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007190:	e07a      	b.n	8007288 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007198:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00e      	beq.n	80071be <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6819      	ldr	r1, [r3, #0]
 80071a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	f107 0208 	add.w	r2, r7, #8
 80071ac:	18d4      	adds	r4, r2, r3
 80071ae:	4608      	mov	r0, r1
 80071b0:	f001 fc3d 	bl	8008a2e <SDIO_ReadFIFO>
 80071b4:	4603      	mov	r3, r0
 80071b6:	6023      	str	r3, [r4, #0]
      index++;
 80071b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ba:	3301      	adds	r3, #1
 80071bc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80071be:	f7fc f851 	bl	8003264 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071cc:	d102      	bne.n	80071d4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80071ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071d2:	e059      	b.n	8007288 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071da:	f240 432a 	movw	r3, #1066	; 0x42a
 80071de:	4013      	ands	r3, r2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0d6      	beq.n	8007192 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ea:	f003 0308 	and.w	r3, r3, #8
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d005      	beq.n	80071fe <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2208      	movs	r2, #8
 80071f8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80071fa:	2308      	movs	r3, #8
 80071fc:	e044      	b.n	8007288 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2202      	movs	r2, #2
 8007212:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007214:	2302      	movs	r3, #2
 8007216:	e037      	b.n	8007288 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b00      	cmp	r3, #0
 8007224:	d005      	beq.n	8007232 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2220      	movs	r2, #32
 800722c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800722e:	2320      	movs	r3, #32
 8007230:	e02a      	b.n	8007288 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f240 523a 	movw	r2, #1338	; 0x53a
 800723a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	061a      	lsls	r2, r3, #24
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	021b      	lsls	r3, r3, #8
 8007244:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007248:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	0a1b      	lsrs	r3, r3, #8
 800724e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007252:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	0e1b      	lsrs	r3, r3, #24
 8007258:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800725a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800725c:	601a      	str	r2, [r3, #0]
    scr++;
 800725e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007260:	3304      	adds	r3, #4
 8007262:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	061a      	lsls	r2, r3, #24
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007270:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	0a1b      	lsrs	r3, r3, #8
 8007276:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800727a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	0e1b      	lsrs	r3, r3, #24
 8007280:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007284:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	373c      	adds	r7, #60	; 0x3c
 800728c:	46bd      	mov	sp, r7
 800728e:	bd90      	pop	{r4, r7, pc}

08007290 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d03f      	beq.n	800732a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80072aa:	2300      	movs	r3, #0
 80072ac:	617b      	str	r3, [r7, #20]
 80072ae:	e033      	b.n	8007318 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f001 fbba 	bl	8008a2e <SDIO_ReadFIFO>
 80072ba:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	3301      	adds	r3, #1
 80072c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	3b01      	subs	r3, #1
 80072ce:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	0a1b      	lsrs	r3, r3, #8
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	3301      	adds	r3, #1
 80072de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	0c1b      	lsrs	r3, r3, #16
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3301      	adds	r3, #1
 80072f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	0e1b      	lsrs	r3, r3, #24
 8007300:	b2da      	uxtb	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3301      	adds	r3, #1
 800730a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	3b01      	subs	r3, #1
 8007310:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	3301      	adds	r3, #1
 8007316:	617b      	str	r3, [r7, #20]
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2b07      	cmp	r3, #7
 800731c:	d9c8      	bls.n	80072b0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68fa      	ldr	r2, [r7, #12]
 8007322:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800732a:	bf00      	nop
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b086      	sub	sp, #24
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d043      	beq.n	80073d4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800734c:	2300      	movs	r3, #0
 800734e:	617b      	str	r3, [r7, #20]
 8007350:	e037      	b.n	80073c2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	3301      	adds	r3, #1
 800735c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	3b01      	subs	r3, #1
 8007362:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	021a      	lsls	r2, r3, #8
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	4313      	orrs	r3, r2
 800736e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	3301      	adds	r3, #1
 8007374:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	3b01      	subs	r3, #1
 800737a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	041a      	lsls	r2, r3, #16
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	4313      	orrs	r3, r2
 8007386:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3301      	adds	r3, #1
 800738c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	3b01      	subs	r3, #1
 8007392:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	061a      	lsls	r2, r3, #24
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	4313      	orrs	r3, r2
 800739e:	60bb      	str	r3, [r7, #8]
      tmp++;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3301      	adds	r3, #1
 80073a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	3b01      	subs	r3, #1
 80073aa:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f107 0208 	add.w	r2, r7, #8
 80073b4:	4611      	mov	r1, r2
 80073b6:	4618      	mov	r0, r3
 80073b8:	f001 fb46 	bl	8008a48 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	3301      	adds	r3, #1
 80073c0:	617b      	str	r3, [r7, #20]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b07      	cmp	r3, #7
 80073c6:	d9c4      	bls.n	8007352 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80073d4:	bf00      	nop
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e056      	b.n	800749c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d106      	bne.n	800740e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f7fb fac7 	bl	800299c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2202      	movs	r2, #2
 8007412:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007424:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685a      	ldr	r2, [r3, #4]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	431a      	orrs	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	431a      	orrs	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	431a      	orrs	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800744a:	431a      	orrs	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	69db      	ldr	r3, [r3, #28]
 8007450:	431a      	orrs	r2, r3
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a1b      	ldr	r3, [r3, #32]
 8007456:	ea42 0103 	orr.w	r1, r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	430a      	orrs	r2, r1
 8007464:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	0c1b      	lsrs	r3, r3, #16
 800746c:	f003 0104 	and.w	r1, r3, #4
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	69da      	ldr	r2, [r3, #28]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800748a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d101      	bne.n	80074b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	e01d      	b.n	80074f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d106      	bne.n	80074d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7fb fb22 	bl	8002b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2202      	movs	r2, #2
 80074d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3304      	adds	r3, #4
 80074e0:	4619      	mov	r1, r3
 80074e2:	4610      	mov	r0, r2
 80074e4:	f000 fb56 	bl	8007b94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b085      	sub	sp, #20
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68da      	ldr	r2, [r3, #12]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f042 0201 	orr.w	r2, r2, #1
 8007510:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f003 0307 	and.w	r3, r3, #7
 800751c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2b06      	cmp	r3, #6
 8007522:	d007      	beq.n	8007534 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f042 0201 	orr.w	r2, r2, #1
 8007532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e01d      	b.n	8007590 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d106      	bne.n	800756e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7fb fa5f 	bl	8002a2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2202      	movs	r2, #2
 8007572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	3304      	adds	r3, #4
 800757e:	4619      	mov	r1, r3
 8007580:	4610      	mov	r0, r2
 8007582:	f000 fb07 	bl	8007b94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3708      	adds	r7, #8
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2201      	movs	r2, #1
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fd42 	bl	8008034 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a15      	ldr	r2, [pc, #84]	; (800760c <HAL_TIM_PWM_Start+0x74>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d004      	beq.n	80075c4 <HAL_TIM_PWM_Start+0x2c>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a14      	ldr	r2, [pc, #80]	; (8007610 <HAL_TIM_PWM_Start+0x78>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d101      	bne.n	80075c8 <HAL_TIM_PWM_Start+0x30>
 80075c4:	2301      	movs	r3, #1
 80075c6:	e000      	b.n	80075ca <HAL_TIM_PWM_Start+0x32>
 80075c8:	2300      	movs	r3, #0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d007      	beq.n	80075de <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f003 0307 	and.w	r3, r3, #7
 80075e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2b06      	cmp	r3, #6
 80075ee:	d007      	beq.n	8007600 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f042 0201 	orr.w	r2, r2, #1
 80075fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	40010000 	.word	0x40010000
 8007610:	40010400 	.word	0x40010400

08007614 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e083      	b.n	8007730 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b00      	cmp	r3, #0
 8007632:	d106      	bne.n	8007642 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7fb fad3 	bl	8002be8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2202      	movs	r2, #2
 8007646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	6812      	ldr	r2, [r2, #0]
 8007654:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007658:	f023 0307 	bic.w	r3, r3, #7
 800765c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3304      	adds	r3, #4
 8007666:	4619      	mov	r1, r3
 8007668:	4610      	mov	r0, r2
 800766a:	f000 fa93 	bl	8007b94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	4313      	orrs	r3, r2
 800768e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007696:	f023 0303 	bic.w	r3, r3, #3
 800769a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	021b      	lsls	r3, r3, #8
 80076a6:	4313      	orrs	r3, r2
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80076b4:	f023 030c 	bic.w	r3, r3, #12
 80076b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	68da      	ldr	r2, [r3, #12]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	69db      	ldr	r3, [r3, #28]
 80076ce:	021b      	lsls	r3, r3, #8
 80076d0:	4313      	orrs	r3, r2
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	011a      	lsls	r2, r3, #4
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	031b      	lsls	r3, r3, #12
 80076e4:	4313      	orrs	r3, r2
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80076f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80076fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	4313      	orrs	r3, r2
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	4313      	orrs	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	693a      	ldr	r2, [r7, #16]
 800771c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3718      	adds	r7, #24
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d002      	beq.n	800774e <HAL_TIM_Encoder_Start+0x16>
 8007748:	2b04      	cmp	r3, #4
 800774a:	d008      	beq.n	800775e <HAL_TIM_Encoder_Start+0x26>
 800774c:	e00f      	b.n	800776e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2201      	movs	r2, #1
 8007754:	2100      	movs	r1, #0
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fc6c 	bl	8008034 <TIM_CCxChannelCmd>
      break;
 800775c:	e016      	b.n	800778c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2201      	movs	r2, #1
 8007764:	2104      	movs	r1, #4
 8007766:	4618      	mov	r0, r3
 8007768:	f000 fc64 	bl	8008034 <TIM_CCxChannelCmd>
      break;
 800776c:	e00e      	b.n	800778c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2201      	movs	r2, #1
 8007774:	2100      	movs	r1, #0
 8007776:	4618      	mov	r0, r3
 8007778:	f000 fc5c 	bl	8008034 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2201      	movs	r2, #1
 8007782:	2104      	movs	r1, #4
 8007784:	4618      	mov	r0, r3
 8007786:	f000 fc55 	bl	8008034 <TIM_CCxChannelCmd>
      break;
 800778a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f042 0201 	orr.w	r2, r2, #1
 800779a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b082      	sub	sp, #8
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d122      	bne.n	8007802 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d11b      	bne.n	8007802 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f06f 0202 	mvn.w	r2, #2
 80077d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	f003 0303 	and.w	r3, r3, #3
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d003      	beq.n	80077f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f9b5 	bl	8007b58 <HAL_TIM_IC_CaptureCallback>
 80077ee:	e005      	b.n	80077fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f9a7 	bl	8007b44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f9b8 	bl	8007b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	f003 0304 	and.w	r3, r3, #4
 800780c:	2b04      	cmp	r3, #4
 800780e:	d122      	bne.n	8007856 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f003 0304 	and.w	r3, r3, #4
 800781a:	2b04      	cmp	r3, #4
 800781c:	d11b      	bne.n	8007856 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f06f 0204 	mvn.w	r2, #4
 8007826:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f98b 	bl	8007b58 <HAL_TIM_IC_CaptureCallback>
 8007842:	e005      	b.n	8007850 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f97d 	bl	8007b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f98e 	bl	8007b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	f003 0308 	and.w	r3, r3, #8
 8007860:	2b08      	cmp	r3, #8
 8007862:	d122      	bne.n	80078aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f003 0308 	and.w	r3, r3, #8
 800786e:	2b08      	cmp	r3, #8
 8007870:	d11b      	bne.n	80078aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f06f 0208 	mvn.w	r2, #8
 800787a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2204      	movs	r2, #4
 8007880:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	f003 0303 	and.w	r3, r3, #3
 800788c:	2b00      	cmp	r3, #0
 800788e:	d003      	beq.n	8007898 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f961 	bl	8007b58 <HAL_TIM_IC_CaptureCallback>
 8007896:	e005      	b.n	80078a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f953 	bl	8007b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f964 	bl	8007b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	f003 0310 	and.w	r3, r3, #16
 80078b4:	2b10      	cmp	r3, #16
 80078b6:	d122      	bne.n	80078fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68db      	ldr	r3, [r3, #12]
 80078be:	f003 0310 	and.w	r3, r3, #16
 80078c2:	2b10      	cmp	r3, #16
 80078c4:	d11b      	bne.n	80078fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f06f 0210 	mvn.w	r2, #16
 80078ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2208      	movs	r2, #8
 80078d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	69db      	ldr	r3, [r3, #28]
 80078dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d003      	beq.n	80078ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f937 	bl	8007b58 <HAL_TIM_IC_CaptureCallback>
 80078ea:	e005      	b.n	80078f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f929 	bl	8007b44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f93a 	bl	8007b6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	2b01      	cmp	r3, #1
 800790a:	d10e      	bne.n	800792a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b01      	cmp	r3, #1
 8007918:	d107      	bne.n	800792a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f06f 0201 	mvn.w	r2, #1
 8007922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f7f9 fe0d 	bl	8001544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007934:	2b80      	cmp	r3, #128	; 0x80
 8007936:	d10e      	bne.n	8007956 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007942:	2b80      	cmp	r3, #128	; 0x80
 8007944:	d107      	bne.n	8007956 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800794e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fc6d 	bl	8008230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007960:	2b40      	cmp	r3, #64	; 0x40
 8007962:	d10e      	bne.n	8007982 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796e:	2b40      	cmp	r3, #64	; 0x40
 8007970:	d107      	bne.n	8007982 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800797a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f8ff 	bl	8007b80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	f003 0320 	and.w	r3, r3, #32
 800798c:	2b20      	cmp	r3, #32
 800798e:	d10e      	bne.n	80079ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f003 0320 	and.w	r3, r3, #32
 800799a:	2b20      	cmp	r3, #32
 800799c:	d107      	bne.n	80079ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f06f 0220 	mvn.w	r2, #32
 80079a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 fc37 	bl	800821c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079ae:	bf00      	nop
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
	...

080079b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80079ce:	2302      	movs	r3, #2
 80079d0:	e0b4      	b.n	8007b3c <HAL_TIM_PWM_ConfigChannel+0x184>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2202      	movs	r2, #2
 80079de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b0c      	cmp	r3, #12
 80079e6:	f200 809f 	bhi.w	8007b28 <HAL_TIM_PWM_ConfigChannel+0x170>
 80079ea:	a201      	add	r2, pc, #4	; (adr r2, 80079f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80079ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f0:	08007a25 	.word	0x08007a25
 80079f4:	08007b29 	.word	0x08007b29
 80079f8:	08007b29 	.word	0x08007b29
 80079fc:	08007b29 	.word	0x08007b29
 8007a00:	08007a65 	.word	0x08007a65
 8007a04:	08007b29 	.word	0x08007b29
 8007a08:	08007b29 	.word	0x08007b29
 8007a0c:	08007b29 	.word	0x08007b29
 8007a10:	08007aa7 	.word	0x08007aa7
 8007a14:	08007b29 	.word	0x08007b29
 8007a18:	08007b29 	.word	0x08007b29
 8007a1c:	08007b29 	.word	0x08007b29
 8007a20:	08007ae7 	.word	0x08007ae7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68b9      	ldr	r1, [r7, #8]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 f952 	bl	8007cd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	699a      	ldr	r2, [r3, #24]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f042 0208 	orr.w	r2, r2, #8
 8007a3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	699a      	ldr	r2, [r3, #24]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 0204 	bic.w	r2, r2, #4
 8007a4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6999      	ldr	r1, [r3, #24]
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	691a      	ldr	r2, [r3, #16]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	619a      	str	r2, [r3, #24]
      break;
 8007a62:	e062      	b.n	8007b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 f9a2 	bl	8007db4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	699a      	ldr	r2, [r3, #24]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	699a      	ldr	r2, [r3, #24]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6999      	ldr	r1, [r3, #24]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	021a      	lsls	r2, r3, #8
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	619a      	str	r2, [r3, #24]
      break;
 8007aa4:	e041      	b.n	8007b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68b9      	ldr	r1, [r7, #8]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f000 f9f7 	bl	8007ea0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	69da      	ldr	r2, [r3, #28]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f042 0208 	orr.w	r2, r2, #8
 8007ac0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	69da      	ldr	r2, [r3, #28]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f022 0204 	bic.w	r2, r2, #4
 8007ad0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	69d9      	ldr	r1, [r3, #28]
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	691a      	ldr	r2, [r3, #16]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	61da      	str	r2, [r3, #28]
      break;
 8007ae4:	e021      	b.n	8007b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68b9      	ldr	r1, [r7, #8]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f000 fa4b 	bl	8007f88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69da      	ldr	r2, [r3, #28]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69da      	ldr	r2, [r3, #28]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69d9      	ldr	r1, [r3, #28]
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	021a      	lsls	r2, r3, #8
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	430a      	orrs	r2, r1
 8007b24:	61da      	str	r2, [r3, #28]
      break;
 8007b26:	e000      	b.n	8007b2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007b28:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b88:	bf00      	nop
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a40      	ldr	r2, [pc, #256]	; (8007ca8 <TIM_Base_SetConfig+0x114>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d013      	beq.n	8007bd4 <TIM_Base_SetConfig+0x40>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bb2:	d00f      	beq.n	8007bd4 <TIM_Base_SetConfig+0x40>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a3d      	ldr	r2, [pc, #244]	; (8007cac <TIM_Base_SetConfig+0x118>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d00b      	beq.n	8007bd4 <TIM_Base_SetConfig+0x40>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a3c      	ldr	r2, [pc, #240]	; (8007cb0 <TIM_Base_SetConfig+0x11c>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d007      	beq.n	8007bd4 <TIM_Base_SetConfig+0x40>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a3b      	ldr	r2, [pc, #236]	; (8007cb4 <TIM_Base_SetConfig+0x120>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d003      	beq.n	8007bd4 <TIM_Base_SetConfig+0x40>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a3a      	ldr	r2, [pc, #232]	; (8007cb8 <TIM_Base_SetConfig+0x124>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d108      	bne.n	8007be6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a2f      	ldr	r2, [pc, #188]	; (8007ca8 <TIM_Base_SetConfig+0x114>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d02b      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf4:	d027      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a2c      	ldr	r2, [pc, #176]	; (8007cac <TIM_Base_SetConfig+0x118>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d023      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a2b      	ldr	r2, [pc, #172]	; (8007cb0 <TIM_Base_SetConfig+0x11c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d01f      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a2a      	ldr	r2, [pc, #168]	; (8007cb4 <TIM_Base_SetConfig+0x120>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d01b      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a29      	ldr	r2, [pc, #164]	; (8007cb8 <TIM_Base_SetConfig+0x124>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d017      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a28      	ldr	r2, [pc, #160]	; (8007cbc <TIM_Base_SetConfig+0x128>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d013      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a27      	ldr	r2, [pc, #156]	; (8007cc0 <TIM_Base_SetConfig+0x12c>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d00f      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a26      	ldr	r2, [pc, #152]	; (8007cc4 <TIM_Base_SetConfig+0x130>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d00b      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a25      	ldr	r2, [pc, #148]	; (8007cc8 <TIM_Base_SetConfig+0x134>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d007      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a24      	ldr	r2, [pc, #144]	; (8007ccc <TIM_Base_SetConfig+0x138>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d003      	beq.n	8007c46 <TIM_Base_SetConfig+0xb2>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4a23      	ldr	r2, [pc, #140]	; (8007cd0 <TIM_Base_SetConfig+0x13c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d108      	bne.n	8007c58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	4313      	orrs	r3, r2
 8007c64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	689a      	ldr	r2, [r3, #8]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a0a      	ldr	r2, [pc, #40]	; (8007ca8 <TIM_Base_SetConfig+0x114>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d003      	beq.n	8007c8c <TIM_Base_SetConfig+0xf8>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a0c      	ldr	r2, [pc, #48]	; (8007cb8 <TIM_Base_SetConfig+0x124>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d103      	bne.n	8007c94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	691a      	ldr	r2, [r3, #16]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	615a      	str	r2, [r3, #20]
}
 8007c9a:	bf00      	nop
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	40010000 	.word	0x40010000
 8007cac:	40000400 	.word	0x40000400
 8007cb0:	40000800 	.word	0x40000800
 8007cb4:	40000c00 	.word	0x40000c00
 8007cb8:	40010400 	.word	0x40010400
 8007cbc:	40014000 	.word	0x40014000
 8007cc0:	40014400 	.word	0x40014400
 8007cc4:	40014800 	.word	0x40014800
 8007cc8:	40001800 	.word	0x40001800
 8007ccc:	40001c00 	.word	0x40001c00
 8007cd0:	40002000 	.word	0x40002000

08007cd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	f023 0201 	bic.w	r2, r3, #1
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f023 0303 	bic.w	r3, r3, #3
 8007d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68fa      	ldr	r2, [r7, #12]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f023 0302 	bic.w	r3, r3, #2
 8007d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a20      	ldr	r2, [pc, #128]	; (8007dac <TIM_OC1_SetConfig+0xd8>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d003      	beq.n	8007d38 <TIM_OC1_SetConfig+0x64>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a1f      	ldr	r2, [pc, #124]	; (8007db0 <TIM_OC1_SetConfig+0xdc>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d10c      	bne.n	8007d52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f023 0308 	bic.w	r3, r3, #8
 8007d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f023 0304 	bic.w	r3, r3, #4
 8007d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a15      	ldr	r2, [pc, #84]	; (8007dac <TIM_OC1_SetConfig+0xd8>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d003      	beq.n	8007d62 <TIM_OC1_SetConfig+0x8e>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a14      	ldr	r2, [pc, #80]	; (8007db0 <TIM_OC1_SetConfig+0xdc>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d111      	bne.n	8007d86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	621a      	str	r2, [r3, #32]
}
 8007da0:	bf00      	nop
 8007da2:	371c      	adds	r7, #28
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	40010000 	.word	0x40010000
 8007db0:	40010400 	.word	0x40010400

08007db4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	f023 0210 	bic.w	r2, r3, #16
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	021b      	lsls	r3, r3, #8
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f023 0320 	bic.w	r3, r3, #32
 8007dfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	011b      	lsls	r3, r3, #4
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a22      	ldr	r2, [pc, #136]	; (8007e98 <TIM_OC2_SetConfig+0xe4>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d003      	beq.n	8007e1c <TIM_OC2_SetConfig+0x68>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a21      	ldr	r2, [pc, #132]	; (8007e9c <TIM_OC2_SetConfig+0xe8>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d10d      	bne.n	8007e38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	011b      	lsls	r3, r3, #4
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a17      	ldr	r2, [pc, #92]	; (8007e98 <TIM_OC2_SetConfig+0xe4>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d003      	beq.n	8007e48 <TIM_OC2_SetConfig+0x94>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a16      	ldr	r2, [pc, #88]	; (8007e9c <TIM_OC2_SetConfig+0xe8>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d113      	bne.n	8007e70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	695b      	ldr	r3, [r3, #20]
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	693a      	ldr	r2, [r7, #16]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685a      	ldr	r2, [r3, #4]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	621a      	str	r2, [r3, #32]
}
 8007e8a:	bf00      	nop
 8007e8c:	371c      	adds	r7, #28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	40010000 	.word	0x40010000
 8007e9c:	40010400 	.word	0x40010400

08007ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f023 0303 	bic.w	r3, r3, #3
 8007ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	021b      	lsls	r3, r3, #8
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a21      	ldr	r2, [pc, #132]	; (8007f80 <TIM_OC3_SetConfig+0xe0>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d003      	beq.n	8007f06 <TIM_OC3_SetConfig+0x66>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a20      	ldr	r2, [pc, #128]	; (8007f84 <TIM_OC3_SetConfig+0xe4>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d10d      	bne.n	8007f22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	021b      	lsls	r3, r3, #8
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a16      	ldr	r2, [pc, #88]	; (8007f80 <TIM_OC3_SetConfig+0xe0>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d003      	beq.n	8007f32 <TIM_OC3_SetConfig+0x92>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a15      	ldr	r2, [pc, #84]	; (8007f84 <TIM_OC3_SetConfig+0xe4>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d113      	bne.n	8007f5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	011b      	lsls	r3, r3, #4
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	011b      	lsls	r3, r3, #4
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	621a      	str	r2, [r3, #32]
}
 8007f74:	bf00      	nop
 8007f76:	371c      	adds	r7, #28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	40010000 	.word	0x40010000
 8007f84:	40010400 	.word	0x40010400

08007f88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	021b      	lsls	r3, r3, #8
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	031b      	lsls	r3, r3, #12
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a12      	ldr	r2, [pc, #72]	; (800802c <TIM_OC4_SetConfig+0xa4>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d003      	beq.n	8007ff0 <TIM_OC4_SetConfig+0x68>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a11      	ldr	r2, [pc, #68]	; (8008030 <TIM_OC4_SetConfig+0xa8>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d109      	bne.n	8008004 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ff6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	695b      	ldr	r3, [r3, #20]
 8007ffc:	019b      	lsls	r3, r3, #6
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	4313      	orrs	r3, r2
 8008002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	68fa      	ldr	r2, [r7, #12]
 800800e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	685a      	ldr	r2, [r3, #4]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	621a      	str	r2, [r3, #32]
}
 800801e:	bf00      	nop
 8008020:	371c      	adds	r7, #28
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	40010000 	.word	0x40010000
 8008030:	40010400 	.word	0x40010400

08008034 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	f003 031f 	and.w	r3, r3, #31
 8008046:	2201      	movs	r2, #1
 8008048:	fa02 f303 	lsl.w	r3, r2, r3
 800804c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6a1a      	ldr	r2, [r3, #32]
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	43db      	mvns	r3, r3
 8008056:	401a      	ands	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6a1a      	ldr	r2, [r3, #32]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	f003 031f 	and.w	r3, r3, #31
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	fa01 f303 	lsl.w	r3, r1, r3
 800806c:	431a      	orrs	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	621a      	str	r2, [r3, #32]
}
 8008072:	bf00      	nop
 8008074:	371c      	adds	r7, #28
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
	...

08008080 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008090:	2b01      	cmp	r3, #1
 8008092:	d101      	bne.n	8008098 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008094:	2302      	movs	r3, #2
 8008096:	e05a      	b.n	800814e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2202      	movs	r2, #2
 80080a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a21      	ldr	r2, [pc, #132]	; (800815c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d022      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080e4:	d01d      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a1d      	ldr	r2, [pc, #116]	; (8008160 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d018      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a1b      	ldr	r2, [pc, #108]	; (8008164 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d013      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a1a      	ldr	r2, [pc, #104]	; (8008168 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d00e      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a18      	ldr	r2, [pc, #96]	; (800816c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d009      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a17      	ldr	r2, [pc, #92]	; (8008170 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d004      	beq.n	8008122 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a15      	ldr	r2, [pc, #84]	; (8008174 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d10c      	bne.n	800813c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	4313      	orrs	r3, r2
 8008132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	40010000 	.word	0x40010000
 8008160:	40000400 	.word	0x40000400
 8008164:	40000800 	.word	0x40000800
 8008168:	40000c00 	.word	0x40000c00
 800816c:	40010400 	.word	0x40010400
 8008170:	40014000 	.word	0x40014000
 8008174:	40001800 	.word	0x40001800

08008178 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800818c:	2b01      	cmp	r3, #1
 800818e:	d101      	bne.n	8008194 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008190:	2302      	movs	r3, #2
 8008192:	e03d      	b.n	8008210 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e03f      	b.n	80082d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800825c:	b2db      	uxtb	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d106      	bne.n	8008270 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7fa fdde 	bl	8002e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2224      	movs	r2, #36	; 0x24
 8008274:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008286:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f829 	bl	80082e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	691a      	ldr	r2, [r3, #16]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800829c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	695a      	ldr	r2, [r3, #20]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68da      	ldr	r2, [r3, #12]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2220      	movs	r2, #32
 80082c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3708      	adds	r7, #8
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
	...

080082e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e4:	b085      	sub	sp, #20
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68da      	ldr	r2, [r3, #12]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	431a      	orrs	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	431a      	orrs	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	69db      	ldr	r3, [r3, #28]
 8008314:	4313      	orrs	r3, r2
 8008316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008322:	f023 030c 	bic.w	r3, r3, #12
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	6812      	ldr	r2, [r2, #0]
 800832a:	68f9      	ldr	r1, [r7, #12]
 800832c:	430b      	orrs	r3, r1
 800832e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	699a      	ldr	r2, [r3, #24]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	430a      	orrs	r2, r1
 8008344:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800834e:	f040 818b 	bne.w	8008668 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4ac1      	ldr	r2, [pc, #772]	; (800865c <UART_SetConfig+0x37c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d005      	beq.n	8008368 <UART_SetConfig+0x88>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4abf      	ldr	r2, [pc, #764]	; (8008660 <UART_SetConfig+0x380>)
 8008362:	4293      	cmp	r3, r2
 8008364:	f040 80bd 	bne.w	80084e2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008368:	f7fd f8bc 	bl	80054e4 <HAL_RCC_GetPCLK2Freq>
 800836c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	461d      	mov	r5, r3
 8008372:	f04f 0600 	mov.w	r6, #0
 8008376:	46a8      	mov	r8, r5
 8008378:	46b1      	mov	r9, r6
 800837a:	eb18 0308 	adds.w	r3, r8, r8
 800837e:	eb49 0409 	adc.w	r4, r9, r9
 8008382:	4698      	mov	r8, r3
 8008384:	46a1      	mov	r9, r4
 8008386:	eb18 0805 	adds.w	r8, r8, r5
 800838a:	eb49 0906 	adc.w	r9, r9, r6
 800838e:	f04f 0100 	mov.w	r1, #0
 8008392:	f04f 0200 	mov.w	r2, #0
 8008396:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800839a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800839e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80083a2:	4688      	mov	r8, r1
 80083a4:	4691      	mov	r9, r2
 80083a6:	eb18 0005 	adds.w	r0, r8, r5
 80083aa:	eb49 0106 	adc.w	r1, r9, r6
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	461d      	mov	r5, r3
 80083b4:	f04f 0600 	mov.w	r6, #0
 80083b8:	196b      	adds	r3, r5, r5
 80083ba:	eb46 0406 	adc.w	r4, r6, r6
 80083be:	461a      	mov	r2, r3
 80083c0:	4623      	mov	r3, r4
 80083c2:	f7f8 fc79 	bl	8000cb8 <__aeabi_uldivmod>
 80083c6:	4603      	mov	r3, r0
 80083c8:	460c      	mov	r4, r1
 80083ca:	461a      	mov	r2, r3
 80083cc:	4ba5      	ldr	r3, [pc, #660]	; (8008664 <UART_SetConfig+0x384>)
 80083ce:	fba3 2302 	umull	r2, r3, r3, r2
 80083d2:	095b      	lsrs	r3, r3, #5
 80083d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	461d      	mov	r5, r3
 80083dc:	f04f 0600 	mov.w	r6, #0
 80083e0:	46a9      	mov	r9, r5
 80083e2:	46b2      	mov	sl, r6
 80083e4:	eb19 0309 	adds.w	r3, r9, r9
 80083e8:	eb4a 040a 	adc.w	r4, sl, sl
 80083ec:	4699      	mov	r9, r3
 80083ee:	46a2      	mov	sl, r4
 80083f0:	eb19 0905 	adds.w	r9, r9, r5
 80083f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80083f8:	f04f 0100 	mov.w	r1, #0
 80083fc:	f04f 0200 	mov.w	r2, #0
 8008400:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008404:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008408:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800840c:	4689      	mov	r9, r1
 800840e:	4692      	mov	sl, r2
 8008410:	eb19 0005 	adds.w	r0, r9, r5
 8008414:	eb4a 0106 	adc.w	r1, sl, r6
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	461d      	mov	r5, r3
 800841e:	f04f 0600 	mov.w	r6, #0
 8008422:	196b      	adds	r3, r5, r5
 8008424:	eb46 0406 	adc.w	r4, r6, r6
 8008428:	461a      	mov	r2, r3
 800842a:	4623      	mov	r3, r4
 800842c:	f7f8 fc44 	bl	8000cb8 <__aeabi_uldivmod>
 8008430:	4603      	mov	r3, r0
 8008432:	460c      	mov	r4, r1
 8008434:	461a      	mov	r2, r3
 8008436:	4b8b      	ldr	r3, [pc, #556]	; (8008664 <UART_SetConfig+0x384>)
 8008438:	fba3 1302 	umull	r1, r3, r3, r2
 800843c:	095b      	lsrs	r3, r3, #5
 800843e:	2164      	movs	r1, #100	; 0x64
 8008440:	fb01 f303 	mul.w	r3, r1, r3
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	00db      	lsls	r3, r3, #3
 8008448:	3332      	adds	r3, #50	; 0x32
 800844a:	4a86      	ldr	r2, [pc, #536]	; (8008664 <UART_SetConfig+0x384>)
 800844c:	fba2 2303 	umull	r2, r3, r2, r3
 8008450:	095b      	lsrs	r3, r3, #5
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008458:	4498      	add	r8, r3
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	461d      	mov	r5, r3
 800845e:	f04f 0600 	mov.w	r6, #0
 8008462:	46a9      	mov	r9, r5
 8008464:	46b2      	mov	sl, r6
 8008466:	eb19 0309 	adds.w	r3, r9, r9
 800846a:	eb4a 040a 	adc.w	r4, sl, sl
 800846e:	4699      	mov	r9, r3
 8008470:	46a2      	mov	sl, r4
 8008472:	eb19 0905 	adds.w	r9, r9, r5
 8008476:	eb4a 0a06 	adc.w	sl, sl, r6
 800847a:	f04f 0100 	mov.w	r1, #0
 800847e:	f04f 0200 	mov.w	r2, #0
 8008482:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008486:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800848a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800848e:	4689      	mov	r9, r1
 8008490:	4692      	mov	sl, r2
 8008492:	eb19 0005 	adds.w	r0, r9, r5
 8008496:	eb4a 0106 	adc.w	r1, sl, r6
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	461d      	mov	r5, r3
 80084a0:	f04f 0600 	mov.w	r6, #0
 80084a4:	196b      	adds	r3, r5, r5
 80084a6:	eb46 0406 	adc.w	r4, r6, r6
 80084aa:	461a      	mov	r2, r3
 80084ac:	4623      	mov	r3, r4
 80084ae:	f7f8 fc03 	bl	8000cb8 <__aeabi_uldivmod>
 80084b2:	4603      	mov	r3, r0
 80084b4:	460c      	mov	r4, r1
 80084b6:	461a      	mov	r2, r3
 80084b8:	4b6a      	ldr	r3, [pc, #424]	; (8008664 <UART_SetConfig+0x384>)
 80084ba:	fba3 1302 	umull	r1, r3, r3, r2
 80084be:	095b      	lsrs	r3, r3, #5
 80084c0:	2164      	movs	r1, #100	; 0x64
 80084c2:	fb01 f303 	mul.w	r3, r1, r3
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	00db      	lsls	r3, r3, #3
 80084ca:	3332      	adds	r3, #50	; 0x32
 80084cc:	4a65      	ldr	r2, [pc, #404]	; (8008664 <UART_SetConfig+0x384>)
 80084ce:	fba2 2303 	umull	r2, r3, r2, r3
 80084d2:	095b      	lsrs	r3, r3, #5
 80084d4:	f003 0207 	and.w	r2, r3, #7
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4442      	add	r2, r8
 80084de:	609a      	str	r2, [r3, #8]
 80084e0:	e26f      	b.n	80089c2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80084e2:	f7fc ffeb 	bl	80054bc <HAL_RCC_GetPCLK1Freq>
 80084e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	461d      	mov	r5, r3
 80084ec:	f04f 0600 	mov.w	r6, #0
 80084f0:	46a8      	mov	r8, r5
 80084f2:	46b1      	mov	r9, r6
 80084f4:	eb18 0308 	adds.w	r3, r8, r8
 80084f8:	eb49 0409 	adc.w	r4, r9, r9
 80084fc:	4698      	mov	r8, r3
 80084fe:	46a1      	mov	r9, r4
 8008500:	eb18 0805 	adds.w	r8, r8, r5
 8008504:	eb49 0906 	adc.w	r9, r9, r6
 8008508:	f04f 0100 	mov.w	r1, #0
 800850c:	f04f 0200 	mov.w	r2, #0
 8008510:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008514:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008518:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800851c:	4688      	mov	r8, r1
 800851e:	4691      	mov	r9, r2
 8008520:	eb18 0005 	adds.w	r0, r8, r5
 8008524:	eb49 0106 	adc.w	r1, r9, r6
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	461d      	mov	r5, r3
 800852e:	f04f 0600 	mov.w	r6, #0
 8008532:	196b      	adds	r3, r5, r5
 8008534:	eb46 0406 	adc.w	r4, r6, r6
 8008538:	461a      	mov	r2, r3
 800853a:	4623      	mov	r3, r4
 800853c:	f7f8 fbbc 	bl	8000cb8 <__aeabi_uldivmod>
 8008540:	4603      	mov	r3, r0
 8008542:	460c      	mov	r4, r1
 8008544:	461a      	mov	r2, r3
 8008546:	4b47      	ldr	r3, [pc, #284]	; (8008664 <UART_SetConfig+0x384>)
 8008548:	fba3 2302 	umull	r2, r3, r3, r2
 800854c:	095b      	lsrs	r3, r3, #5
 800854e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	461d      	mov	r5, r3
 8008556:	f04f 0600 	mov.w	r6, #0
 800855a:	46a9      	mov	r9, r5
 800855c:	46b2      	mov	sl, r6
 800855e:	eb19 0309 	adds.w	r3, r9, r9
 8008562:	eb4a 040a 	adc.w	r4, sl, sl
 8008566:	4699      	mov	r9, r3
 8008568:	46a2      	mov	sl, r4
 800856a:	eb19 0905 	adds.w	r9, r9, r5
 800856e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008572:	f04f 0100 	mov.w	r1, #0
 8008576:	f04f 0200 	mov.w	r2, #0
 800857a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800857e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008582:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008586:	4689      	mov	r9, r1
 8008588:	4692      	mov	sl, r2
 800858a:	eb19 0005 	adds.w	r0, r9, r5
 800858e:	eb4a 0106 	adc.w	r1, sl, r6
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	461d      	mov	r5, r3
 8008598:	f04f 0600 	mov.w	r6, #0
 800859c:	196b      	adds	r3, r5, r5
 800859e:	eb46 0406 	adc.w	r4, r6, r6
 80085a2:	461a      	mov	r2, r3
 80085a4:	4623      	mov	r3, r4
 80085a6:	f7f8 fb87 	bl	8000cb8 <__aeabi_uldivmod>
 80085aa:	4603      	mov	r3, r0
 80085ac:	460c      	mov	r4, r1
 80085ae:	461a      	mov	r2, r3
 80085b0:	4b2c      	ldr	r3, [pc, #176]	; (8008664 <UART_SetConfig+0x384>)
 80085b2:	fba3 1302 	umull	r1, r3, r3, r2
 80085b6:	095b      	lsrs	r3, r3, #5
 80085b8:	2164      	movs	r1, #100	; 0x64
 80085ba:	fb01 f303 	mul.w	r3, r1, r3
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	00db      	lsls	r3, r3, #3
 80085c2:	3332      	adds	r3, #50	; 0x32
 80085c4:	4a27      	ldr	r2, [pc, #156]	; (8008664 <UART_SetConfig+0x384>)
 80085c6:	fba2 2303 	umull	r2, r3, r2, r3
 80085ca:	095b      	lsrs	r3, r3, #5
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80085d2:	4498      	add	r8, r3
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	461d      	mov	r5, r3
 80085d8:	f04f 0600 	mov.w	r6, #0
 80085dc:	46a9      	mov	r9, r5
 80085de:	46b2      	mov	sl, r6
 80085e0:	eb19 0309 	adds.w	r3, r9, r9
 80085e4:	eb4a 040a 	adc.w	r4, sl, sl
 80085e8:	4699      	mov	r9, r3
 80085ea:	46a2      	mov	sl, r4
 80085ec:	eb19 0905 	adds.w	r9, r9, r5
 80085f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80085f4:	f04f 0100 	mov.w	r1, #0
 80085f8:	f04f 0200 	mov.w	r2, #0
 80085fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008600:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008604:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008608:	4689      	mov	r9, r1
 800860a:	4692      	mov	sl, r2
 800860c:	eb19 0005 	adds.w	r0, r9, r5
 8008610:	eb4a 0106 	adc.w	r1, sl, r6
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	461d      	mov	r5, r3
 800861a:	f04f 0600 	mov.w	r6, #0
 800861e:	196b      	adds	r3, r5, r5
 8008620:	eb46 0406 	adc.w	r4, r6, r6
 8008624:	461a      	mov	r2, r3
 8008626:	4623      	mov	r3, r4
 8008628:	f7f8 fb46 	bl	8000cb8 <__aeabi_uldivmod>
 800862c:	4603      	mov	r3, r0
 800862e:	460c      	mov	r4, r1
 8008630:	461a      	mov	r2, r3
 8008632:	4b0c      	ldr	r3, [pc, #48]	; (8008664 <UART_SetConfig+0x384>)
 8008634:	fba3 1302 	umull	r1, r3, r3, r2
 8008638:	095b      	lsrs	r3, r3, #5
 800863a:	2164      	movs	r1, #100	; 0x64
 800863c:	fb01 f303 	mul.w	r3, r1, r3
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	3332      	adds	r3, #50	; 0x32
 8008646:	4a07      	ldr	r2, [pc, #28]	; (8008664 <UART_SetConfig+0x384>)
 8008648:	fba2 2303 	umull	r2, r3, r2, r3
 800864c:	095b      	lsrs	r3, r3, #5
 800864e:	f003 0207 	and.w	r2, r3, #7
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4442      	add	r2, r8
 8008658:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800865a:	e1b2      	b.n	80089c2 <UART_SetConfig+0x6e2>
 800865c:	40011000 	.word	0x40011000
 8008660:	40011400 	.word	0x40011400
 8008664:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4ad7      	ldr	r2, [pc, #860]	; (80089cc <UART_SetConfig+0x6ec>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d005      	beq.n	800867e <UART_SetConfig+0x39e>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4ad6      	ldr	r2, [pc, #856]	; (80089d0 <UART_SetConfig+0x6f0>)
 8008678:	4293      	cmp	r3, r2
 800867a:	f040 80d1 	bne.w	8008820 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800867e:	f7fc ff31 	bl	80054e4 <HAL_RCC_GetPCLK2Freq>
 8008682:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	469a      	mov	sl, r3
 8008688:	f04f 0b00 	mov.w	fp, #0
 800868c:	46d0      	mov	r8, sl
 800868e:	46d9      	mov	r9, fp
 8008690:	eb18 0308 	adds.w	r3, r8, r8
 8008694:	eb49 0409 	adc.w	r4, r9, r9
 8008698:	4698      	mov	r8, r3
 800869a:	46a1      	mov	r9, r4
 800869c:	eb18 080a 	adds.w	r8, r8, sl
 80086a0:	eb49 090b 	adc.w	r9, r9, fp
 80086a4:	f04f 0100 	mov.w	r1, #0
 80086a8:	f04f 0200 	mov.w	r2, #0
 80086ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80086b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80086b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80086b8:	4688      	mov	r8, r1
 80086ba:	4691      	mov	r9, r2
 80086bc:	eb1a 0508 	adds.w	r5, sl, r8
 80086c0:	eb4b 0609 	adc.w	r6, fp, r9
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	4619      	mov	r1, r3
 80086ca:	f04f 0200 	mov.w	r2, #0
 80086ce:	f04f 0300 	mov.w	r3, #0
 80086d2:	f04f 0400 	mov.w	r4, #0
 80086d6:	0094      	lsls	r4, r2, #2
 80086d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80086dc:	008b      	lsls	r3, r1, #2
 80086de:	461a      	mov	r2, r3
 80086e0:	4623      	mov	r3, r4
 80086e2:	4628      	mov	r0, r5
 80086e4:	4631      	mov	r1, r6
 80086e6:	f7f8 fae7 	bl	8000cb8 <__aeabi_uldivmod>
 80086ea:	4603      	mov	r3, r0
 80086ec:	460c      	mov	r4, r1
 80086ee:	461a      	mov	r2, r3
 80086f0:	4bb8      	ldr	r3, [pc, #736]	; (80089d4 <UART_SetConfig+0x6f4>)
 80086f2:	fba3 2302 	umull	r2, r3, r3, r2
 80086f6:	095b      	lsrs	r3, r3, #5
 80086f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	469b      	mov	fp, r3
 8008700:	f04f 0c00 	mov.w	ip, #0
 8008704:	46d9      	mov	r9, fp
 8008706:	46e2      	mov	sl, ip
 8008708:	eb19 0309 	adds.w	r3, r9, r9
 800870c:	eb4a 040a 	adc.w	r4, sl, sl
 8008710:	4699      	mov	r9, r3
 8008712:	46a2      	mov	sl, r4
 8008714:	eb19 090b 	adds.w	r9, r9, fp
 8008718:	eb4a 0a0c 	adc.w	sl, sl, ip
 800871c:	f04f 0100 	mov.w	r1, #0
 8008720:	f04f 0200 	mov.w	r2, #0
 8008724:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008728:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800872c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008730:	4689      	mov	r9, r1
 8008732:	4692      	mov	sl, r2
 8008734:	eb1b 0509 	adds.w	r5, fp, r9
 8008738:	eb4c 060a 	adc.w	r6, ip, sl
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	4619      	mov	r1, r3
 8008742:	f04f 0200 	mov.w	r2, #0
 8008746:	f04f 0300 	mov.w	r3, #0
 800874a:	f04f 0400 	mov.w	r4, #0
 800874e:	0094      	lsls	r4, r2, #2
 8008750:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008754:	008b      	lsls	r3, r1, #2
 8008756:	461a      	mov	r2, r3
 8008758:	4623      	mov	r3, r4
 800875a:	4628      	mov	r0, r5
 800875c:	4631      	mov	r1, r6
 800875e:	f7f8 faab 	bl	8000cb8 <__aeabi_uldivmod>
 8008762:	4603      	mov	r3, r0
 8008764:	460c      	mov	r4, r1
 8008766:	461a      	mov	r2, r3
 8008768:	4b9a      	ldr	r3, [pc, #616]	; (80089d4 <UART_SetConfig+0x6f4>)
 800876a:	fba3 1302 	umull	r1, r3, r3, r2
 800876e:	095b      	lsrs	r3, r3, #5
 8008770:	2164      	movs	r1, #100	; 0x64
 8008772:	fb01 f303 	mul.w	r3, r1, r3
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	011b      	lsls	r3, r3, #4
 800877a:	3332      	adds	r3, #50	; 0x32
 800877c:	4a95      	ldr	r2, [pc, #596]	; (80089d4 <UART_SetConfig+0x6f4>)
 800877e:	fba2 2303 	umull	r2, r3, r2, r3
 8008782:	095b      	lsrs	r3, r3, #5
 8008784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008788:	4498      	add	r8, r3
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	469b      	mov	fp, r3
 800878e:	f04f 0c00 	mov.w	ip, #0
 8008792:	46d9      	mov	r9, fp
 8008794:	46e2      	mov	sl, ip
 8008796:	eb19 0309 	adds.w	r3, r9, r9
 800879a:	eb4a 040a 	adc.w	r4, sl, sl
 800879e:	4699      	mov	r9, r3
 80087a0:	46a2      	mov	sl, r4
 80087a2:	eb19 090b 	adds.w	r9, r9, fp
 80087a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80087aa:	f04f 0100 	mov.w	r1, #0
 80087ae:	f04f 0200 	mov.w	r2, #0
 80087b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80087ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80087be:	4689      	mov	r9, r1
 80087c0:	4692      	mov	sl, r2
 80087c2:	eb1b 0509 	adds.w	r5, fp, r9
 80087c6:	eb4c 060a 	adc.w	r6, ip, sl
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	4619      	mov	r1, r3
 80087d0:	f04f 0200 	mov.w	r2, #0
 80087d4:	f04f 0300 	mov.w	r3, #0
 80087d8:	f04f 0400 	mov.w	r4, #0
 80087dc:	0094      	lsls	r4, r2, #2
 80087de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80087e2:	008b      	lsls	r3, r1, #2
 80087e4:	461a      	mov	r2, r3
 80087e6:	4623      	mov	r3, r4
 80087e8:	4628      	mov	r0, r5
 80087ea:	4631      	mov	r1, r6
 80087ec:	f7f8 fa64 	bl	8000cb8 <__aeabi_uldivmod>
 80087f0:	4603      	mov	r3, r0
 80087f2:	460c      	mov	r4, r1
 80087f4:	461a      	mov	r2, r3
 80087f6:	4b77      	ldr	r3, [pc, #476]	; (80089d4 <UART_SetConfig+0x6f4>)
 80087f8:	fba3 1302 	umull	r1, r3, r3, r2
 80087fc:	095b      	lsrs	r3, r3, #5
 80087fe:	2164      	movs	r1, #100	; 0x64
 8008800:	fb01 f303 	mul.w	r3, r1, r3
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	011b      	lsls	r3, r3, #4
 8008808:	3332      	adds	r3, #50	; 0x32
 800880a:	4a72      	ldr	r2, [pc, #456]	; (80089d4 <UART_SetConfig+0x6f4>)
 800880c:	fba2 2303 	umull	r2, r3, r2, r3
 8008810:	095b      	lsrs	r3, r3, #5
 8008812:	f003 020f 	and.w	r2, r3, #15
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4442      	add	r2, r8
 800881c:	609a      	str	r2, [r3, #8]
 800881e:	e0d0      	b.n	80089c2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008820:	f7fc fe4c 	bl	80054bc <HAL_RCC_GetPCLK1Freq>
 8008824:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	469a      	mov	sl, r3
 800882a:	f04f 0b00 	mov.w	fp, #0
 800882e:	46d0      	mov	r8, sl
 8008830:	46d9      	mov	r9, fp
 8008832:	eb18 0308 	adds.w	r3, r8, r8
 8008836:	eb49 0409 	adc.w	r4, r9, r9
 800883a:	4698      	mov	r8, r3
 800883c:	46a1      	mov	r9, r4
 800883e:	eb18 080a 	adds.w	r8, r8, sl
 8008842:	eb49 090b 	adc.w	r9, r9, fp
 8008846:	f04f 0100 	mov.w	r1, #0
 800884a:	f04f 0200 	mov.w	r2, #0
 800884e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008852:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008856:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800885a:	4688      	mov	r8, r1
 800885c:	4691      	mov	r9, r2
 800885e:	eb1a 0508 	adds.w	r5, sl, r8
 8008862:	eb4b 0609 	adc.w	r6, fp, r9
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	4619      	mov	r1, r3
 800886c:	f04f 0200 	mov.w	r2, #0
 8008870:	f04f 0300 	mov.w	r3, #0
 8008874:	f04f 0400 	mov.w	r4, #0
 8008878:	0094      	lsls	r4, r2, #2
 800887a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800887e:	008b      	lsls	r3, r1, #2
 8008880:	461a      	mov	r2, r3
 8008882:	4623      	mov	r3, r4
 8008884:	4628      	mov	r0, r5
 8008886:	4631      	mov	r1, r6
 8008888:	f7f8 fa16 	bl	8000cb8 <__aeabi_uldivmod>
 800888c:	4603      	mov	r3, r0
 800888e:	460c      	mov	r4, r1
 8008890:	461a      	mov	r2, r3
 8008892:	4b50      	ldr	r3, [pc, #320]	; (80089d4 <UART_SetConfig+0x6f4>)
 8008894:	fba3 2302 	umull	r2, r3, r3, r2
 8008898:	095b      	lsrs	r3, r3, #5
 800889a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	469b      	mov	fp, r3
 80088a2:	f04f 0c00 	mov.w	ip, #0
 80088a6:	46d9      	mov	r9, fp
 80088a8:	46e2      	mov	sl, ip
 80088aa:	eb19 0309 	adds.w	r3, r9, r9
 80088ae:	eb4a 040a 	adc.w	r4, sl, sl
 80088b2:	4699      	mov	r9, r3
 80088b4:	46a2      	mov	sl, r4
 80088b6:	eb19 090b 	adds.w	r9, r9, fp
 80088ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80088be:	f04f 0100 	mov.w	r1, #0
 80088c2:	f04f 0200 	mov.w	r2, #0
 80088c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80088ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088d2:	4689      	mov	r9, r1
 80088d4:	4692      	mov	sl, r2
 80088d6:	eb1b 0509 	adds.w	r5, fp, r9
 80088da:	eb4c 060a 	adc.w	r6, ip, sl
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	4619      	mov	r1, r3
 80088e4:	f04f 0200 	mov.w	r2, #0
 80088e8:	f04f 0300 	mov.w	r3, #0
 80088ec:	f04f 0400 	mov.w	r4, #0
 80088f0:	0094      	lsls	r4, r2, #2
 80088f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088f6:	008b      	lsls	r3, r1, #2
 80088f8:	461a      	mov	r2, r3
 80088fa:	4623      	mov	r3, r4
 80088fc:	4628      	mov	r0, r5
 80088fe:	4631      	mov	r1, r6
 8008900:	f7f8 f9da 	bl	8000cb8 <__aeabi_uldivmod>
 8008904:	4603      	mov	r3, r0
 8008906:	460c      	mov	r4, r1
 8008908:	461a      	mov	r2, r3
 800890a:	4b32      	ldr	r3, [pc, #200]	; (80089d4 <UART_SetConfig+0x6f4>)
 800890c:	fba3 1302 	umull	r1, r3, r3, r2
 8008910:	095b      	lsrs	r3, r3, #5
 8008912:	2164      	movs	r1, #100	; 0x64
 8008914:	fb01 f303 	mul.w	r3, r1, r3
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	011b      	lsls	r3, r3, #4
 800891c:	3332      	adds	r3, #50	; 0x32
 800891e:	4a2d      	ldr	r2, [pc, #180]	; (80089d4 <UART_SetConfig+0x6f4>)
 8008920:	fba2 2303 	umull	r2, r3, r2, r3
 8008924:	095b      	lsrs	r3, r3, #5
 8008926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800892a:	4498      	add	r8, r3
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	469b      	mov	fp, r3
 8008930:	f04f 0c00 	mov.w	ip, #0
 8008934:	46d9      	mov	r9, fp
 8008936:	46e2      	mov	sl, ip
 8008938:	eb19 0309 	adds.w	r3, r9, r9
 800893c:	eb4a 040a 	adc.w	r4, sl, sl
 8008940:	4699      	mov	r9, r3
 8008942:	46a2      	mov	sl, r4
 8008944:	eb19 090b 	adds.w	r9, r9, fp
 8008948:	eb4a 0a0c 	adc.w	sl, sl, ip
 800894c:	f04f 0100 	mov.w	r1, #0
 8008950:	f04f 0200 	mov.w	r2, #0
 8008954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008958:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800895c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008960:	4689      	mov	r9, r1
 8008962:	4692      	mov	sl, r2
 8008964:	eb1b 0509 	adds.w	r5, fp, r9
 8008968:	eb4c 060a 	adc.w	r6, ip, sl
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	4619      	mov	r1, r3
 8008972:	f04f 0200 	mov.w	r2, #0
 8008976:	f04f 0300 	mov.w	r3, #0
 800897a:	f04f 0400 	mov.w	r4, #0
 800897e:	0094      	lsls	r4, r2, #2
 8008980:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008984:	008b      	lsls	r3, r1, #2
 8008986:	461a      	mov	r2, r3
 8008988:	4623      	mov	r3, r4
 800898a:	4628      	mov	r0, r5
 800898c:	4631      	mov	r1, r6
 800898e:	f7f8 f993 	bl	8000cb8 <__aeabi_uldivmod>
 8008992:	4603      	mov	r3, r0
 8008994:	460c      	mov	r4, r1
 8008996:	461a      	mov	r2, r3
 8008998:	4b0e      	ldr	r3, [pc, #56]	; (80089d4 <UART_SetConfig+0x6f4>)
 800899a:	fba3 1302 	umull	r1, r3, r3, r2
 800899e:	095b      	lsrs	r3, r3, #5
 80089a0:	2164      	movs	r1, #100	; 0x64
 80089a2:	fb01 f303 	mul.w	r3, r1, r3
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	011b      	lsls	r3, r3, #4
 80089aa:	3332      	adds	r3, #50	; 0x32
 80089ac:	4a09      	ldr	r2, [pc, #36]	; (80089d4 <UART_SetConfig+0x6f4>)
 80089ae:	fba2 2303 	umull	r2, r3, r2, r3
 80089b2:	095b      	lsrs	r3, r3, #5
 80089b4:	f003 020f 	and.w	r2, r3, #15
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4442      	add	r2, r8
 80089be:	609a      	str	r2, [r3, #8]
}
 80089c0:	e7ff      	b.n	80089c2 <UART_SetConfig+0x6e2>
 80089c2:	bf00      	nop
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089cc:	40011000 	.word	0x40011000
 80089d0:	40011400 	.word	0x40011400
 80089d4:	51eb851f 	.word	0x51eb851f

080089d8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80089d8:	b084      	sub	sp, #16
 80089da:	b480      	push	{r7}
 80089dc:	b085      	sub	sp, #20
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	f107 001c 	add.w	r0, r7, #28
 80089e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80089ea:	2300      	movs	r3, #0
 80089ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80089ee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80089f0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80089f2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80089f6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80089fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80089fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80089fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008a02:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	4313      	orrs	r3, r2
 8008a08:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008a12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008a1e:	2300      	movs	r3, #0
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	b004      	add	sp, #16
 8008a2c:	4770      	bx	lr

08008a2e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b082      	sub	sp, #8
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2203      	movs	r2, #3
 8008a76:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008a78:	2002      	movs	r0, #2
 8008a7a:	f7fa fbff 	bl	800327c <HAL_Delay>
  
  return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0303 	and.w	r3, r3, #3
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ac2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008ac8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008ace:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008ade:	f023 030f 	bic.w	r3, r3, #15
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	431a      	orrs	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	691b      	ldr	r3, [r3, #16]
 8008b04:	b2db      	uxtb	r3, r3
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr

08008b12 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b085      	sub	sp, #20
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	3314      	adds	r3, #20
 8008b20:	461a      	mov	r2, r3
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	4413      	add	r3, r2
 8008b26:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
}  
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008b42:	2300      	movs	r3, #0
 8008b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008b5e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008b64:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008b6a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b76:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	431a      	orrs	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0

}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3714      	adds	r7, #20
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b088      	sub	sp, #32
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008b9e:	2310      	movs	r3, #16
 8008ba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ba2:	2340      	movs	r3, #64	; 0x40
 8008ba4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008bb0:	f107 0308 	add.w	r3, r7, #8
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f7ff ff74 	bl	8008aa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bc0:	2110      	movs	r1, #16
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fa40 	bl	8009048 <SDMMC_GetCmdResp1>
 8008bc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bca:	69fb      	ldr	r3, [r7, #28]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3720      	adds	r7, #32
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b088      	sub	sp, #32
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008be2:	2311      	movs	r3, #17
 8008be4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008be6:	2340      	movs	r3, #64	; 0x40
 8008be8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008bea:	2300      	movs	r3, #0
 8008bec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008bee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bf2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008bf4:	f107 0308 	add.w	r3, r7, #8
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7ff ff52 	bl	8008aa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c04:	2111      	movs	r1, #17
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fa1e 	bl	8009048 <SDMMC_GetCmdResp1>
 8008c0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c0e:	69fb      	ldr	r3, [r7, #28]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3720      	adds	r7, #32
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b088      	sub	sp, #32
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008c26:	2312      	movs	r3, #18
 8008c28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c2a:	2340      	movs	r3, #64	; 0x40
 8008c2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c38:	f107 0308 	add.w	r3, r7, #8
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7ff ff30 	bl	8008aa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c48:	2112      	movs	r1, #18
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f9fc 	bl	8009048 <SDMMC_GetCmdResp1>
 8008c50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c52:	69fb      	ldr	r3, [r7, #28]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3720      	adds	r7, #32
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b088      	sub	sp, #32
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008c6a:	2318      	movs	r3, #24
 8008c6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c6e:	2340      	movs	r3, #64	; 0x40
 8008c70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c72:	2300      	movs	r3, #0
 8008c74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c7c:	f107 0308 	add.w	r3, r7, #8
 8008c80:	4619      	mov	r1, r3
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff ff0e 	bl	8008aa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c8c:	2118      	movs	r1, #24
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f9da 	bl	8009048 <SDMMC_GetCmdResp1>
 8008c94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c96:	69fb      	ldr	r3, [r7, #28]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3720      	adds	r7, #32
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008cae:	2319      	movs	r3, #25
 8008cb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008cb2:	2340      	movs	r3, #64	; 0x40
 8008cb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cbe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008cc0:	f107 0308 	add.w	r3, r7, #8
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f7ff feec 	bl	8008aa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cd0:	2119      	movs	r1, #25
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f9b8 	bl	8009048 <SDMMC_GetCmdResp1>
 8008cd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cda:	69fb      	ldr	r3, [r7, #28]
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3720      	adds	r7, #32
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b088      	sub	sp, #32
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008cec:	2300      	movs	r3, #0
 8008cee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008cf0:	230c      	movs	r3, #12
 8008cf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008cf4:	2340      	movs	r3, #64	; 0x40
 8008cf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d02:	f107 0308 	add.w	r3, r7, #8
 8008d06:	4619      	mov	r1, r3
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f7ff fecb 	bl	8008aa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008d0e:	4a05      	ldr	r2, [pc, #20]	; (8008d24 <SDMMC_CmdStopTransfer+0x40>)
 8008d10:	210c      	movs	r1, #12
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f998 	bl	8009048 <SDMMC_GetCmdResp1>
 8008d18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d1a:	69fb      	ldr	r3, [r7, #28]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3720      	adds	r7, #32
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	05f5e100 	.word	0x05f5e100

08008d28 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b08a      	sub	sp, #40	; 0x28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008d38:	2307      	movs	r3, #7
 8008d3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008d3c:	2340      	movs	r3, #64	; 0x40
 8008d3e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d40:	2300      	movs	r3, #0
 8008d42:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d48:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d4a:	f107 0310 	add.w	r3, r7, #16
 8008d4e:	4619      	mov	r1, r3
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f7ff fea7 	bl	8008aa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8008d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d5a:	2107      	movs	r1, #7
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f000 f973 	bl	8009048 <SDMMC_GetCmdResp1>
 8008d62:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3728      	adds	r7, #40	; 0x28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b088      	sub	sp, #32
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008d76:	2300      	movs	r3, #0
 8008d78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008d82:	2300      	movs	r3, #0
 8008d84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008d8c:	f107 0308 	add.w	r3, r7, #8
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7ff fe86 	bl	8008aa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 f92d 	bl	8008ff8 <SDMMC_GetCmdError>
 8008d9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008da0:	69fb      	ldr	r3, [r7, #28]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3720      	adds	r7, #32
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b088      	sub	sp, #32
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008db2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008db6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008db8:	2308      	movs	r3, #8
 8008dba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008dbc:	2340      	movs	r3, #64	; 0x40
 8008dbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008dc8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008dca:	f107 0308 	add.w	r3, r7, #8
 8008dce:	4619      	mov	r1, r3
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f7ff fe67 	bl	8008aa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fb16 	bl	8009408 <SDMMC_GetCmdResp7>
 8008ddc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dde:	69fb      	ldr	r3, [r7, #28]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3720      	adds	r7, #32
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008df6:	2337      	movs	r3, #55	; 0x37
 8008df8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008dfa:	2340      	movs	r3, #64	; 0x40
 8008dfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e08:	f107 0308 	add.w	r3, r7, #8
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7ff fe48 	bl	8008aa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e18:	2137      	movs	r1, #55	; 0x37
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f914 	bl	8009048 <SDMMC_GetCmdResp1>
 8008e20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e22:	69fb      	ldr	r3, [r7, #28]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3720      	adds	r7, #32
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b088      	sub	sp, #32
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008e42:	2329      	movs	r3, #41	; 0x29
 8008e44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e46:	2340      	movs	r3, #64	; 0x40
 8008e48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e54:	f107 0308 	add.w	r3, r7, #8
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7ff fe22 	bl	8008aa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fa23 	bl	80092ac <SDMMC_GetCmdResp3>
 8008e66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e68:	69fb      	ldr	r3, [r7, #28]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3720      	adds	r7, #32
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b088      	sub	sp, #32
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008e80:	2306      	movs	r3, #6
 8008e82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008e84:	2340      	movs	r3, #64	; 0x40
 8008e86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008e92:	f107 0308 	add.w	r3, r7, #8
 8008e96:	4619      	mov	r1, r3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7ff fe03 	bl	8008aa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ea2:	2106      	movs	r1, #6
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 f8cf 	bl	8009048 <SDMMC_GetCmdResp1>
 8008eaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eac:	69fb      	ldr	r3, [r7, #28]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3720      	adds	r7, #32
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008eb6:	b580      	push	{r7, lr}
 8008eb8:	b088      	sub	sp, #32
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008ec2:	2333      	movs	r3, #51	; 0x33
 8008ec4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008ec6:	2340      	movs	r3, #64	; 0x40
 8008ec8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ed2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ed4:	f107 0308 	add.w	r3, r7, #8
 8008ed8:	4619      	mov	r1, r3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7ff fde2 	bl	8008aa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ee4:	2133      	movs	r1, #51	; 0x33
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f8ae 	bl	8009048 <SDMMC_GetCmdResp1>
 8008eec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eee:	69fb      	ldr	r3, [r7, #28]
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3720      	adds	r7, #32
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b088      	sub	sp, #32
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008f00:	2300      	movs	r3, #0
 8008f02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008f04:	2302      	movs	r3, #2
 8008f06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008f08:	23c0      	movs	r3, #192	; 0xc0
 8008f0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f16:	f107 0308 	add.w	r3, r7, #8
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f7ff fdc1 	bl	8008aa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f97c 	bl	8009220 <SDMMC_GetCmdResp2>
 8008f28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f2a:	69fb      	ldr	r3, [r7, #28]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3720      	adds	r7, #32
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b088      	sub	sp, #32
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008f42:	2309      	movs	r3, #9
 8008f44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008f46:	23c0      	movs	r3, #192	; 0xc0
 8008f48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f54:	f107 0308 	add.w	r3, r7, #8
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7ff fda2 	bl	8008aa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f95d 	bl	8009220 <SDMMC_GetCmdResp2>
 8008f66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f68:	69fb      	ldr	r3, [r7, #28]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3720      	adds	r7, #32
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b088      	sub	sp, #32
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
 8008f7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008f80:	2303      	movs	r3, #3
 8008f82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f84:	2340      	movs	r3, #64	; 0x40
 8008f86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f92:	f107 0308 	add.w	r3, r7, #8
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f7ff fd83 	bl	8008aa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008f9e:	683a      	ldr	r2, [r7, #0]
 8008fa0:	2103      	movs	r1, #3
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 f9bc 	bl	8009320 <SDMMC_GetCmdResp6>
 8008fa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008faa:	69fb      	ldr	r3, [r7, #28]
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3720      	adds	r7, #32
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b088      	sub	sp, #32
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008fc2:	230d      	movs	r3, #13
 8008fc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fc6:	2340      	movs	r3, #64	; 0x40
 8008fc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fd4:	f107 0308 	add.w	r3, r7, #8
 8008fd8:	4619      	mov	r1, r3
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff fd62 	bl	8008aa4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fe4:	210d      	movs	r1, #13
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 f82e 	bl	8009048 <SDMMC_GetCmdResp1>
 8008fec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fee:	69fb      	ldr	r3, [r7, #28]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3720      	adds	r7, #32
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008ff8:	b490      	push	{r4, r7}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009000:	4b0f      	ldr	r3, [pc, #60]	; (8009040 <SDMMC_GetCmdError+0x48>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a0f      	ldr	r2, [pc, #60]	; (8009044 <SDMMC_GetCmdError+0x4c>)
 8009006:	fba2 2303 	umull	r2, r3, r2, r3
 800900a:	0a5b      	lsrs	r3, r3, #9
 800900c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009010:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009014:	4623      	mov	r3, r4
 8009016:	1e5c      	subs	r4, r3, #1
 8009018:	2b00      	cmp	r3, #0
 800901a:	d102      	bne.n	8009022 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800901c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009020:	e009      	b.n	8009036 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800902a:	2b00      	cmp	r3, #0
 800902c:	d0f2      	beq.n	8009014 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	22c5      	movs	r2, #197	; 0xc5
 8009032:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bc90      	pop	{r4, r7}
 800903e:	4770      	bx	lr
 8009040:	20000000 	.word	0x20000000
 8009044:	10624dd3 	.word	0x10624dd3

08009048 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009048:	b590      	push	{r4, r7, lr}
 800904a:	b087      	sub	sp, #28
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	460b      	mov	r3, r1
 8009052:	607a      	str	r2, [r7, #4]
 8009054:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009056:	4b6f      	ldr	r3, [pc, #444]	; (8009214 <SDMMC_GetCmdResp1+0x1cc>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a6f      	ldr	r2, [pc, #444]	; (8009218 <SDMMC_GetCmdResp1+0x1d0>)
 800905c:	fba2 2303 	umull	r2, r3, r2, r3
 8009060:	0a5b      	lsrs	r3, r3, #9
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009068:	4623      	mov	r3, r4
 800906a:	1e5c      	subs	r4, r3, #1
 800906c:	2b00      	cmp	r3, #0
 800906e:	d102      	bne.n	8009076 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009070:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009074:	e0c9      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800907a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009082:	2b00      	cmp	r3, #0
 8009084:	d0f0      	beq.n	8009068 <SDMMC_GetCmdResp1+0x20>
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1eb      	bne.n	8009068 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009094:	f003 0304 	and.w	r3, r3, #4
 8009098:	2b00      	cmp	r3, #0
 800909a:	d004      	beq.n	80090a6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2204      	movs	r2, #4
 80090a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80090a2:	2304      	movs	r3, #4
 80090a4:	e0b1      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d004      	beq.n	80090bc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2201      	movs	r2, #1
 80090b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e0a6      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	22c5      	movs	r2, #197	; 0xc5
 80090c0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f7ff fd18 	bl	8008af8 <SDIO_GetCommandResponse>
 80090c8:	4603      	mov	r3, r0
 80090ca:	461a      	mov	r2, r3
 80090cc:	7afb      	ldrb	r3, [r7, #11]
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d001      	beq.n	80090d6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e099      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80090d6:	2100      	movs	r1, #0
 80090d8:	68f8      	ldr	r0, [r7, #12]
 80090da:	f7ff fd1a 	bl	8008b12 <SDIO_GetResponse>
 80090de:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	4b4e      	ldr	r3, [pc, #312]	; (800921c <SDMMC_GetCmdResp1+0x1d4>)
 80090e4:	4013      	ands	r3, r2
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d101      	bne.n	80090ee <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80090ea:	2300      	movs	r3, #0
 80090ec:	e08d      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	da02      	bge.n	80090fa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80090f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090f8:	e087      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009104:	2340      	movs	r3, #64	; 0x40
 8009106:	e080      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d001      	beq.n	8009116 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009112:	2380      	movs	r3, #128	; 0x80
 8009114:	e079      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009120:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009124:	e071      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009134:	e069      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009140:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009144:	e061      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009150:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009154:	e059      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d002      	beq.n	8009166 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009164:	e051      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d002      	beq.n	8009176 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009170:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009174:	e049      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d002      	beq.n	8009186 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009180:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009184:	e041      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009190:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009194:	e039      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d002      	beq.n	80091a6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80091a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80091a4:	e031      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d002      	beq.n	80091b6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80091b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80091b4:	e029      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d002      	beq.n	80091c6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80091c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80091c4:	e021      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d002      	beq.n	80091d6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80091d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80091d4:	e019      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80091e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80091e4:	e011      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d002      	beq.n	80091f6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80091f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80091f4:	e009      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	f003 0308 	and.w	r3, r3, #8
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d002      	beq.n	8009206 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009200:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009204:	e001      	b.n	800920a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009206:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800920a:	4618      	mov	r0, r3
 800920c:	371c      	adds	r7, #28
 800920e:	46bd      	mov	sp, r7
 8009210:	bd90      	pop	{r4, r7, pc}
 8009212:	bf00      	nop
 8009214:	20000000 	.word	0x20000000
 8009218:	10624dd3 	.word	0x10624dd3
 800921c:	fdffe008 	.word	0xfdffe008

08009220 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009220:	b490      	push	{r4, r7}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009228:	4b1e      	ldr	r3, [pc, #120]	; (80092a4 <SDMMC_GetCmdResp2+0x84>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a1e      	ldr	r2, [pc, #120]	; (80092a8 <SDMMC_GetCmdResp2+0x88>)
 800922e:	fba2 2303 	umull	r2, r3, r2, r3
 8009232:	0a5b      	lsrs	r3, r3, #9
 8009234:	f241 3288 	movw	r2, #5000	; 0x1388
 8009238:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800923c:	4623      	mov	r3, r4
 800923e:	1e5c      	subs	r4, r3, #1
 8009240:	2b00      	cmp	r3, #0
 8009242:	d102      	bne.n	800924a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009244:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009248:	e026      	b.n	8009298 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800924e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0f0      	beq.n	800923c <SDMMC_GetCmdResp2+0x1c>
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1eb      	bne.n	800923c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009268:	f003 0304 	and.w	r3, r3, #4
 800926c:	2b00      	cmp	r3, #0
 800926e:	d004      	beq.n	800927a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2204      	movs	r2, #4
 8009274:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009276:	2304      	movs	r3, #4
 8009278:	e00e      	b.n	8009298 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800927e:	f003 0301 	and.w	r3, r3, #1
 8009282:	2b00      	cmp	r3, #0
 8009284:	d004      	beq.n	8009290 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800928c:	2301      	movs	r3, #1
 800928e:	e003      	b.n	8009298 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	22c5      	movs	r2, #197	; 0xc5
 8009294:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bc90      	pop	{r4, r7}
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	20000000 	.word	0x20000000
 80092a8:	10624dd3 	.word	0x10624dd3

080092ac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80092ac:	b490      	push	{r4, r7}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80092b4:	4b18      	ldr	r3, [pc, #96]	; (8009318 <SDMMC_GetCmdResp3+0x6c>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a18      	ldr	r2, [pc, #96]	; (800931c <SDMMC_GetCmdResp3+0x70>)
 80092ba:	fba2 2303 	umull	r2, r3, r2, r3
 80092be:	0a5b      	lsrs	r3, r3, #9
 80092c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80092c8:	4623      	mov	r3, r4
 80092ca:	1e5c      	subs	r4, r3, #1
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d102      	bne.n	80092d6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092d4:	e01b      	b.n	800930e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092da:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0f0      	beq.n	80092c8 <SDMMC_GetCmdResp3+0x1c>
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1eb      	bne.n	80092c8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f4:	f003 0304 	and.w	r3, r3, #4
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d004      	beq.n	8009306 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2204      	movs	r2, #4
 8009300:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009302:	2304      	movs	r3, #4
 8009304:	e003      	b.n	800930e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	22c5      	movs	r2, #197	; 0xc5
 800930a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3710      	adds	r7, #16
 8009312:	46bd      	mov	sp, r7
 8009314:	bc90      	pop	{r4, r7}
 8009316:	4770      	bx	lr
 8009318:	20000000 	.word	0x20000000
 800931c:	10624dd3 	.word	0x10624dd3

08009320 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009320:	b590      	push	{r4, r7, lr}
 8009322:	b087      	sub	sp, #28
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	460b      	mov	r3, r1
 800932a:	607a      	str	r2, [r7, #4]
 800932c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800932e:	4b34      	ldr	r3, [pc, #208]	; (8009400 <SDMMC_GetCmdResp6+0xe0>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a34      	ldr	r2, [pc, #208]	; (8009404 <SDMMC_GetCmdResp6+0xe4>)
 8009334:	fba2 2303 	umull	r2, r3, r2, r3
 8009338:	0a5b      	lsrs	r3, r3, #9
 800933a:	f241 3288 	movw	r2, #5000	; 0x1388
 800933e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009342:	4623      	mov	r3, r4
 8009344:	1e5c      	subs	r4, r3, #1
 8009346:	2b00      	cmp	r3, #0
 8009348:	d102      	bne.n	8009350 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800934a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800934e:	e052      	b.n	80093f6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009354:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800935c:	2b00      	cmp	r3, #0
 800935e:	d0f0      	beq.n	8009342 <SDMMC_GetCmdResp6+0x22>
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1eb      	bne.n	8009342 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800936e:	f003 0304 	and.w	r3, r3, #4
 8009372:	2b00      	cmp	r3, #0
 8009374:	d004      	beq.n	8009380 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2204      	movs	r2, #4
 800937a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800937c:	2304      	movs	r3, #4
 800937e:	e03a      	b.n	80093f6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009384:	f003 0301 	and.w	r3, r3, #1
 8009388:	2b00      	cmp	r3, #0
 800938a:	d004      	beq.n	8009396 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2201      	movs	r2, #1
 8009390:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009392:	2301      	movs	r3, #1
 8009394:	e02f      	b.n	80093f6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009396:	68f8      	ldr	r0, [r7, #12]
 8009398:	f7ff fbae 	bl	8008af8 <SDIO_GetCommandResponse>
 800939c:	4603      	mov	r3, r0
 800939e:	461a      	mov	r2, r3
 80093a0:	7afb      	ldrb	r3, [r7, #11]
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d001      	beq.n	80093aa <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e025      	b.n	80093f6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	22c5      	movs	r2, #197	; 0xc5
 80093ae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80093b0:	2100      	movs	r1, #0
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f7ff fbad 	bl	8008b12 <SDIO_GetResponse>
 80093b8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d106      	bne.n	80093d2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	0c1b      	lsrs	r3, r3, #16
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80093ce:	2300      	movs	r3, #0
 80093d0:	e011      	b.n	80093f6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d002      	beq.n	80093e2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80093dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80093e0:	e009      	b.n	80093f6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80093ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093f0:	e001      	b.n	80093f6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80093f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	371c      	adds	r7, #28
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd90      	pop	{r4, r7, pc}
 80093fe:	bf00      	nop
 8009400:	20000000 	.word	0x20000000
 8009404:	10624dd3 	.word	0x10624dd3

08009408 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009408:	b490      	push	{r4, r7}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009410:	4b21      	ldr	r3, [pc, #132]	; (8009498 <SDMMC_GetCmdResp7+0x90>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a21      	ldr	r2, [pc, #132]	; (800949c <SDMMC_GetCmdResp7+0x94>)
 8009416:	fba2 2303 	umull	r2, r3, r2, r3
 800941a:	0a5b      	lsrs	r3, r3, #9
 800941c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009420:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009424:	4623      	mov	r3, r4
 8009426:	1e5c      	subs	r4, r3, #1
 8009428:	2b00      	cmp	r3, #0
 800942a:	d102      	bne.n	8009432 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800942c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009430:	e02c      	b.n	800948c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009436:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800943e:	2b00      	cmp	r3, #0
 8009440:	d0f0      	beq.n	8009424 <SDMMC_GetCmdResp7+0x1c>
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009448:	2b00      	cmp	r3, #0
 800944a:	d1eb      	bne.n	8009424 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009450:	f003 0304 	and.w	r3, r3, #4
 8009454:	2b00      	cmp	r3, #0
 8009456:	d004      	beq.n	8009462 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2204      	movs	r2, #4
 800945c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800945e:	2304      	movs	r3, #4
 8009460:	e014      	b.n	800948c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b00      	cmp	r3, #0
 800946c:	d004      	beq.n	8009478 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2201      	movs	r2, #1
 8009472:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009474:	2301      	movs	r3, #1
 8009476:	e009      	b.n	800948c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800947c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009480:	2b00      	cmp	r3, #0
 8009482:	d002      	beq.n	800948a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2240      	movs	r2, #64	; 0x40
 8009488:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800948a:	2300      	movs	r3, #0
  
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bc90      	pop	{r4, r7}
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	20000000 	.word	0x20000000
 800949c:	10624dd3 	.word	0x10624dd3

080094a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80094a4:	4904      	ldr	r1, [pc, #16]	; (80094b8 <MX_FATFS_Init+0x18>)
 80094a6:	4805      	ldr	r0, [pc, #20]	; (80094bc <MX_FATFS_Init+0x1c>)
 80094a8:	f004 f874 	bl	800d594 <FATFS_LinkDriver>
 80094ac:	4603      	mov	r3, r0
 80094ae:	461a      	mov	r2, r3
 80094b0:	4b03      	ldr	r3, [pc, #12]	; (80094c0 <MX_FATFS_Init+0x20>)
 80094b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80094b4:	bf00      	nop
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	20002cd0 	.word	0x20002cd0
 80094bc:	080126f8 	.word	0x080126f8
 80094c0:	20002ccc 	.word	0x20002ccc

080094c4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80094c4:	b480      	push	{r7}
 80094c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80094c8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80094de:	f000 f896 	bl	800960e <BSP_SD_IsDetected>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d001      	beq.n	80094ec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e012      	b.n	8009512 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80094ec:	480b      	ldr	r0, [pc, #44]	; (800951c <BSP_SD_Init+0x48>)
 80094ee:	f7fc fc8d 	bl	8005e0c <HAL_SD_Init>
 80094f2:	4603      	mov	r3, r0
 80094f4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80094f6:	79fb      	ldrb	r3, [r7, #7]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d109      	bne.n	8009510 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80094fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009500:	4806      	ldr	r0, [pc, #24]	; (800951c <BSP_SD_Init+0x48>)
 8009502:	f7fd fa37 	bl	8006974 <HAL_SD_ConfigWideBusOperation>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d001      	beq.n	8009510 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009510:	79fb      	ldrb	r3, [r7, #7]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	20002b60 	.word	0x20002b60

08009520 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800952c:	2300      	movs	r3, #0
 800952e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	68f9      	ldr	r1, [r7, #12]
 8009536:	4806      	ldr	r0, [pc, #24]	; (8009550 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009538:	f7fc fcf8 	bl	8005f2c <HAL_SD_ReadBlocks_DMA>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d001      	beq.n	8009546 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009546:	7dfb      	ldrb	r3, [r7, #23]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	20002b60 	.word	0x20002b60

08009554 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	68f9      	ldr	r1, [r7, #12]
 800956a:	4806      	ldr	r0, [pc, #24]	; (8009584 <BSP_SD_WriteBlocks_DMA+0x30>)
 800956c:	f7fc fdc6 	bl	80060fc <HAL_SD_WriteBlocks_DMA>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800957a:	7dfb      	ldrb	r3, [r7, #23]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	20002b60 	.word	0x20002b60

08009588 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800958c:	4805      	ldr	r0, [pc, #20]	; (80095a4 <BSP_SD_GetCardState+0x1c>)
 800958e:	f7fd fa6d 	bl	8006a6c <HAL_SD_GetCardState>
 8009592:	4603      	mov	r3, r0
 8009594:	2b04      	cmp	r3, #4
 8009596:	bf14      	ite	ne
 8009598:	2301      	movne	r3, #1
 800959a:	2300      	moveq	r3, #0
 800959c:	b2db      	uxtb	r3, r3
}
 800959e:	4618      	mov	r0, r3
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	20002b60 	.word	0x20002b60

080095a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80095b0:	6879      	ldr	r1, [r7, #4]
 80095b2:	4803      	ldr	r0, [pc, #12]	; (80095c0 <BSP_SD_GetCardInfo+0x18>)
 80095b4:	f7fd f9b2 	bl	800691c <HAL_SD_GetCardInfo>
}
 80095b8:	bf00      	nop
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	20002b60 	.word	0x20002b60

080095c4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80095cc:	f000 f818 	bl	8009600 <BSP_SD_AbortCallback>
}
 80095d0:	bf00      	nop
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80095e0:	f000 f9a8 	bl	8009934 <BSP_SD_WriteCpltCallback>
}
 80095e4:	bf00      	nop
 80095e6:	3708      	adds	r7, #8
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b082      	sub	sp, #8
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80095f4:	f000 f9aa 	bl	800994c <BSP_SD_ReadCpltCallback>
}
 80095f8:	bf00      	nop
 80095fa:	3708      	adds	r7, #8
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009600:	b480      	push	{r7}
 8009602:	af00      	add	r7, sp, #0

}
 8009604:	bf00      	nop
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b082      	sub	sp, #8
 8009612:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009614:	2301      	movs	r3, #1
 8009616:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009618:	f000 f80c 	bl	8009634 <BSP_PlatformIsDetected>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d101      	bne.n	8009626 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009622:	2300      	movs	r3, #0
 8009624:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009626:	79fb      	ldrb	r3, [r7, #7]
 8009628:	b2db      	uxtb	r3, r3
}
 800962a:	4618      	mov	r0, r3
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
	...

08009634 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800963a:	2301      	movs	r3, #1
 800963c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800963e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009642:	4806      	ldr	r0, [pc, #24]	; (800965c <BSP_PlatformIsDetected+0x28>)
 8009644:	f7fb f898 	bl	8004778 <HAL_GPIO_ReadPin>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800964e:	2300      	movs	r3, #0
 8009650:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009652:	79fb      	ldrb	r3, [r7, #7]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	40020000 	.word	0x40020000

08009660 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009668:	f7f9 fdfc 	bl	8003264 <HAL_GetTick>
 800966c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800966e:	e006      	b.n	800967e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009670:	f7ff ff8a 	bl	8009588 <BSP_SD_GetCardState>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d101      	bne.n	800967e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800967a:	2300      	movs	r3, #0
 800967c:	e009      	b.n	8009692 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800967e:	f7f9 fdf1 	bl	8003264 <HAL_GetTick>
 8009682:	4602      	mov	r2, r0
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	1ad3      	subs	r3, r2, r3
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	429a      	cmp	r2, r3
 800968c:	d8f0      	bhi.n	8009670 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800968e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
	...

0800969c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	4603      	mov	r3, r0
 80096a4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80096a6:	4b0b      	ldr	r3, [pc, #44]	; (80096d4 <SD_CheckStatus+0x38>)
 80096a8:	2201      	movs	r2, #1
 80096aa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80096ac:	f7ff ff6c 	bl	8009588 <BSP_SD_GetCardState>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d107      	bne.n	80096c6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80096b6:	4b07      	ldr	r3, [pc, #28]	; (80096d4 <SD_CheckStatus+0x38>)
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	f023 0301 	bic.w	r3, r3, #1
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	4b04      	ldr	r3, [pc, #16]	; (80096d4 <SD_CheckStatus+0x38>)
 80096c4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80096c6:	4b03      	ldr	r3, [pc, #12]	; (80096d4 <SD_CheckStatus+0x38>)
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	b2db      	uxtb	r3, r3
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	20000009 	.word	0x20000009

080096d8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	4603      	mov	r3, r0
 80096e0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80096e2:	f7ff fef7 	bl	80094d4 <BSP_SD_Init>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d107      	bne.n	80096fc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80096ec:	79fb      	ldrb	r3, [r7, #7]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7ff ffd4 	bl	800969c <SD_CheckStatus>
 80096f4:	4603      	mov	r3, r0
 80096f6:	461a      	mov	r2, r3
 80096f8:	4b04      	ldr	r3, [pc, #16]	; (800970c <SD_initialize+0x34>)
 80096fa:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80096fc:	4b03      	ldr	r3, [pc, #12]	; (800970c <SD_initialize+0x34>)
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	b2db      	uxtb	r3, r3
}
 8009702:	4618      	mov	r0, r3
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	20000009 	.word	0x20000009

08009710 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	4603      	mov	r3, r0
 8009718:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800971a:	79fb      	ldrb	r3, [r7, #7]
 800971c:	4618      	mov	r0, r3
 800971e:	f7ff ffbd 	bl	800969c <SD_CheckStatus>
 8009722:	4603      	mov	r3, r0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	607a      	str	r2, [r7, #4]
 8009736:	603b      	str	r3, [r7, #0]
 8009738:	4603      	mov	r3, r0
 800973a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009740:	f247 5030 	movw	r0, #30000	; 0x7530
 8009744:	f7ff ff8c 	bl	8009660 <SD_CheckStatusWithTimeout>
 8009748:	4603      	mov	r3, r0
 800974a:	2b00      	cmp	r3, #0
 800974c:	da01      	bge.n	8009752 <SD_read+0x26>
  {
    return res;
 800974e:	7dfb      	ldrb	r3, [r7, #23]
 8009750:	e03b      	b.n	80097ca <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009752:	683a      	ldr	r2, [r7, #0]
 8009754:	6879      	ldr	r1, [r7, #4]
 8009756:	68b8      	ldr	r0, [r7, #8]
 8009758:	f7ff fee2 	bl	8009520 <BSP_SD_ReadBlocks_DMA>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d132      	bne.n	80097c8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009762:	4b1c      	ldr	r3, [pc, #112]	; (80097d4 <SD_read+0xa8>)
 8009764:	2200      	movs	r2, #0
 8009766:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009768:	f7f9 fd7c 	bl	8003264 <HAL_GetTick>
 800976c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800976e:	bf00      	nop
 8009770:	4b18      	ldr	r3, [pc, #96]	; (80097d4 <SD_read+0xa8>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d108      	bne.n	800978a <SD_read+0x5e>
 8009778:	f7f9 fd74 	bl	8003264 <HAL_GetTick>
 800977c:	4602      	mov	r2, r0
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	f247 522f 	movw	r2, #29999	; 0x752f
 8009786:	4293      	cmp	r3, r2
 8009788:	d9f2      	bls.n	8009770 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800978a:	4b12      	ldr	r3, [pc, #72]	; (80097d4 <SD_read+0xa8>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d102      	bne.n	8009798 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	75fb      	strb	r3, [r7, #23]
 8009796:	e017      	b.n	80097c8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009798:	4b0e      	ldr	r3, [pc, #56]	; (80097d4 <SD_read+0xa8>)
 800979a:	2200      	movs	r2, #0
 800979c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800979e:	f7f9 fd61 	bl	8003264 <HAL_GetTick>
 80097a2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80097a4:	e007      	b.n	80097b6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80097a6:	f7ff feef 	bl	8009588 <BSP_SD_GetCardState>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d102      	bne.n	80097b6 <SD_read+0x8a>
          {
            res = RES_OK;
 80097b0:	2300      	movs	r3, #0
 80097b2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80097b4:	e008      	b.n	80097c8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80097b6:	f7f9 fd55 	bl	8003264 <HAL_GetTick>
 80097ba:	4602      	mov	r2, r0
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	1ad3      	subs	r3, r2, r3
 80097c0:	f247 522f 	movw	r2, #29999	; 0x752f
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d9ee      	bls.n	80097a6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80097c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3718      	adds	r7, #24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	20000238 	.word	0x20000238

080097d8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b086      	sub	sp, #24
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60b9      	str	r1, [r7, #8]
 80097e0:	607a      	str	r2, [r7, #4]
 80097e2:	603b      	str	r3, [r7, #0]
 80097e4:	4603      	mov	r3, r0
 80097e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80097ec:	4b24      	ldr	r3, [pc, #144]	; (8009880 <SD_write+0xa8>)
 80097ee:	2200      	movs	r2, #0
 80097f0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80097f2:	f247 5030 	movw	r0, #30000	; 0x7530
 80097f6:	f7ff ff33 	bl	8009660 <SD_CheckStatusWithTimeout>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	da01      	bge.n	8009804 <SD_write+0x2c>
  {
    return res;
 8009800:	7dfb      	ldrb	r3, [r7, #23]
 8009802:	e038      	b.n	8009876 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	6879      	ldr	r1, [r7, #4]
 8009808:	68b8      	ldr	r0, [r7, #8]
 800980a:	f7ff fea3 	bl	8009554 <BSP_SD_WriteBlocks_DMA>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d12f      	bne.n	8009874 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009814:	f7f9 fd26 	bl	8003264 <HAL_GetTick>
 8009818:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800981a:	bf00      	nop
 800981c:	4b18      	ldr	r3, [pc, #96]	; (8009880 <SD_write+0xa8>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d108      	bne.n	8009836 <SD_write+0x5e>
 8009824:	f7f9 fd1e 	bl	8003264 <HAL_GetTick>
 8009828:	4602      	mov	r2, r0
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	f247 522f 	movw	r2, #29999	; 0x752f
 8009832:	4293      	cmp	r3, r2
 8009834:	d9f2      	bls.n	800981c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8009836:	4b12      	ldr	r3, [pc, #72]	; (8009880 <SD_write+0xa8>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d102      	bne.n	8009844 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	75fb      	strb	r3, [r7, #23]
 8009842:	e017      	b.n	8009874 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009844:	4b0e      	ldr	r3, [pc, #56]	; (8009880 <SD_write+0xa8>)
 8009846:	2200      	movs	r2, #0
 8009848:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800984a:	f7f9 fd0b 	bl	8003264 <HAL_GetTick>
 800984e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009850:	e007      	b.n	8009862 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009852:	f7ff fe99 	bl	8009588 <BSP_SD_GetCardState>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d102      	bne.n	8009862 <SD_write+0x8a>
          {
            res = RES_OK;
 800985c:	2300      	movs	r3, #0
 800985e:	75fb      	strb	r3, [r7, #23]
            break;
 8009860:	e008      	b.n	8009874 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009862:	f7f9 fcff 	bl	8003264 <HAL_GetTick>
 8009866:	4602      	mov	r2, r0
 8009868:	693b      	ldr	r3, [r7, #16]
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	f247 522f 	movw	r2, #29999	; 0x752f
 8009870:	4293      	cmp	r3, r2
 8009872:	d9ee      	bls.n	8009852 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009874:	7dfb      	ldrb	r3, [r7, #23]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3718      	adds	r7, #24
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	20000234 	.word	0x20000234

08009884 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b08c      	sub	sp, #48	; 0x30
 8009888:	af00      	add	r7, sp, #0
 800988a:	4603      	mov	r3, r0
 800988c:	603a      	str	r2, [r7, #0]
 800988e:	71fb      	strb	r3, [r7, #7]
 8009890:	460b      	mov	r3, r1
 8009892:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800989a:	4b25      	ldr	r3, [pc, #148]	; (8009930 <SD_ioctl+0xac>)
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d001      	beq.n	80098ac <SD_ioctl+0x28>
 80098a8:	2303      	movs	r3, #3
 80098aa:	e03c      	b.n	8009926 <SD_ioctl+0xa2>

  switch (cmd)
 80098ac:	79bb      	ldrb	r3, [r7, #6]
 80098ae:	2b03      	cmp	r3, #3
 80098b0:	d834      	bhi.n	800991c <SD_ioctl+0x98>
 80098b2:	a201      	add	r2, pc, #4	; (adr r2, 80098b8 <SD_ioctl+0x34>)
 80098b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b8:	080098c9 	.word	0x080098c9
 80098bc:	080098d1 	.word	0x080098d1
 80098c0:	080098e9 	.word	0x080098e9
 80098c4:	08009903 	.word	0x08009903
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098ce:	e028      	b.n	8009922 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80098d0:	f107 030c 	add.w	r3, r7, #12
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7ff fe67 	bl	80095a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80098da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80098e6:	e01c      	b.n	8009922 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80098e8:	f107 030c 	add.w	r3, r7, #12
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7ff fe5b 	bl	80095a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80098f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f4:	b29a      	uxth	r2, r3
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80098fa:	2300      	movs	r3, #0
 80098fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009900:	e00f      	b.n	8009922 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009902:	f107 030c 	add.w	r3, r7, #12
 8009906:	4618      	mov	r0, r3
 8009908:	f7ff fe4e 	bl	80095a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800990c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990e:	0a5a      	lsrs	r2, r3, #9
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800991a:	e002      	b.n	8009922 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800991c:	2304      	movs	r3, #4
 800991e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009926:	4618      	mov	r0, r3
 8009928:	3730      	adds	r7, #48	; 0x30
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	20000009 	.word	0x20000009

08009934 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009934:	b480      	push	{r7}
 8009936:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009938:	4b03      	ldr	r3, [pc, #12]	; (8009948 <BSP_SD_WriteCpltCallback+0x14>)
 800993a:	2201      	movs	r2, #1
 800993c:	601a      	str	r2, [r3, #0]
}
 800993e:	bf00      	nop
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	20000234 	.word	0x20000234

0800994c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800994c:	b480      	push	{r7}
 800994e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009950:	4b03      	ldr	r3, [pc, #12]	; (8009960 <BSP_SD_ReadCpltCallback+0x14>)
 8009952:	2201      	movs	r2, #1
 8009954:	601a      	str	r2, [r3, #0]
}
 8009956:	bf00      	nop
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	20000238 	.word	0x20000238

08009964 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	4603      	mov	r3, r0
 800996c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800996e:	79fb      	ldrb	r3, [r7, #7]
 8009970:	4a08      	ldr	r2, [pc, #32]	; (8009994 <disk_status+0x30>)
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	685b      	ldr	r3, [r3, #4]
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	79fa      	ldrb	r2, [r7, #7]
 800997c:	4905      	ldr	r1, [pc, #20]	; (8009994 <disk_status+0x30>)
 800997e:	440a      	add	r2, r1
 8009980:	7a12      	ldrb	r2, [r2, #8]
 8009982:	4610      	mov	r0, r2
 8009984:	4798      	blx	r3
 8009986:	4603      	mov	r3, r0
 8009988:	73fb      	strb	r3, [r7, #15]
  return stat;
 800998a:	7bfb      	ldrb	r3, [r7, #15]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	20000464 	.word	0x20000464

08009998 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	4603      	mov	r3, r0
 80099a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80099a2:	2300      	movs	r3, #0
 80099a4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80099a6:	79fb      	ldrb	r3, [r7, #7]
 80099a8:	4a0d      	ldr	r2, [pc, #52]	; (80099e0 <disk_initialize+0x48>)
 80099aa:	5cd3      	ldrb	r3, [r2, r3]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d111      	bne.n	80099d4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80099b0:	79fb      	ldrb	r3, [r7, #7]
 80099b2:	4a0b      	ldr	r2, [pc, #44]	; (80099e0 <disk_initialize+0x48>)
 80099b4:	2101      	movs	r1, #1
 80099b6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80099b8:	79fb      	ldrb	r3, [r7, #7]
 80099ba:	4a09      	ldr	r2, [pc, #36]	; (80099e0 <disk_initialize+0x48>)
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	4413      	add	r3, r2
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	79fa      	ldrb	r2, [r7, #7]
 80099c6:	4906      	ldr	r1, [pc, #24]	; (80099e0 <disk_initialize+0x48>)
 80099c8:	440a      	add	r2, r1
 80099ca:	7a12      	ldrb	r2, [r2, #8]
 80099cc:	4610      	mov	r0, r2
 80099ce:	4798      	blx	r3
 80099d0:	4603      	mov	r3, r0
 80099d2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	20000464 	.word	0x20000464

080099e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80099e4:	b590      	push	{r4, r7, lr}
 80099e6:	b087      	sub	sp, #28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60b9      	str	r1, [r7, #8]
 80099ec:	607a      	str	r2, [r7, #4]
 80099ee:	603b      	str	r3, [r7, #0]
 80099f0:	4603      	mov	r3, r0
 80099f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	4a0a      	ldr	r2, [pc, #40]	; (8009a20 <disk_read+0x3c>)
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	689c      	ldr	r4, [r3, #8]
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
 8009a02:	4a07      	ldr	r2, [pc, #28]	; (8009a20 <disk_read+0x3c>)
 8009a04:	4413      	add	r3, r2
 8009a06:	7a18      	ldrb	r0, [r3, #8]
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	68b9      	ldr	r1, [r7, #8]
 8009a0e:	47a0      	blx	r4
 8009a10:	4603      	mov	r3, r0
 8009a12:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	371c      	adds	r7, #28
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd90      	pop	{r4, r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	20000464 	.word	0x20000464

08009a24 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009a24:	b590      	push	{r4, r7, lr}
 8009a26:	b087      	sub	sp, #28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60b9      	str	r1, [r7, #8]
 8009a2c:	607a      	str	r2, [r7, #4]
 8009a2e:	603b      	str	r3, [r7, #0]
 8009a30:	4603      	mov	r3, r0
 8009a32:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009a34:	7bfb      	ldrb	r3, [r7, #15]
 8009a36:	4a0a      	ldr	r2, [pc, #40]	; (8009a60 <disk_write+0x3c>)
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4413      	add	r3, r2
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	68dc      	ldr	r4, [r3, #12]
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	4a07      	ldr	r2, [pc, #28]	; (8009a60 <disk_write+0x3c>)
 8009a44:	4413      	add	r3, r2
 8009a46:	7a18      	ldrb	r0, [r3, #8]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	68b9      	ldr	r1, [r7, #8]
 8009a4e:	47a0      	blx	r4
 8009a50:	4603      	mov	r3, r0
 8009a52:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	371c      	adds	r7, #28
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd90      	pop	{r4, r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20000464 	.word	0x20000464

08009a64 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	603a      	str	r2, [r7, #0]
 8009a6e:	71fb      	strb	r3, [r7, #7]
 8009a70:	460b      	mov	r3, r1
 8009a72:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009a74:	79fb      	ldrb	r3, [r7, #7]
 8009a76:	4a09      	ldr	r2, [pc, #36]	; (8009a9c <disk_ioctl+0x38>)
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	79fa      	ldrb	r2, [r7, #7]
 8009a82:	4906      	ldr	r1, [pc, #24]	; (8009a9c <disk_ioctl+0x38>)
 8009a84:	440a      	add	r2, r1
 8009a86:	7a10      	ldrb	r0, [r2, #8]
 8009a88:	79b9      	ldrb	r1, [r7, #6]
 8009a8a:	683a      	ldr	r2, [r7, #0]
 8009a8c:	4798      	blx	r3
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73fb      	strb	r3, [r7, #15]
  return res;
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	20000464 	.word	0x20000464

08009aa0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009ab0:	89fb      	ldrh	r3, [r7, #14]
 8009ab2:	021b      	lsls	r3, r3, #8
 8009ab4:	b21a      	sxth	r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	b21b      	sxth	r3, r3
 8009abc:	4313      	orrs	r3, r2
 8009abe:	b21b      	sxth	r3, r3
 8009ac0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009ac2:	89fb      	ldrh	r3, [r7, #14]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3714      	adds	r7, #20
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b085      	sub	sp, #20
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3303      	adds	r3, #3
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	021b      	lsls	r3, r3, #8
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	3202      	adds	r2, #2
 8009ae8:	7812      	ldrb	r2, [r2, #0]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	021b      	lsls	r3, r3, #8
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	3201      	adds	r2, #1
 8009af6:	7812      	ldrb	r2, [r2, #0]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	021b      	lsls	r3, r3, #8
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	7812      	ldrb	r2, [r2, #0]
 8009b04:	4313      	orrs	r3, r2
 8009b06:	60fb      	str	r3, [r7, #12]
	return rv;
 8009b08:	68fb      	ldr	r3, [r7, #12]
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3714      	adds	r7, #20
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009b16:	b480      	push	{r7}
 8009b18:	b083      	sub	sp, #12
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	1c5a      	adds	r2, r3, #1
 8009b26:	607a      	str	r2, [r7, #4]
 8009b28:	887a      	ldrh	r2, [r7, #2]
 8009b2a:	b2d2      	uxtb	r2, r2
 8009b2c:	701a      	strb	r2, [r3, #0]
 8009b2e:	887b      	ldrh	r3, [r7, #2]
 8009b30:	0a1b      	lsrs	r3, r3, #8
 8009b32:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	607a      	str	r2, [r7, #4]
 8009b3a:	887a      	ldrh	r2, [r7, #2]
 8009b3c:	b2d2      	uxtb	r2, r2
 8009b3e:	701a      	strb	r2, [r3, #0]
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	1c5a      	adds	r2, r3, #1
 8009b5a:	607a      	str	r2, [r7, #4]
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	b2d2      	uxtb	r2, r2
 8009b60:	701a      	strb	r2, [r3, #0]
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	0a1b      	lsrs	r3, r3, #8
 8009b66:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	1c5a      	adds	r2, r3, #1
 8009b6c:	607a      	str	r2, [r7, #4]
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	b2d2      	uxtb	r2, r2
 8009b72:	701a      	strb	r2, [r3, #0]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	0a1b      	lsrs	r3, r3, #8
 8009b78:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	1c5a      	adds	r2, r3, #1
 8009b7e:	607a      	str	r2, [r7, #4]
 8009b80:	683a      	ldr	r2, [r7, #0]
 8009b82:	b2d2      	uxtb	r2, r2
 8009b84:	701a      	strb	r2, [r3, #0]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	0a1b      	lsrs	r3, r3, #8
 8009b8a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	607a      	str	r2, [r7, #4]
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	b2d2      	uxtb	r2, r2
 8009b96:	701a      	strb	r2, [r3, #0]
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009ba4:	b480      	push	{r7}
 8009ba6:	b087      	sub	sp, #28
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00d      	beq.n	8009bda <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009bbe:	693a      	ldr	r2, [r7, #16]
 8009bc0:	1c53      	adds	r3, r2, #1
 8009bc2:	613b      	str	r3, [r7, #16]
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	1c59      	adds	r1, r3, #1
 8009bc8:	6179      	str	r1, [r7, #20]
 8009bca:	7812      	ldrb	r2, [r2, #0]
 8009bcc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	607b      	str	r3, [r7, #4]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d1f1      	bne.n	8009bbe <mem_cpy+0x1a>
	}
}
 8009bda:	bf00      	nop
 8009bdc:	371c      	adds	r7, #28
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr

08009be6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009be6:	b480      	push	{r7}
 8009be8:	b087      	sub	sp, #28
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	60f8      	str	r0, [r7, #12]
 8009bee:	60b9      	str	r1, [r7, #8]
 8009bf0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	1c5a      	adds	r2, r3, #1
 8009bfa:	617a      	str	r2, [r7, #20]
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	b2d2      	uxtb	r2, r2
 8009c00:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	607b      	str	r3, [r7, #4]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1f3      	bne.n	8009bf6 <mem_set+0x10>
}
 8009c0e:	bf00      	nop
 8009c10:	371c      	adds	r7, #28
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009c1a:	b480      	push	{r7}
 8009c1c:	b089      	sub	sp, #36	; 0x24
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	60f8      	str	r0, [r7, #12]
 8009c22:	60b9      	str	r1, [r7, #8]
 8009c24:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	61fb      	str	r3, [r7, #28]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	1c5a      	adds	r2, r3, #1
 8009c36:	61fa      	str	r2, [r7, #28]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	1c5a      	adds	r2, r3, #1
 8009c40:	61ba      	str	r2, [r7, #24]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	1acb      	subs	r3, r1, r3
 8009c46:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	607b      	str	r3, [r7, #4]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d002      	beq.n	8009c5a <mem_cmp+0x40>
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d0eb      	beq.n	8009c32 <mem_cmp+0x18>

	return r;
 8009c5a:	697b      	ldr	r3, [r7, #20]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3724      	adds	r7, #36	; 0x24
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009c72:	e002      	b.n	8009c7a <chk_chr+0x12>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	3301      	adds	r3, #1
 8009c78:	607b      	str	r3, [r7, #4]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d005      	beq.n	8009c8e <chk_chr+0x26>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	461a      	mov	r2, r3
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d1f2      	bne.n	8009c74 <chk_chr+0xc>
	return *str;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	781b      	ldrb	r3, [r3, #0]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	370c      	adds	r7, #12
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
	...

08009ca0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009caa:	2300      	movs	r3, #0
 8009cac:	60bb      	str	r3, [r7, #8]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	60fb      	str	r3, [r7, #12]
 8009cb2:	e029      	b.n	8009d08 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009cb4:	4a27      	ldr	r2, [pc, #156]	; (8009d54 <chk_lock+0xb4>)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	011b      	lsls	r3, r3, #4
 8009cba:	4413      	add	r3, r2
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d01d      	beq.n	8009cfe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009cc2:	4a24      	ldr	r2, [pc, #144]	; (8009d54 <chk_lock+0xb4>)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	011b      	lsls	r3, r3, #4
 8009cc8:	4413      	add	r3, r2
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d116      	bne.n	8009d02 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009cd4:	4a1f      	ldr	r2, [pc, #124]	; (8009d54 <chk_lock+0xb4>)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	011b      	lsls	r3, r3, #4
 8009cda:	4413      	add	r3, r2
 8009cdc:	3304      	adds	r3, #4
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d10c      	bne.n	8009d02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009ce8:	4a1a      	ldr	r2, [pc, #104]	; (8009d54 <chk_lock+0xb4>)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	011b      	lsls	r3, r3, #4
 8009cee:	4413      	add	r3, r2
 8009cf0:	3308      	adds	r3, #8
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d102      	bne.n	8009d02 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009cfc:	e007      	b.n	8009d0e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	3301      	adds	r3, #1
 8009d06:	60fb      	str	r3, [r7, #12]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d9d2      	bls.n	8009cb4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d109      	bne.n	8009d28 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d102      	bne.n	8009d20 <chk_lock+0x80>
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d101      	bne.n	8009d24 <chk_lock+0x84>
 8009d20:	2300      	movs	r3, #0
 8009d22:	e010      	b.n	8009d46 <chk_lock+0xa6>
 8009d24:	2312      	movs	r3, #18
 8009d26:	e00e      	b.n	8009d46 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d108      	bne.n	8009d40 <chk_lock+0xa0>
 8009d2e:	4a09      	ldr	r2, [pc, #36]	; (8009d54 <chk_lock+0xb4>)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	011b      	lsls	r3, r3, #4
 8009d34:	4413      	add	r3, r2
 8009d36:	330c      	adds	r3, #12
 8009d38:	881b      	ldrh	r3, [r3, #0]
 8009d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d3e:	d101      	bne.n	8009d44 <chk_lock+0xa4>
 8009d40:	2310      	movs	r3, #16
 8009d42:	e000      	b.n	8009d46 <chk_lock+0xa6>
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3714      	adds	r7, #20
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	20000244 	.word	0x20000244

08009d58 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	607b      	str	r3, [r7, #4]
 8009d62:	e002      	b.n	8009d6a <enq_lock+0x12>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	3301      	adds	r3, #1
 8009d68:	607b      	str	r3, [r7, #4]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d806      	bhi.n	8009d7e <enq_lock+0x26>
 8009d70:	4a09      	ldr	r2, [pc, #36]	; (8009d98 <enq_lock+0x40>)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	011b      	lsls	r3, r3, #4
 8009d76:	4413      	add	r3, r2
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1f2      	bne.n	8009d64 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	bf14      	ite	ne
 8009d84:	2301      	movne	r3, #1
 8009d86:	2300      	moveq	r3, #0
 8009d88:	b2db      	uxtb	r3, r3
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	20000244 	.word	0x20000244

08009d9c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]
 8009daa:	e01f      	b.n	8009dec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009dac:	4a41      	ldr	r2, [pc, #260]	; (8009eb4 <inc_lock+0x118>)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	011b      	lsls	r3, r3, #4
 8009db2:	4413      	add	r3, r2
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d113      	bne.n	8009de6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009dbe:	4a3d      	ldr	r2, [pc, #244]	; (8009eb4 <inc_lock+0x118>)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	011b      	lsls	r3, r3, #4
 8009dc4:	4413      	add	r3, r2
 8009dc6:	3304      	adds	r3, #4
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d109      	bne.n	8009de6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009dd2:	4a38      	ldr	r2, [pc, #224]	; (8009eb4 <inc_lock+0x118>)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	011b      	lsls	r3, r3, #4
 8009dd8:	4413      	add	r3, r2
 8009dda:	3308      	adds	r3, #8
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d006      	beq.n	8009df4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	3301      	adds	r3, #1
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d9dc      	bls.n	8009dac <inc_lock+0x10>
 8009df2:	e000      	b.n	8009df6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009df4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d132      	bne.n	8009e62 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	60fb      	str	r3, [r7, #12]
 8009e00:	e002      	b.n	8009e08 <inc_lock+0x6c>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3301      	adds	r3, #1
 8009e06:	60fb      	str	r3, [r7, #12]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d806      	bhi.n	8009e1c <inc_lock+0x80>
 8009e0e:	4a29      	ldr	r2, [pc, #164]	; (8009eb4 <inc_lock+0x118>)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	011b      	lsls	r3, r3, #4
 8009e14:	4413      	add	r3, r2
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1f2      	bne.n	8009e02 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d101      	bne.n	8009e26 <inc_lock+0x8a>
 8009e22:	2300      	movs	r3, #0
 8009e24:	e040      	b.n	8009ea8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	4922      	ldr	r1, [pc, #136]	; (8009eb4 <inc_lock+0x118>)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	011b      	lsls	r3, r3, #4
 8009e30:	440b      	add	r3, r1
 8009e32:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	689a      	ldr	r2, [r3, #8]
 8009e38:	491e      	ldr	r1, [pc, #120]	; (8009eb4 <inc_lock+0x118>)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	011b      	lsls	r3, r3, #4
 8009e3e:	440b      	add	r3, r1
 8009e40:	3304      	adds	r3, #4
 8009e42:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	695a      	ldr	r2, [r3, #20]
 8009e48:	491a      	ldr	r1, [pc, #104]	; (8009eb4 <inc_lock+0x118>)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	011b      	lsls	r3, r3, #4
 8009e4e:	440b      	add	r3, r1
 8009e50:	3308      	adds	r3, #8
 8009e52:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009e54:	4a17      	ldr	r2, [pc, #92]	; (8009eb4 <inc_lock+0x118>)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	011b      	lsls	r3, r3, #4
 8009e5a:	4413      	add	r3, r2
 8009e5c:	330c      	adds	r3, #12
 8009e5e:	2200      	movs	r2, #0
 8009e60:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d009      	beq.n	8009e7c <inc_lock+0xe0>
 8009e68:	4a12      	ldr	r2, [pc, #72]	; (8009eb4 <inc_lock+0x118>)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	011b      	lsls	r3, r3, #4
 8009e6e:	4413      	add	r3, r2
 8009e70:	330c      	adds	r3, #12
 8009e72:	881b      	ldrh	r3, [r3, #0]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d001      	beq.n	8009e7c <inc_lock+0xe0>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	e015      	b.n	8009ea8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d108      	bne.n	8009e94 <inc_lock+0xf8>
 8009e82:	4a0c      	ldr	r2, [pc, #48]	; (8009eb4 <inc_lock+0x118>)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	011b      	lsls	r3, r3, #4
 8009e88:	4413      	add	r3, r2
 8009e8a:	330c      	adds	r3, #12
 8009e8c:	881b      	ldrh	r3, [r3, #0]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	e001      	b.n	8009e98 <inc_lock+0xfc>
 8009e94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e98:	4906      	ldr	r1, [pc, #24]	; (8009eb4 <inc_lock+0x118>)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	011b      	lsls	r3, r3, #4
 8009e9e:	440b      	add	r3, r1
 8009ea0:	330c      	adds	r3, #12
 8009ea2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	3301      	adds	r3, #1
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	20000244 	.word	0x20000244

08009eb8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	607b      	str	r3, [r7, #4]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d825      	bhi.n	8009f18 <dec_lock+0x60>
		n = Files[i].ctr;
 8009ecc:	4a17      	ldr	r2, [pc, #92]	; (8009f2c <dec_lock+0x74>)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	011b      	lsls	r3, r3, #4
 8009ed2:	4413      	add	r3, r2
 8009ed4:	330c      	adds	r3, #12
 8009ed6:	881b      	ldrh	r3, [r3, #0]
 8009ed8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009eda:	89fb      	ldrh	r3, [r7, #14]
 8009edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ee0:	d101      	bne.n	8009ee6 <dec_lock+0x2e>
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009ee6:	89fb      	ldrh	r3, [r7, #14]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <dec_lock+0x3a>
 8009eec:	89fb      	ldrh	r3, [r7, #14]
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009ef2:	4a0e      	ldr	r2, [pc, #56]	; (8009f2c <dec_lock+0x74>)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	011b      	lsls	r3, r3, #4
 8009ef8:	4413      	add	r3, r2
 8009efa:	330c      	adds	r3, #12
 8009efc:	89fa      	ldrh	r2, [r7, #14]
 8009efe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009f00:	89fb      	ldrh	r3, [r7, #14]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d105      	bne.n	8009f12 <dec_lock+0x5a>
 8009f06:	4a09      	ldr	r2, [pc, #36]	; (8009f2c <dec_lock+0x74>)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	011b      	lsls	r3, r3, #4
 8009f0c:	4413      	add	r3, r2
 8009f0e:	2200      	movs	r2, #0
 8009f10:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009f12:	2300      	movs	r3, #0
 8009f14:	737b      	strb	r3, [r7, #13]
 8009f16:	e001      	b.n	8009f1c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009f18:	2302      	movs	r3, #2
 8009f1a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009f1c:	7b7b      	ldrb	r3, [r7, #13]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3714      	adds	r7, #20
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	20000244 	.word	0x20000244

08009f30 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009f38:	2300      	movs	r3, #0
 8009f3a:	60fb      	str	r3, [r7, #12]
 8009f3c:	e010      	b.n	8009f60 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009f3e:	4a0d      	ldr	r2, [pc, #52]	; (8009f74 <clear_lock+0x44>)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	011b      	lsls	r3, r3, #4
 8009f44:	4413      	add	r3, r2
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d105      	bne.n	8009f5a <clear_lock+0x2a>
 8009f4e:	4a09      	ldr	r2, [pc, #36]	; (8009f74 <clear_lock+0x44>)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	011b      	lsls	r3, r3, #4
 8009f54:	4413      	add	r3, r2
 8009f56:	2200      	movs	r2, #0
 8009f58:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	60fb      	str	r3, [r7, #12]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d9eb      	bls.n	8009f3e <clear_lock+0xe>
	}
}
 8009f66:	bf00      	nop
 8009f68:	3714      	adds	r7, #20
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	20000244 	.word	0x20000244

08009f78 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009f80:	2300      	movs	r3, #0
 8009f82:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	78db      	ldrb	r3, [r3, #3]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d034      	beq.n	8009ff6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f90:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	7858      	ldrb	r0, [r3, #1]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	f7ff fd40 	bl	8009a24 <disk_write>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d002      	beq.n	8009fb0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	73fb      	strb	r3, [r7, #15]
 8009fae:	e022      	b.n	8009ff6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fba:	697a      	ldr	r2, [r7, #20]
 8009fbc:	1ad2      	subs	r2, r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d217      	bcs.n	8009ff6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	789b      	ldrb	r3, [r3, #2]
 8009fca:	613b      	str	r3, [r7, #16]
 8009fcc:	e010      	b.n	8009ff0 <sync_window+0x78>
					wsect += fs->fsize;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd2:	697a      	ldr	r2, [r7, #20]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	7858      	ldrb	r0, [r3, #1]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	697a      	ldr	r2, [r7, #20]
 8009fe6:	f7ff fd1d 	bl	8009a24 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	3b01      	subs	r3, #1
 8009fee:	613b      	str	r3, [r7, #16]
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d8eb      	bhi.n	8009fce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3718      	adds	r7, #24
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b084      	sub	sp, #16
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a00a:	2300      	movs	r3, #0
 800a00c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	429a      	cmp	r2, r3
 800a016:	d01b      	beq.n	800a050 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f7ff ffad 	bl	8009f78 <sync_window>
 800a01e:	4603      	mov	r3, r0
 800a020:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a022:	7bfb      	ldrb	r3, [r7, #15]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d113      	bne.n	800a050 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	7858      	ldrb	r0, [r3, #1]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a032:	2301      	movs	r3, #1
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	f7ff fcd5 	bl	80099e4 <disk_read>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d004      	beq.n	800a04a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a040:	f04f 33ff 	mov.w	r3, #4294967295
 800a044:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a046:	2301      	movs	r3, #1
 800a048:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	683a      	ldr	r2, [r7, #0]
 800a04e:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800a050:	7bfb      	ldrb	r3, [r7, #15]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
	...

0800a05c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f7ff ff87 	bl	8009f78 <sync_window>
 800a06a:	4603      	mov	r3, r0
 800a06c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a06e:	7bfb      	ldrb	r3, [r7, #15]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d159      	bne.n	800a128 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	2b03      	cmp	r3, #3
 800a07a:	d149      	bne.n	800a110 <sync_fs+0xb4>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	791b      	ldrb	r3, [r3, #4]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d145      	bne.n	800a110 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	899b      	ldrh	r3, [r3, #12]
 800a08e:	461a      	mov	r2, r3
 800a090:	2100      	movs	r1, #0
 800a092:	f7ff fda8 	bl	8009be6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	333c      	adds	r3, #60	; 0x3c
 800a09a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a09e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7ff fd37 	bl	8009b16 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	333c      	adds	r3, #60	; 0x3c
 800a0ac:	4921      	ldr	r1, [pc, #132]	; (800a134 <sync_fs+0xd8>)
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff fd4c 	bl	8009b4c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	333c      	adds	r3, #60	; 0x3c
 800a0b8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a0bc:	491e      	ldr	r1, [pc, #120]	; (800a138 <sync_fs+0xdc>)
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7ff fd44 	bl	8009b4c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	333c      	adds	r3, #60	; 0x3c
 800a0c8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	699b      	ldr	r3, [r3, #24]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	f7ff fd3a 	bl	8009b4c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	333c      	adds	r3, #60	; 0x3c
 800a0dc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	695b      	ldr	r3, [r3, #20]
 800a0e4:	4619      	mov	r1, r3
 800a0e6:	4610      	mov	r0, r2
 800a0e8:	f7ff fd30 	bl	8009b4c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f0:	1c5a      	adds	r2, r3, #1
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	7858      	ldrb	r0, [r3, #1]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a104:	2301      	movs	r3, #1
 800a106:	f7ff fc8d 	bl	8009a24 <disk_write>
			fs->fsi_flag = 0;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	785b      	ldrb	r3, [r3, #1]
 800a114:	2200      	movs	r2, #0
 800a116:	2100      	movs	r1, #0
 800a118:	4618      	mov	r0, r3
 800a11a:	f7ff fca3 	bl	8009a64 <disk_ioctl>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d001      	beq.n	800a128 <sync_fs+0xcc>
 800a124:	2301      	movs	r3, #1
 800a126:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a128:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3710      	adds	r7, #16
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	41615252 	.word	0x41615252
 800a138:	61417272 	.word	0x61417272

0800a13c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	3b02      	subs	r3, #2
 800a14a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a1b      	ldr	r3, [r3, #32]
 800a150:	3b02      	subs	r3, #2
 800a152:	683a      	ldr	r2, [r7, #0]
 800a154:	429a      	cmp	r2, r3
 800a156:	d301      	bcc.n	800a15c <clust2sect+0x20>
 800a158:	2300      	movs	r3, #0
 800a15a:	e008      	b.n	800a16e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	895b      	ldrh	r3, [r3, #10]
 800a160:	461a      	mov	r2, r3
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	fb03 f202 	mul.w	r2, r3, r2
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a16c:	4413      	add	r3, r2
}
 800a16e:	4618      	mov	r0, r3
 800a170:	370c      	adds	r7, #12
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr

0800a17a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b086      	sub	sp, #24
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d904      	bls.n	800a19a <get_fat+0x20>
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	6a1b      	ldr	r3, [r3, #32]
 800a194:	683a      	ldr	r2, [r7, #0]
 800a196:	429a      	cmp	r2, r3
 800a198:	d302      	bcc.n	800a1a0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a19a:	2301      	movs	r3, #1
 800a19c:	617b      	str	r3, [r7, #20]
 800a19e:	e0b7      	b.n	800a310 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	781b      	ldrb	r3, [r3, #0]
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d05a      	beq.n	800a264 <get_fat+0xea>
 800a1ae:	2b03      	cmp	r3, #3
 800a1b0:	d07d      	beq.n	800a2ae <get_fat+0x134>
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	f040 80a2 	bne.w	800a2fc <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	60fb      	str	r3, [r7, #12]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	085b      	lsrs	r3, r3, #1
 800a1c0:	68fa      	ldr	r2, [r7, #12]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	899b      	ldrh	r3, [r3, #12]
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1d6:	4413      	add	r3, r2
 800a1d8:	4619      	mov	r1, r3
 800a1da:	6938      	ldr	r0, [r7, #16]
 800a1dc:	f7ff ff10 	bl	800a000 <move_window>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	f040 808d 	bne.w	800a302 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	1c5a      	adds	r2, r3, #1
 800a1ec:	60fa      	str	r2, [r7, #12]
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	8992      	ldrh	r2, [r2, #12]
 800a1f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1f6:	fb02 f201 	mul.w	r2, r2, r1
 800a1fa:	1a9b      	subs	r3, r3, r2
 800a1fc:	693a      	ldr	r2, [r7, #16]
 800a1fe:	4413      	add	r3, r2
 800a200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a204:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	899b      	ldrh	r3, [r3, #12]
 800a20e:	4619      	mov	r1, r3
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	fbb3 f3f1 	udiv	r3, r3, r1
 800a216:	4413      	add	r3, r2
 800a218:	4619      	mov	r1, r3
 800a21a:	6938      	ldr	r0, [r7, #16]
 800a21c:	f7ff fef0 	bl	800a000 <move_window>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d16f      	bne.n	800a306 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	899b      	ldrh	r3, [r3, #12]
 800a22a:	461a      	mov	r2, r3
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a232:	fb02 f201 	mul.w	r2, r2, r1
 800a236:	1a9b      	subs	r3, r3, r2
 800a238:	693a      	ldr	r2, [r7, #16]
 800a23a:	4413      	add	r3, r2
 800a23c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a240:	021b      	lsls	r3, r3, #8
 800a242:	461a      	mov	r2, r3
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	4313      	orrs	r3, r2
 800a248:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	f003 0301 	and.w	r3, r3, #1
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <get_fat+0xe0>
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	091b      	lsrs	r3, r3, #4
 800a258:	e002      	b.n	800a260 <get_fat+0xe6>
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a260:	617b      	str	r3, [r7, #20]
			break;
 800a262:	e055      	b.n	800a310 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	899b      	ldrh	r3, [r3, #12]
 800a26c:	085b      	lsrs	r3, r3, #1
 800a26e:	b29b      	uxth	r3, r3
 800a270:	4619      	mov	r1, r3
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	fbb3 f3f1 	udiv	r3, r3, r1
 800a278:	4413      	add	r3, r2
 800a27a:	4619      	mov	r1, r3
 800a27c:	6938      	ldr	r0, [r7, #16]
 800a27e:	f7ff febf 	bl	800a000 <move_window>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d140      	bne.n	800a30a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	005b      	lsls	r3, r3, #1
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	8992      	ldrh	r2, [r2, #12]
 800a296:	fbb3 f0f2 	udiv	r0, r3, r2
 800a29a:	fb02 f200 	mul.w	r2, r2, r0
 800a29e:	1a9b      	subs	r3, r3, r2
 800a2a0:	440b      	add	r3, r1
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f7ff fbfc 	bl	8009aa0 <ld_word>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	617b      	str	r3, [r7, #20]
			break;
 800a2ac:	e030      	b.n	800a310 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	899b      	ldrh	r3, [r3, #12]
 800a2b6:	089b      	lsrs	r3, r3, #2
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2c2:	4413      	add	r3, r2
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	6938      	ldr	r0, [r7, #16]
 800a2c8:	f7ff fe9a 	bl	800a000 <move_window>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d11d      	bne.n	800a30e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	693a      	ldr	r2, [r7, #16]
 800a2de:	8992      	ldrh	r2, [r2, #12]
 800a2e0:	fbb3 f0f2 	udiv	r0, r3, r2
 800a2e4:	fb02 f200 	mul.w	r2, r2, r0
 800a2e8:	1a9b      	subs	r3, r3, r2
 800a2ea:	440b      	add	r3, r1
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7ff fbef 	bl	8009ad0 <ld_dword>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a2f8:	617b      	str	r3, [r7, #20]
			break;
 800a2fa:	e009      	b.n	800a310 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	617b      	str	r3, [r7, #20]
 800a300:	e006      	b.n	800a310 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a302:	bf00      	nop
 800a304:	e004      	b.n	800a310 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a306:	bf00      	nop
 800a308:	e002      	b.n	800a310 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a30a:	bf00      	nop
 800a30c:	e000      	b.n	800a310 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a30e:	bf00      	nop
		}
	}

	return val;
 800a310:	697b      	ldr	r3, [r7, #20]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3718      	adds	r7, #24
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a31a:	b590      	push	{r4, r7, lr}
 800a31c:	b089      	sub	sp, #36	; 0x24
 800a31e:	af00      	add	r7, sp, #0
 800a320:	60f8      	str	r0, [r7, #12]
 800a322:	60b9      	str	r1, [r7, #8]
 800a324:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a326:	2302      	movs	r3, #2
 800a328:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	f240 8106 	bls.w	800a53e <put_fat+0x224>
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6a1b      	ldr	r3, [r3, #32]
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	429a      	cmp	r2, r3
 800a33a:	f080 8100 	bcs.w	800a53e <put_fat+0x224>
		switch (fs->fs_type) {
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	2b02      	cmp	r3, #2
 800a344:	f000 8088 	beq.w	800a458 <put_fat+0x13e>
 800a348:	2b03      	cmp	r3, #3
 800a34a:	f000 80b0 	beq.w	800a4ae <put_fat+0x194>
 800a34e:	2b01      	cmp	r3, #1
 800a350:	f040 80f5 	bne.w	800a53e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	61bb      	str	r3, [r7, #24]
 800a358:	69bb      	ldr	r3, [r7, #24]
 800a35a:	085b      	lsrs	r3, r3, #1
 800a35c:	69ba      	ldr	r2, [r7, #24]
 800a35e:	4413      	add	r3, r2
 800a360:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	899b      	ldrh	r3, [r3, #12]
 800a36a:	4619      	mov	r1, r3
 800a36c:	69bb      	ldr	r3, [r7, #24]
 800a36e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a372:	4413      	add	r3, r2
 800a374:	4619      	mov	r1, r3
 800a376:	68f8      	ldr	r0, [r7, #12]
 800a378:	f7ff fe42 	bl	800a000 <move_window>
 800a37c:	4603      	mov	r3, r0
 800a37e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a380:	7ffb      	ldrb	r3, [r7, #31]
 800a382:	2b00      	cmp	r3, #0
 800a384:	f040 80d4 	bne.w	800a530 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	1c5a      	adds	r2, r3, #1
 800a392:	61ba      	str	r2, [r7, #24]
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	8992      	ldrh	r2, [r2, #12]
 800a398:	fbb3 f0f2 	udiv	r0, r3, r2
 800a39c:	fb02 f200 	mul.w	r2, r2, r0
 800a3a0:	1a9b      	subs	r3, r3, r2
 800a3a2:	440b      	add	r3, r1
 800a3a4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	f003 0301 	and.w	r3, r3, #1
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d00d      	beq.n	800a3cc <put_fat+0xb2>
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	b25b      	sxtb	r3, r3
 800a3b6:	f003 030f 	and.w	r3, r3, #15
 800a3ba:	b25a      	sxtb	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	011b      	lsls	r3, r3, #4
 800a3c2:	b25b      	sxtb	r3, r3
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	b25b      	sxtb	r3, r3
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	e001      	b.n	800a3d0 <put_fat+0xb6>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	697a      	ldr	r2, [r7, #20]
 800a3d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	899b      	ldrh	r3, [r3, #12]
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3ea:	4413      	add	r3, r2
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f7ff fe06 	bl	800a000 <move_window>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3f8:	7ffb      	ldrb	r3, [r7, #31]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	f040 809a 	bne.w	800a534 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	899b      	ldrh	r3, [r3, #12]
 800a40a:	461a      	mov	r2, r3
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a412:	fb02 f200 	mul.w	r2, r2, r0
 800a416:	1a9b      	subs	r3, r3, r2
 800a418:	440b      	add	r3, r1
 800a41a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	2b00      	cmp	r3, #0
 800a424:	d003      	beq.n	800a42e <put_fat+0x114>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	091b      	lsrs	r3, r3, #4
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	e00e      	b.n	800a44c <put_fat+0x132>
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	b25b      	sxtb	r3, r3
 800a434:	f023 030f 	bic.w	r3, r3, #15
 800a438:	b25a      	sxtb	r2, r3
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	0a1b      	lsrs	r3, r3, #8
 800a43e:	b25b      	sxtb	r3, r3
 800a440:	f003 030f 	and.w	r3, r3, #15
 800a444:	b25b      	sxtb	r3, r3
 800a446:	4313      	orrs	r3, r2
 800a448:	b25b      	sxtb	r3, r3
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2201      	movs	r2, #1
 800a454:	70da      	strb	r2, [r3, #3]
			break;
 800a456:	e072      	b.n	800a53e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	899b      	ldrh	r3, [r3, #12]
 800a460:	085b      	lsrs	r3, r3, #1
 800a462:	b29b      	uxth	r3, r3
 800a464:	4619      	mov	r1, r3
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	fbb3 f3f1 	udiv	r3, r3, r1
 800a46c:	4413      	add	r3, r2
 800a46e:	4619      	mov	r1, r3
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f7ff fdc5 	bl	800a000 <move_window>
 800a476:	4603      	mov	r3, r0
 800a478:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a47a:	7ffb      	ldrb	r3, [r7, #31]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d15b      	bne.n	800a538 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	005b      	lsls	r3, r3, #1
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	8992      	ldrh	r2, [r2, #12]
 800a48e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a492:	fb02 f200 	mul.w	r2, r2, r0
 800a496:	1a9b      	subs	r3, r3, r2
 800a498:	440b      	add	r3, r1
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	b292      	uxth	r2, r2
 800a49e:	4611      	mov	r1, r2
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7ff fb38 	bl	8009b16 <st_word>
			fs->wflag = 1;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	70da      	strb	r2, [r3, #3]
			break;
 800a4ac:	e047      	b.n	800a53e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	899b      	ldrh	r3, [r3, #12]
 800a4b6:	089b      	lsrs	r3, r3, #2
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	fbb3 f3f1 	udiv	r3, r3, r1
 800a4c2:	4413      	add	r3, r2
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f7ff fd9a 	bl	800a000 <move_window>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4d0:	7ffb      	ldrb	r3, [r7, #31]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d132      	bne.n	800a53c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	68fa      	ldr	r2, [r7, #12]
 800a4e8:	8992      	ldrh	r2, [r2, #12]
 800a4ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800a4ee:	fb02 f200 	mul.w	r2, r2, r0
 800a4f2:	1a9b      	subs	r3, r3, r2
 800a4f4:	440b      	add	r3, r1
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7ff faea 	bl	8009ad0 <ld_dword>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a502:	4323      	orrs	r3, r4
 800a504:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	68fa      	ldr	r2, [r7, #12]
 800a512:	8992      	ldrh	r2, [r2, #12]
 800a514:	fbb3 f0f2 	udiv	r0, r3, r2
 800a518:	fb02 f200 	mul.w	r2, r2, r0
 800a51c:	1a9b      	subs	r3, r3, r2
 800a51e:	440b      	add	r3, r1
 800a520:	6879      	ldr	r1, [r7, #4]
 800a522:	4618      	mov	r0, r3
 800a524:	f7ff fb12 	bl	8009b4c <st_dword>
			fs->wflag = 1;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2201      	movs	r2, #1
 800a52c:	70da      	strb	r2, [r3, #3]
			break;
 800a52e:	e006      	b.n	800a53e <put_fat+0x224>
			if (res != FR_OK) break;
 800a530:	bf00      	nop
 800a532:	e004      	b.n	800a53e <put_fat+0x224>
			if (res != FR_OK) break;
 800a534:	bf00      	nop
 800a536:	e002      	b.n	800a53e <put_fat+0x224>
			if (res != FR_OK) break;
 800a538:	bf00      	nop
 800a53a:	e000      	b.n	800a53e <put_fat+0x224>
			if (res != FR_OK) break;
 800a53c:	bf00      	nop
		}
	}
	return res;
 800a53e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a540:	4618      	mov	r0, r3
 800a542:	3724      	adds	r7, #36	; 0x24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd90      	pop	{r4, r7, pc}

0800a548 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b088      	sub	sp, #32
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a554:	2300      	movs	r3, #0
 800a556:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d904      	bls.n	800a56e <remove_chain+0x26>
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	6a1b      	ldr	r3, [r3, #32]
 800a568:	68ba      	ldr	r2, [r7, #8]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d301      	bcc.n	800a572 <remove_chain+0x2a>
 800a56e:	2302      	movs	r3, #2
 800a570:	e04b      	b.n	800a60a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00c      	beq.n	800a592 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a578:	f04f 32ff 	mov.w	r2, #4294967295
 800a57c:	6879      	ldr	r1, [r7, #4]
 800a57e:	69b8      	ldr	r0, [r7, #24]
 800a580:	f7ff fecb 	bl	800a31a <put_fat>
 800a584:	4603      	mov	r3, r0
 800a586:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a588:	7ffb      	ldrb	r3, [r7, #31]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <remove_chain+0x4a>
 800a58e:	7ffb      	ldrb	r3, [r7, #31]
 800a590:	e03b      	b.n	800a60a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a592:	68b9      	ldr	r1, [r7, #8]
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f7ff fdf0 	bl	800a17a <get_fat>
 800a59a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d031      	beq.n	800a606 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d101      	bne.n	800a5ac <remove_chain+0x64>
 800a5a8:	2302      	movs	r3, #2
 800a5aa:	e02e      	b.n	800a60a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5b2:	d101      	bne.n	800a5b8 <remove_chain+0x70>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e028      	b.n	800a60a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	68b9      	ldr	r1, [r7, #8]
 800a5bc:	69b8      	ldr	r0, [r7, #24]
 800a5be:	f7ff feac 	bl	800a31a <put_fat>
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a5c6:	7ffb      	ldrb	r3, [r7, #31]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d001      	beq.n	800a5d0 <remove_chain+0x88>
 800a5cc:	7ffb      	ldrb	r3, [r7, #31]
 800a5ce:	e01c      	b.n	800a60a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	699a      	ldr	r2, [r3, #24]
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	6a1b      	ldr	r3, [r3, #32]
 800a5d8:	3b02      	subs	r3, #2
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d20b      	bcs.n	800a5f6 <remove_chain+0xae>
			fs->free_clst++;
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	699b      	ldr	r3, [r3, #24]
 800a5e2:	1c5a      	adds	r2, r3, #1
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	791b      	ldrb	r3, [r3, #4]
 800a5ec:	f043 0301 	orr.w	r3, r3, #1
 800a5f0:	b2da      	uxtb	r2, r3
 800a5f2:	69bb      	ldr	r3, [r7, #24]
 800a5f4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	6a1b      	ldr	r3, [r3, #32]
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	429a      	cmp	r2, r3
 800a602:	d3c6      	bcc.n	800a592 <remove_chain+0x4a>
 800a604:	e000      	b.n	800a608 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a606:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3720      	adds	r7, #32
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b088      	sub	sp, #32
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10d      	bne.n	800a644 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	695b      	ldr	r3, [r3, #20]
 800a62c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d004      	beq.n	800a63e <create_chain+0x2c>
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	6a1b      	ldr	r3, [r3, #32]
 800a638:	69ba      	ldr	r2, [r7, #24]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d31b      	bcc.n	800a676 <create_chain+0x64>
 800a63e:	2301      	movs	r3, #1
 800a640:	61bb      	str	r3, [r7, #24]
 800a642:	e018      	b.n	800a676 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f7ff fd97 	bl	800a17a <get_fat>
 800a64c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2b01      	cmp	r3, #1
 800a652:	d801      	bhi.n	800a658 <create_chain+0x46>
 800a654:	2301      	movs	r3, #1
 800a656:	e070      	b.n	800a73a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a65e:	d101      	bne.n	800a664 <create_chain+0x52>
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	e06a      	b.n	800a73a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	6a1b      	ldr	r3, [r3, #32]
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d201      	bcs.n	800a672 <create_chain+0x60>
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	e063      	b.n	800a73a <create_chain+0x128>
		scl = clst;
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a67a:	69fb      	ldr	r3, [r7, #28]
 800a67c:	3301      	adds	r3, #1
 800a67e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	6a1b      	ldr	r3, [r3, #32]
 800a684:	69fa      	ldr	r2, [r7, #28]
 800a686:	429a      	cmp	r2, r3
 800a688:	d307      	bcc.n	800a69a <create_chain+0x88>
				ncl = 2;
 800a68a:	2302      	movs	r3, #2
 800a68c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a68e:	69fa      	ldr	r2, [r7, #28]
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	429a      	cmp	r2, r3
 800a694:	d901      	bls.n	800a69a <create_chain+0x88>
 800a696:	2300      	movs	r3, #0
 800a698:	e04f      	b.n	800a73a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a69a:	69f9      	ldr	r1, [r7, #28]
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f7ff fd6c 	bl	800a17a <get_fat>
 800a6a2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d00e      	beq.n	800a6c8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d003      	beq.n	800a6b8 <create_chain+0xa6>
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b6:	d101      	bne.n	800a6bc <create_chain+0xaa>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	e03e      	b.n	800a73a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a6bc:	69fa      	ldr	r2, [r7, #28]
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d1da      	bne.n	800a67a <create_chain+0x68>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	e038      	b.n	800a73a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a6c8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a6ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ce:	69f9      	ldr	r1, [r7, #28]
 800a6d0:	6938      	ldr	r0, [r7, #16]
 800a6d2:	f7ff fe22 	bl	800a31a <put_fat>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a6da:	7dfb      	ldrb	r3, [r7, #23]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d109      	bne.n	800a6f4 <create_chain+0xe2>
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d006      	beq.n	800a6f4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a6e6:	69fa      	ldr	r2, [r7, #28]
 800a6e8:	6839      	ldr	r1, [r7, #0]
 800a6ea:	6938      	ldr	r0, [r7, #16]
 800a6ec:	f7ff fe15 	bl	800a31a <put_fat>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a6f4:	7dfb      	ldrb	r3, [r7, #23]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d116      	bne.n	800a728 <create_chain+0x116>
		fs->last_clst = ncl;
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	69fa      	ldr	r2, [r7, #28]
 800a6fe:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	699a      	ldr	r2, [r3, #24]
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	6a1b      	ldr	r3, [r3, #32]
 800a708:	3b02      	subs	r3, #2
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d804      	bhi.n	800a718 <create_chain+0x106>
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	699b      	ldr	r3, [r3, #24]
 800a712:	1e5a      	subs	r2, r3, #1
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	791b      	ldrb	r3, [r3, #4]
 800a71c:	f043 0301 	orr.w	r3, r3, #1
 800a720:	b2da      	uxtb	r2, r3
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	711a      	strb	r2, [r3, #4]
 800a726:	e007      	b.n	800a738 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a728:	7dfb      	ldrb	r3, [r7, #23]
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d102      	bne.n	800a734 <create_chain+0x122>
 800a72e:	f04f 33ff 	mov.w	r3, #4294967295
 800a732:	e000      	b.n	800a736 <create_chain+0x124>
 800a734:	2301      	movs	r3, #1
 800a736:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a738:	69fb      	ldr	r3, [r7, #28]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3720      	adds	r7, #32
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a742:	b480      	push	{r7}
 800a744:	b087      	sub	sp, #28
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
 800a74a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a756:	3304      	adds	r3, #4
 800a758:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	899b      	ldrh	r3, [r3, #12]
 800a75e:	461a      	mov	r2, r3
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	fbb3 f3f2 	udiv	r3, r3, r2
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	8952      	ldrh	r2, [r2, #10]
 800a76a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a76e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	1d1a      	adds	r2, r3, #4
 800a774:	613a      	str	r2, [r7, #16]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d101      	bne.n	800a784 <clmt_clust+0x42>
 800a780:	2300      	movs	r3, #0
 800a782:	e010      	b.n	800a7a6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d307      	bcc.n	800a79c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a78c:	697a      	ldr	r2, [r7, #20]
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	1ad3      	subs	r3, r2, r3
 800a792:	617b      	str	r3, [r7, #20]
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	3304      	adds	r3, #4
 800a798:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a79a:	e7e9      	b.n	800a770 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a79c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	681a      	ldr	r2, [r3, #0]
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	4413      	add	r3, r2
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	371c      	adds	r7, #28
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr

0800a7b2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b086      	sub	sp, #24
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
 800a7ba:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7c8:	d204      	bcs.n	800a7d4 <dir_sdi+0x22>
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	f003 031f 	and.w	r3, r3, #31
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d001      	beq.n	800a7d8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	e071      	b.n	800a8bc <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d106      	bne.n	800a7f8 <dir_sdi+0x46>
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	2b02      	cmp	r3, #2
 800a7f0:	d902      	bls.n	800a7f8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d10c      	bne.n	800a818 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	095b      	lsrs	r3, r3, #5
 800a802:	693a      	ldr	r2, [r7, #16]
 800a804:	8912      	ldrh	r2, [r2, #8]
 800a806:	4293      	cmp	r3, r2
 800a808:	d301      	bcc.n	800a80e <dir_sdi+0x5c>
 800a80a:	2302      	movs	r3, #2
 800a80c:	e056      	b.n	800a8bc <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	61da      	str	r2, [r3, #28]
 800a816:	e02d      	b.n	800a874 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	895b      	ldrh	r3, [r3, #10]
 800a81c:	461a      	mov	r2, r3
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	899b      	ldrh	r3, [r3, #12]
 800a822:	fb03 f302 	mul.w	r3, r3, r2
 800a826:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a828:	e019      	b.n	800a85e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6979      	ldr	r1, [r7, #20]
 800a82e:	4618      	mov	r0, r3
 800a830:	f7ff fca3 	bl	800a17a <get_fat>
 800a834:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83c:	d101      	bne.n	800a842 <dir_sdi+0x90>
 800a83e:	2301      	movs	r3, #1
 800a840:	e03c      	b.n	800a8bc <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d904      	bls.n	800a852 <dir_sdi+0xa0>
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	6a1b      	ldr	r3, [r3, #32]
 800a84c:	697a      	ldr	r2, [r7, #20]
 800a84e:	429a      	cmp	r2, r3
 800a850:	d301      	bcc.n	800a856 <dir_sdi+0xa4>
 800a852:	2302      	movs	r3, #2
 800a854:	e032      	b.n	800a8bc <dir_sdi+0x10a>
			ofs -= csz;
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	1ad3      	subs	r3, r2, r3
 800a85c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a85e:	683a      	ldr	r2, [r7, #0]
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	429a      	cmp	r2, r3
 800a864:	d2e1      	bcs.n	800a82a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a866:	6979      	ldr	r1, [r7, #20]
 800a868:	6938      	ldr	r0, [r7, #16]
 800a86a:	f7ff fc67 	bl	800a13c <clust2sect>
 800a86e:	4602      	mov	r2, r0
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	697a      	ldr	r2, [r7, #20]
 800a878:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d101      	bne.n	800a886 <dir_sdi+0xd4>
 800a882:	2302      	movs	r3, #2
 800a884:	e01a      	b.n	800a8bc <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	69da      	ldr	r2, [r3, #28]
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	899b      	ldrh	r3, [r3, #12]
 800a88e:	4619      	mov	r1, r3
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	fbb3 f3f1 	udiv	r3, r3, r1
 800a896:	441a      	add	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	899b      	ldrh	r3, [r3, #12]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8ae:	fb02 f200 	mul.w	r2, r2, r0
 800a8b2:	1a9b      	subs	r3, r3, r2
 800a8b4:	18ca      	adds	r2, r1, r3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3718      	adds	r7, #24
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b086      	sub	sp, #24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	695b      	ldr	r3, [r3, #20]
 800a8d8:	3320      	adds	r3, #32
 800a8da:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	69db      	ldr	r3, [r3, #28]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d003      	beq.n	800a8ec <dir_next+0x28>
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a8ea:	d301      	bcc.n	800a8f0 <dir_next+0x2c>
 800a8ec:	2304      	movs	r3, #4
 800a8ee:	e0bb      	b.n	800aa68 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	899b      	ldrh	r3, [r3, #12]
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a8fc:	fb02 f201 	mul.w	r2, r2, r1
 800a900:	1a9b      	subs	r3, r3, r2
 800a902:	2b00      	cmp	r3, #0
 800a904:	f040 809d 	bne.w	800aa42 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	69db      	ldr	r3, [r3, #28]
 800a90c:	1c5a      	adds	r2, r3, #1
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d10b      	bne.n	800a932 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	095b      	lsrs	r3, r3, #5
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	8912      	ldrh	r2, [r2, #8]
 800a922:	4293      	cmp	r3, r2
 800a924:	f0c0 808d 	bcc.w	800aa42 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	61da      	str	r2, [r3, #28]
 800a92e:	2304      	movs	r3, #4
 800a930:	e09a      	b.n	800aa68 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	899b      	ldrh	r3, [r3, #12]
 800a936:	461a      	mov	r2, r3
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	8952      	ldrh	r2, [r2, #10]
 800a942:	3a01      	subs	r2, #1
 800a944:	4013      	ands	r3, r2
 800a946:	2b00      	cmp	r3, #0
 800a948:	d17b      	bne.n	800aa42 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	699b      	ldr	r3, [r3, #24]
 800a950:	4619      	mov	r1, r3
 800a952:	4610      	mov	r0, r2
 800a954:	f7ff fc11 	bl	800a17a <get_fat>
 800a958:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d801      	bhi.n	800a964 <dir_next+0xa0>
 800a960:	2302      	movs	r3, #2
 800a962:	e081      	b.n	800aa68 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a96a:	d101      	bne.n	800a970 <dir_next+0xac>
 800a96c:	2301      	movs	r3, #1
 800a96e:	e07b      	b.n	800aa68 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6a1b      	ldr	r3, [r3, #32]
 800a974:	697a      	ldr	r2, [r7, #20]
 800a976:	429a      	cmp	r2, r3
 800a978:	d359      	bcc.n	800aa2e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d104      	bne.n	800a98a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	61da      	str	r2, [r3, #28]
 800a986:	2304      	movs	r3, #4
 800a988:	e06e      	b.n	800aa68 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	699b      	ldr	r3, [r3, #24]
 800a990:	4619      	mov	r1, r3
 800a992:	4610      	mov	r0, r2
 800a994:	f7ff fe3d 	bl	800a612 <create_chain>
 800a998:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d101      	bne.n	800a9a4 <dir_next+0xe0>
 800a9a0:	2307      	movs	r3, #7
 800a9a2:	e061      	b.n	800aa68 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d101      	bne.n	800a9ae <dir_next+0xea>
 800a9aa:	2302      	movs	r3, #2
 800a9ac:	e05c      	b.n	800aa68 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b4:	d101      	bne.n	800a9ba <dir_next+0xf6>
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e056      	b.n	800aa68 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f7ff fadc 	bl	8009f78 <sync_window>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d001      	beq.n	800a9ca <dir_next+0x106>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e04e      	b.n	800aa68 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	899b      	ldrh	r3, [r3, #12]
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	f7ff f905 	bl	8009be6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a9dc:	2300      	movs	r3, #0
 800a9de:	613b      	str	r3, [r7, #16]
 800a9e0:	6979      	ldr	r1, [r7, #20]
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f7ff fbaa 	bl	800a13c <clust2sect>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	639a      	str	r2, [r3, #56]	; 0x38
 800a9ee:	e012      	b.n	800aa16 <dir_next+0x152>
						fs->wflag = 1;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f7ff fabe 	bl	8009f78 <sync_window>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d001      	beq.n	800aa06 <dir_next+0x142>
 800aa02:	2301      	movs	r3, #1
 800aa04:	e030      	b.n	800aa68 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	613b      	str	r3, [r7, #16]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa10:	1c5a      	adds	r2, r3, #1
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	639a      	str	r2, [r3, #56]	; 0x38
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	895b      	ldrh	r3, [r3, #10]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d3e6      	bcc.n	800a9f0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	1ad2      	subs	r2, r2, r3
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	697a      	ldr	r2, [r7, #20]
 800aa32:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aa34:	6979      	ldr	r1, [r7, #20]
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f7ff fb80 	bl	800a13c <clust2sect>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	68ba      	ldr	r2, [r7, #8]
 800aa46:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	899b      	ldrh	r3, [r3, #12]
 800aa52:	461a      	mov	r2, r3
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa5a:	fb02 f200 	mul.w	r2, r2, r0
 800aa5e:	1a9b      	subs	r3, r3, r2
 800aa60:	18ca      	adds	r2, r1, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aa66:	2300      	movs	r3, #0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3718      	adds	r7, #24
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aa80:	2100      	movs	r1, #0
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f7ff fe95 	bl	800a7b2 <dir_sdi>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aa8c:	7dfb      	ldrb	r3, [r7, #23]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d12b      	bne.n	800aaea <dir_alloc+0x7a>
		n = 0;
 800aa92:	2300      	movs	r3, #0
 800aa94:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	69db      	ldr	r3, [r3, #28]
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f7ff faaf 	bl	800a000 <move_window>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aaa6:	7dfb      	ldrb	r3, [r7, #23]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d11d      	bne.n	800aae8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6a1b      	ldr	r3, [r3, #32]
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	2be5      	cmp	r3, #229	; 0xe5
 800aab4:	d004      	beq.n	800aac0 <dir_alloc+0x50>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6a1b      	ldr	r3, [r3, #32]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d107      	bne.n	800aad0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	3301      	adds	r3, #1
 800aac4:	613b      	str	r3, [r7, #16]
 800aac6:	693a      	ldr	r2, [r7, #16]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d102      	bne.n	800aad4 <dir_alloc+0x64>
 800aace:	e00c      	b.n	800aaea <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aad0:	2300      	movs	r3, #0
 800aad2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800aad4:	2101      	movs	r1, #1
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f7ff fef4 	bl	800a8c4 <dir_next>
 800aadc:	4603      	mov	r3, r0
 800aade:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800aae0:	7dfb      	ldrb	r3, [r7, #23]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d0d7      	beq.n	800aa96 <dir_alloc+0x26>
 800aae6:	e000      	b.n	800aaea <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800aae8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800aaea:	7dfb      	ldrb	r3, [r7, #23]
 800aaec:	2b04      	cmp	r3, #4
 800aaee:	d101      	bne.n	800aaf4 <dir_alloc+0x84>
 800aaf0:	2307      	movs	r3, #7
 800aaf2:	75fb      	strb	r3, [r7, #23]
	return res;
 800aaf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3718      	adds	r7, #24
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b084      	sub	sp, #16
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
 800ab06:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	331a      	adds	r3, #26
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7fe ffc7 	bl	8009aa0 <ld_word>
 800ab12:	4603      	mov	r3, r0
 800ab14:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	2b03      	cmp	r3, #3
 800ab1c:	d109      	bne.n	800ab32 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	3314      	adds	r3, #20
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fe ffbc 	bl	8009aa0 <ld_word>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	041b      	lsls	r3, r3, #16
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ab32:	68fb      	ldr	r3, [r7, #12]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b084      	sub	sp, #16
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	331a      	adds	r3, #26
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	b292      	uxth	r2, r2
 800ab50:	4611      	mov	r1, r2
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7fe ffdf 	bl	8009b16 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	2b03      	cmp	r3, #3
 800ab5e:	d109      	bne.n	800ab74 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	f103 0214 	add.w	r2, r3, #20
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	0c1b      	lsrs	r3, r3, #16
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	4610      	mov	r0, r2
 800ab70:	f7fe ffd1 	bl	8009b16 <st_word>
	}
}
 800ab74:	bf00      	nop
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ab7c:	b590      	push	{r4, r7, lr}
 800ab7e:	b087      	sub	sp, #28
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	331a      	adds	r3, #26
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f7fe ff88 	bl	8009aa0 <ld_word>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d001      	beq.n	800ab9a <cmp_lfn+0x1e>
 800ab96:	2300      	movs	r3, #0
 800ab98:	e059      	b.n	800ac4e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aba2:	1e5a      	subs	r2, r3, #1
 800aba4:	4613      	mov	r3, r2
 800aba6:	005b      	lsls	r3, r3, #1
 800aba8:	4413      	add	r3, r2
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	4413      	add	r3, r2
 800abae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800abb0:	2301      	movs	r3, #1
 800abb2:	81fb      	strh	r3, [r7, #14]
 800abb4:	2300      	movs	r3, #0
 800abb6:	613b      	str	r3, [r7, #16]
 800abb8:	e033      	b.n	800ac22 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800abba:	4a27      	ldr	r2, [pc, #156]	; (800ac58 <cmp_lfn+0xdc>)
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	4413      	add	r3, r2
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	461a      	mov	r2, r3
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	4413      	add	r3, r2
 800abc8:	4618      	mov	r0, r3
 800abca:	f7fe ff69 	bl	8009aa0 <ld_word>
 800abce:	4603      	mov	r3, r0
 800abd0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800abd2:	89fb      	ldrh	r3, [r7, #14]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d01a      	beq.n	800ac0e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	2bfe      	cmp	r3, #254	; 0xfe
 800abdc:	d812      	bhi.n	800ac04 <cmp_lfn+0x88>
 800abde:	89bb      	ldrh	r3, [r7, #12]
 800abe0:	4618      	mov	r0, r3
 800abe2:	f002 fd23 	bl	800d62c <ff_wtoupper>
 800abe6:	4603      	mov	r3, r0
 800abe8:	461c      	mov	r4, r3
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	1c5a      	adds	r2, r3, #1
 800abee:	617a      	str	r2, [r7, #20]
 800abf0:	005b      	lsls	r3, r3, #1
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	4413      	add	r3, r2
 800abf6:	881b      	ldrh	r3, [r3, #0]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f002 fd17 	bl	800d62c <ff_wtoupper>
 800abfe:	4603      	mov	r3, r0
 800ac00:	429c      	cmp	r4, r3
 800ac02:	d001      	beq.n	800ac08 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ac04:	2300      	movs	r3, #0
 800ac06:	e022      	b.n	800ac4e <cmp_lfn+0xd2>
			}
			wc = uc;
 800ac08:	89bb      	ldrh	r3, [r7, #12]
 800ac0a:	81fb      	strh	r3, [r7, #14]
 800ac0c:	e006      	b.n	800ac1c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ac0e:	89bb      	ldrh	r3, [r7, #12]
 800ac10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d001      	beq.n	800ac1c <cmp_lfn+0xa0>
 800ac18:	2300      	movs	r3, #0
 800ac1a:	e018      	b.n	800ac4e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	613b      	str	r3, [r7, #16]
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	2b0c      	cmp	r3, #12
 800ac26:	d9c8      	bls.n	800abba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00b      	beq.n	800ac4c <cmp_lfn+0xd0>
 800ac34:	89fb      	ldrh	r3, [r7, #14]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d008      	beq.n	800ac4c <cmp_lfn+0xd0>
 800ac3a:	697b      	ldr	r3, [r7, #20]
 800ac3c:	005b      	lsls	r3, r3, #1
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	4413      	add	r3, r2
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d001      	beq.n	800ac4c <cmp_lfn+0xd0>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	e000      	b.n	800ac4e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ac4c:	2301      	movs	r3, #1
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	371c      	adds	r7, #28
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd90      	pop	{r4, r7, pc}
 800ac56:	bf00      	nop
 800ac58:	0801278c 	.word	0x0801278c

0800ac5c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	331a      	adds	r3, #26
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fe ff18 	bl	8009aa0 <ld_word>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d001      	beq.n	800ac7a <pick_lfn+0x1e>
 800ac76:	2300      	movs	r3, #0
 800ac78:	e04d      	b.n	800ad16 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac82:	1e5a      	subs	r2, r3, #1
 800ac84:	4613      	mov	r3, r2
 800ac86:	005b      	lsls	r3, r3, #1
 800ac88:	4413      	add	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	4413      	add	r3, r2
 800ac8e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ac90:	2301      	movs	r3, #1
 800ac92:	81fb      	strh	r3, [r7, #14]
 800ac94:	2300      	movs	r3, #0
 800ac96:	613b      	str	r3, [r7, #16]
 800ac98:	e028      	b.n	800acec <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ac9a:	4a21      	ldr	r2, [pc, #132]	; (800ad20 <pick_lfn+0xc4>)
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	4413      	add	r3, r2
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	461a      	mov	r2, r3
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	4413      	add	r3, r2
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7fe fef9 	bl	8009aa0 <ld_word>
 800acae:	4603      	mov	r3, r0
 800acb0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800acb2:	89fb      	ldrh	r3, [r7, #14]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00f      	beq.n	800acd8 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	2bfe      	cmp	r3, #254	; 0xfe
 800acbc:	d901      	bls.n	800acc2 <pick_lfn+0x66>
 800acbe:	2300      	movs	r3, #0
 800acc0:	e029      	b.n	800ad16 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800acc2:	89bb      	ldrh	r3, [r7, #12]
 800acc4:	81fb      	strh	r3, [r7, #14]
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	1c5a      	adds	r2, r3, #1
 800acca:	617a      	str	r2, [r7, #20]
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	4413      	add	r3, r2
 800acd2:	89fa      	ldrh	r2, [r7, #14]
 800acd4:	801a      	strh	r2, [r3, #0]
 800acd6:	e006      	b.n	800ace6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800acd8:	89bb      	ldrh	r3, [r7, #12]
 800acda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acde:	4293      	cmp	r3, r2
 800ace0:	d001      	beq.n	800ace6 <pick_lfn+0x8a>
 800ace2:	2300      	movs	r3, #0
 800ace4:	e017      	b.n	800ad16 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	3301      	adds	r3, #1
 800acea:	613b      	str	r3, [r7, #16]
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	2b0c      	cmp	r3, #12
 800acf0:	d9d3      	bls.n	800ac9a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00a      	beq.n	800ad14 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2bfe      	cmp	r3, #254	; 0xfe
 800ad02:	d901      	bls.n	800ad08 <pick_lfn+0xac>
 800ad04:	2300      	movs	r3, #0
 800ad06:	e006      	b.n	800ad16 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	005b      	lsls	r3, r3, #1
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	4413      	add	r3, r2
 800ad10:	2200      	movs	r2, #0
 800ad12:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ad14:	2301      	movs	r3, #1
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3718      	adds	r7, #24
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	0801278c 	.word	0x0801278c

0800ad24 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b088      	sub	sp, #32
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	4611      	mov	r1, r2
 800ad30:	461a      	mov	r2, r3
 800ad32:	460b      	mov	r3, r1
 800ad34:	71fb      	strb	r3, [r7, #7]
 800ad36:	4613      	mov	r3, r2
 800ad38:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	330d      	adds	r3, #13
 800ad3e:	79ba      	ldrb	r2, [r7, #6]
 800ad40:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	330b      	adds	r3, #11
 800ad46:	220f      	movs	r2, #15
 800ad48:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	330c      	adds	r3, #12
 800ad4e:	2200      	movs	r2, #0
 800ad50:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	331a      	adds	r3, #26
 800ad56:	2100      	movs	r1, #0
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7fe fedc 	bl	8009b16 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ad5e:	79fb      	ldrb	r3, [r7, #7]
 800ad60:	1e5a      	subs	r2, r3, #1
 800ad62:	4613      	mov	r3, r2
 800ad64:	005b      	lsls	r3, r3, #1
 800ad66:	4413      	add	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	82fb      	strh	r3, [r7, #22]
 800ad72:	2300      	movs	r3, #0
 800ad74:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ad76:	8afb      	ldrh	r3, [r7, #22]
 800ad78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d007      	beq.n	800ad90 <put_lfn+0x6c>
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	1c5a      	adds	r2, r3, #1
 800ad84:	61fa      	str	r2, [r7, #28]
 800ad86:	005b      	lsls	r3, r3, #1
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	881b      	ldrh	r3, [r3, #0]
 800ad8e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ad90:	4a17      	ldr	r2, [pc, #92]	; (800adf0 <put_lfn+0xcc>)
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	4413      	add	r3, r2
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	461a      	mov	r2, r3
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	4413      	add	r3, r2
 800ad9e:	8afa      	ldrh	r2, [r7, #22]
 800ada0:	4611      	mov	r1, r2
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7fe feb7 	bl	8009b16 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ada8:	8afb      	ldrh	r3, [r7, #22]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d102      	bne.n	800adb4 <put_lfn+0x90>
 800adae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800adb2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	3301      	adds	r3, #1
 800adb8:	61bb      	str	r3, [r7, #24]
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	2b0c      	cmp	r3, #12
 800adbe:	d9da      	bls.n	800ad76 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800adc0:	8afb      	ldrh	r3, [r7, #22]
 800adc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d006      	beq.n	800add8 <put_lfn+0xb4>
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	005b      	lsls	r3, r3, #1
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	4413      	add	r3, r2
 800add2:	881b      	ldrh	r3, [r3, #0]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d103      	bne.n	800ade0 <put_lfn+0xbc>
 800add8:	79fb      	ldrb	r3, [r7, #7]
 800adda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adde:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	79fa      	ldrb	r2, [r7, #7]
 800ade4:	701a      	strb	r2, [r3, #0]
}
 800ade6:	bf00      	nop
 800ade8:	3720      	adds	r7, #32
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	0801278c 	.word	0x0801278c

0800adf4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b08c      	sub	sp, #48	; 0x30
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ae02:	220b      	movs	r2, #11
 800ae04:	68b9      	ldr	r1, [r7, #8]
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f7fe fecc 	bl	8009ba4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	2b05      	cmp	r3, #5
 800ae10:	d92b      	bls.n	800ae6a <gen_numname+0x76>
		sr = seq;
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ae16:	e022      	b.n	800ae5e <gen_numname+0x6a>
			wc = *lfn++;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	1c9a      	adds	r2, r3, #2
 800ae1c:	607a      	str	r2, [r7, #4]
 800ae1e:	881b      	ldrh	r3, [r3, #0]
 800ae20:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ae22:	2300      	movs	r3, #0
 800ae24:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae26:	e017      	b.n	800ae58 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ae28:	69fb      	ldr	r3, [r7, #28]
 800ae2a:	005a      	lsls	r2, r3, #1
 800ae2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae2e:	f003 0301 	and.w	r3, r3, #1
 800ae32:	4413      	add	r3, r2
 800ae34:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ae36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae38:	085b      	lsrs	r3, r3, #1
 800ae3a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d005      	beq.n	800ae52 <gen_numname+0x5e>
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ae4c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ae50:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ae52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae54:	3301      	adds	r3, #1
 800ae56:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5a:	2b0f      	cmp	r3, #15
 800ae5c:	d9e4      	bls.n	800ae28 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	881b      	ldrh	r3, [r3, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d1d8      	bne.n	800ae18 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ae66:	69fb      	ldr	r3, [r7, #28]
 800ae68:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ae6a:	2307      	movs	r3, #7
 800ae6c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	f003 030f 	and.w	r3, r3, #15
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	3330      	adds	r3, #48	; 0x30
 800ae7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ae7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae82:	2b39      	cmp	r3, #57	; 0x39
 800ae84:	d904      	bls.n	800ae90 <gen_numname+0x9c>
 800ae86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ae8a:	3307      	adds	r3, #7
 800ae8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ae90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae92:	1e5a      	subs	r2, r3, #1
 800ae94:	62ba      	str	r2, [r7, #40]	; 0x28
 800ae96:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ae9a:	4413      	add	r3, r2
 800ae9c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800aea0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	091b      	lsrs	r3, r3, #4
 800aea8:	603b      	str	r3, [r7, #0]
	} while (seq);
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d1de      	bne.n	800ae6e <gen_numname+0x7a>
	ns[i] = '~';
 800aeb0:	f107 0214 	add.w	r2, r7, #20
 800aeb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeb6:	4413      	add	r3, r2
 800aeb8:	227e      	movs	r2, #126	; 0x7e
 800aeba:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800aebc:	2300      	movs	r3, #0
 800aebe:	627b      	str	r3, [r7, #36]	; 0x24
 800aec0:	e002      	b.n	800aec8 <gen_numname+0xd4>
 800aec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec4:	3301      	adds	r3, #1
 800aec6:	627b      	str	r3, [r7, #36]	; 0x24
 800aec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aecc:	429a      	cmp	r2, r3
 800aece:	d205      	bcs.n	800aedc <gen_numname+0xe8>
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed4:	4413      	add	r3, r2
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	2b20      	cmp	r3, #32
 800aeda:	d1f2      	bne.n	800aec2 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800aedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aede:	2b07      	cmp	r3, #7
 800aee0:	d808      	bhi.n	800aef4 <gen_numname+0x100>
 800aee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee4:	1c5a      	adds	r2, r3, #1
 800aee6:	62ba      	str	r2, [r7, #40]	; 0x28
 800aee8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800aeec:	4413      	add	r3, r2
 800aeee:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800aef2:	e000      	b.n	800aef6 <gen_numname+0x102>
 800aef4:	2120      	movs	r1, #32
 800aef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef8:	1c5a      	adds	r2, r3, #1
 800aefa:	627a      	str	r2, [r7, #36]	; 0x24
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	4413      	add	r3, r2
 800af00:	460a      	mov	r2, r1
 800af02:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800af04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af06:	2b07      	cmp	r3, #7
 800af08:	d9e8      	bls.n	800aedc <gen_numname+0xe8>
}
 800af0a:	bf00      	nop
 800af0c:	3730      	adds	r7, #48	; 0x30
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800af12:	b480      	push	{r7}
 800af14:	b085      	sub	sp, #20
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800af1a:	2300      	movs	r3, #0
 800af1c:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800af1e:	230b      	movs	r3, #11
 800af20:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800af22:	7bfb      	ldrb	r3, [r7, #15]
 800af24:	b2da      	uxtb	r2, r3
 800af26:	0852      	lsrs	r2, r2, #1
 800af28:	01db      	lsls	r3, r3, #7
 800af2a:	4313      	orrs	r3, r2
 800af2c:	b2da      	uxtb	r2, r3
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	1c59      	adds	r1, r3, #1
 800af32:	6079      	str	r1, [r7, #4]
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	4413      	add	r3, r2
 800af38:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	3b01      	subs	r3, #1
 800af3e:	60bb      	str	r3, [r7, #8]
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1ed      	bne.n	800af22 <sum_sfn+0x10>
	return sum;
 800af46:	7bfb      	ldrb	r3, [r7, #15]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3714      	adds	r7, #20
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b086      	sub	sp, #24
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800af5e:	2304      	movs	r3, #4
 800af60:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800af68:	23ff      	movs	r3, #255	; 0xff
 800af6a:	757b      	strb	r3, [r7, #21]
 800af6c:	23ff      	movs	r3, #255	; 0xff
 800af6e:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800af70:	e081      	b.n	800b076 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	69db      	ldr	r3, [r3, #28]
 800af76:	4619      	mov	r1, r3
 800af78:	6938      	ldr	r0, [r7, #16]
 800af7a:	f7ff f841 	bl	800a000 <move_window>
 800af7e:	4603      	mov	r3, r0
 800af80:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800af82:	7dfb      	ldrb	r3, [r7, #23]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d17c      	bne.n	800b082 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6a1b      	ldr	r3, [r3, #32]
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800af90:	7dbb      	ldrb	r3, [r7, #22]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d102      	bne.n	800af9c <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800af96:	2304      	movs	r3, #4
 800af98:	75fb      	strb	r3, [r7, #23]
 800af9a:	e077      	b.n	800b08c <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6a1b      	ldr	r3, [r3, #32]
 800afa0:	330b      	adds	r3, #11
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afa8:	73fb      	strb	r3, [r7, #15]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	7bfa      	ldrb	r2, [r7, #15]
 800afae:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800afb0:	7dbb      	ldrb	r3, [r7, #22]
 800afb2:	2be5      	cmp	r3, #229	; 0xe5
 800afb4:	d00e      	beq.n	800afd4 <dir_read+0x80>
 800afb6:	7dbb      	ldrb	r3, [r7, #22]
 800afb8:	2b2e      	cmp	r3, #46	; 0x2e
 800afba:	d00b      	beq.n	800afd4 <dir_read+0x80>
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
 800afbe:	f023 0320 	bic.w	r3, r3, #32
 800afc2:	2b08      	cmp	r3, #8
 800afc4:	bf0c      	ite	eq
 800afc6:	2301      	moveq	r3, #1
 800afc8:	2300      	movne	r3, #0
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	461a      	mov	r2, r3
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d002      	beq.n	800afda <dir_read+0x86>
				ord = 0xFF;
 800afd4:	23ff      	movs	r3, #255	; 0xff
 800afd6:	757b      	strb	r3, [r7, #21]
 800afd8:	e044      	b.n	800b064 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800afda:	7bfb      	ldrb	r3, [r7, #15]
 800afdc:	2b0f      	cmp	r3, #15
 800afde:	d12f      	bne.n	800b040 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800afe0:	7dbb      	ldrb	r3, [r7, #22]
 800afe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d00d      	beq.n	800b006 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6a1b      	ldr	r3, [r3, #32]
 800afee:	7b5b      	ldrb	r3, [r3, #13]
 800aff0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800aff2:	7dbb      	ldrb	r3, [r7, #22]
 800aff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aff8:	75bb      	strb	r3, [r7, #22]
 800affa:	7dbb      	ldrb	r3, [r7, #22]
 800affc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	695a      	ldr	r2, [r3, #20]
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b006:	7dba      	ldrb	r2, [r7, #22]
 800b008:	7d7b      	ldrb	r3, [r7, #21]
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d115      	bne.n	800b03a <dir_read+0xe6>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a1b      	ldr	r3, [r3, #32]
 800b012:	330d      	adds	r3, #13
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	7d3a      	ldrb	r2, [r7, #20]
 800b018:	429a      	cmp	r2, r3
 800b01a:	d10e      	bne.n	800b03a <dir_read+0xe6>
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	691a      	ldr	r2, [r3, #16]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6a1b      	ldr	r3, [r3, #32]
 800b024:	4619      	mov	r1, r3
 800b026:	4610      	mov	r0, r2
 800b028:	f7ff fe18 	bl	800ac5c <pick_lfn>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d003      	beq.n	800b03a <dir_read+0xe6>
 800b032:	7d7b      	ldrb	r3, [r7, #21]
 800b034:	3b01      	subs	r3, #1
 800b036:	b2db      	uxtb	r3, r3
 800b038:	e000      	b.n	800b03c <dir_read+0xe8>
 800b03a:	23ff      	movs	r3, #255	; 0xff
 800b03c:	757b      	strb	r3, [r7, #21]
 800b03e:	e011      	b.n	800b064 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b040:	7d7b      	ldrb	r3, [r7, #21]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d109      	bne.n	800b05a <dir_read+0x106>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6a1b      	ldr	r3, [r3, #32]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7ff ff61 	bl	800af12 <sum_sfn>
 800b050:	4603      	mov	r3, r0
 800b052:	461a      	mov	r2, r3
 800b054:	7d3b      	ldrb	r3, [r7, #20]
 800b056:	4293      	cmp	r3, r2
 800b058:	d015      	beq.n	800b086 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f04f 32ff 	mov.w	r2, #4294967295
 800b060:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800b062:	e010      	b.n	800b086 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b064:	2100      	movs	r1, #0
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f7ff fc2c 	bl	800a8c4 <dir_next>
 800b06c:	4603      	mov	r3, r0
 800b06e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b070:	7dfb      	ldrb	r3, [r7, #23]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d109      	bne.n	800b08a <dir_read+0x136>
	while (dp->sect) {
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	69db      	ldr	r3, [r3, #28]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f47f af79 	bne.w	800af72 <dir_read+0x1e>
 800b080:	e004      	b.n	800b08c <dir_read+0x138>
		if (res != FR_OK) break;
 800b082:	bf00      	nop
 800b084:	e002      	b.n	800b08c <dir_read+0x138>
					break;
 800b086:	bf00      	nop
 800b088:	e000      	b.n	800b08c <dir_read+0x138>
		if (res != FR_OK) break;
 800b08a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d002      	beq.n	800b098 <dir_read+0x144>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2200      	movs	r2, #0
 800b096:	61da      	str	r2, [r3, #28]
	return res;
 800b098:	7dfb      	ldrb	r3, [r7, #23]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3718      	adds	r7, #24
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b086      	sub	sp, #24
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f7ff fb7d 	bl	800a7b2 <dir_sdi>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b0bc:	7dfb      	ldrb	r3, [r7, #23]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d001      	beq.n	800b0c6 <dir_find+0x24>
 800b0c2:	7dfb      	ldrb	r3, [r7, #23]
 800b0c4:	e0a9      	b.n	800b21a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b0c6:	23ff      	movs	r3, #255	; 0xff
 800b0c8:	753b      	strb	r3, [r7, #20]
 800b0ca:	7d3b      	ldrb	r3, [r7, #20]
 800b0cc:	757b      	strb	r3, [r7, #21]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	69db      	ldr	r3, [r3, #28]
 800b0da:	4619      	mov	r1, r3
 800b0dc:	6938      	ldr	r0, [r7, #16]
 800b0de:	f7fe ff8f 	bl	800a000 <move_window>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b0e6:	7dfb      	ldrb	r3, [r7, #23]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	f040 8090 	bne.w	800b20e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6a1b      	ldr	r3, [r3, #32]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b0f6:	7dbb      	ldrb	r3, [r7, #22]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d102      	bne.n	800b102 <dir_find+0x60>
 800b0fc:	2304      	movs	r3, #4
 800b0fe:	75fb      	strb	r3, [r7, #23]
 800b100:	e08a      	b.n	800b218 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a1b      	ldr	r3, [r3, #32]
 800b106:	330b      	adds	r3, #11
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b10e:	73fb      	strb	r3, [r7, #15]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	7bfa      	ldrb	r2, [r7, #15]
 800b114:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b116:	7dbb      	ldrb	r3, [r7, #22]
 800b118:	2be5      	cmp	r3, #229	; 0xe5
 800b11a:	d007      	beq.n	800b12c <dir_find+0x8a>
 800b11c:	7bfb      	ldrb	r3, [r7, #15]
 800b11e:	f003 0308 	and.w	r3, r3, #8
 800b122:	2b00      	cmp	r3, #0
 800b124:	d009      	beq.n	800b13a <dir_find+0x98>
 800b126:	7bfb      	ldrb	r3, [r7, #15]
 800b128:	2b0f      	cmp	r3, #15
 800b12a:	d006      	beq.n	800b13a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b12c:	23ff      	movs	r3, #255	; 0xff
 800b12e:	757b      	strb	r3, [r7, #21]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f04f 32ff 	mov.w	r2, #4294967295
 800b136:	631a      	str	r2, [r3, #48]	; 0x30
 800b138:	e05e      	b.n	800b1f8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b13a:	7bfb      	ldrb	r3, [r7, #15]
 800b13c:	2b0f      	cmp	r3, #15
 800b13e:	d136      	bne.n	800b1ae <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d154      	bne.n	800b1f8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b14e:	7dbb      	ldrb	r3, [r7, #22]
 800b150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b154:	2b00      	cmp	r3, #0
 800b156:	d00d      	beq.n	800b174 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6a1b      	ldr	r3, [r3, #32]
 800b15c:	7b5b      	ldrb	r3, [r3, #13]
 800b15e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b160:	7dbb      	ldrb	r3, [r7, #22]
 800b162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b166:	75bb      	strb	r3, [r7, #22]
 800b168:	7dbb      	ldrb	r3, [r7, #22]
 800b16a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	695a      	ldr	r2, [r3, #20]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b174:	7dba      	ldrb	r2, [r7, #22]
 800b176:	7d7b      	ldrb	r3, [r7, #21]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d115      	bne.n	800b1a8 <dir_find+0x106>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6a1b      	ldr	r3, [r3, #32]
 800b180:	330d      	adds	r3, #13
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	7d3a      	ldrb	r2, [r7, #20]
 800b186:	429a      	cmp	r2, r3
 800b188:	d10e      	bne.n	800b1a8 <dir_find+0x106>
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	691a      	ldr	r2, [r3, #16]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a1b      	ldr	r3, [r3, #32]
 800b192:	4619      	mov	r1, r3
 800b194:	4610      	mov	r0, r2
 800b196:	f7ff fcf1 	bl	800ab7c <cmp_lfn>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d003      	beq.n	800b1a8 <dir_find+0x106>
 800b1a0:	7d7b      	ldrb	r3, [r7, #21]
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	e000      	b.n	800b1aa <dir_find+0x108>
 800b1a8:	23ff      	movs	r3, #255	; 0xff
 800b1aa:	757b      	strb	r3, [r7, #21]
 800b1ac:	e024      	b.n	800b1f8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b1ae:	7d7b      	ldrb	r3, [r7, #21]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d109      	bne.n	800b1c8 <dir_find+0x126>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6a1b      	ldr	r3, [r3, #32]
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7ff feaa 	bl	800af12 <sum_sfn>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	7d3b      	ldrb	r3, [r7, #20]
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d024      	beq.n	800b212 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b1ce:	f003 0301 	and.w	r3, r3, #1
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d10a      	bne.n	800b1ec <dir_find+0x14a>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a18      	ldr	r0, [r3, #32]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	3324      	adds	r3, #36	; 0x24
 800b1de:	220b      	movs	r2, #11
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	f7fe fd1a 	bl	8009c1a <mem_cmp>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d014      	beq.n	800b216 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b1ec:	23ff      	movs	r3, #255	; 0xff
 800b1ee:	757b      	strb	r3, [r7, #21]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f7ff fb62 	bl	800a8c4 <dir_next>
 800b200:	4603      	mov	r3, r0
 800b202:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b204:	7dfb      	ldrb	r3, [r7, #23]
 800b206:	2b00      	cmp	r3, #0
 800b208:	f43f af65 	beq.w	800b0d6 <dir_find+0x34>
 800b20c:	e004      	b.n	800b218 <dir_find+0x176>
		if (res != FR_OK) break;
 800b20e:	bf00      	nop
 800b210:	e002      	b.n	800b218 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b212:	bf00      	nop
 800b214:	e000      	b.n	800b218 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b216:	bf00      	nop

	return res;
 800b218:	7dfb      	ldrb	r3, [r7, #23]
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3718      	adds	r7, #24
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
	...

0800b224 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b08c      	sub	sp, #48	; 0x30
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b238:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <dir_register+0x20>
 800b240:	2306      	movs	r3, #6
 800b242:	e0e0      	b.n	800b406 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b244:	2300      	movs	r3, #0
 800b246:	627b      	str	r3, [r7, #36]	; 0x24
 800b248:	e002      	b.n	800b250 <dir_register+0x2c>
 800b24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24c:	3301      	adds	r3, #1
 800b24e:	627b      	str	r3, [r7, #36]	; 0x24
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	691a      	ldr	r2, [r3, #16]
 800b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b256:	005b      	lsls	r3, r3, #1
 800b258:	4413      	add	r3, r2
 800b25a:	881b      	ldrh	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d1f4      	bne.n	800b24a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b266:	f107 030c 	add.w	r3, r7, #12
 800b26a:	220c      	movs	r2, #12
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7fe fc99 	bl	8009ba4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b272:	7dfb      	ldrb	r3, [r7, #23]
 800b274:	f003 0301 	and.w	r3, r3, #1
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d032      	beq.n	800b2e2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2240      	movs	r2, #64	; 0x40
 800b280:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b284:	2301      	movs	r3, #1
 800b286:	62bb      	str	r3, [r7, #40]	; 0x28
 800b288:	e016      	b.n	800b2b8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	691a      	ldr	r2, [r3, #16]
 800b294:	f107 010c 	add.w	r1, r7, #12
 800b298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29a:	f7ff fdab 	bl	800adf4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f7ff feff 	bl	800b0a2 <dir_find>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b2aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d106      	bne.n	800b2c0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ba:	2b63      	cmp	r3, #99	; 0x63
 800b2bc:	d9e5      	bls.n	800b28a <dir_register+0x66>
 800b2be:	e000      	b.n	800b2c2 <dir_register+0x9e>
			if (res != FR_OK) break;
 800b2c0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c4:	2b64      	cmp	r3, #100	; 0x64
 800b2c6:	d101      	bne.n	800b2cc <dir_register+0xa8>
 800b2c8:	2307      	movs	r3, #7
 800b2ca:	e09c      	b.n	800b406 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b2cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2d0:	2b04      	cmp	r3, #4
 800b2d2:	d002      	beq.n	800b2da <dir_register+0xb6>
 800b2d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b2d8:	e095      	b.n	800b406 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b2da:	7dfa      	ldrb	r2, [r7, #23]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b2e2:	7dfb      	ldrb	r3, [r7, #23]
 800b2e4:	f003 0302 	and.w	r3, r3, #2
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d007      	beq.n	800b2fc <dir_register+0xd8>
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ee:	330c      	adds	r3, #12
 800b2f0:	4a47      	ldr	r2, [pc, #284]	; (800b410 <dir_register+0x1ec>)
 800b2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2f6:	089b      	lsrs	r3, r3, #2
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	e000      	b.n	800b2fe <dir_register+0xda>
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b300:	6a39      	ldr	r1, [r7, #32]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f7ff fbb4 	bl	800aa70 <dir_alloc>
 800b308:	4603      	mov	r3, r0
 800b30a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b30e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b312:	2b00      	cmp	r3, #0
 800b314:	d148      	bne.n	800b3a8 <dir_register+0x184>
 800b316:	6a3b      	ldr	r3, [r7, #32]
 800b318:	3b01      	subs	r3, #1
 800b31a:	623b      	str	r3, [r7, #32]
 800b31c:	6a3b      	ldr	r3, [r7, #32]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d042      	beq.n	800b3a8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	695a      	ldr	r2, [r3, #20]
 800b326:	6a3b      	ldr	r3, [r7, #32]
 800b328:	015b      	lsls	r3, r3, #5
 800b32a:	1ad3      	subs	r3, r2, r3
 800b32c:	4619      	mov	r1, r3
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f7ff fa3f 	bl	800a7b2 <dir_sdi>
 800b334:	4603      	mov	r3, r0
 800b336:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b33a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d132      	bne.n	800b3a8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	3324      	adds	r3, #36	; 0x24
 800b346:	4618      	mov	r0, r3
 800b348:	f7ff fde3 	bl	800af12 <sum_sfn>
 800b34c:	4603      	mov	r3, r0
 800b34e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	69db      	ldr	r3, [r3, #28]
 800b354:	4619      	mov	r1, r3
 800b356:	69f8      	ldr	r0, [r7, #28]
 800b358:	f7fe fe52 	bl	800a000 <move_window>
 800b35c:	4603      	mov	r3, r0
 800b35e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b366:	2b00      	cmp	r3, #0
 800b368:	d11d      	bne.n	800b3a6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	6918      	ldr	r0, [r3, #16]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a19      	ldr	r1, [r3, #32]
 800b372:	6a3b      	ldr	r3, [r7, #32]
 800b374:	b2da      	uxtb	r2, r3
 800b376:	7efb      	ldrb	r3, [r7, #27]
 800b378:	f7ff fcd4 	bl	800ad24 <put_lfn>
				fs->wflag = 1;
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	2201      	movs	r2, #1
 800b380:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b382:	2100      	movs	r1, #0
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f7ff fa9d 	bl	800a8c4 <dir_next>
 800b38a:	4603      	mov	r3, r0
 800b38c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b390:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b394:	2b00      	cmp	r3, #0
 800b396:	d107      	bne.n	800b3a8 <dir_register+0x184>
 800b398:	6a3b      	ldr	r3, [r7, #32]
 800b39a:	3b01      	subs	r3, #1
 800b39c:	623b      	str	r3, [r7, #32]
 800b39e:	6a3b      	ldr	r3, [r7, #32]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d1d5      	bne.n	800b350 <dir_register+0x12c>
 800b3a4:	e000      	b.n	800b3a8 <dir_register+0x184>
				if (res != FR_OK) break;
 800b3a6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b3a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d128      	bne.n	800b402 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	69db      	ldr	r3, [r3, #28]
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	69f8      	ldr	r0, [r7, #28]
 800b3b8:	f7fe fe22 	bl	800a000 <move_window>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b3c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d11b      	bne.n	800b402 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a1b      	ldr	r3, [r3, #32]
 800b3ce:	2220      	movs	r2, #32
 800b3d0:	2100      	movs	r1, #0
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	f7fe fc07 	bl	8009be6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6a18      	ldr	r0, [r3, #32]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	3324      	adds	r3, #36	; 0x24
 800b3e0:	220b      	movs	r2, #11
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	f7fe fbde 	bl	8009ba4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a1b      	ldr	r3, [r3, #32]
 800b3f2:	330c      	adds	r3, #12
 800b3f4:	f002 0218 	and.w	r2, r2, #24
 800b3f8:	b2d2      	uxtb	r2, r2
 800b3fa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	2201      	movs	r2, #1
 800b400:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b402:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b406:	4618      	mov	r0, r3
 800b408:	3730      	adds	r7, #48	; 0x30
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	4ec4ec4f 	.word	0x4ec4ec4f

0800b414 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b086      	sub	sp, #24
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	695b      	ldr	r3, [r3, #20]
 800b426:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b430:	d007      	beq.n	800b442 <dir_remove+0x2e>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b436:	4619      	mov	r1, r3
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f7ff f9ba 	bl	800a7b2 <dir_sdi>
 800b43e:	4603      	mov	r3, r0
 800b440:	e000      	b.n	800b444 <dir_remove+0x30>
 800b442:	2300      	movs	r3, #0
 800b444:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b446:	7dfb      	ldrb	r3, [r7, #23]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d128      	bne.n	800b49e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	69db      	ldr	r3, [r3, #28]
 800b450:	4619      	mov	r1, r3
 800b452:	6938      	ldr	r0, [r7, #16]
 800b454:	f7fe fdd4 	bl	800a000 <move_window>
 800b458:	4603      	mov	r3, r0
 800b45a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b45c:	7dfb      	ldrb	r3, [r7, #23]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d115      	bne.n	800b48e <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a1b      	ldr	r3, [r3, #32]
 800b466:	22e5      	movs	r2, #229	; 0xe5
 800b468:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	2201      	movs	r2, #1
 800b46e:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	695b      	ldr	r3, [r3, #20]
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	429a      	cmp	r2, r3
 800b478:	d90b      	bls.n	800b492 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800b47a:	2100      	movs	r1, #0
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7ff fa21 	bl	800a8c4 <dir_next>
 800b482:	4603      	mov	r3, r0
 800b484:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800b486:	7dfb      	ldrb	r3, [r7, #23]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d0df      	beq.n	800b44c <dir_remove+0x38>
 800b48c:	e002      	b.n	800b494 <dir_remove+0x80>
			if (res != FR_OK) break;
 800b48e:	bf00      	nop
 800b490:	e000      	b.n	800b494 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800b492:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800b494:	7dfb      	ldrb	r3, [r7, #23]
 800b496:	2b04      	cmp	r3, #4
 800b498:	d101      	bne.n	800b49e <dir_remove+0x8a>
 800b49a:	2302      	movs	r3, #2
 800b49c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3718      	adds	r7, #24
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b08a      	sub	sp, #40	; 0x28
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	613b      	str	r3, [r7, #16]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	691b      	ldr	r3, [r3, #16]
 800b4be:	60fb      	str	r3, [r7, #12]
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	617b      	str	r3, [r7, #20]
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	1c5a      	adds	r2, r3, #1
 800b4cc:	61ba      	str	r2, [r7, #24]
 800b4ce:	693a      	ldr	r2, [r7, #16]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b4d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4d8:	2b1f      	cmp	r3, #31
 800b4da:	d940      	bls.n	800b55e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b4dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4de:	2b2f      	cmp	r3, #47	; 0x2f
 800b4e0:	d006      	beq.n	800b4f0 <create_name+0x48>
 800b4e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4e4:	2b5c      	cmp	r3, #92	; 0x5c
 800b4e6:	d110      	bne.n	800b50a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b4e8:	e002      	b.n	800b4f0 <create_name+0x48>
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	61bb      	str	r3, [r7, #24]
 800b4f0:	693a      	ldr	r2, [r7, #16]
 800b4f2:	69bb      	ldr	r3, [r7, #24]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	2b2f      	cmp	r3, #47	; 0x2f
 800b4fa:	d0f6      	beq.n	800b4ea <create_name+0x42>
 800b4fc:	693a      	ldr	r2, [r7, #16]
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	4413      	add	r3, r2
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	2b5c      	cmp	r3, #92	; 0x5c
 800b506:	d0f0      	beq.n	800b4ea <create_name+0x42>
			break;
 800b508:	e02a      	b.n	800b560 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	2bfe      	cmp	r3, #254	; 0xfe
 800b50e:	d901      	bls.n	800b514 <create_name+0x6c>
 800b510:	2306      	movs	r3, #6
 800b512:	e1c9      	b.n	800b8a8 <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b514:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b516:	b2db      	uxtb	r3, r3
 800b518:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b51a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b51c:	2101      	movs	r1, #1
 800b51e:	4618      	mov	r0, r3
 800b520:	f002 f848 	bl	800d5b4 <ff_convert>
 800b524:	4603      	mov	r3, r0
 800b526:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b528:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d101      	bne.n	800b532 <create_name+0x8a>
 800b52e:	2306      	movs	r3, #6
 800b530:	e1ba      	b.n	800b8a8 <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b534:	2b7f      	cmp	r3, #127	; 0x7f
 800b536:	d809      	bhi.n	800b54c <create_name+0xa4>
 800b538:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b53a:	4619      	mov	r1, r3
 800b53c:	48a5      	ldr	r0, [pc, #660]	; (800b7d4 <create_name+0x32c>)
 800b53e:	f7fe fb93 	bl	8009c68 <chk_chr>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d001      	beq.n	800b54c <create_name+0xa4>
 800b548:	2306      	movs	r3, #6
 800b54a:	e1ad      	b.n	800b8a8 <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	1c5a      	adds	r2, r3, #1
 800b550:	617a      	str	r2, [r7, #20]
 800b552:	005b      	lsls	r3, r3, #1
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	4413      	add	r3, r2
 800b558:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b55a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b55c:	e7b4      	b.n	800b4c8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b55e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	69bb      	ldr	r3, [r7, #24]
 800b564:	441a      	add	r2, r3
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b56a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b56c:	2b1f      	cmp	r3, #31
 800b56e:	d801      	bhi.n	800b574 <create_name+0xcc>
 800b570:	2304      	movs	r3, #4
 800b572:	e000      	b.n	800b576 <create_name+0xce>
 800b574:	2300      	movs	r3, #0
 800b576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d109      	bne.n	800b594 <create_name+0xec>
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b586:	3b01      	subs	r3, #1
 800b588:	005b      	lsls	r3, r3, #1
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	4413      	add	r3, r2
 800b58e:	881b      	ldrh	r3, [r3, #0]
 800b590:	2b2e      	cmp	r3, #46	; 0x2e
 800b592:	d016      	beq.n	800b5c2 <create_name+0x11a>
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	2b02      	cmp	r3, #2
 800b598:	d14e      	bne.n	800b638 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b5a0:	3b01      	subs	r3, #1
 800b5a2:	005b      	lsls	r3, r3, #1
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	881b      	ldrh	r3, [r3, #0]
 800b5aa:	2b2e      	cmp	r3, #46	; 0x2e
 800b5ac:	d144      	bne.n	800b638 <create_name+0x190>
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b5b4:	3b02      	subs	r3, #2
 800b5b6:	005b      	lsls	r3, r3, #1
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	881b      	ldrh	r3, [r3, #0]
 800b5be:	2b2e      	cmp	r3, #46	; 0x2e
 800b5c0:	d13a      	bne.n	800b638 <create_name+0x190>
		lfn[di] = 0;
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	005b      	lsls	r3, r3, #1
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	623b      	str	r3, [r7, #32]
 800b5d2:	e00f      	b.n	800b5f4 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800b5d4:	6a3a      	ldr	r2, [r7, #32]
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d201      	bcs.n	800b5e0 <create_name+0x138>
 800b5dc:	212e      	movs	r1, #46	; 0x2e
 800b5de:	e000      	b.n	800b5e2 <create_name+0x13a>
 800b5e0:	2120      	movs	r1, #32
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	6a3b      	ldr	r3, [r7, #32]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	3324      	adds	r3, #36	; 0x24
 800b5ea:	460a      	mov	r2, r1
 800b5ec:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800b5ee:	6a3b      	ldr	r3, [r7, #32]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	623b      	str	r3, [r7, #32]
 800b5f4:	6a3b      	ldr	r3, [r7, #32]
 800b5f6:	2b0a      	cmp	r3, #10
 800b5f8:	d9ec      	bls.n	800b5d4 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800b5fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5fe:	f043 0320 	orr.w	r3, r3, #32
 800b602:	b2d9      	uxtb	r1, r3
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	6a3b      	ldr	r3, [r7, #32]
 800b608:	4413      	add	r3, r2
 800b60a:	3324      	adds	r3, #36	; 0x24
 800b60c:	460a      	mov	r2, r1
 800b60e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800b610:	2300      	movs	r3, #0
 800b612:	e149      	b.n	800b8a8 <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b61a:	3b01      	subs	r3, #1
 800b61c:	005b      	lsls	r3, r3, #1
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	4413      	add	r3, r2
 800b622:	881b      	ldrh	r3, [r3, #0]
 800b624:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b626:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b628:	2b20      	cmp	r3, #32
 800b62a:	d002      	beq.n	800b632 <create_name+0x18a>
 800b62c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b62e:	2b2e      	cmp	r3, #46	; 0x2e
 800b630:	d106      	bne.n	800b640 <create_name+0x198>
		di--;
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	3b01      	subs	r3, #1
 800b636:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d1ea      	bne.n	800b614 <create_name+0x16c>
 800b63e:	e000      	b.n	800b642 <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800b640:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	005b      	lsls	r3, r3, #1
 800b646:	68fa      	ldr	r2, [r7, #12]
 800b648:	4413      	add	r3, r2
 800b64a:	2200      	movs	r2, #0
 800b64c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d101      	bne.n	800b658 <create_name+0x1b0>
 800b654:	2306      	movs	r3, #6
 800b656:	e127      	b.n	800b8a8 <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	3324      	adds	r3, #36	; 0x24
 800b65c:	220b      	movs	r2, #11
 800b65e:	2120      	movs	r1, #32
 800b660:	4618      	mov	r0, r3
 800b662:	f7fe fac0 	bl	8009be6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b666:	2300      	movs	r3, #0
 800b668:	61bb      	str	r3, [r7, #24]
 800b66a:	e002      	b.n	800b672 <create_name+0x1ca>
 800b66c:	69bb      	ldr	r3, [r7, #24]
 800b66e:	3301      	adds	r3, #1
 800b670:	61bb      	str	r3, [r7, #24]
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	005b      	lsls	r3, r3, #1
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	4413      	add	r3, r2
 800b67a:	881b      	ldrh	r3, [r3, #0]
 800b67c:	2b20      	cmp	r3, #32
 800b67e:	d0f5      	beq.n	800b66c <create_name+0x1c4>
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	005b      	lsls	r3, r3, #1
 800b684:	68fa      	ldr	r2, [r7, #12]
 800b686:	4413      	add	r3, r2
 800b688:	881b      	ldrh	r3, [r3, #0]
 800b68a:	2b2e      	cmp	r3, #46	; 0x2e
 800b68c:	d0ee      	beq.n	800b66c <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b68e:	69bb      	ldr	r3, [r7, #24]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d009      	beq.n	800b6a8 <create_name+0x200>
 800b694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b698:	f043 0303 	orr.w	r3, r3, #3
 800b69c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b6a0:	e002      	b.n	800b6a8 <create_name+0x200>
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	617b      	str	r3, [r7, #20]
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d009      	beq.n	800b6c2 <create_name+0x21a>
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	005b      	lsls	r3, r3, #1
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	881b      	ldrh	r3, [r3, #0]
 800b6be:	2b2e      	cmp	r3, #46	; 0x2e
 800b6c0:	d1ef      	bne.n	800b6a2 <create_name+0x1fa>

	i = b = 0; ni = 8;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	623b      	str	r3, [r7, #32]
 800b6cc:	2308      	movs	r3, #8
 800b6ce:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	1c5a      	adds	r2, r3, #1
 800b6d4:	61ba      	str	r2, [r7, #24]
 800b6d6:	005b      	lsls	r3, r3, #1
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	4413      	add	r3, r2
 800b6dc:	881b      	ldrh	r3, [r3, #0]
 800b6de:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b6e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f000 8096 	beq.w	800b814 <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b6e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6ea:	2b20      	cmp	r3, #32
 800b6ec:	d006      	beq.n	800b6fc <create_name+0x254>
 800b6ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6f0:	2b2e      	cmp	r3, #46	; 0x2e
 800b6f2:	d10a      	bne.n	800b70a <create_name+0x262>
 800b6f4:	69ba      	ldr	r2, [r7, #24]
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d006      	beq.n	800b70a <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800b6fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b700:	f043 0303 	orr.w	r3, r3, #3
 800b704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b708:	e083      	b.n	800b812 <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b70a:	6a3a      	ldr	r2, [r7, #32]
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d203      	bcs.n	800b71a <create_name+0x272>
 800b712:	69ba      	ldr	r2, [r7, #24]
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	429a      	cmp	r2, r3
 800b718:	d123      	bne.n	800b762 <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	2b0b      	cmp	r3, #11
 800b71e:	d106      	bne.n	800b72e <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800b720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b724:	f043 0303 	orr.w	r3, r3, #3
 800b728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b72c:	e075      	b.n	800b81a <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b72e:	69ba      	ldr	r2, [r7, #24]
 800b730:	697b      	ldr	r3, [r7, #20]
 800b732:	429a      	cmp	r2, r3
 800b734:	d005      	beq.n	800b742 <create_name+0x29a>
 800b736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b73a:	f043 0303 	orr.w	r3, r3, #3
 800b73e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b742:	69ba      	ldr	r2, [r7, #24]
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	429a      	cmp	r2, r3
 800b748:	d866      	bhi.n	800b818 <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	61bb      	str	r3, [r7, #24]
 800b74e:	2308      	movs	r3, #8
 800b750:	623b      	str	r3, [r7, #32]
 800b752:	230b      	movs	r3, #11
 800b754:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b756:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b760:	e057      	b.n	800b812 <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b762:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b764:	2b7f      	cmp	r3, #127	; 0x7f
 800b766:	d914      	bls.n	800b792 <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b76a:	2100      	movs	r1, #0
 800b76c:	4618      	mov	r0, r3
 800b76e:	f001 ff21 	bl	800d5b4 <ff_convert>
 800b772:	4603      	mov	r3, r0
 800b774:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d004      	beq.n	800b786 <create_name+0x2de>
 800b77c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b77e:	3b80      	subs	r3, #128	; 0x80
 800b780:	4a15      	ldr	r2, [pc, #84]	; (800b7d8 <create_name+0x330>)
 800b782:	5cd3      	ldrb	r3, [r2, r3]
 800b784:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b78a:	f043 0302 	orr.w	r3, r3, #2
 800b78e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b794:	2b00      	cmp	r3, #0
 800b796:	d007      	beq.n	800b7a8 <create_name+0x300>
 800b798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b79a:	4619      	mov	r1, r3
 800b79c:	480f      	ldr	r0, [pc, #60]	; (800b7dc <create_name+0x334>)
 800b79e:	f7fe fa63 	bl	8009c68 <chk_chr>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d008      	beq.n	800b7ba <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b7a8:	235f      	movs	r3, #95	; 0x5f
 800b7aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b7ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7b0:	f043 0303 	orr.w	r3, r3, #3
 800b7b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b7b8:	e021      	b.n	800b7fe <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b7ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7bc:	2b40      	cmp	r3, #64	; 0x40
 800b7be:	d90f      	bls.n	800b7e0 <create_name+0x338>
 800b7c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7c2:	2b5a      	cmp	r3, #90	; 0x5a
 800b7c4:	d80c      	bhi.n	800b7e0 <create_name+0x338>
					b |= 2;
 800b7c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b7ca:	f043 0302 	orr.w	r3, r3, #2
 800b7ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b7d2:	e014      	b.n	800b7fe <create_name+0x356>
 800b7d4:	08012684 	.word	0x08012684
 800b7d8:	0801270c 	.word	0x0801270c
 800b7dc:	08012690 	.word	0x08012690
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b7e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7e2:	2b60      	cmp	r3, #96	; 0x60
 800b7e4:	d90b      	bls.n	800b7fe <create_name+0x356>
 800b7e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7e8:	2b7a      	cmp	r3, #122	; 0x7a
 800b7ea:	d808      	bhi.n	800b7fe <create_name+0x356>
						b |= 1; w -= 0x20;
 800b7ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b7f0:	f043 0301 	orr.w	r3, r3, #1
 800b7f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b7f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7fa:	3b20      	subs	r3, #32
 800b7fc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b7fe:	6a3b      	ldr	r3, [r7, #32]
 800b800:	1c5a      	adds	r2, r3, #1
 800b802:	623a      	str	r2, [r7, #32]
 800b804:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b806:	b2d1      	uxtb	r1, r2
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	4413      	add	r3, r2
 800b80c:	460a      	mov	r2, r1
 800b80e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b812:	e75d      	b.n	800b6d0 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800b814:	bf00      	nop
 800b816:	e000      	b.n	800b81a <create_name+0x372>
			if (si > di) break;			/* No extension */
 800b818:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b820:	2be5      	cmp	r3, #229	; 0xe5
 800b822:	d103      	bne.n	800b82c <create_name+0x384>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2205      	movs	r2, #5
 800b828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	2b08      	cmp	r3, #8
 800b830:	d104      	bne.n	800b83c <create_name+0x394>
 800b832:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b83c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b840:	f003 030c 	and.w	r3, r3, #12
 800b844:	2b0c      	cmp	r3, #12
 800b846:	d005      	beq.n	800b854 <create_name+0x3ac>
 800b848:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b84c:	f003 0303 	and.w	r3, r3, #3
 800b850:	2b03      	cmp	r3, #3
 800b852:	d105      	bne.n	800b860 <create_name+0x3b8>
 800b854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b858:	f043 0302 	orr.w	r3, r3, #2
 800b85c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b864:	f003 0302 	and.w	r3, r3, #2
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d117      	bne.n	800b89c <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b86c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b870:	f003 0303 	and.w	r3, r3, #3
 800b874:	2b01      	cmp	r3, #1
 800b876:	d105      	bne.n	800b884 <create_name+0x3dc>
 800b878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b87c:	f043 0310 	orr.w	r3, r3, #16
 800b880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b884:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b888:	f003 030c 	and.w	r3, r3, #12
 800b88c:	2b04      	cmp	r3, #4
 800b88e:	d105      	bne.n	800b89c <create_name+0x3f4>
 800b890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b894:	f043 0308 	orr.w	r3, r3, #8
 800b898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b8a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b8a6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3728      	adds	r7, #40	; 0x28
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b086      	sub	sp, #24
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	2b2f      	cmp	r3, #47	; 0x2f
 800b8ca:	d00b      	beq.n	800b8e4 <follow_path+0x34>
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	781b      	ldrb	r3, [r3, #0]
 800b8d0:	2b5c      	cmp	r3, #92	; 0x5c
 800b8d2:	d007      	beq.n	800b8e4 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	69da      	ldr	r2, [r3, #28]
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	609a      	str	r2, [r3, #8]
 800b8dc:	e00d      	b.n	800b8fa <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	603b      	str	r3, [r7, #0]
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	2b2f      	cmp	r3, #47	; 0x2f
 800b8ea:	d0f8      	beq.n	800b8de <follow_path+0x2e>
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	2b5c      	cmp	r3, #92	; 0x5c
 800b8f2:	d0f4      	beq.n	800b8de <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	2b1f      	cmp	r3, #31
 800b900:	d80a      	bhi.n	800b918 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2280      	movs	r2, #128	; 0x80
 800b906:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b90a:	2100      	movs	r1, #0
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f7fe ff50 	bl	800a7b2 <dir_sdi>
 800b912:	4603      	mov	r3, r0
 800b914:	75fb      	strb	r3, [r7, #23]
 800b916:	e05b      	b.n	800b9d0 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b918:	463b      	mov	r3, r7
 800b91a:	4619      	mov	r1, r3
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f7ff fdc3 	bl	800b4a8 <create_name>
 800b922:	4603      	mov	r3, r0
 800b924:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b926:	7dfb      	ldrb	r3, [r7, #23]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d14c      	bne.n	800b9c6 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f7ff fbb8 	bl	800b0a2 <dir_find>
 800b932:	4603      	mov	r3, r0
 800b934:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b93c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b93e:	7dfb      	ldrb	r3, [r7, #23]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d01b      	beq.n	800b97c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b944:	7dfb      	ldrb	r3, [r7, #23]
 800b946:	2b04      	cmp	r3, #4
 800b948:	d13f      	bne.n	800b9ca <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800b94a:	7afb      	ldrb	r3, [r7, #11]
 800b94c:	f003 0320 	and.w	r3, r3, #32
 800b950:	2b00      	cmp	r3, #0
 800b952:	d00b      	beq.n	800b96c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800b954:	7afb      	ldrb	r3, [r7, #11]
 800b956:	f003 0304 	and.w	r3, r3, #4
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d031      	beq.n	800b9c2 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2280      	movs	r2, #128	; 0x80
 800b962:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800b966:	2300      	movs	r3, #0
 800b968:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800b96a:	e02e      	b.n	800b9ca <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b96c:	7afb      	ldrb	r3, [r7, #11]
 800b96e:	f003 0304 	and.w	r3, r3, #4
 800b972:	2b00      	cmp	r3, #0
 800b974:	d129      	bne.n	800b9ca <follow_path+0x11a>
 800b976:	2305      	movs	r3, #5
 800b978:	75fb      	strb	r3, [r7, #23]
				break;
 800b97a:	e026      	b.n	800b9ca <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b97c:	7afb      	ldrb	r3, [r7, #11]
 800b97e:	f003 0304 	and.w	r3, r3, #4
 800b982:	2b00      	cmp	r3, #0
 800b984:	d123      	bne.n	800b9ce <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	799b      	ldrb	r3, [r3, #6]
 800b98a:	f003 0310 	and.w	r3, r3, #16
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d102      	bne.n	800b998 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800b992:	2305      	movs	r3, #5
 800b994:	75fb      	strb	r3, [r7, #23]
 800b996:	e01b      	b.n	800b9d0 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	695b      	ldr	r3, [r3, #20]
 800b9a2:	68fa      	ldr	r2, [r7, #12]
 800b9a4:	8992      	ldrh	r2, [r2, #12]
 800b9a6:	fbb3 f0f2 	udiv	r0, r3, r2
 800b9aa:	fb02 f200 	mul.w	r2, r2, r0
 800b9ae:	1a9b      	subs	r3, r3, r2
 800b9b0:	440b      	add	r3, r1
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	68f8      	ldr	r0, [r7, #12]
 800b9b6:	f7ff f8a2 	bl	800aafe <ld_clust>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	609a      	str	r2, [r3, #8]
 800b9c0:	e7aa      	b.n	800b918 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800b9c2:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b9c4:	e7a8      	b.n	800b918 <follow_path+0x68>
			if (res != FR_OK) break;
 800b9c6:	bf00      	nop
 800b9c8:	e002      	b.n	800b9d0 <follow_path+0x120>
				break;
 800b9ca:	bf00      	nop
 800b9cc:	e000      	b.n	800b9d0 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b9ce:	bf00      	nop
			}
		}
	}

	return res;
 800b9d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3718      	adds	r7, #24
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b9da:	b480      	push	{r7}
 800b9dc:	b087      	sub	sp, #28
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b9e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b9e6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d031      	beq.n	800ba54 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	617b      	str	r3, [r7, #20]
 800b9f6:	e002      	b.n	800b9fe <get_ldnumber+0x24>
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	617b      	str	r3, [r7, #20]
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	2b1f      	cmp	r3, #31
 800ba04:	d903      	bls.n	800ba0e <get_ldnumber+0x34>
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	2b3a      	cmp	r3, #58	; 0x3a
 800ba0c:	d1f4      	bne.n	800b9f8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	2b3a      	cmp	r3, #58	; 0x3a
 800ba14:	d11c      	bne.n	800ba50 <get_ldnumber+0x76>
			tp = *path;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	1c5a      	adds	r2, r3, #1
 800ba20:	60fa      	str	r2, [r7, #12]
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	3b30      	subs	r3, #48	; 0x30
 800ba26:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	2b09      	cmp	r3, #9
 800ba2c:	d80e      	bhi.n	800ba4c <get_ldnumber+0x72>
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d10a      	bne.n	800ba4c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d107      	bne.n	800ba4c <get_ldnumber+0x72>
					vol = (int)i;
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	3301      	adds	r3, #1
 800ba44:	617b      	str	r3, [r7, #20]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	697a      	ldr	r2, [r7, #20]
 800ba4a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	e002      	b.n	800ba56 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ba50:	2300      	movs	r3, #0
 800ba52:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ba54:	693b      	ldr	r3, [r7, #16]
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	371c      	adds	r7, #28
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
	...

0800ba64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2200      	movs	r2, #0
 800ba72:	70da      	strb	r2, [r3, #3]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	f04f 32ff 	mov.w	r2, #4294967295
 800ba7a:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ba7c:	6839      	ldr	r1, [r7, #0]
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f7fe fabe 	bl	800a000 <move_window>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d001      	beq.n	800ba8e <check_fs+0x2a>
 800ba8a:	2304      	movs	r3, #4
 800ba8c:	e038      	b.n	800bb00 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	333c      	adds	r3, #60	; 0x3c
 800ba92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ba96:	4618      	mov	r0, r3
 800ba98:	f7fe f802 	bl	8009aa0 <ld_word>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	461a      	mov	r2, r3
 800baa0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d001      	beq.n	800baac <check_fs+0x48>
 800baa8:	2303      	movs	r3, #3
 800baaa:	e029      	b.n	800bb00 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bab2:	2be9      	cmp	r3, #233	; 0xe9
 800bab4:	d009      	beq.n	800baca <check_fs+0x66>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800babc:	2beb      	cmp	r3, #235	; 0xeb
 800babe:	d11e      	bne.n	800bafe <check_fs+0x9a>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bac6:	2b90      	cmp	r3, #144	; 0x90
 800bac8:	d119      	bne.n	800bafe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	333c      	adds	r3, #60	; 0x3c
 800bace:	3336      	adds	r3, #54	; 0x36
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7fd fffd 	bl	8009ad0 <ld_dword>
 800bad6:	4603      	mov	r3, r0
 800bad8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800badc:	4a0a      	ldr	r2, [pc, #40]	; (800bb08 <check_fs+0xa4>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d101      	bne.n	800bae6 <check_fs+0x82>
 800bae2:	2300      	movs	r3, #0
 800bae4:	e00c      	b.n	800bb00 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	333c      	adds	r3, #60	; 0x3c
 800baea:	3352      	adds	r3, #82	; 0x52
 800baec:	4618      	mov	r0, r3
 800baee:	f7fd ffef 	bl	8009ad0 <ld_dword>
 800baf2:	4602      	mov	r2, r0
 800baf4:	4b05      	ldr	r3, [pc, #20]	; (800bb0c <check_fs+0xa8>)
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d101      	bne.n	800bafe <check_fs+0x9a>
 800bafa:	2300      	movs	r3, #0
 800bafc:	e000      	b.n	800bb00 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bafe:	2302      	movs	r3, #2
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3708      	adds	r7, #8
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	00544146 	.word	0x00544146
 800bb0c:	33544146 	.word	0x33544146

0800bb10 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b096      	sub	sp, #88	; 0x58
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	2200      	movs	r2, #0
 800bb22:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bb24:	68f8      	ldr	r0, [r7, #12]
 800bb26:	f7ff ff58 	bl	800b9da <get_ldnumber>
 800bb2a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bb2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	da01      	bge.n	800bb36 <find_volume+0x26>
 800bb32:	230b      	movs	r3, #11
 800bb34:	e26b      	b.n	800c00e <find_volume+0x4fe>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bb36:	4ab0      	ldr	r2, [pc, #704]	; (800bdf8 <find_volume+0x2e8>)
 800bb38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb3e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d101      	bne.n	800bb4a <find_volume+0x3a>
 800bb46:	230c      	movs	r3, #12
 800bb48:	e261      	b.n	800c00e <find_volume+0x4fe>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb4e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bb50:	79fb      	ldrb	r3, [r7, #7]
 800bb52:	f023 0301 	bic.w	r3, r3, #1
 800bb56:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d01a      	beq.n	800bb96 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb62:	785b      	ldrb	r3, [r3, #1]
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7fd fefd 	bl	8009964 <disk_status>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bb70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb74:	f003 0301 	and.w	r3, r3, #1
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d10c      	bne.n	800bb96 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bb7c:	79fb      	ldrb	r3, [r7, #7]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d007      	beq.n	800bb92 <find_volume+0x82>
 800bb82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb86:	f003 0304 	and.w	r3, r3, #4
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d001      	beq.n	800bb92 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bb8e:	230a      	movs	r3, #10
 800bb90:	e23d      	b.n	800c00e <find_volume+0x4fe>
			}
			return FR_OK;				/* The file system object is valid */
 800bb92:	2300      	movs	r3, #0
 800bb94:	e23b      	b.n	800c00e <find_volume+0x4fe>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb98:	2200      	movs	r2, #0
 800bb9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bb9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb9e:	b2da      	uxtb	r2, r3
 800bba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba6:	785b      	ldrb	r3, [r3, #1]
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7fd fef5 	bl	8009998 <disk_initialize>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bbb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bbb8:	f003 0301 	and.w	r3, r3, #1
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d001      	beq.n	800bbc4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e224      	b.n	800c00e <find_volume+0x4fe>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bbc4:	79fb      	ldrb	r3, [r7, #7]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d007      	beq.n	800bbda <find_volume+0xca>
 800bbca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bbce:	f003 0304 	and.w	r3, r3, #4
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d001      	beq.n	800bbda <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bbd6:	230a      	movs	r3, #10
 800bbd8:	e219      	b.n	800c00e <find_volume+0x4fe>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800bbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbdc:	7858      	ldrb	r0, [r3, #1]
 800bbde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbe0:	330c      	adds	r3, #12
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	2102      	movs	r1, #2
 800bbe6:	f7fd ff3d 	bl	8009a64 <disk_ioctl>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d001      	beq.n	800bbf4 <find_volume+0xe4>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e20c      	b.n	800c00e <find_volume+0x4fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800bbf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbf6:	899b      	ldrh	r3, [r3, #12]
 800bbf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbfc:	d80d      	bhi.n	800bc1a <find_volume+0x10a>
 800bbfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc00:	899b      	ldrh	r3, [r3, #12]
 800bc02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc06:	d308      	bcc.n	800bc1a <find_volume+0x10a>
 800bc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc0a:	899b      	ldrh	r3, [r3, #12]
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc10:	899b      	ldrh	r3, [r3, #12]
 800bc12:	3b01      	subs	r3, #1
 800bc14:	4013      	ands	r3, r2
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d001      	beq.n	800bc1e <find_volume+0x10e>
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e1f7      	b.n	800c00e <find_volume+0x4fe>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bc22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bc24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc26:	f7ff ff1d 	bl	800ba64 <check_fs>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bc30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc34:	2b02      	cmp	r3, #2
 800bc36:	d14b      	bne.n	800bcd0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bc38:	2300      	movs	r3, #0
 800bc3a:	643b      	str	r3, [r7, #64]	; 0x40
 800bc3c:	e01f      	b.n	800bc7e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc40:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800bc44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc46:	011b      	lsls	r3, r3, #4
 800bc48:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bc4c:	4413      	add	r3, r2
 800bc4e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc52:	3304      	adds	r3, #4
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d006      	beq.n	800bc68 <find_volume+0x158>
 800bc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5c:	3308      	adds	r3, #8
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f7fd ff36 	bl	8009ad0 <ld_dword>
 800bc64:	4602      	mov	r2, r0
 800bc66:	e000      	b.n	800bc6a <find_volume+0x15a>
 800bc68:	2200      	movs	r2, #0
 800bc6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800bc72:	440b      	add	r3, r1
 800bc74:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bc78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	643b      	str	r3, [r7, #64]	; 0x40
 800bc7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc80:	2b03      	cmp	r3, #3
 800bc82:	d9dc      	bls.n	800bc3e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bc84:	2300      	movs	r3, #0
 800bc86:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bc88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d002      	beq.n	800bc94 <find_volume+0x184>
 800bc8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc90:	3b01      	subs	r3, #1
 800bc92:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bc94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bc9c:	4413      	add	r3, r2
 800bc9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bca2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d005      	beq.n	800bcb6 <find_volume+0x1a6>
 800bcaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bcac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bcae:	f7ff fed9 	bl	800ba64 <check_fs>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	e000      	b.n	800bcb8 <find_volume+0x1a8>
 800bcb6:	2303      	movs	r3, #3
 800bcb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bcbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d905      	bls.n	800bcd0 <find_volume+0x1c0>
 800bcc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	643b      	str	r3, [r7, #64]	; 0x40
 800bcca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bccc:	2b03      	cmp	r3, #3
 800bcce:	d9e1      	bls.n	800bc94 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bcd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bcd4:	2b04      	cmp	r3, #4
 800bcd6:	d101      	bne.n	800bcdc <find_volume+0x1cc>
 800bcd8:	2301      	movs	r3, #1
 800bcda:	e198      	b.n	800c00e <find_volume+0x4fe>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bcdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d901      	bls.n	800bce8 <find_volume+0x1d8>
 800bce4:	230d      	movs	r3, #13
 800bce6:	e192      	b.n	800c00e <find_volume+0x4fe>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcea:	333c      	adds	r3, #60	; 0x3c
 800bcec:	330b      	adds	r3, #11
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7fd fed6 	bl	8009aa0 <ld_word>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfa:	899b      	ldrh	r3, [r3, #12]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d001      	beq.n	800bd04 <find_volume+0x1f4>
 800bd00:	230d      	movs	r3, #13
 800bd02:	e184      	b.n	800c00e <find_volume+0x4fe>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd06:	333c      	adds	r3, #60	; 0x3c
 800bd08:	3316      	adds	r3, #22
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fd fec8 	bl	8009aa0 <ld_word>
 800bd10:	4603      	mov	r3, r0
 800bd12:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bd14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d106      	bne.n	800bd28 <find_volume+0x218>
 800bd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1c:	333c      	adds	r3, #60	; 0x3c
 800bd1e:	3324      	adds	r3, #36	; 0x24
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7fd fed5 	bl	8009ad0 <ld_dword>
 800bd26:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd2c:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd30:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800bd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd36:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3a:	789b      	ldrb	r3, [r3, #2]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d005      	beq.n	800bd4c <find_volume+0x23c>
 800bd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd42:	789b      	ldrb	r3, [r3, #2]
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d001      	beq.n	800bd4c <find_volume+0x23c>
 800bd48:	230d      	movs	r3, #13
 800bd4a:	e160      	b.n	800c00e <find_volume+0x4fe>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd4e:	789b      	ldrb	r3, [r3, #2]
 800bd50:	461a      	mov	r2, r3
 800bd52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd54:	fb02 f303 	mul.w	r3, r2, r3
 800bd58:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800bd60:	b29a      	uxth	r2, r3
 800bd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd64:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd68:	895b      	ldrh	r3, [r3, #10]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d008      	beq.n	800bd80 <find_volume+0x270>
 800bd6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd70:	895b      	ldrh	r3, [r3, #10]
 800bd72:	461a      	mov	r2, r3
 800bd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd76:	895b      	ldrh	r3, [r3, #10]
 800bd78:	3b01      	subs	r3, #1
 800bd7a:	4013      	ands	r3, r2
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d001      	beq.n	800bd84 <find_volume+0x274>
 800bd80:	230d      	movs	r3, #13
 800bd82:	e144      	b.n	800c00e <find_volume+0x4fe>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd86:	333c      	adds	r3, #60	; 0x3c
 800bd88:	3311      	adds	r3, #17
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fd fe88 	bl	8009aa0 <ld_word>
 800bd90:	4603      	mov	r3, r0
 800bd92:	461a      	mov	r2, r3
 800bd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd96:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9a:	891b      	ldrh	r3, [r3, #8]
 800bd9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd9e:	8992      	ldrh	r2, [r2, #12]
 800bda0:	0952      	lsrs	r2, r2, #5
 800bda2:	b292      	uxth	r2, r2
 800bda4:	fbb3 f1f2 	udiv	r1, r3, r2
 800bda8:	fb02 f201 	mul.w	r2, r2, r1
 800bdac:	1a9b      	subs	r3, r3, r2
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d001      	beq.n	800bdb8 <find_volume+0x2a8>
 800bdb4:	230d      	movs	r3, #13
 800bdb6:	e12a      	b.n	800c00e <find_volume+0x4fe>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdba:	333c      	adds	r3, #60	; 0x3c
 800bdbc:	3313      	adds	r3, #19
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f7fd fe6e 	bl	8009aa0 <ld_word>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bdc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d106      	bne.n	800bddc <find_volume+0x2cc>
 800bdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd0:	333c      	adds	r3, #60	; 0x3c
 800bdd2:	3320      	adds	r3, #32
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fd fe7b 	bl	8009ad0 <ld_dword>
 800bdda:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdde:	333c      	adds	r3, #60	; 0x3c
 800bde0:	330e      	adds	r3, #14
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7fd fe5c 	bl	8009aa0 <ld_word>
 800bde8:	4603      	mov	r3, r0
 800bdea:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bdec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d104      	bne.n	800bdfc <find_volume+0x2ec>
 800bdf2:	230d      	movs	r3, #13
 800bdf4:	e10b      	b.n	800c00e <find_volume+0x4fe>
 800bdf6:	bf00      	nop
 800bdf8:	2000023c 	.word	0x2000023c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bdfc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bdfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be00:	4413      	add	r3, r2
 800be02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be04:	8911      	ldrh	r1, [r2, #8]
 800be06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be08:	8992      	ldrh	r2, [r2, #12]
 800be0a:	0952      	lsrs	r2, r2, #5
 800be0c:	b292      	uxth	r2, r2
 800be0e:	fbb1 f2f2 	udiv	r2, r1, r2
 800be12:	b292      	uxth	r2, r2
 800be14:	4413      	add	r3, r2
 800be16:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800be18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d201      	bcs.n	800be24 <find_volume+0x314>
 800be20:	230d      	movs	r3, #13
 800be22:	e0f4      	b.n	800c00e <find_volume+0x4fe>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800be24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be2c:	8952      	ldrh	r2, [r2, #10]
 800be2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800be32:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800be34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be36:	2b00      	cmp	r3, #0
 800be38:	d101      	bne.n	800be3e <find_volume+0x32e>
 800be3a:	230d      	movs	r3, #13
 800be3c:	e0e7      	b.n	800c00e <find_volume+0x4fe>
		fmt = FS_FAT32;
 800be3e:	2303      	movs	r3, #3
 800be40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800be44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be46:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d802      	bhi.n	800be54 <find_volume+0x344>
 800be4e:	2302      	movs	r3, #2
 800be50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800be54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be56:	f640 72f5 	movw	r2, #4085	; 0xff5
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d802      	bhi.n	800be64 <find_volume+0x354>
 800be5e:	2301      	movs	r3, #1
 800be60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800be64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be66:	1c9a      	adds	r2, r3, #2
 800be68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6a:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800be6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be70:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800be72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800be74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be76:	441a      	add	r2, r3
 800be78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7a:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800be7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be80:	441a      	add	r2, r3
 800be82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be84:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800be86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be8a:	2b03      	cmp	r3, #3
 800be8c:	d11e      	bne.n	800becc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800be8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be90:	333c      	adds	r3, #60	; 0x3c
 800be92:	332a      	adds	r3, #42	; 0x2a
 800be94:	4618      	mov	r0, r3
 800be96:	f7fd fe03 	bl	8009aa0 <ld_word>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d001      	beq.n	800bea4 <find_volume+0x394>
 800bea0:	230d      	movs	r3, #13
 800bea2:	e0b4      	b.n	800c00e <find_volume+0x4fe>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea6:	891b      	ldrh	r3, [r3, #8]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d001      	beq.n	800beb0 <find_volume+0x3a0>
 800beac:	230d      	movs	r3, #13
 800beae:	e0ae      	b.n	800c00e <find_volume+0x4fe>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800beb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb2:	333c      	adds	r3, #60	; 0x3c
 800beb4:	332c      	adds	r3, #44	; 0x2c
 800beb6:	4618      	mov	r0, r3
 800beb8:	f7fd fe0a 	bl	8009ad0 <ld_dword>
 800bebc:	4602      	mov	r2, r0
 800bebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec0:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec4:	6a1b      	ldr	r3, [r3, #32]
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	647b      	str	r3, [r7, #68]	; 0x44
 800beca:	e01f      	b.n	800bf0c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800becc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bece:	891b      	ldrh	r3, [r3, #8]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d101      	bne.n	800bed8 <find_volume+0x3c8>
 800bed4:	230d      	movs	r3, #13
 800bed6:	e09a      	b.n	800c00e <find_volume+0x4fe>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bedc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bede:	441a      	add	r2, r3
 800bee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee2:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bee4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bee8:	2b02      	cmp	r3, #2
 800beea:	d103      	bne.n	800bef4 <find_volume+0x3e4>
 800beec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beee:	6a1b      	ldr	r3, [r3, #32]
 800bef0:	005b      	lsls	r3, r3, #1
 800bef2:	e00a      	b.n	800bf0a <find_volume+0x3fa>
 800bef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef6:	6a1a      	ldr	r2, [r3, #32]
 800bef8:	4613      	mov	r3, r2
 800befa:	005b      	lsls	r3, r3, #1
 800befc:	4413      	add	r3, r2
 800befe:	085a      	lsrs	r2, r3, #1
 800bf00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf02:	6a1b      	ldr	r3, [r3, #32]
 800bf04:	f003 0301 	and.w	r3, r3, #1
 800bf08:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bf0a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf12:	899b      	ldrh	r3, [r3, #12]
 800bf14:	4619      	mov	r1, r3
 800bf16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf18:	440b      	add	r3, r1
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bf1e:	8989      	ldrh	r1, [r1, #12]
 800bf20:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d201      	bcs.n	800bf2c <find_volume+0x41c>
 800bf28:	230d      	movs	r3, #13
 800bf2a:	e070      	b.n	800c00e <find_volume+0x4fe>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bf2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf32:	619a      	str	r2, [r3, #24]
 800bf34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf36:	699a      	ldr	r2, [r3, #24]
 800bf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800bf3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3e:	2280      	movs	r2, #128	; 0x80
 800bf40:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bf42:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf46:	2b03      	cmp	r3, #3
 800bf48:	d149      	bne.n	800bfde <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4c:	333c      	adds	r3, #60	; 0x3c
 800bf4e:	3330      	adds	r3, #48	; 0x30
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7fd fda5 	bl	8009aa0 <ld_word>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d140      	bne.n	800bfde <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bf5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf5e:	3301      	adds	r3, #1
 800bf60:	4619      	mov	r1, r3
 800bf62:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf64:	f7fe f84c 	bl	800a000 <move_window>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d137      	bne.n	800bfde <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800bf6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf70:	2200      	movs	r2, #0
 800bf72:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf76:	333c      	adds	r3, #60	; 0x3c
 800bf78:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7fd fd8f 	bl	8009aa0 <ld_word>
 800bf82:	4603      	mov	r3, r0
 800bf84:	461a      	mov	r2, r3
 800bf86:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d127      	bne.n	800bfde <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bf8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf90:	333c      	adds	r3, #60	; 0x3c
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7fd fd9c 	bl	8009ad0 <ld_dword>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	4b1f      	ldr	r3, [pc, #124]	; (800c018 <find_volume+0x508>)
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d11e      	bne.n	800bfde <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa2:	333c      	adds	r3, #60	; 0x3c
 800bfa4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7fd fd91 	bl	8009ad0 <ld_dword>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	4b1a      	ldr	r3, [pc, #104]	; (800c01c <find_volume+0x50c>)
 800bfb2:	429a      	cmp	r2, r3
 800bfb4:	d113      	bne.n	800bfde <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb8:	333c      	adds	r3, #60	; 0x3c
 800bfba:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fd fd86 	bl	8009ad0 <ld_dword>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc8:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfcc:	333c      	adds	r3, #60	; 0x3c
 800bfce:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fd fd7c 	bl	8009ad0 <ld_dword>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfdc:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bfe4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bfe6:	4b0e      	ldr	r3, [pc, #56]	; (800c020 <find_volume+0x510>)
 800bfe8:	881b      	ldrh	r3, [r3, #0]
 800bfea:	3301      	adds	r3, #1
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	4b0c      	ldr	r3, [pc, #48]	; (800c020 <find_volume+0x510>)
 800bff0:	801a      	strh	r2, [r3, #0]
 800bff2:	4b0b      	ldr	r3, [pc, #44]	; (800c020 <find_volume+0x510>)
 800bff4:	881a      	ldrh	r2, [r3, #0]
 800bff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bff8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffc:	4a09      	ldr	r2, [pc, #36]	; (800c024 <find_volume+0x514>)
 800bffe:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800c000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c002:	2200      	movs	r2, #0
 800c004:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c006:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c008:	f7fd ff92 	bl	8009f30 <clear_lock>
#endif
	return FR_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3758      	adds	r7, #88	; 0x58
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	41615252 	.word	0x41615252
 800c01c:	61417272 	.word	0x61417272
 800c020:	20000240 	.word	0x20000240
 800c024:	20000264 	.word	0x20000264

0800c028 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c032:	2309      	movs	r3, #9
 800c034:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d01c      	beq.n	800c076 <validate+0x4e>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d018      	beq.n	800c076 <validate+0x4e>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d013      	beq.n	800c076 <validate+0x4e>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	889a      	ldrh	r2, [r3, #4]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	88db      	ldrh	r3, [r3, #6]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d10c      	bne.n	800c076 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	785b      	ldrb	r3, [r3, #1]
 800c062:	4618      	mov	r0, r3
 800c064:	f7fd fc7e 	bl	8009964 <disk_status>
 800c068:	4603      	mov	r3, r0
 800c06a:	f003 0301 	and.w	r3, r3, #1
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d101      	bne.n	800c076 <validate+0x4e>
			res = FR_OK;
 800c072:	2300      	movs	r3, #0
 800c074:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c076:	7bfb      	ldrb	r3, [r7, #15]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d102      	bne.n	800c082 <validate+0x5a>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	e000      	b.n	800c084 <validate+0x5c>
 800c082:	2300      	movs	r3, #0
 800c084:	683a      	ldr	r2, [r7, #0]
 800c086:	6013      	str	r3, [r2, #0]
	return res;
 800c088:	7bfb      	ldrb	r3, [r7, #15]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
	...

0800c094 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b088      	sub	sp, #32
 800c098:	af00      	add	r7, sp, #0
 800c09a:	60f8      	str	r0, [r7, #12]
 800c09c:	60b9      	str	r1, [r7, #8]
 800c09e:	4613      	mov	r3, r2
 800c0a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c0a6:	f107 0310 	add.w	r3, r7, #16
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f7ff fc95 	bl	800b9da <get_ldnumber>
 800c0b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c0b2:	69fb      	ldr	r3, [r7, #28]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	da01      	bge.n	800c0bc <f_mount+0x28>
 800c0b8:	230b      	movs	r3, #11
 800c0ba:	e02b      	b.n	800c114 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c0bc:	4a17      	ldr	r2, [pc, #92]	; (800c11c <f_mount+0x88>)
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c0c6:	69bb      	ldr	r3, [r7, #24]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d005      	beq.n	800c0d8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c0cc:	69b8      	ldr	r0, [r7, #24]
 800c0ce:	f7fd ff2f 	bl	8009f30 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d002      	beq.n	800c0e4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c0e4:	68fa      	ldr	r2, [r7, #12]
 800c0e6:	490d      	ldr	r1, [pc, #52]	; (800c11c <f_mount+0x88>)
 800c0e8:	69fb      	ldr	r3, [r7, #28]
 800c0ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d002      	beq.n	800c0fa <f_mount+0x66>
 800c0f4:	79fb      	ldrb	r3, [r7, #7]
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d001      	beq.n	800c0fe <f_mount+0x6a>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e00a      	b.n	800c114 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c0fe:	f107 010c 	add.w	r1, r7, #12
 800c102:	f107 0308 	add.w	r3, r7, #8
 800c106:	2200      	movs	r2, #0
 800c108:	4618      	mov	r0, r3
 800c10a:	f7ff fd01 	bl	800bb10 <find_volume>
 800c10e:	4603      	mov	r3, r0
 800c110:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c112:	7dfb      	ldrb	r3, [r7, #23]
}
 800c114:	4618      	mov	r0, r3
 800c116:	3720      	adds	r7, #32
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	2000023c 	.word	0x2000023c

0800c120 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b09a      	sub	sp, #104	; 0x68
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	4613      	mov	r3, r2
 800c12c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d101      	bne.n	800c138 <f_open+0x18>
 800c134:	2309      	movs	r3, #9
 800c136:	e1bb      	b.n	800c4b0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c138:	79fb      	ldrb	r3, [r7, #7]
 800c13a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c13e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c140:	79fa      	ldrb	r2, [r7, #7]
 800c142:	f107 0114 	add.w	r1, r7, #20
 800c146:	f107 0308 	add.w	r3, r7, #8
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7ff fce0 	bl	800bb10 <find_volume>
 800c150:	4603      	mov	r3, r0
 800c152:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800c156:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	f040 819f 	bne.w	800c49e <f_open+0x37e>
		dj.obj.fs = fs;
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c164:	68ba      	ldr	r2, [r7, #8]
 800c166:	f107 0318 	add.w	r3, r7, #24
 800c16a:	4611      	mov	r1, r2
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7ff fb9f 	bl	800b8b0 <follow_path>
 800c172:	4603      	mov	r3, r0
 800c174:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c178:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d11a      	bne.n	800c1b6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c180:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800c184:	b25b      	sxtb	r3, r3
 800c186:	2b00      	cmp	r3, #0
 800c188:	da03      	bge.n	800c192 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c18a:	2306      	movs	r3, #6
 800c18c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c190:	e011      	b.n	800c1b6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c192:	79fb      	ldrb	r3, [r7, #7]
 800c194:	f023 0301 	bic.w	r3, r3, #1
 800c198:	2b00      	cmp	r3, #0
 800c19a:	bf14      	ite	ne
 800c19c:	2301      	movne	r3, #1
 800c19e:	2300      	moveq	r3, #0
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	f107 0318 	add.w	r3, r7, #24
 800c1a8:	4611      	mov	r1, r2
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7fd fd78 	bl	8009ca0 <chk_lock>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c1b6:	79fb      	ldrb	r3, [r7, #7]
 800c1b8:	f003 031c 	and.w	r3, r3, #28
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d07f      	beq.n	800c2c0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c1c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d017      	beq.n	800c1f8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c1c8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c1cc:	2b04      	cmp	r3, #4
 800c1ce:	d10e      	bne.n	800c1ee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c1d0:	f7fd fdc2 	bl	8009d58 <enq_lock>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d006      	beq.n	800c1e8 <f_open+0xc8>
 800c1da:	f107 0318 	add.w	r3, r7, #24
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7ff f820 	bl	800b224 <dir_register>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	e000      	b.n	800c1ea <f_open+0xca>
 800c1e8:	2312      	movs	r3, #18
 800c1ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c1ee:	79fb      	ldrb	r3, [r7, #7]
 800c1f0:	f043 0308 	orr.w	r3, r3, #8
 800c1f4:	71fb      	strb	r3, [r7, #7]
 800c1f6:	e010      	b.n	800c21a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c1f8:	7fbb      	ldrb	r3, [r7, #30]
 800c1fa:	f003 0311 	and.w	r3, r3, #17
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d003      	beq.n	800c20a <f_open+0xea>
					res = FR_DENIED;
 800c202:	2307      	movs	r3, #7
 800c204:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c208:	e007      	b.n	800c21a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c20a:	79fb      	ldrb	r3, [r7, #7]
 800c20c:	f003 0304 	and.w	r3, r3, #4
 800c210:	2b00      	cmp	r3, #0
 800c212:	d002      	beq.n	800c21a <f_open+0xfa>
 800c214:	2308      	movs	r3, #8
 800c216:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c21a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d168      	bne.n	800c2f4 <f_open+0x1d4>
 800c222:	79fb      	ldrb	r3, [r7, #7]
 800c224:	f003 0308 	and.w	r3, r3, #8
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d063      	beq.n	800c2f4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c22c:	f7fd f94a 	bl	80094c4 <get_fattime>
 800c230:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c234:	330e      	adds	r3, #14
 800c236:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c238:	4618      	mov	r0, r3
 800c23a:	f7fd fc87 	bl	8009b4c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c240:	3316      	adds	r3, #22
 800c242:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c244:	4618      	mov	r0, r3
 800c246:	f7fd fc81 	bl	8009b4c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24c:	330b      	adds	r3, #11
 800c24e:	2220      	movs	r2, #32
 800c250:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c256:	4611      	mov	r1, r2
 800c258:	4618      	mov	r0, r3
 800c25a:	f7fe fc50 	bl	800aafe <ld_clust>
 800c25e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c264:	2200      	movs	r2, #0
 800c266:	4618      	mov	r0, r3
 800c268:	f7fe fc68 	bl	800ab3c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c26e:	331c      	adds	r3, #28
 800c270:	2100      	movs	r1, #0
 800c272:	4618      	mov	r0, r3
 800c274:	f7fd fc6a 	bl	8009b4c <st_dword>
					fs->wflag = 1;
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	2201      	movs	r2, #1
 800c27c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c27e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c280:	2b00      	cmp	r3, #0
 800c282:	d037      	beq.n	800c2f4 <f_open+0x1d4>
						dw = fs->winsect;
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c288:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c28a:	f107 0318 	add.w	r3, r7, #24
 800c28e:	2200      	movs	r2, #0
 800c290:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c292:	4618      	mov	r0, r3
 800c294:	f7fe f958 	bl	800a548 <remove_chain>
 800c298:	4603      	mov	r3, r0
 800c29a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800c29e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d126      	bne.n	800c2f4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f7fd fea8 	bl	800a000 <move_window>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c2ba:	3a01      	subs	r2, #1
 800c2bc:	615a      	str	r2, [r3, #20]
 800c2be:	e019      	b.n	800c2f4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c2c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d115      	bne.n	800c2f4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c2c8:	7fbb      	ldrb	r3, [r7, #30]
 800c2ca:	f003 0310 	and.w	r3, r3, #16
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d003      	beq.n	800c2da <f_open+0x1ba>
					res = FR_NO_FILE;
 800c2d2:	2304      	movs	r3, #4
 800c2d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c2d8:	e00c      	b.n	800c2f4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c2da:	79fb      	ldrb	r3, [r7, #7]
 800c2dc:	f003 0302 	and.w	r3, r3, #2
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d007      	beq.n	800c2f4 <f_open+0x1d4>
 800c2e4:	7fbb      	ldrb	r3, [r7, #30]
 800c2e6:	f003 0301 	and.w	r3, r3, #1
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d002      	beq.n	800c2f4 <f_open+0x1d4>
						res = FR_DENIED;
 800c2ee:	2307      	movs	r3, #7
 800c2f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c2f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d128      	bne.n	800c34e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c2fc:	79fb      	ldrb	r3, [r7, #7]
 800c2fe:	f003 0308 	and.w	r3, r3, #8
 800c302:	2b00      	cmp	r3, #0
 800c304:	d003      	beq.n	800c30e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c306:	79fb      	ldrb	r3, [r7, #7]
 800c308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c30c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c316:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c31c:	79fb      	ldrb	r3, [r7, #7]
 800c31e:	f023 0301 	bic.w	r3, r3, #1
 800c322:	2b00      	cmp	r3, #0
 800c324:	bf14      	ite	ne
 800c326:	2301      	movne	r3, #1
 800c328:	2300      	moveq	r3, #0
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	461a      	mov	r2, r3
 800c32e:	f107 0318 	add.w	r3, r7, #24
 800c332:	4611      	mov	r1, r2
 800c334:	4618      	mov	r0, r3
 800c336:	f7fd fd31 	bl	8009d9c <inc_lock>
 800c33a:	4602      	mov	r2, r0
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	691b      	ldr	r3, [r3, #16]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d102      	bne.n	800c34e <f_open+0x22e>
 800c348:	2302      	movs	r3, #2
 800c34a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c34e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c352:	2b00      	cmp	r3, #0
 800c354:	f040 80a3 	bne.w	800c49e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c35c:	4611      	mov	r1, r2
 800c35e:	4618      	mov	r0, r3
 800c360:	f7fe fbcd 	bl	800aafe <ld_clust>
 800c364:	4602      	mov	r2, r0
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36c:	331c      	adds	r3, #28
 800c36e:	4618      	mov	r0, r3
 800c370:	f7fd fbae 	bl	8009ad0 <ld_dword>
 800c374:	4602      	mov	r2, r0
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2200      	movs	r2, #0
 800c37e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c380:	697a      	ldr	r2, [r7, #20]
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	88da      	ldrh	r2, [r3, #6]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	79fa      	ldrb	r2, [r7, #7]
 800c392:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2200      	movs	r2, #0
 800c398:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2200      	movs	r2, #0
 800c39e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	3330      	adds	r3, #48	; 0x30
 800c3aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7fd fc18 	bl	8009be6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c3b6:	79fb      	ldrb	r3, [r7, #7]
 800c3b8:	f003 0320 	and.w	r3, r3, #32
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d06e      	beq.n	800c49e <f_open+0x37e>
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d06a      	beq.n	800c49e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	68da      	ldr	r2, [r3, #12]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	895b      	ldrh	r3, [r3, #10]
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	899b      	ldrh	r3, [r3, #12]
 800c3da:	fb03 f302 	mul.w	r3, r3, r2
 800c3de:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	689b      	ldr	r3, [r3, #8]
 800c3e4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c3ec:	e016      	b.n	800c41c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7fd fec1 	bl	800a17a <get_fat>
 800c3f8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c3fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	d802      	bhi.n	800c406 <f_open+0x2e6>
 800c400:	2302      	movs	r3, #2
 800c402:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c406:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c40c:	d102      	bne.n	800c414 <f_open+0x2f4>
 800c40e:	2301      	movs	r3, #1
 800c410:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c414:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c41c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c420:	2b00      	cmp	r3, #0
 800c422:	d103      	bne.n	800c42c <f_open+0x30c>
 800c424:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c428:	429a      	cmp	r2, r3
 800c42a:	d8e0      	bhi.n	800c3ee <f_open+0x2ce>
				}
				fp->clust = clst;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c430:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c432:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c436:	2b00      	cmp	r3, #0
 800c438:	d131      	bne.n	800c49e <f_open+0x37e>
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	899b      	ldrh	r3, [r3, #12]
 800c43e:	461a      	mov	r2, r3
 800c440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c442:	fbb3 f1f2 	udiv	r1, r3, r2
 800c446:	fb02 f201 	mul.w	r2, r2, r1
 800c44a:	1a9b      	subs	r3, r3, r2
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d026      	beq.n	800c49e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c454:	4618      	mov	r0, r3
 800c456:	f7fd fe71 	bl	800a13c <clust2sect>
 800c45a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c45c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d103      	bne.n	800c46a <f_open+0x34a>
						res = FR_INT_ERR;
 800c462:	2302      	movs	r3, #2
 800c464:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c468:	e019      	b.n	800c49e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	899b      	ldrh	r3, [r3, #12]
 800c46e:	461a      	mov	r2, r3
 800c470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c472:	fbb3 f2f2 	udiv	r2, r3, r2
 800c476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c478:	441a      	add	r2, r3
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	7858      	ldrb	r0, [r3, #1]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	6a1a      	ldr	r2, [r3, #32]
 800c48c:	2301      	movs	r3, #1
 800c48e:	f7fd faa9 	bl	80099e4 <disk_read>
 800c492:	4603      	mov	r3, r0
 800c494:	2b00      	cmp	r3, #0
 800c496:	d002      	beq.n	800c49e <f_open+0x37e>
 800c498:	2301      	movs	r3, #1
 800c49a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c49e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d002      	beq.n	800c4ac <f_open+0x38c>
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c4ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3768      	adds	r7, #104	; 0x68
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b08e      	sub	sp, #56	; 0x38
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	60f8      	str	r0, [r7, #12]
 800c4c0:	60b9      	str	r1, [r7, #8]
 800c4c2:	607a      	str	r2, [r7, #4]
 800c4c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f107 0214 	add.w	r2, r7, #20
 800c4d6:	4611      	mov	r1, r2
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f7ff fda5 	bl	800c028 <validate>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c4e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d107      	bne.n	800c4fc <f_read+0x44>
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	7d5b      	ldrb	r3, [r3, #21]
 800c4f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c4f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d002      	beq.n	800c502 <f_read+0x4a>
 800c4fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c500:	e135      	b.n	800c76e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	7d1b      	ldrb	r3, [r3, #20]
 800c506:	f003 0301 	and.w	r3, r3, #1
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d101      	bne.n	800c512 <f_read+0x5a>
 800c50e:	2307      	movs	r3, #7
 800c510:	e12d      	b.n	800c76e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	68da      	ldr	r2, [r3, #12]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	699b      	ldr	r3, [r3, #24]
 800c51a:	1ad3      	subs	r3, r2, r3
 800c51c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	6a3b      	ldr	r3, [r7, #32]
 800c522:	429a      	cmp	r2, r3
 800c524:	f240 811e 	bls.w	800c764 <f_read+0x2ac>
 800c528:	6a3b      	ldr	r3, [r7, #32]
 800c52a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c52c:	e11a      	b.n	800c764 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	699b      	ldr	r3, [r3, #24]
 800c532:	697a      	ldr	r2, [r7, #20]
 800c534:	8992      	ldrh	r2, [r2, #12]
 800c536:	fbb3 f1f2 	udiv	r1, r3, r2
 800c53a:	fb02 f201 	mul.w	r2, r2, r1
 800c53e:	1a9b      	subs	r3, r3, r2
 800c540:	2b00      	cmp	r3, #0
 800c542:	f040 80d5 	bne.w	800c6f0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	699b      	ldr	r3, [r3, #24]
 800c54a:	697a      	ldr	r2, [r7, #20]
 800c54c:	8992      	ldrh	r2, [r2, #12]
 800c54e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c552:	697a      	ldr	r2, [r7, #20]
 800c554:	8952      	ldrh	r2, [r2, #10]
 800c556:	3a01      	subs	r2, #1
 800c558:	4013      	ands	r3, r2
 800c55a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c55c:	69fb      	ldr	r3, [r7, #28]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d12f      	bne.n	800c5c2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	699b      	ldr	r3, [r3, #24]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d103      	bne.n	800c572 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	689b      	ldr	r3, [r3, #8]
 800c56e:	633b      	str	r3, [r7, #48]	; 0x30
 800c570:	e013      	b.n	800c59a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c576:	2b00      	cmp	r3, #0
 800c578:	d007      	beq.n	800c58a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	699b      	ldr	r3, [r3, #24]
 800c57e:	4619      	mov	r1, r3
 800c580:	68f8      	ldr	r0, [r7, #12]
 800c582:	f7fe f8de 	bl	800a742 <clmt_clust>
 800c586:	6338      	str	r0, [r7, #48]	; 0x30
 800c588:	e007      	b.n	800c59a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	69db      	ldr	r3, [r3, #28]
 800c590:	4619      	mov	r1, r3
 800c592:	4610      	mov	r0, r2
 800c594:	f7fd fdf1 	bl	800a17a <get_fat>
 800c598:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d804      	bhi.n	800c5aa <f_read+0xf2>
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2202      	movs	r2, #2
 800c5a4:	755a      	strb	r2, [r3, #21]
 800c5a6:	2302      	movs	r3, #2
 800c5a8:	e0e1      	b.n	800c76e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b0:	d104      	bne.n	800c5bc <f_read+0x104>
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	755a      	strb	r2, [r3, #21]
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	e0d8      	b.n	800c76e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5c0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c5c2:	697a      	ldr	r2, [r7, #20]
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	69db      	ldr	r3, [r3, #28]
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	4610      	mov	r0, r2
 800c5cc:	f7fd fdb6 	bl	800a13c <clust2sect>
 800c5d0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d104      	bne.n	800c5e2 <f_read+0x12a>
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2202      	movs	r2, #2
 800c5dc:	755a      	strb	r2, [r3, #21]
 800c5de:	2302      	movs	r3, #2
 800c5e0:	e0c5      	b.n	800c76e <f_read+0x2b6>
			sect += csect;
 800c5e2:	69ba      	ldr	r2, [r7, #24]
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	4413      	add	r3, r2
 800c5e8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	899b      	ldrh	r3, [r3, #12]
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5f6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d041      	beq.n	800c682 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c5fe:	69fa      	ldr	r2, [r7, #28]
 800c600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c602:	4413      	add	r3, r2
 800c604:	697a      	ldr	r2, [r7, #20]
 800c606:	8952      	ldrh	r2, [r2, #10]
 800c608:	4293      	cmp	r3, r2
 800c60a:	d905      	bls.n	800c618 <f_read+0x160>
					cc = fs->csize - csect;
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	895b      	ldrh	r3, [r3, #10]
 800c610:	461a      	mov	r2, r3
 800c612:	69fb      	ldr	r3, [r7, #28]
 800c614:	1ad3      	subs	r3, r2, r3
 800c616:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	7858      	ldrb	r0, [r3, #1]
 800c61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61e:	69ba      	ldr	r2, [r7, #24]
 800c620:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c622:	f7fd f9df 	bl	80099e4 <disk_read>
 800c626:	4603      	mov	r3, r0
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d004      	beq.n	800c636 <f_read+0x17e>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2201      	movs	r2, #1
 800c630:	755a      	strb	r2, [r3, #21]
 800c632:	2301      	movs	r3, #1
 800c634:	e09b      	b.n	800c76e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	7d1b      	ldrb	r3, [r3, #20]
 800c63a:	b25b      	sxtb	r3, r3
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	da18      	bge.n	800c672 <f_read+0x1ba>
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6a1a      	ldr	r2, [r3, #32]
 800c644:	69bb      	ldr	r3, [r7, #24]
 800c646:	1ad3      	subs	r3, r2, r3
 800c648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d911      	bls.n	800c672 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	6a1a      	ldr	r2, [r3, #32]
 800c652:	69bb      	ldr	r3, [r7, #24]
 800c654:	1ad3      	subs	r3, r2, r3
 800c656:	697a      	ldr	r2, [r7, #20]
 800c658:	8992      	ldrh	r2, [r2, #12]
 800c65a:	fb02 f303 	mul.w	r3, r2, r3
 800c65e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c660:	18d0      	adds	r0, r2, r3
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	899b      	ldrh	r3, [r3, #12]
 800c66c:	461a      	mov	r2, r3
 800c66e:	f7fd fa99 	bl	8009ba4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	899b      	ldrh	r3, [r3, #12]
 800c676:	461a      	mov	r2, r3
 800c678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67a:	fb02 f303 	mul.w	r3, r2, r3
 800c67e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c680:	e05c      	b.n	800c73c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	6a1b      	ldr	r3, [r3, #32]
 800c686:	69ba      	ldr	r2, [r7, #24]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d02e      	beq.n	800c6ea <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	7d1b      	ldrb	r3, [r3, #20]
 800c690:	b25b      	sxtb	r3, r3
 800c692:	2b00      	cmp	r3, #0
 800c694:	da18      	bge.n	800c6c8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	7858      	ldrb	r0, [r3, #1]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6a1a      	ldr	r2, [r3, #32]
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	f7fd f9bd 	bl	8009a24 <disk_write>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d004      	beq.n	800c6ba <f_read+0x202>
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	755a      	strb	r2, [r3, #21]
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	e059      	b.n	800c76e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	7d1b      	ldrb	r3, [r3, #20]
 800c6be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6c2:	b2da      	uxtb	r2, r3
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	7858      	ldrb	r0, [r3, #1]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	69ba      	ldr	r2, [r7, #24]
 800c6d6:	f7fd f985 	bl	80099e4 <disk_read>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d004      	beq.n	800c6ea <f_read+0x232>
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	755a      	strb	r2, [r3, #21]
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	e041      	b.n	800c76e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	69ba      	ldr	r2, [r7, #24]
 800c6ee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	899b      	ldrh	r3, [r3, #12]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	699b      	ldr	r3, [r3, #24]
 800c6fa:	697a      	ldr	r2, [r7, #20]
 800c6fc:	8992      	ldrh	r2, [r2, #12]
 800c6fe:	fbb3 f1f2 	udiv	r1, r3, r2
 800c702:	fb02 f201 	mul.w	r2, r2, r1
 800c706:	1a9b      	subs	r3, r3, r2
 800c708:	1ac3      	subs	r3, r0, r3
 800c70a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c70c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	429a      	cmp	r2, r3
 800c712:	d901      	bls.n	800c718 <f_read+0x260>
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	699b      	ldr	r3, [r3, #24]
 800c722:	697a      	ldr	r2, [r7, #20]
 800c724:	8992      	ldrh	r2, [r2, #12]
 800c726:	fbb3 f0f2 	udiv	r0, r3, r2
 800c72a:	fb02 f200 	mul.w	r2, r2, r0
 800c72e:	1a9b      	subs	r3, r3, r2
 800c730:	440b      	add	r3, r1
 800c732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c734:	4619      	mov	r1, r3
 800c736:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c738:	f7fd fa34 	bl	8009ba4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c73c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c740:	4413      	add	r3, r2
 800c742:	627b      	str	r3, [r7, #36]	; 0x24
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	699a      	ldr	r2, [r3, #24]
 800c748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74a:	441a      	add	r2, r3
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	619a      	str	r2, [r3, #24]
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c756:	441a      	add	r2, r3
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	601a      	str	r2, [r3, #0]
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c760:	1ad3      	subs	r3, r2, r3
 800c762:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	f47f aee1 	bne.w	800c52e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c76c:	2300      	movs	r3, #0
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3738      	adds	r7, #56	; 0x38
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b08c      	sub	sp, #48	; 0x30
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	60f8      	str	r0, [r7, #12]
 800c77e:	60b9      	str	r1, [r7, #8]
 800c780:	607a      	str	r2, [r7, #4]
 800c782:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	2200      	movs	r2, #0
 800c78c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f107 0210 	add.w	r2, r7, #16
 800c794:	4611      	mov	r1, r2
 800c796:	4618      	mov	r0, r3
 800c798:	f7ff fc46 	bl	800c028 <validate>
 800c79c:	4603      	mov	r3, r0
 800c79e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c7a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d107      	bne.n	800c7ba <f_write+0x44>
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	7d5b      	ldrb	r3, [r3, #21]
 800c7ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c7b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d002      	beq.n	800c7c0 <f_write+0x4a>
 800c7ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c7be:	e16a      	b.n	800ca96 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	7d1b      	ldrb	r3, [r3, #20]
 800c7c4:	f003 0302 	and.w	r3, r3, #2
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d101      	bne.n	800c7d0 <f_write+0x5a>
 800c7cc:	2307      	movs	r3, #7
 800c7ce:	e162      	b.n	800ca96 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	699a      	ldr	r2, [r3, #24]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	441a      	add	r2, r3
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	699b      	ldr	r3, [r3, #24]
 800c7dc:	429a      	cmp	r2, r3
 800c7de:	f080 814c 	bcs.w	800ca7a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	699b      	ldr	r3, [r3, #24]
 800c7e6:	43db      	mvns	r3, r3
 800c7e8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c7ea:	e146      	b.n	800ca7a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	699b      	ldr	r3, [r3, #24]
 800c7f0:	693a      	ldr	r2, [r7, #16]
 800c7f2:	8992      	ldrh	r2, [r2, #12]
 800c7f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7f8:	fb02 f201 	mul.w	r2, r2, r1
 800c7fc:	1a9b      	subs	r3, r3, r2
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	f040 80f1 	bne.w	800c9e6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	699b      	ldr	r3, [r3, #24]
 800c808:	693a      	ldr	r2, [r7, #16]
 800c80a:	8992      	ldrh	r2, [r2, #12]
 800c80c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c810:	693a      	ldr	r2, [r7, #16]
 800c812:	8952      	ldrh	r2, [r2, #10]
 800c814:	3a01      	subs	r2, #1
 800c816:	4013      	ands	r3, r2
 800c818:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c81a:	69bb      	ldr	r3, [r7, #24]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d143      	bne.n	800c8a8 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	699b      	ldr	r3, [r3, #24]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d10c      	bne.n	800c842 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	689b      	ldr	r3, [r3, #8]
 800c82c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c830:	2b00      	cmp	r3, #0
 800c832:	d11a      	bne.n	800c86a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	2100      	movs	r1, #0
 800c838:	4618      	mov	r0, r3
 800c83a:	f7fd feea 	bl	800a612 <create_chain>
 800c83e:	62b8      	str	r0, [r7, #40]	; 0x28
 800c840:	e013      	b.n	800c86a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c846:	2b00      	cmp	r3, #0
 800c848:	d007      	beq.n	800c85a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	699b      	ldr	r3, [r3, #24]
 800c84e:	4619      	mov	r1, r3
 800c850:	68f8      	ldr	r0, [r7, #12]
 800c852:	f7fd ff76 	bl	800a742 <clmt_clust>
 800c856:	62b8      	str	r0, [r7, #40]	; 0x28
 800c858:	e007      	b.n	800c86a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c85a:	68fa      	ldr	r2, [r7, #12]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	69db      	ldr	r3, [r3, #28]
 800c860:	4619      	mov	r1, r3
 800c862:	4610      	mov	r0, r2
 800c864:	f7fd fed5 	bl	800a612 <create_chain>
 800c868:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f000 8109 	beq.w	800ca84 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c874:	2b01      	cmp	r3, #1
 800c876:	d104      	bne.n	800c882 <f_write+0x10c>
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2202      	movs	r2, #2
 800c87c:	755a      	strb	r2, [r3, #21]
 800c87e:	2302      	movs	r3, #2
 800c880:	e109      	b.n	800ca96 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c884:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c888:	d104      	bne.n	800c894 <f_write+0x11e>
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2201      	movs	r2, #1
 800c88e:	755a      	strb	r2, [r3, #21]
 800c890:	2301      	movs	r3, #1
 800c892:	e100      	b.n	800ca96 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c898:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d102      	bne.n	800c8a8 <f_write+0x132>
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8a6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	7d1b      	ldrb	r3, [r3, #20]
 800c8ac:	b25b      	sxtb	r3, r3
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	da18      	bge.n	800c8e4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	7858      	ldrb	r0, [r3, #1]
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	6a1a      	ldr	r2, [r3, #32]
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	f7fd f8af 	bl	8009a24 <disk_write>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d004      	beq.n	800c8d6 <f_write+0x160>
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2201      	movs	r2, #1
 800c8d0:	755a      	strb	r2, [r3, #21]
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e0df      	b.n	800ca96 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	7d1b      	ldrb	r3, [r3, #20]
 800c8da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8de:	b2da      	uxtb	r2, r3
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c8e4:	693a      	ldr	r2, [r7, #16]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	69db      	ldr	r3, [r3, #28]
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	4610      	mov	r0, r2
 800c8ee:	f7fd fc25 	bl	800a13c <clust2sect>
 800c8f2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d104      	bne.n	800c904 <f_write+0x18e>
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2202      	movs	r2, #2
 800c8fe:	755a      	strb	r2, [r3, #21]
 800c900:	2302      	movs	r3, #2
 800c902:	e0c8      	b.n	800ca96 <f_write+0x320>
			sect += csect;
 800c904:	697a      	ldr	r2, [r7, #20]
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	4413      	add	r3, r2
 800c90a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c90c:	693b      	ldr	r3, [r7, #16]
 800c90e:	899b      	ldrh	r3, [r3, #12]
 800c910:	461a      	mov	r2, r3
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	fbb3 f3f2 	udiv	r3, r3, r2
 800c918:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c91a:	6a3b      	ldr	r3, [r7, #32]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d043      	beq.n	800c9a8 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c920:	69ba      	ldr	r2, [r7, #24]
 800c922:	6a3b      	ldr	r3, [r7, #32]
 800c924:	4413      	add	r3, r2
 800c926:	693a      	ldr	r2, [r7, #16]
 800c928:	8952      	ldrh	r2, [r2, #10]
 800c92a:	4293      	cmp	r3, r2
 800c92c:	d905      	bls.n	800c93a <f_write+0x1c4>
					cc = fs->csize - csect;
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	895b      	ldrh	r3, [r3, #10]
 800c932:	461a      	mov	r2, r3
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	1ad3      	subs	r3, r2, r3
 800c938:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	7858      	ldrb	r0, [r3, #1]
 800c93e:	6a3b      	ldr	r3, [r7, #32]
 800c940:	697a      	ldr	r2, [r7, #20]
 800c942:	69f9      	ldr	r1, [r7, #28]
 800c944:	f7fd f86e 	bl	8009a24 <disk_write>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d004      	beq.n	800c958 <f_write+0x1e2>
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2201      	movs	r2, #1
 800c952:	755a      	strb	r2, [r3, #21]
 800c954:	2301      	movs	r3, #1
 800c956:	e09e      	b.n	800ca96 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6a1a      	ldr	r2, [r3, #32]
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	6a3a      	ldr	r2, [r7, #32]
 800c962:	429a      	cmp	r2, r3
 800c964:	d918      	bls.n	800c998 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	6a1a      	ldr	r2, [r3, #32]
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	1ad3      	subs	r3, r2, r3
 800c974:	693a      	ldr	r2, [r7, #16]
 800c976:	8992      	ldrh	r2, [r2, #12]
 800c978:	fb02 f303 	mul.w	r3, r2, r3
 800c97c:	69fa      	ldr	r2, [r7, #28]
 800c97e:	18d1      	adds	r1, r2, r3
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	899b      	ldrh	r3, [r3, #12]
 800c984:	461a      	mov	r2, r3
 800c986:	f7fd f90d 	bl	8009ba4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	7d1b      	ldrb	r3, [r3, #20]
 800c98e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c992:	b2da      	uxtb	r2, r3
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	899b      	ldrh	r3, [r3, #12]
 800c99c:	461a      	mov	r2, r3
 800c99e:	6a3b      	ldr	r3, [r7, #32]
 800c9a0:	fb02 f303 	mul.w	r3, r2, r3
 800c9a4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c9a6:	e04b      	b.n	800ca40 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6a1b      	ldr	r3, [r3, #32]
 800c9ac:	697a      	ldr	r2, [r7, #20]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d016      	beq.n	800c9e0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	699a      	ldr	r2, [r3, #24]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d210      	bcs.n	800c9e0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	7858      	ldrb	r0, [r3, #1]
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	697a      	ldr	r2, [r7, #20]
 800c9cc:	f7fd f80a 	bl	80099e4 <disk_read>
 800c9d0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d004      	beq.n	800c9e0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2201      	movs	r2, #1
 800c9da:	755a      	strb	r2, [r3, #21]
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e05a      	b.n	800ca96 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	697a      	ldr	r2, [r7, #20]
 800c9e4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	899b      	ldrh	r3, [r3, #12]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	699b      	ldr	r3, [r3, #24]
 800c9f0:	693a      	ldr	r2, [r7, #16]
 800c9f2:	8992      	ldrh	r2, [r2, #12]
 800c9f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c9f8:	fb02 f201 	mul.w	r2, r2, r1
 800c9fc:	1a9b      	subs	r3, r3, r2
 800c9fe:	1ac3      	subs	r3, r0, r3
 800ca00:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ca02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d901      	bls.n	800ca0e <f_write+0x298>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	699b      	ldr	r3, [r3, #24]
 800ca18:	693a      	ldr	r2, [r7, #16]
 800ca1a:	8992      	ldrh	r2, [r2, #12]
 800ca1c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca20:	fb02 f200 	mul.w	r2, r2, r0
 800ca24:	1a9b      	subs	r3, r3, r2
 800ca26:	440b      	add	r3, r1
 800ca28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca2a:	69f9      	ldr	r1, [r7, #28]
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7fd f8b9 	bl	8009ba4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	7d1b      	ldrb	r3, [r3, #20]
 800ca36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca3a:	b2da      	uxtb	r2, r3
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ca40:	69fa      	ldr	r2, [r7, #28]
 800ca42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca44:	4413      	add	r3, r2
 800ca46:	61fb      	str	r3, [r7, #28]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	699a      	ldr	r2, [r3, #24]
 800ca4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4e:	441a      	add	r2, r3
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	619a      	str	r2, [r3, #24]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	68da      	ldr	r2, [r3, #12]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	699b      	ldr	r3, [r3, #24]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	bf38      	it	cc
 800ca60:	461a      	movcc	r2, r3
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	60da      	str	r2, [r3, #12]
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6c:	441a      	add	r2, r3
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	601a      	str	r2, [r3, #0]
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca76:	1ad3      	subs	r3, r2, r3
 800ca78:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f47f aeb5 	bne.w	800c7ec <f_write+0x76>
 800ca82:	e000      	b.n	800ca86 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ca84:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	7d1b      	ldrb	r3, [r3, #20]
 800ca8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca8e:	b2da      	uxtb	r2, r3
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ca94:	2300      	movs	r3, #0
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3730      	adds	r7, #48	; 0x30
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b086      	sub	sp, #24
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f107 0208 	add.w	r2, r7, #8
 800caac:	4611      	mov	r1, r2
 800caae:	4618      	mov	r0, r3
 800cab0:	f7ff faba 	bl	800c028 <validate>
 800cab4:	4603      	mov	r3, r0
 800cab6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cab8:	7dfb      	ldrb	r3, [r7, #23]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d168      	bne.n	800cb90 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	7d1b      	ldrb	r3, [r3, #20]
 800cac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d062      	beq.n	800cb90 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	7d1b      	ldrb	r3, [r3, #20]
 800cace:	b25b      	sxtb	r3, r3
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	da15      	bge.n	800cb00 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	7858      	ldrb	r0, [r3, #1]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	6a1a      	ldr	r2, [r3, #32]
 800cae2:	2301      	movs	r3, #1
 800cae4:	f7fc ff9e 	bl	8009a24 <disk_write>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b00      	cmp	r3, #0
 800caec:	d001      	beq.n	800caf2 <f_sync+0x54>
 800caee:	2301      	movs	r3, #1
 800caf0:	e04f      	b.n	800cb92 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	7d1b      	ldrb	r3, [r3, #20]
 800caf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cafa:	b2da      	uxtb	r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cb00:	f7fc fce0 	bl	80094c4 <get_fattime>
 800cb04:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cb06:	68ba      	ldr	r2, [r7, #8]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	4610      	mov	r0, r2
 800cb10:	f7fd fa76 	bl	800a000 <move_window>
 800cb14:	4603      	mov	r3, r0
 800cb16:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cb18:	7dfb      	ldrb	r3, [r7, #23]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d138      	bne.n	800cb90 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb22:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	330b      	adds	r3, #11
 800cb28:	781a      	ldrb	r2, [r3, #0]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	330b      	adds	r3, #11
 800cb2e:	f042 0220 	orr.w	r2, r2, #32
 800cb32:	b2d2      	uxtb	r2, r2
 800cb34:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6818      	ldr	r0, [r3, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	461a      	mov	r2, r3
 800cb40:	68f9      	ldr	r1, [r7, #12]
 800cb42:	f7fd fffb 	bl	800ab3c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f103 021c 	add.w	r2, r3, #28
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	4619      	mov	r1, r3
 800cb52:	4610      	mov	r0, r2
 800cb54:	f7fc fffa 	bl	8009b4c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	3316      	adds	r3, #22
 800cb5c:	6939      	ldr	r1, [r7, #16]
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fc fff4 	bl	8009b4c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	3312      	adds	r3, #18
 800cb68:	2100      	movs	r1, #0
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7fc ffd3 	bl	8009b16 <st_word>
					fs->wflag = 1;
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	2201      	movs	r2, #1
 800cb74:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7fd fa6f 	bl	800a05c <sync_fs>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	7d1b      	ldrb	r3, [r3, #20]
 800cb86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cb8a:	b2da      	uxtb	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cb90:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3718      	adds	r7, #24
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b084      	sub	sp, #16
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f7ff ff7b 	bl	800ca9e <f_sync>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cbac:	7bfb      	ldrb	r3, [r7, #15]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d118      	bne.n	800cbe4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f107 0208 	add.w	r2, r7, #8
 800cbb8:	4611      	mov	r1, r2
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f7ff fa34 	bl	800c028 <validate>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cbc4:	7bfb      	ldrb	r3, [r7, #15]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10c      	bne.n	800cbe4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	691b      	ldr	r3, [r3, #16]
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fd f972 	bl	8009eb8 <dec_lock>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d102      	bne.n	800cbe4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cbe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800cbee:	b590      	push	{r4, r7, lr}
 800cbf0:	b093      	sub	sp, #76	; 0x4c
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800cbf6:	f107 010c 	add.w	r1, r7, #12
 800cbfa:	1d3b      	adds	r3, r7, #4
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7fe ff86 	bl	800bb10 <find_volume>
 800cc04:	4603      	mov	r3, r0
 800cc06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800cc0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d131      	bne.n	800cc76 <f_chdir+0x88>
		dj.obj.fs = fs;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	f107 0310 	add.w	r3, r7, #16
 800cc1c:	4611      	mov	r1, r2
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7fe fe46 	bl	800b8b0 <follow_path>
 800cc24:	4603      	mov	r3, r0
 800cc26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 800cc2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d11a      	bne.n	800cc68 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800cc32:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cc36:	b25b      	sxtb	r3, r3
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	da03      	bge.n	800cc44 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	69ba      	ldr	r2, [r7, #24]
 800cc40:	61da      	str	r2, [r3, #28]
 800cc42:	e011      	b.n	800cc68 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 800cc44:	7dbb      	ldrb	r3, [r7, #22]
 800cc46:	f003 0310 	and.w	r3, r3, #16
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d009      	beq.n	800cc62 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc52:	68fc      	ldr	r4, [r7, #12]
 800cc54:	4611      	mov	r1, r2
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7fd ff51 	bl	800aafe <ld_clust>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	61e3      	str	r3, [r4, #28]
 800cc60:	e002      	b.n	800cc68 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 800cc62:	2305      	movs	r3, #5
 800cc64:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800cc68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cc6c:	2b04      	cmp	r3, #4
 800cc6e:	d102      	bne.n	800cc76 <f_chdir+0x88>
 800cc70:	2305      	movs	r3, #5
 800cc72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 800cc76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	374c      	adds	r7, #76	; 0x4c
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd90      	pop	{r4, r7, pc}

0800cc82 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b090      	sub	sp, #64	; 0x40
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
 800cc8a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f107 0208 	add.w	r2, r7, #8
 800cc92:	4611      	mov	r1, r2
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7ff f9c7 	bl	800c028 <validate>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cca0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d103      	bne.n	800ccb0 <f_lseek+0x2e>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	7d5b      	ldrb	r3, [r3, #21]
 800ccac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ccb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d002      	beq.n	800ccbe <f_lseek+0x3c>
 800ccb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ccbc:	e201      	b.n	800d0c2 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	f000 80d9 	beq.w	800ce7a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccce:	d15a      	bne.n	800cd86 <f_lseek+0x104>
			tbl = fp->cltbl;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800ccd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd8:	1d1a      	adds	r2, r3, #4
 800ccda:	627a      	str	r2, [r7, #36]	; 0x24
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	617b      	str	r3, [r7, #20]
 800cce0:	2302      	movs	r3, #2
 800cce2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	689b      	ldr	r3, [r3, #8]
 800cce8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800ccea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d03a      	beq.n	800cd66 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800ccf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf2:	613b      	str	r3, [r7, #16]
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ccf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccfa:	3302      	adds	r3, #2
 800ccfc:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800ccfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd00:	60fb      	str	r3, [r7, #12]
 800cd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd04:	3301      	adds	r3, #1
 800cd06:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7fd fa34 	bl	800a17a <get_fat>
 800cd12:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800cd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd16:	2b01      	cmp	r3, #1
 800cd18:	d804      	bhi.n	800cd24 <f_lseek+0xa2>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2202      	movs	r2, #2
 800cd1e:	755a      	strb	r2, [r3, #21]
 800cd20:	2302      	movs	r3, #2
 800cd22:	e1ce      	b.n	800d0c2 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd2a:	d104      	bne.n	800cd36 <f_lseek+0xb4>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2201      	movs	r2, #1
 800cd30:	755a      	strb	r2, [r3, #21]
 800cd32:	2301      	movs	r3, #1
 800cd34:	e1c5      	b.n	800d0c2 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	3301      	adds	r3, #1
 800cd3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d0de      	beq.n	800ccfe <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800cd40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	429a      	cmp	r2, r3
 800cd46:	d809      	bhi.n	800cd5c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800cd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4a:	1d1a      	adds	r2, r3, #4
 800cd4c:	627a      	str	r2, [r7, #36]	; 0x24
 800cd4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd50:	601a      	str	r2, [r3, #0]
 800cd52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd54:	1d1a      	adds	r2, r3, #4
 800cd56:	627a      	str	r2, [r7, #36]	; 0x24
 800cd58:	693a      	ldr	r2, [r7, #16]
 800cd5a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	6a1b      	ldr	r3, [r3, #32]
 800cd60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d3c4      	bcc.n	800ccf0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd6c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800cd6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d803      	bhi.n	800cd7e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800cd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd78:	2200      	movs	r2, #0
 800cd7a:	601a      	str	r2, [r3, #0]
 800cd7c:	e19f      	b.n	800d0be <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800cd7e:	2311      	movs	r3, #17
 800cd80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cd84:	e19b      	b.n	800d0be <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	683a      	ldr	r2, [r7, #0]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d902      	bls.n	800cd96 <f_lseek+0x114>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	68db      	ldr	r3, [r3, #12]
 800cd94:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	683a      	ldr	r2, [r7, #0]
 800cd9a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	f000 818d 	beq.w	800d0be <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	3b01      	subs	r3, #1
 800cda8:	4619      	mov	r1, r3
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f7fd fcc9 	bl	800a742 <clmt_clust>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800cdb6:	68ba      	ldr	r2, [r7, #8]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	69db      	ldr	r3, [r3, #28]
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	4610      	mov	r0, r2
 800cdc0:	f7fd f9bc 	bl	800a13c <clust2sect>
 800cdc4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d104      	bne.n	800cdd6 <f_lseek+0x154>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2202      	movs	r2, #2
 800cdd0:	755a      	strb	r2, [r3, #21]
 800cdd2:	2302      	movs	r3, #2
 800cdd4:	e175      	b.n	800d0c2 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	3b01      	subs	r3, #1
 800cdda:	68ba      	ldr	r2, [r7, #8]
 800cddc:	8992      	ldrh	r2, [r2, #12]
 800cdde:	fbb3 f3f2 	udiv	r3, r3, r2
 800cde2:	68ba      	ldr	r2, [r7, #8]
 800cde4:	8952      	ldrh	r2, [r2, #10]
 800cde6:	3a01      	subs	r2, #1
 800cde8:	4013      	ands	r3, r2
 800cdea:	69ba      	ldr	r2, [r7, #24]
 800cdec:	4413      	add	r3, r2
 800cdee:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	699b      	ldr	r3, [r3, #24]
 800cdf4:	68ba      	ldr	r2, [r7, #8]
 800cdf6:	8992      	ldrh	r2, [r2, #12]
 800cdf8:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdfc:	fb02 f201 	mul.w	r2, r2, r1
 800ce00:	1a9b      	subs	r3, r3, r2
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	f000 815b 	beq.w	800d0be <f_lseek+0x43c>
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	6a1b      	ldr	r3, [r3, #32]
 800ce0c:	69ba      	ldr	r2, [r7, #24]
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	f000 8155 	beq.w	800d0be <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	7d1b      	ldrb	r3, [r3, #20]
 800ce18:	b25b      	sxtb	r3, r3
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	da18      	bge.n	800ce50 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	7858      	ldrb	r0, [r3, #1]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6a1a      	ldr	r2, [r3, #32]
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	f7fc fdf9 	bl	8009a24 <disk_write>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d004      	beq.n	800ce42 <f_lseek+0x1c0>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	755a      	strb	r2, [r3, #21]
 800ce3e:	2301      	movs	r3, #1
 800ce40:	e13f      	b.n	800d0c2 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	7d1b      	ldrb	r3, [r3, #20]
 800ce46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce4a:	b2da      	uxtb	r2, r3
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	7858      	ldrb	r0, [r3, #1]
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	69ba      	ldr	r2, [r7, #24]
 800ce5e:	f7fc fdc1 	bl	80099e4 <disk_read>
 800ce62:	4603      	mov	r3, r0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d004      	beq.n	800ce72 <f_lseek+0x1f0>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	755a      	strb	r2, [r3, #21]
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e127      	b.n	800d0c2 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	69ba      	ldr	r2, [r7, #24]
 800ce76:	621a      	str	r2, [r3, #32]
 800ce78:	e121      	b.n	800d0be <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	68db      	ldr	r3, [r3, #12]
 800ce7e:	683a      	ldr	r2, [r7, #0]
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d908      	bls.n	800ce96 <f_lseek+0x214>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	7d1b      	ldrb	r3, [r3, #20]
 800ce88:	f003 0302 	and.w	r3, r3, #2
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d102      	bne.n	800ce96 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	699b      	ldr	r3, [r3, #24]
 800ce9a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	637b      	str	r3, [r7, #52]	; 0x34
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cea4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f000 80b5 	beq.w	800d018 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	895b      	ldrh	r3, [r3, #10]
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	899b      	ldrh	r3, [r3, #12]
 800ceb8:	fb03 f302 	mul.w	r3, r3, r2
 800cebc:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800cebe:	6a3b      	ldr	r3, [r7, #32]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d01b      	beq.n	800cefc <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	1e5a      	subs	r2, r3, #1
 800cec8:	69fb      	ldr	r3, [r7, #28]
 800ceca:	fbb2 f2f3 	udiv	r2, r2, r3
 800cece:	6a3b      	ldr	r3, [r7, #32]
 800ced0:	1e59      	subs	r1, r3, #1
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ced8:	429a      	cmp	r2, r3
 800ceda:	d30f      	bcc.n	800cefc <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cedc:	6a3b      	ldr	r3, [r7, #32]
 800cede:	1e5a      	subs	r2, r3, #1
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	425b      	negs	r3, r3
 800cee4:	401a      	ands	r2, r3
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	699b      	ldr	r3, [r3, #24]
 800ceee:	683a      	ldr	r2, [r7, #0]
 800cef0:	1ad3      	subs	r3, r2, r3
 800cef2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	69db      	ldr	r3, [r3, #28]
 800cef8:	63bb      	str	r3, [r7, #56]	; 0x38
 800cefa:	e022      	b.n	800cf42 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	689b      	ldr	r3, [r3, #8]
 800cf00:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d119      	bne.n	800cf3c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2100      	movs	r1, #0
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7fd fb80 	bl	800a612 <create_chain>
 800cf12:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d104      	bne.n	800cf24 <f_lseek+0x2a2>
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2202      	movs	r2, #2
 800cf1e:	755a      	strb	r2, [r3, #21]
 800cf20:	2302      	movs	r3, #2
 800cf22:	e0ce      	b.n	800d0c2 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf2a:	d104      	bne.n	800cf36 <f_lseek+0x2b4>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2201      	movs	r2, #1
 800cf30:	755a      	strb	r2, [r3, #21]
 800cf32:	2301      	movs	r3, #1
 800cf34:	e0c5      	b.n	800d0c2 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf3a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf40:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800cf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d067      	beq.n	800d018 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800cf48:	e03a      	b.n	800cfc0 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800cf4a:	683a      	ldr	r2, [r7, #0]
 800cf4c:	69fb      	ldr	r3, [r7, #28]
 800cf4e:	1ad3      	subs	r3, r2, r3
 800cf50:	603b      	str	r3, [r7, #0]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	699a      	ldr	r2, [r3, #24]
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	441a      	add	r2, r3
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	7d1b      	ldrb	r3, [r3, #20]
 800cf62:	f003 0302 	and.w	r3, r3, #2
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d00b      	beq.n	800cf82 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7fd fb4f 	bl	800a612 <create_chain>
 800cf74:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800cf76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d108      	bne.n	800cf8e <f_lseek+0x30c>
							ofs = 0; break;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	603b      	str	r3, [r7, #0]
 800cf80:	e022      	b.n	800cfc8 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fd f8f7 	bl	800a17a <get_fat>
 800cf8c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cf8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf94:	d104      	bne.n	800cfa0 <f_lseek+0x31e>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	755a      	strb	r2, [r3, #21]
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	e090      	b.n	800d0c2 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d904      	bls.n	800cfb0 <f_lseek+0x32e>
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	6a1b      	ldr	r3, [r3, #32]
 800cfaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d304      	bcc.n	800cfba <f_lseek+0x338>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2202      	movs	r2, #2
 800cfb4:	755a      	strb	r2, [r3, #21]
 800cfb6:	2302      	movs	r3, #2
 800cfb8:	e083      	b.n	800d0c2 <f_lseek+0x440>
					fp->clust = clst;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfbe:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800cfc0:	683a      	ldr	r2, [r7, #0]
 800cfc2:	69fb      	ldr	r3, [r7, #28]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d8c0      	bhi.n	800cf4a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	699a      	ldr	r2, [r3, #24]
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	441a      	add	r2, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	899b      	ldrh	r3, [r3, #12]
 800cfd8:	461a      	mov	r2, r3
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	fbb3 f1f2 	udiv	r1, r3, r2
 800cfe0:	fb02 f201 	mul.w	r2, r2, r1
 800cfe4:	1a9b      	subs	r3, r3, r2
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d016      	beq.n	800d018 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7fd f8a4 	bl	800a13c <clust2sect>
 800cff4:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800cff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d104      	bne.n	800d006 <f_lseek+0x384>
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2202      	movs	r2, #2
 800d000:	755a      	strb	r2, [r3, #21]
 800d002:	2302      	movs	r3, #2
 800d004:	e05d      	b.n	800d0c2 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	899b      	ldrh	r3, [r3, #12]
 800d00a:	461a      	mov	r2, r3
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d014:	4413      	add	r3, r2
 800d016:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	699a      	ldr	r2, [r3, #24]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	68db      	ldr	r3, [r3, #12]
 800d020:	429a      	cmp	r2, r3
 800d022:	d90a      	bls.n	800d03a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	699a      	ldr	r2, [r3, #24]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	7d1b      	ldrb	r3, [r3, #20]
 800d030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d034:	b2da      	uxtb	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	699b      	ldr	r3, [r3, #24]
 800d03e:	68ba      	ldr	r2, [r7, #8]
 800d040:	8992      	ldrh	r2, [r2, #12]
 800d042:	fbb3 f1f2 	udiv	r1, r3, r2
 800d046:	fb02 f201 	mul.w	r2, r2, r1
 800d04a:	1a9b      	subs	r3, r3, r2
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d036      	beq.n	800d0be <f_lseek+0x43c>
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6a1b      	ldr	r3, [r3, #32]
 800d054:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d056:	429a      	cmp	r2, r3
 800d058:	d031      	beq.n	800d0be <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	7d1b      	ldrb	r3, [r3, #20]
 800d05e:	b25b      	sxtb	r3, r3
 800d060:	2b00      	cmp	r3, #0
 800d062:	da18      	bge.n	800d096 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	7858      	ldrb	r0, [r3, #1]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6a1a      	ldr	r2, [r3, #32]
 800d072:	2301      	movs	r3, #1
 800d074:	f7fc fcd6 	bl	8009a24 <disk_write>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d004      	beq.n	800d088 <f_lseek+0x406>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2201      	movs	r2, #1
 800d082:	755a      	strb	r2, [r3, #21]
 800d084:	2301      	movs	r3, #1
 800d086:	e01c      	b.n	800d0c2 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	7d1b      	ldrb	r3, [r3, #20]
 800d08c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d090:	b2da      	uxtb	r2, r3
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	7858      	ldrb	r0, [r3, #1]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0a4:	f7fc fc9e 	bl	80099e4 <disk_read>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d004      	beq.n	800d0b8 <f_lseek+0x436>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	755a      	strb	r2, [r3, #21]
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e004      	b.n	800d0c2 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0bc:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d0be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3740      	adds	r7, #64	; 0x40
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b0a0      	sub	sp, #128	; 0x80
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800d0d6:	f107 010c 	add.w	r1, r7, #12
 800d0da:	1d3b      	adds	r3, r7, #4
 800d0dc:	2202      	movs	r2, #2
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7fe fd16 	bl	800bb10 <find_volume>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800d0ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	f040 80a4 	bne.w	800d240 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d0fe:	4611      	mov	r1, r2
 800d100:	4618      	mov	r0, r3
 800d102:	f7fe fbd5 	bl	800b8b0 <follow_path>
 800d106:	4603      	mov	r3, r0
 800d108:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 800d10c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d110:	2b00      	cmp	r3, #0
 800d112:	d108      	bne.n	800d126 <f_unlink+0x5c>
 800d114:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d118:	f003 0320 	and.w	r3, r3, #32
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d002      	beq.n	800d126 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 800d120:	2306      	movs	r3, #6
 800d122:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800d126:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d108      	bne.n	800d140 <f_unlink+0x76>
 800d12e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d132:	2102      	movs	r1, #2
 800d134:	4618      	mov	r0, r3
 800d136:	f7fc fdb3 	bl	8009ca0 <chk_lock>
 800d13a:	4603      	mov	r3, r0
 800d13c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800d140:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d144:	2b00      	cmp	r3, #0
 800d146:	d17b      	bne.n	800d240 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800d148:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d14c:	b25b      	sxtb	r3, r3
 800d14e:	2b00      	cmp	r3, #0
 800d150:	da03      	bge.n	800d15a <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800d152:	2306      	movs	r3, #6
 800d154:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d158:	e008      	b.n	800d16c <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800d15a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d15e:	f003 0301 	and.w	r3, r3, #1
 800d162:	2b00      	cmp	r3, #0
 800d164:	d002      	beq.n	800d16c <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800d166:	2307      	movs	r3, #7
 800d168:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800d16c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d170:	2b00      	cmp	r3, #0
 800d172:	d13d      	bne.n	800d1f0 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d178:	4611      	mov	r1, r2
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7fd fcbf 	bl	800aafe <ld_clust>
 800d180:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800d182:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800d186:	f003 0310 	and.w	r3, r3, #16
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d030      	beq.n	800d1f0 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	69db      	ldr	r3, [r3, #28]
 800d192:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d194:	429a      	cmp	r2, r3
 800d196:	d103      	bne.n	800d1a0 <f_unlink+0xd6>
						res = FR_DENIED;
 800d198:	2307      	movs	r3, #7
 800d19a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d19e:	e027      	b.n	800d1f0 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800d1a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1a6:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800d1a8:	f107 0310 	add.w	r3, r7, #16
 800d1ac:	2100      	movs	r1, #0
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7fd faff 	bl	800a7b2 <dir_sdi>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800d1ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d116      	bne.n	800d1f0 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 800d1c2:	f107 0310 	add.w	r3, r7, #16
 800d1c6:	2100      	movs	r1, #0
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7fd fec3 	bl	800af54 <dir_read>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800d1d4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d102      	bne.n	800d1e2 <f_unlink+0x118>
 800d1dc:	2307      	movs	r3, #7
 800d1de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800d1e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d1e6:	2b04      	cmp	r3, #4
 800d1e8:	d102      	bne.n	800d1f0 <f_unlink+0x126>
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800d1f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d123      	bne.n	800d240 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800d1f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7fe f909 	bl	800b414 <dir_remove>
 800d202:	4603      	mov	r3, r0
 800d204:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800d208:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d10c      	bne.n	800d22a <f_unlink+0x160>
 800d210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d212:	2b00      	cmp	r3, #0
 800d214:	d009      	beq.n	800d22a <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800d216:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d21a:	2200      	movs	r2, #0
 800d21c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d21e:	4618      	mov	r0, r3
 800d220:	f7fd f992 	bl	800a548 <remove_chain>
 800d224:	4603      	mov	r3, r0
 800d226:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800d22a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d106      	bne.n	800d240 <f_unlink+0x176>
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	4618      	mov	r0, r3
 800d236:	f7fc ff11 	bl	800a05c <sync_fs>
 800d23a:	4603      	mov	r3, r0
 800d23c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800d240:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800d244:	4618      	mov	r0, r3
 800d246:	3780      	adds	r7, #128	; 0x80
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b098      	sub	sp, #96	; 0x60
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800d254:	f107 010c 	add.w	r1, r7, #12
 800d258:	1d3b      	adds	r3, r7, #4
 800d25a:	2202      	movs	r2, #2
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7fe fc57 	bl	800bb10 <find_volume>
 800d262:	4603      	mov	r3, r0
 800d264:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 800d26c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d270:	2b00      	cmp	r3, #0
 800d272:	f040 80ff 	bne.w	800d474 <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	f107 0310 	add.w	r3, r7, #16
 800d27c:	4611      	mov	r1, r2
 800d27e:	4618      	mov	r0, r3
 800d280:	f7fe fb16 	bl	800b8b0 <follow_path>
 800d284:	4603      	mov	r3, r0
 800d286:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800d28a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d102      	bne.n	800d298 <f_mkdir+0x4c>
 800d292:	2308      	movs	r3, #8
 800d294:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 800d298:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d29c:	2b04      	cmp	r3, #4
 800d29e:	d108      	bne.n	800d2b2 <f_mkdir+0x66>
 800d2a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d2a4:	f003 0320 	and.w	r3, r3, #32
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d002      	beq.n	800d2b2 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 800d2ac:	2306      	movs	r3, #6
 800d2ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800d2b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2b6:	2b04      	cmp	r3, #4
 800d2b8:	f040 80dc 	bne.w	800d474 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800d2bc:	f107 0310 	add.w	r3, r7, #16
 800d2c0:	2100      	movs	r1, #0
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f7fd f9a5 	bl	800a612 <create_chain>
 800d2c8:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	895b      	ldrh	r3, [r3, #10]
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	899b      	ldrh	r3, [r3, #12]
 800d2d4:	fb03 f302 	mul.w	r3, r3, r2
 800d2d8:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800d2e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d102      	bne.n	800d2ec <f_mkdir+0xa0>
 800d2e6:	2307      	movs	r3, #7
 800d2e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 800d2ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d102      	bne.n	800d2f8 <f_mkdir+0xac>
 800d2f2:	2302      	movs	r3, #2
 800d2f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d2f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2fe:	d102      	bne.n	800d306 <f_mkdir+0xba>
 800d300:	2301      	movs	r3, #1
 800d302:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800d306:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d106      	bne.n	800d31c <f_mkdir+0xd0>
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	4618      	mov	r0, r3
 800d312:	f7fc fe31 	bl	8009f78 <sync_window>
 800d316:	4603      	mov	r3, r0
 800d318:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 800d31c:	f7fc f8d2 	bl	80094c4 <get_fattime>
 800d320:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 800d322:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d326:	2b00      	cmp	r3, #0
 800d328:	d16c      	bne.n	800d404 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d32e:	4618      	mov	r0, r3
 800d330:	f7fc ff04 	bl	800a13c <clust2sect>
 800d334:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	333c      	adds	r3, #60	; 0x3c
 800d33a:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	899b      	ldrh	r3, [r3, #12]
 800d340:	461a      	mov	r2, r3
 800d342:	2100      	movs	r1, #0
 800d344:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d346:	f7fc fc4e 	bl	8009be6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800d34a:	220b      	movs	r2, #11
 800d34c:	2120      	movs	r1, #32
 800d34e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d350:	f7fc fc49 	bl	8009be6 <mem_set>
					dir[DIR_Name] = '.';
 800d354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d356:	222e      	movs	r2, #46	; 0x2e
 800d358:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800d35a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d35c:	330b      	adds	r3, #11
 800d35e:	2210      	movs	r2, #16
 800d360:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800d362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d364:	3316      	adds	r3, #22
 800d366:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d368:	4618      	mov	r0, r3
 800d36a:	f7fc fbef 	bl	8009b4c <st_dword>
					st_clust(fs, dir, dcl);
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d372:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d374:	4618      	mov	r0, r3
 800d376:	f7fd fbe1 	bl	800ab3c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800d37a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d37c:	3320      	adds	r3, #32
 800d37e:	2220      	movs	r2, #32
 800d380:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d382:	4618      	mov	r0, r3
 800d384:	f7fc fc0e 	bl	8009ba4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800d388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d38a:	3321      	adds	r3, #33	; 0x21
 800d38c:	222e      	movs	r2, #46	; 0x2e
 800d38e:	701a      	strb	r2, [r3, #0]
 800d390:	69bb      	ldr	r3, [r7, #24]
 800d392:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	781b      	ldrb	r3, [r3, #0]
 800d398:	2b03      	cmp	r3, #3
 800d39a:	d106      	bne.n	800d3aa <f_mkdir+0x15e>
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d101      	bne.n	800d3aa <f_mkdir+0x15e>
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 800d3aa:	68f8      	ldr	r0, [r7, #12]
 800d3ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3ae:	3320      	adds	r3, #32
 800d3b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3b2:	4619      	mov	r1, r3
 800d3b4:	f7fd fbc2 	bl	800ab3c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	895b      	ldrh	r3, [r3, #10]
 800d3bc:	65bb      	str	r3, [r7, #88]	; 0x58
 800d3be:	e01c      	b.n	800d3fa <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 800d3c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3c2:	1c5a      	adds	r2, r3, #1
 800d3c4:	657a      	str	r2, [r7, #84]	; 0x54
 800d3c6:	68fa      	ldr	r2, [r7, #12]
 800d3c8:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7fc fdd0 	bl	8009f78 <sync_window>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 800d3de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d10d      	bne.n	800d402 <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	899b      	ldrh	r3, [r3, #12]
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	2100      	movs	r1, #0
 800d3ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d3f0:	f7fc fbf9 	bl	8009be6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800d3f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3f6:	3b01      	subs	r3, #1
 800d3f8:	65bb      	str	r3, [r7, #88]	; 0x58
 800d3fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d1df      	bne.n	800d3c0 <f_mkdir+0x174>
 800d400:	e000      	b.n	800d404 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 800d402:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800d404:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d107      	bne.n	800d41c <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800d40c:	f107 0310 	add.w	r3, r7, #16
 800d410:	4618      	mov	r0, r3
 800d412:	f7fd ff07 	bl	800b224 <dir_register>
 800d416:	4603      	mov	r3, r0
 800d418:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 800d41c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d420:	2b00      	cmp	r3, #0
 800d422:	d120      	bne.n	800d466 <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800d424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d426:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800d428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d42a:	3316      	adds	r3, #22
 800d42c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d42e:	4618      	mov	r0, r3
 800d430:	f7fc fb8c 	bl	8009b4c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d438:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d43a:	4618      	mov	r0, r3
 800d43c:	f7fd fb7e 	bl	800ab3c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800d440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d442:	330b      	adds	r3, #11
 800d444:	2210      	movs	r2, #16
 800d446:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2201      	movs	r2, #1
 800d44c:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800d44e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d452:	2b00      	cmp	r3, #0
 800d454:	d10e      	bne.n	800d474 <f_mkdir+0x228>
					res = sync_fs(fs);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	4618      	mov	r0, r3
 800d45a:	f7fc fdff 	bl	800a05c <sync_fs>
 800d45e:	4603      	mov	r3, r0
 800d460:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d464:	e006      	b.n	800d474 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800d466:	f107 0310 	add.w	r3, r7, #16
 800d46a:	2200      	movs	r2, #0
 800d46c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d46e:	4618      	mov	r0, r3
 800d470:	f7fd f86a 	bl	800a548 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800d474:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d478:	4618      	mov	r0, r3
 800d47a:	3760      	adds	r7, #96	; 0x60
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b088      	sub	sp, #32
 800d484:	af00      	add	r7, sp, #0
 800d486:	60f8      	str	r0, [r7, #12]
 800d488:	60b9      	str	r1, [r7, #8]
 800d48a:	607a      	str	r2, [r7, #4]
	int n = 0;
 800d48c:	2300      	movs	r3, #0
 800d48e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d494:	e01b      	b.n	800d4ce <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800d496:	f107 0310 	add.w	r3, r7, #16
 800d49a:	f107 0114 	add.w	r1, r7, #20
 800d49e:	2201      	movs	r2, #1
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f7ff f809 	bl	800c4b8 <f_read>
		if (rc != 1) break;
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d116      	bne.n	800d4da <f_gets+0x5a>
		c = s[0];
 800d4ac:	7d3b      	ldrb	r3, [r7, #20]
 800d4ae:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800d4b0:	7dfb      	ldrb	r3, [r7, #23]
 800d4b2:	2b0d      	cmp	r3, #13
 800d4b4:	d100      	bne.n	800d4b8 <f_gets+0x38>
 800d4b6:	e00a      	b.n	800d4ce <f_gets+0x4e>
		*p++ = c;
 800d4b8:	69bb      	ldr	r3, [r7, #24]
 800d4ba:	1c5a      	adds	r2, r3, #1
 800d4bc:	61ba      	str	r2, [r7, #24]
 800d4be:	7dfa      	ldrb	r2, [r7, #23]
 800d4c0:	701a      	strb	r2, [r3, #0]
		n++;
 800d4c2:	69fb      	ldr	r3, [r7, #28]
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800d4c8:	7dfb      	ldrb	r3, [r7, #23]
 800d4ca:	2b0a      	cmp	r3, #10
 800d4cc:	d007      	beq.n	800d4de <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	3b01      	subs	r3, #1
 800d4d2:	69fa      	ldr	r2, [r7, #28]
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	dbde      	blt.n	800d496 <f_gets+0x16>
 800d4d8:	e002      	b.n	800d4e0 <f_gets+0x60>
		if (rc != 1) break;
 800d4da:	bf00      	nop
 800d4dc:	e000      	b.n	800d4e0 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800d4de:	bf00      	nop
	}
	*p = 0;
 800d4e0:	69bb      	ldr	r3, [r7, #24]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d001      	beq.n	800d4f0 <f_gets+0x70>
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	e000      	b.n	800d4f2 <f_gets+0x72>
 800d4f0:	2300      	movs	r3, #0
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3720      	adds	r7, #32
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
	...

0800d4fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b087      	sub	sp, #28
 800d500:	af00      	add	r7, sp, #0
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	4613      	mov	r3, r2
 800d508:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d50a:	2301      	movs	r3, #1
 800d50c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d50e:	2300      	movs	r3, #0
 800d510:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d512:	4b1f      	ldr	r3, [pc, #124]	; (800d590 <FATFS_LinkDriverEx+0x94>)
 800d514:	7a5b      	ldrb	r3, [r3, #9]
 800d516:	b2db      	uxtb	r3, r3
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d131      	bne.n	800d580 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d51c:	4b1c      	ldr	r3, [pc, #112]	; (800d590 <FATFS_LinkDriverEx+0x94>)
 800d51e:	7a5b      	ldrb	r3, [r3, #9]
 800d520:	b2db      	uxtb	r3, r3
 800d522:	461a      	mov	r2, r3
 800d524:	4b1a      	ldr	r3, [pc, #104]	; (800d590 <FATFS_LinkDriverEx+0x94>)
 800d526:	2100      	movs	r1, #0
 800d528:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d52a:	4b19      	ldr	r3, [pc, #100]	; (800d590 <FATFS_LinkDriverEx+0x94>)
 800d52c:	7a5b      	ldrb	r3, [r3, #9]
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	4a17      	ldr	r2, [pc, #92]	; (800d590 <FATFS_LinkDriverEx+0x94>)
 800d532:	009b      	lsls	r3, r3, #2
 800d534:	4413      	add	r3, r2
 800d536:	68fa      	ldr	r2, [r7, #12]
 800d538:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d53a:	4b15      	ldr	r3, [pc, #84]	; (800d590 <FATFS_LinkDriverEx+0x94>)
 800d53c:	7a5b      	ldrb	r3, [r3, #9]
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	461a      	mov	r2, r3
 800d542:	4b13      	ldr	r3, [pc, #76]	; (800d590 <FATFS_LinkDriverEx+0x94>)
 800d544:	4413      	add	r3, r2
 800d546:	79fa      	ldrb	r2, [r7, #7]
 800d548:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d54a:	4b11      	ldr	r3, [pc, #68]	; (800d590 <FATFS_LinkDriverEx+0x94>)
 800d54c:	7a5b      	ldrb	r3, [r3, #9]
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	1c5a      	adds	r2, r3, #1
 800d552:	b2d1      	uxtb	r1, r2
 800d554:	4a0e      	ldr	r2, [pc, #56]	; (800d590 <FATFS_LinkDriverEx+0x94>)
 800d556:	7251      	strb	r1, [r2, #9]
 800d558:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d55a:	7dbb      	ldrb	r3, [r7, #22]
 800d55c:	3330      	adds	r3, #48	; 0x30
 800d55e:	b2da      	uxtb	r2, r3
 800d560:	68bb      	ldr	r3, [r7, #8]
 800d562:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	3301      	adds	r3, #1
 800d568:	223a      	movs	r2, #58	; 0x3a
 800d56a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d56c:	68bb      	ldr	r3, [r7, #8]
 800d56e:	3302      	adds	r3, #2
 800d570:	222f      	movs	r2, #47	; 0x2f
 800d572:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d574:	68bb      	ldr	r3, [r7, #8]
 800d576:	3303      	adds	r3, #3
 800d578:	2200      	movs	r2, #0
 800d57a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d57c:	2300      	movs	r3, #0
 800d57e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d580:	7dfb      	ldrb	r3, [r7, #23]
}
 800d582:	4618      	mov	r0, r3
 800d584:	371c      	adds	r7, #28
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr
 800d58e:	bf00      	nop
 800d590:	20000464 	.word	0x20000464

0800d594 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b082      	sub	sp, #8
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d59e:	2200      	movs	r2, #0
 800d5a0:	6839      	ldr	r1, [r7, #0]
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f7ff ffaa 	bl	800d4fc <FATFS_LinkDriverEx>
 800d5a8:	4603      	mov	r3, r0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3708      	adds	r7, #8
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
	...

0800d5b4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b085      	sub	sp, #20
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	6039      	str	r1, [r7, #0]
 800d5be:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d5c0:	88fb      	ldrh	r3, [r7, #6]
 800d5c2:	2b7f      	cmp	r3, #127	; 0x7f
 800d5c4:	d802      	bhi.n	800d5cc <ff_convert+0x18>
		c = chr;
 800d5c6:	88fb      	ldrh	r3, [r7, #6]
 800d5c8:	81fb      	strh	r3, [r7, #14]
 800d5ca:	e025      	b.n	800d618 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00b      	beq.n	800d5ea <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d5d2:	88fb      	ldrh	r3, [r7, #6]
 800d5d4:	2bff      	cmp	r3, #255	; 0xff
 800d5d6:	d805      	bhi.n	800d5e4 <ff_convert+0x30>
 800d5d8:	88fb      	ldrh	r3, [r7, #6]
 800d5da:	3b80      	subs	r3, #128	; 0x80
 800d5dc:	4a12      	ldr	r2, [pc, #72]	; (800d628 <ff_convert+0x74>)
 800d5de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5e2:	e000      	b.n	800d5e6 <ff_convert+0x32>
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	81fb      	strh	r3, [r7, #14]
 800d5e8:	e016      	b.n	800d618 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	81fb      	strh	r3, [r7, #14]
 800d5ee:	e009      	b.n	800d604 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d5f0:	89fb      	ldrh	r3, [r7, #14]
 800d5f2:	4a0d      	ldr	r2, [pc, #52]	; (800d628 <ff_convert+0x74>)
 800d5f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d5f8:	88fa      	ldrh	r2, [r7, #6]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d006      	beq.n	800d60c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d5fe:	89fb      	ldrh	r3, [r7, #14]
 800d600:	3301      	adds	r3, #1
 800d602:	81fb      	strh	r3, [r7, #14]
 800d604:	89fb      	ldrh	r3, [r7, #14]
 800d606:	2b7f      	cmp	r3, #127	; 0x7f
 800d608:	d9f2      	bls.n	800d5f0 <ff_convert+0x3c>
 800d60a:	e000      	b.n	800d60e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d60c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d60e:	89fb      	ldrh	r3, [r7, #14]
 800d610:	3380      	adds	r3, #128	; 0x80
 800d612:	b29b      	uxth	r3, r3
 800d614:	b2db      	uxtb	r3, r3
 800d616:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d618:	89fb      	ldrh	r3, [r7, #14]
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3714      	adds	r7, #20
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop
 800d628:	0801279c 	.word	0x0801279c

0800d62c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b087      	sub	sp, #28
 800d630:	af00      	add	r7, sp, #0
 800d632:	4603      	mov	r3, r0
 800d634:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d636:	88fb      	ldrh	r3, [r7, #6]
 800d638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d63c:	d201      	bcs.n	800d642 <ff_wtoupper+0x16>
 800d63e:	4b3e      	ldr	r3, [pc, #248]	; (800d738 <ff_wtoupper+0x10c>)
 800d640:	e000      	b.n	800d644 <ff_wtoupper+0x18>
 800d642:	4b3e      	ldr	r3, [pc, #248]	; (800d73c <ff_wtoupper+0x110>)
 800d644:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	1c9a      	adds	r2, r3, #2
 800d64a:	617a      	str	r2, [r7, #20]
 800d64c:	881b      	ldrh	r3, [r3, #0]
 800d64e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d650:	8a7b      	ldrh	r3, [r7, #18]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d068      	beq.n	800d728 <ff_wtoupper+0xfc>
 800d656:	88fa      	ldrh	r2, [r7, #6]
 800d658:	8a7b      	ldrh	r3, [r7, #18]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	d364      	bcc.n	800d728 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d65e:	697b      	ldr	r3, [r7, #20]
 800d660:	1c9a      	adds	r2, r3, #2
 800d662:	617a      	str	r2, [r7, #20]
 800d664:	881b      	ldrh	r3, [r3, #0]
 800d666:	823b      	strh	r3, [r7, #16]
 800d668:	8a3b      	ldrh	r3, [r7, #16]
 800d66a:	0a1b      	lsrs	r3, r3, #8
 800d66c:	81fb      	strh	r3, [r7, #14]
 800d66e:	8a3b      	ldrh	r3, [r7, #16]
 800d670:	b2db      	uxtb	r3, r3
 800d672:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d674:	88fa      	ldrh	r2, [r7, #6]
 800d676:	8a79      	ldrh	r1, [r7, #18]
 800d678:	8a3b      	ldrh	r3, [r7, #16]
 800d67a:	440b      	add	r3, r1
 800d67c:	429a      	cmp	r2, r3
 800d67e:	da49      	bge.n	800d714 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d680:	89fb      	ldrh	r3, [r7, #14]
 800d682:	2b08      	cmp	r3, #8
 800d684:	d84f      	bhi.n	800d726 <ff_wtoupper+0xfa>
 800d686:	a201      	add	r2, pc, #4	; (adr r2, 800d68c <ff_wtoupper+0x60>)
 800d688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d68c:	0800d6b1 	.word	0x0800d6b1
 800d690:	0800d6c3 	.word	0x0800d6c3
 800d694:	0800d6d9 	.word	0x0800d6d9
 800d698:	0800d6e1 	.word	0x0800d6e1
 800d69c:	0800d6e9 	.word	0x0800d6e9
 800d6a0:	0800d6f1 	.word	0x0800d6f1
 800d6a4:	0800d6f9 	.word	0x0800d6f9
 800d6a8:	0800d701 	.word	0x0800d701
 800d6ac:	0800d709 	.word	0x0800d709
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d6b0:	88fa      	ldrh	r2, [r7, #6]
 800d6b2:	8a7b      	ldrh	r3, [r7, #18]
 800d6b4:	1ad3      	subs	r3, r2, r3
 800d6b6:	005b      	lsls	r3, r3, #1
 800d6b8:	697a      	ldr	r2, [r7, #20]
 800d6ba:	4413      	add	r3, r2
 800d6bc:	881b      	ldrh	r3, [r3, #0]
 800d6be:	80fb      	strh	r3, [r7, #6]
 800d6c0:	e027      	b.n	800d712 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d6c2:	88fa      	ldrh	r2, [r7, #6]
 800d6c4:	8a7b      	ldrh	r3, [r7, #18]
 800d6c6:	1ad3      	subs	r3, r2, r3
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	f003 0301 	and.w	r3, r3, #1
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	88fa      	ldrh	r2, [r7, #6]
 800d6d2:	1ad3      	subs	r3, r2, r3
 800d6d4:	80fb      	strh	r3, [r7, #6]
 800d6d6:	e01c      	b.n	800d712 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d6d8:	88fb      	ldrh	r3, [r7, #6]
 800d6da:	3b10      	subs	r3, #16
 800d6dc:	80fb      	strh	r3, [r7, #6]
 800d6de:	e018      	b.n	800d712 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d6e0:	88fb      	ldrh	r3, [r7, #6]
 800d6e2:	3b20      	subs	r3, #32
 800d6e4:	80fb      	strh	r3, [r7, #6]
 800d6e6:	e014      	b.n	800d712 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d6e8:	88fb      	ldrh	r3, [r7, #6]
 800d6ea:	3b30      	subs	r3, #48	; 0x30
 800d6ec:	80fb      	strh	r3, [r7, #6]
 800d6ee:	e010      	b.n	800d712 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d6f0:	88fb      	ldrh	r3, [r7, #6]
 800d6f2:	3b1a      	subs	r3, #26
 800d6f4:	80fb      	strh	r3, [r7, #6]
 800d6f6:	e00c      	b.n	800d712 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d6f8:	88fb      	ldrh	r3, [r7, #6]
 800d6fa:	3308      	adds	r3, #8
 800d6fc:	80fb      	strh	r3, [r7, #6]
 800d6fe:	e008      	b.n	800d712 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d700:	88fb      	ldrh	r3, [r7, #6]
 800d702:	3b50      	subs	r3, #80	; 0x50
 800d704:	80fb      	strh	r3, [r7, #6]
 800d706:	e004      	b.n	800d712 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d708:	88fb      	ldrh	r3, [r7, #6]
 800d70a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d70e:	80fb      	strh	r3, [r7, #6]
 800d710:	bf00      	nop
			}
			break;
 800d712:	e008      	b.n	800d726 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d714:	89fb      	ldrh	r3, [r7, #14]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d195      	bne.n	800d646 <ff_wtoupper+0x1a>
 800d71a:	8a3b      	ldrh	r3, [r7, #16]
 800d71c:	005b      	lsls	r3, r3, #1
 800d71e:	697a      	ldr	r2, [r7, #20]
 800d720:	4413      	add	r3, r2
 800d722:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d724:	e78f      	b.n	800d646 <ff_wtoupper+0x1a>
			break;
 800d726:	bf00      	nop
	}

	return chr;
 800d728:	88fb      	ldrh	r3, [r7, #6]
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	371c      	adds	r7, #28
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr
 800d736:	bf00      	nop
 800d738:	0801289c 	.word	0x0801289c
 800d73c:	08012a90 	.word	0x08012a90

0800d740 <__errno>:
 800d740:	4b01      	ldr	r3, [pc, #4]	; (800d748 <__errno+0x8>)
 800d742:	6818      	ldr	r0, [r3, #0]
 800d744:	4770      	bx	lr
 800d746:	bf00      	nop
 800d748:	2000000c 	.word	0x2000000c

0800d74c <__libc_init_array>:
 800d74c:	b570      	push	{r4, r5, r6, lr}
 800d74e:	4e0d      	ldr	r6, [pc, #52]	; (800d784 <__libc_init_array+0x38>)
 800d750:	4c0d      	ldr	r4, [pc, #52]	; (800d788 <__libc_init_array+0x3c>)
 800d752:	1ba4      	subs	r4, r4, r6
 800d754:	10a4      	asrs	r4, r4, #2
 800d756:	2500      	movs	r5, #0
 800d758:	42a5      	cmp	r5, r4
 800d75a:	d109      	bne.n	800d770 <__libc_init_array+0x24>
 800d75c:	4e0b      	ldr	r6, [pc, #44]	; (800d78c <__libc_init_array+0x40>)
 800d75e:	4c0c      	ldr	r4, [pc, #48]	; (800d790 <__libc_init_array+0x44>)
 800d760:	f004 feee 	bl	8012540 <_init>
 800d764:	1ba4      	subs	r4, r4, r6
 800d766:	10a4      	asrs	r4, r4, #2
 800d768:	2500      	movs	r5, #0
 800d76a:	42a5      	cmp	r5, r4
 800d76c:	d105      	bne.n	800d77a <__libc_init_array+0x2e>
 800d76e:	bd70      	pop	{r4, r5, r6, pc}
 800d770:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d774:	4798      	blx	r3
 800d776:	3501      	adds	r5, #1
 800d778:	e7ee      	b.n	800d758 <__libc_init_array+0xc>
 800d77a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d77e:	4798      	blx	r3
 800d780:	3501      	adds	r5, #1
 800d782:	e7f2      	b.n	800d76a <__libc_init_array+0x1e>
 800d784:	08012e8c 	.word	0x08012e8c
 800d788:	08012e8c 	.word	0x08012e8c
 800d78c:	08012e8c 	.word	0x08012e8c
 800d790:	08012e90 	.word	0x08012e90

0800d794 <memset>:
 800d794:	4402      	add	r2, r0
 800d796:	4603      	mov	r3, r0
 800d798:	4293      	cmp	r3, r2
 800d79a:	d100      	bne.n	800d79e <memset+0xa>
 800d79c:	4770      	bx	lr
 800d79e:	f803 1b01 	strb.w	r1, [r3], #1
 800d7a2:	e7f9      	b.n	800d798 <memset+0x4>

0800d7a4 <__cvt>:
 800d7a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7a8:	ec55 4b10 	vmov	r4, r5, d0
 800d7ac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d7ae:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d7b2:	2d00      	cmp	r5, #0
 800d7b4:	460e      	mov	r6, r1
 800d7b6:	4691      	mov	r9, r2
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	bfb8      	it	lt
 800d7bc:	4622      	movlt	r2, r4
 800d7be:	462b      	mov	r3, r5
 800d7c0:	f027 0720 	bic.w	r7, r7, #32
 800d7c4:	bfbb      	ittet	lt
 800d7c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d7ca:	461d      	movlt	r5, r3
 800d7cc:	2300      	movge	r3, #0
 800d7ce:	232d      	movlt	r3, #45	; 0x2d
 800d7d0:	bfb8      	it	lt
 800d7d2:	4614      	movlt	r4, r2
 800d7d4:	2f46      	cmp	r7, #70	; 0x46
 800d7d6:	700b      	strb	r3, [r1, #0]
 800d7d8:	d004      	beq.n	800d7e4 <__cvt+0x40>
 800d7da:	2f45      	cmp	r7, #69	; 0x45
 800d7dc:	d100      	bne.n	800d7e0 <__cvt+0x3c>
 800d7de:	3601      	adds	r6, #1
 800d7e0:	2102      	movs	r1, #2
 800d7e2:	e000      	b.n	800d7e6 <__cvt+0x42>
 800d7e4:	2103      	movs	r1, #3
 800d7e6:	ab03      	add	r3, sp, #12
 800d7e8:	9301      	str	r3, [sp, #4]
 800d7ea:	ab02      	add	r3, sp, #8
 800d7ec:	9300      	str	r3, [sp, #0]
 800d7ee:	4632      	mov	r2, r6
 800d7f0:	4653      	mov	r3, sl
 800d7f2:	ec45 4b10 	vmov	d0, r4, r5
 800d7f6:	f001 ff9f 	bl	800f738 <_dtoa_r>
 800d7fa:	2f47      	cmp	r7, #71	; 0x47
 800d7fc:	4680      	mov	r8, r0
 800d7fe:	d102      	bne.n	800d806 <__cvt+0x62>
 800d800:	f019 0f01 	tst.w	r9, #1
 800d804:	d026      	beq.n	800d854 <__cvt+0xb0>
 800d806:	2f46      	cmp	r7, #70	; 0x46
 800d808:	eb08 0906 	add.w	r9, r8, r6
 800d80c:	d111      	bne.n	800d832 <__cvt+0x8e>
 800d80e:	f898 3000 	ldrb.w	r3, [r8]
 800d812:	2b30      	cmp	r3, #48	; 0x30
 800d814:	d10a      	bne.n	800d82c <__cvt+0x88>
 800d816:	2200      	movs	r2, #0
 800d818:	2300      	movs	r3, #0
 800d81a:	4620      	mov	r0, r4
 800d81c:	4629      	mov	r1, r5
 800d81e:	f7f3 f96b 	bl	8000af8 <__aeabi_dcmpeq>
 800d822:	b918      	cbnz	r0, 800d82c <__cvt+0x88>
 800d824:	f1c6 0601 	rsb	r6, r6, #1
 800d828:	f8ca 6000 	str.w	r6, [sl]
 800d82c:	f8da 3000 	ldr.w	r3, [sl]
 800d830:	4499      	add	r9, r3
 800d832:	2200      	movs	r2, #0
 800d834:	2300      	movs	r3, #0
 800d836:	4620      	mov	r0, r4
 800d838:	4629      	mov	r1, r5
 800d83a:	f7f3 f95d 	bl	8000af8 <__aeabi_dcmpeq>
 800d83e:	b938      	cbnz	r0, 800d850 <__cvt+0xac>
 800d840:	2230      	movs	r2, #48	; 0x30
 800d842:	9b03      	ldr	r3, [sp, #12]
 800d844:	454b      	cmp	r3, r9
 800d846:	d205      	bcs.n	800d854 <__cvt+0xb0>
 800d848:	1c59      	adds	r1, r3, #1
 800d84a:	9103      	str	r1, [sp, #12]
 800d84c:	701a      	strb	r2, [r3, #0]
 800d84e:	e7f8      	b.n	800d842 <__cvt+0x9e>
 800d850:	f8cd 900c 	str.w	r9, [sp, #12]
 800d854:	9b03      	ldr	r3, [sp, #12]
 800d856:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d858:	eba3 0308 	sub.w	r3, r3, r8
 800d85c:	4640      	mov	r0, r8
 800d85e:	6013      	str	r3, [r2, #0]
 800d860:	b004      	add	sp, #16
 800d862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d866 <__exponent>:
 800d866:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d868:	2900      	cmp	r1, #0
 800d86a:	4604      	mov	r4, r0
 800d86c:	bfba      	itte	lt
 800d86e:	4249      	neglt	r1, r1
 800d870:	232d      	movlt	r3, #45	; 0x2d
 800d872:	232b      	movge	r3, #43	; 0x2b
 800d874:	2909      	cmp	r1, #9
 800d876:	f804 2b02 	strb.w	r2, [r4], #2
 800d87a:	7043      	strb	r3, [r0, #1]
 800d87c:	dd20      	ble.n	800d8c0 <__exponent+0x5a>
 800d87e:	f10d 0307 	add.w	r3, sp, #7
 800d882:	461f      	mov	r7, r3
 800d884:	260a      	movs	r6, #10
 800d886:	fb91 f5f6 	sdiv	r5, r1, r6
 800d88a:	fb06 1115 	mls	r1, r6, r5, r1
 800d88e:	3130      	adds	r1, #48	; 0x30
 800d890:	2d09      	cmp	r5, #9
 800d892:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d896:	f103 32ff 	add.w	r2, r3, #4294967295
 800d89a:	4629      	mov	r1, r5
 800d89c:	dc09      	bgt.n	800d8b2 <__exponent+0x4c>
 800d89e:	3130      	adds	r1, #48	; 0x30
 800d8a0:	3b02      	subs	r3, #2
 800d8a2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d8a6:	42bb      	cmp	r3, r7
 800d8a8:	4622      	mov	r2, r4
 800d8aa:	d304      	bcc.n	800d8b6 <__exponent+0x50>
 800d8ac:	1a10      	subs	r0, r2, r0
 800d8ae:	b003      	add	sp, #12
 800d8b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	e7e7      	b.n	800d886 <__exponent+0x20>
 800d8b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8ba:	f804 2b01 	strb.w	r2, [r4], #1
 800d8be:	e7f2      	b.n	800d8a6 <__exponent+0x40>
 800d8c0:	2330      	movs	r3, #48	; 0x30
 800d8c2:	4419      	add	r1, r3
 800d8c4:	7083      	strb	r3, [r0, #2]
 800d8c6:	1d02      	adds	r2, r0, #4
 800d8c8:	70c1      	strb	r1, [r0, #3]
 800d8ca:	e7ef      	b.n	800d8ac <__exponent+0x46>

0800d8cc <_printf_float>:
 800d8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8d0:	b08d      	sub	sp, #52	; 0x34
 800d8d2:	460c      	mov	r4, r1
 800d8d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800d8d8:	4616      	mov	r6, r2
 800d8da:	461f      	mov	r7, r3
 800d8dc:	4605      	mov	r5, r0
 800d8de:	f003 f997 	bl	8010c10 <_localeconv_r>
 800d8e2:	6803      	ldr	r3, [r0, #0]
 800d8e4:	9304      	str	r3, [sp, #16]
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f7f2 fc8a 	bl	8000200 <strlen>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	930a      	str	r3, [sp, #40]	; 0x28
 800d8f0:	f8d8 3000 	ldr.w	r3, [r8]
 800d8f4:	9005      	str	r0, [sp, #20]
 800d8f6:	3307      	adds	r3, #7
 800d8f8:	f023 0307 	bic.w	r3, r3, #7
 800d8fc:	f103 0208 	add.w	r2, r3, #8
 800d900:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d904:	f8d4 b000 	ldr.w	fp, [r4]
 800d908:	f8c8 2000 	str.w	r2, [r8]
 800d90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d910:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d914:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d918:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d91c:	9307      	str	r3, [sp, #28]
 800d91e:	f8cd 8018 	str.w	r8, [sp, #24]
 800d922:	f04f 32ff 	mov.w	r2, #4294967295
 800d926:	4ba7      	ldr	r3, [pc, #668]	; (800dbc4 <_printf_float+0x2f8>)
 800d928:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d92c:	f7f3 f916 	bl	8000b5c <__aeabi_dcmpun>
 800d930:	bb70      	cbnz	r0, 800d990 <_printf_float+0xc4>
 800d932:	f04f 32ff 	mov.w	r2, #4294967295
 800d936:	4ba3      	ldr	r3, [pc, #652]	; (800dbc4 <_printf_float+0x2f8>)
 800d938:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d93c:	f7f3 f8f0 	bl	8000b20 <__aeabi_dcmple>
 800d940:	bb30      	cbnz	r0, 800d990 <_printf_float+0xc4>
 800d942:	2200      	movs	r2, #0
 800d944:	2300      	movs	r3, #0
 800d946:	4640      	mov	r0, r8
 800d948:	4649      	mov	r1, r9
 800d94a:	f7f3 f8df 	bl	8000b0c <__aeabi_dcmplt>
 800d94e:	b110      	cbz	r0, 800d956 <_printf_float+0x8a>
 800d950:	232d      	movs	r3, #45	; 0x2d
 800d952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d956:	4a9c      	ldr	r2, [pc, #624]	; (800dbc8 <_printf_float+0x2fc>)
 800d958:	4b9c      	ldr	r3, [pc, #624]	; (800dbcc <_printf_float+0x300>)
 800d95a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d95e:	bf8c      	ite	hi
 800d960:	4690      	movhi	r8, r2
 800d962:	4698      	movls	r8, r3
 800d964:	2303      	movs	r3, #3
 800d966:	f02b 0204 	bic.w	r2, fp, #4
 800d96a:	6123      	str	r3, [r4, #16]
 800d96c:	6022      	str	r2, [r4, #0]
 800d96e:	f04f 0900 	mov.w	r9, #0
 800d972:	9700      	str	r7, [sp, #0]
 800d974:	4633      	mov	r3, r6
 800d976:	aa0b      	add	r2, sp, #44	; 0x2c
 800d978:	4621      	mov	r1, r4
 800d97a:	4628      	mov	r0, r5
 800d97c:	f000 f9e6 	bl	800dd4c <_printf_common>
 800d980:	3001      	adds	r0, #1
 800d982:	f040 808d 	bne.w	800daa0 <_printf_float+0x1d4>
 800d986:	f04f 30ff 	mov.w	r0, #4294967295
 800d98a:	b00d      	add	sp, #52	; 0x34
 800d98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d990:	4642      	mov	r2, r8
 800d992:	464b      	mov	r3, r9
 800d994:	4640      	mov	r0, r8
 800d996:	4649      	mov	r1, r9
 800d998:	f7f3 f8e0 	bl	8000b5c <__aeabi_dcmpun>
 800d99c:	b110      	cbz	r0, 800d9a4 <_printf_float+0xd8>
 800d99e:	4a8c      	ldr	r2, [pc, #560]	; (800dbd0 <_printf_float+0x304>)
 800d9a0:	4b8c      	ldr	r3, [pc, #560]	; (800dbd4 <_printf_float+0x308>)
 800d9a2:	e7da      	b.n	800d95a <_printf_float+0x8e>
 800d9a4:	6861      	ldr	r1, [r4, #4]
 800d9a6:	1c4b      	adds	r3, r1, #1
 800d9a8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800d9ac:	a80a      	add	r0, sp, #40	; 0x28
 800d9ae:	d13e      	bne.n	800da2e <_printf_float+0x162>
 800d9b0:	2306      	movs	r3, #6
 800d9b2:	6063      	str	r3, [r4, #4]
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d9ba:	ab09      	add	r3, sp, #36	; 0x24
 800d9bc:	9300      	str	r3, [sp, #0]
 800d9be:	ec49 8b10 	vmov	d0, r8, r9
 800d9c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d9c6:	6022      	str	r2, [r4, #0]
 800d9c8:	f8cd a004 	str.w	sl, [sp, #4]
 800d9cc:	6861      	ldr	r1, [r4, #4]
 800d9ce:	4628      	mov	r0, r5
 800d9d0:	f7ff fee8 	bl	800d7a4 <__cvt>
 800d9d4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800d9d8:	2b47      	cmp	r3, #71	; 0x47
 800d9da:	4680      	mov	r8, r0
 800d9dc:	d109      	bne.n	800d9f2 <_printf_float+0x126>
 800d9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9e0:	1cd8      	adds	r0, r3, #3
 800d9e2:	db02      	blt.n	800d9ea <_printf_float+0x11e>
 800d9e4:	6862      	ldr	r2, [r4, #4]
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	dd47      	ble.n	800da7a <_printf_float+0x1ae>
 800d9ea:	f1aa 0a02 	sub.w	sl, sl, #2
 800d9ee:	fa5f fa8a 	uxtb.w	sl, sl
 800d9f2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d9f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d9f8:	d824      	bhi.n	800da44 <_printf_float+0x178>
 800d9fa:	3901      	subs	r1, #1
 800d9fc:	4652      	mov	r2, sl
 800d9fe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800da02:	9109      	str	r1, [sp, #36]	; 0x24
 800da04:	f7ff ff2f 	bl	800d866 <__exponent>
 800da08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da0a:	1813      	adds	r3, r2, r0
 800da0c:	2a01      	cmp	r2, #1
 800da0e:	4681      	mov	r9, r0
 800da10:	6123      	str	r3, [r4, #16]
 800da12:	dc02      	bgt.n	800da1a <_printf_float+0x14e>
 800da14:	6822      	ldr	r2, [r4, #0]
 800da16:	07d1      	lsls	r1, r2, #31
 800da18:	d501      	bpl.n	800da1e <_printf_float+0x152>
 800da1a:	3301      	adds	r3, #1
 800da1c:	6123      	str	r3, [r4, #16]
 800da1e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800da22:	2b00      	cmp	r3, #0
 800da24:	d0a5      	beq.n	800d972 <_printf_float+0xa6>
 800da26:	232d      	movs	r3, #45	; 0x2d
 800da28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da2c:	e7a1      	b.n	800d972 <_printf_float+0xa6>
 800da2e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800da32:	f000 8177 	beq.w	800dd24 <_printf_float+0x458>
 800da36:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800da3a:	d1bb      	bne.n	800d9b4 <_printf_float+0xe8>
 800da3c:	2900      	cmp	r1, #0
 800da3e:	d1b9      	bne.n	800d9b4 <_printf_float+0xe8>
 800da40:	2301      	movs	r3, #1
 800da42:	e7b6      	b.n	800d9b2 <_printf_float+0xe6>
 800da44:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800da48:	d119      	bne.n	800da7e <_printf_float+0x1b2>
 800da4a:	2900      	cmp	r1, #0
 800da4c:	6863      	ldr	r3, [r4, #4]
 800da4e:	dd0c      	ble.n	800da6a <_printf_float+0x19e>
 800da50:	6121      	str	r1, [r4, #16]
 800da52:	b913      	cbnz	r3, 800da5a <_printf_float+0x18e>
 800da54:	6822      	ldr	r2, [r4, #0]
 800da56:	07d2      	lsls	r2, r2, #31
 800da58:	d502      	bpl.n	800da60 <_printf_float+0x194>
 800da5a:	3301      	adds	r3, #1
 800da5c:	440b      	add	r3, r1
 800da5e:	6123      	str	r3, [r4, #16]
 800da60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da62:	65a3      	str	r3, [r4, #88]	; 0x58
 800da64:	f04f 0900 	mov.w	r9, #0
 800da68:	e7d9      	b.n	800da1e <_printf_float+0x152>
 800da6a:	b913      	cbnz	r3, 800da72 <_printf_float+0x1a6>
 800da6c:	6822      	ldr	r2, [r4, #0]
 800da6e:	07d0      	lsls	r0, r2, #31
 800da70:	d501      	bpl.n	800da76 <_printf_float+0x1aa>
 800da72:	3302      	adds	r3, #2
 800da74:	e7f3      	b.n	800da5e <_printf_float+0x192>
 800da76:	2301      	movs	r3, #1
 800da78:	e7f1      	b.n	800da5e <_printf_float+0x192>
 800da7a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800da7e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800da82:	4293      	cmp	r3, r2
 800da84:	db05      	blt.n	800da92 <_printf_float+0x1c6>
 800da86:	6822      	ldr	r2, [r4, #0]
 800da88:	6123      	str	r3, [r4, #16]
 800da8a:	07d1      	lsls	r1, r2, #31
 800da8c:	d5e8      	bpl.n	800da60 <_printf_float+0x194>
 800da8e:	3301      	adds	r3, #1
 800da90:	e7e5      	b.n	800da5e <_printf_float+0x192>
 800da92:	2b00      	cmp	r3, #0
 800da94:	bfd4      	ite	le
 800da96:	f1c3 0302 	rsble	r3, r3, #2
 800da9a:	2301      	movgt	r3, #1
 800da9c:	4413      	add	r3, r2
 800da9e:	e7de      	b.n	800da5e <_printf_float+0x192>
 800daa0:	6823      	ldr	r3, [r4, #0]
 800daa2:	055a      	lsls	r2, r3, #21
 800daa4:	d407      	bmi.n	800dab6 <_printf_float+0x1ea>
 800daa6:	6923      	ldr	r3, [r4, #16]
 800daa8:	4642      	mov	r2, r8
 800daaa:	4631      	mov	r1, r6
 800daac:	4628      	mov	r0, r5
 800daae:	47b8      	blx	r7
 800dab0:	3001      	adds	r0, #1
 800dab2:	d12b      	bne.n	800db0c <_printf_float+0x240>
 800dab4:	e767      	b.n	800d986 <_printf_float+0xba>
 800dab6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800daba:	f240 80dc 	bls.w	800dc76 <_printf_float+0x3aa>
 800dabe:	2200      	movs	r2, #0
 800dac0:	2300      	movs	r3, #0
 800dac2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dac6:	f7f3 f817 	bl	8000af8 <__aeabi_dcmpeq>
 800daca:	2800      	cmp	r0, #0
 800dacc:	d033      	beq.n	800db36 <_printf_float+0x26a>
 800dace:	2301      	movs	r3, #1
 800dad0:	4a41      	ldr	r2, [pc, #260]	; (800dbd8 <_printf_float+0x30c>)
 800dad2:	4631      	mov	r1, r6
 800dad4:	4628      	mov	r0, r5
 800dad6:	47b8      	blx	r7
 800dad8:	3001      	adds	r0, #1
 800dada:	f43f af54 	beq.w	800d986 <_printf_float+0xba>
 800dade:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dae2:	429a      	cmp	r2, r3
 800dae4:	db02      	blt.n	800daec <_printf_float+0x220>
 800dae6:	6823      	ldr	r3, [r4, #0]
 800dae8:	07d8      	lsls	r0, r3, #31
 800daea:	d50f      	bpl.n	800db0c <_printf_float+0x240>
 800daec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800daf0:	4631      	mov	r1, r6
 800daf2:	4628      	mov	r0, r5
 800daf4:	47b8      	blx	r7
 800daf6:	3001      	adds	r0, #1
 800daf8:	f43f af45 	beq.w	800d986 <_printf_float+0xba>
 800dafc:	f04f 0800 	mov.w	r8, #0
 800db00:	f104 091a 	add.w	r9, r4, #26
 800db04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db06:	3b01      	subs	r3, #1
 800db08:	4543      	cmp	r3, r8
 800db0a:	dc09      	bgt.n	800db20 <_printf_float+0x254>
 800db0c:	6823      	ldr	r3, [r4, #0]
 800db0e:	079b      	lsls	r3, r3, #30
 800db10:	f100 8103 	bmi.w	800dd1a <_printf_float+0x44e>
 800db14:	68e0      	ldr	r0, [r4, #12]
 800db16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db18:	4298      	cmp	r0, r3
 800db1a:	bfb8      	it	lt
 800db1c:	4618      	movlt	r0, r3
 800db1e:	e734      	b.n	800d98a <_printf_float+0xbe>
 800db20:	2301      	movs	r3, #1
 800db22:	464a      	mov	r2, r9
 800db24:	4631      	mov	r1, r6
 800db26:	4628      	mov	r0, r5
 800db28:	47b8      	blx	r7
 800db2a:	3001      	adds	r0, #1
 800db2c:	f43f af2b 	beq.w	800d986 <_printf_float+0xba>
 800db30:	f108 0801 	add.w	r8, r8, #1
 800db34:	e7e6      	b.n	800db04 <_printf_float+0x238>
 800db36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db38:	2b00      	cmp	r3, #0
 800db3a:	dc2b      	bgt.n	800db94 <_printf_float+0x2c8>
 800db3c:	2301      	movs	r3, #1
 800db3e:	4a26      	ldr	r2, [pc, #152]	; (800dbd8 <_printf_float+0x30c>)
 800db40:	4631      	mov	r1, r6
 800db42:	4628      	mov	r0, r5
 800db44:	47b8      	blx	r7
 800db46:	3001      	adds	r0, #1
 800db48:	f43f af1d 	beq.w	800d986 <_printf_float+0xba>
 800db4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db4e:	b923      	cbnz	r3, 800db5a <_printf_float+0x28e>
 800db50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db52:	b913      	cbnz	r3, 800db5a <_printf_float+0x28e>
 800db54:	6823      	ldr	r3, [r4, #0]
 800db56:	07d9      	lsls	r1, r3, #31
 800db58:	d5d8      	bpl.n	800db0c <_printf_float+0x240>
 800db5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db5e:	4631      	mov	r1, r6
 800db60:	4628      	mov	r0, r5
 800db62:	47b8      	blx	r7
 800db64:	3001      	adds	r0, #1
 800db66:	f43f af0e 	beq.w	800d986 <_printf_float+0xba>
 800db6a:	f04f 0900 	mov.w	r9, #0
 800db6e:	f104 0a1a 	add.w	sl, r4, #26
 800db72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db74:	425b      	negs	r3, r3
 800db76:	454b      	cmp	r3, r9
 800db78:	dc01      	bgt.n	800db7e <_printf_float+0x2b2>
 800db7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db7c:	e794      	b.n	800daa8 <_printf_float+0x1dc>
 800db7e:	2301      	movs	r3, #1
 800db80:	4652      	mov	r2, sl
 800db82:	4631      	mov	r1, r6
 800db84:	4628      	mov	r0, r5
 800db86:	47b8      	blx	r7
 800db88:	3001      	adds	r0, #1
 800db8a:	f43f aefc 	beq.w	800d986 <_printf_float+0xba>
 800db8e:	f109 0901 	add.w	r9, r9, #1
 800db92:	e7ee      	b.n	800db72 <_printf_float+0x2a6>
 800db94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db98:	429a      	cmp	r2, r3
 800db9a:	bfa8      	it	ge
 800db9c:	461a      	movge	r2, r3
 800db9e:	2a00      	cmp	r2, #0
 800dba0:	4691      	mov	r9, r2
 800dba2:	dd07      	ble.n	800dbb4 <_printf_float+0x2e8>
 800dba4:	4613      	mov	r3, r2
 800dba6:	4631      	mov	r1, r6
 800dba8:	4642      	mov	r2, r8
 800dbaa:	4628      	mov	r0, r5
 800dbac:	47b8      	blx	r7
 800dbae:	3001      	adds	r0, #1
 800dbb0:	f43f aee9 	beq.w	800d986 <_printf_float+0xba>
 800dbb4:	f104 031a 	add.w	r3, r4, #26
 800dbb8:	f04f 0b00 	mov.w	fp, #0
 800dbbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dbc0:	9306      	str	r3, [sp, #24]
 800dbc2:	e015      	b.n	800dbf0 <_printf_float+0x324>
 800dbc4:	7fefffff 	.word	0x7fefffff
 800dbc8:	08012b54 	.word	0x08012b54
 800dbcc:	08012b50 	.word	0x08012b50
 800dbd0:	08012b5c 	.word	0x08012b5c
 800dbd4:	08012b58 	.word	0x08012b58
 800dbd8:	08012d7b 	.word	0x08012d7b
 800dbdc:	2301      	movs	r3, #1
 800dbde:	9a06      	ldr	r2, [sp, #24]
 800dbe0:	4631      	mov	r1, r6
 800dbe2:	4628      	mov	r0, r5
 800dbe4:	47b8      	blx	r7
 800dbe6:	3001      	adds	r0, #1
 800dbe8:	f43f aecd 	beq.w	800d986 <_printf_float+0xba>
 800dbec:	f10b 0b01 	add.w	fp, fp, #1
 800dbf0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800dbf4:	ebaa 0309 	sub.w	r3, sl, r9
 800dbf8:	455b      	cmp	r3, fp
 800dbfa:	dcef      	bgt.n	800dbdc <_printf_float+0x310>
 800dbfc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc00:	429a      	cmp	r2, r3
 800dc02:	44d0      	add	r8, sl
 800dc04:	db15      	blt.n	800dc32 <_printf_float+0x366>
 800dc06:	6823      	ldr	r3, [r4, #0]
 800dc08:	07da      	lsls	r2, r3, #31
 800dc0a:	d412      	bmi.n	800dc32 <_printf_float+0x366>
 800dc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc10:	eba3 020a 	sub.w	r2, r3, sl
 800dc14:	eba3 0a01 	sub.w	sl, r3, r1
 800dc18:	4592      	cmp	sl, r2
 800dc1a:	bfa8      	it	ge
 800dc1c:	4692      	movge	sl, r2
 800dc1e:	f1ba 0f00 	cmp.w	sl, #0
 800dc22:	dc0e      	bgt.n	800dc42 <_printf_float+0x376>
 800dc24:	f04f 0800 	mov.w	r8, #0
 800dc28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc2c:	f104 091a 	add.w	r9, r4, #26
 800dc30:	e019      	b.n	800dc66 <_printf_float+0x39a>
 800dc32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc36:	4631      	mov	r1, r6
 800dc38:	4628      	mov	r0, r5
 800dc3a:	47b8      	blx	r7
 800dc3c:	3001      	adds	r0, #1
 800dc3e:	d1e5      	bne.n	800dc0c <_printf_float+0x340>
 800dc40:	e6a1      	b.n	800d986 <_printf_float+0xba>
 800dc42:	4653      	mov	r3, sl
 800dc44:	4642      	mov	r2, r8
 800dc46:	4631      	mov	r1, r6
 800dc48:	4628      	mov	r0, r5
 800dc4a:	47b8      	blx	r7
 800dc4c:	3001      	adds	r0, #1
 800dc4e:	d1e9      	bne.n	800dc24 <_printf_float+0x358>
 800dc50:	e699      	b.n	800d986 <_printf_float+0xba>
 800dc52:	2301      	movs	r3, #1
 800dc54:	464a      	mov	r2, r9
 800dc56:	4631      	mov	r1, r6
 800dc58:	4628      	mov	r0, r5
 800dc5a:	47b8      	blx	r7
 800dc5c:	3001      	adds	r0, #1
 800dc5e:	f43f ae92 	beq.w	800d986 <_printf_float+0xba>
 800dc62:	f108 0801 	add.w	r8, r8, #1
 800dc66:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc6a:	1a9b      	subs	r3, r3, r2
 800dc6c:	eba3 030a 	sub.w	r3, r3, sl
 800dc70:	4543      	cmp	r3, r8
 800dc72:	dcee      	bgt.n	800dc52 <_printf_float+0x386>
 800dc74:	e74a      	b.n	800db0c <_printf_float+0x240>
 800dc76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc78:	2a01      	cmp	r2, #1
 800dc7a:	dc01      	bgt.n	800dc80 <_printf_float+0x3b4>
 800dc7c:	07db      	lsls	r3, r3, #31
 800dc7e:	d53a      	bpl.n	800dcf6 <_printf_float+0x42a>
 800dc80:	2301      	movs	r3, #1
 800dc82:	4642      	mov	r2, r8
 800dc84:	4631      	mov	r1, r6
 800dc86:	4628      	mov	r0, r5
 800dc88:	47b8      	blx	r7
 800dc8a:	3001      	adds	r0, #1
 800dc8c:	f43f ae7b 	beq.w	800d986 <_printf_float+0xba>
 800dc90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc94:	4631      	mov	r1, r6
 800dc96:	4628      	mov	r0, r5
 800dc98:	47b8      	blx	r7
 800dc9a:	3001      	adds	r0, #1
 800dc9c:	f108 0801 	add.w	r8, r8, #1
 800dca0:	f43f ae71 	beq.w	800d986 <_printf_float+0xba>
 800dca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dca6:	2200      	movs	r2, #0
 800dca8:	f103 3aff 	add.w	sl, r3, #4294967295
 800dcac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	f7f2 ff21 	bl	8000af8 <__aeabi_dcmpeq>
 800dcb6:	b9c8      	cbnz	r0, 800dcec <_printf_float+0x420>
 800dcb8:	4653      	mov	r3, sl
 800dcba:	4642      	mov	r2, r8
 800dcbc:	4631      	mov	r1, r6
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	47b8      	blx	r7
 800dcc2:	3001      	adds	r0, #1
 800dcc4:	d10e      	bne.n	800dce4 <_printf_float+0x418>
 800dcc6:	e65e      	b.n	800d986 <_printf_float+0xba>
 800dcc8:	2301      	movs	r3, #1
 800dcca:	4652      	mov	r2, sl
 800dccc:	4631      	mov	r1, r6
 800dcce:	4628      	mov	r0, r5
 800dcd0:	47b8      	blx	r7
 800dcd2:	3001      	adds	r0, #1
 800dcd4:	f43f ae57 	beq.w	800d986 <_printf_float+0xba>
 800dcd8:	f108 0801 	add.w	r8, r8, #1
 800dcdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcde:	3b01      	subs	r3, #1
 800dce0:	4543      	cmp	r3, r8
 800dce2:	dcf1      	bgt.n	800dcc8 <_printf_float+0x3fc>
 800dce4:	464b      	mov	r3, r9
 800dce6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dcea:	e6de      	b.n	800daaa <_printf_float+0x1de>
 800dcec:	f04f 0800 	mov.w	r8, #0
 800dcf0:	f104 0a1a 	add.w	sl, r4, #26
 800dcf4:	e7f2      	b.n	800dcdc <_printf_float+0x410>
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	e7df      	b.n	800dcba <_printf_float+0x3ee>
 800dcfa:	2301      	movs	r3, #1
 800dcfc:	464a      	mov	r2, r9
 800dcfe:	4631      	mov	r1, r6
 800dd00:	4628      	mov	r0, r5
 800dd02:	47b8      	blx	r7
 800dd04:	3001      	adds	r0, #1
 800dd06:	f43f ae3e 	beq.w	800d986 <_printf_float+0xba>
 800dd0a:	f108 0801 	add.w	r8, r8, #1
 800dd0e:	68e3      	ldr	r3, [r4, #12]
 800dd10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dd12:	1a9b      	subs	r3, r3, r2
 800dd14:	4543      	cmp	r3, r8
 800dd16:	dcf0      	bgt.n	800dcfa <_printf_float+0x42e>
 800dd18:	e6fc      	b.n	800db14 <_printf_float+0x248>
 800dd1a:	f04f 0800 	mov.w	r8, #0
 800dd1e:	f104 0919 	add.w	r9, r4, #25
 800dd22:	e7f4      	b.n	800dd0e <_printf_float+0x442>
 800dd24:	2900      	cmp	r1, #0
 800dd26:	f43f ae8b 	beq.w	800da40 <_printf_float+0x174>
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800dd30:	ab09      	add	r3, sp, #36	; 0x24
 800dd32:	9300      	str	r3, [sp, #0]
 800dd34:	ec49 8b10 	vmov	d0, r8, r9
 800dd38:	6022      	str	r2, [r4, #0]
 800dd3a:	f8cd a004 	str.w	sl, [sp, #4]
 800dd3e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dd42:	4628      	mov	r0, r5
 800dd44:	f7ff fd2e 	bl	800d7a4 <__cvt>
 800dd48:	4680      	mov	r8, r0
 800dd4a:	e648      	b.n	800d9de <_printf_float+0x112>

0800dd4c <_printf_common>:
 800dd4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd50:	4691      	mov	r9, r2
 800dd52:	461f      	mov	r7, r3
 800dd54:	688a      	ldr	r2, [r1, #8]
 800dd56:	690b      	ldr	r3, [r1, #16]
 800dd58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	bfb8      	it	lt
 800dd60:	4613      	movlt	r3, r2
 800dd62:	f8c9 3000 	str.w	r3, [r9]
 800dd66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd6a:	4606      	mov	r6, r0
 800dd6c:	460c      	mov	r4, r1
 800dd6e:	b112      	cbz	r2, 800dd76 <_printf_common+0x2a>
 800dd70:	3301      	adds	r3, #1
 800dd72:	f8c9 3000 	str.w	r3, [r9]
 800dd76:	6823      	ldr	r3, [r4, #0]
 800dd78:	0699      	lsls	r1, r3, #26
 800dd7a:	bf42      	ittt	mi
 800dd7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dd80:	3302      	addmi	r3, #2
 800dd82:	f8c9 3000 	strmi.w	r3, [r9]
 800dd86:	6825      	ldr	r5, [r4, #0]
 800dd88:	f015 0506 	ands.w	r5, r5, #6
 800dd8c:	d107      	bne.n	800dd9e <_printf_common+0x52>
 800dd8e:	f104 0a19 	add.w	sl, r4, #25
 800dd92:	68e3      	ldr	r3, [r4, #12]
 800dd94:	f8d9 2000 	ldr.w	r2, [r9]
 800dd98:	1a9b      	subs	r3, r3, r2
 800dd9a:	42ab      	cmp	r3, r5
 800dd9c:	dc28      	bgt.n	800ddf0 <_printf_common+0xa4>
 800dd9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dda2:	6822      	ldr	r2, [r4, #0]
 800dda4:	3300      	adds	r3, #0
 800dda6:	bf18      	it	ne
 800dda8:	2301      	movne	r3, #1
 800ddaa:	0692      	lsls	r2, r2, #26
 800ddac:	d42d      	bmi.n	800de0a <_printf_common+0xbe>
 800ddae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ddb2:	4639      	mov	r1, r7
 800ddb4:	4630      	mov	r0, r6
 800ddb6:	47c0      	blx	r8
 800ddb8:	3001      	adds	r0, #1
 800ddba:	d020      	beq.n	800ddfe <_printf_common+0xb2>
 800ddbc:	6823      	ldr	r3, [r4, #0]
 800ddbe:	68e5      	ldr	r5, [r4, #12]
 800ddc0:	f8d9 2000 	ldr.w	r2, [r9]
 800ddc4:	f003 0306 	and.w	r3, r3, #6
 800ddc8:	2b04      	cmp	r3, #4
 800ddca:	bf08      	it	eq
 800ddcc:	1aad      	subeq	r5, r5, r2
 800ddce:	68a3      	ldr	r3, [r4, #8]
 800ddd0:	6922      	ldr	r2, [r4, #16]
 800ddd2:	bf0c      	ite	eq
 800ddd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ddd8:	2500      	movne	r5, #0
 800ddda:	4293      	cmp	r3, r2
 800dddc:	bfc4      	itt	gt
 800ddde:	1a9b      	subgt	r3, r3, r2
 800dde0:	18ed      	addgt	r5, r5, r3
 800dde2:	f04f 0900 	mov.w	r9, #0
 800dde6:	341a      	adds	r4, #26
 800dde8:	454d      	cmp	r5, r9
 800ddea:	d11a      	bne.n	800de22 <_printf_common+0xd6>
 800ddec:	2000      	movs	r0, #0
 800ddee:	e008      	b.n	800de02 <_printf_common+0xb6>
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	4652      	mov	r2, sl
 800ddf4:	4639      	mov	r1, r7
 800ddf6:	4630      	mov	r0, r6
 800ddf8:	47c0      	blx	r8
 800ddfa:	3001      	adds	r0, #1
 800ddfc:	d103      	bne.n	800de06 <_printf_common+0xba>
 800ddfe:	f04f 30ff 	mov.w	r0, #4294967295
 800de02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de06:	3501      	adds	r5, #1
 800de08:	e7c3      	b.n	800dd92 <_printf_common+0x46>
 800de0a:	18e1      	adds	r1, r4, r3
 800de0c:	1c5a      	adds	r2, r3, #1
 800de0e:	2030      	movs	r0, #48	; 0x30
 800de10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800de14:	4422      	add	r2, r4
 800de16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800de1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800de1e:	3302      	adds	r3, #2
 800de20:	e7c5      	b.n	800ddae <_printf_common+0x62>
 800de22:	2301      	movs	r3, #1
 800de24:	4622      	mov	r2, r4
 800de26:	4639      	mov	r1, r7
 800de28:	4630      	mov	r0, r6
 800de2a:	47c0      	blx	r8
 800de2c:	3001      	adds	r0, #1
 800de2e:	d0e6      	beq.n	800ddfe <_printf_common+0xb2>
 800de30:	f109 0901 	add.w	r9, r9, #1
 800de34:	e7d8      	b.n	800dde8 <_printf_common+0x9c>
	...

0800de38 <_printf_i>:
 800de38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de3c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800de40:	460c      	mov	r4, r1
 800de42:	7e09      	ldrb	r1, [r1, #24]
 800de44:	b085      	sub	sp, #20
 800de46:	296e      	cmp	r1, #110	; 0x6e
 800de48:	4617      	mov	r7, r2
 800de4a:	4606      	mov	r6, r0
 800de4c:	4698      	mov	r8, r3
 800de4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de50:	f000 80b3 	beq.w	800dfba <_printf_i+0x182>
 800de54:	d822      	bhi.n	800de9c <_printf_i+0x64>
 800de56:	2963      	cmp	r1, #99	; 0x63
 800de58:	d036      	beq.n	800dec8 <_printf_i+0x90>
 800de5a:	d80a      	bhi.n	800de72 <_printf_i+0x3a>
 800de5c:	2900      	cmp	r1, #0
 800de5e:	f000 80b9 	beq.w	800dfd4 <_printf_i+0x19c>
 800de62:	2958      	cmp	r1, #88	; 0x58
 800de64:	f000 8083 	beq.w	800df6e <_printf_i+0x136>
 800de68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de6c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800de70:	e032      	b.n	800ded8 <_printf_i+0xa0>
 800de72:	2964      	cmp	r1, #100	; 0x64
 800de74:	d001      	beq.n	800de7a <_printf_i+0x42>
 800de76:	2969      	cmp	r1, #105	; 0x69
 800de78:	d1f6      	bne.n	800de68 <_printf_i+0x30>
 800de7a:	6820      	ldr	r0, [r4, #0]
 800de7c:	6813      	ldr	r3, [r2, #0]
 800de7e:	0605      	lsls	r5, r0, #24
 800de80:	f103 0104 	add.w	r1, r3, #4
 800de84:	d52a      	bpl.n	800dedc <_printf_i+0xa4>
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	6011      	str	r1, [r2, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	da03      	bge.n	800de96 <_printf_i+0x5e>
 800de8e:	222d      	movs	r2, #45	; 0x2d
 800de90:	425b      	negs	r3, r3
 800de92:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800de96:	486f      	ldr	r0, [pc, #444]	; (800e054 <_printf_i+0x21c>)
 800de98:	220a      	movs	r2, #10
 800de9a:	e039      	b.n	800df10 <_printf_i+0xd8>
 800de9c:	2973      	cmp	r1, #115	; 0x73
 800de9e:	f000 809d 	beq.w	800dfdc <_printf_i+0x1a4>
 800dea2:	d808      	bhi.n	800deb6 <_printf_i+0x7e>
 800dea4:	296f      	cmp	r1, #111	; 0x6f
 800dea6:	d020      	beq.n	800deea <_printf_i+0xb2>
 800dea8:	2970      	cmp	r1, #112	; 0x70
 800deaa:	d1dd      	bne.n	800de68 <_printf_i+0x30>
 800deac:	6823      	ldr	r3, [r4, #0]
 800deae:	f043 0320 	orr.w	r3, r3, #32
 800deb2:	6023      	str	r3, [r4, #0]
 800deb4:	e003      	b.n	800debe <_printf_i+0x86>
 800deb6:	2975      	cmp	r1, #117	; 0x75
 800deb8:	d017      	beq.n	800deea <_printf_i+0xb2>
 800deba:	2978      	cmp	r1, #120	; 0x78
 800debc:	d1d4      	bne.n	800de68 <_printf_i+0x30>
 800debe:	2378      	movs	r3, #120	; 0x78
 800dec0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dec4:	4864      	ldr	r0, [pc, #400]	; (800e058 <_printf_i+0x220>)
 800dec6:	e055      	b.n	800df74 <_printf_i+0x13c>
 800dec8:	6813      	ldr	r3, [r2, #0]
 800deca:	1d19      	adds	r1, r3, #4
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	6011      	str	r1, [r2, #0]
 800ded0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ded4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ded8:	2301      	movs	r3, #1
 800deda:	e08c      	b.n	800dff6 <_printf_i+0x1be>
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	6011      	str	r1, [r2, #0]
 800dee0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dee4:	bf18      	it	ne
 800dee6:	b21b      	sxthne	r3, r3
 800dee8:	e7cf      	b.n	800de8a <_printf_i+0x52>
 800deea:	6813      	ldr	r3, [r2, #0]
 800deec:	6825      	ldr	r5, [r4, #0]
 800deee:	1d18      	adds	r0, r3, #4
 800def0:	6010      	str	r0, [r2, #0]
 800def2:	0628      	lsls	r0, r5, #24
 800def4:	d501      	bpl.n	800defa <_printf_i+0xc2>
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	e002      	b.n	800df00 <_printf_i+0xc8>
 800defa:	0668      	lsls	r0, r5, #25
 800defc:	d5fb      	bpl.n	800def6 <_printf_i+0xbe>
 800defe:	881b      	ldrh	r3, [r3, #0]
 800df00:	4854      	ldr	r0, [pc, #336]	; (800e054 <_printf_i+0x21c>)
 800df02:	296f      	cmp	r1, #111	; 0x6f
 800df04:	bf14      	ite	ne
 800df06:	220a      	movne	r2, #10
 800df08:	2208      	moveq	r2, #8
 800df0a:	2100      	movs	r1, #0
 800df0c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800df10:	6865      	ldr	r5, [r4, #4]
 800df12:	60a5      	str	r5, [r4, #8]
 800df14:	2d00      	cmp	r5, #0
 800df16:	f2c0 8095 	blt.w	800e044 <_printf_i+0x20c>
 800df1a:	6821      	ldr	r1, [r4, #0]
 800df1c:	f021 0104 	bic.w	r1, r1, #4
 800df20:	6021      	str	r1, [r4, #0]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d13d      	bne.n	800dfa2 <_printf_i+0x16a>
 800df26:	2d00      	cmp	r5, #0
 800df28:	f040 808e 	bne.w	800e048 <_printf_i+0x210>
 800df2c:	4665      	mov	r5, ip
 800df2e:	2a08      	cmp	r2, #8
 800df30:	d10b      	bne.n	800df4a <_printf_i+0x112>
 800df32:	6823      	ldr	r3, [r4, #0]
 800df34:	07db      	lsls	r3, r3, #31
 800df36:	d508      	bpl.n	800df4a <_printf_i+0x112>
 800df38:	6923      	ldr	r3, [r4, #16]
 800df3a:	6862      	ldr	r2, [r4, #4]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	bfde      	ittt	le
 800df40:	2330      	movle	r3, #48	; 0x30
 800df42:	f805 3c01 	strble.w	r3, [r5, #-1]
 800df46:	f105 35ff 	addle.w	r5, r5, #4294967295
 800df4a:	ebac 0305 	sub.w	r3, ip, r5
 800df4e:	6123      	str	r3, [r4, #16]
 800df50:	f8cd 8000 	str.w	r8, [sp]
 800df54:	463b      	mov	r3, r7
 800df56:	aa03      	add	r2, sp, #12
 800df58:	4621      	mov	r1, r4
 800df5a:	4630      	mov	r0, r6
 800df5c:	f7ff fef6 	bl	800dd4c <_printf_common>
 800df60:	3001      	adds	r0, #1
 800df62:	d14d      	bne.n	800e000 <_printf_i+0x1c8>
 800df64:	f04f 30ff 	mov.w	r0, #4294967295
 800df68:	b005      	add	sp, #20
 800df6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df6e:	4839      	ldr	r0, [pc, #228]	; (800e054 <_printf_i+0x21c>)
 800df70:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800df74:	6813      	ldr	r3, [r2, #0]
 800df76:	6821      	ldr	r1, [r4, #0]
 800df78:	1d1d      	adds	r5, r3, #4
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	6015      	str	r5, [r2, #0]
 800df7e:	060a      	lsls	r2, r1, #24
 800df80:	d50b      	bpl.n	800df9a <_printf_i+0x162>
 800df82:	07ca      	lsls	r2, r1, #31
 800df84:	bf44      	itt	mi
 800df86:	f041 0120 	orrmi.w	r1, r1, #32
 800df8a:	6021      	strmi	r1, [r4, #0]
 800df8c:	b91b      	cbnz	r3, 800df96 <_printf_i+0x15e>
 800df8e:	6822      	ldr	r2, [r4, #0]
 800df90:	f022 0220 	bic.w	r2, r2, #32
 800df94:	6022      	str	r2, [r4, #0]
 800df96:	2210      	movs	r2, #16
 800df98:	e7b7      	b.n	800df0a <_printf_i+0xd2>
 800df9a:	064d      	lsls	r5, r1, #25
 800df9c:	bf48      	it	mi
 800df9e:	b29b      	uxthmi	r3, r3
 800dfa0:	e7ef      	b.n	800df82 <_printf_i+0x14a>
 800dfa2:	4665      	mov	r5, ip
 800dfa4:	fbb3 f1f2 	udiv	r1, r3, r2
 800dfa8:	fb02 3311 	mls	r3, r2, r1, r3
 800dfac:	5cc3      	ldrb	r3, [r0, r3]
 800dfae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800dfb2:	460b      	mov	r3, r1
 800dfb4:	2900      	cmp	r1, #0
 800dfb6:	d1f5      	bne.n	800dfa4 <_printf_i+0x16c>
 800dfb8:	e7b9      	b.n	800df2e <_printf_i+0xf6>
 800dfba:	6813      	ldr	r3, [r2, #0]
 800dfbc:	6825      	ldr	r5, [r4, #0]
 800dfbe:	6961      	ldr	r1, [r4, #20]
 800dfc0:	1d18      	adds	r0, r3, #4
 800dfc2:	6010      	str	r0, [r2, #0]
 800dfc4:	0628      	lsls	r0, r5, #24
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	d501      	bpl.n	800dfce <_printf_i+0x196>
 800dfca:	6019      	str	r1, [r3, #0]
 800dfcc:	e002      	b.n	800dfd4 <_printf_i+0x19c>
 800dfce:	066a      	lsls	r2, r5, #25
 800dfd0:	d5fb      	bpl.n	800dfca <_printf_i+0x192>
 800dfd2:	8019      	strh	r1, [r3, #0]
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	6123      	str	r3, [r4, #16]
 800dfd8:	4665      	mov	r5, ip
 800dfda:	e7b9      	b.n	800df50 <_printf_i+0x118>
 800dfdc:	6813      	ldr	r3, [r2, #0]
 800dfde:	1d19      	adds	r1, r3, #4
 800dfe0:	6011      	str	r1, [r2, #0]
 800dfe2:	681d      	ldr	r5, [r3, #0]
 800dfe4:	6862      	ldr	r2, [r4, #4]
 800dfe6:	2100      	movs	r1, #0
 800dfe8:	4628      	mov	r0, r5
 800dfea:	f7f2 f911 	bl	8000210 <memchr>
 800dfee:	b108      	cbz	r0, 800dff4 <_printf_i+0x1bc>
 800dff0:	1b40      	subs	r0, r0, r5
 800dff2:	6060      	str	r0, [r4, #4]
 800dff4:	6863      	ldr	r3, [r4, #4]
 800dff6:	6123      	str	r3, [r4, #16]
 800dff8:	2300      	movs	r3, #0
 800dffa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dffe:	e7a7      	b.n	800df50 <_printf_i+0x118>
 800e000:	6923      	ldr	r3, [r4, #16]
 800e002:	462a      	mov	r2, r5
 800e004:	4639      	mov	r1, r7
 800e006:	4630      	mov	r0, r6
 800e008:	47c0      	blx	r8
 800e00a:	3001      	adds	r0, #1
 800e00c:	d0aa      	beq.n	800df64 <_printf_i+0x12c>
 800e00e:	6823      	ldr	r3, [r4, #0]
 800e010:	079b      	lsls	r3, r3, #30
 800e012:	d413      	bmi.n	800e03c <_printf_i+0x204>
 800e014:	68e0      	ldr	r0, [r4, #12]
 800e016:	9b03      	ldr	r3, [sp, #12]
 800e018:	4298      	cmp	r0, r3
 800e01a:	bfb8      	it	lt
 800e01c:	4618      	movlt	r0, r3
 800e01e:	e7a3      	b.n	800df68 <_printf_i+0x130>
 800e020:	2301      	movs	r3, #1
 800e022:	464a      	mov	r2, r9
 800e024:	4639      	mov	r1, r7
 800e026:	4630      	mov	r0, r6
 800e028:	47c0      	blx	r8
 800e02a:	3001      	adds	r0, #1
 800e02c:	d09a      	beq.n	800df64 <_printf_i+0x12c>
 800e02e:	3501      	adds	r5, #1
 800e030:	68e3      	ldr	r3, [r4, #12]
 800e032:	9a03      	ldr	r2, [sp, #12]
 800e034:	1a9b      	subs	r3, r3, r2
 800e036:	42ab      	cmp	r3, r5
 800e038:	dcf2      	bgt.n	800e020 <_printf_i+0x1e8>
 800e03a:	e7eb      	b.n	800e014 <_printf_i+0x1dc>
 800e03c:	2500      	movs	r5, #0
 800e03e:	f104 0919 	add.w	r9, r4, #25
 800e042:	e7f5      	b.n	800e030 <_printf_i+0x1f8>
 800e044:	2b00      	cmp	r3, #0
 800e046:	d1ac      	bne.n	800dfa2 <_printf_i+0x16a>
 800e048:	7803      	ldrb	r3, [r0, #0]
 800e04a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e04e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e052:	e76c      	b.n	800df2e <_printf_i+0xf6>
 800e054:	08012b60 	.word	0x08012b60
 800e058:	08012b71 	.word	0x08012b71

0800e05c <_scanf_float>:
 800e05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e060:	469a      	mov	sl, r3
 800e062:	688b      	ldr	r3, [r1, #8]
 800e064:	4616      	mov	r6, r2
 800e066:	1e5a      	subs	r2, r3, #1
 800e068:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e06c:	b087      	sub	sp, #28
 800e06e:	bf83      	ittte	hi
 800e070:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800e074:	189b      	addhi	r3, r3, r2
 800e076:	9301      	strhi	r3, [sp, #4]
 800e078:	2300      	movls	r3, #0
 800e07a:	bf86      	itte	hi
 800e07c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e080:	608b      	strhi	r3, [r1, #8]
 800e082:	9301      	strls	r3, [sp, #4]
 800e084:	680b      	ldr	r3, [r1, #0]
 800e086:	4688      	mov	r8, r1
 800e088:	f04f 0b00 	mov.w	fp, #0
 800e08c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e090:	f848 3b1c 	str.w	r3, [r8], #28
 800e094:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800e098:	4607      	mov	r7, r0
 800e09a:	460c      	mov	r4, r1
 800e09c:	4645      	mov	r5, r8
 800e09e:	465a      	mov	r2, fp
 800e0a0:	46d9      	mov	r9, fp
 800e0a2:	f8cd b008 	str.w	fp, [sp, #8]
 800e0a6:	68a1      	ldr	r1, [r4, #8]
 800e0a8:	b181      	cbz	r1, 800e0cc <_scanf_float+0x70>
 800e0aa:	6833      	ldr	r3, [r6, #0]
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	2b49      	cmp	r3, #73	; 0x49
 800e0b0:	d071      	beq.n	800e196 <_scanf_float+0x13a>
 800e0b2:	d84d      	bhi.n	800e150 <_scanf_float+0xf4>
 800e0b4:	2b39      	cmp	r3, #57	; 0x39
 800e0b6:	d840      	bhi.n	800e13a <_scanf_float+0xde>
 800e0b8:	2b31      	cmp	r3, #49	; 0x31
 800e0ba:	f080 8088 	bcs.w	800e1ce <_scanf_float+0x172>
 800e0be:	2b2d      	cmp	r3, #45	; 0x2d
 800e0c0:	f000 8090 	beq.w	800e1e4 <_scanf_float+0x188>
 800e0c4:	d815      	bhi.n	800e0f2 <_scanf_float+0x96>
 800e0c6:	2b2b      	cmp	r3, #43	; 0x2b
 800e0c8:	f000 808c 	beq.w	800e1e4 <_scanf_float+0x188>
 800e0cc:	f1b9 0f00 	cmp.w	r9, #0
 800e0d0:	d003      	beq.n	800e0da <_scanf_float+0x7e>
 800e0d2:	6823      	ldr	r3, [r4, #0]
 800e0d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e0d8:	6023      	str	r3, [r4, #0]
 800e0da:	3a01      	subs	r2, #1
 800e0dc:	2a01      	cmp	r2, #1
 800e0de:	f200 80ea 	bhi.w	800e2b6 <_scanf_float+0x25a>
 800e0e2:	4545      	cmp	r5, r8
 800e0e4:	f200 80dc 	bhi.w	800e2a0 <_scanf_float+0x244>
 800e0e8:	2601      	movs	r6, #1
 800e0ea:	4630      	mov	r0, r6
 800e0ec:	b007      	add	sp, #28
 800e0ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0f2:	2b2e      	cmp	r3, #46	; 0x2e
 800e0f4:	f000 809f 	beq.w	800e236 <_scanf_float+0x1da>
 800e0f8:	2b30      	cmp	r3, #48	; 0x30
 800e0fa:	d1e7      	bne.n	800e0cc <_scanf_float+0x70>
 800e0fc:	6820      	ldr	r0, [r4, #0]
 800e0fe:	f410 7f80 	tst.w	r0, #256	; 0x100
 800e102:	d064      	beq.n	800e1ce <_scanf_float+0x172>
 800e104:	9b01      	ldr	r3, [sp, #4]
 800e106:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800e10a:	6020      	str	r0, [r4, #0]
 800e10c:	f109 0901 	add.w	r9, r9, #1
 800e110:	b11b      	cbz	r3, 800e11a <_scanf_float+0xbe>
 800e112:	3b01      	subs	r3, #1
 800e114:	3101      	adds	r1, #1
 800e116:	9301      	str	r3, [sp, #4]
 800e118:	60a1      	str	r1, [r4, #8]
 800e11a:	68a3      	ldr	r3, [r4, #8]
 800e11c:	3b01      	subs	r3, #1
 800e11e:	60a3      	str	r3, [r4, #8]
 800e120:	6923      	ldr	r3, [r4, #16]
 800e122:	3301      	adds	r3, #1
 800e124:	6123      	str	r3, [r4, #16]
 800e126:	6873      	ldr	r3, [r6, #4]
 800e128:	3b01      	subs	r3, #1
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	6073      	str	r3, [r6, #4]
 800e12e:	f340 80ac 	ble.w	800e28a <_scanf_float+0x22e>
 800e132:	6833      	ldr	r3, [r6, #0]
 800e134:	3301      	adds	r3, #1
 800e136:	6033      	str	r3, [r6, #0]
 800e138:	e7b5      	b.n	800e0a6 <_scanf_float+0x4a>
 800e13a:	2b45      	cmp	r3, #69	; 0x45
 800e13c:	f000 8085 	beq.w	800e24a <_scanf_float+0x1ee>
 800e140:	2b46      	cmp	r3, #70	; 0x46
 800e142:	d06a      	beq.n	800e21a <_scanf_float+0x1be>
 800e144:	2b41      	cmp	r3, #65	; 0x41
 800e146:	d1c1      	bne.n	800e0cc <_scanf_float+0x70>
 800e148:	2a01      	cmp	r2, #1
 800e14a:	d1bf      	bne.n	800e0cc <_scanf_float+0x70>
 800e14c:	2202      	movs	r2, #2
 800e14e:	e046      	b.n	800e1de <_scanf_float+0x182>
 800e150:	2b65      	cmp	r3, #101	; 0x65
 800e152:	d07a      	beq.n	800e24a <_scanf_float+0x1ee>
 800e154:	d818      	bhi.n	800e188 <_scanf_float+0x12c>
 800e156:	2b54      	cmp	r3, #84	; 0x54
 800e158:	d066      	beq.n	800e228 <_scanf_float+0x1cc>
 800e15a:	d811      	bhi.n	800e180 <_scanf_float+0x124>
 800e15c:	2b4e      	cmp	r3, #78	; 0x4e
 800e15e:	d1b5      	bne.n	800e0cc <_scanf_float+0x70>
 800e160:	2a00      	cmp	r2, #0
 800e162:	d146      	bne.n	800e1f2 <_scanf_float+0x196>
 800e164:	f1b9 0f00 	cmp.w	r9, #0
 800e168:	d145      	bne.n	800e1f6 <_scanf_float+0x19a>
 800e16a:	6821      	ldr	r1, [r4, #0]
 800e16c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e170:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e174:	d13f      	bne.n	800e1f6 <_scanf_float+0x19a>
 800e176:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e17a:	6021      	str	r1, [r4, #0]
 800e17c:	2201      	movs	r2, #1
 800e17e:	e02e      	b.n	800e1de <_scanf_float+0x182>
 800e180:	2b59      	cmp	r3, #89	; 0x59
 800e182:	d01e      	beq.n	800e1c2 <_scanf_float+0x166>
 800e184:	2b61      	cmp	r3, #97	; 0x61
 800e186:	e7de      	b.n	800e146 <_scanf_float+0xea>
 800e188:	2b6e      	cmp	r3, #110	; 0x6e
 800e18a:	d0e9      	beq.n	800e160 <_scanf_float+0x104>
 800e18c:	d815      	bhi.n	800e1ba <_scanf_float+0x15e>
 800e18e:	2b66      	cmp	r3, #102	; 0x66
 800e190:	d043      	beq.n	800e21a <_scanf_float+0x1be>
 800e192:	2b69      	cmp	r3, #105	; 0x69
 800e194:	d19a      	bne.n	800e0cc <_scanf_float+0x70>
 800e196:	f1bb 0f00 	cmp.w	fp, #0
 800e19a:	d138      	bne.n	800e20e <_scanf_float+0x1b2>
 800e19c:	f1b9 0f00 	cmp.w	r9, #0
 800e1a0:	d197      	bne.n	800e0d2 <_scanf_float+0x76>
 800e1a2:	6821      	ldr	r1, [r4, #0]
 800e1a4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e1a8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e1ac:	d195      	bne.n	800e0da <_scanf_float+0x7e>
 800e1ae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e1b2:	6021      	str	r1, [r4, #0]
 800e1b4:	f04f 0b01 	mov.w	fp, #1
 800e1b8:	e011      	b.n	800e1de <_scanf_float+0x182>
 800e1ba:	2b74      	cmp	r3, #116	; 0x74
 800e1bc:	d034      	beq.n	800e228 <_scanf_float+0x1cc>
 800e1be:	2b79      	cmp	r3, #121	; 0x79
 800e1c0:	d184      	bne.n	800e0cc <_scanf_float+0x70>
 800e1c2:	f1bb 0f07 	cmp.w	fp, #7
 800e1c6:	d181      	bne.n	800e0cc <_scanf_float+0x70>
 800e1c8:	f04f 0b08 	mov.w	fp, #8
 800e1cc:	e007      	b.n	800e1de <_scanf_float+0x182>
 800e1ce:	eb12 0f0b 	cmn.w	r2, fp
 800e1d2:	f47f af7b 	bne.w	800e0cc <_scanf_float+0x70>
 800e1d6:	6821      	ldr	r1, [r4, #0]
 800e1d8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800e1dc:	6021      	str	r1, [r4, #0]
 800e1de:	702b      	strb	r3, [r5, #0]
 800e1e0:	3501      	adds	r5, #1
 800e1e2:	e79a      	b.n	800e11a <_scanf_float+0xbe>
 800e1e4:	6821      	ldr	r1, [r4, #0]
 800e1e6:	0608      	lsls	r0, r1, #24
 800e1e8:	f57f af70 	bpl.w	800e0cc <_scanf_float+0x70>
 800e1ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e1f0:	e7f4      	b.n	800e1dc <_scanf_float+0x180>
 800e1f2:	2a02      	cmp	r2, #2
 800e1f4:	d047      	beq.n	800e286 <_scanf_float+0x22a>
 800e1f6:	f1bb 0f01 	cmp.w	fp, #1
 800e1fa:	d003      	beq.n	800e204 <_scanf_float+0x1a8>
 800e1fc:	f1bb 0f04 	cmp.w	fp, #4
 800e200:	f47f af64 	bne.w	800e0cc <_scanf_float+0x70>
 800e204:	f10b 0b01 	add.w	fp, fp, #1
 800e208:	fa5f fb8b 	uxtb.w	fp, fp
 800e20c:	e7e7      	b.n	800e1de <_scanf_float+0x182>
 800e20e:	f1bb 0f03 	cmp.w	fp, #3
 800e212:	d0f7      	beq.n	800e204 <_scanf_float+0x1a8>
 800e214:	f1bb 0f05 	cmp.w	fp, #5
 800e218:	e7f2      	b.n	800e200 <_scanf_float+0x1a4>
 800e21a:	f1bb 0f02 	cmp.w	fp, #2
 800e21e:	f47f af55 	bne.w	800e0cc <_scanf_float+0x70>
 800e222:	f04f 0b03 	mov.w	fp, #3
 800e226:	e7da      	b.n	800e1de <_scanf_float+0x182>
 800e228:	f1bb 0f06 	cmp.w	fp, #6
 800e22c:	f47f af4e 	bne.w	800e0cc <_scanf_float+0x70>
 800e230:	f04f 0b07 	mov.w	fp, #7
 800e234:	e7d3      	b.n	800e1de <_scanf_float+0x182>
 800e236:	6821      	ldr	r1, [r4, #0]
 800e238:	0588      	lsls	r0, r1, #22
 800e23a:	f57f af47 	bpl.w	800e0cc <_scanf_float+0x70>
 800e23e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800e242:	6021      	str	r1, [r4, #0]
 800e244:	f8cd 9008 	str.w	r9, [sp, #8]
 800e248:	e7c9      	b.n	800e1de <_scanf_float+0x182>
 800e24a:	6821      	ldr	r1, [r4, #0]
 800e24c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800e250:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e254:	d006      	beq.n	800e264 <_scanf_float+0x208>
 800e256:	0548      	lsls	r0, r1, #21
 800e258:	f57f af38 	bpl.w	800e0cc <_scanf_float+0x70>
 800e25c:	f1b9 0f00 	cmp.w	r9, #0
 800e260:	f43f af3b 	beq.w	800e0da <_scanf_float+0x7e>
 800e264:	0588      	lsls	r0, r1, #22
 800e266:	bf58      	it	pl
 800e268:	9802      	ldrpl	r0, [sp, #8]
 800e26a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e26e:	bf58      	it	pl
 800e270:	eba9 0000 	subpl.w	r0, r9, r0
 800e274:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800e278:	bf58      	it	pl
 800e27a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800e27e:	6021      	str	r1, [r4, #0]
 800e280:	f04f 0900 	mov.w	r9, #0
 800e284:	e7ab      	b.n	800e1de <_scanf_float+0x182>
 800e286:	2203      	movs	r2, #3
 800e288:	e7a9      	b.n	800e1de <_scanf_float+0x182>
 800e28a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e28e:	9205      	str	r2, [sp, #20]
 800e290:	4631      	mov	r1, r6
 800e292:	4638      	mov	r0, r7
 800e294:	4798      	blx	r3
 800e296:	9a05      	ldr	r2, [sp, #20]
 800e298:	2800      	cmp	r0, #0
 800e29a:	f43f af04 	beq.w	800e0a6 <_scanf_float+0x4a>
 800e29e:	e715      	b.n	800e0cc <_scanf_float+0x70>
 800e2a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e2a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e2a8:	4632      	mov	r2, r6
 800e2aa:	4638      	mov	r0, r7
 800e2ac:	4798      	blx	r3
 800e2ae:	6923      	ldr	r3, [r4, #16]
 800e2b0:	3b01      	subs	r3, #1
 800e2b2:	6123      	str	r3, [r4, #16]
 800e2b4:	e715      	b.n	800e0e2 <_scanf_float+0x86>
 800e2b6:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e2ba:	2b06      	cmp	r3, #6
 800e2bc:	d80a      	bhi.n	800e2d4 <_scanf_float+0x278>
 800e2be:	f1bb 0f02 	cmp.w	fp, #2
 800e2c2:	d968      	bls.n	800e396 <_scanf_float+0x33a>
 800e2c4:	f1ab 0b03 	sub.w	fp, fp, #3
 800e2c8:	fa5f fb8b 	uxtb.w	fp, fp
 800e2cc:	eba5 0b0b 	sub.w	fp, r5, fp
 800e2d0:	455d      	cmp	r5, fp
 800e2d2:	d14b      	bne.n	800e36c <_scanf_float+0x310>
 800e2d4:	6823      	ldr	r3, [r4, #0]
 800e2d6:	05da      	lsls	r2, r3, #23
 800e2d8:	d51f      	bpl.n	800e31a <_scanf_float+0x2be>
 800e2da:	055b      	lsls	r3, r3, #21
 800e2dc:	d468      	bmi.n	800e3b0 <_scanf_float+0x354>
 800e2de:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e2e2:	6923      	ldr	r3, [r4, #16]
 800e2e4:	2965      	cmp	r1, #101	; 0x65
 800e2e6:	f103 33ff 	add.w	r3, r3, #4294967295
 800e2ea:	f105 3bff 	add.w	fp, r5, #4294967295
 800e2ee:	6123      	str	r3, [r4, #16]
 800e2f0:	d00d      	beq.n	800e30e <_scanf_float+0x2b2>
 800e2f2:	2945      	cmp	r1, #69	; 0x45
 800e2f4:	d00b      	beq.n	800e30e <_scanf_float+0x2b2>
 800e2f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e2fa:	4632      	mov	r2, r6
 800e2fc:	4638      	mov	r0, r7
 800e2fe:	4798      	blx	r3
 800e300:	6923      	ldr	r3, [r4, #16]
 800e302:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800e306:	3b01      	subs	r3, #1
 800e308:	f1a5 0b02 	sub.w	fp, r5, #2
 800e30c:	6123      	str	r3, [r4, #16]
 800e30e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e312:	4632      	mov	r2, r6
 800e314:	4638      	mov	r0, r7
 800e316:	4798      	blx	r3
 800e318:	465d      	mov	r5, fp
 800e31a:	6826      	ldr	r6, [r4, #0]
 800e31c:	f016 0610 	ands.w	r6, r6, #16
 800e320:	d17a      	bne.n	800e418 <_scanf_float+0x3bc>
 800e322:	702e      	strb	r6, [r5, #0]
 800e324:	6823      	ldr	r3, [r4, #0]
 800e326:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e32a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e32e:	d142      	bne.n	800e3b6 <_scanf_float+0x35a>
 800e330:	9b02      	ldr	r3, [sp, #8]
 800e332:	eba9 0303 	sub.w	r3, r9, r3
 800e336:	425a      	negs	r2, r3
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d149      	bne.n	800e3d0 <_scanf_float+0x374>
 800e33c:	2200      	movs	r2, #0
 800e33e:	4641      	mov	r1, r8
 800e340:	4638      	mov	r0, r7
 800e342:	f000 ffcd 	bl	800f2e0 <_strtod_r>
 800e346:	6825      	ldr	r5, [r4, #0]
 800e348:	f8da 3000 	ldr.w	r3, [sl]
 800e34c:	f015 0f02 	tst.w	r5, #2
 800e350:	f103 0204 	add.w	r2, r3, #4
 800e354:	ec59 8b10 	vmov	r8, r9, d0
 800e358:	f8ca 2000 	str.w	r2, [sl]
 800e35c:	d043      	beq.n	800e3e6 <_scanf_float+0x38a>
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	e9c3 8900 	strd	r8, r9, [r3]
 800e364:	68e3      	ldr	r3, [r4, #12]
 800e366:	3301      	adds	r3, #1
 800e368:	60e3      	str	r3, [r4, #12]
 800e36a:	e6be      	b.n	800e0ea <_scanf_float+0x8e>
 800e36c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e370:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e374:	4632      	mov	r2, r6
 800e376:	4638      	mov	r0, r7
 800e378:	4798      	blx	r3
 800e37a:	6923      	ldr	r3, [r4, #16]
 800e37c:	3b01      	subs	r3, #1
 800e37e:	6123      	str	r3, [r4, #16]
 800e380:	e7a6      	b.n	800e2d0 <_scanf_float+0x274>
 800e382:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e386:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e38a:	4632      	mov	r2, r6
 800e38c:	4638      	mov	r0, r7
 800e38e:	4798      	blx	r3
 800e390:	6923      	ldr	r3, [r4, #16]
 800e392:	3b01      	subs	r3, #1
 800e394:	6123      	str	r3, [r4, #16]
 800e396:	4545      	cmp	r5, r8
 800e398:	d8f3      	bhi.n	800e382 <_scanf_float+0x326>
 800e39a:	e6a5      	b.n	800e0e8 <_scanf_float+0x8c>
 800e39c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e3a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e3a4:	4632      	mov	r2, r6
 800e3a6:	4638      	mov	r0, r7
 800e3a8:	4798      	blx	r3
 800e3aa:	6923      	ldr	r3, [r4, #16]
 800e3ac:	3b01      	subs	r3, #1
 800e3ae:	6123      	str	r3, [r4, #16]
 800e3b0:	4545      	cmp	r5, r8
 800e3b2:	d8f3      	bhi.n	800e39c <_scanf_float+0x340>
 800e3b4:	e698      	b.n	800e0e8 <_scanf_float+0x8c>
 800e3b6:	9b03      	ldr	r3, [sp, #12]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d0bf      	beq.n	800e33c <_scanf_float+0x2e0>
 800e3bc:	9904      	ldr	r1, [sp, #16]
 800e3be:	230a      	movs	r3, #10
 800e3c0:	4632      	mov	r2, r6
 800e3c2:	3101      	adds	r1, #1
 800e3c4:	4638      	mov	r0, r7
 800e3c6:	f001 f817 	bl	800f3f8 <_strtol_r>
 800e3ca:	9b03      	ldr	r3, [sp, #12]
 800e3cc:	9d04      	ldr	r5, [sp, #16]
 800e3ce:	1ac2      	subs	r2, r0, r3
 800e3d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e3d4:	429d      	cmp	r5, r3
 800e3d6:	bf28      	it	cs
 800e3d8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800e3dc:	490f      	ldr	r1, [pc, #60]	; (800e41c <_scanf_float+0x3c0>)
 800e3de:	4628      	mov	r0, r5
 800e3e0:	f000 f8d4 	bl	800e58c <siprintf>
 800e3e4:	e7aa      	b.n	800e33c <_scanf_float+0x2e0>
 800e3e6:	f015 0504 	ands.w	r5, r5, #4
 800e3ea:	d1b8      	bne.n	800e35e <_scanf_float+0x302>
 800e3ec:	681f      	ldr	r7, [r3, #0]
 800e3ee:	ee10 2a10 	vmov	r2, s0
 800e3f2:	464b      	mov	r3, r9
 800e3f4:	ee10 0a10 	vmov	r0, s0
 800e3f8:	4649      	mov	r1, r9
 800e3fa:	f7f2 fbaf 	bl	8000b5c <__aeabi_dcmpun>
 800e3fe:	b128      	cbz	r0, 800e40c <_scanf_float+0x3b0>
 800e400:	4628      	mov	r0, r5
 800e402:	f000 f889 	bl	800e518 <nanf>
 800e406:	ed87 0a00 	vstr	s0, [r7]
 800e40a:	e7ab      	b.n	800e364 <_scanf_float+0x308>
 800e40c:	4640      	mov	r0, r8
 800e40e:	4649      	mov	r1, r9
 800e410:	f7f2 fc02 	bl	8000c18 <__aeabi_d2f>
 800e414:	6038      	str	r0, [r7, #0]
 800e416:	e7a5      	b.n	800e364 <_scanf_float+0x308>
 800e418:	2600      	movs	r6, #0
 800e41a:	e666      	b.n	800e0ea <_scanf_float+0x8e>
 800e41c:	08012b82 	.word	0x08012b82

0800e420 <iprintf>:
 800e420:	b40f      	push	{r0, r1, r2, r3}
 800e422:	4b0a      	ldr	r3, [pc, #40]	; (800e44c <iprintf+0x2c>)
 800e424:	b513      	push	{r0, r1, r4, lr}
 800e426:	681c      	ldr	r4, [r3, #0]
 800e428:	b124      	cbz	r4, 800e434 <iprintf+0x14>
 800e42a:	69a3      	ldr	r3, [r4, #24]
 800e42c:	b913      	cbnz	r3, 800e434 <iprintf+0x14>
 800e42e:	4620      	mov	r0, r4
 800e430:	f002 f82a 	bl	8010488 <__sinit>
 800e434:	ab05      	add	r3, sp, #20
 800e436:	9a04      	ldr	r2, [sp, #16]
 800e438:	68a1      	ldr	r1, [r4, #8]
 800e43a:	9301      	str	r3, [sp, #4]
 800e43c:	4620      	mov	r0, r4
 800e43e:	f003 fc6b 	bl	8011d18 <_vfiprintf_r>
 800e442:	b002      	add	sp, #8
 800e444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e448:	b004      	add	sp, #16
 800e44a:	4770      	bx	lr
 800e44c:	2000000c 	.word	0x2000000c

0800e450 <_puts_r>:
 800e450:	b570      	push	{r4, r5, r6, lr}
 800e452:	460e      	mov	r6, r1
 800e454:	4605      	mov	r5, r0
 800e456:	b118      	cbz	r0, 800e460 <_puts_r+0x10>
 800e458:	6983      	ldr	r3, [r0, #24]
 800e45a:	b90b      	cbnz	r3, 800e460 <_puts_r+0x10>
 800e45c:	f002 f814 	bl	8010488 <__sinit>
 800e460:	69ab      	ldr	r3, [r5, #24]
 800e462:	68ac      	ldr	r4, [r5, #8]
 800e464:	b913      	cbnz	r3, 800e46c <_puts_r+0x1c>
 800e466:	4628      	mov	r0, r5
 800e468:	f002 f80e 	bl	8010488 <__sinit>
 800e46c:	4b23      	ldr	r3, [pc, #140]	; (800e4fc <_puts_r+0xac>)
 800e46e:	429c      	cmp	r4, r3
 800e470:	d117      	bne.n	800e4a2 <_puts_r+0x52>
 800e472:	686c      	ldr	r4, [r5, #4]
 800e474:	89a3      	ldrh	r3, [r4, #12]
 800e476:	071b      	lsls	r3, r3, #28
 800e478:	d51d      	bpl.n	800e4b6 <_puts_r+0x66>
 800e47a:	6923      	ldr	r3, [r4, #16]
 800e47c:	b1db      	cbz	r3, 800e4b6 <_puts_r+0x66>
 800e47e:	3e01      	subs	r6, #1
 800e480:	68a3      	ldr	r3, [r4, #8]
 800e482:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e486:	3b01      	subs	r3, #1
 800e488:	60a3      	str	r3, [r4, #8]
 800e48a:	b9e9      	cbnz	r1, 800e4c8 <_puts_r+0x78>
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	da2e      	bge.n	800e4ee <_puts_r+0x9e>
 800e490:	4622      	mov	r2, r4
 800e492:	210a      	movs	r1, #10
 800e494:	4628      	mov	r0, r5
 800e496:	f000 ffe1 	bl	800f45c <__swbuf_r>
 800e49a:	3001      	adds	r0, #1
 800e49c:	d011      	beq.n	800e4c2 <_puts_r+0x72>
 800e49e:	200a      	movs	r0, #10
 800e4a0:	e011      	b.n	800e4c6 <_puts_r+0x76>
 800e4a2:	4b17      	ldr	r3, [pc, #92]	; (800e500 <_puts_r+0xb0>)
 800e4a4:	429c      	cmp	r4, r3
 800e4a6:	d101      	bne.n	800e4ac <_puts_r+0x5c>
 800e4a8:	68ac      	ldr	r4, [r5, #8]
 800e4aa:	e7e3      	b.n	800e474 <_puts_r+0x24>
 800e4ac:	4b15      	ldr	r3, [pc, #84]	; (800e504 <_puts_r+0xb4>)
 800e4ae:	429c      	cmp	r4, r3
 800e4b0:	bf08      	it	eq
 800e4b2:	68ec      	ldreq	r4, [r5, #12]
 800e4b4:	e7de      	b.n	800e474 <_puts_r+0x24>
 800e4b6:	4621      	mov	r1, r4
 800e4b8:	4628      	mov	r0, r5
 800e4ba:	f001 f833 	bl	800f524 <__swsetup_r>
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	d0dd      	beq.n	800e47e <_puts_r+0x2e>
 800e4c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c6:	bd70      	pop	{r4, r5, r6, pc}
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	da04      	bge.n	800e4d6 <_puts_r+0x86>
 800e4cc:	69a2      	ldr	r2, [r4, #24]
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	dc06      	bgt.n	800e4e0 <_puts_r+0x90>
 800e4d2:	290a      	cmp	r1, #10
 800e4d4:	d004      	beq.n	800e4e0 <_puts_r+0x90>
 800e4d6:	6823      	ldr	r3, [r4, #0]
 800e4d8:	1c5a      	adds	r2, r3, #1
 800e4da:	6022      	str	r2, [r4, #0]
 800e4dc:	7019      	strb	r1, [r3, #0]
 800e4de:	e7cf      	b.n	800e480 <_puts_r+0x30>
 800e4e0:	4622      	mov	r2, r4
 800e4e2:	4628      	mov	r0, r5
 800e4e4:	f000 ffba 	bl	800f45c <__swbuf_r>
 800e4e8:	3001      	adds	r0, #1
 800e4ea:	d1c9      	bne.n	800e480 <_puts_r+0x30>
 800e4ec:	e7e9      	b.n	800e4c2 <_puts_r+0x72>
 800e4ee:	6823      	ldr	r3, [r4, #0]
 800e4f0:	200a      	movs	r0, #10
 800e4f2:	1c5a      	adds	r2, r3, #1
 800e4f4:	6022      	str	r2, [r4, #0]
 800e4f6:	7018      	strb	r0, [r3, #0]
 800e4f8:	e7e5      	b.n	800e4c6 <_puts_r+0x76>
 800e4fa:	bf00      	nop
 800e4fc:	08012c08 	.word	0x08012c08
 800e500:	08012c28 	.word	0x08012c28
 800e504:	08012be8 	.word	0x08012be8

0800e508 <puts>:
 800e508:	4b02      	ldr	r3, [pc, #8]	; (800e514 <puts+0xc>)
 800e50a:	4601      	mov	r1, r0
 800e50c:	6818      	ldr	r0, [r3, #0]
 800e50e:	f7ff bf9f 	b.w	800e450 <_puts_r>
 800e512:	bf00      	nop
 800e514:	2000000c 	.word	0x2000000c

0800e518 <nanf>:
 800e518:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e520 <nanf+0x8>
 800e51c:	4770      	bx	lr
 800e51e:	bf00      	nop
 800e520:	7fc00000 	.word	0x7fc00000

0800e524 <sniprintf>:
 800e524:	b40c      	push	{r2, r3}
 800e526:	b530      	push	{r4, r5, lr}
 800e528:	4b17      	ldr	r3, [pc, #92]	; (800e588 <sniprintf+0x64>)
 800e52a:	1e0c      	subs	r4, r1, #0
 800e52c:	b09d      	sub	sp, #116	; 0x74
 800e52e:	681d      	ldr	r5, [r3, #0]
 800e530:	da08      	bge.n	800e544 <sniprintf+0x20>
 800e532:	238b      	movs	r3, #139	; 0x8b
 800e534:	602b      	str	r3, [r5, #0]
 800e536:	f04f 30ff 	mov.w	r0, #4294967295
 800e53a:	b01d      	add	sp, #116	; 0x74
 800e53c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e540:	b002      	add	sp, #8
 800e542:	4770      	bx	lr
 800e544:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e548:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e54c:	bf14      	ite	ne
 800e54e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e552:	4623      	moveq	r3, r4
 800e554:	9304      	str	r3, [sp, #16]
 800e556:	9307      	str	r3, [sp, #28]
 800e558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e55c:	9002      	str	r0, [sp, #8]
 800e55e:	9006      	str	r0, [sp, #24]
 800e560:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e564:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e566:	ab21      	add	r3, sp, #132	; 0x84
 800e568:	a902      	add	r1, sp, #8
 800e56a:	4628      	mov	r0, r5
 800e56c:	9301      	str	r3, [sp, #4]
 800e56e:	f003 f907 	bl	8011780 <_svfiprintf_r>
 800e572:	1c43      	adds	r3, r0, #1
 800e574:	bfbc      	itt	lt
 800e576:	238b      	movlt	r3, #139	; 0x8b
 800e578:	602b      	strlt	r3, [r5, #0]
 800e57a:	2c00      	cmp	r4, #0
 800e57c:	d0dd      	beq.n	800e53a <sniprintf+0x16>
 800e57e:	9b02      	ldr	r3, [sp, #8]
 800e580:	2200      	movs	r2, #0
 800e582:	701a      	strb	r2, [r3, #0]
 800e584:	e7d9      	b.n	800e53a <sniprintf+0x16>
 800e586:	bf00      	nop
 800e588:	2000000c 	.word	0x2000000c

0800e58c <siprintf>:
 800e58c:	b40e      	push	{r1, r2, r3}
 800e58e:	b500      	push	{lr}
 800e590:	b09c      	sub	sp, #112	; 0x70
 800e592:	ab1d      	add	r3, sp, #116	; 0x74
 800e594:	9002      	str	r0, [sp, #8]
 800e596:	9006      	str	r0, [sp, #24]
 800e598:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e59c:	4809      	ldr	r0, [pc, #36]	; (800e5c4 <siprintf+0x38>)
 800e59e:	9107      	str	r1, [sp, #28]
 800e5a0:	9104      	str	r1, [sp, #16]
 800e5a2:	4909      	ldr	r1, [pc, #36]	; (800e5c8 <siprintf+0x3c>)
 800e5a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5a8:	9105      	str	r1, [sp, #20]
 800e5aa:	6800      	ldr	r0, [r0, #0]
 800e5ac:	9301      	str	r3, [sp, #4]
 800e5ae:	a902      	add	r1, sp, #8
 800e5b0:	f003 f8e6 	bl	8011780 <_svfiprintf_r>
 800e5b4:	9b02      	ldr	r3, [sp, #8]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	701a      	strb	r2, [r3, #0]
 800e5ba:	b01c      	add	sp, #112	; 0x70
 800e5bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e5c0:	b003      	add	sp, #12
 800e5c2:	4770      	bx	lr
 800e5c4:	2000000c 	.word	0x2000000c
 800e5c8:	ffff0208 	.word	0xffff0208

0800e5cc <siscanf>:
 800e5cc:	b40e      	push	{r1, r2, r3}
 800e5ce:	b530      	push	{r4, r5, lr}
 800e5d0:	b09c      	sub	sp, #112	; 0x70
 800e5d2:	ac1f      	add	r4, sp, #124	; 0x7c
 800e5d4:	f44f 7201 	mov.w	r2, #516	; 0x204
 800e5d8:	f854 5b04 	ldr.w	r5, [r4], #4
 800e5dc:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e5e0:	9002      	str	r0, [sp, #8]
 800e5e2:	9006      	str	r0, [sp, #24]
 800e5e4:	f7f1 fe0c 	bl	8000200 <strlen>
 800e5e8:	4b0b      	ldr	r3, [pc, #44]	; (800e618 <siscanf+0x4c>)
 800e5ea:	9003      	str	r0, [sp, #12]
 800e5ec:	9007      	str	r0, [sp, #28]
 800e5ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800e5f0:	480a      	ldr	r0, [pc, #40]	; (800e61c <siscanf+0x50>)
 800e5f2:	9401      	str	r4, [sp, #4]
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e5f8:	9314      	str	r3, [sp, #80]	; 0x50
 800e5fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e5fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e602:	462a      	mov	r2, r5
 800e604:	4623      	mov	r3, r4
 800e606:	a902      	add	r1, sp, #8
 800e608:	6800      	ldr	r0, [r0, #0]
 800e60a:	f003 fa0b 	bl	8011a24 <__ssvfiscanf_r>
 800e60e:	b01c      	add	sp, #112	; 0x70
 800e610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e614:	b003      	add	sp, #12
 800e616:	4770      	bx	lr
 800e618:	0800e643 	.word	0x0800e643
 800e61c:	2000000c 	.word	0x2000000c

0800e620 <__sread>:
 800e620:	b510      	push	{r4, lr}
 800e622:	460c      	mov	r4, r1
 800e624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e628:	f003 fde4 	bl	80121f4 <_read_r>
 800e62c:	2800      	cmp	r0, #0
 800e62e:	bfab      	itete	ge
 800e630:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e632:	89a3      	ldrhlt	r3, [r4, #12]
 800e634:	181b      	addge	r3, r3, r0
 800e636:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e63a:	bfac      	ite	ge
 800e63c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e63e:	81a3      	strhlt	r3, [r4, #12]
 800e640:	bd10      	pop	{r4, pc}

0800e642 <__seofread>:
 800e642:	2000      	movs	r0, #0
 800e644:	4770      	bx	lr

0800e646 <__swrite>:
 800e646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e64a:	461f      	mov	r7, r3
 800e64c:	898b      	ldrh	r3, [r1, #12]
 800e64e:	05db      	lsls	r3, r3, #23
 800e650:	4605      	mov	r5, r0
 800e652:	460c      	mov	r4, r1
 800e654:	4616      	mov	r6, r2
 800e656:	d505      	bpl.n	800e664 <__swrite+0x1e>
 800e658:	2302      	movs	r3, #2
 800e65a:	2200      	movs	r2, #0
 800e65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e660:	f002 fae4 	bl	8010c2c <_lseek_r>
 800e664:	89a3      	ldrh	r3, [r4, #12]
 800e666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e66a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e66e:	81a3      	strh	r3, [r4, #12]
 800e670:	4632      	mov	r2, r6
 800e672:	463b      	mov	r3, r7
 800e674:	4628      	mov	r0, r5
 800e676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e67a:	f000 bf41 	b.w	800f500 <_write_r>

0800e67e <__sseek>:
 800e67e:	b510      	push	{r4, lr}
 800e680:	460c      	mov	r4, r1
 800e682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e686:	f002 fad1 	bl	8010c2c <_lseek_r>
 800e68a:	1c43      	adds	r3, r0, #1
 800e68c:	89a3      	ldrh	r3, [r4, #12]
 800e68e:	bf15      	itete	ne
 800e690:	6560      	strne	r0, [r4, #84]	; 0x54
 800e692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e69a:	81a3      	strheq	r3, [r4, #12]
 800e69c:	bf18      	it	ne
 800e69e:	81a3      	strhne	r3, [r4, #12]
 800e6a0:	bd10      	pop	{r4, pc}

0800e6a2 <__sclose>:
 800e6a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6a6:	f000 bfab 	b.w	800f600 <_close_r>

0800e6aa <strcpy>:
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6b0:	f803 2b01 	strb.w	r2, [r3], #1
 800e6b4:	2a00      	cmp	r2, #0
 800e6b6:	d1f9      	bne.n	800e6ac <strcpy+0x2>
 800e6b8:	4770      	bx	lr

0800e6ba <sulp>:
 800e6ba:	b570      	push	{r4, r5, r6, lr}
 800e6bc:	4604      	mov	r4, r0
 800e6be:	460d      	mov	r5, r1
 800e6c0:	ec45 4b10 	vmov	d0, r4, r5
 800e6c4:	4616      	mov	r6, r2
 800e6c6:	f002 fe17 	bl	80112f8 <__ulp>
 800e6ca:	ec51 0b10 	vmov	r0, r1, d0
 800e6ce:	b17e      	cbz	r6, 800e6f0 <sulp+0x36>
 800e6d0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e6d4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	dd09      	ble.n	800e6f0 <sulp+0x36>
 800e6dc:	051b      	lsls	r3, r3, #20
 800e6de:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e6e2:	2400      	movs	r4, #0
 800e6e4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e6e8:	4622      	mov	r2, r4
 800e6ea:	462b      	mov	r3, r5
 800e6ec:	f7f1 ff9c 	bl	8000628 <__aeabi_dmul>
 800e6f0:	bd70      	pop	{r4, r5, r6, pc}
 800e6f2:	0000      	movs	r0, r0
 800e6f4:	0000      	movs	r0, r0
	...

0800e6f8 <_strtod_l>:
 800e6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6fc:	461f      	mov	r7, r3
 800e6fe:	b0a1      	sub	sp, #132	; 0x84
 800e700:	2300      	movs	r3, #0
 800e702:	4681      	mov	r9, r0
 800e704:	4638      	mov	r0, r7
 800e706:	460e      	mov	r6, r1
 800e708:	9217      	str	r2, [sp, #92]	; 0x5c
 800e70a:	931c      	str	r3, [sp, #112]	; 0x70
 800e70c:	f002 fa7e 	bl	8010c0c <__localeconv_l>
 800e710:	4680      	mov	r8, r0
 800e712:	6800      	ldr	r0, [r0, #0]
 800e714:	f7f1 fd74 	bl	8000200 <strlen>
 800e718:	f04f 0a00 	mov.w	sl, #0
 800e71c:	4604      	mov	r4, r0
 800e71e:	f04f 0b00 	mov.w	fp, #0
 800e722:	961b      	str	r6, [sp, #108]	; 0x6c
 800e724:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e726:	781a      	ldrb	r2, [r3, #0]
 800e728:	2a0d      	cmp	r2, #13
 800e72a:	d832      	bhi.n	800e792 <_strtod_l+0x9a>
 800e72c:	2a09      	cmp	r2, #9
 800e72e:	d236      	bcs.n	800e79e <_strtod_l+0xa6>
 800e730:	2a00      	cmp	r2, #0
 800e732:	d03e      	beq.n	800e7b2 <_strtod_l+0xba>
 800e734:	2300      	movs	r3, #0
 800e736:	930d      	str	r3, [sp, #52]	; 0x34
 800e738:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e73a:	782b      	ldrb	r3, [r5, #0]
 800e73c:	2b30      	cmp	r3, #48	; 0x30
 800e73e:	f040 80ac 	bne.w	800e89a <_strtod_l+0x1a2>
 800e742:	786b      	ldrb	r3, [r5, #1]
 800e744:	2b58      	cmp	r3, #88	; 0x58
 800e746:	d001      	beq.n	800e74c <_strtod_l+0x54>
 800e748:	2b78      	cmp	r3, #120	; 0x78
 800e74a:	d167      	bne.n	800e81c <_strtod_l+0x124>
 800e74c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e74e:	9301      	str	r3, [sp, #4]
 800e750:	ab1c      	add	r3, sp, #112	; 0x70
 800e752:	9300      	str	r3, [sp, #0]
 800e754:	9702      	str	r7, [sp, #8]
 800e756:	ab1d      	add	r3, sp, #116	; 0x74
 800e758:	4a88      	ldr	r2, [pc, #544]	; (800e97c <_strtod_l+0x284>)
 800e75a:	a91b      	add	r1, sp, #108	; 0x6c
 800e75c:	4648      	mov	r0, r9
 800e75e:	f001 ff6c 	bl	801063a <__gethex>
 800e762:	f010 0407 	ands.w	r4, r0, #7
 800e766:	4606      	mov	r6, r0
 800e768:	d005      	beq.n	800e776 <_strtod_l+0x7e>
 800e76a:	2c06      	cmp	r4, #6
 800e76c:	d12b      	bne.n	800e7c6 <_strtod_l+0xce>
 800e76e:	3501      	adds	r5, #1
 800e770:	2300      	movs	r3, #0
 800e772:	951b      	str	r5, [sp, #108]	; 0x6c
 800e774:	930d      	str	r3, [sp, #52]	; 0x34
 800e776:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e778:	2b00      	cmp	r3, #0
 800e77a:	f040 859a 	bne.w	800f2b2 <_strtod_l+0xbba>
 800e77e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e780:	b1e3      	cbz	r3, 800e7bc <_strtod_l+0xc4>
 800e782:	4652      	mov	r2, sl
 800e784:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e788:	ec43 2b10 	vmov	d0, r2, r3
 800e78c:	b021      	add	sp, #132	; 0x84
 800e78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e792:	2a2b      	cmp	r2, #43	; 0x2b
 800e794:	d015      	beq.n	800e7c2 <_strtod_l+0xca>
 800e796:	2a2d      	cmp	r2, #45	; 0x2d
 800e798:	d004      	beq.n	800e7a4 <_strtod_l+0xac>
 800e79a:	2a20      	cmp	r2, #32
 800e79c:	d1ca      	bne.n	800e734 <_strtod_l+0x3c>
 800e79e:	3301      	adds	r3, #1
 800e7a0:	931b      	str	r3, [sp, #108]	; 0x6c
 800e7a2:	e7bf      	b.n	800e724 <_strtod_l+0x2c>
 800e7a4:	2201      	movs	r2, #1
 800e7a6:	920d      	str	r2, [sp, #52]	; 0x34
 800e7a8:	1c5a      	adds	r2, r3, #1
 800e7aa:	921b      	str	r2, [sp, #108]	; 0x6c
 800e7ac:	785b      	ldrb	r3, [r3, #1]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d1c2      	bne.n	800e738 <_strtod_l+0x40>
 800e7b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e7b4:	961b      	str	r6, [sp, #108]	; 0x6c
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	f040 8579 	bne.w	800f2ae <_strtod_l+0xbb6>
 800e7bc:	4652      	mov	r2, sl
 800e7be:	465b      	mov	r3, fp
 800e7c0:	e7e2      	b.n	800e788 <_strtod_l+0x90>
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	e7ef      	b.n	800e7a6 <_strtod_l+0xae>
 800e7c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e7c8:	b13a      	cbz	r2, 800e7da <_strtod_l+0xe2>
 800e7ca:	2135      	movs	r1, #53	; 0x35
 800e7cc:	a81e      	add	r0, sp, #120	; 0x78
 800e7ce:	f002 fe8b 	bl	80114e8 <__copybits>
 800e7d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e7d4:	4648      	mov	r0, r9
 800e7d6:	f002 faf8 	bl	8010dca <_Bfree>
 800e7da:	3c01      	subs	r4, #1
 800e7dc:	2c04      	cmp	r4, #4
 800e7de:	d806      	bhi.n	800e7ee <_strtod_l+0xf6>
 800e7e0:	e8df f004 	tbb	[pc, r4]
 800e7e4:	1714030a 	.word	0x1714030a
 800e7e8:	0a          	.byte	0x0a
 800e7e9:	00          	.byte	0x00
 800e7ea:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800e7ee:	0730      	lsls	r0, r6, #28
 800e7f0:	d5c1      	bpl.n	800e776 <_strtod_l+0x7e>
 800e7f2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e7f6:	e7be      	b.n	800e776 <_strtod_l+0x7e>
 800e7f8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800e7fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e7fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e802:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e806:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e80a:	e7f0      	b.n	800e7ee <_strtod_l+0xf6>
 800e80c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800e980 <_strtod_l+0x288>
 800e810:	e7ed      	b.n	800e7ee <_strtod_l+0xf6>
 800e812:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e816:	f04f 3aff 	mov.w	sl, #4294967295
 800e81a:	e7e8      	b.n	800e7ee <_strtod_l+0xf6>
 800e81c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e81e:	1c5a      	adds	r2, r3, #1
 800e820:	921b      	str	r2, [sp, #108]	; 0x6c
 800e822:	785b      	ldrb	r3, [r3, #1]
 800e824:	2b30      	cmp	r3, #48	; 0x30
 800e826:	d0f9      	beq.n	800e81c <_strtod_l+0x124>
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d0a4      	beq.n	800e776 <_strtod_l+0x7e>
 800e82c:	2301      	movs	r3, #1
 800e82e:	2500      	movs	r5, #0
 800e830:	9306      	str	r3, [sp, #24]
 800e832:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e834:	9308      	str	r3, [sp, #32]
 800e836:	9507      	str	r5, [sp, #28]
 800e838:	9505      	str	r5, [sp, #20]
 800e83a:	220a      	movs	r2, #10
 800e83c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800e83e:	7807      	ldrb	r7, [r0, #0]
 800e840:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e844:	b2d9      	uxtb	r1, r3
 800e846:	2909      	cmp	r1, #9
 800e848:	d929      	bls.n	800e89e <_strtod_l+0x1a6>
 800e84a:	4622      	mov	r2, r4
 800e84c:	f8d8 1000 	ldr.w	r1, [r8]
 800e850:	f003 fd24 	bl	801229c <strncmp>
 800e854:	2800      	cmp	r0, #0
 800e856:	d031      	beq.n	800e8bc <_strtod_l+0x1c4>
 800e858:	2000      	movs	r0, #0
 800e85a:	9c05      	ldr	r4, [sp, #20]
 800e85c:	9004      	str	r0, [sp, #16]
 800e85e:	463b      	mov	r3, r7
 800e860:	4602      	mov	r2, r0
 800e862:	2b65      	cmp	r3, #101	; 0x65
 800e864:	d001      	beq.n	800e86a <_strtod_l+0x172>
 800e866:	2b45      	cmp	r3, #69	; 0x45
 800e868:	d114      	bne.n	800e894 <_strtod_l+0x19c>
 800e86a:	b924      	cbnz	r4, 800e876 <_strtod_l+0x17e>
 800e86c:	b910      	cbnz	r0, 800e874 <_strtod_l+0x17c>
 800e86e:	9b06      	ldr	r3, [sp, #24]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d09e      	beq.n	800e7b2 <_strtod_l+0xba>
 800e874:	2400      	movs	r4, #0
 800e876:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800e878:	1c73      	adds	r3, r6, #1
 800e87a:	931b      	str	r3, [sp, #108]	; 0x6c
 800e87c:	7873      	ldrb	r3, [r6, #1]
 800e87e:	2b2b      	cmp	r3, #43	; 0x2b
 800e880:	d078      	beq.n	800e974 <_strtod_l+0x27c>
 800e882:	2b2d      	cmp	r3, #45	; 0x2d
 800e884:	d070      	beq.n	800e968 <_strtod_l+0x270>
 800e886:	f04f 0c00 	mov.w	ip, #0
 800e88a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800e88e:	2f09      	cmp	r7, #9
 800e890:	d97c      	bls.n	800e98c <_strtod_l+0x294>
 800e892:	961b      	str	r6, [sp, #108]	; 0x6c
 800e894:	f04f 0e00 	mov.w	lr, #0
 800e898:	e09a      	b.n	800e9d0 <_strtod_l+0x2d8>
 800e89a:	2300      	movs	r3, #0
 800e89c:	e7c7      	b.n	800e82e <_strtod_l+0x136>
 800e89e:	9905      	ldr	r1, [sp, #20]
 800e8a0:	2908      	cmp	r1, #8
 800e8a2:	bfdd      	ittte	le
 800e8a4:	9907      	ldrle	r1, [sp, #28]
 800e8a6:	fb02 3301 	mlale	r3, r2, r1, r3
 800e8aa:	9307      	strle	r3, [sp, #28]
 800e8ac:	fb02 3505 	mlagt	r5, r2, r5, r3
 800e8b0:	9b05      	ldr	r3, [sp, #20]
 800e8b2:	3001      	adds	r0, #1
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	9305      	str	r3, [sp, #20]
 800e8b8:	901b      	str	r0, [sp, #108]	; 0x6c
 800e8ba:	e7bf      	b.n	800e83c <_strtod_l+0x144>
 800e8bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e8be:	191a      	adds	r2, r3, r4
 800e8c0:	921b      	str	r2, [sp, #108]	; 0x6c
 800e8c2:	9a05      	ldr	r2, [sp, #20]
 800e8c4:	5d1b      	ldrb	r3, [r3, r4]
 800e8c6:	2a00      	cmp	r2, #0
 800e8c8:	d037      	beq.n	800e93a <_strtod_l+0x242>
 800e8ca:	9c05      	ldr	r4, [sp, #20]
 800e8cc:	4602      	mov	r2, r0
 800e8ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e8d2:	2909      	cmp	r1, #9
 800e8d4:	d913      	bls.n	800e8fe <_strtod_l+0x206>
 800e8d6:	2101      	movs	r1, #1
 800e8d8:	9104      	str	r1, [sp, #16]
 800e8da:	e7c2      	b.n	800e862 <_strtod_l+0x16a>
 800e8dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e8de:	1c5a      	adds	r2, r3, #1
 800e8e0:	921b      	str	r2, [sp, #108]	; 0x6c
 800e8e2:	785b      	ldrb	r3, [r3, #1]
 800e8e4:	3001      	adds	r0, #1
 800e8e6:	2b30      	cmp	r3, #48	; 0x30
 800e8e8:	d0f8      	beq.n	800e8dc <_strtod_l+0x1e4>
 800e8ea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e8ee:	2a08      	cmp	r2, #8
 800e8f0:	f200 84e4 	bhi.w	800f2bc <_strtod_l+0xbc4>
 800e8f4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e8f6:	9208      	str	r2, [sp, #32]
 800e8f8:	4602      	mov	r2, r0
 800e8fa:	2000      	movs	r0, #0
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800e902:	f100 0101 	add.w	r1, r0, #1
 800e906:	d012      	beq.n	800e92e <_strtod_l+0x236>
 800e908:	440a      	add	r2, r1
 800e90a:	eb00 0c04 	add.w	ip, r0, r4
 800e90e:	4621      	mov	r1, r4
 800e910:	270a      	movs	r7, #10
 800e912:	458c      	cmp	ip, r1
 800e914:	d113      	bne.n	800e93e <_strtod_l+0x246>
 800e916:	1821      	adds	r1, r4, r0
 800e918:	2908      	cmp	r1, #8
 800e91a:	f104 0401 	add.w	r4, r4, #1
 800e91e:	4404      	add	r4, r0
 800e920:	dc19      	bgt.n	800e956 <_strtod_l+0x25e>
 800e922:	9b07      	ldr	r3, [sp, #28]
 800e924:	210a      	movs	r1, #10
 800e926:	fb01 e303 	mla	r3, r1, r3, lr
 800e92a:	9307      	str	r3, [sp, #28]
 800e92c:	2100      	movs	r1, #0
 800e92e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e930:	1c58      	adds	r0, r3, #1
 800e932:	901b      	str	r0, [sp, #108]	; 0x6c
 800e934:	785b      	ldrb	r3, [r3, #1]
 800e936:	4608      	mov	r0, r1
 800e938:	e7c9      	b.n	800e8ce <_strtod_l+0x1d6>
 800e93a:	9805      	ldr	r0, [sp, #20]
 800e93c:	e7d3      	b.n	800e8e6 <_strtod_l+0x1ee>
 800e93e:	2908      	cmp	r1, #8
 800e940:	f101 0101 	add.w	r1, r1, #1
 800e944:	dc03      	bgt.n	800e94e <_strtod_l+0x256>
 800e946:	9b07      	ldr	r3, [sp, #28]
 800e948:	437b      	muls	r3, r7
 800e94a:	9307      	str	r3, [sp, #28]
 800e94c:	e7e1      	b.n	800e912 <_strtod_l+0x21a>
 800e94e:	2910      	cmp	r1, #16
 800e950:	bfd8      	it	le
 800e952:	437d      	mulle	r5, r7
 800e954:	e7dd      	b.n	800e912 <_strtod_l+0x21a>
 800e956:	2c10      	cmp	r4, #16
 800e958:	bfdc      	itt	le
 800e95a:	210a      	movle	r1, #10
 800e95c:	fb01 e505 	mlale	r5, r1, r5, lr
 800e960:	e7e4      	b.n	800e92c <_strtod_l+0x234>
 800e962:	2301      	movs	r3, #1
 800e964:	9304      	str	r3, [sp, #16]
 800e966:	e781      	b.n	800e86c <_strtod_l+0x174>
 800e968:	f04f 0c01 	mov.w	ip, #1
 800e96c:	1cb3      	adds	r3, r6, #2
 800e96e:	931b      	str	r3, [sp, #108]	; 0x6c
 800e970:	78b3      	ldrb	r3, [r6, #2]
 800e972:	e78a      	b.n	800e88a <_strtod_l+0x192>
 800e974:	f04f 0c00 	mov.w	ip, #0
 800e978:	e7f8      	b.n	800e96c <_strtod_l+0x274>
 800e97a:	bf00      	nop
 800e97c:	08012b88 	.word	0x08012b88
 800e980:	7ff00000 	.word	0x7ff00000
 800e984:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e986:	1c5f      	adds	r7, r3, #1
 800e988:	971b      	str	r7, [sp, #108]	; 0x6c
 800e98a:	785b      	ldrb	r3, [r3, #1]
 800e98c:	2b30      	cmp	r3, #48	; 0x30
 800e98e:	d0f9      	beq.n	800e984 <_strtod_l+0x28c>
 800e990:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800e994:	2f08      	cmp	r7, #8
 800e996:	f63f af7d 	bhi.w	800e894 <_strtod_l+0x19c>
 800e99a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e99e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e9a0:	930a      	str	r3, [sp, #40]	; 0x28
 800e9a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e9a4:	1c5f      	adds	r7, r3, #1
 800e9a6:	971b      	str	r7, [sp, #108]	; 0x6c
 800e9a8:	785b      	ldrb	r3, [r3, #1]
 800e9aa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800e9ae:	f1b8 0f09 	cmp.w	r8, #9
 800e9b2:	d937      	bls.n	800ea24 <_strtod_l+0x32c>
 800e9b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e9b6:	1a7f      	subs	r7, r7, r1
 800e9b8:	2f08      	cmp	r7, #8
 800e9ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e9be:	dc37      	bgt.n	800ea30 <_strtod_l+0x338>
 800e9c0:	45be      	cmp	lr, r7
 800e9c2:	bfa8      	it	ge
 800e9c4:	46be      	movge	lr, r7
 800e9c6:	f1bc 0f00 	cmp.w	ip, #0
 800e9ca:	d001      	beq.n	800e9d0 <_strtod_l+0x2d8>
 800e9cc:	f1ce 0e00 	rsb	lr, lr, #0
 800e9d0:	2c00      	cmp	r4, #0
 800e9d2:	d151      	bne.n	800ea78 <_strtod_l+0x380>
 800e9d4:	2800      	cmp	r0, #0
 800e9d6:	f47f aece 	bne.w	800e776 <_strtod_l+0x7e>
 800e9da:	9a06      	ldr	r2, [sp, #24]
 800e9dc:	2a00      	cmp	r2, #0
 800e9de:	f47f aeca 	bne.w	800e776 <_strtod_l+0x7e>
 800e9e2:	9a04      	ldr	r2, [sp, #16]
 800e9e4:	2a00      	cmp	r2, #0
 800e9e6:	f47f aee4 	bne.w	800e7b2 <_strtod_l+0xba>
 800e9ea:	2b4e      	cmp	r3, #78	; 0x4e
 800e9ec:	d027      	beq.n	800ea3e <_strtod_l+0x346>
 800e9ee:	dc21      	bgt.n	800ea34 <_strtod_l+0x33c>
 800e9f0:	2b49      	cmp	r3, #73	; 0x49
 800e9f2:	f47f aede 	bne.w	800e7b2 <_strtod_l+0xba>
 800e9f6:	49a0      	ldr	r1, [pc, #640]	; (800ec78 <_strtod_l+0x580>)
 800e9f8:	a81b      	add	r0, sp, #108	; 0x6c
 800e9fa:	f002 f851 	bl	8010aa0 <__match>
 800e9fe:	2800      	cmp	r0, #0
 800ea00:	f43f aed7 	beq.w	800e7b2 <_strtod_l+0xba>
 800ea04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ea06:	499d      	ldr	r1, [pc, #628]	; (800ec7c <_strtod_l+0x584>)
 800ea08:	3b01      	subs	r3, #1
 800ea0a:	a81b      	add	r0, sp, #108	; 0x6c
 800ea0c:	931b      	str	r3, [sp, #108]	; 0x6c
 800ea0e:	f002 f847 	bl	8010aa0 <__match>
 800ea12:	b910      	cbnz	r0, 800ea1a <_strtod_l+0x322>
 800ea14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ea16:	3301      	adds	r3, #1
 800ea18:	931b      	str	r3, [sp, #108]	; 0x6c
 800ea1a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800ec90 <_strtod_l+0x598>
 800ea1e:	f04f 0a00 	mov.w	sl, #0
 800ea22:	e6a8      	b.n	800e776 <_strtod_l+0x7e>
 800ea24:	210a      	movs	r1, #10
 800ea26:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ea2a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ea2e:	e7b8      	b.n	800e9a2 <_strtod_l+0x2aa>
 800ea30:	46be      	mov	lr, r7
 800ea32:	e7c8      	b.n	800e9c6 <_strtod_l+0x2ce>
 800ea34:	2b69      	cmp	r3, #105	; 0x69
 800ea36:	d0de      	beq.n	800e9f6 <_strtod_l+0x2fe>
 800ea38:	2b6e      	cmp	r3, #110	; 0x6e
 800ea3a:	f47f aeba 	bne.w	800e7b2 <_strtod_l+0xba>
 800ea3e:	4990      	ldr	r1, [pc, #576]	; (800ec80 <_strtod_l+0x588>)
 800ea40:	a81b      	add	r0, sp, #108	; 0x6c
 800ea42:	f002 f82d 	bl	8010aa0 <__match>
 800ea46:	2800      	cmp	r0, #0
 800ea48:	f43f aeb3 	beq.w	800e7b2 <_strtod_l+0xba>
 800ea4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ea4e:	781b      	ldrb	r3, [r3, #0]
 800ea50:	2b28      	cmp	r3, #40	; 0x28
 800ea52:	d10e      	bne.n	800ea72 <_strtod_l+0x37a>
 800ea54:	aa1e      	add	r2, sp, #120	; 0x78
 800ea56:	498b      	ldr	r1, [pc, #556]	; (800ec84 <_strtod_l+0x58c>)
 800ea58:	a81b      	add	r0, sp, #108	; 0x6c
 800ea5a:	f002 f835 	bl	8010ac8 <__hexnan>
 800ea5e:	2805      	cmp	r0, #5
 800ea60:	d107      	bne.n	800ea72 <_strtod_l+0x37a>
 800ea62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ea64:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800ea68:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ea6c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ea70:	e681      	b.n	800e776 <_strtod_l+0x7e>
 800ea72:	f8df b224 	ldr.w	fp, [pc, #548]	; 800ec98 <_strtod_l+0x5a0>
 800ea76:	e7d2      	b.n	800ea1e <_strtod_l+0x326>
 800ea78:	ebae 0302 	sub.w	r3, lr, r2
 800ea7c:	9306      	str	r3, [sp, #24]
 800ea7e:	9b05      	ldr	r3, [sp, #20]
 800ea80:	9807      	ldr	r0, [sp, #28]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	bf08      	it	eq
 800ea86:	4623      	moveq	r3, r4
 800ea88:	2c10      	cmp	r4, #16
 800ea8a:	9305      	str	r3, [sp, #20]
 800ea8c:	46a0      	mov	r8, r4
 800ea8e:	bfa8      	it	ge
 800ea90:	f04f 0810 	movge.w	r8, #16
 800ea94:	f7f1 fd4e 	bl	8000534 <__aeabi_ui2d>
 800ea98:	2c09      	cmp	r4, #9
 800ea9a:	4682      	mov	sl, r0
 800ea9c:	468b      	mov	fp, r1
 800ea9e:	dc13      	bgt.n	800eac8 <_strtod_l+0x3d0>
 800eaa0:	9b06      	ldr	r3, [sp, #24]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	f43f ae67 	beq.w	800e776 <_strtod_l+0x7e>
 800eaa8:	9b06      	ldr	r3, [sp, #24]
 800eaaa:	dd7a      	ble.n	800eba2 <_strtod_l+0x4aa>
 800eaac:	2b16      	cmp	r3, #22
 800eaae:	dc61      	bgt.n	800eb74 <_strtod_l+0x47c>
 800eab0:	4a75      	ldr	r2, [pc, #468]	; (800ec88 <_strtod_l+0x590>)
 800eab2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800eab6:	e9de 0100 	ldrd	r0, r1, [lr]
 800eaba:	4652      	mov	r2, sl
 800eabc:	465b      	mov	r3, fp
 800eabe:	f7f1 fdb3 	bl	8000628 <__aeabi_dmul>
 800eac2:	4682      	mov	sl, r0
 800eac4:	468b      	mov	fp, r1
 800eac6:	e656      	b.n	800e776 <_strtod_l+0x7e>
 800eac8:	4b6f      	ldr	r3, [pc, #444]	; (800ec88 <_strtod_l+0x590>)
 800eaca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800eace:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ead2:	f7f1 fda9 	bl	8000628 <__aeabi_dmul>
 800ead6:	4606      	mov	r6, r0
 800ead8:	4628      	mov	r0, r5
 800eada:	460f      	mov	r7, r1
 800eadc:	f7f1 fd2a 	bl	8000534 <__aeabi_ui2d>
 800eae0:	4602      	mov	r2, r0
 800eae2:	460b      	mov	r3, r1
 800eae4:	4630      	mov	r0, r6
 800eae6:	4639      	mov	r1, r7
 800eae8:	f7f1 fbe8 	bl	80002bc <__adddf3>
 800eaec:	2c0f      	cmp	r4, #15
 800eaee:	4682      	mov	sl, r0
 800eaf0:	468b      	mov	fp, r1
 800eaf2:	ddd5      	ble.n	800eaa0 <_strtod_l+0x3a8>
 800eaf4:	9b06      	ldr	r3, [sp, #24]
 800eaf6:	eba4 0808 	sub.w	r8, r4, r8
 800eafa:	4498      	add	r8, r3
 800eafc:	f1b8 0f00 	cmp.w	r8, #0
 800eb00:	f340 8096 	ble.w	800ec30 <_strtod_l+0x538>
 800eb04:	f018 030f 	ands.w	r3, r8, #15
 800eb08:	d00a      	beq.n	800eb20 <_strtod_l+0x428>
 800eb0a:	495f      	ldr	r1, [pc, #380]	; (800ec88 <_strtod_l+0x590>)
 800eb0c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eb10:	4652      	mov	r2, sl
 800eb12:	465b      	mov	r3, fp
 800eb14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb18:	f7f1 fd86 	bl	8000628 <__aeabi_dmul>
 800eb1c:	4682      	mov	sl, r0
 800eb1e:	468b      	mov	fp, r1
 800eb20:	f038 080f 	bics.w	r8, r8, #15
 800eb24:	d073      	beq.n	800ec0e <_strtod_l+0x516>
 800eb26:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800eb2a:	dd47      	ble.n	800ebbc <_strtod_l+0x4c4>
 800eb2c:	2400      	movs	r4, #0
 800eb2e:	46a0      	mov	r8, r4
 800eb30:	9407      	str	r4, [sp, #28]
 800eb32:	9405      	str	r4, [sp, #20]
 800eb34:	2322      	movs	r3, #34	; 0x22
 800eb36:	f8df b158 	ldr.w	fp, [pc, #344]	; 800ec90 <_strtod_l+0x598>
 800eb3a:	f8c9 3000 	str.w	r3, [r9]
 800eb3e:	f04f 0a00 	mov.w	sl, #0
 800eb42:	9b07      	ldr	r3, [sp, #28]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	f43f ae16 	beq.w	800e776 <_strtod_l+0x7e>
 800eb4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800eb4c:	4648      	mov	r0, r9
 800eb4e:	f002 f93c 	bl	8010dca <_Bfree>
 800eb52:	9905      	ldr	r1, [sp, #20]
 800eb54:	4648      	mov	r0, r9
 800eb56:	f002 f938 	bl	8010dca <_Bfree>
 800eb5a:	4641      	mov	r1, r8
 800eb5c:	4648      	mov	r0, r9
 800eb5e:	f002 f934 	bl	8010dca <_Bfree>
 800eb62:	9907      	ldr	r1, [sp, #28]
 800eb64:	4648      	mov	r0, r9
 800eb66:	f002 f930 	bl	8010dca <_Bfree>
 800eb6a:	4621      	mov	r1, r4
 800eb6c:	4648      	mov	r0, r9
 800eb6e:	f002 f92c 	bl	8010dca <_Bfree>
 800eb72:	e600      	b.n	800e776 <_strtod_l+0x7e>
 800eb74:	9a06      	ldr	r2, [sp, #24]
 800eb76:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	dbba      	blt.n	800eaf4 <_strtod_l+0x3fc>
 800eb7e:	4d42      	ldr	r5, [pc, #264]	; (800ec88 <_strtod_l+0x590>)
 800eb80:	f1c4 040f 	rsb	r4, r4, #15
 800eb84:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800eb88:	4652      	mov	r2, sl
 800eb8a:	465b      	mov	r3, fp
 800eb8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb90:	f7f1 fd4a 	bl	8000628 <__aeabi_dmul>
 800eb94:	9b06      	ldr	r3, [sp, #24]
 800eb96:	1b1c      	subs	r4, r3, r4
 800eb98:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800eb9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eba0:	e78d      	b.n	800eabe <_strtod_l+0x3c6>
 800eba2:	f113 0f16 	cmn.w	r3, #22
 800eba6:	dba5      	blt.n	800eaf4 <_strtod_l+0x3fc>
 800eba8:	4a37      	ldr	r2, [pc, #220]	; (800ec88 <_strtod_l+0x590>)
 800ebaa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800ebae:	e9d2 2300 	ldrd	r2, r3, [r2]
 800ebb2:	4650      	mov	r0, sl
 800ebb4:	4659      	mov	r1, fp
 800ebb6:	f7f1 fe61 	bl	800087c <__aeabi_ddiv>
 800ebba:	e782      	b.n	800eac2 <_strtod_l+0x3ca>
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	4e33      	ldr	r6, [pc, #204]	; (800ec8c <_strtod_l+0x594>)
 800ebc0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ebc4:	4650      	mov	r0, sl
 800ebc6:	4659      	mov	r1, fp
 800ebc8:	461d      	mov	r5, r3
 800ebca:	f1b8 0f01 	cmp.w	r8, #1
 800ebce:	dc21      	bgt.n	800ec14 <_strtod_l+0x51c>
 800ebd0:	b10b      	cbz	r3, 800ebd6 <_strtod_l+0x4de>
 800ebd2:	4682      	mov	sl, r0
 800ebd4:	468b      	mov	fp, r1
 800ebd6:	4b2d      	ldr	r3, [pc, #180]	; (800ec8c <_strtod_l+0x594>)
 800ebd8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ebdc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800ebe0:	4652      	mov	r2, sl
 800ebe2:	465b      	mov	r3, fp
 800ebe4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ebe8:	f7f1 fd1e 	bl	8000628 <__aeabi_dmul>
 800ebec:	4b28      	ldr	r3, [pc, #160]	; (800ec90 <_strtod_l+0x598>)
 800ebee:	460a      	mov	r2, r1
 800ebf0:	400b      	ands	r3, r1
 800ebf2:	4928      	ldr	r1, [pc, #160]	; (800ec94 <_strtod_l+0x59c>)
 800ebf4:	428b      	cmp	r3, r1
 800ebf6:	4682      	mov	sl, r0
 800ebf8:	d898      	bhi.n	800eb2c <_strtod_l+0x434>
 800ebfa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ebfe:	428b      	cmp	r3, r1
 800ec00:	bf86      	itte	hi
 800ec02:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ec9c <_strtod_l+0x5a4>
 800ec06:	f04f 3aff 	movhi.w	sl, #4294967295
 800ec0a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ec0e:	2300      	movs	r3, #0
 800ec10:	9304      	str	r3, [sp, #16]
 800ec12:	e077      	b.n	800ed04 <_strtod_l+0x60c>
 800ec14:	f018 0f01 	tst.w	r8, #1
 800ec18:	d006      	beq.n	800ec28 <_strtod_l+0x530>
 800ec1a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800ec1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec22:	f7f1 fd01 	bl	8000628 <__aeabi_dmul>
 800ec26:	2301      	movs	r3, #1
 800ec28:	3501      	adds	r5, #1
 800ec2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ec2e:	e7cc      	b.n	800ebca <_strtod_l+0x4d2>
 800ec30:	d0ed      	beq.n	800ec0e <_strtod_l+0x516>
 800ec32:	f1c8 0800 	rsb	r8, r8, #0
 800ec36:	f018 020f 	ands.w	r2, r8, #15
 800ec3a:	d00a      	beq.n	800ec52 <_strtod_l+0x55a>
 800ec3c:	4b12      	ldr	r3, [pc, #72]	; (800ec88 <_strtod_l+0x590>)
 800ec3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec42:	4650      	mov	r0, sl
 800ec44:	4659      	mov	r1, fp
 800ec46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4a:	f7f1 fe17 	bl	800087c <__aeabi_ddiv>
 800ec4e:	4682      	mov	sl, r0
 800ec50:	468b      	mov	fp, r1
 800ec52:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ec56:	d0da      	beq.n	800ec0e <_strtod_l+0x516>
 800ec58:	f1b8 0f1f 	cmp.w	r8, #31
 800ec5c:	dd20      	ble.n	800eca0 <_strtod_l+0x5a8>
 800ec5e:	2400      	movs	r4, #0
 800ec60:	46a0      	mov	r8, r4
 800ec62:	9407      	str	r4, [sp, #28]
 800ec64:	9405      	str	r4, [sp, #20]
 800ec66:	2322      	movs	r3, #34	; 0x22
 800ec68:	f04f 0a00 	mov.w	sl, #0
 800ec6c:	f04f 0b00 	mov.w	fp, #0
 800ec70:	f8c9 3000 	str.w	r3, [r9]
 800ec74:	e765      	b.n	800eb42 <_strtod_l+0x44a>
 800ec76:	bf00      	nop
 800ec78:	08012b55 	.word	0x08012b55
 800ec7c:	08012bdb 	.word	0x08012bdb
 800ec80:	08012b5d 	.word	0x08012b5d
 800ec84:	08012b9c 	.word	0x08012b9c
 800ec88:	08012c80 	.word	0x08012c80
 800ec8c:	08012c58 	.word	0x08012c58
 800ec90:	7ff00000 	.word	0x7ff00000
 800ec94:	7ca00000 	.word	0x7ca00000
 800ec98:	fff80000 	.word	0xfff80000
 800ec9c:	7fefffff 	.word	0x7fefffff
 800eca0:	f018 0310 	ands.w	r3, r8, #16
 800eca4:	bf18      	it	ne
 800eca6:	236a      	movne	r3, #106	; 0x6a
 800eca8:	4da0      	ldr	r5, [pc, #640]	; (800ef2c <_strtod_l+0x834>)
 800ecaa:	9304      	str	r3, [sp, #16]
 800ecac:	4650      	mov	r0, sl
 800ecae:	4659      	mov	r1, fp
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	f1b8 0f00 	cmp.w	r8, #0
 800ecb6:	f300 810a 	bgt.w	800eece <_strtod_l+0x7d6>
 800ecba:	b10b      	cbz	r3, 800ecc0 <_strtod_l+0x5c8>
 800ecbc:	4682      	mov	sl, r0
 800ecbe:	468b      	mov	fp, r1
 800ecc0:	9b04      	ldr	r3, [sp, #16]
 800ecc2:	b1bb      	cbz	r3, 800ecf4 <_strtod_l+0x5fc>
 800ecc4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ecc8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	4659      	mov	r1, fp
 800ecd0:	dd10      	ble.n	800ecf4 <_strtod_l+0x5fc>
 800ecd2:	2b1f      	cmp	r3, #31
 800ecd4:	f340 8107 	ble.w	800eee6 <_strtod_l+0x7ee>
 800ecd8:	2b34      	cmp	r3, #52	; 0x34
 800ecda:	bfde      	ittt	le
 800ecdc:	3b20      	suble	r3, #32
 800ecde:	f04f 32ff 	movle.w	r2, #4294967295
 800ece2:	fa02 f303 	lslle.w	r3, r2, r3
 800ece6:	f04f 0a00 	mov.w	sl, #0
 800ecea:	bfcc      	ite	gt
 800ecec:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ecf0:	ea03 0b01 	andle.w	fp, r3, r1
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	4650      	mov	r0, sl
 800ecfa:	4659      	mov	r1, fp
 800ecfc:	f7f1 fefc 	bl	8000af8 <__aeabi_dcmpeq>
 800ed00:	2800      	cmp	r0, #0
 800ed02:	d1ac      	bne.n	800ec5e <_strtod_l+0x566>
 800ed04:	9b07      	ldr	r3, [sp, #28]
 800ed06:	9300      	str	r3, [sp, #0]
 800ed08:	9a05      	ldr	r2, [sp, #20]
 800ed0a:	9908      	ldr	r1, [sp, #32]
 800ed0c:	4623      	mov	r3, r4
 800ed0e:	4648      	mov	r0, r9
 800ed10:	f002 f8ad 	bl	8010e6e <__s2b>
 800ed14:	9007      	str	r0, [sp, #28]
 800ed16:	2800      	cmp	r0, #0
 800ed18:	f43f af08 	beq.w	800eb2c <_strtod_l+0x434>
 800ed1c:	9a06      	ldr	r2, [sp, #24]
 800ed1e:	9b06      	ldr	r3, [sp, #24]
 800ed20:	2a00      	cmp	r2, #0
 800ed22:	f1c3 0300 	rsb	r3, r3, #0
 800ed26:	bfa8      	it	ge
 800ed28:	2300      	movge	r3, #0
 800ed2a:	930e      	str	r3, [sp, #56]	; 0x38
 800ed2c:	2400      	movs	r4, #0
 800ed2e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ed32:	9316      	str	r3, [sp, #88]	; 0x58
 800ed34:	46a0      	mov	r8, r4
 800ed36:	9b07      	ldr	r3, [sp, #28]
 800ed38:	4648      	mov	r0, r9
 800ed3a:	6859      	ldr	r1, [r3, #4]
 800ed3c:	f002 f811 	bl	8010d62 <_Balloc>
 800ed40:	9005      	str	r0, [sp, #20]
 800ed42:	2800      	cmp	r0, #0
 800ed44:	f43f aef6 	beq.w	800eb34 <_strtod_l+0x43c>
 800ed48:	9b07      	ldr	r3, [sp, #28]
 800ed4a:	691a      	ldr	r2, [r3, #16]
 800ed4c:	3202      	adds	r2, #2
 800ed4e:	f103 010c 	add.w	r1, r3, #12
 800ed52:	0092      	lsls	r2, r2, #2
 800ed54:	300c      	adds	r0, #12
 800ed56:	f001 fff9 	bl	8010d4c <memcpy>
 800ed5a:	aa1e      	add	r2, sp, #120	; 0x78
 800ed5c:	a91d      	add	r1, sp, #116	; 0x74
 800ed5e:	ec4b ab10 	vmov	d0, sl, fp
 800ed62:	4648      	mov	r0, r9
 800ed64:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ed68:	f002 fb3c 	bl	80113e4 <__d2b>
 800ed6c:	901c      	str	r0, [sp, #112]	; 0x70
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	f43f aee0 	beq.w	800eb34 <_strtod_l+0x43c>
 800ed74:	2101      	movs	r1, #1
 800ed76:	4648      	mov	r0, r9
 800ed78:	f002 f905 	bl	8010f86 <__i2b>
 800ed7c:	4680      	mov	r8, r0
 800ed7e:	2800      	cmp	r0, #0
 800ed80:	f43f aed8 	beq.w	800eb34 <_strtod_l+0x43c>
 800ed84:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ed86:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ed88:	2e00      	cmp	r6, #0
 800ed8a:	bfab      	itete	ge
 800ed8c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ed8e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ed90:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800ed92:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800ed94:	bfac      	ite	ge
 800ed96:	18f7      	addge	r7, r6, r3
 800ed98:	1b9d      	sublt	r5, r3, r6
 800ed9a:	9b04      	ldr	r3, [sp, #16]
 800ed9c:	1af6      	subs	r6, r6, r3
 800ed9e:	4416      	add	r6, r2
 800eda0:	4b63      	ldr	r3, [pc, #396]	; (800ef30 <_strtod_l+0x838>)
 800eda2:	3e01      	subs	r6, #1
 800eda4:	429e      	cmp	r6, r3
 800eda6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800edaa:	f280 80af 	bge.w	800ef0c <_strtod_l+0x814>
 800edae:	1b9b      	subs	r3, r3, r6
 800edb0:	2b1f      	cmp	r3, #31
 800edb2:	eba2 0203 	sub.w	r2, r2, r3
 800edb6:	f04f 0101 	mov.w	r1, #1
 800edba:	f300 809b 	bgt.w	800eef4 <_strtod_l+0x7fc>
 800edbe:	fa01 f303 	lsl.w	r3, r1, r3
 800edc2:	930f      	str	r3, [sp, #60]	; 0x3c
 800edc4:	2300      	movs	r3, #0
 800edc6:	930a      	str	r3, [sp, #40]	; 0x28
 800edc8:	18be      	adds	r6, r7, r2
 800edca:	9b04      	ldr	r3, [sp, #16]
 800edcc:	42b7      	cmp	r7, r6
 800edce:	4415      	add	r5, r2
 800edd0:	441d      	add	r5, r3
 800edd2:	463b      	mov	r3, r7
 800edd4:	bfa8      	it	ge
 800edd6:	4633      	movge	r3, r6
 800edd8:	42ab      	cmp	r3, r5
 800edda:	bfa8      	it	ge
 800eddc:	462b      	movge	r3, r5
 800edde:	2b00      	cmp	r3, #0
 800ede0:	bfc2      	ittt	gt
 800ede2:	1af6      	subgt	r6, r6, r3
 800ede4:	1aed      	subgt	r5, r5, r3
 800ede6:	1aff      	subgt	r7, r7, r3
 800ede8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800edea:	b1bb      	cbz	r3, 800ee1c <_strtod_l+0x724>
 800edec:	4641      	mov	r1, r8
 800edee:	461a      	mov	r2, r3
 800edf0:	4648      	mov	r0, r9
 800edf2:	f002 f967 	bl	80110c4 <__pow5mult>
 800edf6:	4680      	mov	r8, r0
 800edf8:	2800      	cmp	r0, #0
 800edfa:	f43f ae9b 	beq.w	800eb34 <_strtod_l+0x43c>
 800edfe:	4601      	mov	r1, r0
 800ee00:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ee02:	4648      	mov	r0, r9
 800ee04:	f002 f8c8 	bl	8010f98 <__multiply>
 800ee08:	900c      	str	r0, [sp, #48]	; 0x30
 800ee0a:	2800      	cmp	r0, #0
 800ee0c:	f43f ae92 	beq.w	800eb34 <_strtod_l+0x43c>
 800ee10:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ee12:	4648      	mov	r0, r9
 800ee14:	f001 ffd9 	bl	8010dca <_Bfree>
 800ee18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee1a:	931c      	str	r3, [sp, #112]	; 0x70
 800ee1c:	2e00      	cmp	r6, #0
 800ee1e:	dc7a      	bgt.n	800ef16 <_strtod_l+0x81e>
 800ee20:	9b06      	ldr	r3, [sp, #24]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	dd08      	ble.n	800ee38 <_strtod_l+0x740>
 800ee26:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ee28:	9905      	ldr	r1, [sp, #20]
 800ee2a:	4648      	mov	r0, r9
 800ee2c:	f002 f94a 	bl	80110c4 <__pow5mult>
 800ee30:	9005      	str	r0, [sp, #20]
 800ee32:	2800      	cmp	r0, #0
 800ee34:	f43f ae7e 	beq.w	800eb34 <_strtod_l+0x43c>
 800ee38:	2d00      	cmp	r5, #0
 800ee3a:	dd08      	ble.n	800ee4e <_strtod_l+0x756>
 800ee3c:	462a      	mov	r2, r5
 800ee3e:	9905      	ldr	r1, [sp, #20]
 800ee40:	4648      	mov	r0, r9
 800ee42:	f002 f98d 	bl	8011160 <__lshift>
 800ee46:	9005      	str	r0, [sp, #20]
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	f43f ae73 	beq.w	800eb34 <_strtod_l+0x43c>
 800ee4e:	2f00      	cmp	r7, #0
 800ee50:	dd08      	ble.n	800ee64 <_strtod_l+0x76c>
 800ee52:	4641      	mov	r1, r8
 800ee54:	463a      	mov	r2, r7
 800ee56:	4648      	mov	r0, r9
 800ee58:	f002 f982 	bl	8011160 <__lshift>
 800ee5c:	4680      	mov	r8, r0
 800ee5e:	2800      	cmp	r0, #0
 800ee60:	f43f ae68 	beq.w	800eb34 <_strtod_l+0x43c>
 800ee64:	9a05      	ldr	r2, [sp, #20]
 800ee66:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ee68:	4648      	mov	r0, r9
 800ee6a:	f002 f9e7 	bl	801123c <__mdiff>
 800ee6e:	4604      	mov	r4, r0
 800ee70:	2800      	cmp	r0, #0
 800ee72:	f43f ae5f 	beq.w	800eb34 <_strtod_l+0x43c>
 800ee76:	68c3      	ldr	r3, [r0, #12]
 800ee78:	930c      	str	r3, [sp, #48]	; 0x30
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	60c3      	str	r3, [r0, #12]
 800ee7e:	4641      	mov	r1, r8
 800ee80:	f002 f9c2 	bl	8011208 <__mcmp>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	da55      	bge.n	800ef34 <_strtod_l+0x83c>
 800ee88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee8a:	b9e3      	cbnz	r3, 800eec6 <_strtod_l+0x7ce>
 800ee8c:	f1ba 0f00 	cmp.w	sl, #0
 800ee90:	d119      	bne.n	800eec6 <_strtod_l+0x7ce>
 800ee92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee96:	b9b3      	cbnz	r3, 800eec6 <_strtod_l+0x7ce>
 800ee98:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ee9c:	0d1b      	lsrs	r3, r3, #20
 800ee9e:	051b      	lsls	r3, r3, #20
 800eea0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800eea4:	d90f      	bls.n	800eec6 <_strtod_l+0x7ce>
 800eea6:	6963      	ldr	r3, [r4, #20]
 800eea8:	b913      	cbnz	r3, 800eeb0 <_strtod_l+0x7b8>
 800eeaa:	6923      	ldr	r3, [r4, #16]
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	dd0a      	ble.n	800eec6 <_strtod_l+0x7ce>
 800eeb0:	4621      	mov	r1, r4
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	4648      	mov	r0, r9
 800eeb6:	f002 f953 	bl	8011160 <__lshift>
 800eeba:	4641      	mov	r1, r8
 800eebc:	4604      	mov	r4, r0
 800eebe:	f002 f9a3 	bl	8011208 <__mcmp>
 800eec2:	2800      	cmp	r0, #0
 800eec4:	dc67      	bgt.n	800ef96 <_strtod_l+0x89e>
 800eec6:	9b04      	ldr	r3, [sp, #16]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d171      	bne.n	800efb0 <_strtod_l+0x8b8>
 800eecc:	e63d      	b.n	800eb4a <_strtod_l+0x452>
 800eece:	f018 0f01 	tst.w	r8, #1
 800eed2:	d004      	beq.n	800eede <_strtod_l+0x7e6>
 800eed4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eed8:	f7f1 fba6 	bl	8000628 <__aeabi_dmul>
 800eedc:	2301      	movs	r3, #1
 800eede:	ea4f 0868 	mov.w	r8, r8, asr #1
 800eee2:	3508      	adds	r5, #8
 800eee4:	e6e5      	b.n	800ecb2 <_strtod_l+0x5ba>
 800eee6:	f04f 32ff 	mov.w	r2, #4294967295
 800eeea:	fa02 f303 	lsl.w	r3, r2, r3
 800eeee:	ea03 0a0a 	and.w	sl, r3, sl
 800eef2:	e6ff      	b.n	800ecf4 <_strtod_l+0x5fc>
 800eef4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800eef8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800eefc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ef00:	36e2      	adds	r6, #226	; 0xe2
 800ef02:	fa01 f306 	lsl.w	r3, r1, r6
 800ef06:	930a      	str	r3, [sp, #40]	; 0x28
 800ef08:	910f      	str	r1, [sp, #60]	; 0x3c
 800ef0a:	e75d      	b.n	800edc8 <_strtod_l+0x6d0>
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	930a      	str	r3, [sp, #40]	; 0x28
 800ef10:	2301      	movs	r3, #1
 800ef12:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef14:	e758      	b.n	800edc8 <_strtod_l+0x6d0>
 800ef16:	4632      	mov	r2, r6
 800ef18:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ef1a:	4648      	mov	r0, r9
 800ef1c:	f002 f920 	bl	8011160 <__lshift>
 800ef20:	901c      	str	r0, [sp, #112]	; 0x70
 800ef22:	2800      	cmp	r0, #0
 800ef24:	f47f af7c 	bne.w	800ee20 <_strtod_l+0x728>
 800ef28:	e604      	b.n	800eb34 <_strtod_l+0x43c>
 800ef2a:	bf00      	nop
 800ef2c:	08012bb0 	.word	0x08012bb0
 800ef30:	fffffc02 	.word	0xfffffc02
 800ef34:	465d      	mov	r5, fp
 800ef36:	f040 8086 	bne.w	800f046 <_strtod_l+0x94e>
 800ef3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef40:	b32a      	cbz	r2, 800ef8e <_strtod_l+0x896>
 800ef42:	4aaf      	ldr	r2, [pc, #700]	; (800f200 <_strtod_l+0xb08>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d153      	bne.n	800eff0 <_strtod_l+0x8f8>
 800ef48:	9b04      	ldr	r3, [sp, #16]
 800ef4a:	4650      	mov	r0, sl
 800ef4c:	b1d3      	cbz	r3, 800ef84 <_strtod_l+0x88c>
 800ef4e:	4aad      	ldr	r2, [pc, #692]	; (800f204 <_strtod_l+0xb0c>)
 800ef50:	402a      	ands	r2, r5
 800ef52:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ef56:	f04f 31ff 	mov.w	r1, #4294967295
 800ef5a:	d816      	bhi.n	800ef8a <_strtod_l+0x892>
 800ef5c:	0d12      	lsrs	r2, r2, #20
 800ef5e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ef62:	fa01 f303 	lsl.w	r3, r1, r3
 800ef66:	4298      	cmp	r0, r3
 800ef68:	d142      	bne.n	800eff0 <_strtod_l+0x8f8>
 800ef6a:	4ba7      	ldr	r3, [pc, #668]	; (800f208 <_strtod_l+0xb10>)
 800ef6c:	429d      	cmp	r5, r3
 800ef6e:	d102      	bne.n	800ef76 <_strtod_l+0x87e>
 800ef70:	3001      	adds	r0, #1
 800ef72:	f43f addf 	beq.w	800eb34 <_strtod_l+0x43c>
 800ef76:	4ba3      	ldr	r3, [pc, #652]	; (800f204 <_strtod_l+0xb0c>)
 800ef78:	402b      	ands	r3, r5
 800ef7a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ef7e:	f04f 0a00 	mov.w	sl, #0
 800ef82:	e7a0      	b.n	800eec6 <_strtod_l+0x7ce>
 800ef84:	f04f 33ff 	mov.w	r3, #4294967295
 800ef88:	e7ed      	b.n	800ef66 <_strtod_l+0x86e>
 800ef8a:	460b      	mov	r3, r1
 800ef8c:	e7eb      	b.n	800ef66 <_strtod_l+0x86e>
 800ef8e:	bb7b      	cbnz	r3, 800eff0 <_strtod_l+0x8f8>
 800ef90:	f1ba 0f00 	cmp.w	sl, #0
 800ef94:	d12c      	bne.n	800eff0 <_strtod_l+0x8f8>
 800ef96:	9904      	ldr	r1, [sp, #16]
 800ef98:	4a9a      	ldr	r2, [pc, #616]	; (800f204 <_strtod_l+0xb0c>)
 800ef9a:	465b      	mov	r3, fp
 800ef9c:	b1f1      	cbz	r1, 800efdc <_strtod_l+0x8e4>
 800ef9e:	ea02 010b 	and.w	r1, r2, fp
 800efa2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800efa6:	dc19      	bgt.n	800efdc <_strtod_l+0x8e4>
 800efa8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800efac:	f77f ae5b 	ble.w	800ec66 <_strtod_l+0x56e>
 800efb0:	4a96      	ldr	r2, [pc, #600]	; (800f20c <_strtod_l+0xb14>)
 800efb2:	2300      	movs	r3, #0
 800efb4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800efb8:	4650      	mov	r0, sl
 800efba:	4659      	mov	r1, fp
 800efbc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800efc0:	f7f1 fb32 	bl	8000628 <__aeabi_dmul>
 800efc4:	4682      	mov	sl, r0
 800efc6:	468b      	mov	fp, r1
 800efc8:	2900      	cmp	r1, #0
 800efca:	f47f adbe 	bne.w	800eb4a <_strtod_l+0x452>
 800efce:	2800      	cmp	r0, #0
 800efd0:	f47f adbb 	bne.w	800eb4a <_strtod_l+0x452>
 800efd4:	2322      	movs	r3, #34	; 0x22
 800efd6:	f8c9 3000 	str.w	r3, [r9]
 800efda:	e5b6      	b.n	800eb4a <_strtod_l+0x452>
 800efdc:	4013      	ands	r3, r2
 800efde:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800efe2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800efe6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800efea:	f04f 3aff 	mov.w	sl, #4294967295
 800efee:	e76a      	b.n	800eec6 <_strtod_l+0x7ce>
 800eff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eff2:	b193      	cbz	r3, 800f01a <_strtod_l+0x922>
 800eff4:	422b      	tst	r3, r5
 800eff6:	f43f af66 	beq.w	800eec6 <_strtod_l+0x7ce>
 800effa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800effc:	9a04      	ldr	r2, [sp, #16]
 800effe:	4650      	mov	r0, sl
 800f000:	4659      	mov	r1, fp
 800f002:	b173      	cbz	r3, 800f022 <_strtod_l+0x92a>
 800f004:	f7ff fb59 	bl	800e6ba <sulp>
 800f008:	4602      	mov	r2, r0
 800f00a:	460b      	mov	r3, r1
 800f00c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f010:	f7f1 f954 	bl	80002bc <__adddf3>
 800f014:	4682      	mov	sl, r0
 800f016:	468b      	mov	fp, r1
 800f018:	e755      	b.n	800eec6 <_strtod_l+0x7ce>
 800f01a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f01c:	ea13 0f0a 	tst.w	r3, sl
 800f020:	e7e9      	b.n	800eff6 <_strtod_l+0x8fe>
 800f022:	f7ff fb4a 	bl	800e6ba <sulp>
 800f026:	4602      	mov	r2, r0
 800f028:	460b      	mov	r3, r1
 800f02a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f02e:	f7f1 f943 	bl	80002b8 <__aeabi_dsub>
 800f032:	2200      	movs	r2, #0
 800f034:	2300      	movs	r3, #0
 800f036:	4682      	mov	sl, r0
 800f038:	468b      	mov	fp, r1
 800f03a:	f7f1 fd5d 	bl	8000af8 <__aeabi_dcmpeq>
 800f03e:	2800      	cmp	r0, #0
 800f040:	f47f ae11 	bne.w	800ec66 <_strtod_l+0x56e>
 800f044:	e73f      	b.n	800eec6 <_strtod_l+0x7ce>
 800f046:	4641      	mov	r1, r8
 800f048:	4620      	mov	r0, r4
 800f04a:	f002 fa1a 	bl	8011482 <__ratio>
 800f04e:	ec57 6b10 	vmov	r6, r7, d0
 800f052:	2200      	movs	r2, #0
 800f054:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f058:	ee10 0a10 	vmov	r0, s0
 800f05c:	4639      	mov	r1, r7
 800f05e:	f7f1 fd5f 	bl	8000b20 <__aeabi_dcmple>
 800f062:	2800      	cmp	r0, #0
 800f064:	d077      	beq.n	800f156 <_strtod_l+0xa5e>
 800f066:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d04a      	beq.n	800f102 <_strtod_l+0xa0a>
 800f06c:	4b68      	ldr	r3, [pc, #416]	; (800f210 <_strtod_l+0xb18>)
 800f06e:	2200      	movs	r2, #0
 800f070:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f074:	4f66      	ldr	r7, [pc, #408]	; (800f210 <_strtod_l+0xb18>)
 800f076:	2600      	movs	r6, #0
 800f078:	4b62      	ldr	r3, [pc, #392]	; (800f204 <_strtod_l+0xb0c>)
 800f07a:	402b      	ands	r3, r5
 800f07c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f07e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f080:	4b64      	ldr	r3, [pc, #400]	; (800f214 <_strtod_l+0xb1c>)
 800f082:	429a      	cmp	r2, r3
 800f084:	f040 80ce 	bne.w	800f224 <_strtod_l+0xb2c>
 800f088:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f08c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f090:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800f094:	ec4b ab10 	vmov	d0, sl, fp
 800f098:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800f09c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f0a0:	f002 f92a 	bl	80112f8 <__ulp>
 800f0a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f0a8:	ec53 2b10 	vmov	r2, r3, d0
 800f0ac:	f7f1 fabc 	bl	8000628 <__aeabi_dmul>
 800f0b0:	4652      	mov	r2, sl
 800f0b2:	465b      	mov	r3, fp
 800f0b4:	f7f1 f902 	bl	80002bc <__adddf3>
 800f0b8:	460b      	mov	r3, r1
 800f0ba:	4952      	ldr	r1, [pc, #328]	; (800f204 <_strtod_l+0xb0c>)
 800f0bc:	4a56      	ldr	r2, [pc, #344]	; (800f218 <_strtod_l+0xb20>)
 800f0be:	4019      	ands	r1, r3
 800f0c0:	4291      	cmp	r1, r2
 800f0c2:	4682      	mov	sl, r0
 800f0c4:	d95b      	bls.n	800f17e <_strtod_l+0xa86>
 800f0c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0c8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d103      	bne.n	800f0d8 <_strtod_l+0x9e0>
 800f0d0:	9b08      	ldr	r3, [sp, #32]
 800f0d2:	3301      	adds	r3, #1
 800f0d4:	f43f ad2e 	beq.w	800eb34 <_strtod_l+0x43c>
 800f0d8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800f208 <_strtod_l+0xb10>
 800f0dc:	f04f 3aff 	mov.w	sl, #4294967295
 800f0e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f0e2:	4648      	mov	r0, r9
 800f0e4:	f001 fe71 	bl	8010dca <_Bfree>
 800f0e8:	9905      	ldr	r1, [sp, #20]
 800f0ea:	4648      	mov	r0, r9
 800f0ec:	f001 fe6d 	bl	8010dca <_Bfree>
 800f0f0:	4641      	mov	r1, r8
 800f0f2:	4648      	mov	r0, r9
 800f0f4:	f001 fe69 	bl	8010dca <_Bfree>
 800f0f8:	4621      	mov	r1, r4
 800f0fa:	4648      	mov	r0, r9
 800f0fc:	f001 fe65 	bl	8010dca <_Bfree>
 800f100:	e619      	b.n	800ed36 <_strtod_l+0x63e>
 800f102:	f1ba 0f00 	cmp.w	sl, #0
 800f106:	d11a      	bne.n	800f13e <_strtod_l+0xa46>
 800f108:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f10c:	b9eb      	cbnz	r3, 800f14a <_strtod_l+0xa52>
 800f10e:	2200      	movs	r2, #0
 800f110:	4b3f      	ldr	r3, [pc, #252]	; (800f210 <_strtod_l+0xb18>)
 800f112:	4630      	mov	r0, r6
 800f114:	4639      	mov	r1, r7
 800f116:	f7f1 fcf9 	bl	8000b0c <__aeabi_dcmplt>
 800f11a:	b9c8      	cbnz	r0, 800f150 <_strtod_l+0xa58>
 800f11c:	4630      	mov	r0, r6
 800f11e:	4639      	mov	r1, r7
 800f120:	2200      	movs	r2, #0
 800f122:	4b3e      	ldr	r3, [pc, #248]	; (800f21c <_strtod_l+0xb24>)
 800f124:	f7f1 fa80 	bl	8000628 <__aeabi_dmul>
 800f128:	4606      	mov	r6, r0
 800f12a:	460f      	mov	r7, r1
 800f12c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f130:	9618      	str	r6, [sp, #96]	; 0x60
 800f132:	9319      	str	r3, [sp, #100]	; 0x64
 800f134:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800f138:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f13c:	e79c      	b.n	800f078 <_strtod_l+0x980>
 800f13e:	f1ba 0f01 	cmp.w	sl, #1
 800f142:	d102      	bne.n	800f14a <_strtod_l+0xa52>
 800f144:	2d00      	cmp	r5, #0
 800f146:	f43f ad8e 	beq.w	800ec66 <_strtod_l+0x56e>
 800f14a:	2200      	movs	r2, #0
 800f14c:	4b34      	ldr	r3, [pc, #208]	; (800f220 <_strtod_l+0xb28>)
 800f14e:	e78f      	b.n	800f070 <_strtod_l+0x978>
 800f150:	2600      	movs	r6, #0
 800f152:	4f32      	ldr	r7, [pc, #200]	; (800f21c <_strtod_l+0xb24>)
 800f154:	e7ea      	b.n	800f12c <_strtod_l+0xa34>
 800f156:	4b31      	ldr	r3, [pc, #196]	; (800f21c <_strtod_l+0xb24>)
 800f158:	4630      	mov	r0, r6
 800f15a:	4639      	mov	r1, r7
 800f15c:	2200      	movs	r2, #0
 800f15e:	f7f1 fa63 	bl	8000628 <__aeabi_dmul>
 800f162:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f164:	4606      	mov	r6, r0
 800f166:	460f      	mov	r7, r1
 800f168:	b933      	cbnz	r3, 800f178 <_strtod_l+0xa80>
 800f16a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f16e:	9010      	str	r0, [sp, #64]	; 0x40
 800f170:	9311      	str	r3, [sp, #68]	; 0x44
 800f172:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f176:	e7df      	b.n	800f138 <_strtod_l+0xa40>
 800f178:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800f17c:	e7f9      	b.n	800f172 <_strtod_l+0xa7a>
 800f17e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f182:	9b04      	ldr	r3, [sp, #16]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d1ab      	bne.n	800f0e0 <_strtod_l+0x9e8>
 800f188:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f18c:	0d1b      	lsrs	r3, r3, #20
 800f18e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f190:	051b      	lsls	r3, r3, #20
 800f192:	429a      	cmp	r2, r3
 800f194:	465d      	mov	r5, fp
 800f196:	d1a3      	bne.n	800f0e0 <_strtod_l+0x9e8>
 800f198:	4639      	mov	r1, r7
 800f19a:	4630      	mov	r0, r6
 800f19c:	f7f1 fcf4 	bl	8000b88 <__aeabi_d2iz>
 800f1a0:	f7f1 f9d8 	bl	8000554 <__aeabi_i2d>
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	4602      	mov	r2, r0
 800f1a8:	4639      	mov	r1, r7
 800f1aa:	4630      	mov	r0, r6
 800f1ac:	f7f1 f884 	bl	80002b8 <__aeabi_dsub>
 800f1b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1b2:	4606      	mov	r6, r0
 800f1b4:	460f      	mov	r7, r1
 800f1b6:	b933      	cbnz	r3, 800f1c6 <_strtod_l+0xace>
 800f1b8:	f1ba 0f00 	cmp.w	sl, #0
 800f1bc:	d103      	bne.n	800f1c6 <_strtod_l+0xace>
 800f1be:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800f1c2:	2d00      	cmp	r5, #0
 800f1c4:	d06d      	beq.n	800f2a2 <_strtod_l+0xbaa>
 800f1c6:	a30a      	add	r3, pc, #40	; (adr r3, 800f1f0 <_strtod_l+0xaf8>)
 800f1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1cc:	4630      	mov	r0, r6
 800f1ce:	4639      	mov	r1, r7
 800f1d0:	f7f1 fc9c 	bl	8000b0c <__aeabi_dcmplt>
 800f1d4:	2800      	cmp	r0, #0
 800f1d6:	f47f acb8 	bne.w	800eb4a <_strtod_l+0x452>
 800f1da:	a307      	add	r3, pc, #28	; (adr r3, 800f1f8 <_strtod_l+0xb00>)
 800f1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e0:	4630      	mov	r0, r6
 800f1e2:	4639      	mov	r1, r7
 800f1e4:	f7f1 fcb0 	bl	8000b48 <__aeabi_dcmpgt>
 800f1e8:	2800      	cmp	r0, #0
 800f1ea:	f43f af79 	beq.w	800f0e0 <_strtod_l+0x9e8>
 800f1ee:	e4ac      	b.n	800eb4a <_strtod_l+0x452>
 800f1f0:	94a03595 	.word	0x94a03595
 800f1f4:	3fdfffff 	.word	0x3fdfffff
 800f1f8:	35afe535 	.word	0x35afe535
 800f1fc:	3fe00000 	.word	0x3fe00000
 800f200:	000fffff 	.word	0x000fffff
 800f204:	7ff00000 	.word	0x7ff00000
 800f208:	7fefffff 	.word	0x7fefffff
 800f20c:	39500000 	.word	0x39500000
 800f210:	3ff00000 	.word	0x3ff00000
 800f214:	7fe00000 	.word	0x7fe00000
 800f218:	7c9fffff 	.word	0x7c9fffff
 800f21c:	3fe00000 	.word	0x3fe00000
 800f220:	bff00000 	.word	0xbff00000
 800f224:	9b04      	ldr	r3, [sp, #16]
 800f226:	b333      	cbz	r3, 800f276 <_strtod_l+0xb7e>
 800f228:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f22a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f22e:	d822      	bhi.n	800f276 <_strtod_l+0xb7e>
 800f230:	a327      	add	r3, pc, #156	; (adr r3, 800f2d0 <_strtod_l+0xbd8>)
 800f232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f236:	4630      	mov	r0, r6
 800f238:	4639      	mov	r1, r7
 800f23a:	f7f1 fc71 	bl	8000b20 <__aeabi_dcmple>
 800f23e:	b1a0      	cbz	r0, 800f26a <_strtod_l+0xb72>
 800f240:	4639      	mov	r1, r7
 800f242:	4630      	mov	r0, r6
 800f244:	f7f1 fcc8 	bl	8000bd8 <__aeabi_d2uiz>
 800f248:	2800      	cmp	r0, #0
 800f24a:	bf08      	it	eq
 800f24c:	2001      	moveq	r0, #1
 800f24e:	f7f1 f971 	bl	8000534 <__aeabi_ui2d>
 800f252:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f254:	4606      	mov	r6, r0
 800f256:	460f      	mov	r7, r1
 800f258:	bb03      	cbnz	r3, 800f29c <_strtod_l+0xba4>
 800f25a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f25e:	9012      	str	r0, [sp, #72]	; 0x48
 800f260:	9313      	str	r3, [sp, #76]	; 0x4c
 800f262:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f266:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f26a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f26c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f26e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f272:	1a9b      	subs	r3, r3, r2
 800f274:	930b      	str	r3, [sp, #44]	; 0x2c
 800f276:	ed9d 0b08 	vldr	d0, [sp, #32]
 800f27a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800f27e:	f002 f83b 	bl	80112f8 <__ulp>
 800f282:	4650      	mov	r0, sl
 800f284:	ec53 2b10 	vmov	r2, r3, d0
 800f288:	4659      	mov	r1, fp
 800f28a:	f7f1 f9cd 	bl	8000628 <__aeabi_dmul>
 800f28e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f292:	f7f1 f813 	bl	80002bc <__adddf3>
 800f296:	4682      	mov	sl, r0
 800f298:	468b      	mov	fp, r1
 800f29a:	e772      	b.n	800f182 <_strtod_l+0xa8a>
 800f29c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800f2a0:	e7df      	b.n	800f262 <_strtod_l+0xb6a>
 800f2a2:	a30d      	add	r3, pc, #52	; (adr r3, 800f2d8 <_strtod_l+0xbe0>)
 800f2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a8:	f7f1 fc30 	bl	8000b0c <__aeabi_dcmplt>
 800f2ac:	e79c      	b.n	800f1e8 <_strtod_l+0xaf0>
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	930d      	str	r3, [sp, #52]	; 0x34
 800f2b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f2b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f2b6:	6013      	str	r3, [r2, #0]
 800f2b8:	f7ff ba61 	b.w	800e77e <_strtod_l+0x86>
 800f2bc:	2b65      	cmp	r3, #101	; 0x65
 800f2be:	f04f 0200 	mov.w	r2, #0
 800f2c2:	f43f ab4e 	beq.w	800e962 <_strtod_l+0x26a>
 800f2c6:	2101      	movs	r1, #1
 800f2c8:	4614      	mov	r4, r2
 800f2ca:	9104      	str	r1, [sp, #16]
 800f2cc:	f7ff bacb 	b.w	800e866 <_strtod_l+0x16e>
 800f2d0:	ffc00000 	.word	0xffc00000
 800f2d4:	41dfffff 	.word	0x41dfffff
 800f2d8:	94a03595 	.word	0x94a03595
 800f2dc:	3fcfffff 	.word	0x3fcfffff

0800f2e0 <_strtod_r>:
 800f2e0:	4b05      	ldr	r3, [pc, #20]	; (800f2f8 <_strtod_r+0x18>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	b410      	push	{r4}
 800f2e6:	6a1b      	ldr	r3, [r3, #32]
 800f2e8:	4c04      	ldr	r4, [pc, #16]	; (800f2fc <_strtod_r+0x1c>)
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	bf08      	it	eq
 800f2ee:	4623      	moveq	r3, r4
 800f2f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f2f4:	f7ff ba00 	b.w	800e6f8 <_strtod_l>
 800f2f8:	2000000c 	.word	0x2000000c
 800f2fc:	20000070 	.word	0x20000070

0800f300 <_strtol_l.isra.0>:
 800f300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f304:	4680      	mov	r8, r0
 800f306:	4689      	mov	r9, r1
 800f308:	4692      	mov	sl, r2
 800f30a:	461e      	mov	r6, r3
 800f30c:	460f      	mov	r7, r1
 800f30e:	463d      	mov	r5, r7
 800f310:	9808      	ldr	r0, [sp, #32]
 800f312:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f316:	f001 fc67 	bl	8010be8 <__locale_ctype_ptr_l>
 800f31a:	4420      	add	r0, r4
 800f31c:	7843      	ldrb	r3, [r0, #1]
 800f31e:	f013 0308 	ands.w	r3, r3, #8
 800f322:	d132      	bne.n	800f38a <_strtol_l.isra.0+0x8a>
 800f324:	2c2d      	cmp	r4, #45	; 0x2d
 800f326:	d132      	bne.n	800f38e <_strtol_l.isra.0+0x8e>
 800f328:	787c      	ldrb	r4, [r7, #1]
 800f32a:	1cbd      	adds	r5, r7, #2
 800f32c:	2201      	movs	r2, #1
 800f32e:	2e00      	cmp	r6, #0
 800f330:	d05d      	beq.n	800f3ee <_strtol_l.isra.0+0xee>
 800f332:	2e10      	cmp	r6, #16
 800f334:	d109      	bne.n	800f34a <_strtol_l.isra.0+0x4a>
 800f336:	2c30      	cmp	r4, #48	; 0x30
 800f338:	d107      	bne.n	800f34a <_strtol_l.isra.0+0x4a>
 800f33a:	782b      	ldrb	r3, [r5, #0]
 800f33c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f340:	2b58      	cmp	r3, #88	; 0x58
 800f342:	d14f      	bne.n	800f3e4 <_strtol_l.isra.0+0xe4>
 800f344:	786c      	ldrb	r4, [r5, #1]
 800f346:	2610      	movs	r6, #16
 800f348:	3502      	adds	r5, #2
 800f34a:	2a00      	cmp	r2, #0
 800f34c:	bf14      	ite	ne
 800f34e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800f352:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800f356:	2700      	movs	r7, #0
 800f358:	fbb1 fcf6 	udiv	ip, r1, r6
 800f35c:	4638      	mov	r0, r7
 800f35e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800f362:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800f366:	2b09      	cmp	r3, #9
 800f368:	d817      	bhi.n	800f39a <_strtol_l.isra.0+0x9a>
 800f36a:	461c      	mov	r4, r3
 800f36c:	42a6      	cmp	r6, r4
 800f36e:	dd23      	ble.n	800f3b8 <_strtol_l.isra.0+0xb8>
 800f370:	1c7b      	adds	r3, r7, #1
 800f372:	d007      	beq.n	800f384 <_strtol_l.isra.0+0x84>
 800f374:	4584      	cmp	ip, r0
 800f376:	d31c      	bcc.n	800f3b2 <_strtol_l.isra.0+0xb2>
 800f378:	d101      	bne.n	800f37e <_strtol_l.isra.0+0x7e>
 800f37a:	45a6      	cmp	lr, r4
 800f37c:	db19      	blt.n	800f3b2 <_strtol_l.isra.0+0xb2>
 800f37e:	fb00 4006 	mla	r0, r0, r6, r4
 800f382:	2701      	movs	r7, #1
 800f384:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f388:	e7eb      	b.n	800f362 <_strtol_l.isra.0+0x62>
 800f38a:	462f      	mov	r7, r5
 800f38c:	e7bf      	b.n	800f30e <_strtol_l.isra.0+0xe>
 800f38e:	2c2b      	cmp	r4, #43	; 0x2b
 800f390:	bf04      	itt	eq
 800f392:	1cbd      	addeq	r5, r7, #2
 800f394:	787c      	ldrbeq	r4, [r7, #1]
 800f396:	461a      	mov	r2, r3
 800f398:	e7c9      	b.n	800f32e <_strtol_l.isra.0+0x2e>
 800f39a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800f39e:	2b19      	cmp	r3, #25
 800f3a0:	d801      	bhi.n	800f3a6 <_strtol_l.isra.0+0xa6>
 800f3a2:	3c37      	subs	r4, #55	; 0x37
 800f3a4:	e7e2      	b.n	800f36c <_strtol_l.isra.0+0x6c>
 800f3a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800f3aa:	2b19      	cmp	r3, #25
 800f3ac:	d804      	bhi.n	800f3b8 <_strtol_l.isra.0+0xb8>
 800f3ae:	3c57      	subs	r4, #87	; 0x57
 800f3b0:	e7dc      	b.n	800f36c <_strtol_l.isra.0+0x6c>
 800f3b2:	f04f 37ff 	mov.w	r7, #4294967295
 800f3b6:	e7e5      	b.n	800f384 <_strtol_l.isra.0+0x84>
 800f3b8:	1c7b      	adds	r3, r7, #1
 800f3ba:	d108      	bne.n	800f3ce <_strtol_l.isra.0+0xce>
 800f3bc:	2322      	movs	r3, #34	; 0x22
 800f3be:	f8c8 3000 	str.w	r3, [r8]
 800f3c2:	4608      	mov	r0, r1
 800f3c4:	f1ba 0f00 	cmp.w	sl, #0
 800f3c8:	d107      	bne.n	800f3da <_strtol_l.isra.0+0xda>
 800f3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3ce:	b102      	cbz	r2, 800f3d2 <_strtol_l.isra.0+0xd2>
 800f3d0:	4240      	negs	r0, r0
 800f3d2:	f1ba 0f00 	cmp.w	sl, #0
 800f3d6:	d0f8      	beq.n	800f3ca <_strtol_l.isra.0+0xca>
 800f3d8:	b10f      	cbz	r7, 800f3de <_strtol_l.isra.0+0xde>
 800f3da:	f105 39ff 	add.w	r9, r5, #4294967295
 800f3de:	f8ca 9000 	str.w	r9, [sl]
 800f3e2:	e7f2      	b.n	800f3ca <_strtol_l.isra.0+0xca>
 800f3e4:	2430      	movs	r4, #48	; 0x30
 800f3e6:	2e00      	cmp	r6, #0
 800f3e8:	d1af      	bne.n	800f34a <_strtol_l.isra.0+0x4a>
 800f3ea:	2608      	movs	r6, #8
 800f3ec:	e7ad      	b.n	800f34a <_strtol_l.isra.0+0x4a>
 800f3ee:	2c30      	cmp	r4, #48	; 0x30
 800f3f0:	d0a3      	beq.n	800f33a <_strtol_l.isra.0+0x3a>
 800f3f2:	260a      	movs	r6, #10
 800f3f4:	e7a9      	b.n	800f34a <_strtol_l.isra.0+0x4a>
	...

0800f3f8 <_strtol_r>:
 800f3f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3fa:	4c06      	ldr	r4, [pc, #24]	; (800f414 <_strtol_r+0x1c>)
 800f3fc:	4d06      	ldr	r5, [pc, #24]	; (800f418 <_strtol_r+0x20>)
 800f3fe:	6824      	ldr	r4, [r4, #0]
 800f400:	6a24      	ldr	r4, [r4, #32]
 800f402:	2c00      	cmp	r4, #0
 800f404:	bf08      	it	eq
 800f406:	462c      	moveq	r4, r5
 800f408:	9400      	str	r4, [sp, #0]
 800f40a:	f7ff ff79 	bl	800f300 <_strtol_l.isra.0>
 800f40e:	b003      	add	sp, #12
 800f410:	bd30      	pop	{r4, r5, pc}
 800f412:	bf00      	nop
 800f414:	2000000c 	.word	0x2000000c
 800f418:	20000070 	.word	0x20000070

0800f41c <_vsiprintf_r>:
 800f41c:	b500      	push	{lr}
 800f41e:	b09b      	sub	sp, #108	; 0x6c
 800f420:	9100      	str	r1, [sp, #0]
 800f422:	9104      	str	r1, [sp, #16]
 800f424:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f428:	9105      	str	r1, [sp, #20]
 800f42a:	9102      	str	r1, [sp, #8]
 800f42c:	4905      	ldr	r1, [pc, #20]	; (800f444 <_vsiprintf_r+0x28>)
 800f42e:	9103      	str	r1, [sp, #12]
 800f430:	4669      	mov	r1, sp
 800f432:	f002 f9a5 	bl	8011780 <_svfiprintf_r>
 800f436:	9b00      	ldr	r3, [sp, #0]
 800f438:	2200      	movs	r2, #0
 800f43a:	701a      	strb	r2, [r3, #0]
 800f43c:	b01b      	add	sp, #108	; 0x6c
 800f43e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f442:	bf00      	nop
 800f444:	ffff0208 	.word	0xffff0208

0800f448 <vsiprintf>:
 800f448:	4613      	mov	r3, r2
 800f44a:	460a      	mov	r2, r1
 800f44c:	4601      	mov	r1, r0
 800f44e:	4802      	ldr	r0, [pc, #8]	; (800f458 <vsiprintf+0x10>)
 800f450:	6800      	ldr	r0, [r0, #0]
 800f452:	f7ff bfe3 	b.w	800f41c <_vsiprintf_r>
 800f456:	bf00      	nop
 800f458:	2000000c 	.word	0x2000000c

0800f45c <__swbuf_r>:
 800f45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f45e:	460e      	mov	r6, r1
 800f460:	4614      	mov	r4, r2
 800f462:	4605      	mov	r5, r0
 800f464:	b118      	cbz	r0, 800f46e <__swbuf_r+0x12>
 800f466:	6983      	ldr	r3, [r0, #24]
 800f468:	b90b      	cbnz	r3, 800f46e <__swbuf_r+0x12>
 800f46a:	f001 f80d 	bl	8010488 <__sinit>
 800f46e:	4b21      	ldr	r3, [pc, #132]	; (800f4f4 <__swbuf_r+0x98>)
 800f470:	429c      	cmp	r4, r3
 800f472:	d12a      	bne.n	800f4ca <__swbuf_r+0x6e>
 800f474:	686c      	ldr	r4, [r5, #4]
 800f476:	69a3      	ldr	r3, [r4, #24]
 800f478:	60a3      	str	r3, [r4, #8]
 800f47a:	89a3      	ldrh	r3, [r4, #12]
 800f47c:	071a      	lsls	r2, r3, #28
 800f47e:	d52e      	bpl.n	800f4de <__swbuf_r+0x82>
 800f480:	6923      	ldr	r3, [r4, #16]
 800f482:	b363      	cbz	r3, 800f4de <__swbuf_r+0x82>
 800f484:	6923      	ldr	r3, [r4, #16]
 800f486:	6820      	ldr	r0, [r4, #0]
 800f488:	1ac0      	subs	r0, r0, r3
 800f48a:	6963      	ldr	r3, [r4, #20]
 800f48c:	b2f6      	uxtb	r6, r6
 800f48e:	4283      	cmp	r3, r0
 800f490:	4637      	mov	r7, r6
 800f492:	dc04      	bgt.n	800f49e <__swbuf_r+0x42>
 800f494:	4621      	mov	r1, r4
 800f496:	4628      	mov	r0, r5
 800f498:	f000 ff8c 	bl	80103b4 <_fflush_r>
 800f49c:	bb28      	cbnz	r0, 800f4ea <__swbuf_r+0x8e>
 800f49e:	68a3      	ldr	r3, [r4, #8]
 800f4a0:	3b01      	subs	r3, #1
 800f4a2:	60a3      	str	r3, [r4, #8]
 800f4a4:	6823      	ldr	r3, [r4, #0]
 800f4a6:	1c5a      	adds	r2, r3, #1
 800f4a8:	6022      	str	r2, [r4, #0]
 800f4aa:	701e      	strb	r6, [r3, #0]
 800f4ac:	6963      	ldr	r3, [r4, #20]
 800f4ae:	3001      	adds	r0, #1
 800f4b0:	4283      	cmp	r3, r0
 800f4b2:	d004      	beq.n	800f4be <__swbuf_r+0x62>
 800f4b4:	89a3      	ldrh	r3, [r4, #12]
 800f4b6:	07db      	lsls	r3, r3, #31
 800f4b8:	d519      	bpl.n	800f4ee <__swbuf_r+0x92>
 800f4ba:	2e0a      	cmp	r6, #10
 800f4bc:	d117      	bne.n	800f4ee <__swbuf_r+0x92>
 800f4be:	4621      	mov	r1, r4
 800f4c0:	4628      	mov	r0, r5
 800f4c2:	f000 ff77 	bl	80103b4 <_fflush_r>
 800f4c6:	b190      	cbz	r0, 800f4ee <__swbuf_r+0x92>
 800f4c8:	e00f      	b.n	800f4ea <__swbuf_r+0x8e>
 800f4ca:	4b0b      	ldr	r3, [pc, #44]	; (800f4f8 <__swbuf_r+0x9c>)
 800f4cc:	429c      	cmp	r4, r3
 800f4ce:	d101      	bne.n	800f4d4 <__swbuf_r+0x78>
 800f4d0:	68ac      	ldr	r4, [r5, #8]
 800f4d2:	e7d0      	b.n	800f476 <__swbuf_r+0x1a>
 800f4d4:	4b09      	ldr	r3, [pc, #36]	; (800f4fc <__swbuf_r+0xa0>)
 800f4d6:	429c      	cmp	r4, r3
 800f4d8:	bf08      	it	eq
 800f4da:	68ec      	ldreq	r4, [r5, #12]
 800f4dc:	e7cb      	b.n	800f476 <__swbuf_r+0x1a>
 800f4de:	4621      	mov	r1, r4
 800f4e0:	4628      	mov	r0, r5
 800f4e2:	f000 f81f 	bl	800f524 <__swsetup_r>
 800f4e6:	2800      	cmp	r0, #0
 800f4e8:	d0cc      	beq.n	800f484 <__swbuf_r+0x28>
 800f4ea:	f04f 37ff 	mov.w	r7, #4294967295
 800f4ee:	4638      	mov	r0, r7
 800f4f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4f2:	bf00      	nop
 800f4f4:	08012c08 	.word	0x08012c08
 800f4f8:	08012c28 	.word	0x08012c28
 800f4fc:	08012be8 	.word	0x08012be8

0800f500 <_write_r>:
 800f500:	b538      	push	{r3, r4, r5, lr}
 800f502:	4c07      	ldr	r4, [pc, #28]	; (800f520 <_write_r+0x20>)
 800f504:	4605      	mov	r5, r0
 800f506:	4608      	mov	r0, r1
 800f508:	4611      	mov	r1, r2
 800f50a:	2200      	movs	r2, #0
 800f50c:	6022      	str	r2, [r4, #0]
 800f50e:	461a      	mov	r2, r3
 800f510:	f7f1 ffc3 	bl	800149a <_write>
 800f514:	1c43      	adds	r3, r0, #1
 800f516:	d102      	bne.n	800f51e <_write_r+0x1e>
 800f518:	6823      	ldr	r3, [r4, #0]
 800f51a:	b103      	cbz	r3, 800f51e <_write_r+0x1e>
 800f51c:	602b      	str	r3, [r5, #0]
 800f51e:	bd38      	pop	{r3, r4, r5, pc}
 800f520:	20004d40 	.word	0x20004d40

0800f524 <__swsetup_r>:
 800f524:	4b32      	ldr	r3, [pc, #200]	; (800f5f0 <__swsetup_r+0xcc>)
 800f526:	b570      	push	{r4, r5, r6, lr}
 800f528:	681d      	ldr	r5, [r3, #0]
 800f52a:	4606      	mov	r6, r0
 800f52c:	460c      	mov	r4, r1
 800f52e:	b125      	cbz	r5, 800f53a <__swsetup_r+0x16>
 800f530:	69ab      	ldr	r3, [r5, #24]
 800f532:	b913      	cbnz	r3, 800f53a <__swsetup_r+0x16>
 800f534:	4628      	mov	r0, r5
 800f536:	f000 ffa7 	bl	8010488 <__sinit>
 800f53a:	4b2e      	ldr	r3, [pc, #184]	; (800f5f4 <__swsetup_r+0xd0>)
 800f53c:	429c      	cmp	r4, r3
 800f53e:	d10f      	bne.n	800f560 <__swsetup_r+0x3c>
 800f540:	686c      	ldr	r4, [r5, #4]
 800f542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f546:	b29a      	uxth	r2, r3
 800f548:	0715      	lsls	r5, r2, #28
 800f54a:	d42c      	bmi.n	800f5a6 <__swsetup_r+0x82>
 800f54c:	06d0      	lsls	r0, r2, #27
 800f54e:	d411      	bmi.n	800f574 <__swsetup_r+0x50>
 800f550:	2209      	movs	r2, #9
 800f552:	6032      	str	r2, [r6, #0]
 800f554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f558:	81a3      	strh	r3, [r4, #12]
 800f55a:	f04f 30ff 	mov.w	r0, #4294967295
 800f55e:	e03e      	b.n	800f5de <__swsetup_r+0xba>
 800f560:	4b25      	ldr	r3, [pc, #148]	; (800f5f8 <__swsetup_r+0xd4>)
 800f562:	429c      	cmp	r4, r3
 800f564:	d101      	bne.n	800f56a <__swsetup_r+0x46>
 800f566:	68ac      	ldr	r4, [r5, #8]
 800f568:	e7eb      	b.n	800f542 <__swsetup_r+0x1e>
 800f56a:	4b24      	ldr	r3, [pc, #144]	; (800f5fc <__swsetup_r+0xd8>)
 800f56c:	429c      	cmp	r4, r3
 800f56e:	bf08      	it	eq
 800f570:	68ec      	ldreq	r4, [r5, #12]
 800f572:	e7e6      	b.n	800f542 <__swsetup_r+0x1e>
 800f574:	0751      	lsls	r1, r2, #29
 800f576:	d512      	bpl.n	800f59e <__swsetup_r+0x7a>
 800f578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f57a:	b141      	cbz	r1, 800f58e <__swsetup_r+0x6a>
 800f57c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f580:	4299      	cmp	r1, r3
 800f582:	d002      	beq.n	800f58a <__swsetup_r+0x66>
 800f584:	4630      	mov	r0, r6
 800f586:	f001 fff9 	bl	801157c <_free_r>
 800f58a:	2300      	movs	r3, #0
 800f58c:	6363      	str	r3, [r4, #52]	; 0x34
 800f58e:	89a3      	ldrh	r3, [r4, #12]
 800f590:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f594:	81a3      	strh	r3, [r4, #12]
 800f596:	2300      	movs	r3, #0
 800f598:	6063      	str	r3, [r4, #4]
 800f59a:	6923      	ldr	r3, [r4, #16]
 800f59c:	6023      	str	r3, [r4, #0]
 800f59e:	89a3      	ldrh	r3, [r4, #12]
 800f5a0:	f043 0308 	orr.w	r3, r3, #8
 800f5a4:	81a3      	strh	r3, [r4, #12]
 800f5a6:	6923      	ldr	r3, [r4, #16]
 800f5a8:	b94b      	cbnz	r3, 800f5be <__swsetup_r+0x9a>
 800f5aa:	89a3      	ldrh	r3, [r4, #12]
 800f5ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f5b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5b4:	d003      	beq.n	800f5be <__swsetup_r+0x9a>
 800f5b6:	4621      	mov	r1, r4
 800f5b8:	4630      	mov	r0, r6
 800f5ba:	f001 fb6d 	bl	8010c98 <__smakebuf_r>
 800f5be:	89a2      	ldrh	r2, [r4, #12]
 800f5c0:	f012 0301 	ands.w	r3, r2, #1
 800f5c4:	d00c      	beq.n	800f5e0 <__swsetup_r+0xbc>
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	60a3      	str	r3, [r4, #8]
 800f5ca:	6963      	ldr	r3, [r4, #20]
 800f5cc:	425b      	negs	r3, r3
 800f5ce:	61a3      	str	r3, [r4, #24]
 800f5d0:	6923      	ldr	r3, [r4, #16]
 800f5d2:	b953      	cbnz	r3, 800f5ea <__swsetup_r+0xc6>
 800f5d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f5d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f5dc:	d1ba      	bne.n	800f554 <__swsetup_r+0x30>
 800f5de:	bd70      	pop	{r4, r5, r6, pc}
 800f5e0:	0792      	lsls	r2, r2, #30
 800f5e2:	bf58      	it	pl
 800f5e4:	6963      	ldrpl	r3, [r4, #20]
 800f5e6:	60a3      	str	r3, [r4, #8]
 800f5e8:	e7f2      	b.n	800f5d0 <__swsetup_r+0xac>
 800f5ea:	2000      	movs	r0, #0
 800f5ec:	e7f7      	b.n	800f5de <__swsetup_r+0xba>
 800f5ee:	bf00      	nop
 800f5f0:	2000000c 	.word	0x2000000c
 800f5f4:	08012c08 	.word	0x08012c08
 800f5f8:	08012c28 	.word	0x08012c28
 800f5fc:	08012be8 	.word	0x08012be8

0800f600 <_close_r>:
 800f600:	b538      	push	{r3, r4, r5, lr}
 800f602:	4c06      	ldr	r4, [pc, #24]	; (800f61c <_close_r+0x1c>)
 800f604:	2300      	movs	r3, #0
 800f606:	4605      	mov	r5, r0
 800f608:	4608      	mov	r0, r1
 800f60a:	6023      	str	r3, [r4, #0]
 800f60c:	f7f3 fcf1 	bl	8002ff2 <_close>
 800f610:	1c43      	adds	r3, r0, #1
 800f612:	d102      	bne.n	800f61a <_close_r+0x1a>
 800f614:	6823      	ldr	r3, [r4, #0]
 800f616:	b103      	cbz	r3, 800f61a <_close_r+0x1a>
 800f618:	602b      	str	r3, [r5, #0]
 800f61a:	bd38      	pop	{r3, r4, r5, pc}
 800f61c:	20004d40 	.word	0x20004d40

0800f620 <quorem>:
 800f620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f624:	6903      	ldr	r3, [r0, #16]
 800f626:	690c      	ldr	r4, [r1, #16]
 800f628:	42a3      	cmp	r3, r4
 800f62a:	4680      	mov	r8, r0
 800f62c:	f2c0 8082 	blt.w	800f734 <quorem+0x114>
 800f630:	3c01      	subs	r4, #1
 800f632:	f101 0714 	add.w	r7, r1, #20
 800f636:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f63a:	f100 0614 	add.w	r6, r0, #20
 800f63e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f642:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f646:	eb06 030c 	add.w	r3, r6, ip
 800f64a:	3501      	adds	r5, #1
 800f64c:	eb07 090c 	add.w	r9, r7, ip
 800f650:	9301      	str	r3, [sp, #4]
 800f652:	fbb0 f5f5 	udiv	r5, r0, r5
 800f656:	b395      	cbz	r5, 800f6be <quorem+0x9e>
 800f658:	f04f 0a00 	mov.w	sl, #0
 800f65c:	4638      	mov	r0, r7
 800f65e:	46b6      	mov	lr, r6
 800f660:	46d3      	mov	fp, sl
 800f662:	f850 2b04 	ldr.w	r2, [r0], #4
 800f666:	b293      	uxth	r3, r2
 800f668:	fb05 a303 	mla	r3, r5, r3, sl
 800f66c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f670:	b29b      	uxth	r3, r3
 800f672:	ebab 0303 	sub.w	r3, fp, r3
 800f676:	0c12      	lsrs	r2, r2, #16
 800f678:	f8de b000 	ldr.w	fp, [lr]
 800f67c:	fb05 a202 	mla	r2, r5, r2, sl
 800f680:	fa13 f38b 	uxtah	r3, r3, fp
 800f684:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f688:	fa1f fb82 	uxth.w	fp, r2
 800f68c:	f8de 2000 	ldr.w	r2, [lr]
 800f690:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f694:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f698:	b29b      	uxth	r3, r3
 800f69a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f69e:	4581      	cmp	r9, r0
 800f6a0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f6a4:	f84e 3b04 	str.w	r3, [lr], #4
 800f6a8:	d2db      	bcs.n	800f662 <quorem+0x42>
 800f6aa:	f856 300c 	ldr.w	r3, [r6, ip]
 800f6ae:	b933      	cbnz	r3, 800f6be <quorem+0x9e>
 800f6b0:	9b01      	ldr	r3, [sp, #4]
 800f6b2:	3b04      	subs	r3, #4
 800f6b4:	429e      	cmp	r6, r3
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	d330      	bcc.n	800f71c <quorem+0xfc>
 800f6ba:	f8c8 4010 	str.w	r4, [r8, #16]
 800f6be:	4640      	mov	r0, r8
 800f6c0:	f001 fda2 	bl	8011208 <__mcmp>
 800f6c4:	2800      	cmp	r0, #0
 800f6c6:	db25      	blt.n	800f714 <quorem+0xf4>
 800f6c8:	3501      	adds	r5, #1
 800f6ca:	4630      	mov	r0, r6
 800f6cc:	f04f 0c00 	mov.w	ip, #0
 800f6d0:	f857 2b04 	ldr.w	r2, [r7], #4
 800f6d4:	f8d0 e000 	ldr.w	lr, [r0]
 800f6d8:	b293      	uxth	r3, r2
 800f6da:	ebac 0303 	sub.w	r3, ip, r3
 800f6de:	0c12      	lsrs	r2, r2, #16
 800f6e0:	fa13 f38e 	uxtah	r3, r3, lr
 800f6e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f6e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6f2:	45b9      	cmp	r9, r7
 800f6f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f6f8:	f840 3b04 	str.w	r3, [r0], #4
 800f6fc:	d2e8      	bcs.n	800f6d0 <quorem+0xb0>
 800f6fe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f702:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f706:	b92a      	cbnz	r2, 800f714 <quorem+0xf4>
 800f708:	3b04      	subs	r3, #4
 800f70a:	429e      	cmp	r6, r3
 800f70c:	461a      	mov	r2, r3
 800f70e:	d30b      	bcc.n	800f728 <quorem+0x108>
 800f710:	f8c8 4010 	str.w	r4, [r8, #16]
 800f714:	4628      	mov	r0, r5
 800f716:	b003      	add	sp, #12
 800f718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f71c:	6812      	ldr	r2, [r2, #0]
 800f71e:	3b04      	subs	r3, #4
 800f720:	2a00      	cmp	r2, #0
 800f722:	d1ca      	bne.n	800f6ba <quorem+0x9a>
 800f724:	3c01      	subs	r4, #1
 800f726:	e7c5      	b.n	800f6b4 <quorem+0x94>
 800f728:	6812      	ldr	r2, [r2, #0]
 800f72a:	3b04      	subs	r3, #4
 800f72c:	2a00      	cmp	r2, #0
 800f72e:	d1ef      	bne.n	800f710 <quorem+0xf0>
 800f730:	3c01      	subs	r4, #1
 800f732:	e7ea      	b.n	800f70a <quorem+0xea>
 800f734:	2000      	movs	r0, #0
 800f736:	e7ee      	b.n	800f716 <quorem+0xf6>

0800f738 <_dtoa_r>:
 800f738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f73c:	ec57 6b10 	vmov	r6, r7, d0
 800f740:	b097      	sub	sp, #92	; 0x5c
 800f742:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f744:	9106      	str	r1, [sp, #24]
 800f746:	4604      	mov	r4, r0
 800f748:	920b      	str	r2, [sp, #44]	; 0x2c
 800f74a:	9312      	str	r3, [sp, #72]	; 0x48
 800f74c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f750:	e9cd 6700 	strd	r6, r7, [sp]
 800f754:	b93d      	cbnz	r5, 800f766 <_dtoa_r+0x2e>
 800f756:	2010      	movs	r0, #16
 800f758:	f001 fade 	bl	8010d18 <malloc>
 800f75c:	6260      	str	r0, [r4, #36]	; 0x24
 800f75e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f762:	6005      	str	r5, [r0, #0]
 800f764:	60c5      	str	r5, [r0, #12]
 800f766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f768:	6819      	ldr	r1, [r3, #0]
 800f76a:	b151      	cbz	r1, 800f782 <_dtoa_r+0x4a>
 800f76c:	685a      	ldr	r2, [r3, #4]
 800f76e:	604a      	str	r2, [r1, #4]
 800f770:	2301      	movs	r3, #1
 800f772:	4093      	lsls	r3, r2
 800f774:	608b      	str	r3, [r1, #8]
 800f776:	4620      	mov	r0, r4
 800f778:	f001 fb27 	bl	8010dca <_Bfree>
 800f77c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f77e:	2200      	movs	r2, #0
 800f780:	601a      	str	r2, [r3, #0]
 800f782:	1e3b      	subs	r3, r7, #0
 800f784:	bfbb      	ittet	lt
 800f786:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f78a:	9301      	strlt	r3, [sp, #4]
 800f78c:	2300      	movge	r3, #0
 800f78e:	2201      	movlt	r2, #1
 800f790:	bfac      	ite	ge
 800f792:	f8c8 3000 	strge.w	r3, [r8]
 800f796:	f8c8 2000 	strlt.w	r2, [r8]
 800f79a:	4baf      	ldr	r3, [pc, #700]	; (800fa58 <_dtoa_r+0x320>)
 800f79c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f7a0:	ea33 0308 	bics.w	r3, r3, r8
 800f7a4:	d114      	bne.n	800f7d0 <_dtoa_r+0x98>
 800f7a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f7a8:	f242 730f 	movw	r3, #9999	; 0x270f
 800f7ac:	6013      	str	r3, [r2, #0]
 800f7ae:	9b00      	ldr	r3, [sp, #0]
 800f7b0:	b923      	cbnz	r3, 800f7bc <_dtoa_r+0x84>
 800f7b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	f000 8542 	beq.w	8010240 <_dtoa_r+0xb08>
 800f7bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800fa6c <_dtoa_r+0x334>
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	f000 8544 	beq.w	8010250 <_dtoa_r+0xb18>
 800f7c8:	f10b 0303 	add.w	r3, fp, #3
 800f7cc:	f000 bd3e 	b.w	801024c <_dtoa_r+0xb14>
 800f7d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	4630      	mov	r0, r6
 800f7da:	4639      	mov	r1, r7
 800f7dc:	f7f1 f98c 	bl	8000af8 <__aeabi_dcmpeq>
 800f7e0:	4681      	mov	r9, r0
 800f7e2:	b168      	cbz	r0, 800f800 <_dtoa_r+0xc8>
 800f7e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	6013      	str	r3, [r2, #0]
 800f7ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	f000 8524 	beq.w	801023a <_dtoa_r+0xb02>
 800f7f2:	4b9a      	ldr	r3, [pc, #616]	; (800fa5c <_dtoa_r+0x324>)
 800f7f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f7f6:	f103 3bff 	add.w	fp, r3, #4294967295
 800f7fa:	6013      	str	r3, [r2, #0]
 800f7fc:	f000 bd28 	b.w	8010250 <_dtoa_r+0xb18>
 800f800:	aa14      	add	r2, sp, #80	; 0x50
 800f802:	a915      	add	r1, sp, #84	; 0x54
 800f804:	ec47 6b10 	vmov	d0, r6, r7
 800f808:	4620      	mov	r0, r4
 800f80a:	f001 fdeb 	bl	80113e4 <__d2b>
 800f80e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f812:	9004      	str	r0, [sp, #16]
 800f814:	2d00      	cmp	r5, #0
 800f816:	d07c      	beq.n	800f912 <_dtoa_r+0x1da>
 800f818:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f81c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f820:	46b2      	mov	sl, r6
 800f822:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f826:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f82a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f82e:	2200      	movs	r2, #0
 800f830:	4b8b      	ldr	r3, [pc, #556]	; (800fa60 <_dtoa_r+0x328>)
 800f832:	4650      	mov	r0, sl
 800f834:	4659      	mov	r1, fp
 800f836:	f7f0 fd3f 	bl	80002b8 <__aeabi_dsub>
 800f83a:	a381      	add	r3, pc, #516	; (adr r3, 800fa40 <_dtoa_r+0x308>)
 800f83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f840:	f7f0 fef2 	bl	8000628 <__aeabi_dmul>
 800f844:	a380      	add	r3, pc, #512	; (adr r3, 800fa48 <_dtoa_r+0x310>)
 800f846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84a:	f7f0 fd37 	bl	80002bc <__adddf3>
 800f84e:	4606      	mov	r6, r0
 800f850:	4628      	mov	r0, r5
 800f852:	460f      	mov	r7, r1
 800f854:	f7f0 fe7e 	bl	8000554 <__aeabi_i2d>
 800f858:	a37d      	add	r3, pc, #500	; (adr r3, 800fa50 <_dtoa_r+0x318>)
 800f85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f85e:	f7f0 fee3 	bl	8000628 <__aeabi_dmul>
 800f862:	4602      	mov	r2, r0
 800f864:	460b      	mov	r3, r1
 800f866:	4630      	mov	r0, r6
 800f868:	4639      	mov	r1, r7
 800f86a:	f7f0 fd27 	bl	80002bc <__adddf3>
 800f86e:	4606      	mov	r6, r0
 800f870:	460f      	mov	r7, r1
 800f872:	f7f1 f989 	bl	8000b88 <__aeabi_d2iz>
 800f876:	2200      	movs	r2, #0
 800f878:	4682      	mov	sl, r0
 800f87a:	2300      	movs	r3, #0
 800f87c:	4630      	mov	r0, r6
 800f87e:	4639      	mov	r1, r7
 800f880:	f7f1 f944 	bl	8000b0c <__aeabi_dcmplt>
 800f884:	b148      	cbz	r0, 800f89a <_dtoa_r+0x162>
 800f886:	4650      	mov	r0, sl
 800f888:	f7f0 fe64 	bl	8000554 <__aeabi_i2d>
 800f88c:	4632      	mov	r2, r6
 800f88e:	463b      	mov	r3, r7
 800f890:	f7f1 f932 	bl	8000af8 <__aeabi_dcmpeq>
 800f894:	b908      	cbnz	r0, 800f89a <_dtoa_r+0x162>
 800f896:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f89a:	f1ba 0f16 	cmp.w	sl, #22
 800f89e:	d859      	bhi.n	800f954 <_dtoa_r+0x21c>
 800f8a0:	4970      	ldr	r1, [pc, #448]	; (800fa64 <_dtoa_r+0x32c>)
 800f8a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f8a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8ae:	f7f1 f94b 	bl	8000b48 <__aeabi_dcmpgt>
 800f8b2:	2800      	cmp	r0, #0
 800f8b4:	d050      	beq.n	800f958 <_dtoa_r+0x220>
 800f8b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800f8be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f8c0:	1b5d      	subs	r5, r3, r5
 800f8c2:	f1b5 0801 	subs.w	r8, r5, #1
 800f8c6:	bf49      	itett	mi
 800f8c8:	f1c5 0301 	rsbmi	r3, r5, #1
 800f8cc:	2300      	movpl	r3, #0
 800f8ce:	9305      	strmi	r3, [sp, #20]
 800f8d0:	f04f 0800 	movmi.w	r8, #0
 800f8d4:	bf58      	it	pl
 800f8d6:	9305      	strpl	r3, [sp, #20]
 800f8d8:	f1ba 0f00 	cmp.w	sl, #0
 800f8dc:	db3e      	blt.n	800f95c <_dtoa_r+0x224>
 800f8de:	2300      	movs	r3, #0
 800f8e0:	44d0      	add	r8, sl
 800f8e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f8e6:	9307      	str	r3, [sp, #28]
 800f8e8:	9b06      	ldr	r3, [sp, #24]
 800f8ea:	2b09      	cmp	r3, #9
 800f8ec:	f200 8090 	bhi.w	800fa10 <_dtoa_r+0x2d8>
 800f8f0:	2b05      	cmp	r3, #5
 800f8f2:	bfc4      	itt	gt
 800f8f4:	3b04      	subgt	r3, #4
 800f8f6:	9306      	strgt	r3, [sp, #24]
 800f8f8:	9b06      	ldr	r3, [sp, #24]
 800f8fa:	f1a3 0302 	sub.w	r3, r3, #2
 800f8fe:	bfcc      	ite	gt
 800f900:	2500      	movgt	r5, #0
 800f902:	2501      	movle	r5, #1
 800f904:	2b03      	cmp	r3, #3
 800f906:	f200 808f 	bhi.w	800fa28 <_dtoa_r+0x2f0>
 800f90a:	e8df f003 	tbb	[pc, r3]
 800f90e:	7f7d      	.short	0x7f7d
 800f910:	7131      	.short	0x7131
 800f912:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f916:	441d      	add	r5, r3
 800f918:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f91c:	2820      	cmp	r0, #32
 800f91e:	dd13      	ble.n	800f948 <_dtoa_r+0x210>
 800f920:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f924:	9b00      	ldr	r3, [sp, #0]
 800f926:	fa08 f800 	lsl.w	r8, r8, r0
 800f92a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f92e:	fa23 f000 	lsr.w	r0, r3, r0
 800f932:	ea48 0000 	orr.w	r0, r8, r0
 800f936:	f7f0 fdfd 	bl	8000534 <__aeabi_ui2d>
 800f93a:	2301      	movs	r3, #1
 800f93c:	4682      	mov	sl, r0
 800f93e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f942:	3d01      	subs	r5, #1
 800f944:	9313      	str	r3, [sp, #76]	; 0x4c
 800f946:	e772      	b.n	800f82e <_dtoa_r+0xf6>
 800f948:	9b00      	ldr	r3, [sp, #0]
 800f94a:	f1c0 0020 	rsb	r0, r0, #32
 800f94e:	fa03 f000 	lsl.w	r0, r3, r0
 800f952:	e7f0      	b.n	800f936 <_dtoa_r+0x1fe>
 800f954:	2301      	movs	r3, #1
 800f956:	e7b1      	b.n	800f8bc <_dtoa_r+0x184>
 800f958:	900f      	str	r0, [sp, #60]	; 0x3c
 800f95a:	e7b0      	b.n	800f8be <_dtoa_r+0x186>
 800f95c:	9b05      	ldr	r3, [sp, #20]
 800f95e:	eba3 030a 	sub.w	r3, r3, sl
 800f962:	9305      	str	r3, [sp, #20]
 800f964:	f1ca 0300 	rsb	r3, sl, #0
 800f968:	9307      	str	r3, [sp, #28]
 800f96a:	2300      	movs	r3, #0
 800f96c:	930e      	str	r3, [sp, #56]	; 0x38
 800f96e:	e7bb      	b.n	800f8e8 <_dtoa_r+0x1b0>
 800f970:	2301      	movs	r3, #1
 800f972:	930a      	str	r3, [sp, #40]	; 0x28
 800f974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f976:	2b00      	cmp	r3, #0
 800f978:	dd59      	ble.n	800fa2e <_dtoa_r+0x2f6>
 800f97a:	9302      	str	r3, [sp, #8]
 800f97c:	4699      	mov	r9, r3
 800f97e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f980:	2200      	movs	r2, #0
 800f982:	6072      	str	r2, [r6, #4]
 800f984:	2204      	movs	r2, #4
 800f986:	f102 0014 	add.w	r0, r2, #20
 800f98a:	4298      	cmp	r0, r3
 800f98c:	6871      	ldr	r1, [r6, #4]
 800f98e:	d953      	bls.n	800fa38 <_dtoa_r+0x300>
 800f990:	4620      	mov	r0, r4
 800f992:	f001 f9e6 	bl	8010d62 <_Balloc>
 800f996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f998:	6030      	str	r0, [r6, #0]
 800f99a:	f1b9 0f0e 	cmp.w	r9, #14
 800f99e:	f8d3 b000 	ldr.w	fp, [r3]
 800f9a2:	f200 80e6 	bhi.w	800fb72 <_dtoa_r+0x43a>
 800f9a6:	2d00      	cmp	r5, #0
 800f9a8:	f000 80e3 	beq.w	800fb72 <_dtoa_r+0x43a>
 800f9ac:	ed9d 7b00 	vldr	d7, [sp]
 800f9b0:	f1ba 0f00 	cmp.w	sl, #0
 800f9b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f9b8:	dd74      	ble.n	800faa4 <_dtoa_r+0x36c>
 800f9ba:	4a2a      	ldr	r2, [pc, #168]	; (800fa64 <_dtoa_r+0x32c>)
 800f9bc:	f00a 030f 	and.w	r3, sl, #15
 800f9c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f9c4:	ed93 7b00 	vldr	d7, [r3]
 800f9c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f9cc:	06f0      	lsls	r0, r6, #27
 800f9ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f9d2:	d565      	bpl.n	800faa0 <_dtoa_r+0x368>
 800f9d4:	4b24      	ldr	r3, [pc, #144]	; (800fa68 <_dtoa_r+0x330>)
 800f9d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f9da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f9de:	f7f0 ff4d 	bl	800087c <__aeabi_ddiv>
 800f9e2:	e9cd 0100 	strd	r0, r1, [sp]
 800f9e6:	f006 060f 	and.w	r6, r6, #15
 800f9ea:	2503      	movs	r5, #3
 800f9ec:	4f1e      	ldr	r7, [pc, #120]	; (800fa68 <_dtoa_r+0x330>)
 800f9ee:	e04c      	b.n	800fa8a <_dtoa_r+0x352>
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	930a      	str	r3, [sp, #40]	; 0x28
 800f9f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9f6:	4453      	add	r3, sl
 800f9f8:	f103 0901 	add.w	r9, r3, #1
 800f9fc:	9302      	str	r3, [sp, #8]
 800f9fe:	464b      	mov	r3, r9
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	bfb8      	it	lt
 800fa04:	2301      	movlt	r3, #1
 800fa06:	e7ba      	b.n	800f97e <_dtoa_r+0x246>
 800fa08:	2300      	movs	r3, #0
 800fa0a:	e7b2      	b.n	800f972 <_dtoa_r+0x23a>
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	e7f0      	b.n	800f9f2 <_dtoa_r+0x2ba>
 800fa10:	2501      	movs	r5, #1
 800fa12:	2300      	movs	r3, #0
 800fa14:	9306      	str	r3, [sp, #24]
 800fa16:	950a      	str	r5, [sp, #40]	; 0x28
 800fa18:	f04f 33ff 	mov.w	r3, #4294967295
 800fa1c:	9302      	str	r3, [sp, #8]
 800fa1e:	4699      	mov	r9, r3
 800fa20:	2200      	movs	r2, #0
 800fa22:	2312      	movs	r3, #18
 800fa24:	920b      	str	r2, [sp, #44]	; 0x2c
 800fa26:	e7aa      	b.n	800f97e <_dtoa_r+0x246>
 800fa28:	2301      	movs	r3, #1
 800fa2a:	930a      	str	r3, [sp, #40]	; 0x28
 800fa2c:	e7f4      	b.n	800fa18 <_dtoa_r+0x2e0>
 800fa2e:	2301      	movs	r3, #1
 800fa30:	9302      	str	r3, [sp, #8]
 800fa32:	4699      	mov	r9, r3
 800fa34:	461a      	mov	r2, r3
 800fa36:	e7f5      	b.n	800fa24 <_dtoa_r+0x2ec>
 800fa38:	3101      	adds	r1, #1
 800fa3a:	6071      	str	r1, [r6, #4]
 800fa3c:	0052      	lsls	r2, r2, #1
 800fa3e:	e7a2      	b.n	800f986 <_dtoa_r+0x24e>
 800fa40:	636f4361 	.word	0x636f4361
 800fa44:	3fd287a7 	.word	0x3fd287a7
 800fa48:	8b60c8b3 	.word	0x8b60c8b3
 800fa4c:	3fc68a28 	.word	0x3fc68a28
 800fa50:	509f79fb 	.word	0x509f79fb
 800fa54:	3fd34413 	.word	0x3fd34413
 800fa58:	7ff00000 	.word	0x7ff00000
 800fa5c:	08012d7c 	.word	0x08012d7c
 800fa60:	3ff80000 	.word	0x3ff80000
 800fa64:	08012c80 	.word	0x08012c80
 800fa68:	08012c58 	.word	0x08012c58
 800fa6c:	08012be1 	.word	0x08012be1
 800fa70:	07f1      	lsls	r1, r6, #31
 800fa72:	d508      	bpl.n	800fa86 <_dtoa_r+0x34e>
 800fa74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fa78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa7c:	f7f0 fdd4 	bl	8000628 <__aeabi_dmul>
 800fa80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fa84:	3501      	adds	r5, #1
 800fa86:	1076      	asrs	r6, r6, #1
 800fa88:	3708      	adds	r7, #8
 800fa8a:	2e00      	cmp	r6, #0
 800fa8c:	d1f0      	bne.n	800fa70 <_dtoa_r+0x338>
 800fa8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fa92:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa96:	f7f0 fef1 	bl	800087c <__aeabi_ddiv>
 800fa9a:	e9cd 0100 	strd	r0, r1, [sp]
 800fa9e:	e01a      	b.n	800fad6 <_dtoa_r+0x39e>
 800faa0:	2502      	movs	r5, #2
 800faa2:	e7a3      	b.n	800f9ec <_dtoa_r+0x2b4>
 800faa4:	f000 80a0 	beq.w	800fbe8 <_dtoa_r+0x4b0>
 800faa8:	f1ca 0600 	rsb	r6, sl, #0
 800faac:	4b9f      	ldr	r3, [pc, #636]	; (800fd2c <_dtoa_r+0x5f4>)
 800faae:	4fa0      	ldr	r7, [pc, #640]	; (800fd30 <_dtoa_r+0x5f8>)
 800fab0:	f006 020f 	and.w	r2, r6, #15
 800fab4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fabc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fac0:	f7f0 fdb2 	bl	8000628 <__aeabi_dmul>
 800fac4:	e9cd 0100 	strd	r0, r1, [sp]
 800fac8:	1136      	asrs	r6, r6, #4
 800faca:	2300      	movs	r3, #0
 800facc:	2502      	movs	r5, #2
 800face:	2e00      	cmp	r6, #0
 800fad0:	d17f      	bne.n	800fbd2 <_dtoa_r+0x49a>
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d1e1      	bne.n	800fa9a <_dtoa_r+0x362>
 800fad6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fad8:	2b00      	cmp	r3, #0
 800fada:	f000 8087 	beq.w	800fbec <_dtoa_r+0x4b4>
 800fade:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fae2:	2200      	movs	r2, #0
 800fae4:	4b93      	ldr	r3, [pc, #588]	; (800fd34 <_dtoa_r+0x5fc>)
 800fae6:	4630      	mov	r0, r6
 800fae8:	4639      	mov	r1, r7
 800faea:	f7f1 f80f 	bl	8000b0c <__aeabi_dcmplt>
 800faee:	2800      	cmp	r0, #0
 800faf0:	d07c      	beq.n	800fbec <_dtoa_r+0x4b4>
 800faf2:	f1b9 0f00 	cmp.w	r9, #0
 800faf6:	d079      	beq.n	800fbec <_dtoa_r+0x4b4>
 800faf8:	9b02      	ldr	r3, [sp, #8]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	dd35      	ble.n	800fb6a <_dtoa_r+0x432>
 800fafe:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fb02:	9308      	str	r3, [sp, #32]
 800fb04:	4639      	mov	r1, r7
 800fb06:	2200      	movs	r2, #0
 800fb08:	4b8b      	ldr	r3, [pc, #556]	; (800fd38 <_dtoa_r+0x600>)
 800fb0a:	4630      	mov	r0, r6
 800fb0c:	f7f0 fd8c 	bl	8000628 <__aeabi_dmul>
 800fb10:	e9cd 0100 	strd	r0, r1, [sp]
 800fb14:	9f02      	ldr	r7, [sp, #8]
 800fb16:	3501      	adds	r5, #1
 800fb18:	4628      	mov	r0, r5
 800fb1a:	f7f0 fd1b 	bl	8000554 <__aeabi_i2d>
 800fb1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb22:	f7f0 fd81 	bl	8000628 <__aeabi_dmul>
 800fb26:	2200      	movs	r2, #0
 800fb28:	4b84      	ldr	r3, [pc, #528]	; (800fd3c <_dtoa_r+0x604>)
 800fb2a:	f7f0 fbc7 	bl	80002bc <__adddf3>
 800fb2e:	4605      	mov	r5, r0
 800fb30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800fb34:	2f00      	cmp	r7, #0
 800fb36:	d15d      	bne.n	800fbf4 <_dtoa_r+0x4bc>
 800fb38:	2200      	movs	r2, #0
 800fb3a:	4b81      	ldr	r3, [pc, #516]	; (800fd40 <_dtoa_r+0x608>)
 800fb3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb40:	f7f0 fbba 	bl	80002b8 <__aeabi_dsub>
 800fb44:	462a      	mov	r2, r5
 800fb46:	4633      	mov	r3, r6
 800fb48:	e9cd 0100 	strd	r0, r1, [sp]
 800fb4c:	f7f0 fffc 	bl	8000b48 <__aeabi_dcmpgt>
 800fb50:	2800      	cmp	r0, #0
 800fb52:	f040 8288 	bne.w	8010066 <_dtoa_r+0x92e>
 800fb56:	462a      	mov	r2, r5
 800fb58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fb5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fb60:	f7f0 ffd4 	bl	8000b0c <__aeabi_dcmplt>
 800fb64:	2800      	cmp	r0, #0
 800fb66:	f040 827c 	bne.w	8010062 <_dtoa_r+0x92a>
 800fb6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fb6e:	e9cd 2300 	strd	r2, r3, [sp]
 800fb72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	f2c0 8150 	blt.w	800fe1a <_dtoa_r+0x6e2>
 800fb7a:	f1ba 0f0e 	cmp.w	sl, #14
 800fb7e:	f300 814c 	bgt.w	800fe1a <_dtoa_r+0x6e2>
 800fb82:	4b6a      	ldr	r3, [pc, #424]	; (800fd2c <_dtoa_r+0x5f4>)
 800fb84:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fb88:	ed93 7b00 	vldr	d7, [r3]
 800fb8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fb94:	f280 80d8 	bge.w	800fd48 <_dtoa_r+0x610>
 800fb98:	f1b9 0f00 	cmp.w	r9, #0
 800fb9c:	f300 80d4 	bgt.w	800fd48 <_dtoa_r+0x610>
 800fba0:	f040 825e 	bne.w	8010060 <_dtoa_r+0x928>
 800fba4:	2200      	movs	r2, #0
 800fba6:	4b66      	ldr	r3, [pc, #408]	; (800fd40 <_dtoa_r+0x608>)
 800fba8:	ec51 0b17 	vmov	r0, r1, d7
 800fbac:	f7f0 fd3c 	bl	8000628 <__aeabi_dmul>
 800fbb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbb4:	f7f0 ffbe 	bl	8000b34 <__aeabi_dcmpge>
 800fbb8:	464f      	mov	r7, r9
 800fbba:	464e      	mov	r6, r9
 800fbbc:	2800      	cmp	r0, #0
 800fbbe:	f040 8234 	bne.w	801002a <_dtoa_r+0x8f2>
 800fbc2:	2331      	movs	r3, #49	; 0x31
 800fbc4:	f10b 0501 	add.w	r5, fp, #1
 800fbc8:	f88b 3000 	strb.w	r3, [fp]
 800fbcc:	f10a 0a01 	add.w	sl, sl, #1
 800fbd0:	e22f      	b.n	8010032 <_dtoa_r+0x8fa>
 800fbd2:	07f2      	lsls	r2, r6, #31
 800fbd4:	d505      	bpl.n	800fbe2 <_dtoa_r+0x4aa>
 800fbd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbda:	f7f0 fd25 	bl	8000628 <__aeabi_dmul>
 800fbde:	3501      	adds	r5, #1
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	1076      	asrs	r6, r6, #1
 800fbe4:	3708      	adds	r7, #8
 800fbe6:	e772      	b.n	800face <_dtoa_r+0x396>
 800fbe8:	2502      	movs	r5, #2
 800fbea:	e774      	b.n	800fad6 <_dtoa_r+0x39e>
 800fbec:	f8cd a020 	str.w	sl, [sp, #32]
 800fbf0:	464f      	mov	r7, r9
 800fbf2:	e791      	b.n	800fb18 <_dtoa_r+0x3e0>
 800fbf4:	4b4d      	ldr	r3, [pc, #308]	; (800fd2c <_dtoa_r+0x5f4>)
 800fbf6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fbfa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800fbfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d047      	beq.n	800fc94 <_dtoa_r+0x55c>
 800fc04:	4602      	mov	r2, r0
 800fc06:	460b      	mov	r3, r1
 800fc08:	2000      	movs	r0, #0
 800fc0a:	494e      	ldr	r1, [pc, #312]	; (800fd44 <_dtoa_r+0x60c>)
 800fc0c:	f7f0 fe36 	bl	800087c <__aeabi_ddiv>
 800fc10:	462a      	mov	r2, r5
 800fc12:	4633      	mov	r3, r6
 800fc14:	f7f0 fb50 	bl	80002b8 <__aeabi_dsub>
 800fc18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fc1c:	465d      	mov	r5, fp
 800fc1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc22:	f7f0 ffb1 	bl	8000b88 <__aeabi_d2iz>
 800fc26:	4606      	mov	r6, r0
 800fc28:	f7f0 fc94 	bl	8000554 <__aeabi_i2d>
 800fc2c:	4602      	mov	r2, r0
 800fc2e:	460b      	mov	r3, r1
 800fc30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc34:	f7f0 fb40 	bl	80002b8 <__aeabi_dsub>
 800fc38:	3630      	adds	r6, #48	; 0x30
 800fc3a:	f805 6b01 	strb.w	r6, [r5], #1
 800fc3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fc42:	e9cd 0100 	strd	r0, r1, [sp]
 800fc46:	f7f0 ff61 	bl	8000b0c <__aeabi_dcmplt>
 800fc4a:	2800      	cmp	r0, #0
 800fc4c:	d163      	bne.n	800fd16 <_dtoa_r+0x5de>
 800fc4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc52:	2000      	movs	r0, #0
 800fc54:	4937      	ldr	r1, [pc, #220]	; (800fd34 <_dtoa_r+0x5fc>)
 800fc56:	f7f0 fb2f 	bl	80002b8 <__aeabi_dsub>
 800fc5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fc5e:	f7f0 ff55 	bl	8000b0c <__aeabi_dcmplt>
 800fc62:	2800      	cmp	r0, #0
 800fc64:	f040 80b7 	bne.w	800fdd6 <_dtoa_r+0x69e>
 800fc68:	eba5 030b 	sub.w	r3, r5, fp
 800fc6c:	429f      	cmp	r7, r3
 800fc6e:	f77f af7c 	ble.w	800fb6a <_dtoa_r+0x432>
 800fc72:	2200      	movs	r2, #0
 800fc74:	4b30      	ldr	r3, [pc, #192]	; (800fd38 <_dtoa_r+0x600>)
 800fc76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fc7a:	f7f0 fcd5 	bl	8000628 <__aeabi_dmul>
 800fc7e:	2200      	movs	r2, #0
 800fc80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fc84:	4b2c      	ldr	r3, [pc, #176]	; (800fd38 <_dtoa_r+0x600>)
 800fc86:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fc8a:	f7f0 fccd 	bl	8000628 <__aeabi_dmul>
 800fc8e:	e9cd 0100 	strd	r0, r1, [sp]
 800fc92:	e7c4      	b.n	800fc1e <_dtoa_r+0x4e6>
 800fc94:	462a      	mov	r2, r5
 800fc96:	4633      	mov	r3, r6
 800fc98:	f7f0 fcc6 	bl	8000628 <__aeabi_dmul>
 800fc9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800fca0:	eb0b 0507 	add.w	r5, fp, r7
 800fca4:	465e      	mov	r6, fp
 800fca6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fcaa:	f7f0 ff6d 	bl	8000b88 <__aeabi_d2iz>
 800fcae:	4607      	mov	r7, r0
 800fcb0:	f7f0 fc50 	bl	8000554 <__aeabi_i2d>
 800fcb4:	3730      	adds	r7, #48	; 0x30
 800fcb6:	4602      	mov	r2, r0
 800fcb8:	460b      	mov	r3, r1
 800fcba:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fcbe:	f7f0 fafb 	bl	80002b8 <__aeabi_dsub>
 800fcc2:	f806 7b01 	strb.w	r7, [r6], #1
 800fcc6:	42ae      	cmp	r6, r5
 800fcc8:	e9cd 0100 	strd	r0, r1, [sp]
 800fccc:	f04f 0200 	mov.w	r2, #0
 800fcd0:	d126      	bne.n	800fd20 <_dtoa_r+0x5e8>
 800fcd2:	4b1c      	ldr	r3, [pc, #112]	; (800fd44 <_dtoa_r+0x60c>)
 800fcd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fcd8:	f7f0 faf0 	bl	80002bc <__adddf3>
 800fcdc:	4602      	mov	r2, r0
 800fcde:	460b      	mov	r3, r1
 800fce0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fce4:	f7f0 ff30 	bl	8000b48 <__aeabi_dcmpgt>
 800fce8:	2800      	cmp	r0, #0
 800fcea:	d174      	bne.n	800fdd6 <_dtoa_r+0x69e>
 800fcec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800fcf0:	2000      	movs	r0, #0
 800fcf2:	4914      	ldr	r1, [pc, #80]	; (800fd44 <_dtoa_r+0x60c>)
 800fcf4:	f7f0 fae0 	bl	80002b8 <__aeabi_dsub>
 800fcf8:	4602      	mov	r2, r0
 800fcfa:	460b      	mov	r3, r1
 800fcfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fd00:	f7f0 ff04 	bl	8000b0c <__aeabi_dcmplt>
 800fd04:	2800      	cmp	r0, #0
 800fd06:	f43f af30 	beq.w	800fb6a <_dtoa_r+0x432>
 800fd0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fd0e:	2b30      	cmp	r3, #48	; 0x30
 800fd10:	f105 32ff 	add.w	r2, r5, #4294967295
 800fd14:	d002      	beq.n	800fd1c <_dtoa_r+0x5e4>
 800fd16:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fd1a:	e04a      	b.n	800fdb2 <_dtoa_r+0x67a>
 800fd1c:	4615      	mov	r5, r2
 800fd1e:	e7f4      	b.n	800fd0a <_dtoa_r+0x5d2>
 800fd20:	4b05      	ldr	r3, [pc, #20]	; (800fd38 <_dtoa_r+0x600>)
 800fd22:	f7f0 fc81 	bl	8000628 <__aeabi_dmul>
 800fd26:	e9cd 0100 	strd	r0, r1, [sp]
 800fd2a:	e7bc      	b.n	800fca6 <_dtoa_r+0x56e>
 800fd2c:	08012c80 	.word	0x08012c80
 800fd30:	08012c58 	.word	0x08012c58
 800fd34:	3ff00000 	.word	0x3ff00000
 800fd38:	40240000 	.word	0x40240000
 800fd3c:	401c0000 	.word	0x401c0000
 800fd40:	40140000 	.word	0x40140000
 800fd44:	3fe00000 	.word	0x3fe00000
 800fd48:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fd4c:	465d      	mov	r5, fp
 800fd4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd52:	4630      	mov	r0, r6
 800fd54:	4639      	mov	r1, r7
 800fd56:	f7f0 fd91 	bl	800087c <__aeabi_ddiv>
 800fd5a:	f7f0 ff15 	bl	8000b88 <__aeabi_d2iz>
 800fd5e:	4680      	mov	r8, r0
 800fd60:	f7f0 fbf8 	bl	8000554 <__aeabi_i2d>
 800fd64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd68:	f7f0 fc5e 	bl	8000628 <__aeabi_dmul>
 800fd6c:	4602      	mov	r2, r0
 800fd6e:	460b      	mov	r3, r1
 800fd70:	4630      	mov	r0, r6
 800fd72:	4639      	mov	r1, r7
 800fd74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800fd78:	f7f0 fa9e 	bl	80002b8 <__aeabi_dsub>
 800fd7c:	f805 6b01 	strb.w	r6, [r5], #1
 800fd80:	eba5 060b 	sub.w	r6, r5, fp
 800fd84:	45b1      	cmp	r9, r6
 800fd86:	4602      	mov	r2, r0
 800fd88:	460b      	mov	r3, r1
 800fd8a:	d139      	bne.n	800fe00 <_dtoa_r+0x6c8>
 800fd8c:	f7f0 fa96 	bl	80002bc <__adddf3>
 800fd90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd94:	4606      	mov	r6, r0
 800fd96:	460f      	mov	r7, r1
 800fd98:	f7f0 fed6 	bl	8000b48 <__aeabi_dcmpgt>
 800fd9c:	b9c8      	cbnz	r0, 800fdd2 <_dtoa_r+0x69a>
 800fd9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fda2:	4630      	mov	r0, r6
 800fda4:	4639      	mov	r1, r7
 800fda6:	f7f0 fea7 	bl	8000af8 <__aeabi_dcmpeq>
 800fdaa:	b110      	cbz	r0, 800fdb2 <_dtoa_r+0x67a>
 800fdac:	f018 0f01 	tst.w	r8, #1
 800fdb0:	d10f      	bne.n	800fdd2 <_dtoa_r+0x69a>
 800fdb2:	9904      	ldr	r1, [sp, #16]
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	f001 f808 	bl	8010dca <_Bfree>
 800fdba:	2300      	movs	r3, #0
 800fdbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fdbe:	702b      	strb	r3, [r5, #0]
 800fdc0:	f10a 0301 	add.w	r3, sl, #1
 800fdc4:	6013      	str	r3, [r2, #0]
 800fdc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	f000 8241 	beq.w	8010250 <_dtoa_r+0xb18>
 800fdce:	601d      	str	r5, [r3, #0]
 800fdd0:	e23e      	b.n	8010250 <_dtoa_r+0xb18>
 800fdd2:	f8cd a020 	str.w	sl, [sp, #32]
 800fdd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fdda:	2a39      	cmp	r2, #57	; 0x39
 800fddc:	f105 33ff 	add.w	r3, r5, #4294967295
 800fde0:	d108      	bne.n	800fdf4 <_dtoa_r+0x6bc>
 800fde2:	459b      	cmp	fp, r3
 800fde4:	d10a      	bne.n	800fdfc <_dtoa_r+0x6c4>
 800fde6:	9b08      	ldr	r3, [sp, #32]
 800fde8:	3301      	adds	r3, #1
 800fdea:	9308      	str	r3, [sp, #32]
 800fdec:	2330      	movs	r3, #48	; 0x30
 800fdee:	f88b 3000 	strb.w	r3, [fp]
 800fdf2:	465b      	mov	r3, fp
 800fdf4:	781a      	ldrb	r2, [r3, #0]
 800fdf6:	3201      	adds	r2, #1
 800fdf8:	701a      	strb	r2, [r3, #0]
 800fdfa:	e78c      	b.n	800fd16 <_dtoa_r+0x5de>
 800fdfc:	461d      	mov	r5, r3
 800fdfe:	e7ea      	b.n	800fdd6 <_dtoa_r+0x69e>
 800fe00:	2200      	movs	r2, #0
 800fe02:	4b9b      	ldr	r3, [pc, #620]	; (8010070 <_dtoa_r+0x938>)
 800fe04:	f7f0 fc10 	bl	8000628 <__aeabi_dmul>
 800fe08:	2200      	movs	r2, #0
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	4606      	mov	r6, r0
 800fe0e:	460f      	mov	r7, r1
 800fe10:	f7f0 fe72 	bl	8000af8 <__aeabi_dcmpeq>
 800fe14:	2800      	cmp	r0, #0
 800fe16:	d09a      	beq.n	800fd4e <_dtoa_r+0x616>
 800fe18:	e7cb      	b.n	800fdb2 <_dtoa_r+0x67a>
 800fe1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe1c:	2a00      	cmp	r2, #0
 800fe1e:	f000 808b 	beq.w	800ff38 <_dtoa_r+0x800>
 800fe22:	9a06      	ldr	r2, [sp, #24]
 800fe24:	2a01      	cmp	r2, #1
 800fe26:	dc6e      	bgt.n	800ff06 <_dtoa_r+0x7ce>
 800fe28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800fe2a:	2a00      	cmp	r2, #0
 800fe2c:	d067      	beq.n	800fefe <_dtoa_r+0x7c6>
 800fe2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fe32:	9f07      	ldr	r7, [sp, #28]
 800fe34:	9d05      	ldr	r5, [sp, #20]
 800fe36:	9a05      	ldr	r2, [sp, #20]
 800fe38:	2101      	movs	r1, #1
 800fe3a:	441a      	add	r2, r3
 800fe3c:	4620      	mov	r0, r4
 800fe3e:	9205      	str	r2, [sp, #20]
 800fe40:	4498      	add	r8, r3
 800fe42:	f001 f8a0 	bl	8010f86 <__i2b>
 800fe46:	4606      	mov	r6, r0
 800fe48:	2d00      	cmp	r5, #0
 800fe4a:	dd0c      	ble.n	800fe66 <_dtoa_r+0x72e>
 800fe4c:	f1b8 0f00 	cmp.w	r8, #0
 800fe50:	dd09      	ble.n	800fe66 <_dtoa_r+0x72e>
 800fe52:	4545      	cmp	r5, r8
 800fe54:	9a05      	ldr	r2, [sp, #20]
 800fe56:	462b      	mov	r3, r5
 800fe58:	bfa8      	it	ge
 800fe5a:	4643      	movge	r3, r8
 800fe5c:	1ad2      	subs	r2, r2, r3
 800fe5e:	9205      	str	r2, [sp, #20]
 800fe60:	1aed      	subs	r5, r5, r3
 800fe62:	eba8 0803 	sub.w	r8, r8, r3
 800fe66:	9b07      	ldr	r3, [sp, #28]
 800fe68:	b1eb      	cbz	r3, 800fea6 <_dtoa_r+0x76e>
 800fe6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d067      	beq.n	800ff40 <_dtoa_r+0x808>
 800fe70:	b18f      	cbz	r7, 800fe96 <_dtoa_r+0x75e>
 800fe72:	4631      	mov	r1, r6
 800fe74:	463a      	mov	r2, r7
 800fe76:	4620      	mov	r0, r4
 800fe78:	f001 f924 	bl	80110c4 <__pow5mult>
 800fe7c:	9a04      	ldr	r2, [sp, #16]
 800fe7e:	4601      	mov	r1, r0
 800fe80:	4606      	mov	r6, r0
 800fe82:	4620      	mov	r0, r4
 800fe84:	f001 f888 	bl	8010f98 <__multiply>
 800fe88:	9904      	ldr	r1, [sp, #16]
 800fe8a:	9008      	str	r0, [sp, #32]
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	f000 ff9c 	bl	8010dca <_Bfree>
 800fe92:	9b08      	ldr	r3, [sp, #32]
 800fe94:	9304      	str	r3, [sp, #16]
 800fe96:	9b07      	ldr	r3, [sp, #28]
 800fe98:	1bda      	subs	r2, r3, r7
 800fe9a:	d004      	beq.n	800fea6 <_dtoa_r+0x76e>
 800fe9c:	9904      	ldr	r1, [sp, #16]
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f001 f910 	bl	80110c4 <__pow5mult>
 800fea4:	9004      	str	r0, [sp, #16]
 800fea6:	2101      	movs	r1, #1
 800fea8:	4620      	mov	r0, r4
 800feaa:	f001 f86c 	bl	8010f86 <__i2b>
 800feae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800feb0:	4607      	mov	r7, r0
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	f000 81d0 	beq.w	8010258 <_dtoa_r+0xb20>
 800feb8:	461a      	mov	r2, r3
 800feba:	4601      	mov	r1, r0
 800febc:	4620      	mov	r0, r4
 800febe:	f001 f901 	bl	80110c4 <__pow5mult>
 800fec2:	9b06      	ldr	r3, [sp, #24]
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	4607      	mov	r7, r0
 800fec8:	dc40      	bgt.n	800ff4c <_dtoa_r+0x814>
 800feca:	9b00      	ldr	r3, [sp, #0]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d139      	bne.n	800ff44 <_dtoa_r+0x80c>
 800fed0:	9b01      	ldr	r3, [sp, #4]
 800fed2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d136      	bne.n	800ff48 <_dtoa_r+0x810>
 800feda:	9b01      	ldr	r3, [sp, #4]
 800fedc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fee0:	0d1b      	lsrs	r3, r3, #20
 800fee2:	051b      	lsls	r3, r3, #20
 800fee4:	b12b      	cbz	r3, 800fef2 <_dtoa_r+0x7ba>
 800fee6:	9b05      	ldr	r3, [sp, #20]
 800fee8:	3301      	adds	r3, #1
 800feea:	9305      	str	r3, [sp, #20]
 800feec:	f108 0801 	add.w	r8, r8, #1
 800fef0:	2301      	movs	r3, #1
 800fef2:	9307      	str	r3, [sp, #28]
 800fef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d12a      	bne.n	800ff50 <_dtoa_r+0x818>
 800fefa:	2001      	movs	r0, #1
 800fefc:	e030      	b.n	800ff60 <_dtoa_r+0x828>
 800fefe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ff00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ff04:	e795      	b.n	800fe32 <_dtoa_r+0x6fa>
 800ff06:	9b07      	ldr	r3, [sp, #28]
 800ff08:	f109 37ff 	add.w	r7, r9, #4294967295
 800ff0c:	42bb      	cmp	r3, r7
 800ff0e:	bfbf      	itttt	lt
 800ff10:	9b07      	ldrlt	r3, [sp, #28]
 800ff12:	9707      	strlt	r7, [sp, #28]
 800ff14:	1afa      	sublt	r2, r7, r3
 800ff16:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ff18:	bfbb      	ittet	lt
 800ff1a:	189b      	addlt	r3, r3, r2
 800ff1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ff1e:	1bdf      	subge	r7, r3, r7
 800ff20:	2700      	movlt	r7, #0
 800ff22:	f1b9 0f00 	cmp.w	r9, #0
 800ff26:	bfb5      	itete	lt
 800ff28:	9b05      	ldrlt	r3, [sp, #20]
 800ff2a:	9d05      	ldrge	r5, [sp, #20]
 800ff2c:	eba3 0509 	sublt.w	r5, r3, r9
 800ff30:	464b      	movge	r3, r9
 800ff32:	bfb8      	it	lt
 800ff34:	2300      	movlt	r3, #0
 800ff36:	e77e      	b.n	800fe36 <_dtoa_r+0x6fe>
 800ff38:	9f07      	ldr	r7, [sp, #28]
 800ff3a:	9d05      	ldr	r5, [sp, #20]
 800ff3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ff3e:	e783      	b.n	800fe48 <_dtoa_r+0x710>
 800ff40:	9a07      	ldr	r2, [sp, #28]
 800ff42:	e7ab      	b.n	800fe9c <_dtoa_r+0x764>
 800ff44:	2300      	movs	r3, #0
 800ff46:	e7d4      	b.n	800fef2 <_dtoa_r+0x7ba>
 800ff48:	9b00      	ldr	r3, [sp, #0]
 800ff4a:	e7d2      	b.n	800fef2 <_dtoa_r+0x7ba>
 800ff4c:	2300      	movs	r3, #0
 800ff4e:	9307      	str	r3, [sp, #28]
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ff56:	6918      	ldr	r0, [r3, #16]
 800ff58:	f000 ffc7 	bl	8010eea <__hi0bits>
 800ff5c:	f1c0 0020 	rsb	r0, r0, #32
 800ff60:	4440      	add	r0, r8
 800ff62:	f010 001f 	ands.w	r0, r0, #31
 800ff66:	d047      	beq.n	800fff8 <_dtoa_r+0x8c0>
 800ff68:	f1c0 0320 	rsb	r3, r0, #32
 800ff6c:	2b04      	cmp	r3, #4
 800ff6e:	dd3b      	ble.n	800ffe8 <_dtoa_r+0x8b0>
 800ff70:	9b05      	ldr	r3, [sp, #20]
 800ff72:	f1c0 001c 	rsb	r0, r0, #28
 800ff76:	4403      	add	r3, r0
 800ff78:	9305      	str	r3, [sp, #20]
 800ff7a:	4405      	add	r5, r0
 800ff7c:	4480      	add	r8, r0
 800ff7e:	9b05      	ldr	r3, [sp, #20]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	dd05      	ble.n	800ff90 <_dtoa_r+0x858>
 800ff84:	461a      	mov	r2, r3
 800ff86:	9904      	ldr	r1, [sp, #16]
 800ff88:	4620      	mov	r0, r4
 800ff8a:	f001 f8e9 	bl	8011160 <__lshift>
 800ff8e:	9004      	str	r0, [sp, #16]
 800ff90:	f1b8 0f00 	cmp.w	r8, #0
 800ff94:	dd05      	ble.n	800ffa2 <_dtoa_r+0x86a>
 800ff96:	4639      	mov	r1, r7
 800ff98:	4642      	mov	r2, r8
 800ff9a:	4620      	mov	r0, r4
 800ff9c:	f001 f8e0 	bl	8011160 <__lshift>
 800ffa0:	4607      	mov	r7, r0
 800ffa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ffa4:	b353      	cbz	r3, 800fffc <_dtoa_r+0x8c4>
 800ffa6:	4639      	mov	r1, r7
 800ffa8:	9804      	ldr	r0, [sp, #16]
 800ffaa:	f001 f92d 	bl	8011208 <__mcmp>
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	da24      	bge.n	800fffc <_dtoa_r+0x8c4>
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	220a      	movs	r2, #10
 800ffb6:	9904      	ldr	r1, [sp, #16]
 800ffb8:	4620      	mov	r0, r4
 800ffba:	f000 ff1d 	bl	8010df8 <__multadd>
 800ffbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffc0:	9004      	str	r0, [sp, #16]
 800ffc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	f000 814d 	beq.w	8010266 <_dtoa_r+0xb2e>
 800ffcc:	2300      	movs	r3, #0
 800ffce:	4631      	mov	r1, r6
 800ffd0:	220a      	movs	r2, #10
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	f000 ff10 	bl	8010df8 <__multadd>
 800ffd8:	9b02      	ldr	r3, [sp, #8]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	4606      	mov	r6, r0
 800ffde:	dc4f      	bgt.n	8010080 <_dtoa_r+0x948>
 800ffe0:	9b06      	ldr	r3, [sp, #24]
 800ffe2:	2b02      	cmp	r3, #2
 800ffe4:	dd4c      	ble.n	8010080 <_dtoa_r+0x948>
 800ffe6:	e011      	b.n	801000c <_dtoa_r+0x8d4>
 800ffe8:	d0c9      	beq.n	800ff7e <_dtoa_r+0x846>
 800ffea:	9a05      	ldr	r2, [sp, #20]
 800ffec:	331c      	adds	r3, #28
 800ffee:	441a      	add	r2, r3
 800fff0:	9205      	str	r2, [sp, #20]
 800fff2:	441d      	add	r5, r3
 800fff4:	4498      	add	r8, r3
 800fff6:	e7c2      	b.n	800ff7e <_dtoa_r+0x846>
 800fff8:	4603      	mov	r3, r0
 800fffa:	e7f6      	b.n	800ffea <_dtoa_r+0x8b2>
 800fffc:	f1b9 0f00 	cmp.w	r9, #0
 8010000:	dc38      	bgt.n	8010074 <_dtoa_r+0x93c>
 8010002:	9b06      	ldr	r3, [sp, #24]
 8010004:	2b02      	cmp	r3, #2
 8010006:	dd35      	ble.n	8010074 <_dtoa_r+0x93c>
 8010008:	f8cd 9008 	str.w	r9, [sp, #8]
 801000c:	9b02      	ldr	r3, [sp, #8]
 801000e:	b963      	cbnz	r3, 801002a <_dtoa_r+0x8f2>
 8010010:	4639      	mov	r1, r7
 8010012:	2205      	movs	r2, #5
 8010014:	4620      	mov	r0, r4
 8010016:	f000 feef 	bl	8010df8 <__multadd>
 801001a:	4601      	mov	r1, r0
 801001c:	4607      	mov	r7, r0
 801001e:	9804      	ldr	r0, [sp, #16]
 8010020:	f001 f8f2 	bl	8011208 <__mcmp>
 8010024:	2800      	cmp	r0, #0
 8010026:	f73f adcc 	bgt.w	800fbc2 <_dtoa_r+0x48a>
 801002a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801002c:	465d      	mov	r5, fp
 801002e:	ea6f 0a03 	mvn.w	sl, r3
 8010032:	f04f 0900 	mov.w	r9, #0
 8010036:	4639      	mov	r1, r7
 8010038:	4620      	mov	r0, r4
 801003a:	f000 fec6 	bl	8010dca <_Bfree>
 801003e:	2e00      	cmp	r6, #0
 8010040:	f43f aeb7 	beq.w	800fdb2 <_dtoa_r+0x67a>
 8010044:	f1b9 0f00 	cmp.w	r9, #0
 8010048:	d005      	beq.n	8010056 <_dtoa_r+0x91e>
 801004a:	45b1      	cmp	r9, r6
 801004c:	d003      	beq.n	8010056 <_dtoa_r+0x91e>
 801004e:	4649      	mov	r1, r9
 8010050:	4620      	mov	r0, r4
 8010052:	f000 feba 	bl	8010dca <_Bfree>
 8010056:	4631      	mov	r1, r6
 8010058:	4620      	mov	r0, r4
 801005a:	f000 feb6 	bl	8010dca <_Bfree>
 801005e:	e6a8      	b.n	800fdb2 <_dtoa_r+0x67a>
 8010060:	2700      	movs	r7, #0
 8010062:	463e      	mov	r6, r7
 8010064:	e7e1      	b.n	801002a <_dtoa_r+0x8f2>
 8010066:	f8dd a020 	ldr.w	sl, [sp, #32]
 801006a:	463e      	mov	r6, r7
 801006c:	e5a9      	b.n	800fbc2 <_dtoa_r+0x48a>
 801006e:	bf00      	nop
 8010070:	40240000 	.word	0x40240000
 8010074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010076:	f8cd 9008 	str.w	r9, [sp, #8]
 801007a:	2b00      	cmp	r3, #0
 801007c:	f000 80fa 	beq.w	8010274 <_dtoa_r+0xb3c>
 8010080:	2d00      	cmp	r5, #0
 8010082:	dd05      	ble.n	8010090 <_dtoa_r+0x958>
 8010084:	4631      	mov	r1, r6
 8010086:	462a      	mov	r2, r5
 8010088:	4620      	mov	r0, r4
 801008a:	f001 f869 	bl	8011160 <__lshift>
 801008e:	4606      	mov	r6, r0
 8010090:	9b07      	ldr	r3, [sp, #28]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d04c      	beq.n	8010130 <_dtoa_r+0x9f8>
 8010096:	6871      	ldr	r1, [r6, #4]
 8010098:	4620      	mov	r0, r4
 801009a:	f000 fe62 	bl	8010d62 <_Balloc>
 801009e:	6932      	ldr	r2, [r6, #16]
 80100a0:	3202      	adds	r2, #2
 80100a2:	4605      	mov	r5, r0
 80100a4:	0092      	lsls	r2, r2, #2
 80100a6:	f106 010c 	add.w	r1, r6, #12
 80100aa:	300c      	adds	r0, #12
 80100ac:	f000 fe4e 	bl	8010d4c <memcpy>
 80100b0:	2201      	movs	r2, #1
 80100b2:	4629      	mov	r1, r5
 80100b4:	4620      	mov	r0, r4
 80100b6:	f001 f853 	bl	8011160 <__lshift>
 80100ba:	9b00      	ldr	r3, [sp, #0]
 80100bc:	f8cd b014 	str.w	fp, [sp, #20]
 80100c0:	f003 0301 	and.w	r3, r3, #1
 80100c4:	46b1      	mov	r9, r6
 80100c6:	9307      	str	r3, [sp, #28]
 80100c8:	4606      	mov	r6, r0
 80100ca:	4639      	mov	r1, r7
 80100cc:	9804      	ldr	r0, [sp, #16]
 80100ce:	f7ff faa7 	bl	800f620 <quorem>
 80100d2:	4649      	mov	r1, r9
 80100d4:	4605      	mov	r5, r0
 80100d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80100da:	9804      	ldr	r0, [sp, #16]
 80100dc:	f001 f894 	bl	8011208 <__mcmp>
 80100e0:	4632      	mov	r2, r6
 80100e2:	9000      	str	r0, [sp, #0]
 80100e4:	4639      	mov	r1, r7
 80100e6:	4620      	mov	r0, r4
 80100e8:	f001 f8a8 	bl	801123c <__mdiff>
 80100ec:	68c3      	ldr	r3, [r0, #12]
 80100ee:	4602      	mov	r2, r0
 80100f0:	bb03      	cbnz	r3, 8010134 <_dtoa_r+0x9fc>
 80100f2:	4601      	mov	r1, r0
 80100f4:	9008      	str	r0, [sp, #32]
 80100f6:	9804      	ldr	r0, [sp, #16]
 80100f8:	f001 f886 	bl	8011208 <__mcmp>
 80100fc:	9a08      	ldr	r2, [sp, #32]
 80100fe:	4603      	mov	r3, r0
 8010100:	4611      	mov	r1, r2
 8010102:	4620      	mov	r0, r4
 8010104:	9308      	str	r3, [sp, #32]
 8010106:	f000 fe60 	bl	8010dca <_Bfree>
 801010a:	9b08      	ldr	r3, [sp, #32]
 801010c:	b9a3      	cbnz	r3, 8010138 <_dtoa_r+0xa00>
 801010e:	9a06      	ldr	r2, [sp, #24]
 8010110:	b992      	cbnz	r2, 8010138 <_dtoa_r+0xa00>
 8010112:	9a07      	ldr	r2, [sp, #28]
 8010114:	b982      	cbnz	r2, 8010138 <_dtoa_r+0xa00>
 8010116:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801011a:	d029      	beq.n	8010170 <_dtoa_r+0xa38>
 801011c:	9b00      	ldr	r3, [sp, #0]
 801011e:	2b00      	cmp	r3, #0
 8010120:	dd01      	ble.n	8010126 <_dtoa_r+0x9ee>
 8010122:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8010126:	9b05      	ldr	r3, [sp, #20]
 8010128:	1c5d      	adds	r5, r3, #1
 801012a:	f883 8000 	strb.w	r8, [r3]
 801012e:	e782      	b.n	8010036 <_dtoa_r+0x8fe>
 8010130:	4630      	mov	r0, r6
 8010132:	e7c2      	b.n	80100ba <_dtoa_r+0x982>
 8010134:	2301      	movs	r3, #1
 8010136:	e7e3      	b.n	8010100 <_dtoa_r+0x9c8>
 8010138:	9a00      	ldr	r2, [sp, #0]
 801013a:	2a00      	cmp	r2, #0
 801013c:	db04      	blt.n	8010148 <_dtoa_r+0xa10>
 801013e:	d125      	bne.n	801018c <_dtoa_r+0xa54>
 8010140:	9a06      	ldr	r2, [sp, #24]
 8010142:	bb1a      	cbnz	r2, 801018c <_dtoa_r+0xa54>
 8010144:	9a07      	ldr	r2, [sp, #28]
 8010146:	bb0a      	cbnz	r2, 801018c <_dtoa_r+0xa54>
 8010148:	2b00      	cmp	r3, #0
 801014a:	ddec      	ble.n	8010126 <_dtoa_r+0x9ee>
 801014c:	2201      	movs	r2, #1
 801014e:	9904      	ldr	r1, [sp, #16]
 8010150:	4620      	mov	r0, r4
 8010152:	f001 f805 	bl	8011160 <__lshift>
 8010156:	4639      	mov	r1, r7
 8010158:	9004      	str	r0, [sp, #16]
 801015a:	f001 f855 	bl	8011208 <__mcmp>
 801015e:	2800      	cmp	r0, #0
 8010160:	dc03      	bgt.n	801016a <_dtoa_r+0xa32>
 8010162:	d1e0      	bne.n	8010126 <_dtoa_r+0x9ee>
 8010164:	f018 0f01 	tst.w	r8, #1
 8010168:	d0dd      	beq.n	8010126 <_dtoa_r+0x9ee>
 801016a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801016e:	d1d8      	bne.n	8010122 <_dtoa_r+0x9ea>
 8010170:	9b05      	ldr	r3, [sp, #20]
 8010172:	9a05      	ldr	r2, [sp, #20]
 8010174:	1c5d      	adds	r5, r3, #1
 8010176:	2339      	movs	r3, #57	; 0x39
 8010178:	7013      	strb	r3, [r2, #0]
 801017a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801017e:	2b39      	cmp	r3, #57	; 0x39
 8010180:	f105 32ff 	add.w	r2, r5, #4294967295
 8010184:	d04f      	beq.n	8010226 <_dtoa_r+0xaee>
 8010186:	3301      	adds	r3, #1
 8010188:	7013      	strb	r3, [r2, #0]
 801018a:	e754      	b.n	8010036 <_dtoa_r+0x8fe>
 801018c:	9a05      	ldr	r2, [sp, #20]
 801018e:	2b00      	cmp	r3, #0
 8010190:	f102 0501 	add.w	r5, r2, #1
 8010194:	dd06      	ble.n	80101a4 <_dtoa_r+0xa6c>
 8010196:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801019a:	d0e9      	beq.n	8010170 <_dtoa_r+0xa38>
 801019c:	f108 0801 	add.w	r8, r8, #1
 80101a0:	9b05      	ldr	r3, [sp, #20]
 80101a2:	e7c2      	b.n	801012a <_dtoa_r+0x9f2>
 80101a4:	9a02      	ldr	r2, [sp, #8]
 80101a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80101aa:	eba5 030b 	sub.w	r3, r5, fp
 80101ae:	4293      	cmp	r3, r2
 80101b0:	d021      	beq.n	80101f6 <_dtoa_r+0xabe>
 80101b2:	2300      	movs	r3, #0
 80101b4:	220a      	movs	r2, #10
 80101b6:	9904      	ldr	r1, [sp, #16]
 80101b8:	4620      	mov	r0, r4
 80101ba:	f000 fe1d 	bl	8010df8 <__multadd>
 80101be:	45b1      	cmp	r9, r6
 80101c0:	9004      	str	r0, [sp, #16]
 80101c2:	f04f 0300 	mov.w	r3, #0
 80101c6:	f04f 020a 	mov.w	r2, #10
 80101ca:	4649      	mov	r1, r9
 80101cc:	4620      	mov	r0, r4
 80101ce:	d105      	bne.n	80101dc <_dtoa_r+0xaa4>
 80101d0:	f000 fe12 	bl	8010df8 <__multadd>
 80101d4:	4681      	mov	r9, r0
 80101d6:	4606      	mov	r6, r0
 80101d8:	9505      	str	r5, [sp, #20]
 80101da:	e776      	b.n	80100ca <_dtoa_r+0x992>
 80101dc:	f000 fe0c 	bl	8010df8 <__multadd>
 80101e0:	4631      	mov	r1, r6
 80101e2:	4681      	mov	r9, r0
 80101e4:	2300      	movs	r3, #0
 80101e6:	220a      	movs	r2, #10
 80101e8:	4620      	mov	r0, r4
 80101ea:	f000 fe05 	bl	8010df8 <__multadd>
 80101ee:	4606      	mov	r6, r0
 80101f0:	e7f2      	b.n	80101d8 <_dtoa_r+0xaa0>
 80101f2:	f04f 0900 	mov.w	r9, #0
 80101f6:	2201      	movs	r2, #1
 80101f8:	9904      	ldr	r1, [sp, #16]
 80101fa:	4620      	mov	r0, r4
 80101fc:	f000 ffb0 	bl	8011160 <__lshift>
 8010200:	4639      	mov	r1, r7
 8010202:	9004      	str	r0, [sp, #16]
 8010204:	f001 f800 	bl	8011208 <__mcmp>
 8010208:	2800      	cmp	r0, #0
 801020a:	dcb6      	bgt.n	801017a <_dtoa_r+0xa42>
 801020c:	d102      	bne.n	8010214 <_dtoa_r+0xadc>
 801020e:	f018 0f01 	tst.w	r8, #1
 8010212:	d1b2      	bne.n	801017a <_dtoa_r+0xa42>
 8010214:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010218:	2b30      	cmp	r3, #48	; 0x30
 801021a:	f105 32ff 	add.w	r2, r5, #4294967295
 801021e:	f47f af0a 	bne.w	8010036 <_dtoa_r+0x8fe>
 8010222:	4615      	mov	r5, r2
 8010224:	e7f6      	b.n	8010214 <_dtoa_r+0xadc>
 8010226:	4593      	cmp	fp, r2
 8010228:	d105      	bne.n	8010236 <_dtoa_r+0xafe>
 801022a:	2331      	movs	r3, #49	; 0x31
 801022c:	f10a 0a01 	add.w	sl, sl, #1
 8010230:	f88b 3000 	strb.w	r3, [fp]
 8010234:	e6ff      	b.n	8010036 <_dtoa_r+0x8fe>
 8010236:	4615      	mov	r5, r2
 8010238:	e79f      	b.n	801017a <_dtoa_r+0xa42>
 801023a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80102a0 <_dtoa_r+0xb68>
 801023e:	e007      	b.n	8010250 <_dtoa_r+0xb18>
 8010240:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010242:	f8df b060 	ldr.w	fp, [pc, #96]	; 80102a4 <_dtoa_r+0xb6c>
 8010246:	b11b      	cbz	r3, 8010250 <_dtoa_r+0xb18>
 8010248:	f10b 0308 	add.w	r3, fp, #8
 801024c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801024e:	6013      	str	r3, [r2, #0]
 8010250:	4658      	mov	r0, fp
 8010252:	b017      	add	sp, #92	; 0x5c
 8010254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010258:	9b06      	ldr	r3, [sp, #24]
 801025a:	2b01      	cmp	r3, #1
 801025c:	f77f ae35 	ble.w	800feca <_dtoa_r+0x792>
 8010260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010262:	9307      	str	r3, [sp, #28]
 8010264:	e649      	b.n	800fefa <_dtoa_r+0x7c2>
 8010266:	9b02      	ldr	r3, [sp, #8]
 8010268:	2b00      	cmp	r3, #0
 801026a:	dc03      	bgt.n	8010274 <_dtoa_r+0xb3c>
 801026c:	9b06      	ldr	r3, [sp, #24]
 801026e:	2b02      	cmp	r3, #2
 8010270:	f73f aecc 	bgt.w	801000c <_dtoa_r+0x8d4>
 8010274:	465d      	mov	r5, fp
 8010276:	4639      	mov	r1, r7
 8010278:	9804      	ldr	r0, [sp, #16]
 801027a:	f7ff f9d1 	bl	800f620 <quorem>
 801027e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010282:	f805 8b01 	strb.w	r8, [r5], #1
 8010286:	9a02      	ldr	r2, [sp, #8]
 8010288:	eba5 030b 	sub.w	r3, r5, fp
 801028c:	429a      	cmp	r2, r3
 801028e:	ddb0      	ble.n	80101f2 <_dtoa_r+0xaba>
 8010290:	2300      	movs	r3, #0
 8010292:	220a      	movs	r2, #10
 8010294:	9904      	ldr	r1, [sp, #16]
 8010296:	4620      	mov	r0, r4
 8010298:	f000 fdae 	bl	8010df8 <__multadd>
 801029c:	9004      	str	r0, [sp, #16]
 801029e:	e7ea      	b.n	8010276 <_dtoa_r+0xb3e>
 80102a0:	08012d7b 	.word	0x08012d7b
 80102a4:	08012bd8 	.word	0x08012bd8

080102a8 <__sflush_r>:
 80102a8:	898a      	ldrh	r2, [r1, #12]
 80102aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102ae:	4605      	mov	r5, r0
 80102b0:	0710      	lsls	r0, r2, #28
 80102b2:	460c      	mov	r4, r1
 80102b4:	d458      	bmi.n	8010368 <__sflush_r+0xc0>
 80102b6:	684b      	ldr	r3, [r1, #4]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	dc05      	bgt.n	80102c8 <__sflush_r+0x20>
 80102bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80102be:	2b00      	cmp	r3, #0
 80102c0:	dc02      	bgt.n	80102c8 <__sflush_r+0x20>
 80102c2:	2000      	movs	r0, #0
 80102c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80102ca:	2e00      	cmp	r6, #0
 80102cc:	d0f9      	beq.n	80102c2 <__sflush_r+0x1a>
 80102ce:	2300      	movs	r3, #0
 80102d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80102d4:	682f      	ldr	r7, [r5, #0]
 80102d6:	6a21      	ldr	r1, [r4, #32]
 80102d8:	602b      	str	r3, [r5, #0]
 80102da:	d032      	beq.n	8010342 <__sflush_r+0x9a>
 80102dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80102de:	89a3      	ldrh	r3, [r4, #12]
 80102e0:	075a      	lsls	r2, r3, #29
 80102e2:	d505      	bpl.n	80102f0 <__sflush_r+0x48>
 80102e4:	6863      	ldr	r3, [r4, #4]
 80102e6:	1ac0      	subs	r0, r0, r3
 80102e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80102ea:	b10b      	cbz	r3, 80102f0 <__sflush_r+0x48>
 80102ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80102ee:	1ac0      	subs	r0, r0, r3
 80102f0:	2300      	movs	r3, #0
 80102f2:	4602      	mov	r2, r0
 80102f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80102f6:	6a21      	ldr	r1, [r4, #32]
 80102f8:	4628      	mov	r0, r5
 80102fa:	47b0      	blx	r6
 80102fc:	1c43      	adds	r3, r0, #1
 80102fe:	89a3      	ldrh	r3, [r4, #12]
 8010300:	d106      	bne.n	8010310 <__sflush_r+0x68>
 8010302:	6829      	ldr	r1, [r5, #0]
 8010304:	291d      	cmp	r1, #29
 8010306:	d848      	bhi.n	801039a <__sflush_r+0xf2>
 8010308:	4a29      	ldr	r2, [pc, #164]	; (80103b0 <__sflush_r+0x108>)
 801030a:	40ca      	lsrs	r2, r1
 801030c:	07d6      	lsls	r6, r2, #31
 801030e:	d544      	bpl.n	801039a <__sflush_r+0xf2>
 8010310:	2200      	movs	r2, #0
 8010312:	6062      	str	r2, [r4, #4]
 8010314:	04d9      	lsls	r1, r3, #19
 8010316:	6922      	ldr	r2, [r4, #16]
 8010318:	6022      	str	r2, [r4, #0]
 801031a:	d504      	bpl.n	8010326 <__sflush_r+0x7e>
 801031c:	1c42      	adds	r2, r0, #1
 801031e:	d101      	bne.n	8010324 <__sflush_r+0x7c>
 8010320:	682b      	ldr	r3, [r5, #0]
 8010322:	b903      	cbnz	r3, 8010326 <__sflush_r+0x7e>
 8010324:	6560      	str	r0, [r4, #84]	; 0x54
 8010326:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010328:	602f      	str	r7, [r5, #0]
 801032a:	2900      	cmp	r1, #0
 801032c:	d0c9      	beq.n	80102c2 <__sflush_r+0x1a>
 801032e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010332:	4299      	cmp	r1, r3
 8010334:	d002      	beq.n	801033c <__sflush_r+0x94>
 8010336:	4628      	mov	r0, r5
 8010338:	f001 f920 	bl	801157c <_free_r>
 801033c:	2000      	movs	r0, #0
 801033e:	6360      	str	r0, [r4, #52]	; 0x34
 8010340:	e7c0      	b.n	80102c4 <__sflush_r+0x1c>
 8010342:	2301      	movs	r3, #1
 8010344:	4628      	mov	r0, r5
 8010346:	47b0      	blx	r6
 8010348:	1c41      	adds	r1, r0, #1
 801034a:	d1c8      	bne.n	80102de <__sflush_r+0x36>
 801034c:	682b      	ldr	r3, [r5, #0]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d0c5      	beq.n	80102de <__sflush_r+0x36>
 8010352:	2b1d      	cmp	r3, #29
 8010354:	d001      	beq.n	801035a <__sflush_r+0xb2>
 8010356:	2b16      	cmp	r3, #22
 8010358:	d101      	bne.n	801035e <__sflush_r+0xb6>
 801035a:	602f      	str	r7, [r5, #0]
 801035c:	e7b1      	b.n	80102c2 <__sflush_r+0x1a>
 801035e:	89a3      	ldrh	r3, [r4, #12]
 8010360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010364:	81a3      	strh	r3, [r4, #12]
 8010366:	e7ad      	b.n	80102c4 <__sflush_r+0x1c>
 8010368:	690f      	ldr	r7, [r1, #16]
 801036a:	2f00      	cmp	r7, #0
 801036c:	d0a9      	beq.n	80102c2 <__sflush_r+0x1a>
 801036e:	0793      	lsls	r3, r2, #30
 8010370:	680e      	ldr	r6, [r1, #0]
 8010372:	bf08      	it	eq
 8010374:	694b      	ldreq	r3, [r1, #20]
 8010376:	600f      	str	r7, [r1, #0]
 8010378:	bf18      	it	ne
 801037a:	2300      	movne	r3, #0
 801037c:	eba6 0807 	sub.w	r8, r6, r7
 8010380:	608b      	str	r3, [r1, #8]
 8010382:	f1b8 0f00 	cmp.w	r8, #0
 8010386:	dd9c      	ble.n	80102c2 <__sflush_r+0x1a>
 8010388:	4643      	mov	r3, r8
 801038a:	463a      	mov	r2, r7
 801038c:	6a21      	ldr	r1, [r4, #32]
 801038e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010390:	4628      	mov	r0, r5
 8010392:	47b0      	blx	r6
 8010394:	2800      	cmp	r0, #0
 8010396:	dc06      	bgt.n	80103a6 <__sflush_r+0xfe>
 8010398:	89a3      	ldrh	r3, [r4, #12]
 801039a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801039e:	81a3      	strh	r3, [r4, #12]
 80103a0:	f04f 30ff 	mov.w	r0, #4294967295
 80103a4:	e78e      	b.n	80102c4 <__sflush_r+0x1c>
 80103a6:	4407      	add	r7, r0
 80103a8:	eba8 0800 	sub.w	r8, r8, r0
 80103ac:	e7e9      	b.n	8010382 <__sflush_r+0xda>
 80103ae:	bf00      	nop
 80103b0:	20400001 	.word	0x20400001

080103b4 <_fflush_r>:
 80103b4:	b538      	push	{r3, r4, r5, lr}
 80103b6:	690b      	ldr	r3, [r1, #16]
 80103b8:	4605      	mov	r5, r0
 80103ba:	460c      	mov	r4, r1
 80103bc:	b1db      	cbz	r3, 80103f6 <_fflush_r+0x42>
 80103be:	b118      	cbz	r0, 80103c8 <_fflush_r+0x14>
 80103c0:	6983      	ldr	r3, [r0, #24]
 80103c2:	b90b      	cbnz	r3, 80103c8 <_fflush_r+0x14>
 80103c4:	f000 f860 	bl	8010488 <__sinit>
 80103c8:	4b0c      	ldr	r3, [pc, #48]	; (80103fc <_fflush_r+0x48>)
 80103ca:	429c      	cmp	r4, r3
 80103cc:	d109      	bne.n	80103e2 <_fflush_r+0x2e>
 80103ce:	686c      	ldr	r4, [r5, #4]
 80103d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103d4:	b17b      	cbz	r3, 80103f6 <_fflush_r+0x42>
 80103d6:	4621      	mov	r1, r4
 80103d8:	4628      	mov	r0, r5
 80103da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103de:	f7ff bf63 	b.w	80102a8 <__sflush_r>
 80103e2:	4b07      	ldr	r3, [pc, #28]	; (8010400 <_fflush_r+0x4c>)
 80103e4:	429c      	cmp	r4, r3
 80103e6:	d101      	bne.n	80103ec <_fflush_r+0x38>
 80103e8:	68ac      	ldr	r4, [r5, #8]
 80103ea:	e7f1      	b.n	80103d0 <_fflush_r+0x1c>
 80103ec:	4b05      	ldr	r3, [pc, #20]	; (8010404 <_fflush_r+0x50>)
 80103ee:	429c      	cmp	r4, r3
 80103f0:	bf08      	it	eq
 80103f2:	68ec      	ldreq	r4, [r5, #12]
 80103f4:	e7ec      	b.n	80103d0 <_fflush_r+0x1c>
 80103f6:	2000      	movs	r0, #0
 80103f8:	bd38      	pop	{r3, r4, r5, pc}
 80103fa:	bf00      	nop
 80103fc:	08012c08 	.word	0x08012c08
 8010400:	08012c28 	.word	0x08012c28
 8010404:	08012be8 	.word	0x08012be8

08010408 <std>:
 8010408:	2300      	movs	r3, #0
 801040a:	b510      	push	{r4, lr}
 801040c:	4604      	mov	r4, r0
 801040e:	e9c0 3300 	strd	r3, r3, [r0]
 8010412:	6083      	str	r3, [r0, #8]
 8010414:	8181      	strh	r1, [r0, #12]
 8010416:	6643      	str	r3, [r0, #100]	; 0x64
 8010418:	81c2      	strh	r2, [r0, #14]
 801041a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801041e:	6183      	str	r3, [r0, #24]
 8010420:	4619      	mov	r1, r3
 8010422:	2208      	movs	r2, #8
 8010424:	305c      	adds	r0, #92	; 0x5c
 8010426:	f7fd f9b5 	bl	800d794 <memset>
 801042a:	4b05      	ldr	r3, [pc, #20]	; (8010440 <std+0x38>)
 801042c:	6263      	str	r3, [r4, #36]	; 0x24
 801042e:	4b05      	ldr	r3, [pc, #20]	; (8010444 <std+0x3c>)
 8010430:	62a3      	str	r3, [r4, #40]	; 0x28
 8010432:	4b05      	ldr	r3, [pc, #20]	; (8010448 <std+0x40>)
 8010434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010436:	4b05      	ldr	r3, [pc, #20]	; (801044c <std+0x44>)
 8010438:	6224      	str	r4, [r4, #32]
 801043a:	6323      	str	r3, [r4, #48]	; 0x30
 801043c:	bd10      	pop	{r4, pc}
 801043e:	bf00      	nop
 8010440:	0800e621 	.word	0x0800e621
 8010444:	0800e647 	.word	0x0800e647
 8010448:	0800e67f 	.word	0x0800e67f
 801044c:	0800e6a3 	.word	0x0800e6a3

08010450 <_cleanup_r>:
 8010450:	4901      	ldr	r1, [pc, #4]	; (8010458 <_cleanup_r+0x8>)
 8010452:	f000 b885 	b.w	8010560 <_fwalk_reent>
 8010456:	bf00      	nop
 8010458:	080103b5 	.word	0x080103b5

0801045c <__sfmoreglue>:
 801045c:	b570      	push	{r4, r5, r6, lr}
 801045e:	1e4a      	subs	r2, r1, #1
 8010460:	2568      	movs	r5, #104	; 0x68
 8010462:	4355      	muls	r5, r2
 8010464:	460e      	mov	r6, r1
 8010466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801046a:	f001 f8d5 	bl	8011618 <_malloc_r>
 801046e:	4604      	mov	r4, r0
 8010470:	b140      	cbz	r0, 8010484 <__sfmoreglue+0x28>
 8010472:	2100      	movs	r1, #0
 8010474:	e9c0 1600 	strd	r1, r6, [r0]
 8010478:	300c      	adds	r0, #12
 801047a:	60a0      	str	r0, [r4, #8]
 801047c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010480:	f7fd f988 	bl	800d794 <memset>
 8010484:	4620      	mov	r0, r4
 8010486:	bd70      	pop	{r4, r5, r6, pc}

08010488 <__sinit>:
 8010488:	6983      	ldr	r3, [r0, #24]
 801048a:	b510      	push	{r4, lr}
 801048c:	4604      	mov	r4, r0
 801048e:	bb33      	cbnz	r3, 80104de <__sinit+0x56>
 8010490:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010494:	6503      	str	r3, [r0, #80]	; 0x50
 8010496:	4b12      	ldr	r3, [pc, #72]	; (80104e0 <__sinit+0x58>)
 8010498:	4a12      	ldr	r2, [pc, #72]	; (80104e4 <__sinit+0x5c>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	6282      	str	r2, [r0, #40]	; 0x28
 801049e:	4298      	cmp	r0, r3
 80104a0:	bf04      	itt	eq
 80104a2:	2301      	moveq	r3, #1
 80104a4:	6183      	streq	r3, [r0, #24]
 80104a6:	f000 f81f 	bl	80104e8 <__sfp>
 80104aa:	6060      	str	r0, [r4, #4]
 80104ac:	4620      	mov	r0, r4
 80104ae:	f000 f81b 	bl	80104e8 <__sfp>
 80104b2:	60a0      	str	r0, [r4, #8]
 80104b4:	4620      	mov	r0, r4
 80104b6:	f000 f817 	bl	80104e8 <__sfp>
 80104ba:	2200      	movs	r2, #0
 80104bc:	60e0      	str	r0, [r4, #12]
 80104be:	2104      	movs	r1, #4
 80104c0:	6860      	ldr	r0, [r4, #4]
 80104c2:	f7ff ffa1 	bl	8010408 <std>
 80104c6:	2201      	movs	r2, #1
 80104c8:	2109      	movs	r1, #9
 80104ca:	68a0      	ldr	r0, [r4, #8]
 80104cc:	f7ff ff9c 	bl	8010408 <std>
 80104d0:	2202      	movs	r2, #2
 80104d2:	2112      	movs	r1, #18
 80104d4:	68e0      	ldr	r0, [r4, #12]
 80104d6:	f7ff ff97 	bl	8010408 <std>
 80104da:	2301      	movs	r3, #1
 80104dc:	61a3      	str	r3, [r4, #24]
 80104de:	bd10      	pop	{r4, pc}
 80104e0:	08012b4c 	.word	0x08012b4c
 80104e4:	08010451 	.word	0x08010451

080104e8 <__sfp>:
 80104e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ea:	4b1b      	ldr	r3, [pc, #108]	; (8010558 <__sfp+0x70>)
 80104ec:	681e      	ldr	r6, [r3, #0]
 80104ee:	69b3      	ldr	r3, [r6, #24]
 80104f0:	4607      	mov	r7, r0
 80104f2:	b913      	cbnz	r3, 80104fa <__sfp+0x12>
 80104f4:	4630      	mov	r0, r6
 80104f6:	f7ff ffc7 	bl	8010488 <__sinit>
 80104fa:	3648      	adds	r6, #72	; 0x48
 80104fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010500:	3b01      	subs	r3, #1
 8010502:	d503      	bpl.n	801050c <__sfp+0x24>
 8010504:	6833      	ldr	r3, [r6, #0]
 8010506:	b133      	cbz	r3, 8010516 <__sfp+0x2e>
 8010508:	6836      	ldr	r6, [r6, #0]
 801050a:	e7f7      	b.n	80104fc <__sfp+0x14>
 801050c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010510:	b16d      	cbz	r5, 801052e <__sfp+0x46>
 8010512:	3468      	adds	r4, #104	; 0x68
 8010514:	e7f4      	b.n	8010500 <__sfp+0x18>
 8010516:	2104      	movs	r1, #4
 8010518:	4638      	mov	r0, r7
 801051a:	f7ff ff9f 	bl	801045c <__sfmoreglue>
 801051e:	6030      	str	r0, [r6, #0]
 8010520:	2800      	cmp	r0, #0
 8010522:	d1f1      	bne.n	8010508 <__sfp+0x20>
 8010524:	230c      	movs	r3, #12
 8010526:	603b      	str	r3, [r7, #0]
 8010528:	4604      	mov	r4, r0
 801052a:	4620      	mov	r0, r4
 801052c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801052e:	4b0b      	ldr	r3, [pc, #44]	; (801055c <__sfp+0x74>)
 8010530:	6665      	str	r5, [r4, #100]	; 0x64
 8010532:	e9c4 5500 	strd	r5, r5, [r4]
 8010536:	60a5      	str	r5, [r4, #8]
 8010538:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801053c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010540:	2208      	movs	r2, #8
 8010542:	4629      	mov	r1, r5
 8010544:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010548:	f7fd f924 	bl	800d794 <memset>
 801054c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010550:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010554:	e7e9      	b.n	801052a <__sfp+0x42>
 8010556:	bf00      	nop
 8010558:	08012b4c 	.word	0x08012b4c
 801055c:	ffff0001 	.word	0xffff0001

08010560 <_fwalk_reent>:
 8010560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010564:	4680      	mov	r8, r0
 8010566:	4689      	mov	r9, r1
 8010568:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801056c:	2600      	movs	r6, #0
 801056e:	b914      	cbnz	r4, 8010576 <_fwalk_reent+0x16>
 8010570:	4630      	mov	r0, r6
 8010572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010576:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801057a:	3f01      	subs	r7, #1
 801057c:	d501      	bpl.n	8010582 <_fwalk_reent+0x22>
 801057e:	6824      	ldr	r4, [r4, #0]
 8010580:	e7f5      	b.n	801056e <_fwalk_reent+0xe>
 8010582:	89ab      	ldrh	r3, [r5, #12]
 8010584:	2b01      	cmp	r3, #1
 8010586:	d907      	bls.n	8010598 <_fwalk_reent+0x38>
 8010588:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801058c:	3301      	adds	r3, #1
 801058e:	d003      	beq.n	8010598 <_fwalk_reent+0x38>
 8010590:	4629      	mov	r1, r5
 8010592:	4640      	mov	r0, r8
 8010594:	47c8      	blx	r9
 8010596:	4306      	orrs	r6, r0
 8010598:	3568      	adds	r5, #104	; 0x68
 801059a:	e7ee      	b.n	801057a <_fwalk_reent+0x1a>

0801059c <rshift>:
 801059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801059e:	6906      	ldr	r6, [r0, #16]
 80105a0:	114b      	asrs	r3, r1, #5
 80105a2:	429e      	cmp	r6, r3
 80105a4:	f100 0414 	add.w	r4, r0, #20
 80105a8:	dd30      	ble.n	801060c <rshift+0x70>
 80105aa:	f011 011f 	ands.w	r1, r1, #31
 80105ae:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80105b2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80105b6:	d108      	bne.n	80105ca <rshift+0x2e>
 80105b8:	4621      	mov	r1, r4
 80105ba:	42b2      	cmp	r2, r6
 80105bc:	460b      	mov	r3, r1
 80105be:	d211      	bcs.n	80105e4 <rshift+0x48>
 80105c0:	f852 3b04 	ldr.w	r3, [r2], #4
 80105c4:	f841 3b04 	str.w	r3, [r1], #4
 80105c8:	e7f7      	b.n	80105ba <rshift+0x1e>
 80105ca:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80105ce:	f1c1 0c20 	rsb	ip, r1, #32
 80105d2:	40cd      	lsrs	r5, r1
 80105d4:	3204      	adds	r2, #4
 80105d6:	4623      	mov	r3, r4
 80105d8:	42b2      	cmp	r2, r6
 80105da:	4617      	mov	r7, r2
 80105dc:	d30c      	bcc.n	80105f8 <rshift+0x5c>
 80105de:	601d      	str	r5, [r3, #0]
 80105e0:	b105      	cbz	r5, 80105e4 <rshift+0x48>
 80105e2:	3304      	adds	r3, #4
 80105e4:	1b1a      	subs	r2, r3, r4
 80105e6:	42a3      	cmp	r3, r4
 80105e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80105ec:	bf08      	it	eq
 80105ee:	2300      	moveq	r3, #0
 80105f0:	6102      	str	r2, [r0, #16]
 80105f2:	bf08      	it	eq
 80105f4:	6143      	streq	r3, [r0, #20]
 80105f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105f8:	683f      	ldr	r7, [r7, #0]
 80105fa:	fa07 f70c 	lsl.w	r7, r7, ip
 80105fe:	433d      	orrs	r5, r7
 8010600:	f843 5b04 	str.w	r5, [r3], #4
 8010604:	f852 5b04 	ldr.w	r5, [r2], #4
 8010608:	40cd      	lsrs	r5, r1
 801060a:	e7e5      	b.n	80105d8 <rshift+0x3c>
 801060c:	4623      	mov	r3, r4
 801060e:	e7e9      	b.n	80105e4 <rshift+0x48>

08010610 <__hexdig_fun>:
 8010610:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010614:	2b09      	cmp	r3, #9
 8010616:	d802      	bhi.n	801061e <__hexdig_fun+0xe>
 8010618:	3820      	subs	r0, #32
 801061a:	b2c0      	uxtb	r0, r0
 801061c:	4770      	bx	lr
 801061e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010622:	2b05      	cmp	r3, #5
 8010624:	d801      	bhi.n	801062a <__hexdig_fun+0x1a>
 8010626:	3847      	subs	r0, #71	; 0x47
 8010628:	e7f7      	b.n	801061a <__hexdig_fun+0xa>
 801062a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801062e:	2b05      	cmp	r3, #5
 8010630:	d801      	bhi.n	8010636 <__hexdig_fun+0x26>
 8010632:	3827      	subs	r0, #39	; 0x27
 8010634:	e7f1      	b.n	801061a <__hexdig_fun+0xa>
 8010636:	2000      	movs	r0, #0
 8010638:	4770      	bx	lr

0801063a <__gethex>:
 801063a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801063e:	b08b      	sub	sp, #44	; 0x2c
 8010640:	468a      	mov	sl, r1
 8010642:	9002      	str	r0, [sp, #8]
 8010644:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010646:	9306      	str	r3, [sp, #24]
 8010648:	4690      	mov	r8, r2
 801064a:	f000 fadf 	bl	8010c0c <__localeconv_l>
 801064e:	6803      	ldr	r3, [r0, #0]
 8010650:	9303      	str	r3, [sp, #12]
 8010652:	4618      	mov	r0, r3
 8010654:	f7ef fdd4 	bl	8000200 <strlen>
 8010658:	9b03      	ldr	r3, [sp, #12]
 801065a:	9001      	str	r0, [sp, #4]
 801065c:	4403      	add	r3, r0
 801065e:	f04f 0b00 	mov.w	fp, #0
 8010662:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010666:	9307      	str	r3, [sp, #28]
 8010668:	f8da 3000 	ldr.w	r3, [sl]
 801066c:	3302      	adds	r3, #2
 801066e:	461f      	mov	r7, r3
 8010670:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010674:	2830      	cmp	r0, #48	; 0x30
 8010676:	d06c      	beq.n	8010752 <__gethex+0x118>
 8010678:	f7ff ffca 	bl	8010610 <__hexdig_fun>
 801067c:	4604      	mov	r4, r0
 801067e:	2800      	cmp	r0, #0
 8010680:	d16a      	bne.n	8010758 <__gethex+0x11e>
 8010682:	9a01      	ldr	r2, [sp, #4]
 8010684:	9903      	ldr	r1, [sp, #12]
 8010686:	4638      	mov	r0, r7
 8010688:	f001 fe08 	bl	801229c <strncmp>
 801068c:	2800      	cmp	r0, #0
 801068e:	d166      	bne.n	801075e <__gethex+0x124>
 8010690:	9b01      	ldr	r3, [sp, #4]
 8010692:	5cf8      	ldrb	r0, [r7, r3]
 8010694:	18fe      	adds	r6, r7, r3
 8010696:	f7ff ffbb 	bl	8010610 <__hexdig_fun>
 801069a:	2800      	cmp	r0, #0
 801069c:	d062      	beq.n	8010764 <__gethex+0x12a>
 801069e:	4633      	mov	r3, r6
 80106a0:	7818      	ldrb	r0, [r3, #0]
 80106a2:	2830      	cmp	r0, #48	; 0x30
 80106a4:	461f      	mov	r7, r3
 80106a6:	f103 0301 	add.w	r3, r3, #1
 80106aa:	d0f9      	beq.n	80106a0 <__gethex+0x66>
 80106ac:	f7ff ffb0 	bl	8010610 <__hexdig_fun>
 80106b0:	fab0 f580 	clz	r5, r0
 80106b4:	096d      	lsrs	r5, r5, #5
 80106b6:	4634      	mov	r4, r6
 80106b8:	f04f 0b01 	mov.w	fp, #1
 80106bc:	463a      	mov	r2, r7
 80106be:	4616      	mov	r6, r2
 80106c0:	3201      	adds	r2, #1
 80106c2:	7830      	ldrb	r0, [r6, #0]
 80106c4:	f7ff ffa4 	bl	8010610 <__hexdig_fun>
 80106c8:	2800      	cmp	r0, #0
 80106ca:	d1f8      	bne.n	80106be <__gethex+0x84>
 80106cc:	9a01      	ldr	r2, [sp, #4]
 80106ce:	9903      	ldr	r1, [sp, #12]
 80106d0:	4630      	mov	r0, r6
 80106d2:	f001 fde3 	bl	801229c <strncmp>
 80106d6:	b950      	cbnz	r0, 80106ee <__gethex+0xb4>
 80106d8:	b954      	cbnz	r4, 80106f0 <__gethex+0xb6>
 80106da:	9b01      	ldr	r3, [sp, #4]
 80106dc:	18f4      	adds	r4, r6, r3
 80106de:	4622      	mov	r2, r4
 80106e0:	4616      	mov	r6, r2
 80106e2:	3201      	adds	r2, #1
 80106e4:	7830      	ldrb	r0, [r6, #0]
 80106e6:	f7ff ff93 	bl	8010610 <__hexdig_fun>
 80106ea:	2800      	cmp	r0, #0
 80106ec:	d1f8      	bne.n	80106e0 <__gethex+0xa6>
 80106ee:	b10c      	cbz	r4, 80106f4 <__gethex+0xba>
 80106f0:	1ba4      	subs	r4, r4, r6
 80106f2:	00a4      	lsls	r4, r4, #2
 80106f4:	7833      	ldrb	r3, [r6, #0]
 80106f6:	2b50      	cmp	r3, #80	; 0x50
 80106f8:	d001      	beq.n	80106fe <__gethex+0xc4>
 80106fa:	2b70      	cmp	r3, #112	; 0x70
 80106fc:	d140      	bne.n	8010780 <__gethex+0x146>
 80106fe:	7873      	ldrb	r3, [r6, #1]
 8010700:	2b2b      	cmp	r3, #43	; 0x2b
 8010702:	d031      	beq.n	8010768 <__gethex+0x12e>
 8010704:	2b2d      	cmp	r3, #45	; 0x2d
 8010706:	d033      	beq.n	8010770 <__gethex+0x136>
 8010708:	1c71      	adds	r1, r6, #1
 801070a:	f04f 0900 	mov.w	r9, #0
 801070e:	7808      	ldrb	r0, [r1, #0]
 8010710:	f7ff ff7e 	bl	8010610 <__hexdig_fun>
 8010714:	1e43      	subs	r3, r0, #1
 8010716:	b2db      	uxtb	r3, r3
 8010718:	2b18      	cmp	r3, #24
 801071a:	d831      	bhi.n	8010780 <__gethex+0x146>
 801071c:	f1a0 0210 	sub.w	r2, r0, #16
 8010720:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010724:	f7ff ff74 	bl	8010610 <__hexdig_fun>
 8010728:	1e43      	subs	r3, r0, #1
 801072a:	b2db      	uxtb	r3, r3
 801072c:	2b18      	cmp	r3, #24
 801072e:	d922      	bls.n	8010776 <__gethex+0x13c>
 8010730:	f1b9 0f00 	cmp.w	r9, #0
 8010734:	d000      	beq.n	8010738 <__gethex+0xfe>
 8010736:	4252      	negs	r2, r2
 8010738:	4414      	add	r4, r2
 801073a:	f8ca 1000 	str.w	r1, [sl]
 801073e:	b30d      	cbz	r5, 8010784 <__gethex+0x14a>
 8010740:	f1bb 0f00 	cmp.w	fp, #0
 8010744:	bf0c      	ite	eq
 8010746:	2706      	moveq	r7, #6
 8010748:	2700      	movne	r7, #0
 801074a:	4638      	mov	r0, r7
 801074c:	b00b      	add	sp, #44	; 0x2c
 801074e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010752:	f10b 0b01 	add.w	fp, fp, #1
 8010756:	e78a      	b.n	801066e <__gethex+0x34>
 8010758:	2500      	movs	r5, #0
 801075a:	462c      	mov	r4, r5
 801075c:	e7ae      	b.n	80106bc <__gethex+0x82>
 801075e:	463e      	mov	r6, r7
 8010760:	2501      	movs	r5, #1
 8010762:	e7c7      	b.n	80106f4 <__gethex+0xba>
 8010764:	4604      	mov	r4, r0
 8010766:	e7fb      	b.n	8010760 <__gethex+0x126>
 8010768:	f04f 0900 	mov.w	r9, #0
 801076c:	1cb1      	adds	r1, r6, #2
 801076e:	e7ce      	b.n	801070e <__gethex+0xd4>
 8010770:	f04f 0901 	mov.w	r9, #1
 8010774:	e7fa      	b.n	801076c <__gethex+0x132>
 8010776:	230a      	movs	r3, #10
 8010778:	fb03 0202 	mla	r2, r3, r2, r0
 801077c:	3a10      	subs	r2, #16
 801077e:	e7cf      	b.n	8010720 <__gethex+0xe6>
 8010780:	4631      	mov	r1, r6
 8010782:	e7da      	b.n	801073a <__gethex+0x100>
 8010784:	1bf3      	subs	r3, r6, r7
 8010786:	3b01      	subs	r3, #1
 8010788:	4629      	mov	r1, r5
 801078a:	2b07      	cmp	r3, #7
 801078c:	dc49      	bgt.n	8010822 <__gethex+0x1e8>
 801078e:	9802      	ldr	r0, [sp, #8]
 8010790:	f000 fae7 	bl	8010d62 <_Balloc>
 8010794:	9b01      	ldr	r3, [sp, #4]
 8010796:	f100 0914 	add.w	r9, r0, #20
 801079a:	f04f 0b00 	mov.w	fp, #0
 801079e:	f1c3 0301 	rsb	r3, r3, #1
 80107a2:	4605      	mov	r5, r0
 80107a4:	f8cd 9010 	str.w	r9, [sp, #16]
 80107a8:	46da      	mov	sl, fp
 80107aa:	9308      	str	r3, [sp, #32]
 80107ac:	42b7      	cmp	r7, r6
 80107ae:	d33b      	bcc.n	8010828 <__gethex+0x1ee>
 80107b0:	9804      	ldr	r0, [sp, #16]
 80107b2:	f840 ab04 	str.w	sl, [r0], #4
 80107b6:	eba0 0009 	sub.w	r0, r0, r9
 80107ba:	1080      	asrs	r0, r0, #2
 80107bc:	6128      	str	r0, [r5, #16]
 80107be:	0147      	lsls	r7, r0, #5
 80107c0:	4650      	mov	r0, sl
 80107c2:	f000 fb92 	bl	8010eea <__hi0bits>
 80107c6:	f8d8 6000 	ldr.w	r6, [r8]
 80107ca:	1a3f      	subs	r7, r7, r0
 80107cc:	42b7      	cmp	r7, r6
 80107ce:	dd64      	ble.n	801089a <__gethex+0x260>
 80107d0:	1bbf      	subs	r7, r7, r6
 80107d2:	4639      	mov	r1, r7
 80107d4:	4628      	mov	r0, r5
 80107d6:	f000 fea1 	bl	801151c <__any_on>
 80107da:	4682      	mov	sl, r0
 80107dc:	b178      	cbz	r0, 80107fe <__gethex+0x1c4>
 80107de:	1e7b      	subs	r3, r7, #1
 80107e0:	1159      	asrs	r1, r3, #5
 80107e2:	f003 021f 	and.w	r2, r3, #31
 80107e6:	f04f 0a01 	mov.w	sl, #1
 80107ea:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80107ee:	fa0a f202 	lsl.w	r2, sl, r2
 80107f2:	420a      	tst	r2, r1
 80107f4:	d003      	beq.n	80107fe <__gethex+0x1c4>
 80107f6:	4553      	cmp	r3, sl
 80107f8:	dc46      	bgt.n	8010888 <__gethex+0x24e>
 80107fa:	f04f 0a02 	mov.w	sl, #2
 80107fe:	4639      	mov	r1, r7
 8010800:	4628      	mov	r0, r5
 8010802:	f7ff fecb 	bl	801059c <rshift>
 8010806:	443c      	add	r4, r7
 8010808:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801080c:	42a3      	cmp	r3, r4
 801080e:	da52      	bge.n	80108b6 <__gethex+0x27c>
 8010810:	4629      	mov	r1, r5
 8010812:	9802      	ldr	r0, [sp, #8]
 8010814:	f000 fad9 	bl	8010dca <_Bfree>
 8010818:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801081a:	2300      	movs	r3, #0
 801081c:	6013      	str	r3, [r2, #0]
 801081e:	27a3      	movs	r7, #163	; 0xa3
 8010820:	e793      	b.n	801074a <__gethex+0x110>
 8010822:	3101      	adds	r1, #1
 8010824:	105b      	asrs	r3, r3, #1
 8010826:	e7b0      	b.n	801078a <__gethex+0x150>
 8010828:	1e73      	subs	r3, r6, #1
 801082a:	9305      	str	r3, [sp, #20]
 801082c:	9a07      	ldr	r2, [sp, #28]
 801082e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010832:	4293      	cmp	r3, r2
 8010834:	d018      	beq.n	8010868 <__gethex+0x22e>
 8010836:	f1bb 0f20 	cmp.w	fp, #32
 801083a:	d107      	bne.n	801084c <__gethex+0x212>
 801083c:	9b04      	ldr	r3, [sp, #16]
 801083e:	f8c3 a000 	str.w	sl, [r3]
 8010842:	3304      	adds	r3, #4
 8010844:	f04f 0a00 	mov.w	sl, #0
 8010848:	9304      	str	r3, [sp, #16]
 801084a:	46d3      	mov	fp, sl
 801084c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010850:	f7ff fede 	bl	8010610 <__hexdig_fun>
 8010854:	f000 000f 	and.w	r0, r0, #15
 8010858:	fa00 f00b 	lsl.w	r0, r0, fp
 801085c:	ea4a 0a00 	orr.w	sl, sl, r0
 8010860:	f10b 0b04 	add.w	fp, fp, #4
 8010864:	9b05      	ldr	r3, [sp, #20]
 8010866:	e00d      	b.n	8010884 <__gethex+0x24a>
 8010868:	9b05      	ldr	r3, [sp, #20]
 801086a:	9a08      	ldr	r2, [sp, #32]
 801086c:	4413      	add	r3, r2
 801086e:	42bb      	cmp	r3, r7
 8010870:	d3e1      	bcc.n	8010836 <__gethex+0x1fc>
 8010872:	4618      	mov	r0, r3
 8010874:	9a01      	ldr	r2, [sp, #4]
 8010876:	9903      	ldr	r1, [sp, #12]
 8010878:	9309      	str	r3, [sp, #36]	; 0x24
 801087a:	f001 fd0f 	bl	801229c <strncmp>
 801087e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010880:	2800      	cmp	r0, #0
 8010882:	d1d8      	bne.n	8010836 <__gethex+0x1fc>
 8010884:	461e      	mov	r6, r3
 8010886:	e791      	b.n	80107ac <__gethex+0x172>
 8010888:	1eb9      	subs	r1, r7, #2
 801088a:	4628      	mov	r0, r5
 801088c:	f000 fe46 	bl	801151c <__any_on>
 8010890:	2800      	cmp	r0, #0
 8010892:	d0b2      	beq.n	80107fa <__gethex+0x1c0>
 8010894:	f04f 0a03 	mov.w	sl, #3
 8010898:	e7b1      	b.n	80107fe <__gethex+0x1c4>
 801089a:	da09      	bge.n	80108b0 <__gethex+0x276>
 801089c:	1bf7      	subs	r7, r6, r7
 801089e:	4629      	mov	r1, r5
 80108a0:	463a      	mov	r2, r7
 80108a2:	9802      	ldr	r0, [sp, #8]
 80108a4:	f000 fc5c 	bl	8011160 <__lshift>
 80108a8:	1be4      	subs	r4, r4, r7
 80108aa:	4605      	mov	r5, r0
 80108ac:	f100 0914 	add.w	r9, r0, #20
 80108b0:	f04f 0a00 	mov.w	sl, #0
 80108b4:	e7a8      	b.n	8010808 <__gethex+0x1ce>
 80108b6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80108ba:	42a0      	cmp	r0, r4
 80108bc:	dd6a      	ble.n	8010994 <__gethex+0x35a>
 80108be:	1b04      	subs	r4, r0, r4
 80108c0:	42a6      	cmp	r6, r4
 80108c2:	dc2e      	bgt.n	8010922 <__gethex+0x2e8>
 80108c4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80108c8:	2b02      	cmp	r3, #2
 80108ca:	d022      	beq.n	8010912 <__gethex+0x2d8>
 80108cc:	2b03      	cmp	r3, #3
 80108ce:	d024      	beq.n	801091a <__gethex+0x2e0>
 80108d0:	2b01      	cmp	r3, #1
 80108d2:	d115      	bne.n	8010900 <__gethex+0x2c6>
 80108d4:	42a6      	cmp	r6, r4
 80108d6:	d113      	bne.n	8010900 <__gethex+0x2c6>
 80108d8:	2e01      	cmp	r6, #1
 80108da:	dc0b      	bgt.n	80108f4 <__gethex+0x2ba>
 80108dc:	9a06      	ldr	r2, [sp, #24]
 80108de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80108e2:	6013      	str	r3, [r2, #0]
 80108e4:	2301      	movs	r3, #1
 80108e6:	612b      	str	r3, [r5, #16]
 80108e8:	f8c9 3000 	str.w	r3, [r9]
 80108ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80108ee:	2762      	movs	r7, #98	; 0x62
 80108f0:	601d      	str	r5, [r3, #0]
 80108f2:	e72a      	b.n	801074a <__gethex+0x110>
 80108f4:	1e71      	subs	r1, r6, #1
 80108f6:	4628      	mov	r0, r5
 80108f8:	f000 fe10 	bl	801151c <__any_on>
 80108fc:	2800      	cmp	r0, #0
 80108fe:	d1ed      	bne.n	80108dc <__gethex+0x2a2>
 8010900:	4629      	mov	r1, r5
 8010902:	9802      	ldr	r0, [sp, #8]
 8010904:	f000 fa61 	bl	8010dca <_Bfree>
 8010908:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801090a:	2300      	movs	r3, #0
 801090c:	6013      	str	r3, [r2, #0]
 801090e:	2750      	movs	r7, #80	; 0x50
 8010910:	e71b      	b.n	801074a <__gethex+0x110>
 8010912:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010914:	2b00      	cmp	r3, #0
 8010916:	d0e1      	beq.n	80108dc <__gethex+0x2a2>
 8010918:	e7f2      	b.n	8010900 <__gethex+0x2c6>
 801091a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801091c:	2b00      	cmp	r3, #0
 801091e:	d1dd      	bne.n	80108dc <__gethex+0x2a2>
 8010920:	e7ee      	b.n	8010900 <__gethex+0x2c6>
 8010922:	1e67      	subs	r7, r4, #1
 8010924:	f1ba 0f00 	cmp.w	sl, #0
 8010928:	d131      	bne.n	801098e <__gethex+0x354>
 801092a:	b127      	cbz	r7, 8010936 <__gethex+0x2fc>
 801092c:	4639      	mov	r1, r7
 801092e:	4628      	mov	r0, r5
 8010930:	f000 fdf4 	bl	801151c <__any_on>
 8010934:	4682      	mov	sl, r0
 8010936:	117a      	asrs	r2, r7, #5
 8010938:	2301      	movs	r3, #1
 801093a:	f007 071f 	and.w	r7, r7, #31
 801093e:	fa03 f707 	lsl.w	r7, r3, r7
 8010942:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010946:	4621      	mov	r1, r4
 8010948:	421f      	tst	r7, r3
 801094a:	4628      	mov	r0, r5
 801094c:	bf18      	it	ne
 801094e:	f04a 0a02 	orrne.w	sl, sl, #2
 8010952:	1b36      	subs	r6, r6, r4
 8010954:	f7ff fe22 	bl	801059c <rshift>
 8010958:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801095c:	2702      	movs	r7, #2
 801095e:	f1ba 0f00 	cmp.w	sl, #0
 8010962:	d048      	beq.n	80109f6 <__gethex+0x3bc>
 8010964:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010968:	2b02      	cmp	r3, #2
 801096a:	d015      	beq.n	8010998 <__gethex+0x35e>
 801096c:	2b03      	cmp	r3, #3
 801096e:	d017      	beq.n	80109a0 <__gethex+0x366>
 8010970:	2b01      	cmp	r3, #1
 8010972:	d109      	bne.n	8010988 <__gethex+0x34e>
 8010974:	f01a 0f02 	tst.w	sl, #2
 8010978:	d006      	beq.n	8010988 <__gethex+0x34e>
 801097a:	f8d9 3000 	ldr.w	r3, [r9]
 801097e:	ea4a 0a03 	orr.w	sl, sl, r3
 8010982:	f01a 0f01 	tst.w	sl, #1
 8010986:	d10e      	bne.n	80109a6 <__gethex+0x36c>
 8010988:	f047 0710 	orr.w	r7, r7, #16
 801098c:	e033      	b.n	80109f6 <__gethex+0x3bc>
 801098e:	f04f 0a01 	mov.w	sl, #1
 8010992:	e7d0      	b.n	8010936 <__gethex+0x2fc>
 8010994:	2701      	movs	r7, #1
 8010996:	e7e2      	b.n	801095e <__gethex+0x324>
 8010998:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801099a:	f1c3 0301 	rsb	r3, r3, #1
 801099e:	9315      	str	r3, [sp, #84]	; 0x54
 80109a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d0f0      	beq.n	8010988 <__gethex+0x34e>
 80109a6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80109aa:	f105 0314 	add.w	r3, r5, #20
 80109ae:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80109b2:	eb03 010a 	add.w	r1, r3, sl
 80109b6:	f04f 0c00 	mov.w	ip, #0
 80109ba:	4618      	mov	r0, r3
 80109bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80109c0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80109c4:	d01c      	beq.n	8010a00 <__gethex+0x3c6>
 80109c6:	3201      	adds	r2, #1
 80109c8:	6002      	str	r2, [r0, #0]
 80109ca:	2f02      	cmp	r7, #2
 80109cc:	f105 0314 	add.w	r3, r5, #20
 80109d0:	d138      	bne.n	8010a44 <__gethex+0x40a>
 80109d2:	f8d8 2000 	ldr.w	r2, [r8]
 80109d6:	3a01      	subs	r2, #1
 80109d8:	42b2      	cmp	r2, r6
 80109da:	d10a      	bne.n	80109f2 <__gethex+0x3b8>
 80109dc:	1171      	asrs	r1, r6, #5
 80109de:	2201      	movs	r2, #1
 80109e0:	f006 061f 	and.w	r6, r6, #31
 80109e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80109e8:	fa02 f606 	lsl.w	r6, r2, r6
 80109ec:	421e      	tst	r6, r3
 80109ee:	bf18      	it	ne
 80109f0:	4617      	movne	r7, r2
 80109f2:	f047 0720 	orr.w	r7, r7, #32
 80109f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80109f8:	601d      	str	r5, [r3, #0]
 80109fa:	9b06      	ldr	r3, [sp, #24]
 80109fc:	601c      	str	r4, [r3, #0]
 80109fe:	e6a4      	b.n	801074a <__gethex+0x110>
 8010a00:	4299      	cmp	r1, r3
 8010a02:	f843 cc04 	str.w	ip, [r3, #-4]
 8010a06:	d8d8      	bhi.n	80109ba <__gethex+0x380>
 8010a08:	68ab      	ldr	r3, [r5, #8]
 8010a0a:	4599      	cmp	r9, r3
 8010a0c:	db12      	blt.n	8010a34 <__gethex+0x3fa>
 8010a0e:	6869      	ldr	r1, [r5, #4]
 8010a10:	9802      	ldr	r0, [sp, #8]
 8010a12:	3101      	adds	r1, #1
 8010a14:	f000 f9a5 	bl	8010d62 <_Balloc>
 8010a18:	692a      	ldr	r2, [r5, #16]
 8010a1a:	3202      	adds	r2, #2
 8010a1c:	f105 010c 	add.w	r1, r5, #12
 8010a20:	4683      	mov	fp, r0
 8010a22:	0092      	lsls	r2, r2, #2
 8010a24:	300c      	adds	r0, #12
 8010a26:	f000 f991 	bl	8010d4c <memcpy>
 8010a2a:	4629      	mov	r1, r5
 8010a2c:	9802      	ldr	r0, [sp, #8]
 8010a2e:	f000 f9cc 	bl	8010dca <_Bfree>
 8010a32:	465d      	mov	r5, fp
 8010a34:	692b      	ldr	r3, [r5, #16]
 8010a36:	1c5a      	adds	r2, r3, #1
 8010a38:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010a3c:	612a      	str	r2, [r5, #16]
 8010a3e:	2201      	movs	r2, #1
 8010a40:	615a      	str	r2, [r3, #20]
 8010a42:	e7c2      	b.n	80109ca <__gethex+0x390>
 8010a44:	692a      	ldr	r2, [r5, #16]
 8010a46:	454a      	cmp	r2, r9
 8010a48:	dd0b      	ble.n	8010a62 <__gethex+0x428>
 8010a4a:	2101      	movs	r1, #1
 8010a4c:	4628      	mov	r0, r5
 8010a4e:	f7ff fda5 	bl	801059c <rshift>
 8010a52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a56:	3401      	adds	r4, #1
 8010a58:	42a3      	cmp	r3, r4
 8010a5a:	f6ff aed9 	blt.w	8010810 <__gethex+0x1d6>
 8010a5e:	2701      	movs	r7, #1
 8010a60:	e7c7      	b.n	80109f2 <__gethex+0x3b8>
 8010a62:	f016 061f 	ands.w	r6, r6, #31
 8010a66:	d0fa      	beq.n	8010a5e <__gethex+0x424>
 8010a68:	449a      	add	sl, r3
 8010a6a:	f1c6 0620 	rsb	r6, r6, #32
 8010a6e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010a72:	f000 fa3a 	bl	8010eea <__hi0bits>
 8010a76:	42b0      	cmp	r0, r6
 8010a78:	dbe7      	blt.n	8010a4a <__gethex+0x410>
 8010a7a:	e7f0      	b.n	8010a5e <__gethex+0x424>

08010a7c <L_shift>:
 8010a7c:	f1c2 0208 	rsb	r2, r2, #8
 8010a80:	0092      	lsls	r2, r2, #2
 8010a82:	b570      	push	{r4, r5, r6, lr}
 8010a84:	f1c2 0620 	rsb	r6, r2, #32
 8010a88:	6843      	ldr	r3, [r0, #4]
 8010a8a:	6804      	ldr	r4, [r0, #0]
 8010a8c:	fa03 f506 	lsl.w	r5, r3, r6
 8010a90:	432c      	orrs	r4, r5
 8010a92:	40d3      	lsrs	r3, r2
 8010a94:	6004      	str	r4, [r0, #0]
 8010a96:	f840 3f04 	str.w	r3, [r0, #4]!
 8010a9a:	4288      	cmp	r0, r1
 8010a9c:	d3f4      	bcc.n	8010a88 <L_shift+0xc>
 8010a9e:	bd70      	pop	{r4, r5, r6, pc}

08010aa0 <__match>:
 8010aa0:	b530      	push	{r4, r5, lr}
 8010aa2:	6803      	ldr	r3, [r0, #0]
 8010aa4:	3301      	adds	r3, #1
 8010aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010aaa:	b914      	cbnz	r4, 8010ab2 <__match+0x12>
 8010aac:	6003      	str	r3, [r0, #0]
 8010aae:	2001      	movs	r0, #1
 8010ab0:	bd30      	pop	{r4, r5, pc}
 8010ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ab6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010aba:	2d19      	cmp	r5, #25
 8010abc:	bf98      	it	ls
 8010abe:	3220      	addls	r2, #32
 8010ac0:	42a2      	cmp	r2, r4
 8010ac2:	d0f0      	beq.n	8010aa6 <__match+0x6>
 8010ac4:	2000      	movs	r0, #0
 8010ac6:	e7f3      	b.n	8010ab0 <__match+0x10>

08010ac8 <__hexnan>:
 8010ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010acc:	680b      	ldr	r3, [r1, #0]
 8010ace:	6801      	ldr	r1, [r0, #0]
 8010ad0:	115f      	asrs	r7, r3, #5
 8010ad2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8010ad6:	f013 031f 	ands.w	r3, r3, #31
 8010ada:	b087      	sub	sp, #28
 8010adc:	bf18      	it	ne
 8010ade:	3704      	addne	r7, #4
 8010ae0:	2500      	movs	r5, #0
 8010ae2:	1f3e      	subs	r6, r7, #4
 8010ae4:	4682      	mov	sl, r0
 8010ae6:	4690      	mov	r8, r2
 8010ae8:	9301      	str	r3, [sp, #4]
 8010aea:	f847 5c04 	str.w	r5, [r7, #-4]
 8010aee:	46b1      	mov	r9, r6
 8010af0:	4634      	mov	r4, r6
 8010af2:	9502      	str	r5, [sp, #8]
 8010af4:	46ab      	mov	fp, r5
 8010af6:	784a      	ldrb	r2, [r1, #1]
 8010af8:	1c4b      	adds	r3, r1, #1
 8010afa:	9303      	str	r3, [sp, #12]
 8010afc:	b342      	cbz	r2, 8010b50 <__hexnan+0x88>
 8010afe:	4610      	mov	r0, r2
 8010b00:	9105      	str	r1, [sp, #20]
 8010b02:	9204      	str	r2, [sp, #16]
 8010b04:	f7ff fd84 	bl	8010610 <__hexdig_fun>
 8010b08:	2800      	cmp	r0, #0
 8010b0a:	d143      	bne.n	8010b94 <__hexnan+0xcc>
 8010b0c:	9a04      	ldr	r2, [sp, #16]
 8010b0e:	9905      	ldr	r1, [sp, #20]
 8010b10:	2a20      	cmp	r2, #32
 8010b12:	d818      	bhi.n	8010b46 <__hexnan+0x7e>
 8010b14:	9b02      	ldr	r3, [sp, #8]
 8010b16:	459b      	cmp	fp, r3
 8010b18:	dd13      	ble.n	8010b42 <__hexnan+0x7a>
 8010b1a:	454c      	cmp	r4, r9
 8010b1c:	d206      	bcs.n	8010b2c <__hexnan+0x64>
 8010b1e:	2d07      	cmp	r5, #7
 8010b20:	dc04      	bgt.n	8010b2c <__hexnan+0x64>
 8010b22:	462a      	mov	r2, r5
 8010b24:	4649      	mov	r1, r9
 8010b26:	4620      	mov	r0, r4
 8010b28:	f7ff ffa8 	bl	8010a7c <L_shift>
 8010b2c:	4544      	cmp	r4, r8
 8010b2e:	d944      	bls.n	8010bba <__hexnan+0xf2>
 8010b30:	2300      	movs	r3, #0
 8010b32:	f1a4 0904 	sub.w	r9, r4, #4
 8010b36:	f844 3c04 	str.w	r3, [r4, #-4]
 8010b3a:	f8cd b008 	str.w	fp, [sp, #8]
 8010b3e:	464c      	mov	r4, r9
 8010b40:	461d      	mov	r5, r3
 8010b42:	9903      	ldr	r1, [sp, #12]
 8010b44:	e7d7      	b.n	8010af6 <__hexnan+0x2e>
 8010b46:	2a29      	cmp	r2, #41	; 0x29
 8010b48:	d14a      	bne.n	8010be0 <__hexnan+0x118>
 8010b4a:	3102      	adds	r1, #2
 8010b4c:	f8ca 1000 	str.w	r1, [sl]
 8010b50:	f1bb 0f00 	cmp.w	fp, #0
 8010b54:	d044      	beq.n	8010be0 <__hexnan+0x118>
 8010b56:	454c      	cmp	r4, r9
 8010b58:	d206      	bcs.n	8010b68 <__hexnan+0xa0>
 8010b5a:	2d07      	cmp	r5, #7
 8010b5c:	dc04      	bgt.n	8010b68 <__hexnan+0xa0>
 8010b5e:	462a      	mov	r2, r5
 8010b60:	4649      	mov	r1, r9
 8010b62:	4620      	mov	r0, r4
 8010b64:	f7ff ff8a 	bl	8010a7c <L_shift>
 8010b68:	4544      	cmp	r4, r8
 8010b6a:	d928      	bls.n	8010bbe <__hexnan+0xf6>
 8010b6c:	4643      	mov	r3, r8
 8010b6e:	f854 2b04 	ldr.w	r2, [r4], #4
 8010b72:	f843 2b04 	str.w	r2, [r3], #4
 8010b76:	42a6      	cmp	r6, r4
 8010b78:	d2f9      	bcs.n	8010b6e <__hexnan+0xa6>
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	f843 2b04 	str.w	r2, [r3], #4
 8010b80:	429e      	cmp	r6, r3
 8010b82:	d2fb      	bcs.n	8010b7c <__hexnan+0xb4>
 8010b84:	6833      	ldr	r3, [r6, #0]
 8010b86:	b91b      	cbnz	r3, 8010b90 <__hexnan+0xc8>
 8010b88:	4546      	cmp	r6, r8
 8010b8a:	d127      	bne.n	8010bdc <__hexnan+0x114>
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	6033      	str	r3, [r6, #0]
 8010b90:	2005      	movs	r0, #5
 8010b92:	e026      	b.n	8010be2 <__hexnan+0x11a>
 8010b94:	3501      	adds	r5, #1
 8010b96:	2d08      	cmp	r5, #8
 8010b98:	f10b 0b01 	add.w	fp, fp, #1
 8010b9c:	dd06      	ble.n	8010bac <__hexnan+0xe4>
 8010b9e:	4544      	cmp	r4, r8
 8010ba0:	d9cf      	bls.n	8010b42 <__hexnan+0x7a>
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	f844 3c04 	str.w	r3, [r4, #-4]
 8010ba8:	2501      	movs	r5, #1
 8010baa:	3c04      	subs	r4, #4
 8010bac:	6822      	ldr	r2, [r4, #0]
 8010bae:	f000 000f 	and.w	r0, r0, #15
 8010bb2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010bb6:	6020      	str	r0, [r4, #0]
 8010bb8:	e7c3      	b.n	8010b42 <__hexnan+0x7a>
 8010bba:	2508      	movs	r5, #8
 8010bbc:	e7c1      	b.n	8010b42 <__hexnan+0x7a>
 8010bbe:	9b01      	ldr	r3, [sp, #4]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d0df      	beq.n	8010b84 <__hexnan+0xbc>
 8010bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8010bc8:	f1c3 0320 	rsb	r3, r3, #32
 8010bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8010bd0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8010bd4:	401a      	ands	r2, r3
 8010bd6:	f847 2c04 	str.w	r2, [r7, #-4]
 8010bda:	e7d3      	b.n	8010b84 <__hexnan+0xbc>
 8010bdc:	3e04      	subs	r6, #4
 8010bde:	e7d1      	b.n	8010b84 <__hexnan+0xbc>
 8010be0:	2004      	movs	r0, #4
 8010be2:	b007      	add	sp, #28
 8010be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010be8 <__locale_ctype_ptr_l>:
 8010be8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010bec:	4770      	bx	lr
	...

08010bf0 <__locale_ctype_ptr>:
 8010bf0:	4b04      	ldr	r3, [pc, #16]	; (8010c04 <__locale_ctype_ptr+0x14>)
 8010bf2:	4a05      	ldr	r2, [pc, #20]	; (8010c08 <__locale_ctype_ptr+0x18>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	6a1b      	ldr	r3, [r3, #32]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	bf08      	it	eq
 8010bfc:	4613      	moveq	r3, r2
 8010bfe:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8010c02:	4770      	bx	lr
 8010c04:	2000000c 	.word	0x2000000c
 8010c08:	20000070 	.word	0x20000070

08010c0c <__localeconv_l>:
 8010c0c:	30f0      	adds	r0, #240	; 0xf0
 8010c0e:	4770      	bx	lr

08010c10 <_localeconv_r>:
 8010c10:	4b04      	ldr	r3, [pc, #16]	; (8010c24 <_localeconv_r+0x14>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	6a18      	ldr	r0, [r3, #32]
 8010c16:	4b04      	ldr	r3, [pc, #16]	; (8010c28 <_localeconv_r+0x18>)
 8010c18:	2800      	cmp	r0, #0
 8010c1a:	bf08      	it	eq
 8010c1c:	4618      	moveq	r0, r3
 8010c1e:	30f0      	adds	r0, #240	; 0xf0
 8010c20:	4770      	bx	lr
 8010c22:	bf00      	nop
 8010c24:	2000000c 	.word	0x2000000c
 8010c28:	20000070 	.word	0x20000070

08010c2c <_lseek_r>:
 8010c2c:	b538      	push	{r3, r4, r5, lr}
 8010c2e:	4c07      	ldr	r4, [pc, #28]	; (8010c4c <_lseek_r+0x20>)
 8010c30:	4605      	mov	r5, r0
 8010c32:	4608      	mov	r0, r1
 8010c34:	4611      	mov	r1, r2
 8010c36:	2200      	movs	r2, #0
 8010c38:	6022      	str	r2, [r4, #0]
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	f7f2 fa00 	bl	8003040 <_lseek>
 8010c40:	1c43      	adds	r3, r0, #1
 8010c42:	d102      	bne.n	8010c4a <_lseek_r+0x1e>
 8010c44:	6823      	ldr	r3, [r4, #0]
 8010c46:	b103      	cbz	r3, 8010c4a <_lseek_r+0x1e>
 8010c48:	602b      	str	r3, [r5, #0]
 8010c4a:	bd38      	pop	{r3, r4, r5, pc}
 8010c4c:	20004d40 	.word	0x20004d40

08010c50 <__swhatbuf_r>:
 8010c50:	b570      	push	{r4, r5, r6, lr}
 8010c52:	460e      	mov	r6, r1
 8010c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c58:	2900      	cmp	r1, #0
 8010c5a:	b096      	sub	sp, #88	; 0x58
 8010c5c:	4614      	mov	r4, r2
 8010c5e:	461d      	mov	r5, r3
 8010c60:	da07      	bge.n	8010c72 <__swhatbuf_r+0x22>
 8010c62:	2300      	movs	r3, #0
 8010c64:	602b      	str	r3, [r5, #0]
 8010c66:	89b3      	ldrh	r3, [r6, #12]
 8010c68:	061a      	lsls	r2, r3, #24
 8010c6a:	d410      	bmi.n	8010c8e <__swhatbuf_r+0x3e>
 8010c6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c70:	e00e      	b.n	8010c90 <__swhatbuf_r+0x40>
 8010c72:	466a      	mov	r2, sp
 8010c74:	f001 fbf8 	bl	8012468 <_fstat_r>
 8010c78:	2800      	cmp	r0, #0
 8010c7a:	dbf2      	blt.n	8010c62 <__swhatbuf_r+0x12>
 8010c7c:	9a01      	ldr	r2, [sp, #4]
 8010c7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010c82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010c86:	425a      	negs	r2, r3
 8010c88:	415a      	adcs	r2, r3
 8010c8a:	602a      	str	r2, [r5, #0]
 8010c8c:	e7ee      	b.n	8010c6c <__swhatbuf_r+0x1c>
 8010c8e:	2340      	movs	r3, #64	; 0x40
 8010c90:	2000      	movs	r0, #0
 8010c92:	6023      	str	r3, [r4, #0]
 8010c94:	b016      	add	sp, #88	; 0x58
 8010c96:	bd70      	pop	{r4, r5, r6, pc}

08010c98 <__smakebuf_r>:
 8010c98:	898b      	ldrh	r3, [r1, #12]
 8010c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c9c:	079d      	lsls	r5, r3, #30
 8010c9e:	4606      	mov	r6, r0
 8010ca0:	460c      	mov	r4, r1
 8010ca2:	d507      	bpl.n	8010cb4 <__smakebuf_r+0x1c>
 8010ca4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ca8:	6023      	str	r3, [r4, #0]
 8010caa:	6123      	str	r3, [r4, #16]
 8010cac:	2301      	movs	r3, #1
 8010cae:	6163      	str	r3, [r4, #20]
 8010cb0:	b002      	add	sp, #8
 8010cb2:	bd70      	pop	{r4, r5, r6, pc}
 8010cb4:	ab01      	add	r3, sp, #4
 8010cb6:	466a      	mov	r2, sp
 8010cb8:	f7ff ffca 	bl	8010c50 <__swhatbuf_r>
 8010cbc:	9900      	ldr	r1, [sp, #0]
 8010cbe:	4605      	mov	r5, r0
 8010cc0:	4630      	mov	r0, r6
 8010cc2:	f000 fca9 	bl	8011618 <_malloc_r>
 8010cc6:	b948      	cbnz	r0, 8010cdc <__smakebuf_r+0x44>
 8010cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ccc:	059a      	lsls	r2, r3, #22
 8010cce:	d4ef      	bmi.n	8010cb0 <__smakebuf_r+0x18>
 8010cd0:	f023 0303 	bic.w	r3, r3, #3
 8010cd4:	f043 0302 	orr.w	r3, r3, #2
 8010cd8:	81a3      	strh	r3, [r4, #12]
 8010cda:	e7e3      	b.n	8010ca4 <__smakebuf_r+0xc>
 8010cdc:	4b0d      	ldr	r3, [pc, #52]	; (8010d14 <__smakebuf_r+0x7c>)
 8010cde:	62b3      	str	r3, [r6, #40]	; 0x28
 8010ce0:	89a3      	ldrh	r3, [r4, #12]
 8010ce2:	6020      	str	r0, [r4, #0]
 8010ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ce8:	81a3      	strh	r3, [r4, #12]
 8010cea:	9b00      	ldr	r3, [sp, #0]
 8010cec:	6163      	str	r3, [r4, #20]
 8010cee:	9b01      	ldr	r3, [sp, #4]
 8010cf0:	6120      	str	r0, [r4, #16]
 8010cf2:	b15b      	cbz	r3, 8010d0c <__smakebuf_r+0x74>
 8010cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cf8:	4630      	mov	r0, r6
 8010cfa:	f001 fbc7 	bl	801248c <_isatty_r>
 8010cfe:	b128      	cbz	r0, 8010d0c <__smakebuf_r+0x74>
 8010d00:	89a3      	ldrh	r3, [r4, #12]
 8010d02:	f023 0303 	bic.w	r3, r3, #3
 8010d06:	f043 0301 	orr.w	r3, r3, #1
 8010d0a:	81a3      	strh	r3, [r4, #12]
 8010d0c:	89a3      	ldrh	r3, [r4, #12]
 8010d0e:	431d      	orrs	r5, r3
 8010d10:	81a5      	strh	r5, [r4, #12]
 8010d12:	e7cd      	b.n	8010cb0 <__smakebuf_r+0x18>
 8010d14:	08010451 	.word	0x08010451

08010d18 <malloc>:
 8010d18:	4b02      	ldr	r3, [pc, #8]	; (8010d24 <malloc+0xc>)
 8010d1a:	4601      	mov	r1, r0
 8010d1c:	6818      	ldr	r0, [r3, #0]
 8010d1e:	f000 bc7b 	b.w	8011618 <_malloc_r>
 8010d22:	bf00      	nop
 8010d24:	2000000c 	.word	0x2000000c

08010d28 <__ascii_mbtowc>:
 8010d28:	b082      	sub	sp, #8
 8010d2a:	b901      	cbnz	r1, 8010d2e <__ascii_mbtowc+0x6>
 8010d2c:	a901      	add	r1, sp, #4
 8010d2e:	b142      	cbz	r2, 8010d42 <__ascii_mbtowc+0x1a>
 8010d30:	b14b      	cbz	r3, 8010d46 <__ascii_mbtowc+0x1e>
 8010d32:	7813      	ldrb	r3, [r2, #0]
 8010d34:	600b      	str	r3, [r1, #0]
 8010d36:	7812      	ldrb	r2, [r2, #0]
 8010d38:	1c10      	adds	r0, r2, #0
 8010d3a:	bf18      	it	ne
 8010d3c:	2001      	movne	r0, #1
 8010d3e:	b002      	add	sp, #8
 8010d40:	4770      	bx	lr
 8010d42:	4610      	mov	r0, r2
 8010d44:	e7fb      	b.n	8010d3e <__ascii_mbtowc+0x16>
 8010d46:	f06f 0001 	mvn.w	r0, #1
 8010d4a:	e7f8      	b.n	8010d3e <__ascii_mbtowc+0x16>

08010d4c <memcpy>:
 8010d4c:	b510      	push	{r4, lr}
 8010d4e:	1e43      	subs	r3, r0, #1
 8010d50:	440a      	add	r2, r1
 8010d52:	4291      	cmp	r1, r2
 8010d54:	d100      	bne.n	8010d58 <memcpy+0xc>
 8010d56:	bd10      	pop	{r4, pc}
 8010d58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010d5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d60:	e7f7      	b.n	8010d52 <memcpy+0x6>

08010d62 <_Balloc>:
 8010d62:	b570      	push	{r4, r5, r6, lr}
 8010d64:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010d66:	4604      	mov	r4, r0
 8010d68:	460e      	mov	r6, r1
 8010d6a:	b93d      	cbnz	r5, 8010d7c <_Balloc+0x1a>
 8010d6c:	2010      	movs	r0, #16
 8010d6e:	f7ff ffd3 	bl	8010d18 <malloc>
 8010d72:	6260      	str	r0, [r4, #36]	; 0x24
 8010d74:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010d78:	6005      	str	r5, [r0, #0]
 8010d7a:	60c5      	str	r5, [r0, #12]
 8010d7c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010d7e:	68eb      	ldr	r3, [r5, #12]
 8010d80:	b183      	cbz	r3, 8010da4 <_Balloc+0x42>
 8010d82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010d84:	68db      	ldr	r3, [r3, #12]
 8010d86:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010d8a:	b9b8      	cbnz	r0, 8010dbc <_Balloc+0x5a>
 8010d8c:	2101      	movs	r1, #1
 8010d8e:	fa01 f506 	lsl.w	r5, r1, r6
 8010d92:	1d6a      	adds	r2, r5, #5
 8010d94:	0092      	lsls	r2, r2, #2
 8010d96:	4620      	mov	r0, r4
 8010d98:	f000 fbe1 	bl	801155e <_calloc_r>
 8010d9c:	b160      	cbz	r0, 8010db8 <_Balloc+0x56>
 8010d9e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010da2:	e00e      	b.n	8010dc2 <_Balloc+0x60>
 8010da4:	2221      	movs	r2, #33	; 0x21
 8010da6:	2104      	movs	r1, #4
 8010da8:	4620      	mov	r0, r4
 8010daa:	f000 fbd8 	bl	801155e <_calloc_r>
 8010dae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010db0:	60e8      	str	r0, [r5, #12]
 8010db2:	68db      	ldr	r3, [r3, #12]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d1e4      	bne.n	8010d82 <_Balloc+0x20>
 8010db8:	2000      	movs	r0, #0
 8010dba:	bd70      	pop	{r4, r5, r6, pc}
 8010dbc:	6802      	ldr	r2, [r0, #0]
 8010dbe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010dc8:	e7f7      	b.n	8010dba <_Balloc+0x58>

08010dca <_Bfree>:
 8010dca:	b570      	push	{r4, r5, r6, lr}
 8010dcc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010dce:	4606      	mov	r6, r0
 8010dd0:	460d      	mov	r5, r1
 8010dd2:	b93c      	cbnz	r4, 8010de4 <_Bfree+0x1a>
 8010dd4:	2010      	movs	r0, #16
 8010dd6:	f7ff ff9f 	bl	8010d18 <malloc>
 8010dda:	6270      	str	r0, [r6, #36]	; 0x24
 8010ddc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010de0:	6004      	str	r4, [r0, #0]
 8010de2:	60c4      	str	r4, [r0, #12]
 8010de4:	b13d      	cbz	r5, 8010df6 <_Bfree+0x2c>
 8010de6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010de8:	686a      	ldr	r2, [r5, #4]
 8010dea:	68db      	ldr	r3, [r3, #12]
 8010dec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010df0:	6029      	str	r1, [r5, #0]
 8010df2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010df6:	bd70      	pop	{r4, r5, r6, pc}

08010df8 <__multadd>:
 8010df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dfc:	690d      	ldr	r5, [r1, #16]
 8010dfe:	461f      	mov	r7, r3
 8010e00:	4606      	mov	r6, r0
 8010e02:	460c      	mov	r4, r1
 8010e04:	f101 0c14 	add.w	ip, r1, #20
 8010e08:	2300      	movs	r3, #0
 8010e0a:	f8dc 0000 	ldr.w	r0, [ip]
 8010e0e:	b281      	uxth	r1, r0
 8010e10:	fb02 7101 	mla	r1, r2, r1, r7
 8010e14:	0c0f      	lsrs	r7, r1, #16
 8010e16:	0c00      	lsrs	r0, r0, #16
 8010e18:	fb02 7000 	mla	r0, r2, r0, r7
 8010e1c:	b289      	uxth	r1, r1
 8010e1e:	3301      	adds	r3, #1
 8010e20:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010e24:	429d      	cmp	r5, r3
 8010e26:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010e2a:	f84c 1b04 	str.w	r1, [ip], #4
 8010e2e:	dcec      	bgt.n	8010e0a <__multadd+0x12>
 8010e30:	b1d7      	cbz	r7, 8010e68 <__multadd+0x70>
 8010e32:	68a3      	ldr	r3, [r4, #8]
 8010e34:	42ab      	cmp	r3, r5
 8010e36:	dc12      	bgt.n	8010e5e <__multadd+0x66>
 8010e38:	6861      	ldr	r1, [r4, #4]
 8010e3a:	4630      	mov	r0, r6
 8010e3c:	3101      	adds	r1, #1
 8010e3e:	f7ff ff90 	bl	8010d62 <_Balloc>
 8010e42:	6922      	ldr	r2, [r4, #16]
 8010e44:	3202      	adds	r2, #2
 8010e46:	f104 010c 	add.w	r1, r4, #12
 8010e4a:	4680      	mov	r8, r0
 8010e4c:	0092      	lsls	r2, r2, #2
 8010e4e:	300c      	adds	r0, #12
 8010e50:	f7ff ff7c 	bl	8010d4c <memcpy>
 8010e54:	4621      	mov	r1, r4
 8010e56:	4630      	mov	r0, r6
 8010e58:	f7ff ffb7 	bl	8010dca <_Bfree>
 8010e5c:	4644      	mov	r4, r8
 8010e5e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010e62:	3501      	adds	r5, #1
 8010e64:	615f      	str	r7, [r3, #20]
 8010e66:	6125      	str	r5, [r4, #16]
 8010e68:	4620      	mov	r0, r4
 8010e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010e6e <__s2b>:
 8010e6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e72:	460c      	mov	r4, r1
 8010e74:	4615      	mov	r5, r2
 8010e76:	461f      	mov	r7, r3
 8010e78:	2209      	movs	r2, #9
 8010e7a:	3308      	adds	r3, #8
 8010e7c:	4606      	mov	r6, r0
 8010e7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010e82:	2100      	movs	r1, #0
 8010e84:	2201      	movs	r2, #1
 8010e86:	429a      	cmp	r2, r3
 8010e88:	db20      	blt.n	8010ecc <__s2b+0x5e>
 8010e8a:	4630      	mov	r0, r6
 8010e8c:	f7ff ff69 	bl	8010d62 <_Balloc>
 8010e90:	9b08      	ldr	r3, [sp, #32]
 8010e92:	6143      	str	r3, [r0, #20]
 8010e94:	2d09      	cmp	r5, #9
 8010e96:	f04f 0301 	mov.w	r3, #1
 8010e9a:	6103      	str	r3, [r0, #16]
 8010e9c:	dd19      	ble.n	8010ed2 <__s2b+0x64>
 8010e9e:	f104 0809 	add.w	r8, r4, #9
 8010ea2:	46c1      	mov	r9, r8
 8010ea4:	442c      	add	r4, r5
 8010ea6:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010eaa:	4601      	mov	r1, r0
 8010eac:	3b30      	subs	r3, #48	; 0x30
 8010eae:	220a      	movs	r2, #10
 8010eb0:	4630      	mov	r0, r6
 8010eb2:	f7ff ffa1 	bl	8010df8 <__multadd>
 8010eb6:	45a1      	cmp	r9, r4
 8010eb8:	d1f5      	bne.n	8010ea6 <__s2b+0x38>
 8010eba:	eb08 0405 	add.w	r4, r8, r5
 8010ebe:	3c08      	subs	r4, #8
 8010ec0:	1b2d      	subs	r5, r5, r4
 8010ec2:	1963      	adds	r3, r4, r5
 8010ec4:	42bb      	cmp	r3, r7
 8010ec6:	db07      	blt.n	8010ed8 <__s2b+0x6a>
 8010ec8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ecc:	0052      	lsls	r2, r2, #1
 8010ece:	3101      	adds	r1, #1
 8010ed0:	e7d9      	b.n	8010e86 <__s2b+0x18>
 8010ed2:	340a      	adds	r4, #10
 8010ed4:	2509      	movs	r5, #9
 8010ed6:	e7f3      	b.n	8010ec0 <__s2b+0x52>
 8010ed8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010edc:	4601      	mov	r1, r0
 8010ede:	3b30      	subs	r3, #48	; 0x30
 8010ee0:	220a      	movs	r2, #10
 8010ee2:	4630      	mov	r0, r6
 8010ee4:	f7ff ff88 	bl	8010df8 <__multadd>
 8010ee8:	e7eb      	b.n	8010ec2 <__s2b+0x54>

08010eea <__hi0bits>:
 8010eea:	0c02      	lsrs	r2, r0, #16
 8010eec:	0412      	lsls	r2, r2, #16
 8010eee:	4603      	mov	r3, r0
 8010ef0:	b9b2      	cbnz	r2, 8010f20 <__hi0bits+0x36>
 8010ef2:	0403      	lsls	r3, r0, #16
 8010ef4:	2010      	movs	r0, #16
 8010ef6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010efa:	bf04      	itt	eq
 8010efc:	021b      	lsleq	r3, r3, #8
 8010efe:	3008      	addeq	r0, #8
 8010f00:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010f04:	bf04      	itt	eq
 8010f06:	011b      	lsleq	r3, r3, #4
 8010f08:	3004      	addeq	r0, #4
 8010f0a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010f0e:	bf04      	itt	eq
 8010f10:	009b      	lsleq	r3, r3, #2
 8010f12:	3002      	addeq	r0, #2
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	db06      	blt.n	8010f26 <__hi0bits+0x3c>
 8010f18:	005b      	lsls	r3, r3, #1
 8010f1a:	d503      	bpl.n	8010f24 <__hi0bits+0x3a>
 8010f1c:	3001      	adds	r0, #1
 8010f1e:	4770      	bx	lr
 8010f20:	2000      	movs	r0, #0
 8010f22:	e7e8      	b.n	8010ef6 <__hi0bits+0xc>
 8010f24:	2020      	movs	r0, #32
 8010f26:	4770      	bx	lr

08010f28 <__lo0bits>:
 8010f28:	6803      	ldr	r3, [r0, #0]
 8010f2a:	f013 0207 	ands.w	r2, r3, #7
 8010f2e:	4601      	mov	r1, r0
 8010f30:	d00b      	beq.n	8010f4a <__lo0bits+0x22>
 8010f32:	07da      	lsls	r2, r3, #31
 8010f34:	d423      	bmi.n	8010f7e <__lo0bits+0x56>
 8010f36:	0798      	lsls	r0, r3, #30
 8010f38:	bf49      	itett	mi
 8010f3a:	085b      	lsrmi	r3, r3, #1
 8010f3c:	089b      	lsrpl	r3, r3, #2
 8010f3e:	2001      	movmi	r0, #1
 8010f40:	600b      	strmi	r3, [r1, #0]
 8010f42:	bf5c      	itt	pl
 8010f44:	600b      	strpl	r3, [r1, #0]
 8010f46:	2002      	movpl	r0, #2
 8010f48:	4770      	bx	lr
 8010f4a:	b298      	uxth	r0, r3
 8010f4c:	b9a8      	cbnz	r0, 8010f7a <__lo0bits+0x52>
 8010f4e:	0c1b      	lsrs	r3, r3, #16
 8010f50:	2010      	movs	r0, #16
 8010f52:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010f56:	bf04      	itt	eq
 8010f58:	0a1b      	lsreq	r3, r3, #8
 8010f5a:	3008      	addeq	r0, #8
 8010f5c:	071a      	lsls	r2, r3, #28
 8010f5e:	bf04      	itt	eq
 8010f60:	091b      	lsreq	r3, r3, #4
 8010f62:	3004      	addeq	r0, #4
 8010f64:	079a      	lsls	r2, r3, #30
 8010f66:	bf04      	itt	eq
 8010f68:	089b      	lsreq	r3, r3, #2
 8010f6a:	3002      	addeq	r0, #2
 8010f6c:	07da      	lsls	r2, r3, #31
 8010f6e:	d402      	bmi.n	8010f76 <__lo0bits+0x4e>
 8010f70:	085b      	lsrs	r3, r3, #1
 8010f72:	d006      	beq.n	8010f82 <__lo0bits+0x5a>
 8010f74:	3001      	adds	r0, #1
 8010f76:	600b      	str	r3, [r1, #0]
 8010f78:	4770      	bx	lr
 8010f7a:	4610      	mov	r0, r2
 8010f7c:	e7e9      	b.n	8010f52 <__lo0bits+0x2a>
 8010f7e:	2000      	movs	r0, #0
 8010f80:	4770      	bx	lr
 8010f82:	2020      	movs	r0, #32
 8010f84:	4770      	bx	lr

08010f86 <__i2b>:
 8010f86:	b510      	push	{r4, lr}
 8010f88:	460c      	mov	r4, r1
 8010f8a:	2101      	movs	r1, #1
 8010f8c:	f7ff fee9 	bl	8010d62 <_Balloc>
 8010f90:	2201      	movs	r2, #1
 8010f92:	6144      	str	r4, [r0, #20]
 8010f94:	6102      	str	r2, [r0, #16]
 8010f96:	bd10      	pop	{r4, pc}

08010f98 <__multiply>:
 8010f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f9c:	4614      	mov	r4, r2
 8010f9e:	690a      	ldr	r2, [r1, #16]
 8010fa0:	6923      	ldr	r3, [r4, #16]
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	bfb8      	it	lt
 8010fa6:	460b      	movlt	r3, r1
 8010fa8:	4688      	mov	r8, r1
 8010faa:	bfbc      	itt	lt
 8010fac:	46a0      	movlt	r8, r4
 8010fae:	461c      	movlt	r4, r3
 8010fb0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010fb4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010fb8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010fbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010fc0:	eb07 0609 	add.w	r6, r7, r9
 8010fc4:	42b3      	cmp	r3, r6
 8010fc6:	bfb8      	it	lt
 8010fc8:	3101      	addlt	r1, #1
 8010fca:	f7ff feca 	bl	8010d62 <_Balloc>
 8010fce:	f100 0514 	add.w	r5, r0, #20
 8010fd2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010fd6:	462b      	mov	r3, r5
 8010fd8:	2200      	movs	r2, #0
 8010fda:	4573      	cmp	r3, lr
 8010fdc:	d316      	bcc.n	801100c <__multiply+0x74>
 8010fde:	f104 0214 	add.w	r2, r4, #20
 8010fe2:	f108 0114 	add.w	r1, r8, #20
 8010fe6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010fea:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010fee:	9300      	str	r3, [sp, #0]
 8010ff0:	9b00      	ldr	r3, [sp, #0]
 8010ff2:	9201      	str	r2, [sp, #4]
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	d80c      	bhi.n	8011012 <__multiply+0x7a>
 8010ff8:	2e00      	cmp	r6, #0
 8010ffa:	dd03      	ble.n	8011004 <__multiply+0x6c>
 8010ffc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011000:	2b00      	cmp	r3, #0
 8011002:	d05d      	beq.n	80110c0 <__multiply+0x128>
 8011004:	6106      	str	r6, [r0, #16]
 8011006:	b003      	add	sp, #12
 8011008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801100c:	f843 2b04 	str.w	r2, [r3], #4
 8011010:	e7e3      	b.n	8010fda <__multiply+0x42>
 8011012:	f8b2 b000 	ldrh.w	fp, [r2]
 8011016:	f1bb 0f00 	cmp.w	fp, #0
 801101a:	d023      	beq.n	8011064 <__multiply+0xcc>
 801101c:	4689      	mov	r9, r1
 801101e:	46ac      	mov	ip, r5
 8011020:	f04f 0800 	mov.w	r8, #0
 8011024:	f859 4b04 	ldr.w	r4, [r9], #4
 8011028:	f8dc a000 	ldr.w	sl, [ip]
 801102c:	b2a3      	uxth	r3, r4
 801102e:	fa1f fa8a 	uxth.w	sl, sl
 8011032:	fb0b a303 	mla	r3, fp, r3, sl
 8011036:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801103a:	f8dc 4000 	ldr.w	r4, [ip]
 801103e:	4443      	add	r3, r8
 8011040:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011044:	fb0b 840a 	mla	r4, fp, sl, r8
 8011048:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801104c:	46e2      	mov	sl, ip
 801104e:	b29b      	uxth	r3, r3
 8011050:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011054:	454f      	cmp	r7, r9
 8011056:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801105a:	f84a 3b04 	str.w	r3, [sl], #4
 801105e:	d82b      	bhi.n	80110b8 <__multiply+0x120>
 8011060:	f8cc 8004 	str.w	r8, [ip, #4]
 8011064:	9b01      	ldr	r3, [sp, #4]
 8011066:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801106a:	3204      	adds	r2, #4
 801106c:	f1ba 0f00 	cmp.w	sl, #0
 8011070:	d020      	beq.n	80110b4 <__multiply+0x11c>
 8011072:	682b      	ldr	r3, [r5, #0]
 8011074:	4689      	mov	r9, r1
 8011076:	46a8      	mov	r8, r5
 8011078:	f04f 0b00 	mov.w	fp, #0
 801107c:	f8b9 c000 	ldrh.w	ip, [r9]
 8011080:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8011084:	fb0a 440c 	mla	r4, sl, ip, r4
 8011088:	445c      	add	r4, fp
 801108a:	46c4      	mov	ip, r8
 801108c:	b29b      	uxth	r3, r3
 801108e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011092:	f84c 3b04 	str.w	r3, [ip], #4
 8011096:	f859 3b04 	ldr.w	r3, [r9], #4
 801109a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801109e:	0c1b      	lsrs	r3, r3, #16
 80110a0:	fb0a b303 	mla	r3, sl, r3, fp
 80110a4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80110a8:	454f      	cmp	r7, r9
 80110aa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80110ae:	d805      	bhi.n	80110bc <__multiply+0x124>
 80110b0:	f8c8 3004 	str.w	r3, [r8, #4]
 80110b4:	3504      	adds	r5, #4
 80110b6:	e79b      	b.n	8010ff0 <__multiply+0x58>
 80110b8:	46d4      	mov	ip, sl
 80110ba:	e7b3      	b.n	8011024 <__multiply+0x8c>
 80110bc:	46e0      	mov	r8, ip
 80110be:	e7dd      	b.n	801107c <__multiply+0xe4>
 80110c0:	3e01      	subs	r6, #1
 80110c2:	e799      	b.n	8010ff8 <__multiply+0x60>

080110c4 <__pow5mult>:
 80110c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110c8:	4615      	mov	r5, r2
 80110ca:	f012 0203 	ands.w	r2, r2, #3
 80110ce:	4606      	mov	r6, r0
 80110d0:	460f      	mov	r7, r1
 80110d2:	d007      	beq.n	80110e4 <__pow5mult+0x20>
 80110d4:	3a01      	subs	r2, #1
 80110d6:	4c21      	ldr	r4, [pc, #132]	; (801115c <__pow5mult+0x98>)
 80110d8:	2300      	movs	r3, #0
 80110da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80110de:	f7ff fe8b 	bl	8010df8 <__multadd>
 80110e2:	4607      	mov	r7, r0
 80110e4:	10ad      	asrs	r5, r5, #2
 80110e6:	d035      	beq.n	8011154 <__pow5mult+0x90>
 80110e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80110ea:	b93c      	cbnz	r4, 80110fc <__pow5mult+0x38>
 80110ec:	2010      	movs	r0, #16
 80110ee:	f7ff fe13 	bl	8010d18 <malloc>
 80110f2:	6270      	str	r0, [r6, #36]	; 0x24
 80110f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80110f8:	6004      	str	r4, [r0, #0]
 80110fa:	60c4      	str	r4, [r0, #12]
 80110fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011100:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011104:	b94c      	cbnz	r4, 801111a <__pow5mult+0x56>
 8011106:	f240 2171 	movw	r1, #625	; 0x271
 801110a:	4630      	mov	r0, r6
 801110c:	f7ff ff3b 	bl	8010f86 <__i2b>
 8011110:	2300      	movs	r3, #0
 8011112:	f8c8 0008 	str.w	r0, [r8, #8]
 8011116:	4604      	mov	r4, r0
 8011118:	6003      	str	r3, [r0, #0]
 801111a:	f04f 0800 	mov.w	r8, #0
 801111e:	07eb      	lsls	r3, r5, #31
 8011120:	d50a      	bpl.n	8011138 <__pow5mult+0x74>
 8011122:	4639      	mov	r1, r7
 8011124:	4622      	mov	r2, r4
 8011126:	4630      	mov	r0, r6
 8011128:	f7ff ff36 	bl	8010f98 <__multiply>
 801112c:	4639      	mov	r1, r7
 801112e:	4681      	mov	r9, r0
 8011130:	4630      	mov	r0, r6
 8011132:	f7ff fe4a 	bl	8010dca <_Bfree>
 8011136:	464f      	mov	r7, r9
 8011138:	106d      	asrs	r5, r5, #1
 801113a:	d00b      	beq.n	8011154 <__pow5mult+0x90>
 801113c:	6820      	ldr	r0, [r4, #0]
 801113e:	b938      	cbnz	r0, 8011150 <__pow5mult+0x8c>
 8011140:	4622      	mov	r2, r4
 8011142:	4621      	mov	r1, r4
 8011144:	4630      	mov	r0, r6
 8011146:	f7ff ff27 	bl	8010f98 <__multiply>
 801114a:	6020      	str	r0, [r4, #0]
 801114c:	f8c0 8000 	str.w	r8, [r0]
 8011150:	4604      	mov	r4, r0
 8011152:	e7e4      	b.n	801111e <__pow5mult+0x5a>
 8011154:	4638      	mov	r0, r7
 8011156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801115a:	bf00      	nop
 801115c:	08012d48 	.word	0x08012d48

08011160 <__lshift>:
 8011160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011164:	460c      	mov	r4, r1
 8011166:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801116a:	6923      	ldr	r3, [r4, #16]
 801116c:	6849      	ldr	r1, [r1, #4]
 801116e:	eb0a 0903 	add.w	r9, sl, r3
 8011172:	68a3      	ldr	r3, [r4, #8]
 8011174:	4607      	mov	r7, r0
 8011176:	4616      	mov	r6, r2
 8011178:	f109 0501 	add.w	r5, r9, #1
 801117c:	42ab      	cmp	r3, r5
 801117e:	db32      	blt.n	80111e6 <__lshift+0x86>
 8011180:	4638      	mov	r0, r7
 8011182:	f7ff fdee 	bl	8010d62 <_Balloc>
 8011186:	2300      	movs	r3, #0
 8011188:	4680      	mov	r8, r0
 801118a:	f100 0114 	add.w	r1, r0, #20
 801118e:	461a      	mov	r2, r3
 8011190:	4553      	cmp	r3, sl
 8011192:	db2b      	blt.n	80111ec <__lshift+0x8c>
 8011194:	6920      	ldr	r0, [r4, #16]
 8011196:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801119a:	f104 0314 	add.w	r3, r4, #20
 801119e:	f016 021f 	ands.w	r2, r6, #31
 80111a2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80111a6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80111aa:	d025      	beq.n	80111f8 <__lshift+0x98>
 80111ac:	f1c2 0e20 	rsb	lr, r2, #32
 80111b0:	2000      	movs	r0, #0
 80111b2:	681e      	ldr	r6, [r3, #0]
 80111b4:	468a      	mov	sl, r1
 80111b6:	4096      	lsls	r6, r2
 80111b8:	4330      	orrs	r0, r6
 80111ba:	f84a 0b04 	str.w	r0, [sl], #4
 80111be:	f853 0b04 	ldr.w	r0, [r3], #4
 80111c2:	459c      	cmp	ip, r3
 80111c4:	fa20 f00e 	lsr.w	r0, r0, lr
 80111c8:	d814      	bhi.n	80111f4 <__lshift+0x94>
 80111ca:	6048      	str	r0, [r1, #4]
 80111cc:	b108      	cbz	r0, 80111d2 <__lshift+0x72>
 80111ce:	f109 0502 	add.w	r5, r9, #2
 80111d2:	3d01      	subs	r5, #1
 80111d4:	4638      	mov	r0, r7
 80111d6:	f8c8 5010 	str.w	r5, [r8, #16]
 80111da:	4621      	mov	r1, r4
 80111dc:	f7ff fdf5 	bl	8010dca <_Bfree>
 80111e0:	4640      	mov	r0, r8
 80111e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111e6:	3101      	adds	r1, #1
 80111e8:	005b      	lsls	r3, r3, #1
 80111ea:	e7c7      	b.n	801117c <__lshift+0x1c>
 80111ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80111f0:	3301      	adds	r3, #1
 80111f2:	e7cd      	b.n	8011190 <__lshift+0x30>
 80111f4:	4651      	mov	r1, sl
 80111f6:	e7dc      	b.n	80111b2 <__lshift+0x52>
 80111f8:	3904      	subs	r1, #4
 80111fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80111fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8011202:	459c      	cmp	ip, r3
 8011204:	d8f9      	bhi.n	80111fa <__lshift+0x9a>
 8011206:	e7e4      	b.n	80111d2 <__lshift+0x72>

08011208 <__mcmp>:
 8011208:	6903      	ldr	r3, [r0, #16]
 801120a:	690a      	ldr	r2, [r1, #16]
 801120c:	1a9b      	subs	r3, r3, r2
 801120e:	b530      	push	{r4, r5, lr}
 8011210:	d10c      	bne.n	801122c <__mcmp+0x24>
 8011212:	0092      	lsls	r2, r2, #2
 8011214:	3014      	adds	r0, #20
 8011216:	3114      	adds	r1, #20
 8011218:	1884      	adds	r4, r0, r2
 801121a:	4411      	add	r1, r2
 801121c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011220:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011224:	4295      	cmp	r5, r2
 8011226:	d003      	beq.n	8011230 <__mcmp+0x28>
 8011228:	d305      	bcc.n	8011236 <__mcmp+0x2e>
 801122a:	2301      	movs	r3, #1
 801122c:	4618      	mov	r0, r3
 801122e:	bd30      	pop	{r4, r5, pc}
 8011230:	42a0      	cmp	r0, r4
 8011232:	d3f3      	bcc.n	801121c <__mcmp+0x14>
 8011234:	e7fa      	b.n	801122c <__mcmp+0x24>
 8011236:	f04f 33ff 	mov.w	r3, #4294967295
 801123a:	e7f7      	b.n	801122c <__mcmp+0x24>

0801123c <__mdiff>:
 801123c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011240:	460d      	mov	r5, r1
 8011242:	4607      	mov	r7, r0
 8011244:	4611      	mov	r1, r2
 8011246:	4628      	mov	r0, r5
 8011248:	4614      	mov	r4, r2
 801124a:	f7ff ffdd 	bl	8011208 <__mcmp>
 801124e:	1e06      	subs	r6, r0, #0
 8011250:	d108      	bne.n	8011264 <__mdiff+0x28>
 8011252:	4631      	mov	r1, r6
 8011254:	4638      	mov	r0, r7
 8011256:	f7ff fd84 	bl	8010d62 <_Balloc>
 801125a:	2301      	movs	r3, #1
 801125c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011264:	bfa4      	itt	ge
 8011266:	4623      	movge	r3, r4
 8011268:	462c      	movge	r4, r5
 801126a:	4638      	mov	r0, r7
 801126c:	6861      	ldr	r1, [r4, #4]
 801126e:	bfa6      	itte	ge
 8011270:	461d      	movge	r5, r3
 8011272:	2600      	movge	r6, #0
 8011274:	2601      	movlt	r6, #1
 8011276:	f7ff fd74 	bl	8010d62 <_Balloc>
 801127a:	692b      	ldr	r3, [r5, #16]
 801127c:	60c6      	str	r6, [r0, #12]
 801127e:	6926      	ldr	r6, [r4, #16]
 8011280:	f105 0914 	add.w	r9, r5, #20
 8011284:	f104 0214 	add.w	r2, r4, #20
 8011288:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801128c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011290:	f100 0514 	add.w	r5, r0, #20
 8011294:	f04f 0e00 	mov.w	lr, #0
 8011298:	f852 ab04 	ldr.w	sl, [r2], #4
 801129c:	f859 4b04 	ldr.w	r4, [r9], #4
 80112a0:	fa1e f18a 	uxtah	r1, lr, sl
 80112a4:	b2a3      	uxth	r3, r4
 80112a6:	1ac9      	subs	r1, r1, r3
 80112a8:	0c23      	lsrs	r3, r4, #16
 80112aa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80112ae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80112b2:	b289      	uxth	r1, r1
 80112b4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80112b8:	45c8      	cmp	r8, r9
 80112ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80112be:	4694      	mov	ip, r2
 80112c0:	f845 3b04 	str.w	r3, [r5], #4
 80112c4:	d8e8      	bhi.n	8011298 <__mdiff+0x5c>
 80112c6:	45bc      	cmp	ip, r7
 80112c8:	d304      	bcc.n	80112d4 <__mdiff+0x98>
 80112ca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80112ce:	b183      	cbz	r3, 80112f2 <__mdiff+0xb6>
 80112d0:	6106      	str	r6, [r0, #16]
 80112d2:	e7c5      	b.n	8011260 <__mdiff+0x24>
 80112d4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80112d8:	fa1e f381 	uxtah	r3, lr, r1
 80112dc:	141a      	asrs	r2, r3, #16
 80112de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80112e2:	b29b      	uxth	r3, r3
 80112e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80112e8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80112ec:	f845 3b04 	str.w	r3, [r5], #4
 80112f0:	e7e9      	b.n	80112c6 <__mdiff+0x8a>
 80112f2:	3e01      	subs	r6, #1
 80112f4:	e7e9      	b.n	80112ca <__mdiff+0x8e>
	...

080112f8 <__ulp>:
 80112f8:	4b12      	ldr	r3, [pc, #72]	; (8011344 <__ulp+0x4c>)
 80112fa:	ee10 2a90 	vmov	r2, s1
 80112fe:	401a      	ands	r2, r3
 8011300:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8011304:	2b00      	cmp	r3, #0
 8011306:	dd04      	ble.n	8011312 <__ulp+0x1a>
 8011308:	2000      	movs	r0, #0
 801130a:	4619      	mov	r1, r3
 801130c:	ec41 0b10 	vmov	d0, r0, r1
 8011310:	4770      	bx	lr
 8011312:	425b      	negs	r3, r3
 8011314:	151b      	asrs	r3, r3, #20
 8011316:	2b13      	cmp	r3, #19
 8011318:	f04f 0000 	mov.w	r0, #0
 801131c:	f04f 0100 	mov.w	r1, #0
 8011320:	dc04      	bgt.n	801132c <__ulp+0x34>
 8011322:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011326:	fa42 f103 	asr.w	r1, r2, r3
 801132a:	e7ef      	b.n	801130c <__ulp+0x14>
 801132c:	3b14      	subs	r3, #20
 801132e:	2b1e      	cmp	r3, #30
 8011330:	f04f 0201 	mov.w	r2, #1
 8011334:	bfda      	itte	le
 8011336:	f1c3 031f 	rsble	r3, r3, #31
 801133a:	fa02 f303 	lslle.w	r3, r2, r3
 801133e:	4613      	movgt	r3, r2
 8011340:	4618      	mov	r0, r3
 8011342:	e7e3      	b.n	801130c <__ulp+0x14>
 8011344:	7ff00000 	.word	0x7ff00000

08011348 <__b2d>:
 8011348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801134a:	6905      	ldr	r5, [r0, #16]
 801134c:	f100 0714 	add.w	r7, r0, #20
 8011350:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011354:	1f2e      	subs	r6, r5, #4
 8011356:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801135a:	4620      	mov	r0, r4
 801135c:	f7ff fdc5 	bl	8010eea <__hi0bits>
 8011360:	f1c0 0320 	rsb	r3, r0, #32
 8011364:	280a      	cmp	r0, #10
 8011366:	600b      	str	r3, [r1, #0]
 8011368:	f8df c074 	ldr.w	ip, [pc, #116]	; 80113e0 <__b2d+0x98>
 801136c:	dc14      	bgt.n	8011398 <__b2d+0x50>
 801136e:	f1c0 0e0b 	rsb	lr, r0, #11
 8011372:	fa24 f10e 	lsr.w	r1, r4, lr
 8011376:	42b7      	cmp	r7, r6
 8011378:	ea41 030c 	orr.w	r3, r1, ip
 801137c:	bf34      	ite	cc
 801137e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011382:	2100      	movcs	r1, #0
 8011384:	3015      	adds	r0, #21
 8011386:	fa04 f000 	lsl.w	r0, r4, r0
 801138a:	fa21 f10e 	lsr.w	r1, r1, lr
 801138e:	ea40 0201 	orr.w	r2, r0, r1
 8011392:	ec43 2b10 	vmov	d0, r2, r3
 8011396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011398:	42b7      	cmp	r7, r6
 801139a:	bf3a      	itte	cc
 801139c:	f1a5 0608 	subcc.w	r6, r5, #8
 80113a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80113a4:	2100      	movcs	r1, #0
 80113a6:	380b      	subs	r0, #11
 80113a8:	d015      	beq.n	80113d6 <__b2d+0x8e>
 80113aa:	4084      	lsls	r4, r0
 80113ac:	f1c0 0520 	rsb	r5, r0, #32
 80113b0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80113b4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80113b8:	42be      	cmp	r6, r7
 80113ba:	fa21 fc05 	lsr.w	ip, r1, r5
 80113be:	ea44 030c 	orr.w	r3, r4, ip
 80113c2:	bf8c      	ite	hi
 80113c4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80113c8:	2400      	movls	r4, #0
 80113ca:	fa01 f000 	lsl.w	r0, r1, r0
 80113ce:	40ec      	lsrs	r4, r5
 80113d0:	ea40 0204 	orr.w	r2, r0, r4
 80113d4:	e7dd      	b.n	8011392 <__b2d+0x4a>
 80113d6:	ea44 030c 	orr.w	r3, r4, ip
 80113da:	460a      	mov	r2, r1
 80113dc:	e7d9      	b.n	8011392 <__b2d+0x4a>
 80113de:	bf00      	nop
 80113e0:	3ff00000 	.word	0x3ff00000

080113e4 <__d2b>:
 80113e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80113e8:	460e      	mov	r6, r1
 80113ea:	2101      	movs	r1, #1
 80113ec:	ec59 8b10 	vmov	r8, r9, d0
 80113f0:	4615      	mov	r5, r2
 80113f2:	f7ff fcb6 	bl	8010d62 <_Balloc>
 80113f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80113fa:	4607      	mov	r7, r0
 80113fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011400:	bb34      	cbnz	r4, 8011450 <__d2b+0x6c>
 8011402:	9301      	str	r3, [sp, #4]
 8011404:	f1b8 0300 	subs.w	r3, r8, #0
 8011408:	d027      	beq.n	801145a <__d2b+0x76>
 801140a:	a802      	add	r0, sp, #8
 801140c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011410:	f7ff fd8a 	bl	8010f28 <__lo0bits>
 8011414:	9900      	ldr	r1, [sp, #0]
 8011416:	b1f0      	cbz	r0, 8011456 <__d2b+0x72>
 8011418:	9a01      	ldr	r2, [sp, #4]
 801141a:	f1c0 0320 	rsb	r3, r0, #32
 801141e:	fa02 f303 	lsl.w	r3, r2, r3
 8011422:	430b      	orrs	r3, r1
 8011424:	40c2      	lsrs	r2, r0
 8011426:	617b      	str	r3, [r7, #20]
 8011428:	9201      	str	r2, [sp, #4]
 801142a:	9b01      	ldr	r3, [sp, #4]
 801142c:	61bb      	str	r3, [r7, #24]
 801142e:	2b00      	cmp	r3, #0
 8011430:	bf14      	ite	ne
 8011432:	2102      	movne	r1, #2
 8011434:	2101      	moveq	r1, #1
 8011436:	6139      	str	r1, [r7, #16]
 8011438:	b1c4      	cbz	r4, 801146c <__d2b+0x88>
 801143a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801143e:	4404      	add	r4, r0
 8011440:	6034      	str	r4, [r6, #0]
 8011442:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011446:	6028      	str	r0, [r5, #0]
 8011448:	4638      	mov	r0, r7
 801144a:	b003      	add	sp, #12
 801144c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011454:	e7d5      	b.n	8011402 <__d2b+0x1e>
 8011456:	6179      	str	r1, [r7, #20]
 8011458:	e7e7      	b.n	801142a <__d2b+0x46>
 801145a:	a801      	add	r0, sp, #4
 801145c:	f7ff fd64 	bl	8010f28 <__lo0bits>
 8011460:	9b01      	ldr	r3, [sp, #4]
 8011462:	617b      	str	r3, [r7, #20]
 8011464:	2101      	movs	r1, #1
 8011466:	6139      	str	r1, [r7, #16]
 8011468:	3020      	adds	r0, #32
 801146a:	e7e5      	b.n	8011438 <__d2b+0x54>
 801146c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011470:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011474:	6030      	str	r0, [r6, #0]
 8011476:	6918      	ldr	r0, [r3, #16]
 8011478:	f7ff fd37 	bl	8010eea <__hi0bits>
 801147c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8011480:	e7e1      	b.n	8011446 <__d2b+0x62>

08011482 <__ratio>:
 8011482:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011486:	4688      	mov	r8, r1
 8011488:	4669      	mov	r1, sp
 801148a:	4681      	mov	r9, r0
 801148c:	f7ff ff5c 	bl	8011348 <__b2d>
 8011490:	a901      	add	r1, sp, #4
 8011492:	4640      	mov	r0, r8
 8011494:	ec57 6b10 	vmov	r6, r7, d0
 8011498:	f7ff ff56 	bl	8011348 <__b2d>
 801149c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80114a0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80114a4:	eba3 0c02 	sub.w	ip, r3, r2
 80114a8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80114ac:	1a9b      	subs	r3, r3, r2
 80114ae:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80114b2:	ec5b ab10 	vmov	sl, fp, d0
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	bfce      	itee	gt
 80114ba:	463a      	movgt	r2, r7
 80114bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80114c0:	465a      	movle	r2, fp
 80114c2:	4659      	mov	r1, fp
 80114c4:	463d      	mov	r5, r7
 80114c6:	bfd4      	ite	le
 80114c8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80114cc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80114d0:	4630      	mov	r0, r6
 80114d2:	ee10 2a10 	vmov	r2, s0
 80114d6:	460b      	mov	r3, r1
 80114d8:	4629      	mov	r1, r5
 80114da:	f7ef f9cf 	bl	800087c <__aeabi_ddiv>
 80114de:	ec41 0b10 	vmov	d0, r0, r1
 80114e2:	b003      	add	sp, #12
 80114e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080114e8 <__copybits>:
 80114e8:	3901      	subs	r1, #1
 80114ea:	b510      	push	{r4, lr}
 80114ec:	1149      	asrs	r1, r1, #5
 80114ee:	6914      	ldr	r4, [r2, #16]
 80114f0:	3101      	adds	r1, #1
 80114f2:	f102 0314 	add.w	r3, r2, #20
 80114f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80114fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80114fe:	42a3      	cmp	r3, r4
 8011500:	4602      	mov	r2, r0
 8011502:	d303      	bcc.n	801150c <__copybits+0x24>
 8011504:	2300      	movs	r3, #0
 8011506:	428a      	cmp	r2, r1
 8011508:	d305      	bcc.n	8011516 <__copybits+0x2e>
 801150a:	bd10      	pop	{r4, pc}
 801150c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011510:	f840 2b04 	str.w	r2, [r0], #4
 8011514:	e7f3      	b.n	80114fe <__copybits+0x16>
 8011516:	f842 3b04 	str.w	r3, [r2], #4
 801151a:	e7f4      	b.n	8011506 <__copybits+0x1e>

0801151c <__any_on>:
 801151c:	f100 0214 	add.w	r2, r0, #20
 8011520:	6900      	ldr	r0, [r0, #16]
 8011522:	114b      	asrs	r3, r1, #5
 8011524:	4298      	cmp	r0, r3
 8011526:	b510      	push	{r4, lr}
 8011528:	db11      	blt.n	801154e <__any_on+0x32>
 801152a:	dd0a      	ble.n	8011542 <__any_on+0x26>
 801152c:	f011 011f 	ands.w	r1, r1, #31
 8011530:	d007      	beq.n	8011542 <__any_on+0x26>
 8011532:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011536:	fa24 f001 	lsr.w	r0, r4, r1
 801153a:	fa00 f101 	lsl.w	r1, r0, r1
 801153e:	428c      	cmp	r4, r1
 8011540:	d10b      	bne.n	801155a <__any_on+0x3e>
 8011542:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011546:	4293      	cmp	r3, r2
 8011548:	d803      	bhi.n	8011552 <__any_on+0x36>
 801154a:	2000      	movs	r0, #0
 801154c:	bd10      	pop	{r4, pc}
 801154e:	4603      	mov	r3, r0
 8011550:	e7f7      	b.n	8011542 <__any_on+0x26>
 8011552:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011556:	2900      	cmp	r1, #0
 8011558:	d0f5      	beq.n	8011546 <__any_on+0x2a>
 801155a:	2001      	movs	r0, #1
 801155c:	e7f6      	b.n	801154c <__any_on+0x30>

0801155e <_calloc_r>:
 801155e:	b538      	push	{r3, r4, r5, lr}
 8011560:	fb02 f401 	mul.w	r4, r2, r1
 8011564:	4621      	mov	r1, r4
 8011566:	f000 f857 	bl	8011618 <_malloc_r>
 801156a:	4605      	mov	r5, r0
 801156c:	b118      	cbz	r0, 8011576 <_calloc_r+0x18>
 801156e:	4622      	mov	r2, r4
 8011570:	2100      	movs	r1, #0
 8011572:	f7fc f90f 	bl	800d794 <memset>
 8011576:	4628      	mov	r0, r5
 8011578:	bd38      	pop	{r3, r4, r5, pc}
	...

0801157c <_free_r>:
 801157c:	b538      	push	{r3, r4, r5, lr}
 801157e:	4605      	mov	r5, r0
 8011580:	2900      	cmp	r1, #0
 8011582:	d045      	beq.n	8011610 <_free_r+0x94>
 8011584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011588:	1f0c      	subs	r4, r1, #4
 801158a:	2b00      	cmp	r3, #0
 801158c:	bfb8      	it	lt
 801158e:	18e4      	addlt	r4, r4, r3
 8011590:	f000 ffa5 	bl	80124de <__malloc_lock>
 8011594:	4a1f      	ldr	r2, [pc, #124]	; (8011614 <_free_r+0x98>)
 8011596:	6813      	ldr	r3, [r2, #0]
 8011598:	4610      	mov	r0, r2
 801159a:	b933      	cbnz	r3, 80115aa <_free_r+0x2e>
 801159c:	6063      	str	r3, [r4, #4]
 801159e:	6014      	str	r4, [r2, #0]
 80115a0:	4628      	mov	r0, r5
 80115a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115a6:	f000 bf9b 	b.w	80124e0 <__malloc_unlock>
 80115aa:	42a3      	cmp	r3, r4
 80115ac:	d90c      	bls.n	80115c8 <_free_r+0x4c>
 80115ae:	6821      	ldr	r1, [r4, #0]
 80115b0:	1862      	adds	r2, r4, r1
 80115b2:	4293      	cmp	r3, r2
 80115b4:	bf04      	itt	eq
 80115b6:	681a      	ldreq	r2, [r3, #0]
 80115b8:	685b      	ldreq	r3, [r3, #4]
 80115ba:	6063      	str	r3, [r4, #4]
 80115bc:	bf04      	itt	eq
 80115be:	1852      	addeq	r2, r2, r1
 80115c0:	6022      	streq	r2, [r4, #0]
 80115c2:	6004      	str	r4, [r0, #0]
 80115c4:	e7ec      	b.n	80115a0 <_free_r+0x24>
 80115c6:	4613      	mov	r3, r2
 80115c8:	685a      	ldr	r2, [r3, #4]
 80115ca:	b10a      	cbz	r2, 80115d0 <_free_r+0x54>
 80115cc:	42a2      	cmp	r2, r4
 80115ce:	d9fa      	bls.n	80115c6 <_free_r+0x4a>
 80115d0:	6819      	ldr	r1, [r3, #0]
 80115d2:	1858      	adds	r0, r3, r1
 80115d4:	42a0      	cmp	r0, r4
 80115d6:	d10b      	bne.n	80115f0 <_free_r+0x74>
 80115d8:	6820      	ldr	r0, [r4, #0]
 80115da:	4401      	add	r1, r0
 80115dc:	1858      	adds	r0, r3, r1
 80115de:	4282      	cmp	r2, r0
 80115e0:	6019      	str	r1, [r3, #0]
 80115e2:	d1dd      	bne.n	80115a0 <_free_r+0x24>
 80115e4:	6810      	ldr	r0, [r2, #0]
 80115e6:	6852      	ldr	r2, [r2, #4]
 80115e8:	605a      	str	r2, [r3, #4]
 80115ea:	4401      	add	r1, r0
 80115ec:	6019      	str	r1, [r3, #0]
 80115ee:	e7d7      	b.n	80115a0 <_free_r+0x24>
 80115f0:	d902      	bls.n	80115f8 <_free_r+0x7c>
 80115f2:	230c      	movs	r3, #12
 80115f4:	602b      	str	r3, [r5, #0]
 80115f6:	e7d3      	b.n	80115a0 <_free_r+0x24>
 80115f8:	6820      	ldr	r0, [r4, #0]
 80115fa:	1821      	adds	r1, r4, r0
 80115fc:	428a      	cmp	r2, r1
 80115fe:	bf04      	itt	eq
 8011600:	6811      	ldreq	r1, [r2, #0]
 8011602:	6852      	ldreq	r2, [r2, #4]
 8011604:	6062      	str	r2, [r4, #4]
 8011606:	bf04      	itt	eq
 8011608:	1809      	addeq	r1, r1, r0
 801160a:	6021      	streq	r1, [r4, #0]
 801160c:	605c      	str	r4, [r3, #4]
 801160e:	e7c7      	b.n	80115a0 <_free_r+0x24>
 8011610:	bd38      	pop	{r3, r4, r5, pc}
 8011612:	bf00      	nop
 8011614:	20000470 	.word	0x20000470

08011618 <_malloc_r>:
 8011618:	b570      	push	{r4, r5, r6, lr}
 801161a:	1ccd      	adds	r5, r1, #3
 801161c:	f025 0503 	bic.w	r5, r5, #3
 8011620:	3508      	adds	r5, #8
 8011622:	2d0c      	cmp	r5, #12
 8011624:	bf38      	it	cc
 8011626:	250c      	movcc	r5, #12
 8011628:	2d00      	cmp	r5, #0
 801162a:	4606      	mov	r6, r0
 801162c:	db01      	blt.n	8011632 <_malloc_r+0x1a>
 801162e:	42a9      	cmp	r1, r5
 8011630:	d903      	bls.n	801163a <_malloc_r+0x22>
 8011632:	230c      	movs	r3, #12
 8011634:	6033      	str	r3, [r6, #0]
 8011636:	2000      	movs	r0, #0
 8011638:	bd70      	pop	{r4, r5, r6, pc}
 801163a:	f000 ff50 	bl	80124de <__malloc_lock>
 801163e:	4a21      	ldr	r2, [pc, #132]	; (80116c4 <_malloc_r+0xac>)
 8011640:	6814      	ldr	r4, [r2, #0]
 8011642:	4621      	mov	r1, r4
 8011644:	b991      	cbnz	r1, 801166c <_malloc_r+0x54>
 8011646:	4c20      	ldr	r4, [pc, #128]	; (80116c8 <_malloc_r+0xb0>)
 8011648:	6823      	ldr	r3, [r4, #0]
 801164a:	b91b      	cbnz	r3, 8011654 <_malloc_r+0x3c>
 801164c:	4630      	mov	r0, r6
 801164e:	f000 fde3 	bl	8012218 <_sbrk_r>
 8011652:	6020      	str	r0, [r4, #0]
 8011654:	4629      	mov	r1, r5
 8011656:	4630      	mov	r0, r6
 8011658:	f000 fdde 	bl	8012218 <_sbrk_r>
 801165c:	1c43      	adds	r3, r0, #1
 801165e:	d124      	bne.n	80116aa <_malloc_r+0x92>
 8011660:	230c      	movs	r3, #12
 8011662:	6033      	str	r3, [r6, #0]
 8011664:	4630      	mov	r0, r6
 8011666:	f000 ff3b 	bl	80124e0 <__malloc_unlock>
 801166a:	e7e4      	b.n	8011636 <_malloc_r+0x1e>
 801166c:	680b      	ldr	r3, [r1, #0]
 801166e:	1b5b      	subs	r3, r3, r5
 8011670:	d418      	bmi.n	80116a4 <_malloc_r+0x8c>
 8011672:	2b0b      	cmp	r3, #11
 8011674:	d90f      	bls.n	8011696 <_malloc_r+0x7e>
 8011676:	600b      	str	r3, [r1, #0]
 8011678:	50cd      	str	r5, [r1, r3]
 801167a:	18cc      	adds	r4, r1, r3
 801167c:	4630      	mov	r0, r6
 801167e:	f000 ff2f 	bl	80124e0 <__malloc_unlock>
 8011682:	f104 000b 	add.w	r0, r4, #11
 8011686:	1d23      	adds	r3, r4, #4
 8011688:	f020 0007 	bic.w	r0, r0, #7
 801168c:	1ac3      	subs	r3, r0, r3
 801168e:	d0d3      	beq.n	8011638 <_malloc_r+0x20>
 8011690:	425a      	negs	r2, r3
 8011692:	50e2      	str	r2, [r4, r3]
 8011694:	e7d0      	b.n	8011638 <_malloc_r+0x20>
 8011696:	428c      	cmp	r4, r1
 8011698:	684b      	ldr	r3, [r1, #4]
 801169a:	bf16      	itet	ne
 801169c:	6063      	strne	r3, [r4, #4]
 801169e:	6013      	streq	r3, [r2, #0]
 80116a0:	460c      	movne	r4, r1
 80116a2:	e7eb      	b.n	801167c <_malloc_r+0x64>
 80116a4:	460c      	mov	r4, r1
 80116a6:	6849      	ldr	r1, [r1, #4]
 80116a8:	e7cc      	b.n	8011644 <_malloc_r+0x2c>
 80116aa:	1cc4      	adds	r4, r0, #3
 80116ac:	f024 0403 	bic.w	r4, r4, #3
 80116b0:	42a0      	cmp	r0, r4
 80116b2:	d005      	beq.n	80116c0 <_malloc_r+0xa8>
 80116b4:	1a21      	subs	r1, r4, r0
 80116b6:	4630      	mov	r0, r6
 80116b8:	f000 fdae 	bl	8012218 <_sbrk_r>
 80116bc:	3001      	adds	r0, #1
 80116be:	d0cf      	beq.n	8011660 <_malloc_r+0x48>
 80116c0:	6025      	str	r5, [r4, #0]
 80116c2:	e7db      	b.n	801167c <_malloc_r+0x64>
 80116c4:	20000470 	.word	0x20000470
 80116c8:	20000474 	.word	0x20000474

080116cc <__ssputs_r>:
 80116cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116d0:	688e      	ldr	r6, [r1, #8]
 80116d2:	429e      	cmp	r6, r3
 80116d4:	4682      	mov	sl, r0
 80116d6:	460c      	mov	r4, r1
 80116d8:	4690      	mov	r8, r2
 80116da:	4699      	mov	r9, r3
 80116dc:	d837      	bhi.n	801174e <__ssputs_r+0x82>
 80116de:	898a      	ldrh	r2, [r1, #12]
 80116e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80116e4:	d031      	beq.n	801174a <__ssputs_r+0x7e>
 80116e6:	6825      	ldr	r5, [r4, #0]
 80116e8:	6909      	ldr	r1, [r1, #16]
 80116ea:	1a6f      	subs	r7, r5, r1
 80116ec:	6965      	ldr	r5, [r4, #20]
 80116ee:	2302      	movs	r3, #2
 80116f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80116f4:	fb95 f5f3 	sdiv	r5, r5, r3
 80116f8:	f109 0301 	add.w	r3, r9, #1
 80116fc:	443b      	add	r3, r7
 80116fe:	429d      	cmp	r5, r3
 8011700:	bf38      	it	cc
 8011702:	461d      	movcc	r5, r3
 8011704:	0553      	lsls	r3, r2, #21
 8011706:	d530      	bpl.n	801176a <__ssputs_r+0x9e>
 8011708:	4629      	mov	r1, r5
 801170a:	f7ff ff85 	bl	8011618 <_malloc_r>
 801170e:	4606      	mov	r6, r0
 8011710:	b950      	cbnz	r0, 8011728 <__ssputs_r+0x5c>
 8011712:	230c      	movs	r3, #12
 8011714:	f8ca 3000 	str.w	r3, [sl]
 8011718:	89a3      	ldrh	r3, [r4, #12]
 801171a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801171e:	81a3      	strh	r3, [r4, #12]
 8011720:	f04f 30ff 	mov.w	r0, #4294967295
 8011724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011728:	463a      	mov	r2, r7
 801172a:	6921      	ldr	r1, [r4, #16]
 801172c:	f7ff fb0e 	bl	8010d4c <memcpy>
 8011730:	89a3      	ldrh	r3, [r4, #12]
 8011732:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801173a:	81a3      	strh	r3, [r4, #12]
 801173c:	6126      	str	r6, [r4, #16]
 801173e:	6165      	str	r5, [r4, #20]
 8011740:	443e      	add	r6, r7
 8011742:	1bed      	subs	r5, r5, r7
 8011744:	6026      	str	r6, [r4, #0]
 8011746:	60a5      	str	r5, [r4, #8]
 8011748:	464e      	mov	r6, r9
 801174a:	454e      	cmp	r6, r9
 801174c:	d900      	bls.n	8011750 <__ssputs_r+0x84>
 801174e:	464e      	mov	r6, r9
 8011750:	4632      	mov	r2, r6
 8011752:	4641      	mov	r1, r8
 8011754:	6820      	ldr	r0, [r4, #0]
 8011756:	f000 fea9 	bl	80124ac <memmove>
 801175a:	68a3      	ldr	r3, [r4, #8]
 801175c:	1b9b      	subs	r3, r3, r6
 801175e:	60a3      	str	r3, [r4, #8]
 8011760:	6823      	ldr	r3, [r4, #0]
 8011762:	441e      	add	r6, r3
 8011764:	6026      	str	r6, [r4, #0]
 8011766:	2000      	movs	r0, #0
 8011768:	e7dc      	b.n	8011724 <__ssputs_r+0x58>
 801176a:	462a      	mov	r2, r5
 801176c:	f000 feb9 	bl	80124e2 <_realloc_r>
 8011770:	4606      	mov	r6, r0
 8011772:	2800      	cmp	r0, #0
 8011774:	d1e2      	bne.n	801173c <__ssputs_r+0x70>
 8011776:	6921      	ldr	r1, [r4, #16]
 8011778:	4650      	mov	r0, sl
 801177a:	f7ff feff 	bl	801157c <_free_r>
 801177e:	e7c8      	b.n	8011712 <__ssputs_r+0x46>

08011780 <_svfiprintf_r>:
 8011780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011784:	461d      	mov	r5, r3
 8011786:	898b      	ldrh	r3, [r1, #12]
 8011788:	061f      	lsls	r7, r3, #24
 801178a:	b09d      	sub	sp, #116	; 0x74
 801178c:	4680      	mov	r8, r0
 801178e:	460c      	mov	r4, r1
 8011790:	4616      	mov	r6, r2
 8011792:	d50f      	bpl.n	80117b4 <_svfiprintf_r+0x34>
 8011794:	690b      	ldr	r3, [r1, #16]
 8011796:	b96b      	cbnz	r3, 80117b4 <_svfiprintf_r+0x34>
 8011798:	2140      	movs	r1, #64	; 0x40
 801179a:	f7ff ff3d 	bl	8011618 <_malloc_r>
 801179e:	6020      	str	r0, [r4, #0]
 80117a0:	6120      	str	r0, [r4, #16]
 80117a2:	b928      	cbnz	r0, 80117b0 <_svfiprintf_r+0x30>
 80117a4:	230c      	movs	r3, #12
 80117a6:	f8c8 3000 	str.w	r3, [r8]
 80117aa:	f04f 30ff 	mov.w	r0, #4294967295
 80117ae:	e0c8      	b.n	8011942 <_svfiprintf_r+0x1c2>
 80117b0:	2340      	movs	r3, #64	; 0x40
 80117b2:	6163      	str	r3, [r4, #20]
 80117b4:	2300      	movs	r3, #0
 80117b6:	9309      	str	r3, [sp, #36]	; 0x24
 80117b8:	2320      	movs	r3, #32
 80117ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80117be:	2330      	movs	r3, #48	; 0x30
 80117c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80117c4:	9503      	str	r5, [sp, #12]
 80117c6:	f04f 0b01 	mov.w	fp, #1
 80117ca:	4637      	mov	r7, r6
 80117cc:	463d      	mov	r5, r7
 80117ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80117d2:	b10b      	cbz	r3, 80117d8 <_svfiprintf_r+0x58>
 80117d4:	2b25      	cmp	r3, #37	; 0x25
 80117d6:	d13e      	bne.n	8011856 <_svfiprintf_r+0xd6>
 80117d8:	ebb7 0a06 	subs.w	sl, r7, r6
 80117dc:	d00b      	beq.n	80117f6 <_svfiprintf_r+0x76>
 80117de:	4653      	mov	r3, sl
 80117e0:	4632      	mov	r2, r6
 80117e2:	4621      	mov	r1, r4
 80117e4:	4640      	mov	r0, r8
 80117e6:	f7ff ff71 	bl	80116cc <__ssputs_r>
 80117ea:	3001      	adds	r0, #1
 80117ec:	f000 80a4 	beq.w	8011938 <_svfiprintf_r+0x1b8>
 80117f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117f2:	4453      	add	r3, sl
 80117f4:	9309      	str	r3, [sp, #36]	; 0x24
 80117f6:	783b      	ldrb	r3, [r7, #0]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	f000 809d 	beq.w	8011938 <_svfiprintf_r+0x1b8>
 80117fe:	2300      	movs	r3, #0
 8011800:	f04f 32ff 	mov.w	r2, #4294967295
 8011804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011808:	9304      	str	r3, [sp, #16]
 801180a:	9307      	str	r3, [sp, #28]
 801180c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011810:	931a      	str	r3, [sp, #104]	; 0x68
 8011812:	462f      	mov	r7, r5
 8011814:	2205      	movs	r2, #5
 8011816:	f817 1b01 	ldrb.w	r1, [r7], #1
 801181a:	4850      	ldr	r0, [pc, #320]	; (801195c <_svfiprintf_r+0x1dc>)
 801181c:	f7ee fcf8 	bl	8000210 <memchr>
 8011820:	9b04      	ldr	r3, [sp, #16]
 8011822:	b9d0      	cbnz	r0, 801185a <_svfiprintf_r+0xda>
 8011824:	06d9      	lsls	r1, r3, #27
 8011826:	bf44      	itt	mi
 8011828:	2220      	movmi	r2, #32
 801182a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801182e:	071a      	lsls	r2, r3, #28
 8011830:	bf44      	itt	mi
 8011832:	222b      	movmi	r2, #43	; 0x2b
 8011834:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011838:	782a      	ldrb	r2, [r5, #0]
 801183a:	2a2a      	cmp	r2, #42	; 0x2a
 801183c:	d015      	beq.n	801186a <_svfiprintf_r+0xea>
 801183e:	9a07      	ldr	r2, [sp, #28]
 8011840:	462f      	mov	r7, r5
 8011842:	2000      	movs	r0, #0
 8011844:	250a      	movs	r5, #10
 8011846:	4639      	mov	r1, r7
 8011848:	f811 3b01 	ldrb.w	r3, [r1], #1
 801184c:	3b30      	subs	r3, #48	; 0x30
 801184e:	2b09      	cmp	r3, #9
 8011850:	d94d      	bls.n	80118ee <_svfiprintf_r+0x16e>
 8011852:	b1b8      	cbz	r0, 8011884 <_svfiprintf_r+0x104>
 8011854:	e00f      	b.n	8011876 <_svfiprintf_r+0xf6>
 8011856:	462f      	mov	r7, r5
 8011858:	e7b8      	b.n	80117cc <_svfiprintf_r+0x4c>
 801185a:	4a40      	ldr	r2, [pc, #256]	; (801195c <_svfiprintf_r+0x1dc>)
 801185c:	1a80      	subs	r0, r0, r2
 801185e:	fa0b f000 	lsl.w	r0, fp, r0
 8011862:	4318      	orrs	r0, r3
 8011864:	9004      	str	r0, [sp, #16]
 8011866:	463d      	mov	r5, r7
 8011868:	e7d3      	b.n	8011812 <_svfiprintf_r+0x92>
 801186a:	9a03      	ldr	r2, [sp, #12]
 801186c:	1d11      	adds	r1, r2, #4
 801186e:	6812      	ldr	r2, [r2, #0]
 8011870:	9103      	str	r1, [sp, #12]
 8011872:	2a00      	cmp	r2, #0
 8011874:	db01      	blt.n	801187a <_svfiprintf_r+0xfa>
 8011876:	9207      	str	r2, [sp, #28]
 8011878:	e004      	b.n	8011884 <_svfiprintf_r+0x104>
 801187a:	4252      	negs	r2, r2
 801187c:	f043 0302 	orr.w	r3, r3, #2
 8011880:	9207      	str	r2, [sp, #28]
 8011882:	9304      	str	r3, [sp, #16]
 8011884:	783b      	ldrb	r3, [r7, #0]
 8011886:	2b2e      	cmp	r3, #46	; 0x2e
 8011888:	d10c      	bne.n	80118a4 <_svfiprintf_r+0x124>
 801188a:	787b      	ldrb	r3, [r7, #1]
 801188c:	2b2a      	cmp	r3, #42	; 0x2a
 801188e:	d133      	bne.n	80118f8 <_svfiprintf_r+0x178>
 8011890:	9b03      	ldr	r3, [sp, #12]
 8011892:	1d1a      	adds	r2, r3, #4
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	9203      	str	r2, [sp, #12]
 8011898:	2b00      	cmp	r3, #0
 801189a:	bfb8      	it	lt
 801189c:	f04f 33ff 	movlt.w	r3, #4294967295
 80118a0:	3702      	adds	r7, #2
 80118a2:	9305      	str	r3, [sp, #20]
 80118a4:	4d2e      	ldr	r5, [pc, #184]	; (8011960 <_svfiprintf_r+0x1e0>)
 80118a6:	7839      	ldrb	r1, [r7, #0]
 80118a8:	2203      	movs	r2, #3
 80118aa:	4628      	mov	r0, r5
 80118ac:	f7ee fcb0 	bl	8000210 <memchr>
 80118b0:	b138      	cbz	r0, 80118c2 <_svfiprintf_r+0x142>
 80118b2:	2340      	movs	r3, #64	; 0x40
 80118b4:	1b40      	subs	r0, r0, r5
 80118b6:	fa03 f000 	lsl.w	r0, r3, r0
 80118ba:	9b04      	ldr	r3, [sp, #16]
 80118bc:	4303      	orrs	r3, r0
 80118be:	3701      	adds	r7, #1
 80118c0:	9304      	str	r3, [sp, #16]
 80118c2:	7839      	ldrb	r1, [r7, #0]
 80118c4:	4827      	ldr	r0, [pc, #156]	; (8011964 <_svfiprintf_r+0x1e4>)
 80118c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80118ca:	2206      	movs	r2, #6
 80118cc:	1c7e      	adds	r6, r7, #1
 80118ce:	f7ee fc9f 	bl	8000210 <memchr>
 80118d2:	2800      	cmp	r0, #0
 80118d4:	d038      	beq.n	8011948 <_svfiprintf_r+0x1c8>
 80118d6:	4b24      	ldr	r3, [pc, #144]	; (8011968 <_svfiprintf_r+0x1e8>)
 80118d8:	bb13      	cbnz	r3, 8011920 <_svfiprintf_r+0x1a0>
 80118da:	9b03      	ldr	r3, [sp, #12]
 80118dc:	3307      	adds	r3, #7
 80118de:	f023 0307 	bic.w	r3, r3, #7
 80118e2:	3308      	adds	r3, #8
 80118e4:	9303      	str	r3, [sp, #12]
 80118e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118e8:	444b      	add	r3, r9
 80118ea:	9309      	str	r3, [sp, #36]	; 0x24
 80118ec:	e76d      	b.n	80117ca <_svfiprintf_r+0x4a>
 80118ee:	fb05 3202 	mla	r2, r5, r2, r3
 80118f2:	2001      	movs	r0, #1
 80118f4:	460f      	mov	r7, r1
 80118f6:	e7a6      	b.n	8011846 <_svfiprintf_r+0xc6>
 80118f8:	2300      	movs	r3, #0
 80118fa:	3701      	adds	r7, #1
 80118fc:	9305      	str	r3, [sp, #20]
 80118fe:	4619      	mov	r1, r3
 8011900:	250a      	movs	r5, #10
 8011902:	4638      	mov	r0, r7
 8011904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011908:	3a30      	subs	r2, #48	; 0x30
 801190a:	2a09      	cmp	r2, #9
 801190c:	d903      	bls.n	8011916 <_svfiprintf_r+0x196>
 801190e:	2b00      	cmp	r3, #0
 8011910:	d0c8      	beq.n	80118a4 <_svfiprintf_r+0x124>
 8011912:	9105      	str	r1, [sp, #20]
 8011914:	e7c6      	b.n	80118a4 <_svfiprintf_r+0x124>
 8011916:	fb05 2101 	mla	r1, r5, r1, r2
 801191a:	2301      	movs	r3, #1
 801191c:	4607      	mov	r7, r0
 801191e:	e7f0      	b.n	8011902 <_svfiprintf_r+0x182>
 8011920:	ab03      	add	r3, sp, #12
 8011922:	9300      	str	r3, [sp, #0]
 8011924:	4622      	mov	r2, r4
 8011926:	4b11      	ldr	r3, [pc, #68]	; (801196c <_svfiprintf_r+0x1ec>)
 8011928:	a904      	add	r1, sp, #16
 801192a:	4640      	mov	r0, r8
 801192c:	f7fb ffce 	bl	800d8cc <_printf_float>
 8011930:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011934:	4681      	mov	r9, r0
 8011936:	d1d6      	bne.n	80118e6 <_svfiprintf_r+0x166>
 8011938:	89a3      	ldrh	r3, [r4, #12]
 801193a:	065b      	lsls	r3, r3, #25
 801193c:	f53f af35 	bmi.w	80117aa <_svfiprintf_r+0x2a>
 8011940:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011942:	b01d      	add	sp, #116	; 0x74
 8011944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011948:	ab03      	add	r3, sp, #12
 801194a:	9300      	str	r3, [sp, #0]
 801194c:	4622      	mov	r2, r4
 801194e:	4b07      	ldr	r3, [pc, #28]	; (801196c <_svfiprintf_r+0x1ec>)
 8011950:	a904      	add	r1, sp, #16
 8011952:	4640      	mov	r0, r8
 8011954:	f7fc fa70 	bl	800de38 <_printf_i>
 8011958:	e7ea      	b.n	8011930 <_svfiprintf_r+0x1b0>
 801195a:	bf00      	nop
 801195c:	08012d54 	.word	0x08012d54
 8011960:	08012d5a 	.word	0x08012d5a
 8011964:	08012d5e 	.word	0x08012d5e
 8011968:	0800d8cd 	.word	0x0800d8cd
 801196c:	080116cd 	.word	0x080116cd

08011970 <_sungetc_r>:
 8011970:	b538      	push	{r3, r4, r5, lr}
 8011972:	1c4b      	adds	r3, r1, #1
 8011974:	4614      	mov	r4, r2
 8011976:	d103      	bne.n	8011980 <_sungetc_r+0x10>
 8011978:	f04f 35ff 	mov.w	r5, #4294967295
 801197c:	4628      	mov	r0, r5
 801197e:	bd38      	pop	{r3, r4, r5, pc}
 8011980:	8993      	ldrh	r3, [r2, #12]
 8011982:	f023 0320 	bic.w	r3, r3, #32
 8011986:	8193      	strh	r3, [r2, #12]
 8011988:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801198a:	6852      	ldr	r2, [r2, #4]
 801198c:	b2cd      	uxtb	r5, r1
 801198e:	b18b      	cbz	r3, 80119b4 <_sungetc_r+0x44>
 8011990:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011992:	4293      	cmp	r3, r2
 8011994:	dd08      	ble.n	80119a8 <_sungetc_r+0x38>
 8011996:	6823      	ldr	r3, [r4, #0]
 8011998:	1e5a      	subs	r2, r3, #1
 801199a:	6022      	str	r2, [r4, #0]
 801199c:	f803 5c01 	strb.w	r5, [r3, #-1]
 80119a0:	6863      	ldr	r3, [r4, #4]
 80119a2:	3301      	adds	r3, #1
 80119a4:	6063      	str	r3, [r4, #4]
 80119a6:	e7e9      	b.n	801197c <_sungetc_r+0xc>
 80119a8:	4621      	mov	r1, r4
 80119aa:	f000 fd15 	bl	80123d8 <__submore>
 80119ae:	2800      	cmp	r0, #0
 80119b0:	d0f1      	beq.n	8011996 <_sungetc_r+0x26>
 80119b2:	e7e1      	b.n	8011978 <_sungetc_r+0x8>
 80119b4:	6921      	ldr	r1, [r4, #16]
 80119b6:	6823      	ldr	r3, [r4, #0]
 80119b8:	b151      	cbz	r1, 80119d0 <_sungetc_r+0x60>
 80119ba:	4299      	cmp	r1, r3
 80119bc:	d208      	bcs.n	80119d0 <_sungetc_r+0x60>
 80119be:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80119c2:	42a9      	cmp	r1, r5
 80119c4:	d104      	bne.n	80119d0 <_sungetc_r+0x60>
 80119c6:	3b01      	subs	r3, #1
 80119c8:	3201      	adds	r2, #1
 80119ca:	6023      	str	r3, [r4, #0]
 80119cc:	6062      	str	r2, [r4, #4]
 80119ce:	e7d5      	b.n	801197c <_sungetc_r+0xc>
 80119d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80119d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80119d8:	6363      	str	r3, [r4, #52]	; 0x34
 80119da:	2303      	movs	r3, #3
 80119dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80119de:	4623      	mov	r3, r4
 80119e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80119e4:	6023      	str	r3, [r4, #0]
 80119e6:	2301      	movs	r3, #1
 80119e8:	e7dc      	b.n	80119a4 <_sungetc_r+0x34>

080119ea <__ssrefill_r>:
 80119ea:	b510      	push	{r4, lr}
 80119ec:	460c      	mov	r4, r1
 80119ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80119f0:	b169      	cbz	r1, 8011a0e <__ssrefill_r+0x24>
 80119f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80119f6:	4299      	cmp	r1, r3
 80119f8:	d001      	beq.n	80119fe <__ssrefill_r+0x14>
 80119fa:	f7ff fdbf 	bl	801157c <_free_r>
 80119fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a00:	6063      	str	r3, [r4, #4]
 8011a02:	2000      	movs	r0, #0
 8011a04:	6360      	str	r0, [r4, #52]	; 0x34
 8011a06:	b113      	cbz	r3, 8011a0e <__ssrefill_r+0x24>
 8011a08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011a0a:	6023      	str	r3, [r4, #0]
 8011a0c:	bd10      	pop	{r4, pc}
 8011a0e:	6923      	ldr	r3, [r4, #16]
 8011a10:	6023      	str	r3, [r4, #0]
 8011a12:	2300      	movs	r3, #0
 8011a14:	6063      	str	r3, [r4, #4]
 8011a16:	89a3      	ldrh	r3, [r4, #12]
 8011a18:	f043 0320 	orr.w	r3, r3, #32
 8011a1c:	81a3      	strh	r3, [r4, #12]
 8011a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a22:	e7f3      	b.n	8011a0c <__ssrefill_r+0x22>

08011a24 <__ssvfiscanf_r>:
 8011a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a28:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8011a2c:	460c      	mov	r4, r1
 8011a2e:	2100      	movs	r1, #0
 8011a30:	9144      	str	r1, [sp, #272]	; 0x110
 8011a32:	9145      	str	r1, [sp, #276]	; 0x114
 8011a34:	499f      	ldr	r1, [pc, #636]	; (8011cb4 <__ssvfiscanf_r+0x290>)
 8011a36:	91a0      	str	r1, [sp, #640]	; 0x280
 8011a38:	f10d 0804 	add.w	r8, sp, #4
 8011a3c:	499e      	ldr	r1, [pc, #632]	; (8011cb8 <__ssvfiscanf_r+0x294>)
 8011a3e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8011cbc <__ssvfiscanf_r+0x298>
 8011a42:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8011a46:	4606      	mov	r6, r0
 8011a48:	4692      	mov	sl, r2
 8011a4a:	91a1      	str	r1, [sp, #644]	; 0x284
 8011a4c:	9300      	str	r3, [sp, #0]
 8011a4e:	270a      	movs	r7, #10
 8011a50:	f89a 3000 	ldrb.w	r3, [sl]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	f000 812a 	beq.w	8011cae <__ssvfiscanf_r+0x28a>
 8011a5a:	4655      	mov	r5, sl
 8011a5c:	f7ff f8c8 	bl	8010bf0 <__locale_ctype_ptr>
 8011a60:	f815 bb01 	ldrb.w	fp, [r5], #1
 8011a64:	4458      	add	r0, fp
 8011a66:	7843      	ldrb	r3, [r0, #1]
 8011a68:	f013 0308 	ands.w	r3, r3, #8
 8011a6c:	d01c      	beq.n	8011aa8 <__ssvfiscanf_r+0x84>
 8011a6e:	6863      	ldr	r3, [r4, #4]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	dd12      	ble.n	8011a9a <__ssvfiscanf_r+0x76>
 8011a74:	f7ff f8bc 	bl	8010bf0 <__locale_ctype_ptr>
 8011a78:	6823      	ldr	r3, [r4, #0]
 8011a7a:	781a      	ldrb	r2, [r3, #0]
 8011a7c:	4410      	add	r0, r2
 8011a7e:	7842      	ldrb	r2, [r0, #1]
 8011a80:	0712      	lsls	r2, r2, #28
 8011a82:	d401      	bmi.n	8011a88 <__ssvfiscanf_r+0x64>
 8011a84:	46aa      	mov	sl, r5
 8011a86:	e7e3      	b.n	8011a50 <__ssvfiscanf_r+0x2c>
 8011a88:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011a8a:	3201      	adds	r2, #1
 8011a8c:	9245      	str	r2, [sp, #276]	; 0x114
 8011a8e:	6862      	ldr	r2, [r4, #4]
 8011a90:	3301      	adds	r3, #1
 8011a92:	3a01      	subs	r2, #1
 8011a94:	6062      	str	r2, [r4, #4]
 8011a96:	6023      	str	r3, [r4, #0]
 8011a98:	e7e9      	b.n	8011a6e <__ssvfiscanf_r+0x4a>
 8011a9a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011a9c:	4621      	mov	r1, r4
 8011a9e:	4630      	mov	r0, r6
 8011aa0:	4798      	blx	r3
 8011aa2:	2800      	cmp	r0, #0
 8011aa4:	d0e6      	beq.n	8011a74 <__ssvfiscanf_r+0x50>
 8011aa6:	e7ed      	b.n	8011a84 <__ssvfiscanf_r+0x60>
 8011aa8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8011aac:	f040 8082 	bne.w	8011bb4 <__ssvfiscanf_r+0x190>
 8011ab0:	9343      	str	r3, [sp, #268]	; 0x10c
 8011ab2:	9341      	str	r3, [sp, #260]	; 0x104
 8011ab4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8011ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8011aba:	d103      	bne.n	8011ac4 <__ssvfiscanf_r+0xa0>
 8011abc:	2310      	movs	r3, #16
 8011abe:	9341      	str	r3, [sp, #260]	; 0x104
 8011ac0:	f10a 0502 	add.w	r5, sl, #2
 8011ac4:	46aa      	mov	sl, r5
 8011ac6:	f815 1b01 	ldrb.w	r1, [r5], #1
 8011aca:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8011ace:	2a09      	cmp	r2, #9
 8011ad0:	d922      	bls.n	8011b18 <__ssvfiscanf_r+0xf4>
 8011ad2:	2203      	movs	r2, #3
 8011ad4:	4879      	ldr	r0, [pc, #484]	; (8011cbc <__ssvfiscanf_r+0x298>)
 8011ad6:	f7ee fb9b 	bl	8000210 <memchr>
 8011ada:	b138      	cbz	r0, 8011aec <__ssvfiscanf_r+0xc8>
 8011adc:	eba0 0309 	sub.w	r3, r0, r9
 8011ae0:	2001      	movs	r0, #1
 8011ae2:	4098      	lsls	r0, r3
 8011ae4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011ae6:	4318      	orrs	r0, r3
 8011ae8:	9041      	str	r0, [sp, #260]	; 0x104
 8011aea:	46aa      	mov	sl, r5
 8011aec:	f89a 3000 	ldrb.w	r3, [sl]
 8011af0:	2b67      	cmp	r3, #103	; 0x67
 8011af2:	f10a 0501 	add.w	r5, sl, #1
 8011af6:	d82b      	bhi.n	8011b50 <__ssvfiscanf_r+0x12c>
 8011af8:	2b65      	cmp	r3, #101	; 0x65
 8011afa:	f080 809f 	bcs.w	8011c3c <__ssvfiscanf_r+0x218>
 8011afe:	2b47      	cmp	r3, #71	; 0x47
 8011b00:	d810      	bhi.n	8011b24 <__ssvfiscanf_r+0x100>
 8011b02:	2b45      	cmp	r3, #69	; 0x45
 8011b04:	f080 809a 	bcs.w	8011c3c <__ssvfiscanf_r+0x218>
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d06c      	beq.n	8011be6 <__ssvfiscanf_r+0x1c2>
 8011b0c:	2b25      	cmp	r3, #37	; 0x25
 8011b0e:	d051      	beq.n	8011bb4 <__ssvfiscanf_r+0x190>
 8011b10:	2303      	movs	r3, #3
 8011b12:	9347      	str	r3, [sp, #284]	; 0x11c
 8011b14:	9742      	str	r7, [sp, #264]	; 0x108
 8011b16:	e027      	b.n	8011b68 <__ssvfiscanf_r+0x144>
 8011b18:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8011b1a:	fb07 1303 	mla	r3, r7, r3, r1
 8011b1e:	3b30      	subs	r3, #48	; 0x30
 8011b20:	9343      	str	r3, [sp, #268]	; 0x10c
 8011b22:	e7cf      	b.n	8011ac4 <__ssvfiscanf_r+0xa0>
 8011b24:	2b5b      	cmp	r3, #91	; 0x5b
 8011b26:	d06a      	beq.n	8011bfe <__ssvfiscanf_r+0x1da>
 8011b28:	d80c      	bhi.n	8011b44 <__ssvfiscanf_r+0x120>
 8011b2a:	2b58      	cmp	r3, #88	; 0x58
 8011b2c:	d1f0      	bne.n	8011b10 <__ssvfiscanf_r+0xec>
 8011b2e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011b34:	9241      	str	r2, [sp, #260]	; 0x104
 8011b36:	2210      	movs	r2, #16
 8011b38:	9242      	str	r2, [sp, #264]	; 0x108
 8011b3a:	2b6e      	cmp	r3, #110	; 0x6e
 8011b3c:	bf8c      	ite	hi
 8011b3e:	2304      	movhi	r3, #4
 8011b40:	2303      	movls	r3, #3
 8011b42:	e010      	b.n	8011b66 <__ssvfiscanf_r+0x142>
 8011b44:	2b63      	cmp	r3, #99	; 0x63
 8011b46:	d065      	beq.n	8011c14 <__ssvfiscanf_r+0x1f0>
 8011b48:	2b64      	cmp	r3, #100	; 0x64
 8011b4a:	d1e1      	bne.n	8011b10 <__ssvfiscanf_r+0xec>
 8011b4c:	9742      	str	r7, [sp, #264]	; 0x108
 8011b4e:	e7f4      	b.n	8011b3a <__ssvfiscanf_r+0x116>
 8011b50:	2b70      	cmp	r3, #112	; 0x70
 8011b52:	d04b      	beq.n	8011bec <__ssvfiscanf_r+0x1c8>
 8011b54:	d826      	bhi.n	8011ba4 <__ssvfiscanf_r+0x180>
 8011b56:	2b6e      	cmp	r3, #110	; 0x6e
 8011b58:	d062      	beq.n	8011c20 <__ssvfiscanf_r+0x1fc>
 8011b5a:	d84c      	bhi.n	8011bf6 <__ssvfiscanf_r+0x1d2>
 8011b5c:	2b69      	cmp	r3, #105	; 0x69
 8011b5e:	d1d7      	bne.n	8011b10 <__ssvfiscanf_r+0xec>
 8011b60:	2300      	movs	r3, #0
 8011b62:	9342      	str	r3, [sp, #264]	; 0x108
 8011b64:	2303      	movs	r3, #3
 8011b66:	9347      	str	r3, [sp, #284]	; 0x11c
 8011b68:	6863      	ldr	r3, [r4, #4]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	dd68      	ble.n	8011c40 <__ssvfiscanf_r+0x21c>
 8011b6e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011b70:	0659      	lsls	r1, r3, #25
 8011b72:	d407      	bmi.n	8011b84 <__ssvfiscanf_r+0x160>
 8011b74:	f7ff f83c 	bl	8010bf0 <__locale_ctype_ptr>
 8011b78:	6823      	ldr	r3, [r4, #0]
 8011b7a:	781a      	ldrb	r2, [r3, #0]
 8011b7c:	4410      	add	r0, r2
 8011b7e:	7842      	ldrb	r2, [r0, #1]
 8011b80:	0712      	lsls	r2, r2, #28
 8011b82:	d464      	bmi.n	8011c4e <__ssvfiscanf_r+0x22a>
 8011b84:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8011b86:	2b02      	cmp	r3, #2
 8011b88:	dc73      	bgt.n	8011c72 <__ssvfiscanf_r+0x24e>
 8011b8a:	466b      	mov	r3, sp
 8011b8c:	4622      	mov	r2, r4
 8011b8e:	a941      	add	r1, sp, #260	; 0x104
 8011b90:	4630      	mov	r0, r6
 8011b92:	f000 f9d7 	bl	8011f44 <_scanf_chars>
 8011b96:	2801      	cmp	r0, #1
 8011b98:	f000 8089 	beq.w	8011cae <__ssvfiscanf_r+0x28a>
 8011b9c:	2802      	cmp	r0, #2
 8011b9e:	f47f af71 	bne.w	8011a84 <__ssvfiscanf_r+0x60>
 8011ba2:	e01d      	b.n	8011be0 <__ssvfiscanf_r+0x1bc>
 8011ba4:	2b75      	cmp	r3, #117	; 0x75
 8011ba6:	d0d1      	beq.n	8011b4c <__ssvfiscanf_r+0x128>
 8011ba8:	2b78      	cmp	r3, #120	; 0x78
 8011baa:	d0c0      	beq.n	8011b2e <__ssvfiscanf_r+0x10a>
 8011bac:	2b73      	cmp	r3, #115	; 0x73
 8011bae:	d1af      	bne.n	8011b10 <__ssvfiscanf_r+0xec>
 8011bb0:	2302      	movs	r3, #2
 8011bb2:	e7d8      	b.n	8011b66 <__ssvfiscanf_r+0x142>
 8011bb4:	6863      	ldr	r3, [r4, #4]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	dd0c      	ble.n	8011bd4 <__ssvfiscanf_r+0x1b0>
 8011bba:	6823      	ldr	r3, [r4, #0]
 8011bbc:	781a      	ldrb	r2, [r3, #0]
 8011bbe:	455a      	cmp	r2, fp
 8011bc0:	d175      	bne.n	8011cae <__ssvfiscanf_r+0x28a>
 8011bc2:	3301      	adds	r3, #1
 8011bc4:	6862      	ldr	r2, [r4, #4]
 8011bc6:	6023      	str	r3, [r4, #0]
 8011bc8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8011bca:	3a01      	subs	r2, #1
 8011bcc:	3301      	adds	r3, #1
 8011bce:	6062      	str	r2, [r4, #4]
 8011bd0:	9345      	str	r3, [sp, #276]	; 0x114
 8011bd2:	e757      	b.n	8011a84 <__ssvfiscanf_r+0x60>
 8011bd4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011bd6:	4621      	mov	r1, r4
 8011bd8:	4630      	mov	r0, r6
 8011bda:	4798      	blx	r3
 8011bdc:	2800      	cmp	r0, #0
 8011bde:	d0ec      	beq.n	8011bba <__ssvfiscanf_r+0x196>
 8011be0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011be2:	2800      	cmp	r0, #0
 8011be4:	d159      	bne.n	8011c9a <__ssvfiscanf_r+0x276>
 8011be6:	f04f 30ff 	mov.w	r0, #4294967295
 8011bea:	e05c      	b.n	8011ca6 <__ssvfiscanf_r+0x282>
 8011bec:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8011bee:	f042 0220 	orr.w	r2, r2, #32
 8011bf2:	9241      	str	r2, [sp, #260]	; 0x104
 8011bf4:	e79b      	b.n	8011b2e <__ssvfiscanf_r+0x10a>
 8011bf6:	2308      	movs	r3, #8
 8011bf8:	9342      	str	r3, [sp, #264]	; 0x108
 8011bfa:	2304      	movs	r3, #4
 8011bfc:	e7b3      	b.n	8011b66 <__ssvfiscanf_r+0x142>
 8011bfe:	4629      	mov	r1, r5
 8011c00:	4640      	mov	r0, r8
 8011c02:	f000 fb19 	bl	8012238 <__sccl>
 8011c06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c0c:	9341      	str	r3, [sp, #260]	; 0x104
 8011c0e:	4605      	mov	r5, r0
 8011c10:	2301      	movs	r3, #1
 8011c12:	e7a8      	b.n	8011b66 <__ssvfiscanf_r+0x142>
 8011c14:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8011c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c1a:	9341      	str	r3, [sp, #260]	; 0x104
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	e7a2      	b.n	8011b66 <__ssvfiscanf_r+0x142>
 8011c20:	9841      	ldr	r0, [sp, #260]	; 0x104
 8011c22:	06c3      	lsls	r3, r0, #27
 8011c24:	f53f af2e 	bmi.w	8011a84 <__ssvfiscanf_r+0x60>
 8011c28:	9b00      	ldr	r3, [sp, #0]
 8011c2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011c2c:	1d19      	adds	r1, r3, #4
 8011c2e:	9100      	str	r1, [sp, #0]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	07c0      	lsls	r0, r0, #31
 8011c34:	bf4c      	ite	mi
 8011c36:	801a      	strhmi	r2, [r3, #0]
 8011c38:	601a      	strpl	r2, [r3, #0]
 8011c3a:	e723      	b.n	8011a84 <__ssvfiscanf_r+0x60>
 8011c3c:	2305      	movs	r3, #5
 8011c3e:	e792      	b.n	8011b66 <__ssvfiscanf_r+0x142>
 8011c40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011c42:	4621      	mov	r1, r4
 8011c44:	4630      	mov	r0, r6
 8011c46:	4798      	blx	r3
 8011c48:	2800      	cmp	r0, #0
 8011c4a:	d090      	beq.n	8011b6e <__ssvfiscanf_r+0x14a>
 8011c4c:	e7c8      	b.n	8011be0 <__ssvfiscanf_r+0x1bc>
 8011c4e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011c50:	3201      	adds	r2, #1
 8011c52:	9245      	str	r2, [sp, #276]	; 0x114
 8011c54:	6862      	ldr	r2, [r4, #4]
 8011c56:	3a01      	subs	r2, #1
 8011c58:	2a00      	cmp	r2, #0
 8011c5a:	6062      	str	r2, [r4, #4]
 8011c5c:	dd02      	ble.n	8011c64 <__ssvfiscanf_r+0x240>
 8011c5e:	3301      	adds	r3, #1
 8011c60:	6023      	str	r3, [r4, #0]
 8011c62:	e787      	b.n	8011b74 <__ssvfiscanf_r+0x150>
 8011c64:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011c66:	4621      	mov	r1, r4
 8011c68:	4630      	mov	r0, r6
 8011c6a:	4798      	blx	r3
 8011c6c:	2800      	cmp	r0, #0
 8011c6e:	d081      	beq.n	8011b74 <__ssvfiscanf_r+0x150>
 8011c70:	e7b6      	b.n	8011be0 <__ssvfiscanf_r+0x1bc>
 8011c72:	2b04      	cmp	r3, #4
 8011c74:	dc06      	bgt.n	8011c84 <__ssvfiscanf_r+0x260>
 8011c76:	466b      	mov	r3, sp
 8011c78:	4622      	mov	r2, r4
 8011c7a:	a941      	add	r1, sp, #260	; 0x104
 8011c7c:	4630      	mov	r0, r6
 8011c7e:	f000 f9c5 	bl	801200c <_scanf_i>
 8011c82:	e788      	b.n	8011b96 <__ssvfiscanf_r+0x172>
 8011c84:	4b0e      	ldr	r3, [pc, #56]	; (8011cc0 <__ssvfiscanf_r+0x29c>)
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	f43f aefc 	beq.w	8011a84 <__ssvfiscanf_r+0x60>
 8011c8c:	466b      	mov	r3, sp
 8011c8e:	4622      	mov	r2, r4
 8011c90:	a941      	add	r1, sp, #260	; 0x104
 8011c92:	4630      	mov	r0, r6
 8011c94:	f7fc f9e2 	bl	800e05c <_scanf_float>
 8011c98:	e77d      	b.n	8011b96 <__ssvfiscanf_r+0x172>
 8011c9a:	89a3      	ldrh	r3, [r4, #12]
 8011c9c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8011ca0:	bf18      	it	ne
 8011ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8011ca6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8011caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cae:	9844      	ldr	r0, [sp, #272]	; 0x110
 8011cb0:	e7f9      	b.n	8011ca6 <__ssvfiscanf_r+0x282>
 8011cb2:	bf00      	nop
 8011cb4:	08011971 	.word	0x08011971
 8011cb8:	080119eb 	.word	0x080119eb
 8011cbc:	08012d5a 	.word	0x08012d5a
 8011cc0:	0800e05d 	.word	0x0800e05d

08011cc4 <__sfputc_r>:
 8011cc4:	6893      	ldr	r3, [r2, #8]
 8011cc6:	3b01      	subs	r3, #1
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	b410      	push	{r4}
 8011ccc:	6093      	str	r3, [r2, #8]
 8011cce:	da08      	bge.n	8011ce2 <__sfputc_r+0x1e>
 8011cd0:	6994      	ldr	r4, [r2, #24]
 8011cd2:	42a3      	cmp	r3, r4
 8011cd4:	db01      	blt.n	8011cda <__sfputc_r+0x16>
 8011cd6:	290a      	cmp	r1, #10
 8011cd8:	d103      	bne.n	8011ce2 <__sfputc_r+0x1e>
 8011cda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cde:	f7fd bbbd 	b.w	800f45c <__swbuf_r>
 8011ce2:	6813      	ldr	r3, [r2, #0]
 8011ce4:	1c58      	adds	r0, r3, #1
 8011ce6:	6010      	str	r0, [r2, #0]
 8011ce8:	7019      	strb	r1, [r3, #0]
 8011cea:	4608      	mov	r0, r1
 8011cec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011cf0:	4770      	bx	lr

08011cf2 <__sfputs_r>:
 8011cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cf4:	4606      	mov	r6, r0
 8011cf6:	460f      	mov	r7, r1
 8011cf8:	4614      	mov	r4, r2
 8011cfa:	18d5      	adds	r5, r2, r3
 8011cfc:	42ac      	cmp	r4, r5
 8011cfe:	d101      	bne.n	8011d04 <__sfputs_r+0x12>
 8011d00:	2000      	movs	r0, #0
 8011d02:	e007      	b.n	8011d14 <__sfputs_r+0x22>
 8011d04:	463a      	mov	r2, r7
 8011d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d0a:	4630      	mov	r0, r6
 8011d0c:	f7ff ffda 	bl	8011cc4 <__sfputc_r>
 8011d10:	1c43      	adds	r3, r0, #1
 8011d12:	d1f3      	bne.n	8011cfc <__sfputs_r+0xa>
 8011d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011d18 <_vfiprintf_r>:
 8011d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d1c:	460c      	mov	r4, r1
 8011d1e:	b09d      	sub	sp, #116	; 0x74
 8011d20:	4617      	mov	r7, r2
 8011d22:	461d      	mov	r5, r3
 8011d24:	4606      	mov	r6, r0
 8011d26:	b118      	cbz	r0, 8011d30 <_vfiprintf_r+0x18>
 8011d28:	6983      	ldr	r3, [r0, #24]
 8011d2a:	b90b      	cbnz	r3, 8011d30 <_vfiprintf_r+0x18>
 8011d2c:	f7fe fbac 	bl	8010488 <__sinit>
 8011d30:	4b7c      	ldr	r3, [pc, #496]	; (8011f24 <_vfiprintf_r+0x20c>)
 8011d32:	429c      	cmp	r4, r3
 8011d34:	d158      	bne.n	8011de8 <_vfiprintf_r+0xd0>
 8011d36:	6874      	ldr	r4, [r6, #4]
 8011d38:	89a3      	ldrh	r3, [r4, #12]
 8011d3a:	0718      	lsls	r0, r3, #28
 8011d3c:	d55e      	bpl.n	8011dfc <_vfiprintf_r+0xe4>
 8011d3e:	6923      	ldr	r3, [r4, #16]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d05b      	beq.n	8011dfc <_vfiprintf_r+0xe4>
 8011d44:	2300      	movs	r3, #0
 8011d46:	9309      	str	r3, [sp, #36]	; 0x24
 8011d48:	2320      	movs	r3, #32
 8011d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011d4e:	2330      	movs	r3, #48	; 0x30
 8011d50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011d54:	9503      	str	r5, [sp, #12]
 8011d56:	f04f 0b01 	mov.w	fp, #1
 8011d5a:	46b8      	mov	r8, r7
 8011d5c:	4645      	mov	r5, r8
 8011d5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011d62:	b10b      	cbz	r3, 8011d68 <_vfiprintf_r+0x50>
 8011d64:	2b25      	cmp	r3, #37	; 0x25
 8011d66:	d154      	bne.n	8011e12 <_vfiprintf_r+0xfa>
 8011d68:	ebb8 0a07 	subs.w	sl, r8, r7
 8011d6c:	d00b      	beq.n	8011d86 <_vfiprintf_r+0x6e>
 8011d6e:	4653      	mov	r3, sl
 8011d70:	463a      	mov	r2, r7
 8011d72:	4621      	mov	r1, r4
 8011d74:	4630      	mov	r0, r6
 8011d76:	f7ff ffbc 	bl	8011cf2 <__sfputs_r>
 8011d7a:	3001      	adds	r0, #1
 8011d7c:	f000 80c2 	beq.w	8011f04 <_vfiprintf_r+0x1ec>
 8011d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d82:	4453      	add	r3, sl
 8011d84:	9309      	str	r3, [sp, #36]	; 0x24
 8011d86:	f898 3000 	ldrb.w	r3, [r8]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	f000 80ba 	beq.w	8011f04 <_vfiprintf_r+0x1ec>
 8011d90:	2300      	movs	r3, #0
 8011d92:	f04f 32ff 	mov.w	r2, #4294967295
 8011d96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d9a:	9304      	str	r3, [sp, #16]
 8011d9c:	9307      	str	r3, [sp, #28]
 8011d9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011da2:	931a      	str	r3, [sp, #104]	; 0x68
 8011da4:	46a8      	mov	r8, r5
 8011da6:	2205      	movs	r2, #5
 8011da8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011dac:	485e      	ldr	r0, [pc, #376]	; (8011f28 <_vfiprintf_r+0x210>)
 8011dae:	f7ee fa2f 	bl	8000210 <memchr>
 8011db2:	9b04      	ldr	r3, [sp, #16]
 8011db4:	bb78      	cbnz	r0, 8011e16 <_vfiprintf_r+0xfe>
 8011db6:	06d9      	lsls	r1, r3, #27
 8011db8:	bf44      	itt	mi
 8011dba:	2220      	movmi	r2, #32
 8011dbc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011dc0:	071a      	lsls	r2, r3, #28
 8011dc2:	bf44      	itt	mi
 8011dc4:	222b      	movmi	r2, #43	; 0x2b
 8011dc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011dca:	782a      	ldrb	r2, [r5, #0]
 8011dcc:	2a2a      	cmp	r2, #42	; 0x2a
 8011dce:	d02a      	beq.n	8011e26 <_vfiprintf_r+0x10e>
 8011dd0:	9a07      	ldr	r2, [sp, #28]
 8011dd2:	46a8      	mov	r8, r5
 8011dd4:	2000      	movs	r0, #0
 8011dd6:	250a      	movs	r5, #10
 8011dd8:	4641      	mov	r1, r8
 8011dda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011dde:	3b30      	subs	r3, #48	; 0x30
 8011de0:	2b09      	cmp	r3, #9
 8011de2:	d969      	bls.n	8011eb8 <_vfiprintf_r+0x1a0>
 8011de4:	b360      	cbz	r0, 8011e40 <_vfiprintf_r+0x128>
 8011de6:	e024      	b.n	8011e32 <_vfiprintf_r+0x11a>
 8011de8:	4b50      	ldr	r3, [pc, #320]	; (8011f2c <_vfiprintf_r+0x214>)
 8011dea:	429c      	cmp	r4, r3
 8011dec:	d101      	bne.n	8011df2 <_vfiprintf_r+0xda>
 8011dee:	68b4      	ldr	r4, [r6, #8]
 8011df0:	e7a2      	b.n	8011d38 <_vfiprintf_r+0x20>
 8011df2:	4b4f      	ldr	r3, [pc, #316]	; (8011f30 <_vfiprintf_r+0x218>)
 8011df4:	429c      	cmp	r4, r3
 8011df6:	bf08      	it	eq
 8011df8:	68f4      	ldreq	r4, [r6, #12]
 8011dfa:	e79d      	b.n	8011d38 <_vfiprintf_r+0x20>
 8011dfc:	4621      	mov	r1, r4
 8011dfe:	4630      	mov	r0, r6
 8011e00:	f7fd fb90 	bl	800f524 <__swsetup_r>
 8011e04:	2800      	cmp	r0, #0
 8011e06:	d09d      	beq.n	8011d44 <_vfiprintf_r+0x2c>
 8011e08:	f04f 30ff 	mov.w	r0, #4294967295
 8011e0c:	b01d      	add	sp, #116	; 0x74
 8011e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e12:	46a8      	mov	r8, r5
 8011e14:	e7a2      	b.n	8011d5c <_vfiprintf_r+0x44>
 8011e16:	4a44      	ldr	r2, [pc, #272]	; (8011f28 <_vfiprintf_r+0x210>)
 8011e18:	1a80      	subs	r0, r0, r2
 8011e1a:	fa0b f000 	lsl.w	r0, fp, r0
 8011e1e:	4318      	orrs	r0, r3
 8011e20:	9004      	str	r0, [sp, #16]
 8011e22:	4645      	mov	r5, r8
 8011e24:	e7be      	b.n	8011da4 <_vfiprintf_r+0x8c>
 8011e26:	9a03      	ldr	r2, [sp, #12]
 8011e28:	1d11      	adds	r1, r2, #4
 8011e2a:	6812      	ldr	r2, [r2, #0]
 8011e2c:	9103      	str	r1, [sp, #12]
 8011e2e:	2a00      	cmp	r2, #0
 8011e30:	db01      	blt.n	8011e36 <_vfiprintf_r+0x11e>
 8011e32:	9207      	str	r2, [sp, #28]
 8011e34:	e004      	b.n	8011e40 <_vfiprintf_r+0x128>
 8011e36:	4252      	negs	r2, r2
 8011e38:	f043 0302 	orr.w	r3, r3, #2
 8011e3c:	9207      	str	r2, [sp, #28]
 8011e3e:	9304      	str	r3, [sp, #16]
 8011e40:	f898 3000 	ldrb.w	r3, [r8]
 8011e44:	2b2e      	cmp	r3, #46	; 0x2e
 8011e46:	d10e      	bne.n	8011e66 <_vfiprintf_r+0x14e>
 8011e48:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8011e4e:	d138      	bne.n	8011ec2 <_vfiprintf_r+0x1aa>
 8011e50:	9b03      	ldr	r3, [sp, #12]
 8011e52:	1d1a      	adds	r2, r3, #4
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	9203      	str	r2, [sp, #12]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	bfb8      	it	lt
 8011e5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011e60:	f108 0802 	add.w	r8, r8, #2
 8011e64:	9305      	str	r3, [sp, #20]
 8011e66:	4d33      	ldr	r5, [pc, #204]	; (8011f34 <_vfiprintf_r+0x21c>)
 8011e68:	f898 1000 	ldrb.w	r1, [r8]
 8011e6c:	2203      	movs	r2, #3
 8011e6e:	4628      	mov	r0, r5
 8011e70:	f7ee f9ce 	bl	8000210 <memchr>
 8011e74:	b140      	cbz	r0, 8011e88 <_vfiprintf_r+0x170>
 8011e76:	2340      	movs	r3, #64	; 0x40
 8011e78:	1b40      	subs	r0, r0, r5
 8011e7a:	fa03 f000 	lsl.w	r0, r3, r0
 8011e7e:	9b04      	ldr	r3, [sp, #16]
 8011e80:	4303      	orrs	r3, r0
 8011e82:	f108 0801 	add.w	r8, r8, #1
 8011e86:	9304      	str	r3, [sp, #16]
 8011e88:	f898 1000 	ldrb.w	r1, [r8]
 8011e8c:	482a      	ldr	r0, [pc, #168]	; (8011f38 <_vfiprintf_r+0x220>)
 8011e8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011e92:	2206      	movs	r2, #6
 8011e94:	f108 0701 	add.w	r7, r8, #1
 8011e98:	f7ee f9ba 	bl	8000210 <memchr>
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	d037      	beq.n	8011f10 <_vfiprintf_r+0x1f8>
 8011ea0:	4b26      	ldr	r3, [pc, #152]	; (8011f3c <_vfiprintf_r+0x224>)
 8011ea2:	bb1b      	cbnz	r3, 8011eec <_vfiprintf_r+0x1d4>
 8011ea4:	9b03      	ldr	r3, [sp, #12]
 8011ea6:	3307      	adds	r3, #7
 8011ea8:	f023 0307 	bic.w	r3, r3, #7
 8011eac:	3308      	adds	r3, #8
 8011eae:	9303      	str	r3, [sp, #12]
 8011eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011eb2:	444b      	add	r3, r9
 8011eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8011eb6:	e750      	b.n	8011d5a <_vfiprintf_r+0x42>
 8011eb8:	fb05 3202 	mla	r2, r5, r2, r3
 8011ebc:	2001      	movs	r0, #1
 8011ebe:	4688      	mov	r8, r1
 8011ec0:	e78a      	b.n	8011dd8 <_vfiprintf_r+0xc0>
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	f108 0801 	add.w	r8, r8, #1
 8011ec8:	9305      	str	r3, [sp, #20]
 8011eca:	4619      	mov	r1, r3
 8011ecc:	250a      	movs	r5, #10
 8011ece:	4640      	mov	r0, r8
 8011ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ed4:	3a30      	subs	r2, #48	; 0x30
 8011ed6:	2a09      	cmp	r2, #9
 8011ed8:	d903      	bls.n	8011ee2 <_vfiprintf_r+0x1ca>
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d0c3      	beq.n	8011e66 <_vfiprintf_r+0x14e>
 8011ede:	9105      	str	r1, [sp, #20]
 8011ee0:	e7c1      	b.n	8011e66 <_vfiprintf_r+0x14e>
 8011ee2:	fb05 2101 	mla	r1, r5, r1, r2
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	4680      	mov	r8, r0
 8011eea:	e7f0      	b.n	8011ece <_vfiprintf_r+0x1b6>
 8011eec:	ab03      	add	r3, sp, #12
 8011eee:	9300      	str	r3, [sp, #0]
 8011ef0:	4622      	mov	r2, r4
 8011ef2:	4b13      	ldr	r3, [pc, #76]	; (8011f40 <_vfiprintf_r+0x228>)
 8011ef4:	a904      	add	r1, sp, #16
 8011ef6:	4630      	mov	r0, r6
 8011ef8:	f7fb fce8 	bl	800d8cc <_printf_float>
 8011efc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011f00:	4681      	mov	r9, r0
 8011f02:	d1d5      	bne.n	8011eb0 <_vfiprintf_r+0x198>
 8011f04:	89a3      	ldrh	r3, [r4, #12]
 8011f06:	065b      	lsls	r3, r3, #25
 8011f08:	f53f af7e 	bmi.w	8011e08 <_vfiprintf_r+0xf0>
 8011f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f0e:	e77d      	b.n	8011e0c <_vfiprintf_r+0xf4>
 8011f10:	ab03      	add	r3, sp, #12
 8011f12:	9300      	str	r3, [sp, #0]
 8011f14:	4622      	mov	r2, r4
 8011f16:	4b0a      	ldr	r3, [pc, #40]	; (8011f40 <_vfiprintf_r+0x228>)
 8011f18:	a904      	add	r1, sp, #16
 8011f1a:	4630      	mov	r0, r6
 8011f1c:	f7fb ff8c 	bl	800de38 <_printf_i>
 8011f20:	e7ec      	b.n	8011efc <_vfiprintf_r+0x1e4>
 8011f22:	bf00      	nop
 8011f24:	08012c08 	.word	0x08012c08
 8011f28:	08012d54 	.word	0x08012d54
 8011f2c:	08012c28 	.word	0x08012c28
 8011f30:	08012be8 	.word	0x08012be8
 8011f34:	08012d5a 	.word	0x08012d5a
 8011f38:	08012d5e 	.word	0x08012d5e
 8011f3c:	0800d8cd 	.word	0x0800d8cd
 8011f40:	08011cf3 	.word	0x08011cf3

08011f44 <_scanf_chars>:
 8011f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f48:	4615      	mov	r5, r2
 8011f4a:	688a      	ldr	r2, [r1, #8]
 8011f4c:	4680      	mov	r8, r0
 8011f4e:	460c      	mov	r4, r1
 8011f50:	b932      	cbnz	r2, 8011f60 <_scanf_chars+0x1c>
 8011f52:	698a      	ldr	r2, [r1, #24]
 8011f54:	2a00      	cmp	r2, #0
 8011f56:	bf14      	ite	ne
 8011f58:	f04f 32ff 	movne.w	r2, #4294967295
 8011f5c:	2201      	moveq	r2, #1
 8011f5e:	608a      	str	r2, [r1, #8]
 8011f60:	6822      	ldr	r2, [r4, #0]
 8011f62:	06d1      	lsls	r1, r2, #27
 8011f64:	bf5f      	itttt	pl
 8011f66:	681a      	ldrpl	r2, [r3, #0]
 8011f68:	1d11      	addpl	r1, r2, #4
 8011f6a:	6019      	strpl	r1, [r3, #0]
 8011f6c:	6817      	ldrpl	r7, [r2, #0]
 8011f6e:	2600      	movs	r6, #0
 8011f70:	69a3      	ldr	r3, [r4, #24]
 8011f72:	b1db      	cbz	r3, 8011fac <_scanf_chars+0x68>
 8011f74:	2b01      	cmp	r3, #1
 8011f76:	d107      	bne.n	8011f88 <_scanf_chars+0x44>
 8011f78:	682b      	ldr	r3, [r5, #0]
 8011f7a:	6962      	ldr	r2, [r4, #20]
 8011f7c:	781b      	ldrb	r3, [r3, #0]
 8011f7e:	5cd3      	ldrb	r3, [r2, r3]
 8011f80:	b9a3      	cbnz	r3, 8011fac <_scanf_chars+0x68>
 8011f82:	2e00      	cmp	r6, #0
 8011f84:	d132      	bne.n	8011fec <_scanf_chars+0xa8>
 8011f86:	e006      	b.n	8011f96 <_scanf_chars+0x52>
 8011f88:	2b02      	cmp	r3, #2
 8011f8a:	d007      	beq.n	8011f9c <_scanf_chars+0x58>
 8011f8c:	2e00      	cmp	r6, #0
 8011f8e:	d12d      	bne.n	8011fec <_scanf_chars+0xa8>
 8011f90:	69a3      	ldr	r3, [r4, #24]
 8011f92:	2b01      	cmp	r3, #1
 8011f94:	d12a      	bne.n	8011fec <_scanf_chars+0xa8>
 8011f96:	2001      	movs	r0, #1
 8011f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f9c:	f7fe fe28 	bl	8010bf0 <__locale_ctype_ptr>
 8011fa0:	682b      	ldr	r3, [r5, #0]
 8011fa2:	781b      	ldrb	r3, [r3, #0]
 8011fa4:	4418      	add	r0, r3
 8011fa6:	7843      	ldrb	r3, [r0, #1]
 8011fa8:	071b      	lsls	r3, r3, #28
 8011faa:	d4ef      	bmi.n	8011f8c <_scanf_chars+0x48>
 8011fac:	6823      	ldr	r3, [r4, #0]
 8011fae:	06da      	lsls	r2, r3, #27
 8011fb0:	bf5e      	ittt	pl
 8011fb2:	682b      	ldrpl	r3, [r5, #0]
 8011fb4:	781b      	ldrbpl	r3, [r3, #0]
 8011fb6:	703b      	strbpl	r3, [r7, #0]
 8011fb8:	682a      	ldr	r2, [r5, #0]
 8011fba:	686b      	ldr	r3, [r5, #4]
 8011fbc:	f102 0201 	add.w	r2, r2, #1
 8011fc0:	602a      	str	r2, [r5, #0]
 8011fc2:	68a2      	ldr	r2, [r4, #8]
 8011fc4:	f103 33ff 	add.w	r3, r3, #4294967295
 8011fc8:	f102 32ff 	add.w	r2, r2, #4294967295
 8011fcc:	606b      	str	r3, [r5, #4]
 8011fce:	f106 0601 	add.w	r6, r6, #1
 8011fd2:	bf58      	it	pl
 8011fd4:	3701      	addpl	r7, #1
 8011fd6:	60a2      	str	r2, [r4, #8]
 8011fd8:	b142      	cbz	r2, 8011fec <_scanf_chars+0xa8>
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	dcc8      	bgt.n	8011f70 <_scanf_chars+0x2c>
 8011fde:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011fe2:	4629      	mov	r1, r5
 8011fe4:	4640      	mov	r0, r8
 8011fe6:	4798      	blx	r3
 8011fe8:	2800      	cmp	r0, #0
 8011fea:	d0c1      	beq.n	8011f70 <_scanf_chars+0x2c>
 8011fec:	6823      	ldr	r3, [r4, #0]
 8011fee:	f013 0310 	ands.w	r3, r3, #16
 8011ff2:	d105      	bne.n	8012000 <_scanf_chars+0xbc>
 8011ff4:	68e2      	ldr	r2, [r4, #12]
 8011ff6:	3201      	adds	r2, #1
 8011ff8:	60e2      	str	r2, [r4, #12]
 8011ffa:	69a2      	ldr	r2, [r4, #24]
 8011ffc:	b102      	cbz	r2, 8012000 <_scanf_chars+0xbc>
 8011ffe:	703b      	strb	r3, [r7, #0]
 8012000:	6923      	ldr	r3, [r4, #16]
 8012002:	441e      	add	r6, r3
 8012004:	6126      	str	r6, [r4, #16]
 8012006:	2000      	movs	r0, #0
 8012008:	e7c6      	b.n	8011f98 <_scanf_chars+0x54>
	...

0801200c <_scanf_i>:
 801200c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012010:	469a      	mov	sl, r3
 8012012:	4b74      	ldr	r3, [pc, #464]	; (80121e4 <_scanf_i+0x1d8>)
 8012014:	460c      	mov	r4, r1
 8012016:	4683      	mov	fp, r0
 8012018:	4616      	mov	r6, r2
 801201a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801201e:	b087      	sub	sp, #28
 8012020:	ab03      	add	r3, sp, #12
 8012022:	68a7      	ldr	r7, [r4, #8]
 8012024:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012028:	4b6f      	ldr	r3, [pc, #444]	; (80121e8 <_scanf_i+0x1dc>)
 801202a:	69a1      	ldr	r1, [r4, #24]
 801202c:	4a6f      	ldr	r2, [pc, #444]	; (80121ec <_scanf_i+0x1e0>)
 801202e:	2903      	cmp	r1, #3
 8012030:	bf08      	it	eq
 8012032:	461a      	moveq	r2, r3
 8012034:	1e7b      	subs	r3, r7, #1
 8012036:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801203a:	bf84      	itt	hi
 801203c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012040:	60a3      	strhi	r3, [r4, #8]
 8012042:	6823      	ldr	r3, [r4, #0]
 8012044:	9200      	str	r2, [sp, #0]
 8012046:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801204a:	bf88      	it	hi
 801204c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012050:	f104 091c 	add.w	r9, r4, #28
 8012054:	6023      	str	r3, [r4, #0]
 8012056:	bf8c      	ite	hi
 8012058:	197f      	addhi	r7, r7, r5
 801205a:	2700      	movls	r7, #0
 801205c:	464b      	mov	r3, r9
 801205e:	f04f 0800 	mov.w	r8, #0
 8012062:	9301      	str	r3, [sp, #4]
 8012064:	6831      	ldr	r1, [r6, #0]
 8012066:	ab03      	add	r3, sp, #12
 8012068:	2202      	movs	r2, #2
 801206a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801206e:	7809      	ldrb	r1, [r1, #0]
 8012070:	f7ee f8ce 	bl	8000210 <memchr>
 8012074:	9b01      	ldr	r3, [sp, #4]
 8012076:	b330      	cbz	r0, 80120c6 <_scanf_i+0xba>
 8012078:	f1b8 0f01 	cmp.w	r8, #1
 801207c:	d15a      	bne.n	8012134 <_scanf_i+0x128>
 801207e:	6862      	ldr	r2, [r4, #4]
 8012080:	b92a      	cbnz	r2, 801208e <_scanf_i+0x82>
 8012082:	6822      	ldr	r2, [r4, #0]
 8012084:	2108      	movs	r1, #8
 8012086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801208a:	6061      	str	r1, [r4, #4]
 801208c:	6022      	str	r2, [r4, #0]
 801208e:	6822      	ldr	r2, [r4, #0]
 8012090:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8012094:	6022      	str	r2, [r4, #0]
 8012096:	68a2      	ldr	r2, [r4, #8]
 8012098:	1e51      	subs	r1, r2, #1
 801209a:	60a1      	str	r1, [r4, #8]
 801209c:	b19a      	cbz	r2, 80120c6 <_scanf_i+0xba>
 801209e:	6832      	ldr	r2, [r6, #0]
 80120a0:	1c51      	adds	r1, r2, #1
 80120a2:	6031      	str	r1, [r6, #0]
 80120a4:	7812      	ldrb	r2, [r2, #0]
 80120a6:	701a      	strb	r2, [r3, #0]
 80120a8:	1c5d      	adds	r5, r3, #1
 80120aa:	6873      	ldr	r3, [r6, #4]
 80120ac:	3b01      	subs	r3, #1
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	6073      	str	r3, [r6, #4]
 80120b2:	dc07      	bgt.n	80120c4 <_scanf_i+0xb8>
 80120b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80120b8:	4631      	mov	r1, r6
 80120ba:	4658      	mov	r0, fp
 80120bc:	4798      	blx	r3
 80120be:	2800      	cmp	r0, #0
 80120c0:	f040 8086 	bne.w	80121d0 <_scanf_i+0x1c4>
 80120c4:	462b      	mov	r3, r5
 80120c6:	f108 0801 	add.w	r8, r8, #1
 80120ca:	f1b8 0f03 	cmp.w	r8, #3
 80120ce:	d1c8      	bne.n	8012062 <_scanf_i+0x56>
 80120d0:	6862      	ldr	r2, [r4, #4]
 80120d2:	b90a      	cbnz	r2, 80120d8 <_scanf_i+0xcc>
 80120d4:	220a      	movs	r2, #10
 80120d6:	6062      	str	r2, [r4, #4]
 80120d8:	6862      	ldr	r2, [r4, #4]
 80120da:	4945      	ldr	r1, [pc, #276]	; (80121f0 <_scanf_i+0x1e4>)
 80120dc:	6960      	ldr	r0, [r4, #20]
 80120de:	9301      	str	r3, [sp, #4]
 80120e0:	1a89      	subs	r1, r1, r2
 80120e2:	f000 f8a9 	bl	8012238 <__sccl>
 80120e6:	9b01      	ldr	r3, [sp, #4]
 80120e8:	f04f 0800 	mov.w	r8, #0
 80120ec:	461d      	mov	r5, r3
 80120ee:	68a3      	ldr	r3, [r4, #8]
 80120f0:	6822      	ldr	r2, [r4, #0]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d03a      	beq.n	801216c <_scanf_i+0x160>
 80120f6:	6831      	ldr	r1, [r6, #0]
 80120f8:	6960      	ldr	r0, [r4, #20]
 80120fa:	f891 c000 	ldrb.w	ip, [r1]
 80120fe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012102:	2800      	cmp	r0, #0
 8012104:	d032      	beq.n	801216c <_scanf_i+0x160>
 8012106:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801210a:	d121      	bne.n	8012150 <_scanf_i+0x144>
 801210c:	0510      	lsls	r0, r2, #20
 801210e:	d51f      	bpl.n	8012150 <_scanf_i+0x144>
 8012110:	f108 0801 	add.w	r8, r8, #1
 8012114:	b117      	cbz	r7, 801211c <_scanf_i+0x110>
 8012116:	3301      	adds	r3, #1
 8012118:	3f01      	subs	r7, #1
 801211a:	60a3      	str	r3, [r4, #8]
 801211c:	6873      	ldr	r3, [r6, #4]
 801211e:	3b01      	subs	r3, #1
 8012120:	2b00      	cmp	r3, #0
 8012122:	6073      	str	r3, [r6, #4]
 8012124:	dd1b      	ble.n	801215e <_scanf_i+0x152>
 8012126:	6833      	ldr	r3, [r6, #0]
 8012128:	3301      	adds	r3, #1
 801212a:	6033      	str	r3, [r6, #0]
 801212c:	68a3      	ldr	r3, [r4, #8]
 801212e:	3b01      	subs	r3, #1
 8012130:	60a3      	str	r3, [r4, #8]
 8012132:	e7dc      	b.n	80120ee <_scanf_i+0xe2>
 8012134:	f1b8 0f02 	cmp.w	r8, #2
 8012138:	d1ad      	bne.n	8012096 <_scanf_i+0x8a>
 801213a:	6822      	ldr	r2, [r4, #0]
 801213c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8012140:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8012144:	d1bf      	bne.n	80120c6 <_scanf_i+0xba>
 8012146:	2110      	movs	r1, #16
 8012148:	6061      	str	r1, [r4, #4]
 801214a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801214e:	e7a1      	b.n	8012094 <_scanf_i+0x88>
 8012150:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8012154:	6022      	str	r2, [r4, #0]
 8012156:	780b      	ldrb	r3, [r1, #0]
 8012158:	702b      	strb	r3, [r5, #0]
 801215a:	3501      	adds	r5, #1
 801215c:	e7de      	b.n	801211c <_scanf_i+0x110>
 801215e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012162:	4631      	mov	r1, r6
 8012164:	4658      	mov	r0, fp
 8012166:	4798      	blx	r3
 8012168:	2800      	cmp	r0, #0
 801216a:	d0df      	beq.n	801212c <_scanf_i+0x120>
 801216c:	6823      	ldr	r3, [r4, #0]
 801216e:	05d9      	lsls	r1, r3, #23
 8012170:	d50c      	bpl.n	801218c <_scanf_i+0x180>
 8012172:	454d      	cmp	r5, r9
 8012174:	d908      	bls.n	8012188 <_scanf_i+0x17c>
 8012176:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801217a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801217e:	4632      	mov	r2, r6
 8012180:	4658      	mov	r0, fp
 8012182:	4798      	blx	r3
 8012184:	1e6f      	subs	r7, r5, #1
 8012186:	463d      	mov	r5, r7
 8012188:	454d      	cmp	r5, r9
 801218a:	d029      	beq.n	80121e0 <_scanf_i+0x1d4>
 801218c:	6822      	ldr	r2, [r4, #0]
 801218e:	f012 0210 	ands.w	r2, r2, #16
 8012192:	d113      	bne.n	80121bc <_scanf_i+0x1b0>
 8012194:	702a      	strb	r2, [r5, #0]
 8012196:	6863      	ldr	r3, [r4, #4]
 8012198:	9e00      	ldr	r6, [sp, #0]
 801219a:	4649      	mov	r1, r9
 801219c:	4658      	mov	r0, fp
 801219e:	47b0      	blx	r6
 80121a0:	f8da 3000 	ldr.w	r3, [sl]
 80121a4:	6821      	ldr	r1, [r4, #0]
 80121a6:	1d1a      	adds	r2, r3, #4
 80121a8:	f8ca 2000 	str.w	r2, [sl]
 80121ac:	f011 0f20 	tst.w	r1, #32
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	d010      	beq.n	80121d6 <_scanf_i+0x1ca>
 80121b4:	6018      	str	r0, [r3, #0]
 80121b6:	68e3      	ldr	r3, [r4, #12]
 80121b8:	3301      	adds	r3, #1
 80121ba:	60e3      	str	r3, [r4, #12]
 80121bc:	eba5 0509 	sub.w	r5, r5, r9
 80121c0:	44a8      	add	r8, r5
 80121c2:	6925      	ldr	r5, [r4, #16]
 80121c4:	4445      	add	r5, r8
 80121c6:	6125      	str	r5, [r4, #16]
 80121c8:	2000      	movs	r0, #0
 80121ca:	b007      	add	sp, #28
 80121cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121d0:	f04f 0800 	mov.w	r8, #0
 80121d4:	e7ca      	b.n	801216c <_scanf_i+0x160>
 80121d6:	07ca      	lsls	r2, r1, #31
 80121d8:	bf4c      	ite	mi
 80121da:	8018      	strhmi	r0, [r3, #0]
 80121dc:	6018      	strpl	r0, [r3, #0]
 80121de:	e7ea      	b.n	80121b6 <_scanf_i+0x1aa>
 80121e0:	2001      	movs	r0, #1
 80121e2:	e7f2      	b.n	80121ca <_scanf_i+0x1be>
 80121e4:	080126cc 	.word	0x080126cc
 80121e8:	0800f3f9 	.word	0x0800f3f9
 80121ec:	080123b5 	.word	0x080123b5
 80121f0:	08012d75 	.word	0x08012d75

080121f4 <_read_r>:
 80121f4:	b538      	push	{r3, r4, r5, lr}
 80121f6:	4c07      	ldr	r4, [pc, #28]	; (8012214 <_read_r+0x20>)
 80121f8:	4605      	mov	r5, r0
 80121fa:	4608      	mov	r0, r1
 80121fc:	4611      	mov	r1, r2
 80121fe:	2200      	movs	r2, #0
 8012200:	6022      	str	r2, [r4, #0]
 8012202:	461a      	mov	r2, r3
 8012204:	f7f0 fed8 	bl	8002fb8 <_read>
 8012208:	1c43      	adds	r3, r0, #1
 801220a:	d102      	bne.n	8012212 <_read_r+0x1e>
 801220c:	6823      	ldr	r3, [r4, #0]
 801220e:	b103      	cbz	r3, 8012212 <_read_r+0x1e>
 8012210:	602b      	str	r3, [r5, #0]
 8012212:	bd38      	pop	{r3, r4, r5, pc}
 8012214:	20004d40 	.word	0x20004d40

08012218 <_sbrk_r>:
 8012218:	b538      	push	{r3, r4, r5, lr}
 801221a:	4c06      	ldr	r4, [pc, #24]	; (8012234 <_sbrk_r+0x1c>)
 801221c:	2300      	movs	r3, #0
 801221e:	4605      	mov	r5, r0
 8012220:	4608      	mov	r0, r1
 8012222:	6023      	str	r3, [r4, #0]
 8012224:	f7f0 ff1a 	bl	800305c <_sbrk>
 8012228:	1c43      	adds	r3, r0, #1
 801222a:	d102      	bne.n	8012232 <_sbrk_r+0x1a>
 801222c:	6823      	ldr	r3, [r4, #0]
 801222e:	b103      	cbz	r3, 8012232 <_sbrk_r+0x1a>
 8012230:	602b      	str	r3, [r5, #0]
 8012232:	bd38      	pop	{r3, r4, r5, pc}
 8012234:	20004d40 	.word	0x20004d40

08012238 <__sccl>:
 8012238:	b570      	push	{r4, r5, r6, lr}
 801223a:	780b      	ldrb	r3, [r1, #0]
 801223c:	2b5e      	cmp	r3, #94	; 0x5e
 801223e:	bf13      	iteet	ne
 8012240:	1c4a      	addne	r2, r1, #1
 8012242:	1c8a      	addeq	r2, r1, #2
 8012244:	784b      	ldrbeq	r3, [r1, #1]
 8012246:	2100      	movne	r1, #0
 8012248:	bf08      	it	eq
 801224a:	2101      	moveq	r1, #1
 801224c:	1e44      	subs	r4, r0, #1
 801224e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8012252:	f804 1f01 	strb.w	r1, [r4, #1]!
 8012256:	42ac      	cmp	r4, r5
 8012258:	d1fb      	bne.n	8012252 <__sccl+0x1a>
 801225a:	b913      	cbnz	r3, 8012262 <__sccl+0x2a>
 801225c:	3a01      	subs	r2, #1
 801225e:	4610      	mov	r0, r2
 8012260:	bd70      	pop	{r4, r5, r6, pc}
 8012262:	f081 0401 	eor.w	r4, r1, #1
 8012266:	54c4      	strb	r4, [r0, r3]
 8012268:	1c51      	adds	r1, r2, #1
 801226a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801226e:	2d2d      	cmp	r5, #45	; 0x2d
 8012270:	f101 36ff 	add.w	r6, r1, #4294967295
 8012274:	460a      	mov	r2, r1
 8012276:	d006      	beq.n	8012286 <__sccl+0x4e>
 8012278:	2d5d      	cmp	r5, #93	; 0x5d
 801227a:	d0f0      	beq.n	801225e <__sccl+0x26>
 801227c:	b90d      	cbnz	r5, 8012282 <__sccl+0x4a>
 801227e:	4632      	mov	r2, r6
 8012280:	e7ed      	b.n	801225e <__sccl+0x26>
 8012282:	462b      	mov	r3, r5
 8012284:	e7ef      	b.n	8012266 <__sccl+0x2e>
 8012286:	780e      	ldrb	r6, [r1, #0]
 8012288:	2e5d      	cmp	r6, #93	; 0x5d
 801228a:	d0fa      	beq.n	8012282 <__sccl+0x4a>
 801228c:	42b3      	cmp	r3, r6
 801228e:	dcf8      	bgt.n	8012282 <__sccl+0x4a>
 8012290:	3301      	adds	r3, #1
 8012292:	429e      	cmp	r6, r3
 8012294:	54c4      	strb	r4, [r0, r3]
 8012296:	dcfb      	bgt.n	8012290 <__sccl+0x58>
 8012298:	3102      	adds	r1, #2
 801229a:	e7e6      	b.n	801226a <__sccl+0x32>

0801229c <strncmp>:
 801229c:	b510      	push	{r4, lr}
 801229e:	b16a      	cbz	r2, 80122bc <strncmp+0x20>
 80122a0:	3901      	subs	r1, #1
 80122a2:	1884      	adds	r4, r0, r2
 80122a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80122a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80122ac:	4293      	cmp	r3, r2
 80122ae:	d103      	bne.n	80122b8 <strncmp+0x1c>
 80122b0:	42a0      	cmp	r0, r4
 80122b2:	d001      	beq.n	80122b8 <strncmp+0x1c>
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d1f5      	bne.n	80122a4 <strncmp+0x8>
 80122b8:	1a98      	subs	r0, r3, r2
 80122ba:	bd10      	pop	{r4, pc}
 80122bc:	4610      	mov	r0, r2
 80122be:	e7fc      	b.n	80122ba <strncmp+0x1e>

080122c0 <_strtoul_l.isra.0>:
 80122c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122c4:	4680      	mov	r8, r0
 80122c6:	4689      	mov	r9, r1
 80122c8:	4692      	mov	sl, r2
 80122ca:	461e      	mov	r6, r3
 80122cc:	460f      	mov	r7, r1
 80122ce:	463d      	mov	r5, r7
 80122d0:	9808      	ldr	r0, [sp, #32]
 80122d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80122d6:	f7fe fc87 	bl	8010be8 <__locale_ctype_ptr_l>
 80122da:	4420      	add	r0, r4
 80122dc:	7843      	ldrb	r3, [r0, #1]
 80122de:	f013 0308 	ands.w	r3, r3, #8
 80122e2:	d130      	bne.n	8012346 <_strtoul_l.isra.0+0x86>
 80122e4:	2c2d      	cmp	r4, #45	; 0x2d
 80122e6:	d130      	bne.n	801234a <_strtoul_l.isra.0+0x8a>
 80122e8:	787c      	ldrb	r4, [r7, #1]
 80122ea:	1cbd      	adds	r5, r7, #2
 80122ec:	2101      	movs	r1, #1
 80122ee:	2e00      	cmp	r6, #0
 80122f0:	d05c      	beq.n	80123ac <_strtoul_l.isra.0+0xec>
 80122f2:	2e10      	cmp	r6, #16
 80122f4:	d109      	bne.n	801230a <_strtoul_l.isra.0+0x4a>
 80122f6:	2c30      	cmp	r4, #48	; 0x30
 80122f8:	d107      	bne.n	801230a <_strtoul_l.isra.0+0x4a>
 80122fa:	782b      	ldrb	r3, [r5, #0]
 80122fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012300:	2b58      	cmp	r3, #88	; 0x58
 8012302:	d14e      	bne.n	80123a2 <_strtoul_l.isra.0+0xe2>
 8012304:	786c      	ldrb	r4, [r5, #1]
 8012306:	2610      	movs	r6, #16
 8012308:	3502      	adds	r5, #2
 801230a:	f04f 32ff 	mov.w	r2, #4294967295
 801230e:	2300      	movs	r3, #0
 8012310:	fbb2 f2f6 	udiv	r2, r2, r6
 8012314:	fb06 fc02 	mul.w	ip, r6, r2
 8012318:	ea6f 0c0c 	mvn.w	ip, ip
 801231c:	4618      	mov	r0, r3
 801231e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8012322:	2f09      	cmp	r7, #9
 8012324:	d817      	bhi.n	8012356 <_strtoul_l.isra.0+0x96>
 8012326:	463c      	mov	r4, r7
 8012328:	42a6      	cmp	r6, r4
 801232a:	dd23      	ble.n	8012374 <_strtoul_l.isra.0+0xb4>
 801232c:	2b00      	cmp	r3, #0
 801232e:	db1e      	blt.n	801236e <_strtoul_l.isra.0+0xae>
 8012330:	4282      	cmp	r2, r0
 8012332:	d31c      	bcc.n	801236e <_strtoul_l.isra.0+0xae>
 8012334:	d101      	bne.n	801233a <_strtoul_l.isra.0+0x7a>
 8012336:	45a4      	cmp	ip, r4
 8012338:	db19      	blt.n	801236e <_strtoul_l.isra.0+0xae>
 801233a:	fb00 4006 	mla	r0, r0, r6, r4
 801233e:	2301      	movs	r3, #1
 8012340:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012344:	e7eb      	b.n	801231e <_strtoul_l.isra.0+0x5e>
 8012346:	462f      	mov	r7, r5
 8012348:	e7c1      	b.n	80122ce <_strtoul_l.isra.0+0xe>
 801234a:	2c2b      	cmp	r4, #43	; 0x2b
 801234c:	bf04      	itt	eq
 801234e:	1cbd      	addeq	r5, r7, #2
 8012350:	787c      	ldrbeq	r4, [r7, #1]
 8012352:	4619      	mov	r1, r3
 8012354:	e7cb      	b.n	80122ee <_strtoul_l.isra.0+0x2e>
 8012356:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801235a:	2f19      	cmp	r7, #25
 801235c:	d801      	bhi.n	8012362 <_strtoul_l.isra.0+0xa2>
 801235e:	3c37      	subs	r4, #55	; 0x37
 8012360:	e7e2      	b.n	8012328 <_strtoul_l.isra.0+0x68>
 8012362:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8012366:	2f19      	cmp	r7, #25
 8012368:	d804      	bhi.n	8012374 <_strtoul_l.isra.0+0xb4>
 801236a:	3c57      	subs	r4, #87	; 0x57
 801236c:	e7dc      	b.n	8012328 <_strtoul_l.isra.0+0x68>
 801236e:	f04f 33ff 	mov.w	r3, #4294967295
 8012372:	e7e5      	b.n	8012340 <_strtoul_l.isra.0+0x80>
 8012374:	2b00      	cmp	r3, #0
 8012376:	da09      	bge.n	801238c <_strtoul_l.isra.0+0xcc>
 8012378:	2322      	movs	r3, #34	; 0x22
 801237a:	f8c8 3000 	str.w	r3, [r8]
 801237e:	f04f 30ff 	mov.w	r0, #4294967295
 8012382:	f1ba 0f00 	cmp.w	sl, #0
 8012386:	d107      	bne.n	8012398 <_strtoul_l.isra.0+0xd8>
 8012388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801238c:	b101      	cbz	r1, 8012390 <_strtoul_l.isra.0+0xd0>
 801238e:	4240      	negs	r0, r0
 8012390:	f1ba 0f00 	cmp.w	sl, #0
 8012394:	d0f8      	beq.n	8012388 <_strtoul_l.isra.0+0xc8>
 8012396:	b10b      	cbz	r3, 801239c <_strtoul_l.isra.0+0xdc>
 8012398:	f105 39ff 	add.w	r9, r5, #4294967295
 801239c:	f8ca 9000 	str.w	r9, [sl]
 80123a0:	e7f2      	b.n	8012388 <_strtoul_l.isra.0+0xc8>
 80123a2:	2430      	movs	r4, #48	; 0x30
 80123a4:	2e00      	cmp	r6, #0
 80123a6:	d1b0      	bne.n	801230a <_strtoul_l.isra.0+0x4a>
 80123a8:	2608      	movs	r6, #8
 80123aa:	e7ae      	b.n	801230a <_strtoul_l.isra.0+0x4a>
 80123ac:	2c30      	cmp	r4, #48	; 0x30
 80123ae:	d0a4      	beq.n	80122fa <_strtoul_l.isra.0+0x3a>
 80123b0:	260a      	movs	r6, #10
 80123b2:	e7aa      	b.n	801230a <_strtoul_l.isra.0+0x4a>

080123b4 <_strtoul_r>:
 80123b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80123b6:	4c06      	ldr	r4, [pc, #24]	; (80123d0 <_strtoul_r+0x1c>)
 80123b8:	4d06      	ldr	r5, [pc, #24]	; (80123d4 <_strtoul_r+0x20>)
 80123ba:	6824      	ldr	r4, [r4, #0]
 80123bc:	6a24      	ldr	r4, [r4, #32]
 80123be:	2c00      	cmp	r4, #0
 80123c0:	bf08      	it	eq
 80123c2:	462c      	moveq	r4, r5
 80123c4:	9400      	str	r4, [sp, #0]
 80123c6:	f7ff ff7b 	bl	80122c0 <_strtoul_l.isra.0>
 80123ca:	b003      	add	sp, #12
 80123cc:	bd30      	pop	{r4, r5, pc}
 80123ce:	bf00      	nop
 80123d0:	2000000c 	.word	0x2000000c
 80123d4:	20000070 	.word	0x20000070

080123d8 <__submore>:
 80123d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123dc:	460c      	mov	r4, r1
 80123de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80123e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80123e4:	4299      	cmp	r1, r3
 80123e6:	d11d      	bne.n	8012424 <__submore+0x4c>
 80123e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80123ec:	f7ff f914 	bl	8011618 <_malloc_r>
 80123f0:	b918      	cbnz	r0, 80123fa <__submore+0x22>
 80123f2:	f04f 30ff 	mov.w	r0, #4294967295
 80123f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80123fe:	63a3      	str	r3, [r4, #56]	; 0x38
 8012400:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8012404:	6360      	str	r0, [r4, #52]	; 0x34
 8012406:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801240a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801240e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8012412:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8012416:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801241a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801241e:	6020      	str	r0, [r4, #0]
 8012420:	2000      	movs	r0, #0
 8012422:	e7e8      	b.n	80123f6 <__submore+0x1e>
 8012424:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8012426:	0077      	lsls	r7, r6, #1
 8012428:	463a      	mov	r2, r7
 801242a:	f000 f85a 	bl	80124e2 <_realloc_r>
 801242e:	4605      	mov	r5, r0
 8012430:	2800      	cmp	r0, #0
 8012432:	d0de      	beq.n	80123f2 <__submore+0x1a>
 8012434:	eb00 0806 	add.w	r8, r0, r6
 8012438:	4601      	mov	r1, r0
 801243a:	4632      	mov	r2, r6
 801243c:	4640      	mov	r0, r8
 801243e:	f7fe fc85 	bl	8010d4c <memcpy>
 8012442:	f8c4 8000 	str.w	r8, [r4]
 8012446:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801244a:	e7e9      	b.n	8012420 <__submore+0x48>

0801244c <__ascii_wctomb>:
 801244c:	b149      	cbz	r1, 8012462 <__ascii_wctomb+0x16>
 801244e:	2aff      	cmp	r2, #255	; 0xff
 8012450:	bf85      	ittet	hi
 8012452:	238a      	movhi	r3, #138	; 0x8a
 8012454:	6003      	strhi	r3, [r0, #0]
 8012456:	700a      	strbls	r2, [r1, #0]
 8012458:	f04f 30ff 	movhi.w	r0, #4294967295
 801245c:	bf98      	it	ls
 801245e:	2001      	movls	r0, #1
 8012460:	4770      	bx	lr
 8012462:	4608      	mov	r0, r1
 8012464:	4770      	bx	lr
	...

08012468 <_fstat_r>:
 8012468:	b538      	push	{r3, r4, r5, lr}
 801246a:	4c07      	ldr	r4, [pc, #28]	; (8012488 <_fstat_r+0x20>)
 801246c:	2300      	movs	r3, #0
 801246e:	4605      	mov	r5, r0
 8012470:	4608      	mov	r0, r1
 8012472:	4611      	mov	r1, r2
 8012474:	6023      	str	r3, [r4, #0]
 8012476:	f7f0 fdc8 	bl	800300a <_fstat>
 801247a:	1c43      	adds	r3, r0, #1
 801247c:	d102      	bne.n	8012484 <_fstat_r+0x1c>
 801247e:	6823      	ldr	r3, [r4, #0]
 8012480:	b103      	cbz	r3, 8012484 <_fstat_r+0x1c>
 8012482:	602b      	str	r3, [r5, #0]
 8012484:	bd38      	pop	{r3, r4, r5, pc}
 8012486:	bf00      	nop
 8012488:	20004d40 	.word	0x20004d40

0801248c <_isatty_r>:
 801248c:	b538      	push	{r3, r4, r5, lr}
 801248e:	4c06      	ldr	r4, [pc, #24]	; (80124a8 <_isatty_r+0x1c>)
 8012490:	2300      	movs	r3, #0
 8012492:	4605      	mov	r5, r0
 8012494:	4608      	mov	r0, r1
 8012496:	6023      	str	r3, [r4, #0]
 8012498:	f7f0 fdc7 	bl	800302a <_isatty>
 801249c:	1c43      	adds	r3, r0, #1
 801249e:	d102      	bne.n	80124a6 <_isatty_r+0x1a>
 80124a0:	6823      	ldr	r3, [r4, #0]
 80124a2:	b103      	cbz	r3, 80124a6 <_isatty_r+0x1a>
 80124a4:	602b      	str	r3, [r5, #0]
 80124a6:	bd38      	pop	{r3, r4, r5, pc}
 80124a8:	20004d40 	.word	0x20004d40

080124ac <memmove>:
 80124ac:	4288      	cmp	r0, r1
 80124ae:	b510      	push	{r4, lr}
 80124b0:	eb01 0302 	add.w	r3, r1, r2
 80124b4:	d807      	bhi.n	80124c6 <memmove+0x1a>
 80124b6:	1e42      	subs	r2, r0, #1
 80124b8:	4299      	cmp	r1, r3
 80124ba:	d00a      	beq.n	80124d2 <memmove+0x26>
 80124bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80124c0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80124c4:	e7f8      	b.n	80124b8 <memmove+0xc>
 80124c6:	4283      	cmp	r3, r0
 80124c8:	d9f5      	bls.n	80124b6 <memmove+0xa>
 80124ca:	1881      	adds	r1, r0, r2
 80124cc:	1ad2      	subs	r2, r2, r3
 80124ce:	42d3      	cmn	r3, r2
 80124d0:	d100      	bne.n	80124d4 <memmove+0x28>
 80124d2:	bd10      	pop	{r4, pc}
 80124d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80124d8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80124dc:	e7f7      	b.n	80124ce <memmove+0x22>

080124de <__malloc_lock>:
 80124de:	4770      	bx	lr

080124e0 <__malloc_unlock>:
 80124e0:	4770      	bx	lr

080124e2 <_realloc_r>:
 80124e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124e4:	4607      	mov	r7, r0
 80124e6:	4614      	mov	r4, r2
 80124e8:	460e      	mov	r6, r1
 80124ea:	b921      	cbnz	r1, 80124f6 <_realloc_r+0x14>
 80124ec:	4611      	mov	r1, r2
 80124ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80124f2:	f7ff b891 	b.w	8011618 <_malloc_r>
 80124f6:	b922      	cbnz	r2, 8012502 <_realloc_r+0x20>
 80124f8:	f7ff f840 	bl	801157c <_free_r>
 80124fc:	4625      	mov	r5, r4
 80124fe:	4628      	mov	r0, r5
 8012500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012502:	f000 f814 	bl	801252e <_malloc_usable_size_r>
 8012506:	42a0      	cmp	r0, r4
 8012508:	d20f      	bcs.n	801252a <_realloc_r+0x48>
 801250a:	4621      	mov	r1, r4
 801250c:	4638      	mov	r0, r7
 801250e:	f7ff f883 	bl	8011618 <_malloc_r>
 8012512:	4605      	mov	r5, r0
 8012514:	2800      	cmp	r0, #0
 8012516:	d0f2      	beq.n	80124fe <_realloc_r+0x1c>
 8012518:	4631      	mov	r1, r6
 801251a:	4622      	mov	r2, r4
 801251c:	f7fe fc16 	bl	8010d4c <memcpy>
 8012520:	4631      	mov	r1, r6
 8012522:	4638      	mov	r0, r7
 8012524:	f7ff f82a 	bl	801157c <_free_r>
 8012528:	e7e9      	b.n	80124fe <_realloc_r+0x1c>
 801252a:	4635      	mov	r5, r6
 801252c:	e7e7      	b.n	80124fe <_realloc_r+0x1c>

0801252e <_malloc_usable_size_r>:
 801252e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012532:	1f18      	subs	r0, r3, #4
 8012534:	2b00      	cmp	r3, #0
 8012536:	bfbc      	itt	lt
 8012538:	580b      	ldrlt	r3, [r1, r0]
 801253a:	18c0      	addlt	r0, r0, r3
 801253c:	4770      	bx	lr
	...

08012540 <_init>:
 8012540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012542:	bf00      	nop
 8012544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012546:	bc08      	pop	{r3}
 8012548:	469e      	mov	lr, r3
 801254a:	4770      	bx	lr

0801254c <_fini>:
 801254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801254e:	bf00      	nop
 8012550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012552:	bc08      	pop	{r3}
 8012554:	469e      	mov	lr, r3
 8012556:	4770      	bx	lr
