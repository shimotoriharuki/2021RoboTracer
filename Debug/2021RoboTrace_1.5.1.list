
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000179b8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bac  08017b78  08017b78  00027b78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018724  08018724  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08018724  08018724  00028724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801872c  0801872c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801872c  0801872c  0002872c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018734  08018734  00028734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08018738  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003b444  200001e0  08018914  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2003b624  08018914  0003b624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000365a5  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000077d1  00000000  00000000  000667b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002130  00000000  00000000  0006df88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e60  00000000  00000000  000700b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003710c  00000000  00000000  00071f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002562f  00000000  00000000  000a9024  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110248  00000000  00000000  000ce653  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001de89b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a150  00000000  00000000  001de918  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017b60 	.word	0x08017b60

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08017b60 	.word	0x08017b60

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f006 fec2 	bl	8007d60 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20039118 	.word	0x20039118

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f006 feaa 	bl	8007d60 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20039118 	.word	0x20039118

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f006 fd33 	bl	8007a8c <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f005 fa9a 	bl	8006560 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f005 fa94 	bl	8006560 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f005 fa8e 	bl	8006560 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f005 fa88 	bl	8006560 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f005 fa82 	bl	8006560 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f005 fa7c 	bl	8006560 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f005 fa76 	bl	8006560 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f005 fa70 	bl	8006560 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f005 fa6a 	bl	8006560 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f005 fa64 	bl	8006560 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f005 fa58 	bl	8006560 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f005 fa52 	bl	8006560 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 fc9d 	bl	8014a68 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_r;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b490      	push	{r4, r7}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	f04f 0400 	mov.w	r4, #0
 8001166:	e9c2 3400 	strd	r3, r4, [r2]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	f04f 0400 	mov.w	r4, #0
 8001174:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	f04f 0400 	mov.w	r4, #0
 8001182:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	f04f 0400 	mov.w	r4, #0
 8001190:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	f04f 0400 	mov.w	r4, #0
 800119e:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	f04f 0400 	mov.w	r4, #0
 80011ac:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc90      	pop	{r4, r7}
 80011ba:	4770      	bx	lr

080011bc <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011c4:	213c      	movs	r1, #60	; 0x3c
 80011c6:	4809      	ldr	r0, [pc, #36]	; (80011ec <_ZN7Encoder4initEv+0x30>)
 80011c8:	f00a fc62 	bl	800ba90 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011cc:	213c      	movs	r1, #60	; 0x3c
 80011ce:	4808      	ldr	r0, [pc, #32]	; (80011f0 <_ZN7Encoder4initEv+0x34>)
 80011d0:	f00a fc5e 	bl	800ba90 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <_ZN7Encoder4initEv+0x38>)
 80011d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <_ZN7Encoder4initEv+0x3c>)
 80011de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2003936c 	.word	0x2003936c
 80011f0:	20039050 	.word	0x20039050
 80011f4:	40010000 	.word	0x40010000
 80011f8:	40010400 	.word	0x40010400
 80011fc:	00000000 	.word	0x00000000

08001200 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	cnt_l_ = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <_ZN7Encoder9updateCntEv+0x138>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121c:	ee17 0a90 	vmov	r0, s15
 8001220:	f7ff f9aa 	bl	8000578 <__aeabi_f2d>
 8001224:	a340      	add	r3, pc, #256	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f9fd 	bl	8000628 <__aeabi_dmul>
 800122e:	4603      	mov	r3, r0
 8001230:	460c      	mov	r4, r1
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <_ZN7Encoder9updateCntEv+0x140>)
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001244:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800124c:	ee17 0a90 	vmov	r0, s15
 8001250:	f7ff f992 	bl	8000578 <__aeabi_f2d>
 8001254:	a334      	add	r3, pc, #208	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7ff f9e5 	bl	8000628 <__aeabi_dmul>
 800125e:	4603      	mov	r3, r0
 8001260:	460c      	mov	r4, r1
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	e9c2 3402 	strd	r3, r4, [r2, #8]

	total_cnt_l_ += cnt_l_;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001274:	461a      	mov	r2, r3
 8001276:	4623      	mov	r3, r4
 8001278:	f7ff f820 	bl	80002bc <__adddf3>
 800127c:	4603      	mov	r3, r0
 800127e:	460c      	mov	r4, r1
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ += cnt_r_;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001292:	461a      	mov	r2, r3
 8001294:	4623      	mov	r3, r4
 8001296:	f7ff f811 	bl	80002bc <__adddf3>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	e9c2 3408 	strd	r3, r4, [r2, #32]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4623      	mov	r3, r4
 80012b4:	f7ff f802 	bl	80002bc <__adddf3>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	4618      	mov	r0, r3
 80012be:	4621      	mov	r1, r4
 80012c0:	a31b      	add	r3, pc, #108	; (adr r3, 8001330 <_ZN7Encoder9updateCntEv+0x130>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f9af 	bl	8000628 <__aeabi_dmul>
 80012ca:	4603      	mov	r3, r0
 80012cc:	460c      	mov	r4, r1
 80012ce:	4618      	mov	r0, r3
 80012d0:	4621      	mov	r1, r4
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012da:	f7ff facf 	bl	800087c <__aeabi_ddiv>
 80012de:	4603      	mov	r3, r0
 80012e0:	460c      	mov	r4, r1
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	total_distance_ += distance_;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	f7fe ffe0 	bl	80002bc <__adddf3>
 80012fc:	4603      	mov	r3, r0
 80012fe:	460c      	mov	r4, r1
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	monitor_distance = distance_;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800130c:	4618      	mov	r0, r3
 800130e:	4621      	mov	r1, r4
 8001310:	f7ff fc82 	bl	8000c18 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <_ZN7Encoder9updateCntEv+0x144>)
 8001318:	601a      	str	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	f3af 8000 	nop.w
 8001328:	e9a19657 	.word	0xe9a19657
 800132c:	3ff224a8 	.word	0x3ff224a8
 8001330:	1ab1d998 	.word	0x1ab1d998
 8001334:	3f7830b5 	.word	0x3f7830b5
 8001338:	40010000 	.word	0x40010000
 800133c:	47000000 	.word	0x47000000
 8001340:	40010400 	.word	0x40010400
 8001344:	200001fc 	.word	0x200001fc

08001348 <_ZN7Encoder6getCntERdS0_>:

void Encoder::getCnt(double &cnt_l, double &cnt_r)
{
 8001348:	b490      	push	{r4, r7}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	e9d3 3400 	ldrd	r3, r4, [r3]
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r = cnt_r_;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	e9c2 3400 	strd	r3, r4, [r2]
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bc90      	pop	{r4, r7}
 8001374:	4770      	bx	lr

08001376 <_ZN7Encoder11getDistanceEv>:

double Encoder::getDistance()
{
 8001376:	b490      	push	{r4, r7}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
	return distance_;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001384:	ec44 3b17 	vmov	d7, r3, r4
}
 8001388:	eeb0 0a47 	vmov.f32	s0, s14
 800138c:	eef0 0a67 	vmov.f32	s1, s15
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bc90      	pop	{r4, r7}
 8001396:	4770      	bx	lr

08001398 <_ZN7Encoder13clearDistanceEv>:
{
	return total_distance_;
}

void Encoder::clearDistance()
{
 8001398:	b490      	push	{r4, r7}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	f04f 0400 	mov.w	r4, #0
 80013aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc90      	pop	{r4, r7}
 80013b6:	4770      	bx	lr

080013b8 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 80013b8:	b490      	push	{r4, r7}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	f04f 0400 	mov.w	r4, #0
 80013ca:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = 0;
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	f04f 0400 	mov.w	r4, #0
 80013d8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <_ZN7Encoder8clearCntEv+0x4c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_ZN7Encoder8clearCntEv+0x50>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	f04f 0400 	mov.w	r4, #0
 80013f6:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc90      	pop	{r4, r7}
 8001402:	4770      	bx	lr
 8001404:	40010000 	.word	0x40010000
 8001408:	40010400 	.word	0x40010400

0800140c <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 800140c:	b490      	push	{r4, r7}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	f04f 0400 	mov.w	r4, #0
 800141e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ = 0;
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	f04f 0400 	mov.w	r4, #0
 800142c:	e9c2 3408 	strd	r3, r4, [r2, #32]
	total_distance_ = 0;
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	f04f 0400 	mov.w	r4, #0
 800143a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bc90      	pop	{r4, r7}
 8001446:	4770      	bx	lr

08001448 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 fa37 	bl	80018cc <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800145e:	f000 fa4b 	bl	80018f8 <fopen_folder_and_file>

	return ret;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 8001476:	4804      	ldr	r0, [pc, #16]	; (8001488 <user_fclose+0x1c>)
 8001478:	f00f fd3b 	bl	8010ef2 <f_close>

	return ret;
 800147c:	79fb      	ldrb	r3, [r7, #7]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20037f5c 	.word	0x20037f5c

0800148c <sd_write>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write(short size, float *data, char state){
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b087      	sub	sp, #28
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	80fb      	strh	r3, [r7, #6]
 8001498:	4613      	mov	r3, r2
 800149a:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80014a0:	2300      	movs	r3, #0
 80014a2:	81fb      	strh	r3, [r7, #14]
 80014a4:	e030      	b.n	8001508 <sd_write+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80014a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f860 	bl	8000578 <__aeabi_f2d>
 80014b8:	4603      	mov	r3, r0
 80014ba:	460c      	mov	r4, r1
 80014bc:	e9cd 3400 	strd	r3, r4, [sp]
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <sd_write+0x94>)
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	4817      	ldr	r0, [pc, #92]	; (8001524 <sd_write+0x98>)
 80014c6:	f012 fb3f 	bl	8013b48 <sniprintf>

		if(state == ADD_WRITE){
 80014ca:	797b      	ldrb	r3, [r7, #5]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <sd_write+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <sd_write+0x9c>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4619      	mov	r1, r3
 80014d6:	4814      	ldr	r0, [pc, #80]	; (8001528 <sd_write+0x9c>)
 80014d8:	f00f fd7f 	bl	8010fda <f_lseek>
 80014dc:	e003      	b.n	80014e6 <sd_write+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80014de:	2100      	movs	r1, #0
 80014e0:	4811      	ldr	r0, [pc, #68]	; (8001528 <sd_write+0x9c>)
 80014e2:	f00f fd7a 	bl	8010fda <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80014e6:	480f      	ldr	r0, [pc, #60]	; (8001524 <sd_write+0x98>)
 80014e8:	f7fe fe8a 	bl	8000200 <strlen>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <sd_write+0xa0>)
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <sd_write+0x98>)
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <sd_write+0x9c>)
 80014f4:	f00f faeb 	bl	8010ace <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80014f8:	f000 fa18 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 80014fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001500:	b29b      	uxth	r3, r3
 8001502:	3301      	adds	r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	81fb      	strh	r3, [r7, #14]
 8001508:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800150c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbc8      	blt.n	80014a6 <sd_write+0x1a>
	}
	return ret;
 8001514:	7b7b      	ldrb	r3, [r7, #13]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	08017b78 	.word	0x08017b78
 8001524:	20037ecc 	.word	0x20037ecc
 8001528:	20037f5c 	.word	0x20037f5c
 800152c:	20037f4c 	.word	0x20037f4c

08001530 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af02      	add	r7, sp, #8
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	4613      	mov	r3, r2
 800153e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f9c0 	bl	80018cc <create_path>

	if(state == OVER_WRITE){
 800154c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	d108      	bne.n	8001566 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001554:	4822      	ldr	r0, [pc, #136]	; (80015e0 <sd_write_array_float+0xb0>)
 8001556:	f00f fcf6 	bl	8010f46 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800155a:	4822      	ldr	r0, [pc, #136]	; (80015e4 <sd_write_array_float+0xb4>)
 800155c:	f00f ff61 	bl	8011422 <f_unlink>
		f_chdir("..");
 8001560:	4821      	ldr	r0, [pc, #132]	; (80015e8 <sd_write_array_float+0xb8>)
 8001562:	f00f fcf0 	bl	8010f46 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001566:	f000 f9c7 	bl	80018f8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800156a:	2300      	movs	r3, #0
 800156c:	82fb      	strh	r3, [r7, #22]
 800156e:	e028      	b.n	80015c2 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001570:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe fffb 	bl	8000578 <__aeabi_f2d>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	e9cd 3400 	strd	r3, r4, [sp]
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <sd_write_array_float+0xbc>)
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	4818      	ldr	r0, [pc, #96]	; (80015f0 <sd_write_array_float+0xc0>)
 8001590:	f012 fada 	bl	8013b48 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <sd_write_array_float+0xc4>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4619      	mov	r1, r3
 800159a:	4816      	ldr	r0, [pc, #88]	; (80015f4 <sd_write_array_float+0xc4>)
 800159c:	f00f fd1d 	bl	8010fda <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <sd_write_array_float+0xc0>)
 80015a2:	f7fe fe2d 	bl	8000200 <strlen>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <sd_write_array_float+0xc8>)
 80015aa:	4911      	ldr	r1, [pc, #68]	; (80015f0 <sd_write_array_float+0xc0>)
 80015ac:	4811      	ldr	r0, [pc, #68]	; (80015f4 <sd_write_array_float+0xc4>)
 80015ae:	f00f fa8e 	bl	8010ace <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80015b2:	f000 f9bb 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 80015b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	82fb      	strh	r3, [r7, #22]
 80015c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbd0      	blt.n	8001570 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80015ce:	4809      	ldr	r0, [pc, #36]	; (80015f4 <sd_write_array_float+0xc4>)
 80015d0:	f00f fc8f 	bl	8010ef2 <f_close>

	return ret;
 80015d4:	7d7b      	ldrb	r3, [r7, #21]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	20037dcc 	.word	0x20037dcc
 80015e4:	20036c88 	.word	0x20036c88
 80015e8:	08017b88 	.word	0x08017b88
 80015ec:	08017b78 	.word	0x08017b78
 80015f0:	20037ecc 	.word	0x20037ecc
 80015f4:	20037f5c 	.word	0x20037f5c
 80015f8:	20037f4c 	.word	0x20037f4c

080015fc <sd_write_array_double>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, double *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data, char state){
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af02      	add	r7, sp, #8
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	4613      	mov	r3, r2
 800160a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 f95a 	bl	80018cc <create_path>

	if(state == OVER_WRITE){
 8001618:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	d108      	bne.n	8001632 <sd_write_array_double+0x36>
		f_chdir(dirpath);
 8001620:	4820      	ldr	r0, [pc, #128]	; (80016a4 <sd_write_array_double+0xa8>)
 8001622:	f00f fc90 	bl	8010f46 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001626:	4820      	ldr	r0, [pc, #128]	; (80016a8 <sd_write_array_double+0xac>)
 8001628:	f00f fefb 	bl	8011422 <f_unlink>
		f_chdir("..");
 800162c:	481f      	ldr	r0, [pc, #124]	; (80016ac <sd_write_array_double+0xb0>)
 800162e:	f00f fc8a 	bl	8010f46 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001632:	f000 f961 	bl	80018f8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001636:	2300      	movs	r3, #0
 8001638:	82fb      	strh	r3, [r7, #22]
 800163a:	e024      	b.n	8001686 <sd_write_array_double+0x8a>
		snprintf(buffer, BUFF_SIZE, "%23.10e\n", *(data + i));	//doubleをstringに変換
 800163c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	4413      	add	r3, r2
 8001646:	e9d3 3400 	ldrd	r3, r4, [r3]
 800164a:	e9cd 3400 	strd	r3, r4, [sp]
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <sd_write_array_double+0xb4>)
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	4818      	ldr	r0, [pc, #96]	; (80016b4 <sd_write_array_double+0xb8>)
 8001654:	f012 fa78 	bl	8013b48 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <sd_write_array_double+0xbc>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4619      	mov	r1, r3
 800165e:	4816      	ldr	r0, [pc, #88]	; (80016b8 <sd_write_array_double+0xbc>)
 8001660:	f00f fcbb 	bl	8010fda <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <sd_write_array_double+0xb8>)
 8001666:	f7fe fdcb 	bl	8000200 <strlen>
 800166a:	4602      	mov	r2, r0
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <sd_write_array_double+0xc0>)
 800166e:	4911      	ldr	r1, [pc, #68]	; (80016b4 <sd_write_array_double+0xb8>)
 8001670:	4811      	ldr	r0, [pc, #68]	; (80016b8 <sd_write_array_double+0xbc>)
 8001672:	f00f fa2c 	bl	8010ace <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001676:	f000 f959 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 800167a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167e:	b29b      	uxth	r3, r3
 8001680:	3301      	adds	r3, #1
 8001682:	b29b      	uxth	r3, r3
 8001684:	82fb      	strh	r3, [r7, #22]
 8001686:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800168a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbd4      	blt.n	800163c <sd_write_array_double+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001692:	4809      	ldr	r0, [pc, #36]	; (80016b8 <sd_write_array_double+0xbc>)
 8001694:	f00f fc2d 	bl	8010ef2 <f_close>

	return ret;
 8001698:	7d7b      	ldrb	r3, [r7, #21]
}
 800169a:	4618      	mov	r0, r3
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd90      	pop	{r4, r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20037dcc 	.word	0x20037dcc
 80016a8:	20036c88 	.word	0x20036c88
 80016ac:	08017b88 	.word	0x08017b88
 80016b0:	08017b8c 	.word	0x08017b8c
 80016b4:	20037ecc 	.word	0x20037ecc
 80016b8:	20037f5c 	.word	0x20037f5c
 80016bc:	20037f4c 	.word	0x20037f4c

080016c0 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 f8f6 	bl	80018cc <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016e0:	f000 f90a 	bl	80018f8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016e4:	e019      	b.n	800171a <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80016e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	461a      	mov	r2, r3
 80016f2:	4913      	ldr	r1, [pc, #76]	; (8001740 <sd_read_array_double+0x80>)
 80016f4:	4813      	ldr	r0, [pc, #76]	; (8001744 <sd_read_array_double+0x84>)
 80016f6:	f012 fa7b 	bl	8013bf0 <siscanf>
		i++;
 80016fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3301      	adds	r3, #1
 8001702:	b29b      	uxth	r3, r3
 8001704:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001706:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800170a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800170e:	429a      	cmp	r2, r3
 8001710:	db03      	blt.n	800171a <sd_read_array_double+0x5a>
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	3b01      	subs	r3, #1
 8001716:	b29b      	uxth	r3, r3
 8001718:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <sd_read_array_double+0x88>)
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	4809      	ldr	r0, [pc, #36]	; (8001744 <sd_read_array_double+0x84>)
 8001720:	f010 f85a 	bl	80117d8 <f_gets>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1dd      	bne.n	80016e6 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800172a:	f000 f8ff 	bl	800192c <bufclear>

	f_close(&fil);	//ファイル閉じる
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <sd_read_array_double+0x88>)
 8001730:	f00f fbdf 	bl	8010ef2 <f_close>

	return ret;
 8001734:	7d7b      	ldrb	r3, [r7, #21]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	08017b98 	.word	0x08017b98
 8001744:	20037ecc 	.word	0x20037ecc
 8001748:	20037f5c 	.word	0x20037f5c

0800174c <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int *data, char state){
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	4613      	mov	r3, r2
 800175a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 f8b2 	bl	80018cc <create_path>

	if(state == OVER_WRITE){
 8001768:	f897 3020 	ldrb.w	r3, [r7, #32]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d108      	bne.n	8001782 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001770:	481e      	ldr	r0, [pc, #120]	; (80017ec <sd_write_array_int+0xa0>)
 8001772:	f00f fbe8 	bl	8010f46 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001776:	481e      	ldr	r0, [pc, #120]	; (80017f0 <sd_write_array_int+0xa4>)
 8001778:	f00f fe53 	bl	8011422 <f_unlink>
		f_chdir("..");
 800177c:	481d      	ldr	r0, [pc, #116]	; (80017f4 <sd_write_array_int+0xa8>)
 800177e:	f00f fbe2 	bl	8010f46 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001782:	f000 f8b9 	bl	80018f8 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001786:	2300      	movs	r3, #0
 8001788:	82fb      	strh	r3, [r7, #22]
 800178a:	e021      	b.n	80017d0 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 800178c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	4413      	add	r3, r2
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a17      	ldr	r2, [pc, #92]	; (80017f8 <sd_write_array_int+0xac>)
 800179a:	2180      	movs	r1, #128	; 0x80
 800179c:	4817      	ldr	r0, [pc, #92]	; (80017fc <sd_write_array_int+0xb0>)
 800179e:	f012 f9d3 	bl	8013b48 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <sd_write_array_int+0xb4>)
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	4619      	mov	r1, r3
 80017a8:	4815      	ldr	r0, [pc, #84]	; (8001800 <sd_write_array_int+0xb4>)
 80017aa:	f00f fc16 	bl	8010fda <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80017ae:	4813      	ldr	r0, [pc, #76]	; (80017fc <sd_write_array_int+0xb0>)
 80017b0:	f7fe fd26 	bl	8000200 <strlen>
 80017b4:	4602      	mov	r2, r0
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <sd_write_array_int+0xb8>)
 80017b8:	4910      	ldr	r1, [pc, #64]	; (80017fc <sd_write_array_int+0xb0>)
 80017ba:	4811      	ldr	r0, [pc, #68]	; (8001800 <sd_write_array_int+0xb4>)
 80017bc:	f00f f987 	bl	8010ace <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80017c0:	f000 f8b4 	bl	800192c <bufclear>
	for(short i = 0 ; i < size; i++){
 80017c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	3301      	adds	r3, #1
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	82fb      	strh	r3, [r7, #22]
 80017d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d8:	429a      	cmp	r2, r3
 80017da:	dbd7      	blt.n	800178c <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 80017dc:	4808      	ldr	r0, [pc, #32]	; (8001800 <sd_write_array_int+0xb4>)
 80017de:	f00f fb88 	bl	8010ef2 <f_close>

	return ret;
 80017e2:	7d7b      	ldrb	r3, [r7, #21]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20037dcc 	.word	0x20037dcc
 80017f0:	20036c88 	.word	0x20036c88
 80017f4:	08017b88 	.word	0x08017b88
 80017f8:	08017b9c 	.word	0x08017b9c
 80017fc:	20037ecc 	.word	0x20037ecc
 8001800:	20037f5c 	.word	0x20037f5c
 8001804:	20037f4c 	.word	0x20037f4c

08001808 <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(const char  *p_folder_name, const char *p_file_name, short size, int *data){
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	4613      	mov	r3, r2
 8001816:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001820:	68b9      	ldr	r1, [r7, #8]
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 f852 	bl	80018cc <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001828:	f000 f866 	bl	80018f8 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800182c:	e019      	b.n	8001862 <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 800182e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	4413      	add	r3, r2
 8001838:	461a      	mov	r2, r3
 800183a:	4913      	ldr	r1, [pc, #76]	; (8001888 <sd_read_array_int+0x80>)
 800183c:	4813      	ldr	r0, [pc, #76]	; (800188c <sd_read_array_int+0x84>)
 800183e:	f012 f9d7 	bl	8013bf0 <siscanf>
		i++;
 8001842:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001846:	b29b      	uxth	r3, r3
 8001848:	3301      	adds	r3, #1
 800184a:	b29b      	uxth	r3, r3
 800184c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800184e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001856:	429a      	cmp	r2, r3
 8001858:	db03      	blt.n	8001862 <sd_read_array_int+0x5a>
 800185a:	88fb      	ldrh	r3, [r7, #6]
 800185c:	3b01      	subs	r3, #1
 800185e:	b29b      	uxth	r3, r3
 8001860:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001862:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <sd_read_array_int+0x88>)
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	4809      	ldr	r0, [pc, #36]	; (800188c <sd_read_array_int+0x84>)
 8001868:	f00f ffb6 	bl	80117d8 <f_gets>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1dd      	bne.n	800182e <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001872:	f000 f85b 	bl	800192c <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <sd_read_array_int+0x88>)
 8001878:	f00f fb3b 	bl	8010ef2 <f_close>

	return ret;
 800187c:	7d7b      	ldrb	r3, [r7, #21]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	08017ba0 	.word	0x08017ba0
 800188c:	20037ecc 	.word	0x20037ecc
 8001890:	20037f5c 	.word	0x20037f5c

08001894 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800189e:	2201      	movs	r2, #1
 80018a0:	4908      	ldr	r1, [pc, #32]	; (80018c4 <sd_mount+0x30>)
 80018a2:	4809      	ldr	r0, [pc, #36]	; (80018c8 <sd_mount+0x34>)
 80018a4:	f00e fda2 	bl	80103ec <f_mount>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d102      	bne.n	80018b4 <sd_mount+0x20>
 80018ae:	2301      	movs	r3, #1
 80018b0:	71fb      	strb	r3, [r7, #7]
 80018b2:	e001      	b.n	80018b8 <sd_mount+0x24>
	else ret = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	71fb      	strb	r3, [r7, #7]

	return ret;
 80018b8:	79fb      	ldrb	r3, [r7, #7]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	08017ba4 	.word	0x08017ba4
 80018c8:	20036d88 	.word	0x20036d88

080018cc <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <create_path+0x24>)
 80018da:	f012 f9f8 	bl	8013cce <strcpy>

	sprintf(filepath, "%s", p_file_name);
 80018de:	6839      	ldr	r1, [r7, #0]
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <create_path+0x28>)
 80018e2:	f012 f9f4 	bl	8013cce <strcpy>

}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20037dcc 	.word	0x20037dcc
 80018f4:	20036c88 	.word	0x20036c88

080018f8 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80018fc:	4807      	ldr	r0, [pc, #28]	; (800191c <fopen_folder_and_file+0x24>)
 80018fe:	f00f fe51 	bl	80115a4 <f_mkdir>

	f_chdir(dirpath);
 8001902:	4806      	ldr	r0, [pc, #24]	; (800191c <fopen_folder_and_file+0x24>)
 8001904:	f00f fb1f 	bl	8010f46 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001908:	2213      	movs	r2, #19
 800190a:	4905      	ldr	r1, [pc, #20]	; (8001920 <fopen_folder_and_file+0x28>)
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <fopen_folder_and_file+0x2c>)
 800190e:	f00e fdb3 	bl	8010478 <f_open>

	f_chdir("..");
 8001912:	4805      	ldr	r0, [pc, #20]	; (8001928 <fopen_folder_and_file+0x30>)
 8001914:	f00f fb17 	bl	8010f46 <f_chdir>


}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20037dcc 	.word	0x20037dcc
 8001920:	20036c88 	.word	0x20036c88
 8001924:	20037f5c 	.word	0x20037f5c
 8001928:	08017b88 	.word	0x08017b88

0800192c <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	e007      	b.n	8001948 <bufclear+0x1c>
		buffer[i] = '\0';
 8001938:	4a08      	ldr	r2, [pc, #32]	; (800195c <bufclear+0x30>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3301      	adds	r3, #1
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b7f      	cmp	r3, #127	; 0x7f
 800194c:	ddf4      	ble.n	8001938 <bufclear+0xc>
	}
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20037ecc 	.word	0x20037ecc

08001960 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001970:	b2db      	uxtb	r3, r3
 8001972:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001974:	2200      	movs	r2, #0
 8001976:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800197a:	480e      	ldr	r0, [pc, #56]	; (80019b4 <read_byte+0x54>)
 800197c:	f006 f886 	bl	8007a8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001980:	f107 010f 	add.w	r1, r7, #15
 8001984:	2364      	movs	r3, #100	; 0x64
 8001986:	2201      	movs	r2, #1
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <read_byte+0x58>)
 800198a:	f009 fa47 	bl	800ae1c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 800198e:	f107 010e 	add.w	r1, r7, #14
 8001992:	2364      	movs	r3, #100	; 0x64
 8001994:	2201      	movs	r2, #1
 8001996:	4808      	ldr	r0, [pc, #32]	; (80019b8 <read_byte+0x58>)
 8001998:	f009 fb74 	bl	800b084 <HAL_SPI_Receive>
	CS_SET;
 800199c:	2201      	movs	r2, #1
 800199e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a2:	4804      	ldr	r0, [pc, #16]	; (80019b4 <read_byte+0x54>)
 80019a4:	f006 f872 	bl	8007a8c <HAL_GPIO_WritePin>

	return val;
 80019a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40020400 	.word	0x40020400
 80019b8:	20038ff8 	.word	0x20038ff8

080019bc <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	460a      	mov	r2, r1
 80019c6:	71fb      	strb	r3, [r7, #7]
 80019c8:	4613      	mov	r3, r2
 80019ca:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <write_byte+0x54>)
 80019de:	f006 f855 	bl	8007a8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80019e2:	f107 010f 	add.w	r1, r7, #15
 80019e6:	2364      	movs	r3, #100	; 0x64
 80019e8:	2201      	movs	r2, #1
 80019ea:	480a      	ldr	r0, [pc, #40]	; (8001a14 <write_byte+0x58>)
 80019ec:	f009 fa16 	bl	800ae1c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80019f0:	1db9      	adds	r1, r7, #6
 80019f2:	2364      	movs	r3, #100	; 0x64
 80019f4:	2201      	movs	r2, #1
 80019f6:	4807      	ldr	r0, [pc, #28]	; (8001a14 <write_byte+0x58>)
 80019f8:	f009 fa10 	bl	800ae1c <HAL_SPI_Transmit>
	CS_SET;
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a02:	4803      	ldr	r0, [pc, #12]	; (8001a10 <write_byte+0x54>)
 8001a04:	f006 f842 	bl	8007a8c <HAL_GPIO_WritePin>
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40020400 	.word	0x40020400
 8001a14:	20038ff8 	.word	0x20038ff8

08001a18 <IMU_init>:

uint16_t IMU_init() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff ff9c 	bl	8001960 <read_byte>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001a2c:	797b      	ldrb	r3, [r7, #5]
 8001a2e:	2be0      	cmp	r3, #224	; 0xe0
 8001a30:	d119      	bne.n	8001a66 <IMU_init+0x4e>
		ret = 1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001a36:	2101      	movs	r1, #1
 8001a38:	2006      	movs	r0, #6
 8001a3a:	f7ff ffbf 	bl	80019bc <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001a3e:	2110      	movs	r1, #16
 8001a40:	2003      	movs	r0, #3
 8001a42:	f7ff ffbb 	bl	80019bc <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001a46:	2120      	movs	r1, #32
 8001a48:	207f      	movs	r0, #127	; 0x7f
 8001a4a:	f7ff ffb7 	bl	80019bc <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001a4e:	2106      	movs	r1, #6
 8001a50:	2001      	movs	r0, #1
 8001a52:	f7ff ffb3 	bl	80019bc <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001a56:	2106      	movs	r1, #6
 8001a58:	2014      	movs	r0, #20
 8001a5a:	f7ff ffaf 	bl	80019bc <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001a5e:	2100      	movs	r1, #0
 8001a60:	207f      	movs	r0, #127	; 0x7f
 8001a62:	f7ff ffab 	bl	80019bc <write_byte>
	}
	return ret;
 8001a66:	88fb      	ldrh	r3, [r7, #6]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <read_gyro_data>:

void read_gyro_data() {
 8001a70:	b598      	push	{r3, r4, r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001a74:	2033      	movs	r0, #51	; 0x33
 8001a76:	f7ff ff73 	bl	8001960 <read_byte>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	b21c      	sxth	r4, r3
 8001a80:	2034      	movs	r0, #52	; 0x34
 8001a82:	f7ff ff6d 	bl	8001960 <read_byte>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	b21a      	sxth	r2, r3
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <read_gyro_data+0x64>)
 8001a90:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001a92:	2035      	movs	r0, #53	; 0x35
 8001a94:	f7ff ff64 	bl	8001960 <read_byte>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	b21c      	sxth	r4, r3
 8001a9e:	2036      	movs	r0, #54	; 0x36
 8001aa0:	f7ff ff5e 	bl	8001960 <read_byte>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	4323      	orrs	r3, r4
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <read_gyro_data+0x68>)
 8001aae:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001ab0:	2037      	movs	r0, #55	; 0x37
 8001ab2:	f7ff ff55 	bl	8001960 <read_byte>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	b21c      	sxth	r4, r3
 8001abc:	2038      	movs	r0, #56	; 0x38
 8001abe:	f7ff ff4f 	bl	8001960 <read_byte>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	4323      	orrs	r3, r4
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <read_gyro_data+0x6c>)
 8001acc:	801a      	strh	r2, [r3, #0]
}
 8001ace:	bf00      	nop
 8001ad0:	bd98      	pop	{r3, r4, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20038f94 	.word	0x20038f94
 8001ad8:	20038f92 	.word	0x20038f92
 8001adc:	20038f8c 	.word	0x20038f8c

08001ae0 <read_accel_data>:

void read_accel_data() {
 8001ae0:	b598      	push	{r3, r4, r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8001ae4:	202d      	movs	r0, #45	; 0x2d
 8001ae6:	f7ff ff3b 	bl	8001960 <read_byte>
 8001aea:	4603      	mov	r3, r0
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	b21c      	sxth	r4, r3
 8001af0:	202e      	movs	r0, #46	; 0x2e
 8001af2:	f7ff ff35 	bl	8001960 <read_byte>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	4323      	orrs	r3, r4
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <read_accel_data+0x64>)
 8001b00:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 8001b02:	202f      	movs	r0, #47	; 0x2f
 8001b04:	f7ff ff2c 	bl	8001960 <read_byte>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	b21c      	sxth	r4, r3
 8001b0e:	2030      	movs	r0, #48	; 0x30
 8001b10:	f7ff ff26 	bl	8001960 <read_byte>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	4323      	orrs	r3, r4
 8001b1a:	b21a      	sxth	r2, r3
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <read_accel_data+0x68>)
 8001b1e:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 8001b20:	2031      	movs	r0, #49	; 0x31
 8001b22:	f7ff ff1d 	bl	8001960 <read_byte>
 8001b26:	4603      	mov	r3, r0
 8001b28:	021b      	lsls	r3, r3, #8
 8001b2a:	b21c      	sxth	r4, r3
 8001b2c:	2032      	movs	r0, #50	; 0x32
 8001b2e:	f7ff ff17 	bl	8001960 <read_byte>
 8001b32:	4603      	mov	r3, r0
 8001b34:	b21b      	sxth	r3, r3
 8001b36:	4323      	orrs	r3, r4
 8001b38:	b21a      	sxth	r2, r3
 8001b3a:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <read_accel_data+0x6c>)
 8001b3c:	801a      	strh	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	bd98      	pop	{r3, r4, r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20038f90 	.word	0x20038f90
 8001b48:	20038f96 	.word	0x20038f96
 8001b4c:	20038f8e 	.word	0x20038f8e

08001b50 <_ZN3IMUC1Ev>:
#include "stdio.h"
#include <vector>

#define PI 3.1415926535

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001b50:	b490      	push	{r4, r7}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	801a      	strh	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	805a      	strh	r2, [r3, #2]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	809a      	strh	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	80da      	strh	r2, [r3, #6]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	811a      	strh	r2, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	815a      	strh	r2, [r3, #10]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	f04f 0400 	mov.w	r4, #0
 8001b86:	e9c2 3404 	strd	r3, r4, [r2, #16]
{

}
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc90      	pop	{r4, r7}
 8001b94:	4770      	bx	lr
	...

08001b98 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001ba0:	f7ff ff3a 	bl	8001a18 <IMU_init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001ba8:	89fb      	ldrh	r3, [r7, #14]
 8001baa:	4619      	mov	r1, r3
 8001bac:	4803      	ldr	r0, [pc, #12]	; (8001bbc <_ZN3IMU4initEv+0x24>)
 8001bae:	f011 ff49 	bl	8013a44 <iprintf>

}
 8001bb2:	bf00      	nop
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	08017ba8 	.word	0x08017ba8

08001bc0 <_ZN3IMU12updateValuesEv>:

void IMU::updateValues()
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001bc8:	f7ff ff52 	bl	8001a70 <read_gyro_data>
	read_accel_data();
 8001bcc:	f7ff ff88 	bl	8001ae0 <read_accel_data>

	xa_ = xa;
 8001bd0:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <_ZN3IMU12updateValuesEv+0x54>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	b21a      	sxth	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	801a      	strh	r2, [r3, #0]
	ya_ = ya;
 8001bda:	4b0f      	ldr	r3, [pc, #60]	; (8001c18 <_ZN3IMU12updateValuesEv+0x58>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	b21a      	sxth	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	805a      	strh	r2, [r3, #2]
	za_ = za;
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <_ZN3IMU12updateValuesEv+0x5c>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	b21a      	sxth	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	809a      	strh	r2, [r3, #4]
	xg_ = xg;
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <_ZN3IMU12updateValuesEv+0x60>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <_ZN3IMU12updateValuesEv+0x64>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <_ZN3IMU12updateValuesEv+0x68>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	b21a      	sxth	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	815a      	strh	r2, [r3, #10]

}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20038f90 	.word	0x20038f90
 8001c18:	20038f96 	.word	0x20038f96
 8001c1c:	20038f8e 	.word	0x20038f8e
 8001c20:	20038f94 	.word	0x20038f94
 8001c24:	20038f92 	.word	0x20038f92
 8001c28:	20038f8c 	.word	0x20038f8c
 8001c2c:	00000000 	.word	0x00000000

08001c30 <_ZN3IMU8getOmegaEv>:

double IMU::getOmega()
{
 8001c30:	b5b0      	push	{r4, r5, r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	double corrected_zg = double(zg_) - offset_;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fc88 	bl	8000554 <__aeabi_i2d>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001c4a:	f7fe fb35 	bl	80002b8 <__aeabi_dsub>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return -(corrected_zg / 16.4) * PI / 180;
 8001c56:	a315      	add	r3, pc, #84	; (adr r3, 8001cac <_ZN3IMU8getOmegaEv+0x7c>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001c60:	f7fe fe0c 	bl	800087c <__aeabi_ddiv>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4614      	mov	r4, r2
 8001c6a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001c6e:	a311      	add	r3, pc, #68	; (adr r3, 8001cb4 <_ZN3IMU8getOmegaEv+0x84>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	4620      	mov	r0, r4
 8001c76:	4629      	mov	r1, r5
 8001c78:	f7fe fcd6 	bl	8000628 <__aeabi_dmul>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	460c      	mov	r4, r1
 8001c80:	4618      	mov	r0, r3
 8001c82:	4621      	mov	r1, r4
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <_ZN3IMU8getOmegaEv+0x78>)
 8001c8a:	f7fe fdf7 	bl	800087c <__aeabi_ddiv>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	460c      	mov	r4, r1
 8001c92:	ec44 3b17 	vmov	d7, r3, r4
}
 8001c96:	eeb0 0a47 	vmov.f32	s0, s14
 8001c9a:	eef0 0a67 	vmov.f32	s1, s15
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca4:	f3af 8000 	nop.w
 8001ca8:	40668000 	.word	0x40668000
 8001cac:	66666666 	.word	0x66666666
 8001cb0:	40306666 	.word	0x40306666
 8001cb4:	54411744 	.word	0x54411744
 8001cb8:	400921fb 	.word	0x400921fb

08001cbc <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cc0:	b08a      	sub	sp, #40	; 0x28
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001cc6:	466b      	mov	r3, sp
 8001cc8:	4698      	mov	r8, r3
	HAL_Delay(1000);
 8001cca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cce:	f004 fc47 	bl	8006560 <HAL_Delay>
	int16_t num = 2000;
 8001cd2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cd6:	83bb      	strh	r3, [r7, #28]
	double zg_vals[num];
 8001cd8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cdc:	1e5d      	subs	r5, r3, #1
 8001cde:	61bd      	str	r5, [r7, #24]
 8001ce0:	462b      	mov	r3, r5
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	f04f 0400 	mov.w	r4, #0
 8001cf2:	0194      	lsls	r4, r2, #6
 8001cf4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001cf8:	018b      	lsls	r3, r1, #6
 8001cfa:	462b      	mov	r3, r5
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	f04f 0400 	mov.w	r4, #0
 8001d0c:	0194      	lsls	r4, r2, #6
 8001d0e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d12:	018b      	lsls	r3, r1, #6
 8001d14:	462b      	mov	r3, r5
 8001d16:	3301      	adds	r3, #1
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	3307      	adds	r3, #7
 8001d1c:	3307      	adds	r3, #7
 8001d1e:	08db      	lsrs	r3, r3, #3
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	ebad 0d03 	sub.w	sp, sp, r3
 8001d26:	466b      	mov	r3, sp
 8001d28:	3307      	adds	r3, #7
 8001d2a:	08db      	lsrs	r3, r3, #3
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001d30:	2300      	movs	r3, #0
 8001d32:	83fb      	strh	r3, [r7, #30]
 8001d34:	8bfa      	ldrh	r2, [r7, #30]
 8001d36:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	da14      	bge.n	8001d68 <_ZN3IMU11calibrationEv+0xac>
		zg_vals[i] = double(zg_);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d44:	8bfe      	ldrh	r6, [r7, #30]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fc04 	bl	8000554 <__aeabi_i2d>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	460c      	mov	r4, r1
 8001d50:	6979      	ldr	r1, [r7, #20]
 8001d52:	00f2      	lsls	r2, r6, #3
 8001d54:	440a      	add	r2, r1
 8001d56:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_Delay(2);
 8001d5a:	2002      	movs	r0, #2
 8001d5c:	f004 fc00 	bl	8006560 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001d60:	8bfb      	ldrh	r3, [r7, #30]
 8001d62:	3301      	adds	r3, #1
 8001d64:	83fb      	strh	r3, [r7, #30]
 8001d66:	e7e5      	b.n	8001d34 <_ZN3IMU11calibrationEv+0x78>
	for(const auto &v : zg_vals){
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	462b      	mov	r3, r5
 8001d70:	3301      	adds	r3, #1
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d017      	beq.n	8001db0 <_ZN3IMU11calibrationEv+0xf4>
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001d84:	6a38      	ldr	r0, [r7, #32]
 8001d86:	f7fe fbf7 	bl	8000578 <__aeabi_f2d>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d90:	461a      	mov	r2, r3
 8001d92:	4623      	mov	r3, r4
 8001d94:	f7fe fa92 	bl	80002bc <__adddf3>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	460c      	mov	r4, r1
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	4621      	mov	r1, r4
 8001da0:	f7fe ff3a 	bl	8000c18 <__aeabi_d2f>
 8001da4:	4603      	mov	r3, r0
 8001da6:	623b      	str	r3, [r7, #32]
	for(const auto &v : zg_vals){
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	3308      	adds	r3, #8
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
 8001dae:	e7e3      	b.n	8001d78 <_ZN3IMU11calibrationEv+0xbc>
	offset_ = sum / num;
 8001db0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbc:	ed97 7a08 	vldr	s14, [r7, #32]
 8001dc0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dc4:	ee16 0a90 	vmov	r0, s13
 8001dc8:	f7fe fbd6 	bl	8000578 <__aeabi_f2d>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	460c      	mov	r4, r1
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001dd6:	46c5      	mov	sp, r8
}
 8001dd8:	bf00      	nop
 8001dda:	3728      	adds	r7, #40	; 0x28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001de4 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	4603      	mov	r3, r0
 8001dec:	460a      	mov	r2, r1
 8001dee:	71fb      	strb	r3, [r7, #7]
 8001df0:	4613      	mov	r3, r2
 8001df2:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001df4:	79bb      	ldrb	r3, [r7, #6]
 8001df6:	b299      	uxth	r1, r3
 8001df8:	1dfa      	adds	r2, r7, #7
 8001dfa:	2364      	movs	r3, #100	; 0x64
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	2301      	movs	r3, #1
 8001e00:	480c      	ldr	r0, [pc, #48]	; (8001e34 <INA260_read+0x50>)
 8001e02:	f005 ffad 	bl	8007d60 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001e06:	79bb      	ldrb	r3, [r7, #6]
 8001e08:	b299      	uxth	r1, r3
 8001e0a:	f107 020c 	add.w	r2, r7, #12
 8001e0e:	2364      	movs	r3, #100	; 0x64
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2302      	movs	r3, #2
 8001e14:	4807      	ldr	r0, [pc, #28]	; (8001e34 <INA260_read+0x50>)
 8001e16:	f006 f8a1 	bl	8007f5c <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001e1a:	7b3b      	ldrb	r3, [r7, #12]
 8001e1c:	021b      	lsls	r3, r3, #8
 8001e1e:	b21a      	sxth	r2, r3
 8001e20:	7b7b      	ldrb	r3, [r7, #13]
 8001e22:	b21b      	sxth	r3, r3
 8001e24:	4313      	orrs	r3, r2
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	81fb      	strh	r3, [r7, #14]
	return val;
 8001e2a:	89fb      	ldrh	r3, [r7, #14]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200391ac 	.word	0x200391ac

08001e38 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001e38:	b590      	push	{r4, r7, lr}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af02      	add	r7, sp, #8
 8001e3e:	4604      	mov	r4, r0
 8001e40:	4608      	mov	r0, r1
 8001e42:	4611      	mov	r1, r2
 8001e44:	461a      	mov	r2, r3
 8001e46:	4623      	mov	r3, r4
 8001e48:	71fb      	strb	r3, [r7, #7]
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	71bb      	strb	r3, [r7, #6]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	717b      	strb	r3, [r7, #5]
 8001e52:	4613      	mov	r3, r2
 8001e54:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	733b      	strb	r3, [r7, #12]
 8001e5a:	79bb      	ldrb	r3, [r7, #6]
 8001e5c:	737b      	strb	r3, [r7, #13]
 8001e5e:	797b      	ldrb	r3, [r7, #5]
 8001e60:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001e62:	793b      	ldrb	r3, [r7, #4]
 8001e64:	b299      	uxth	r1, r3
 8001e66:	f107 020c 	add.w	r2, r7, #12
 8001e6a:	2364      	movs	r3, #100	; 0x64
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2303      	movs	r3, #3
 8001e70:	4803      	ldr	r0, [pc, #12]	; (8001e80 <INA260_write+0x48>)
 8001e72:	f005 ff75 	bl	8007d60 <HAL_I2C_Master_Transmit>
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd90      	pop	{r4, r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200391ac 	.word	0x200391ac

08001e84 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	71bb      	strb	r3, [r7, #6]
 8001e92:	4613      	mov	r3, r2
 8001e94:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001e96:	797b      	ldrb	r3, [r7, #5]
 8001e98:	79ba      	ldrb	r2, [r7, #6]
 8001e9a:	79f9      	ldrb	r1, [r7, #7]
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f7ff ffcb 	bl	8001e38 <INA260_write>
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	21df      	movs	r1, #223	; 0xdf
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f7ff ffe2 	bl	8001e84 <setConfig>
}
 8001ec0:	bf00      	nop
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
{

}
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef0:	482a      	ldr	r0, [pc, #168]	; (8001f9c <_ZN8JoyStick8getValueEv+0xbc>)
 8001ef2:	f005 fdb3 	bl	8007a5c <HAL_GPIO_ReadPin>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bf0c      	ite	eq
 8001efc:	2301      	moveq	r3, #1
 8001efe:	2300      	movne	r3, #0
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <_ZN8JoyStick8getValueEv+0x2e>
 8001f06:	89fb      	ldrh	r3, [r7, #14]
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001f0e:	2101      	movs	r1, #1
 8001f10:	4823      	ldr	r0, [pc, #140]	; (8001fa0 <_ZN8JoyStick8getValueEv+0xc0>)
 8001f12:	f005 fda3 	bl	8007a5c <HAL_GPIO_ReadPin>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	bf0c      	ite	eq
 8001f1c:	2301      	moveq	r3, #1
 8001f1e:	2300      	movne	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <_ZN8JoyStick8getValueEv+0x4e>
 8001f26:	89fb      	ldrh	r3, [r7, #14]
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f32:	481a      	ldr	r0, [pc, #104]	; (8001f9c <_ZN8JoyStick8getValueEv+0xbc>)
 8001f34:	f005 fd92 	bl	8007a5c <HAL_GPIO_ReadPin>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	bf0c      	ite	eq
 8001f3e:	2301      	moveq	r3, #1
 8001f40:	2300      	movne	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <_ZN8JoyStick8getValueEv+0x70>
 8001f48:	89fb      	ldrh	r3, [r7, #14]
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001f50:	2104      	movs	r1, #4
 8001f52:	4814      	ldr	r0, [pc, #80]	; (8001fa4 <_ZN8JoyStick8getValueEv+0xc4>)
 8001f54:	f005 fd82 	bl	8007a5c <HAL_GPIO_ReadPin>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	bf0c      	ite	eq
 8001f5e:	2301      	moveq	r3, #1
 8001f60:	2300      	movne	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <_ZN8JoyStick8getValueEv+0x90>
 8001f68:	89fb      	ldrh	r3, [r7, #14]
 8001f6a:	f043 0308 	orr.w	r3, r3, #8
 8001f6e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001f70:	2180      	movs	r1, #128	; 0x80
 8001f72:	480a      	ldr	r0, [pc, #40]	; (8001f9c <_ZN8JoyStick8getValueEv+0xbc>)
 8001f74:	f005 fd72 	bl	8007a5c <HAL_GPIO_ReadPin>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	bf0c      	ite	eq
 8001f7e:	2301      	moveq	r3, #1
 8001f80:	2300      	movne	r3, #0
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d003      	beq.n	8001f90 <_ZN8JoyStick8getValueEv+0xb0>
 8001f88:	89fb      	ldrh	r3, [r7, #14]
 8001f8a:	f043 0310 	orr.w	r3, r3, #16
 8001f8e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001f90:	89fb      	ldrh	r3, [r7, #14]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40020c00 	.word	0x40020c00
 8001fa4:	40020400 	.word	0x40020400

08001fa8 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001fb4:	78fb      	ldrb	r3, [r7, #3]
 8001fb6:	2b52      	cmp	r3, #82	; 0x52
 8001fb8:	d112      	bne.n	8001fe0 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc0:	4856      	ldr	r0, [pc, #344]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8001fc2:	f005 fd63 	bl	8007a8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fcc:	4853      	ldr	r0, [pc, #332]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f005 fd5d 	bl	8007a8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fd8:	4850      	ldr	r0, [pc, #320]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8001fda:	f005 fd57 	bl	8007a8c <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001fde:	e098      	b.n	8002112 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	2b47      	cmp	r3, #71	; 0x47
 8001fe4:	d112      	bne.n	800200c <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fec:	484b      	ldr	r0, [pc, #300]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8001fee:	f005 fd4d 	bl	8007a8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ff8:	4848      	ldr	r0, [pc, #288]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8001ffa:	f005 fd47 	bl	8007a8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ffe:	2201      	movs	r2, #1
 8002000:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002004:	4845      	ldr	r0, [pc, #276]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8002006:	f005 fd41 	bl	8007a8c <HAL_GPIO_WritePin>
}
 800200a:	e082      	b.n	8002112 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	2b42      	cmp	r3, #66	; 0x42
 8002010:	d112      	bne.n	8002038 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002012:	2201      	movs	r2, #1
 8002014:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002018:	4840      	ldr	r0, [pc, #256]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 800201a:	f005 fd37 	bl	8007a8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800201e:	2201      	movs	r2, #1
 8002020:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002024:	483d      	ldr	r0, [pc, #244]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8002026:	f005 fd31 	bl	8007a8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800202a:	2200      	movs	r2, #0
 800202c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002030:	483a      	ldr	r0, [pc, #232]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8002032:	f005 fd2b 	bl	8007a8c <HAL_GPIO_WritePin>
}
 8002036:	e06c      	b.n	8002112 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	2b43      	cmp	r3, #67	; 0x43
 800203c:	d112      	bne.n	8002064 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800203e:	2201      	movs	r2, #1
 8002040:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002044:	4835      	ldr	r0, [pc, #212]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8002046:	f005 fd21 	bl	8007a8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002050:	4832      	ldr	r0, [pc, #200]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8002052:	f005 fd1b 	bl	8007a8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002056:	2200      	movs	r2, #0
 8002058:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800205c:	482f      	ldr	r0, [pc, #188]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 800205e:	f005 fd15 	bl	8007a8c <HAL_GPIO_WritePin>
}
 8002062:	e056      	b.n	8002112 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	2b4d      	cmp	r3, #77	; 0x4d
 8002068:	d112      	bne.n	8002090 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800206a:	2200      	movs	r2, #0
 800206c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002070:	482a      	ldr	r0, [pc, #168]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8002072:	f005 fd0b 	bl	8007a8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002076:	2201      	movs	r2, #1
 8002078:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800207c:	4827      	ldr	r0, [pc, #156]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 800207e:	f005 fd05 	bl	8007a8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002088:	4824      	ldr	r0, [pc, #144]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 800208a:	f005 fcff 	bl	8007a8c <HAL_GPIO_WritePin>
}
 800208e:	e040      	b.n	8002112 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	2b59      	cmp	r3, #89	; 0x59
 8002094:	d112      	bne.n	80020bc <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800209c:	481f      	ldr	r0, [pc, #124]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 800209e:	f005 fcf5 	bl	8007a8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020a8:	481c      	ldr	r0, [pc, #112]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 80020aa:	f005 fcef 	bl	8007a8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80020ae:	2201      	movs	r2, #1
 80020b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020b4:	4819      	ldr	r0, [pc, #100]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 80020b6:	f005 fce9 	bl	8007a8c <HAL_GPIO_WritePin>
}
 80020ba:	e02a      	b.n	8002112 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	2b57      	cmp	r3, #87	; 0x57
 80020c0:	d112      	bne.n	80020e8 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80020c2:	2200      	movs	r2, #0
 80020c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020c8:	4814      	ldr	r0, [pc, #80]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 80020ca:	f005 fcdf 	bl	8007a8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80020ce:	2200      	movs	r2, #0
 80020d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020d4:	4811      	ldr	r0, [pc, #68]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 80020d6:	f005 fcd9 	bl	8007a8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80020da:	2200      	movs	r2, #0
 80020dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020e0:	480e      	ldr	r0, [pc, #56]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 80020e2:	f005 fcd3 	bl	8007a8c <HAL_GPIO_WritePin>
}
 80020e6:	e014      	b.n	8002112 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	2b7e      	cmp	r3, #126	; 0x7e
 80020ec:	d111      	bne.n	8002112 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80020ee:	2201      	movs	r2, #1
 80020f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020f4:	4809      	ldr	r0, [pc, #36]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 80020f6:	f005 fcc9 	bl	8007a8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80020fa:	2201      	movs	r2, #1
 80020fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002100:	4806      	ldr	r0, [pc, #24]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 8002102:	f005 fcc3 	bl	8007a8c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002106:	2201      	movs	r2, #1
 8002108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800210c:	4803      	ldr	r0, [pc, #12]	; (800211c <_ZN3LED9fullColorEc+0x174>)
 800210e:	f005 fcbd 	bl	8007a8c <HAL_GPIO_WritePin>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40020000 	.word	0x40020000

08002120 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	70fb      	strb	r3, [r7, #3]
 800212c:	4613      	mov	r3, r2
 800212e:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d106      	bne.n	8002146 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002138:	2201      	movs	r2, #1
 800213a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800213e:	4813      	ldr	r0, [pc, #76]	; (800218c <_ZN3LED2LREaa+0x6c>)
 8002140:	f005 fca4 	bl	8007a8c <HAL_GPIO_WritePin>
 8002144:	e009      	b.n	800215a <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002146:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d105      	bne.n	800215a <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002154:	480d      	ldr	r0, [pc, #52]	; (800218c <_ZN3LED2LREaa+0x6c>)
 8002156:	f005 fc99 	bl	8007a8c <HAL_GPIO_WritePin>

	if(r_status == 1)
 800215a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d106      	bne.n	8002170 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002162:	2201      	movs	r2, #1
 8002164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002168:	4808      	ldr	r0, [pc, #32]	; (800218c <_ZN3LED2LREaa+0x6c>)
 800216a:	f005 fc8f 	bl	8007a8c <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800216e:	e009      	b.n	8002184 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8002170:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d105      	bne.n	8002184 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002178:	2200      	movs	r2, #0
 800217a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800217e:	4803      	ldr	r0, [pc, #12]	; (800218c <_ZN3LED2LREaa+0x6c>)
 8002180:	f005 fc84 	bl	8007a8c <HAL_GPIO_WritePin>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40020000 	.word	0x40020000

08002190 <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8002190:	b580      	push	{r7, lr}
 8002192:	b092      	sub	sp, #72	; 0x48
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fe92 	bl	8001ec8 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	637b      	str	r3, [r7, #52]	; 0x34
 80021a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021aa:	647b      	str	r3, [r7, #68]	; 0x44
 80021ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ae:	331c      	adds	r3, #28
 80021b0:	633b      	str	r3, [r7, #48]	; 0x30
 80021b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d008      	beq.n	80021cc <_ZN10LineSensorC1Ev+0x3c>
 80021ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80021be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c0:	2200      	movs	r2, #0
 80021c2:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80021c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c6:	3302      	adds	r3, #2
 80021c8:	647b      	str	r3, [r7, #68]	; 0x44
 80021ca:	e7f2      	b.n	80021b2 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80021d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d6:	643b      	str	r3, [r7, #64]	; 0x40
 80021d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021da:	3338      	adds	r3, #56	; 0x38
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
 80021de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d009      	beq.n	80021fa <_ZN10LineSensorC1Ev+0x6a>
 80021e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021e8:	623b      	str	r3, [r7, #32]
		s = 0;
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80021f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021f4:	3304      	adds	r3, #4
 80021f6:	643b      	str	r3, [r7, #64]	; 0x40
 80021f8:	e7f1      	b.n	80021de <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3338      	adds	r3, #56	; 0x38
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	429a      	cmp	r2, r3
 8002212:	d009      	beq.n	8002228 <_ZN10LineSensorC1Ev+0x98>
 8002214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002216:	617b      	str	r3, [r7, #20]
		m = 0;
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002222:	3304      	adds	r3, #4
 8002224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002226:	e7f1      	b.n	800220c <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	63bb      	str	r3, [r7, #56]	; 0x38
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	3338      	adds	r3, #56	; 0x38
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	429a      	cmp	r2, r3
 8002240:	d009      	beq.n	8002256 <_ZN10LineSensorC1Ev+0xc6>
 8002242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002244:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800224c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800224e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002250:	3304      	adds	r3, #4
 8002252:	63bb      	str	r3, [r7, #56]	; 0x38
 8002254:	e7f1      	b.n	800223a <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4618      	mov	r0, r3
 800225a:	3748      	adds	r7, #72	; 0x48
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	220e      	movs	r2, #14
 800226c:	4619      	mov	r1, r3
 800226e:	4803      	ldr	r0, [pc, #12]	; (800227c <_ZN10LineSensor8ADCStartEv+0x1c>)
 8002270:	f004 f9dc 	bl	800662c <HAL_ADC_Start_DMA>
}
 8002274:	bf00      	nop
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	200390d0 	.word	0x200390d0

08002280 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b0d      	cmp	r3, #13
 8002290:	dc2f      	bgt.n	80022f2 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3392      	adds	r3, #146	; 0x92
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	3304      	adds	r3, #4
 800229e:	ed93 7a00 	vldr	s14, [r3]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	33a0      	adds	r3, #160	; 0xa0
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	3304      	adds	r3, #4
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022c6:	4b14      	ldr	r3, [pc, #80]	; (8002318 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	4619      	mov	r1, r3
 80022cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	1a5b      	subs	r3, r3, r1
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	68f9      	ldr	r1, [r7, #12]
 80022dc:	440b      	add	r3, r1
 80022de:	3306      	adds	r3, #6
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	3304      	adds	r3, #4
 80022e6:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	3301      	adds	r3, #1
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	e7cc      	b.n	800228c <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	3301      	adds	r3, #1
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b07      	ldr	r3, [pc, #28]	; (8002318 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80022fc:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b09      	cmp	r3, #9
 8002304:	d902      	bls.n	800230c <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]


}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	20000200 	.word	0x20000200

0800231c <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 800231c:	b490      	push	{r4, r7}
 800231e:	b08e      	sub	sp, #56	; 0x38
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002324:	2300      	movs	r3, #0
 8002326:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800232a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800232e:	2b0d      	cmp	r3, #13
 8002330:	f200 8087 	bhi.w	8002442 <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002334:	2300      	movs	r3, #0
 8002336:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800233a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800233e:	2b09      	cmp	r3, #9
 8002340:	d81c      	bhi.n	800237c <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002342:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002346:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800234a:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4423      	add	r3, r4
 800235a:	3306      	adds	r3, #6
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4403      	add	r3, r0
 8002360:	3304      	adds	r3, #4
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	008b      	lsls	r3, r1, #2
 8002366:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800236a:	440b      	add	r3, r1
 800236c:	3b30      	subs	r3, #48	; 0x30
 800236e:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002370:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002374:	3301      	adds	r3, #1
 8002376:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800237a:	e7de      	b.n	800233a <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		//std::sort(temp_val, temp_val + AD_DATA_SIZE);
		// sort
		for(uint8_t i = 0; i < 10; i++){
 800237c:	2300      	movs	r3, #0
 800237e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002382:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002386:	2b09      	cmp	r3, #9
 8002388:	d84d      	bhi.n	8002426 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 800238a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800238e:	3301      	adds	r3, #1
 8002390:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002394:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002398:	2b09      	cmp	r3, #9
 800239a:	d83e      	bhi.n	800241a <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 800239c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023a6:	4413      	add	r3, r2
 80023a8:	3b30      	subs	r3, #48	; 0x30
 80023aa:	ed93 7a00 	vldr	s14, [r3]
 80023ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023b8:	4413      	add	r3, r2
 80023ba:	3b30      	subs	r3, #48	; 0x30
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c8:	d521      	bpl.n	800240e <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80023ca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023d4:	4413      	add	r3, r2
 80023d6:	3b30      	subs	r3, #48	; 0x30
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80023dc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80023e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80023e4:	0092      	lsls	r2, r2, #2
 80023e6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80023ea:	440a      	add	r2, r1
 80023ec:	3a30      	subs	r2, #48	; 0x30
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80023f6:	440b      	add	r3, r1
 80023f8:	3b30      	subs	r3, #48	; 0x30
 80023fa:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80023fc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002406:	4413      	add	r3, r2
 8002408:	3b30      	subs	r3, #48	; 0x30
 800240a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800240c:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800240e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002412:	3301      	adds	r3, #1
 8002414:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002418:	e7bc      	b.n	8002394 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800241a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800241e:	3301      	adds	r3, #1
 8002420:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002424:	e7ad      	b.n	8002382 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 8002426:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	6879      	ldr	r1, [r7, #4]
 800242e:	33b0      	adds	r3, #176	; 0xb0
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002436:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800243a:	3301      	adds	r3, #1
 800243c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002440:	e773      	b.n	800232a <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 8002442:	bf00      	nop
 8002444:	3738      	adds	r7, #56	; 0x38
 8002446:	46bd      	mov	sp, r7
 8002448:	bc90      	pop	{r4, r7}
 800244a:	4770      	bx	lr

0800244c <_ZN10LineSensor13emergencyStopEv>:
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);

}

bool LineSensor::emergencyStop()
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	3338      	adds	r3, #56	; 0x38
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	429a      	cmp	r2, r3
 8002470:	d012      	beq.n	8002498 <_ZN10LineSensor13emergencyStopEv+0x4c>
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	edd3 7a00 	vldr	s15, [r3]
 800247c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80024b8 <_ZN10LineSensor13emergencyStopEv+0x6c>
 8002480:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002488:	db02      	blt.n	8002490 <_ZN10LineSensor13emergencyStopEv+0x44>
 800248a:	7ffb      	ldrb	r3, [r7, #31]
 800248c:	3301      	adds	r3, #1
 800248e:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	3304      	adds	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	e7e8      	b.n	800246a <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 8002498:	7ffb      	ldrb	r3, [r7, #31]
 800249a:	2b0d      	cmp	r3, #13
 800249c:	d902      	bls.n	80024a4 <_ZN10LineSensor13emergencyStopEv+0x58>
 800249e:	2301      	movs	r3, #1
 80024a0:	75fb      	strb	r3, [r7, #23]
 80024a2:	e001      	b.n	80024a8 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 80024a4:	2300      	movs	r3, #0
 80024a6:	75fb      	strb	r3, [r7, #23]

	return flag;
 80024a8:	7dfb      	ldrb	r3, [r7, #23]

}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3724      	adds	r7, #36	; 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	44160000 	.word	0x44160000

080024bc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_delta_theta;
float monitor_steering_angle;
float monitor_target_omega;
float monitor_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	615a      	str	r2, [r3, #20]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	619a      	str	r2, [r3, #24]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	771a      	strb	r2, [r3, #28]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	621a      	str	r2, [r3, #32]
	motor_ = motor;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	609a      	str	r2, [r3, #8]
}
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4618      	mov	r0, r3
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002528:	ee37 7a27 	vadd.f32	s14, s14, s15
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002534:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800254c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002564:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002578:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002584:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002590:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 800259c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80025a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80025b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80025b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025bc:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	ee07 3a90 	vmov	s15, r3

}
 80025c6:	eeb0 0a67 	vmov.f32	s0, s15
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	0000      	movs	r0, r0
	...

080025d8 <_ZN9LineTrace3pidEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pid()
{
 80025d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ff95 	bl	8002510 <_ZN9LineTrace9calcErrorEv>
 80025e6:	ed87 0a07 	vstr	s0, [r7, #28]
	static float pre_diff = 0;
	float p, d;
	static float i;

	p = kp_ * diff;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80025f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80025f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f8:	edc7 7a06 	vstr	s15, [r7, #24]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	ed93 7a05 	vldr	s14, [r3, #20]
 8002602:	4b41      	ldr	r3, [pc, #260]	; (8002708 <_ZN9LineTrace3pidEv+0x130>)
 8002604:	edd3 7a00 	vldr	s15, [r3]
 8002608:	edd7 6a07 	vldr	s13, [r7, #28]
 800260c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002614:	ee17 0a90 	vmov	r0, s15
 8002618:	f7fd ffae 	bl	8000578 <__aeabi_f2d>
 800261c:	a338      	add	r3, pc, #224	; (adr r3, 8002700 <_ZN9LineTrace3pidEv+0x128>)
 800261e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002622:	f7fe f92b 	bl	800087c <__aeabi_ddiv>
 8002626:	4603      	mov	r3, r0
 8002628:	460c      	mov	r4, r1
 800262a:	4618      	mov	r0, r3
 800262c:	4621      	mov	r1, r4
 800262e:	f7fe faf3 	bl	8000c18 <__aeabi_d2f>
 8002632:	4603      	mov	r3, r0
 8002634:	617b      	str	r3, [r7, #20]
	i += ki_ * diff * DELTA_T;
 8002636:	4b35      	ldr	r3, [pc, #212]	; (800270c <_ZN9LineTrace3pidEv+0x134>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7fd ff9c 	bl	8000578 <__aeabi_f2d>
 8002640:	4604      	mov	r4, r0
 8002642:	460d      	mov	r5, r1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	ed93 7a06 	vldr	s14, [r3, #24]
 800264a:	edd7 7a07 	vldr	s15, [r7, #28]
 800264e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002652:	ee17 0a90 	vmov	r0, s15
 8002656:	f7fd ff8f 	bl	8000578 <__aeabi_f2d>
 800265a:	a329      	add	r3, pc, #164	; (adr r3, 8002700 <_ZN9LineTrace3pidEv+0x128>)
 800265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002660:	f7fd ffe2 	bl	8000628 <__aeabi_dmul>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4620      	mov	r0, r4
 800266a:	4629      	mov	r1, r5
 800266c:	f7fd fe26 	bl	80002bc <__adddf3>
 8002670:	4603      	mov	r3, r0
 8002672:	460c      	mov	r4, r1
 8002674:	4618      	mov	r0, r3
 8002676:	4621      	mov	r1, r4
 8002678:	f7fe face 	bl	8000c18 <__aeabi_d2f>
 800267c:	4602      	mov	r2, r0
 800267e:	4b23      	ldr	r3, [pc, #140]	; (800270c <_ZN9LineTrace3pidEv+0x134>)
 8002680:	601a      	str	r2, [r3, #0]

	float left_ratio = normal_ratio_ + (p + d + i);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	ed93 7a08 	vldr	s14, [r3, #32]
 8002688:	edd7 6a06 	vldr	s13, [r7, #24]
 800268c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002690:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <_ZN9LineTrace3pidEv+0x134>)
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800269e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026a2:	edc7 7a04 	vstr	s15, [r7, #16]
	float right_ratio = normal_ratio_ - (p + d + i);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80026ac:	edd7 6a06 	vldr	s13, [r7, #24]
 80026b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80026b4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <_ZN9LineTrace3pidEv+0x134>)
 80026ba:	edd3 7a00 	vldr	s15, [r3]
 80026be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026c6:	edc7 7a03 	vstr	s15, [r7, #12]

	motor_->setRatio(left_ratio, right_ratio);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681c      	ldr	r4, [r3, #0]
 80026ce:	6938      	ldr	r0, [r7, #16]
 80026d0:	f7fd ff52 	bl	8000578 <__aeabi_f2d>
 80026d4:	4605      	mov	r5, r0
 80026d6:	460e      	mov	r6, r1
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7fd ff4d 	bl	8000578 <__aeabi_f2d>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	ec43 2b11 	vmov	d1, r2, r3
 80026e6:	ec46 5b10 	vmov	d0, r5, r6
 80026ea:	4620      	mov	r0, r4
 80026ec:	f000 fa10 	bl	8002b10 <_ZN5Motor8setRatioEdd>

	pre_diff = diff;
 80026f0:	4a05      	ldr	r2, [pc, #20]	; (8002708 <_ZN9LineTrace3pidEv+0x130>)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	6013      	str	r3, [r2, #0]

}
 80026f6:	bf00      	nop
 80026f8:	3724      	adds	r7, #36	; 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026fe:	bf00      	nop
 8002700:	d2f1a9fc 	.word	0xd2f1a9fc
 8002704:	3f50624d 	.word	0x3f50624d
 8002708:	20000204 	.word	0x20000204
 800270c:	20000208 	.word	0x20000208

08002710 <_ZN9LineTrace7setGainEfff>:
{

}

void LineTrace::setGain(float kp, float kd, float ki)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	ed87 0a02 	vstr	s0, [r7, #8]
 800271c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002720:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	611a      	str	r2, [r3, #16]
	kd_ = kd;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	615a      	str	r2, [r3, #20]
	ki_ = ki;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	619a      	str	r2, [r3, #24]
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	621a      	str	r2, [r3, #32]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

	if(excution_flag_ == true){
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	7f1b      	ldrb	r3, [r3, #28]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d002      	beq.n	8002796 <_ZN9LineTrace4flipEv+0x16>
		pid();
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7ff ff21 	bl	80025d8 <_ZN9LineTrace3pidEv>
		//steeringAngleTrace();
	}
	if(line_sensor_->emergencyStop() == true){
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff fe56 	bl	800244c <_ZN10LineSensor13emergencyStopEv>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d011      	beq.n	80027ca <_ZN9LineTrace4flipEv+0x4a>
		motor_->setRatio(0, 0);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80027e8 <_ZN9LineTrace4flipEv+0x68>
 80027ae:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80027e8 <_ZN9LineTrace4flipEv+0x68>
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f9ac 	bl	8002b10 <_ZN5Motor8setRatioEdd>
		led_.LR(1, -1);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	330c      	adds	r3, #12
 80027bc:	f04f 32ff 	mov.w	r2, #4294967295
 80027c0:	2101      	movs	r1, #1
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fcac 	bl	8002120 <_ZN3LED2LREaa>
	else{
		led_.LR(0, -1);

	}

}
 80027c8:	e007      	b.n	80027da <_ZN9LineTrace4flipEv+0x5a>
		led_.LR(0, -1);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	330c      	adds	r3, #12
 80027ce:	f04f 32ff 	mov.w	r2, #4294967295
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fca3 	bl	8002120 <_ZN3LED2LREaa>
}
 80027da:	bf00      	nop
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	f3af 8000 	nop.w
	...

080027f0 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	771a      	strb	r2, [r3, #28]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	0000      	movs	r0, r0
 800280c:	0000      	movs	r0, r0
	...

08002810 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	771a      	strb	r2, [r3, #28]
	motor_->setRatio(0, 0);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8002838 <_ZN9LineTrace4stopEv+0x28>
 8002826:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8002838 <_ZN9LineTrace4stopEv+0x28>
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f970 	bl	8002b10 <_ZN5Motor8setRatioEdd>
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
	...

08002840 <_ZN6LoggerC1Ev>:
#include "Logger.hpp"
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_dis_(0){}
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800284e:	3330      	adds	r3, #48	; 0x30
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800285a:	3332      	adds	r3, #50	; 0x32
 800285c:	2200      	movs	r2, #0
 800285e:	801a      	strh	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002866:	3334      	adds	r3, #52	; 0x34
 8002868:	2200      	movs	r2, #0
 800286a:	801a      	strh	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b088      	sub	sp, #32
 8002880:	af02      	add	r7, sp, #8
 8002882:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002884:	2300      	movs	r3, #0
 8002886:	75fb      	strb	r3, [r7, #23]

	if(sd_mount() == 1){
 8002888:	f7ff f804 	bl	8001894 <sd_mount>
 800288c:	4603      	mov	r3, r0
 800288e:	2b01      	cmp	r3, #1
 8002890:	bf0c      	ite	eq
 8002892:	2301      	moveq	r3, #1
 8002894:	2300      	movne	r3, #0
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <_ZN6Logger10sdCardInitEv+0x2c>
	  printf("mount success\r\n");
 800289c:	4816      	ldr	r0, [pc, #88]	; (80028f8 <_ZN6Logger10sdCardInitEv+0x7c>)
 800289e:	f011 f945 	bl	8013b2c <puts>
	  ret = true;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
 80028a6:	e004      	b.n	80028b2 <_ZN6Logger10sdCardInitEv+0x36>
	}
	else{
	  printf("mount error\r\n");
 80028a8:	4814      	ldr	r0, [pc, #80]	; (80028fc <_ZN6Logger10sdCardInitEv+0x80>)
 80028aa:	f011 f93f 	bl	8013b2c <puts>
	  ret = false;
 80028ae:	2300      	movs	r3, #0
 80028b0:	75fb      	strb	r3, [r7, #23]
	}

	int	data[1];
	int temp[1];

	data[0] = 100;
 80028b2:	2364      	movs	r3, #100	; 0x64
 80028b4:	613b      	str	r3, [r7, #16]
	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 80028b6:	f107 0210 	add.w	r2, r7, #16
 80028ba:	2301      	movs	r3, #1
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	4613      	mov	r3, r2
 80028c0:	2201      	movs	r2, #1
 80028c2:	490f      	ldr	r1, [pc, #60]	; (8002900 <_ZN6Logger10sdCardInitEv+0x84>)
 80028c4:	480f      	ldr	r0, [pc, #60]	; (8002904 <_ZN6Logger10sdCardInitEv+0x88>)
 80028c6:	f7fe ff41 	bl	800174c <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 80028ca:	f107 030c 	add.w	r3, r7, #12
 80028ce:	2201      	movs	r2, #1
 80028d0:	490b      	ldr	r1, [pc, #44]	; (8002900 <_ZN6Logger10sdCardInitEv+0x84>)
 80028d2:	480c      	ldr	r0, [pc, #48]	; (8002904 <_ZN6Logger10sdCardInitEv+0x88>)
 80028d4:	f7fe ff98 	bl	8001808 <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 80028d8:	f107 020c 	add.w	r2, r7, #12
 80028dc:	2301      	movs	r3, #1
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	2201      	movs	r2, #1
 80028e4:	4908      	ldr	r1, [pc, #32]	; (8002908 <_ZN6Logger10sdCardInitEv+0x8c>)
 80028e6:	4807      	ldr	r0, [pc, #28]	; (8002904 <_ZN6Logger10sdCardInitEv+0x88>)
 80028e8:	f7fe ff30 	bl	800174c <sd_write_array_int>

	return ret;
 80028ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	08017bb8 	.word	0x08017bb8
 80028fc:	08017bc8 	.word	0x08017bc8
 8002900:	08017bd8 	.word	0x08017bd8
 8002904:	08017be4 	.word	0x08017be4
 8002908:	08017bec 	.word	0x08017bec

0800290c <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800291e:	3330      	adds	r3, #48	; 0x30
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d024      	beq.n	8002970 <_ZN6Logger8storeLogEf+0x64>
		store_data_float_[log_index_tim_] = data;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800292c:	3332      	adds	r3, #50	; 0x32
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002940:	3332      	adds	r3, #50	; 0x32
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	3301      	adds	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800294e:	3332      	adds	r3, #50	; 0x32
 8002950:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002958:	3332      	adds	r3, #50	; 0x32
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002960:	4293      	cmp	r3, r2
 8002962:	d905      	bls.n	8002970 <_ZN6Logger8storeLogEf+0x64>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800296a:	3332      	adds	r3, #50	; 0x32
 800296c:	2200      	movs	r2, #0
 800296e:	801a      	strh	r2, [r3, #0]
	}
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <_ZN6Logger8saveLogsEPKcS1_>:
		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	}
}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	2300      	movs	r3, #0
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	4613      	mov	r3, r2
 8002990:	f241 3288 	movw	r2, #5000	; 0x1388
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	68b8      	ldr	r0, [r7, #8]
 8002998:	f7fe fdca 	bl	8001530 <sd_write_array_float>
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
 80029b0:	603b      	str	r3, [r7, #0]
	sd_write_array_double(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80029b8:	3330      	adds	r3, #48	; 0x30
 80029ba:	2200      	movs	r2, #0
 80029bc:	9200      	str	r2, [sp, #0]
 80029be:	f241 7270 	movw	r2, #6000	; 0x1770
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	68b8      	ldr	r0, [r7, #8]
 80029c6:	f7fe fe19 	bl	80015fc <sd_write_array_double>
	sd_write_array_double(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 80029d0:	33b0      	adds	r3, #176	; 0xb0
 80029d2:	2200      	movs	r2, #0
 80029d4:	9200      	str	r2, [sp, #0]
 80029d6:	f241 7270 	movw	r2, #6000	; 0x1770
 80029da:	6839      	ldr	r1, [r7, #0]
 80029dc:	68b8      	ldr	r0, [r7, #8]
 80029de:	f7fe fe0d 	bl	80015fc <sd_write_array_double>
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80029f8:	3330      	adds	r3, #48	; 0x30
 80029fa:	2201      	movs	r2, #1
 80029fc:	701a      	strb	r2, [r3, #0]
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002a18:	3330      	adds	r3, #48	; 0x30
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	701a      	strb	r2, [r3, #0]
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	801a      	strh	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	805a      	strh	r2, [r3, #2]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4618      	mov	r0, r3
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_ZN5Motor4initEv>:

void Motor::init()
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002a54:	2108      	movs	r1, #8
 8002a56:	4805      	ldr	r0, [pc, #20]	; (8002a6c <_ZN5Motor4initEv+0x20>)
 8002a58:	f008 ff4a 	bl	800b8f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002a5c:	210c      	movs	r1, #12
 8002a5e:	4803      	ldr	r0, [pc, #12]	; (8002a6c <_ZN5Motor4initEv+0x20>)
 8002a60:	f008 ff46 	bl	800b8f0 <HAL_TIM_PWM_Start>

}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20039090 	.word	0x20039090

08002a70 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	da0d      	bge.n	8002a9e <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8002a82:	2200      	movs	r2, #0
 8002a84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a88:	481f      	ldr	r0, [pc, #124]	; (8002b08 <_ZN5Motor9motorCtrlEv+0x98>)
 8002a8a:	f004 ffff 	bl	8007a8c <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	425b      	negs	r3, r3
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	81fb      	strh	r3, [r7, #14]
 8002a9c:	e00a      	b.n	8002ab4 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002aa4:	4818      	ldr	r0, [pc, #96]	; (8002b08 <_ZN5Motor9motorCtrlEv+0x98>)
 8002aa6:	f004 fff1 	bl	8007a8c <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	da0d      	bge.n	8002ada <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ac4:	4810      	ldr	r0, [pc, #64]	; (8002b08 <_ZN5Motor9motorCtrlEv+0x98>)
 8002ac6:	f004 ffe1 	bl	8007a8c <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	425b      	negs	r3, r3
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	81bb      	strh	r3, [r7, #12]
 8002ad8:	e00a      	b.n	8002af0 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002ada:	2200      	movs	r2, #0
 8002adc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ae0:	4809      	ldr	r0, [pc, #36]	; (8002b08 <_ZN5Motor9motorCtrlEv+0x98>)
 8002ae2:	f004 ffd3 	bl	8007a8c <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002af0:	89fa      	ldrh	r2, [r7, #14]
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <_ZN5Motor9motorCtrlEv+0x9c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002af8:	89ba      	ldrh	r2, [r7, #12]
 8002afa:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <_ZN5Motor9motorCtrlEv+0x9c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40020c00 	.word	0x40020c00
 8002b0c:	20039090 	.word	0x20039090

08002b10 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002b10:	b590      	push	{r4, r7, lr}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6178      	str	r0, [r7, #20]
 8002b18:	ed87 0b02 	vstr	d0, [r7, #8]
 8002b1c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	4b30      	ldr	r3, [pc, #192]	; (8002be8 <_ZN5Motor8setRatioEdd+0xd8>)
 8002b26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b2a:	f7fe f80d 	bl	8000b48 <__aeabi_dcmpgt>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <_ZN5Motor8setRatioEdd+0x30>
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	4c2b      	ldr	r4, [pc, #172]	; (8002be8 <_ZN5Motor8setRatioEdd+0xd8>)
 8002b3a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002b3e:	e00e      	b.n	8002b5e <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	4b29      	ldr	r3, [pc, #164]	; (8002bec <_ZN5Motor8setRatioEdd+0xdc>)
 8002b46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b4a:	f7fd ffdf 	bl	8000b0c <__aeabi_dcmplt>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d004      	beq.n	8002b5e <_ZN5Motor8setRatioEdd+0x4e>
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	4c24      	ldr	r4, [pc, #144]	; (8002bec <_ZN5Motor8setRatioEdd+0xdc>)
 8002b5a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <_ZN5Motor8setRatioEdd+0xd8>)
 8002b64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b68:	f7fd ffee 	bl	8000b48 <__aeabi_dcmpgt>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d005      	beq.n	8002b7e <_ZN5Motor8setRatioEdd+0x6e>
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	4c1c      	ldr	r4, [pc, #112]	; (8002be8 <_ZN5Motor8setRatioEdd+0xd8>)
 8002b78:	e9c7 3400 	strd	r3, r4, [r7]
 8002b7c:	e00e      	b.n	8002b9c <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <_ZN5Motor8setRatioEdd+0xdc>)
 8002b84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b88:	f7fd ffc0 	bl	8000b0c <__aeabi_dcmplt>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d004      	beq.n	8002b9c <_ZN5Motor8setRatioEdd+0x8c>
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	4c15      	ldr	r4, [pc, #84]	; (8002bec <_ZN5Motor8setRatioEdd+0xdc>)
 8002b98:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <_ZN5Motor8setRatioEdd+0xe0>)
 8002ba2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ba6:	f7fd fd3f 	bl	8000628 <__aeabi_dmul>
 8002baa:	4603      	mov	r3, r0
 8002bac:	460c      	mov	r4, r1
 8002bae:	4618      	mov	r0, r3
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	f7fd ffe9 	bl	8000b88 <__aeabi_d2iz>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	b21a      	sxth	r2, r3
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <_ZN5Motor8setRatioEdd+0xe0>)
 8002bc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bc8:	f7fd fd2e 	bl	8000628 <__aeabi_dmul>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	460c      	mov	r4, r1
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	f7fd ffd8 	bl	8000b88 <__aeabi_d2iz>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	b21a      	sxth	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	805a      	strh	r2, [r3, #2]

}
 8002be0:	bf00      	nop
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd90      	pop	{r4, r7, pc}
 8002be8:	3ff00000 	.word	0x3ff00000
 8002bec:	bff00000 	.word	0xbff00000
 8002bf0:	409c2000 	.word	0x409c2000

08002bf4 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8002bf4:	b490      	push	{r4, r7}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	f04f 0400 	mov.w	r4, #0
 8002c0c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	f04f 0400 	mov.w	r4, #0
 8002c1a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	f04f 0400 	mov.w	r4, #0
 8002c28:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	609a      	str	r2, [r3, #8]
}
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bc90      	pop	{r4, r7}
 8002c48:	4770      	bx	lr
 8002c4a:	0000      	movs	r0, r0
 8002c4c:	0000      	movs	r0, r0
	...

08002c50 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8002c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7fe ffe6 	bl	8001c30 <_ZN3IMU8getOmegaEv>
 8002c64:	ed87 0b04 	vstr	d0, [r7, #16]
	float distance = encoder_->getDistance();
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe fb82 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 8002c72:	ec54 3b10 	vmov	r3, r4, d0
 8002c76:	4618      	mov	r0, r3
 8002c78:	4621      	mov	r1, r4
 8002c7a:	f7fd ffcd 	bl	8000c18 <__aeabi_d2f>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	60fb      	str	r3, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8002c82:	a358      	add	r3, pc, #352	; (adr r3, 8002de4 <_ZN8Odometry12calcPotitionEv+0x194>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c8c:	f7fd fccc 	bl	8000628 <__aeabi_dmul>
 8002c90:	4603      	mov	r3, r0
 8002c92:	460c      	mov	r4, r1
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f7fd fc69 	bl	8000578 <__aeabi_f2d>
 8002ca6:	4682      	mov	sl, r0
 8002ca8:	468b      	mov	fp, r1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cbe:	f7fd fddd 	bl	800087c <__aeabi_ddiv>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4640      	mov	r0, r8
 8002cc8:	4649      	mov	r1, r9
 8002cca:	f7fd faf7 	bl	80002bc <__adddf3>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	ec43 2b17 	vmov	d7, r2, r3
 8002cd6:	eeb0 0a47 	vmov.f32	s0, s14
 8002cda:	eef0 0a67 	vmov.f32	s1, s15
 8002cde:	f00e fedb 	bl	8011a98 <cos>
 8002ce2:	ec53 2b10 	vmov	r2, r3, d0
 8002ce6:	4650      	mov	r0, sl
 8002ce8:	4659      	mov	r1, fp
 8002cea:	f7fd fc9d 	bl	8000628 <__aeabi_dmul>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	f7fd fae1 	bl	80002bc <__adddf3>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	460c      	mov	r4, r1
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f7fd fc34 	bl	8000578 <__aeabi_f2d>
 8002d10:	4682      	mov	sl, r0
 8002d12:	468b      	mov	fp, r1
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d28:	f7fd fda8 	bl	800087c <__aeabi_ddiv>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4640      	mov	r0, r8
 8002d32:	4649      	mov	r1, r9
 8002d34:	f7fd fac2 	bl	80002bc <__adddf3>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	ec43 2b17 	vmov	d7, r2, r3
 8002d40:	eeb0 0a47 	vmov.f32	s0, s14
 8002d44:	eef0 0a67 	vmov.f32	s1, s15
 8002d48:	f00e feea 	bl	8011b20 <sin>
 8002d4c:	ec53 2b10 	vmov	r2, r3, d0
 8002d50:	4650      	mov	r0, sl
 8002d52:	4659      	mov	r1, fp
 8002d54:	f7fd fc68 	bl	8000628 <__aeabi_dmul>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4620      	mov	r0, r4
 8002d5e:	4629      	mov	r1, r5
 8002d60:	f7fd faac 	bl	80002bc <__adddf3>
 8002d64:	4603      	mov	r3, r0
 8002d66:	460c      	mov	r4, r1
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4623      	mov	r3, r4
 8002d7e:	f7fd fa9d 	bl	80002bc <__adddf3>
 8002d82:	4603      	mov	r3, r0
 8002d84:	460c      	mov	r4, r1
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	e9c2 3408 	strd	r3, r4, [r2, #32]


	monitor_x = x_;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002d92:	4618      	mov	r0, r3
 8002d94:	4621      	mov	r1, r4
 8002d96:	f7fd ff3f 	bl	8000c18 <__aeabi_d2f>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	; (8002dd8 <_ZN8Odometry12calcPotitionEv+0x188>)
 8002d9e:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002da6:	4618      	mov	r0, r3
 8002da8:	4621      	mov	r1, r4
 8002daa:	f7fd ff35 	bl	8000c18 <__aeabi_d2f>
 8002dae:	4602      	mov	r2, r0
 8002db0:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <_ZN8Odometry12calcPotitionEv+0x18c>)
 8002db2:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	f7fd ff2b 	bl	8000c18 <__aeabi_d2f>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <_ZN8Odometry12calcPotitionEv+0x190>)
 8002dc6:	601a      	str	r2, [r3, #0]


}
 8002dc8:	bf00      	nop
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dd2:	bf00      	nop
 8002dd4:	f3af 8000 	nop.w
 8002dd8:	2000020c 	.word	0x2000020c
 8002ddc:	20000210 	.word	0x20000210
 8002de0:	20000214 	.word	0x20000214
 8002de4:	d2f1a9fc 	.word	0xd2f1a9fc
 8002de8:	3f50624d 	.word	0x3f50624d

08002dec <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
	calcPotition();
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ff2b 	bl	8002c50 <_ZN8Odometry12calcPotitionEv>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <_ZN8Odometry4getXEv>:

double Odometry::getX()
{
 8002e02:	b490      	push	{r4, r7}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
	return x_;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002e10:	ec44 3b17 	vmov	d7, r3, r4
}
 8002e14:	eeb0 0a47 	vmov.f32	s0, s14
 8002e18:	eef0 0a67 	vmov.f32	s1, s15
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bc90      	pop	{r4, r7}
 8002e22:	4770      	bx	lr

08002e24 <_ZN8Odometry4getYEv>:

double Odometry::getY()
{
 8002e24:	b490      	push	{r4, r7}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	return y_;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002e32:	ec44 3b17 	vmov	d7, r3, r4
}
 8002e36:	eeb0 0a47 	vmov.f32	s0, s14
 8002e3a:	eef0 0a67 	vmov.f32	s1, s15
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc90      	pop	{r4, r7}
 8002e44:	4770      	bx	lr

08002e46 <_ZN8Odometry8getThetaEv>:

double Odometry::getTheta()
{
 8002e46:	b490      	push	{r4, r7}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
	return theta_;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002e54:	ec44 3b17 	vmov	d7, r3, r4
}
 8002e58:	eeb0 0a47 	vmov.f32	s0, s14
 8002e5c:	eef0 0a67 	vmov.f32	s1, s15
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc90      	pop	{r4, r7}
 8002e66:	4770      	bx	lr

08002e68 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8002e68:	b490      	push	{r4, r7}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	x_ = 0;
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	f04f 0400 	mov.w	r4, #0
 8002e7a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	f04f 0400 	mov.w	r4, #0
 8002e88:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	f04f 0400 	mov.w	r4, #0
 8002e96:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc90      	pop	{r4, r7}
 8002ea2:	4770      	bx	lr

08002ea4 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8002ea4:	b490      	push	{r4, r7}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	f04f 0400 	mov.w	r4, #0
 8002ebc:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	f04f 0400 	mov.w	r4, #0
 8002eca:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	f04f 0400 	mov.w	r4, #0
 8002ed8:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8002ee2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8002eea:	4a29      	ldr	r2, [pc, #164]	; (8002f90 <_ZN13PathFollowingC1Ev+0xec>)
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	f04f 0400 	mov.w	r4, #0
 8002ef4:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8002ef8:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <_ZN13PathFollowingC1Ev+0xec>)
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	f04f 0400 	mov.w	r4, #0
 8002f02:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8002f06:	4a22      	ldr	r2, [pc, #136]	; (8002f90 <_ZN13PathFollowingC1Ev+0xec>)
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	f04f 0400 	mov.w	r4, #0
 8002f10:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8002f14:	4a1f      	ldr	r2, [pc, #124]	; (8002f94 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	f04f 0400 	mov.w	r4, #0
 8002f1e:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8002f22:	4a1c      	ldr	r2, [pc, #112]	; (8002f94 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	f04f 0400 	mov.w	r4, #0
 8002f2c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8002f30:	4a18      	ldr	r2, [pc, #96]	; (8002f94 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	f04f 0400 	mov.w	r4, #0
 8002f3a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8002f3e:	4a15      	ldr	r2, [pc, #84]	; (8002f94 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	f04f 0400 	mov.w	r4, #0
 8002f48:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8002f4c:	4a11      	ldr	r2, [pc, #68]	; (8002f94 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	f04f 0400 	mov.w	r4, #0
 8002f56:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8002f5a:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <_ZN13PathFollowingC1Ev+0xf0>)
 8002f5c:	f04f 0300 	mov.w	r3, #0
 8002f60:	f04f 0400 	mov.w	r4, #0
 8002f64:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8002f68:	4a0b      	ldr	r2, [pc, #44]	; (8002f98 <_ZN13PathFollowingC1Ev+0xf4>)
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	f04f 0400 	mov.w	r4, #0
 8002f72:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8002f76:	4a08      	ldr	r2, [pc, #32]	; (8002f98 <_ZN13PathFollowingC1Ev+0xf4>)
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	f04f 0400 	mov.w	r4, #0
 8002f80:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc90      	pop	{r4, r7}
 8002f8e:	4770      	bx	lr
 8002f90:	20039590 	.word	0x20039590
 8002f94:	20039520 	.word	0x20039520
 8002f98:	20039580 	.word	0x20039580

08002f9c <_ZN13PathFollowing6isNearEddd>:
	y = y + distance * sin(theta);

}

bool PathFollowing::isNear(const double src_data, const double target_data, const double margin)
{
 8002f9c:	b590      	push	{r4, r7, lr}
 8002f9e:	b089      	sub	sp, #36	; 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	61f8      	str	r0, [r7, #28]
 8002fa4:	ed87 0b04 	vstr	d0, [r7, #16]
 8002fa8:	ed87 1b02 	vstr	d1, [r7, #8]
 8002fac:	ed87 2b00 	vstr	d2, [r7]

	if(target_data - margin < src_data && src_data < target_data + margin){
 8002fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fb8:	f7fd f97e 	bl	80002b8 <__aeabi_dsub>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	460c      	mov	r4, r1
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4623      	mov	r3, r4
 8002fc4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fc8:	f7fd fdbe 	bl	8000b48 <__aeabi_dcmpgt>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d012      	beq.n	8002ff8 <_ZN13PathFollowing6isNearEddd+0x5c>
 8002fd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fda:	f7fd f96f 	bl	80002bc <__adddf3>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	460c      	mov	r4, r1
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4623      	mov	r3, r4
 8002fe6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fea:	f7fd fd8f 	bl	8000b0c <__aeabi_dcmplt>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <_ZN13PathFollowing6isNearEddd+0x5c>
		return true;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <_ZN13PathFollowing6isNearEddd+0x5e>
	}
	else{
		return false;
 8002ff8:	2300      	movs	r3, #0
	}

}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3724      	adds	r7, #36	; 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd90      	pop	{r4, r7, pc}

08003002 <_ZN13PathFollowing4initEv>:

void PathFollowing::init()
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 800300a:	f001 feb3 	bl	8004d74 <path_following_initialize>
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8003018:	b490      	push	{r4, r7}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	61f8      	str	r0, [r7, #28]
 8003020:	ed87 0b04 	vstr	d0, [r7, #16]
 8003024:	ed87 1b02 	vstr	d1, [r7, #8]
 8003028:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 800302c:	4a09      	ldr	r2, [pc, #36]	; (8003054 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800302e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003032:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8003036:	4a07      	ldr	r2, [pc, #28]	; (8003054 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003038:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800303c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003042:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003046:	e9c2 3404 	strd	r3, r4, [r2, #16]

}
 800304a:	bf00      	nop
 800304c:	3720      	adds	r7, #32
 800304e:	46bd      	mov	sp, r7
 8003050:	bc90      	pop	{r4, r7}
 8003052:	4770      	bx	lr
 8003054:	20039590 	.word	0x20039590

08003058 <_ZN13PathFollowing18setTargetPathMultiEv>:
	rtU.target_y = y;
	rtU.th = th;
}

void PathFollowing::setTargetPathMulti()
{
 8003058:	b590      	push	{r4, r7, lr}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
	sd_read_array_double("Position", "2021-08-24delta_theta.txt", LOG_DATA_SIZE_DIS, log_delta_thetas_);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8003066:	33a0      	adds	r3, #160	; 0xa0
 8003068:	f241 7270 	movw	r2, #6000	; 0x1770
 800306c:	490f      	ldr	r1, [pc, #60]	; (80030ac <_ZN13PathFollowing18setTargetPathMultiEv+0x54>)
 800306e:	4810      	ldr	r0, [pc, #64]	; (80030b0 <_ZN13PathFollowing18setTargetPathMultiEv+0x58>)
 8003070:	f7fe fb26 	bl	80016c0 <sd_read_array_double>
	sd_read_array_double("Position", "2021-08-24delta_distance.txt", LOG_DATA_SIZE_DIS, log_distances_);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3320      	adds	r3, #32
 8003078:	f241 7270 	movw	r2, #6000	; 0x1770
 800307c:	490d      	ldr	r1, [pc, #52]	; (80030b4 <_ZN13PathFollowing18setTargetPathMultiEv+0x5c>)
 800307e:	480c      	ldr	r0, [pc, #48]	; (80030b0 <_ZN13PathFollowing18setTargetPathMultiEv+0x58>)
 8003080:	f7fe fb1e 	bl	80016c0 <sd_read_array_double>

	mon_log_dis = log_distances_[1];
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800308a:	4a0b      	ldr	r2, [pc, #44]	; (80030b8 <_ZN13PathFollowing18setTargetPathMultiEv+0x60>)
 800308c:	e9c2 3400 	strd	r3, r4, [r2]
	mon_log_th = log_delta_thetas_[1];
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8003096:	33a8      	adds	r3, #168	; 0xa8
 8003098:	e9d3 3400 	ldrd	r3, r4, [r3]
 800309c:	4a07      	ldr	r2, [pc, #28]	; (80030bc <_ZN13PathFollowing18setTargetPathMultiEv+0x64>)
 800309e:	e9c2 3400 	strd	r3, r4, [r2]
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd90      	pop	{r4, r7, pc}
 80030aa:	bf00      	nop
 80030ac:	08017bf8 	.word	0x08017bf8
 80030b0:	08017c14 	.word	0x08017c14
 80030b4:	08017c20 	.word	0x08017c20
 80030b8:	20000238 	.word	0x20000238
 80030bc:	20000240 	.word	0x20000240

080030c0 <_ZN13PathFollowing12targetUpdateEv>:

void PathFollowing::targetUpdate()
{
 80030c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030c4:	b082      	sub	sp, #8
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
	if(execute_flag_ == true){
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 80df 	beq.w	8003292 <_ZN13PathFollowing12targetUpdateEv+0x1d2>
		//if(isNear(rtU.x, x_tar_, 10) == true && isNear(rtU.y, y_tar_, 30) == true && isNear(rtU.th_cur, th_tar_, 1.100) == true){
		if(isNear(rtU.x, x_tar_, 10) == true){
 80030d4:	4b80      	ldr	r3, [pc, #512]	; (80032d8 <_ZN13PathFollowing12targetUpdateEv+0x218>)
 80030d6:	ed93 7b06 	vldr	d7, [r3, #24]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	ed93 6b02 	vldr	d6, [r3, #8]
 80030e0:	ed9f 2b7b 	vldr	d2, [pc, #492]	; 80032d0 <_ZN13PathFollowing12targetUpdateEv+0x210>
 80030e4:	eeb0 1a46 	vmov.f32	s2, s12
 80030e8:	eef0 1a66 	vmov.f32	s3, s13
 80030ec:	eeb0 0a47 	vmov.f32	s0, s14
 80030f0:	eef0 0a67 	vmov.f32	s1, s15
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7ff ff51 	bl	8002f9c <_ZN13PathFollowing6isNearEddd>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80b6 	beq.w	800326e <_ZN13PathFollowing12targetUpdateEv+0x1ae>
			ref_num++;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003108:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	3301      	adds	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003118:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800311c:	801a      	strh	r2, [r3, #0]
			x_tar_ = x_tar_ + log_distances_[ref_num] * cos(th_tar_ + log_delta_thetas_[ref_num] / 2);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800312a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	3304      	adds	r3, #4
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4413      	add	r3, r2
 8003138:	e9d3 8900 	ldrd	r8, r9, [r3]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003148:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003154:	3314      	adds	r3, #20
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	4413      	add	r3, r2
 800315a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003166:	f7fd fb89 	bl	800087c <__aeabi_ddiv>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4650      	mov	r0, sl
 8003170:	4659      	mov	r1, fp
 8003172:	f7fd f8a3 	bl	80002bc <__adddf3>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	ec43 2b17 	vmov	d7, r2, r3
 800317e:	eeb0 0a47 	vmov.f32	s0, s14
 8003182:	eef0 0a67 	vmov.f32	s1, s15
 8003186:	f00e fc87 	bl	8011a98 <cos>
 800318a:	ec53 2b10 	vmov	r2, r3, d0
 800318e:	4640      	mov	r0, r8
 8003190:	4649      	mov	r1, r9
 8003192:	f7fd fa49 	bl	8000628 <__aeabi_dmul>
 8003196:	4602      	mov	r2, r0
 8003198:	460b      	mov	r3, r1
 800319a:	4620      	mov	r0, r4
 800319c:	4629      	mov	r1, r5
 800319e:	f7fd f88d 	bl	80002bc <__adddf3>
 80031a2:	4603      	mov	r3, r0
 80031a4:	460c      	mov	r4, r1
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	e9c2 3402 	strd	r3, r4, [r2, #8]
			y_tar_ = y_tar_ + log_distances_[ref_num] * sin(th_tar_ + log_delta_thetas_[ref_num] / 2);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80031b8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	3304      	adds	r3, #4
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	4413      	add	r3, r2
 80031c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80031d6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80031e2:	3314      	adds	r3, #20
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031f4:	f7fd fb42 	bl	800087c <__aeabi_ddiv>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4650      	mov	r0, sl
 80031fe:	4659      	mov	r1, fp
 8003200:	f7fd f85c 	bl	80002bc <__adddf3>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	ec43 2b17 	vmov	d7, r2, r3
 800320c:	eeb0 0a47 	vmov.f32	s0, s14
 8003210:	eef0 0a67 	vmov.f32	s1, s15
 8003214:	f00e fc84 	bl	8011b20 <sin>
 8003218:	ec53 2b10 	vmov	r2, r3, d0
 800321c:	4640      	mov	r0, r8
 800321e:	4649      	mov	r1, r9
 8003220:	f7fd fa02 	bl	8000628 <__aeabi_dmul>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4620      	mov	r0, r4
 800322a:	4629      	mov	r1, r5
 800322c:	f7fd f846 	bl	80002bc <__adddf3>
 8003230:	4603      	mov	r3, r0
 8003232:	460c      	mov	r4, r1
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	e9c2 3404 	strd	r3, r4, [r2, #16]
			th_tar_ = th_tar_ + log_delta_thetas_[ref_num];
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003246:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003252:	3314      	adds	r3, #20
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4413      	add	r3, r2
 8003258:	e9d3 3400 	ldrd	r3, r4, [r3]
 800325c:	461a      	mov	r2, r3
 800325e:	4623      	mov	r3, r4
 8003260:	f7fd f82c 	bl	80002bc <__adddf3>
 8003264:	4603      	mov	r3, r0
 8003266:	460c      	mov	r4, r1
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	e9c2 3406 	strd	r3, r4, [r2, #24]
		}
		if(ref_num >= LOG_DATA_SIZE_DIS) ref_num = LOG_DATA_SIZE_DIS;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003274:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	f241 726f 	movw	r2, #5999	; 0x176f
 800327e:	4293      	cmp	r3, r2
 8003280:	d907      	bls.n	8003292 <_ZN13PathFollowing12targetUpdateEv+0x1d2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003288:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800328c:	f241 7270 	movw	r2, #6000	; 0x1770
 8003290:	801a      	strh	r2, [r3, #0]

	}

	mon_ref_num = ref_num;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003298:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800329c:	881a      	ldrh	r2, [r3, #0]
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <_ZN13PathFollowing12targetUpdateEv+0x21c>)
 80032a0:	801a      	strh	r2, [r3, #0]
	mon_x = x_tar_;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80032a8:	4a0d      	ldr	r2, [pc, #52]	; (80032e0 <_ZN13PathFollowing12targetUpdateEv+0x220>)
 80032aa:	e9c2 3400 	strd	r3, r4, [r2]
	mon_y = y_tar_;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80032b4:	4a0b      	ldr	r2, [pc, #44]	; (80032e4 <_ZN13PathFollowing12targetUpdateEv+0x224>)
 80032b6:	e9c2 3400 	strd	r3, r4, [r2]
	mon_th = th_tar_;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80032c0:	4a09      	ldr	r2, [pc, #36]	; (80032e8 <_ZN13PathFollowing12targetUpdateEv+0x228>)
 80032c2:	e9c2 3400 	strd	r3, r4, [r2]

}
 80032c6:	bf00      	nop
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032d0:	00000000 	.word	0x00000000
 80032d4:	40240000 	.word	0x40240000
 80032d8:	20039520 	.word	0x20039520
 80032dc:	20000218 	.word	0x20000218
 80032e0:	20000220 	.word	0x20000220
 80032e4:	20000228 	.word	0x20000228
 80032e8:	20000230 	.word	0x20000230

080032ec <_ZN13PathFollowing14setCurrentPathEddd>:


void PathFollowing::setCurrentPath(double x, double y, double th)
{
 80032ec:	b490      	push	{r4, r7}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	61f8      	str	r0, [r7, #28]
 80032f4:	ed87 0b04 	vstr	d0, [r7, #16]
 80032f8:	ed87 1b02 	vstr	d1, [r7, #8]
 80032fc:	ed87 2b00 	vstr	d2, [r7]
	rtU.x= x;
 8003300:	4a09      	ldr	r2, [pc, #36]	; (8003328 <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 8003302:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003306:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = y;
 800330a:	4a07      	ldr	r2, [pc, #28]	; (8003328 <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 800330c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003310:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = th;
 8003314:	4a04      	ldr	r2, [pc, #16]	; (8003328 <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 8003316:	e9d7 3400 	ldrd	r3, r4, [r7]
 800331a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 800331e:	bf00      	nop
 8003320:	3720      	adds	r7, #32
 8003322:	46bd      	mov	sp, r7
 8003324:	bc90      	pop	{r4, r7}
 8003326:	4770      	bx	lr
 8003328:	20039520 	.word	0x20039520

0800332c <_ZN13PathFollowing18getTargetVelocitysERdS0_>:

void PathFollowing::getTargetVelocitys(double &v, double &omega)
{
 800332c:	b490      	push	{r4, r7}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
	v = rtY.V_tar;
 8003338:	4b08      	ldr	r3, [pc, #32]	; (800335c <_ZN13PathFollowing18getTargetVelocitysERdS0_+0x30>)
 800333a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	e9c2 3400 	strd	r3, r4, [r2]
	omega = rtY.tar;
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <_ZN13PathFollowing18getTargetVelocitysERdS0_+0x30>)
 8003346:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	e9c2 3400 	strd	r3, r4, [r2]

}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bc90      	pop	{r4, r7}
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20039580 	.word	0x20039580

08003360 <_ZN13PathFollowing4flipEv>:
void PathFollowing::flip()
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	if(execute_flag_ == true){
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <_ZN13PathFollowing4flipEv+0x14>
		path_following_step();
 8003370:	f001 fbf8 	bl	8004b64 <path_following_step>
	}
}
 8003374:	bf00      	nop
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <_ZN13PathFollowing5startEv>:

void PathFollowing::start()
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	execute_flag_ = true;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	701a      	strb	r2, [r3, #0]
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <_ZN13PathFollowing4stopEv>:

void PathFollowing::stop()
{
 8003396:	b490      	push	{r4, r7}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
	execute_flag_ = false;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
	ref_num = 0;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80033aa:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80033ae:	2200      	movs	r2, #0
 80033b0:	801a      	strh	r2, [r3, #0]
	x_tar_ = 0;
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	f04f 0400 	mov.w	r4, #0
 80033bc:	e9c2 3402 	strd	r3, r4, [r2, #8]
	y_tar_ = 0;
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	f04f 0400 	mov.w	r4, #0
 80033ca:	e9c2 3404 	strd	r3, r4, [r2, #16]
	th_tar_ = 0;
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	f04f 0400 	mov.w	r4, #0
 80033d8:	e9c2 3406 	strd	r3, r4, [r2, #24]
}
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc90      	pop	{r4, r7}
 80033e4:	4770      	bx	lr

080033e6 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80033ee:	2088      	movs	r0, #136	; 0x88
 80033f0:	f7fe fd5b 	bl	8001eaa <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80033f4:	2080      	movs	r0, #128	; 0x80
 80033f6:	f7fe fd58 	bl	8001eaa <INA260_init>
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	0000      	movs	r0, r0
 8003404:	0000      	movs	r0, r0
	...

08003408 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8003410:	2188      	movs	r1, #136	; 0x88
 8003412:	2002      	movs	r0, #2
 8003414:	f7fe fce6 	bl	8001de4 <INA260_read>
 8003418:	4603      	mov	r3, r0
 800341a:	4618      	mov	r0, r3
 800341c:	f7fd f89a 	bl	8000554 <__aeabi_i2d>
 8003420:	a30c      	add	r3, pc, #48	; (adr r3, 8003454 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8003422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003426:	f7fd f8ff 	bl	8000628 <__aeabi_dmul>
 800342a:	4603      	mov	r3, r0
 800342c:	460c      	mov	r4, r1
 800342e:	4618      	mov	r0, r3
 8003430:	4621      	mov	r1, r4
 8003432:	f7fd fbf1 	bl	8000c18 <__aeabi_d2f>
 8003436:	4602      	mov	r2, r0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4a03      	ldr	r2, [pc, #12]	; (8003450 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8003442:	6013      	str	r3, [r2, #0]
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	bd90      	pop	{r4, r7, pc}
 800344c:	f3af 8000 	nop.w
 8003450:	20000248 	.word	0x20000248
 8003454:	47ae147b 	.word	0x47ae147b
 8003458:	3f547ae1 	.word	0x3f547ae1
 800345c:	00000000 	.word	0x00000000

08003460 <_ZN11PowerSensor12butteryCheckEv>:
	return buttery_voltage_;

}

bool PowerSensor::butteryCheck()
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003468:	2300      	movs	r3, #0
 800346a:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd f881 	bl	8000578 <__aeabi_f2d>
 8003476:	a311      	add	r3, pc, #68	; (adr r3, 80034bc <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347c:	f7fd fb46 	bl	8000b0c <__aeabi_dcmplt>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d006      	beq.n	8003494 <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003486:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	3301      	adds	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003490:	801a      	strh	r2, [r3, #0]
 8003492:	e002      	b.n	800349a <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003494:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003496:	2200      	movs	r2, #0
 8003498:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d004      	beq.n	80034ac <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 80034a2:	2301      	movs	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 80034a6:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	2000024c 	.word	0x2000024c
 80034bc:	9999999a 	.word	0x9999999a
 80034c0:	401d9999 	.word	0x401d9999

080034c4 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80034d0:	2102      	movs	r1, #2
 80034d2:	4822      	ldr	r0, [pc, #136]	; (800355c <_ZN12RotarySwitch8getValueEv+0x98>)
 80034d4:	f004 fac2 	bl	8007a5c <HAL_GPIO_ReadPin>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	bf0c      	ite	eq
 80034de:	2301      	moveq	r3, #1
 80034e0:	2300      	movne	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d003      	beq.n	80034f0 <_ZN12RotarySwitch8getValueEv+0x2c>
 80034e8:	89fb      	ldrh	r3, [r7, #14]
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80034f0:	2108      	movs	r1, #8
 80034f2:	481a      	ldr	r0, [pc, #104]	; (800355c <_ZN12RotarySwitch8getValueEv+0x98>)
 80034f4:	f004 fab2 	bl	8007a5c <HAL_GPIO_ReadPin>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	bf0c      	ite	eq
 80034fe:	2301      	moveq	r3, #1
 8003500:	2300      	movne	r3, #0
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003508:	89fb      	ldrh	r3, [r7, #14]
 800350a:	f043 0302 	orr.w	r3, r3, #2
 800350e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003510:	2110      	movs	r1, #16
 8003512:	4812      	ldr	r0, [pc, #72]	; (800355c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003514:	f004 faa2 	bl	8007a5c <HAL_GPIO_ReadPin>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	bf0c      	ite	eq
 800351e:	2301      	moveq	r3, #1
 8003520:	2300      	movne	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d003      	beq.n	8003530 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003528:	89fb      	ldrh	r3, [r7, #14]
 800352a:	f043 0304 	orr.w	r3, r3, #4
 800352e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8003530:	2180      	movs	r1, #128	; 0x80
 8003532:	480a      	ldr	r0, [pc, #40]	; (800355c <_ZN12RotarySwitch8getValueEv+0x98>)
 8003534:	f004 fa92 	bl	8007a5c <HAL_GPIO_ReadPin>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003548:	89fb      	ldrh	r3, [r7, #14]
 800354a:	f043 0308 	orr.w	r3, r3, #8
 800354e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003550:	89fb      	ldrh	r3, [r7, #14]

}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40020c00 	.word	0x40020c00

08003560 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
{

}
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8003584:	887b      	ldrh	r3, [r7, #2]
 8003586:	2b04      	cmp	r3, #4
 8003588:	d111      	bne.n	80035ae <_ZN10SideSensor12updateStatusEt+0x36>
 800358a:	4b28      	ldr	r3, [pc, #160]	; (800362c <_ZN10SideSensor12updateStatusEt+0xb4>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	f083 0301 	eor.w	r3, r3, #1
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 80035a6:	4b21      	ldr	r3, [pc, #132]	; (800362c <_ZN10SideSensor12updateStatusEt+0xb4>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	701a      	strb	r2, [r3, #0]
 80035ac:	e010      	b.n	80035d0 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 80035ae:	887b      	ldrh	r3, [r7, #2]
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d10d      	bne.n	80035d0 <_ZN10SideSensor12updateStatusEt+0x58>
 80035b4:	4b1d      	ldr	r3, [pc, #116]	; (800362c <_ZN10SideSensor12updateStatusEt+0xb4>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d009      	beq.n	80035d0 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	f083 0301 	eor.w	r3, r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 80035ca:	4b18      	ldr	r3, [pc, #96]	; (800362c <_ZN10SideSensor12updateStatusEt+0xb4>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 80035d0:	887b      	ldrh	r3, [r7, #2]
 80035d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d6:	d111      	bne.n	80035fc <_ZN10SideSensor12updateStatusEt+0x84>
 80035d8:	4b15      	ldr	r3, [pc, #84]	; (8003630 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	f083 0301 	eor.w	r3, r3, #1
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00a      	beq.n	80035fc <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	f043 0302 	orr.w	r3, r3, #2
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 80035f4:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 80035fa:	e011      	b.n	8003620 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 80035fc:	887b      	ldrh	r3, [r7, #2]
 80035fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003602:	d10d      	bne.n	8003620 <_ZN10SideSensor12updateStatusEt+0xa8>
 8003604:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d009      	beq.n	8003620 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	f083 0302 	eor.w	r3, r3, #2
 8003614:	b29a      	uxth	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 800361a:	4b05      	ldr	r3, [pc, #20]	; (8003630 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800361c:	2200      	movs	r2, #0
 800361e:	701a      	strb	r2, [r3, #0]
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	2000024e 	.word	0x2000024e
 8003630:	2000024f 	.word	0x2000024f

08003634 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8003634:	b490      	push	{r4, r7}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	609a      	str	r2, [r3, #8]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	f04f 0400 	mov.w	r4, #0
 8003664:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	619a      	str	r2, [r3, #24]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	61da      	str	r2, [r3, #28]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	621a      	str	r2, [r3, #32]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	625a      	str	r2, [r3, #36]	; 0x24
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	629a      	str	r2, [r3, #40]	; 0x28
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	62da      	str	r2, [r3, #44]	; 0x2c
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
{
	motor_ = motor;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	635a      	str	r2, [r3, #52]	; 0x34
	encoder_ = encoder;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38
	imu_ = imu;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	63da      	str	r2, [r3, #60]	; 0x3c

}
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc90      	pop	{r4, r7}
 80036bc:	4770      	bx	lr
	...

080036c0 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

double VelocityCtrl::calcVelocity()
{
 80036c0:	b590      	push	{r4, r7, lr}
 80036c2:	b089      	sub	sp, #36	; 0x24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
	double enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036cc:	f107 0208 	add.w	r2, r7, #8
 80036d0:	f107 0110 	add.w	r1, r7, #16
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fd fe37 	bl	8001348 <_ZN7Encoder6getCntERdS0_>
	double enc_cnt = (enc_l + enc_r) / 2;
 80036da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036de:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80036e2:	461a      	mov	r2, r3
 80036e4:	4623      	mov	r3, r4
 80036e6:	f7fc fde9 	bl	80002bc <__adddf3>
 80036ea:	4603      	mov	r3, r0
 80036ec:	460c      	mov	r4, r1
 80036ee:	4618      	mov	r0, r3
 80036f0:	4621      	mov	r1, r4
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036fa:	f7fd f8bf 	bl	800087c <__aeabi_ddiv>
 80036fe:	4603      	mov	r3, r0
 8003700:	460c      	mov	r4, r1
 8003702:	e9c7 3406 	strd	r3, r4, [r7, #24]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8003706:	a310      	add	r3, pc, #64	; (adr r3, 8003748 <_ZN12VelocityCtrl12calcVelocityEv+0x88>)
 8003708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003710:	f7fc ff8a 	bl	8000628 <__aeabi_dmul>
 8003714:	4603      	mov	r3, r0
 8003716:	460c      	mov	r4, r1
 8003718:	4618      	mov	r0, r3
 800371a:	4621      	mov	r1, r4
 800371c:	f7fd fa7c 	bl	8000c18 <__aeabi_d2f>
 8003720:	4602      	mov	r2, r0
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fc ff24 	bl	8000578 <__aeabi_f2d>
 8003730:	4603      	mov	r3, r0
 8003732:	460c      	mov	r4, r1
 8003734:	ec44 3b17 	vmov	d7, r3, r4
}
 8003738:	eeb0 0a47 	vmov.f32	s0, s14
 800373c:	eef0 0a67 	vmov.f32	s1, s15
 8003740:	3724      	adds	r7, #36	; 0x24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd90      	pop	{r4, r7, pc}
 8003746:	bf00      	nop
 8003748:	1ab1d998 	.word	0x1ab1d998
 800374c:	3f7830b5 	.word	0x3f7830b5

08003750 <_ZN12VelocityCtrl3pidEv>:
	return current_omega_;
}
*/

void VelocityCtrl::pid()
{
 8003750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003752:	b08d      	sub	sp, #52	; 0x34
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	ed93 7a00 	vldr	s14, [r3]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	edd3 7a02 	vldr	s15, [r3, #8]
 8003764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003768:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- imu_->getOmega();
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4618      	mov	r0, r3
 8003772:	f7fc ff01 	bl	8000578 <__aeabi_f2d>
 8003776:	4604      	mov	r4, r0
 8003778:	460d      	mov	r5, r1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe fa56 	bl	8001c30 <_ZN3IMU8getOmegaEv>
 8003784:	ec53 2b10 	vmov	r2, r3, d0
 8003788:	4620      	mov	r0, r4
 800378a:	4629      	mov	r1, r5
 800378c:	f7fc fd94 	bl	80002b8 <__aeabi_dsub>
 8003790:	4603      	mov	r3, r0
 8003792:	460c      	mov	r4, r1
 8003794:	4618      	mov	r0, r3
 8003796:	4621      	mov	r1, r4
 8003798:	f7fd fa3e 	bl	8000c18 <__aeabi_d2f>
 800379c:	4603      	mov	r3, r0
 800379e:	62bb      	str	r3, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	v_p = v_kp_ * v_diff;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80037a6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80037aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ae:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	ed93 7a07 	vldr	s14, [r3, #28]
 80037b8:	4b73      	ldr	r3, [pc, #460]	; (8003988 <_ZN12VelocityCtrl3pidEv+0x238>)
 80037ba:	edd3 7a00 	vldr	s15, [r3]
 80037be:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80037c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80037c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ca:	ee17 0a90 	vmov	r0, s15
 80037ce:	f7fc fed3 	bl	8000578 <__aeabi_f2d>
 80037d2:	a36b      	add	r3, pc, #428	; (adr r3, 8003980 <_ZN12VelocityCtrl3pidEv+0x230>)
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	f7fc ff26 	bl	8000628 <__aeabi_dmul>
 80037dc:	4603      	mov	r3, r0
 80037de:	460c      	mov	r4, r1
 80037e0:	4618      	mov	r0, r3
 80037e2:	4621      	mov	r1, r4
 80037e4:	f7fd fa18 	bl	8000c18 <__aeabi_d2f>
 80037e8:	4603      	mov	r3, r0
 80037ea:	623b      	str	r3, [r7, #32]
	v_i += v_ki_ * v_diff * DELTA_T;
 80037ec:	4b67      	ldr	r3, [pc, #412]	; (800398c <_ZN12VelocityCtrl3pidEv+0x23c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7fc fec1 	bl	8000578 <__aeabi_f2d>
 80037f6:	4604      	mov	r4, r0
 80037f8:	460d      	mov	r5, r1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	ed93 7a08 	vldr	s14, [r3, #32]
 8003800:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003808:	ee17 0a90 	vmov	r0, s15
 800380c:	f7fc feb4 	bl	8000578 <__aeabi_f2d>
 8003810:	a35b      	add	r3, pc, #364	; (adr r3, 8003980 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003816:	f7fc ff07 	bl	8000628 <__aeabi_dmul>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4620      	mov	r0, r4
 8003820:	4629      	mov	r1, r5
 8003822:	f7fc fd4b 	bl	80002bc <__adddf3>
 8003826:	4603      	mov	r3, r0
 8003828:	460c      	mov	r4, r1
 800382a:	4618      	mov	r0, r3
 800382c:	4621      	mov	r1, r4
 800382e:	f7fd f9f3 	bl	8000c18 <__aeabi_d2f>
 8003832:	4602      	mov	r2, r0
 8003834:	4b55      	ldr	r3, [pc, #340]	; (800398c <_ZN12VelocityCtrl3pidEv+0x23c>)
 8003836:	601a      	str	r2, [r3, #0]

	o_p = o_kp_ * o_diff;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800383e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003846:	edc7 7a07 	vstr	s15, [r7, #28]
	o_d = o_kd_ * (o_diff - o_pre_diff) * DELTA_T;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003850:	4b4f      	ldr	r3, [pc, #316]	; (8003990 <_ZN12VelocityCtrl3pidEv+0x240>)
 8003852:	edd3 7a00 	vldr	s15, [r3]
 8003856:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800385a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800385e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003862:	ee17 0a90 	vmov	r0, s15
 8003866:	f7fc fe87 	bl	8000578 <__aeabi_f2d>
 800386a:	a345      	add	r3, pc, #276	; (adr r3, 8003980 <_ZN12VelocityCtrl3pidEv+0x230>)
 800386c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003870:	f7fc feda 	bl	8000628 <__aeabi_dmul>
 8003874:	4603      	mov	r3, r0
 8003876:	460c      	mov	r4, r1
 8003878:	4618      	mov	r0, r3
 800387a:	4621      	mov	r1, r4
 800387c:	f7fd f9cc 	bl	8000c18 <__aeabi_d2f>
 8003880:	4603      	mov	r3, r0
 8003882:	61bb      	str	r3, [r7, #24]
	o_i += o_ki_ * o_diff * DELTA_T;
 8003884:	4b43      	ldr	r3, [pc, #268]	; (8003994 <_ZN12VelocityCtrl3pidEv+0x244>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f7fc fe75 	bl	8000578 <__aeabi_f2d>
 800388e:	4604      	mov	r4, r0
 8003890:	460d      	mov	r5, r1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003898:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800389c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a0:	ee17 0a90 	vmov	r0, s15
 80038a4:	f7fc fe68 	bl	8000578 <__aeabi_f2d>
 80038a8:	a335      	add	r3, pc, #212	; (adr r3, 8003980 <_ZN12VelocityCtrl3pidEv+0x230>)
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	f7fc febb 	bl	8000628 <__aeabi_dmul>
 80038b2:	4602      	mov	r2, r0
 80038b4:	460b      	mov	r3, r1
 80038b6:	4620      	mov	r0, r4
 80038b8:	4629      	mov	r1, r5
 80038ba:	f7fc fcff 	bl	80002bc <__adddf3>
 80038be:	4603      	mov	r3, r0
 80038c0:	460c      	mov	r4, r1
 80038c2:	4618      	mov	r0, r3
 80038c4:	4621      	mov	r1, r4
 80038c6:	f7fd f9a7 	bl	8000c18 <__aeabi_d2f>
 80038ca:	4602      	mov	r2, r0
 80038cc:	4b31      	ldr	r3, [pc, #196]	; (8003994 <_ZN12VelocityCtrl3pidEv+0x244>)
 80038ce:	601a      	str	r2, [r3, #0]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 80038d0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80038d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80038d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038dc:	4b2b      	ldr	r3, [pc, #172]	; (800398c <_ZN12VelocityCtrl3pidEv+0x23c>)
 80038de:	edd3 7a00 	vldr	s15, [r3]
 80038e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038e6:	edc7 7a05 	vstr	s15, [r7, #20]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 80038ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80038f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80038f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038fa:	4b26      	ldr	r3, [pc, #152]	; (8003994 <_ZN12VelocityCtrl3pidEv+0x244>)
 80038fc:	edd3 7a00 	vldr	s15, [r3]
 8003900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003904:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 8003908:	ed97 7a07 	vldr	s14, [r7, #28]
 800390c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003910:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003914:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <_ZN12VelocityCtrl3pidEv+0x244>)
 8003916:	edd3 7a00 	vldr	s15, [r3]
 800391a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800391e:	eef1 7a67 	vneg.f32	s15, s15
 8003922:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800392a:	ed97 7a04 	vldr	s14, [r7, #16]
 800392e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003936:	ee17 0a90 	vmov	r0, s15
 800393a:	f7fc fe1d 	bl	8000578 <__aeabi_f2d>
 800393e:	4605      	mov	r5, r0
 8003940:	460e      	mov	r6, r1
 8003942:	ed97 7a05 	vldr	s14, [r7, #20]
 8003946:	edd7 7a02 	vldr	s15, [r7, #8]
 800394a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800394e:	ee17 0a90 	vmov	r0, s15
 8003952:	f7fc fe11 	bl	8000578 <__aeabi_f2d>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	ec43 2b11 	vmov	d1, r2, r3
 800395e:	ec46 5b10 	vmov	d0, r5, r6
 8003962:	4620      	mov	r0, r4
 8003964:	f7ff f8d4 	bl	8002b10 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8003968:	4a07      	ldr	r2, [pc, #28]	; (8003988 <_ZN12VelocityCtrl3pidEv+0x238>)
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 800396e:	4a08      	ldr	r2, [pc, #32]	; (8003990 <_ZN12VelocityCtrl3pidEv+0x240>)
 8003970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003972:	6013      	str	r3, [r2, #0]
}
 8003974:	bf00      	nop
 8003976:	3734      	adds	r7, #52	; 0x34
 8003978:	46bd      	mov	sp, r7
 800397a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800397c:	f3af 8000 	nop.w
 8003980:	d2f1a9fc 	.word	0xd2f1a9fc
 8003984:	3f50624d 	.word	0x3f50624d
 8003988:	20000250 	.word	0x20000250
 800398c:	20000258 	.word	0x20000258
 8003990:	20000254 	.word	0x20000254
 8003994:	2000025c 	.word	0x2000025c

08003998 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80039a4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	605a      	str	r2, [r3, #4]
}
 80039b4:	bf00      	nop
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float kd, float ki)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80039cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80039d0:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	61da      	str	r2, [r3, #28]
	v_ki_ = ki;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	621a      	str	r2, [r3, #32]
}
 80039e6:	bf00      	nop
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float kd, float ki)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b085      	sub	sp, #20
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	60f8      	str	r0, [r7, #12]
 80039fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80039fe:	edc7 0a01 	vstr	s1, [r7, #4]
 8003a02:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	629a      	str	r2, [r3, #40]	; 0x28
	o_ki_ = ki;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003a18:	bf00      	nop
 8003a1a:	3714      	adds	r7, #20
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr

08003a24 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7ff fe47 	bl	80036c0 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <_ZN12VelocityCtrl4flipEv+0x1e>
		pid();
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff fe87 	bl	8003750 <_ZN12VelocityCtrl3pidEv>
	}


}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	//calcOmega();
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
	...

08003a68 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	motor_->setRatio(0, 0);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003a98 <_ZN12VelocityCtrl4stopEv+0x30>
 8003a80:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003a98 <_ZN12VelocityCtrl4stopEv+0x30>
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff f843 	bl	8002b10 <_ZN5Motor8setRatioEdd>

}
 8003a8a:	bf00      	nop
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	f3af 8000 	nop.w
	...

08003aa0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003aa8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003aac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d013      	beq.n	8003ae0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003ab8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003abc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003ac0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00b      	beq.n	8003ae0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003ac8:	e000      	b.n	8003acc <ITM_SendChar+0x2c>
    {
      __NOP();
 8003aca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003acc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0f9      	beq.n	8003aca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003ad6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003ae0:	687b      	ldr	r3, [r7, #4]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b086      	sub	sp, #24
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	e009      	b.n	8003b14 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	60ba      	str	r2, [r7, #8]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff ffc9 	bl	8003aa0 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	3301      	adds	r3, #1
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	dbf1      	blt.n	8003b00 <_write+0x12>
  }
  return len;
 8003b1c:	687b      	ldr	r3, [r7, #4]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8003b30:	88fb      	ldrh	r3, [r7, #6]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f002 f8ee 	bl	8005d14 <cppExit>
}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1e      	ldr	r2, [pc, #120]	; (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d10e      	bne.n	8003b70 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8003b52:	f001 fffd 	bl	8005b50 <cppFlip1ms>

		tim6_timer++;
 8003b56:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	4a1b      	ldr	r2, [pc, #108]	; (8003bcc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003b5e:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8003b60:	4b1a      	ldr	r3, [pc, #104]	; (8003bcc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a1a      	ldr	r2, [pc, #104]	; (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d902      	bls.n	8003b70 <HAL_TIM_PeriodElapsedCallback+0x30>
 8003b6a:	4b18      	ldr	r3, [pc, #96]	; (8003bcc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a17      	ldr	r2, [pc, #92]	; (8003bd4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d10e      	bne.n	8003b98 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8003b7a:	f002 f813 	bl	8005ba4 <cppFlip100ns>

		tim7_timer++;
 8003b7e:	4b16      	ldr	r3, [pc, #88]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3301      	adds	r3, #1
 8003b84:	4a14      	ldr	r2, [pc, #80]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003b86:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8003b88:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a10      	ldr	r2, [pc, #64]	; (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d902      	bls.n	8003b98 <HAL_TIM_PeriodElapsedCallback+0x58>
 8003b92:	4b11      	ldr	r3, [pc, #68]	; (8003bd8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a0f      	ldr	r2, [pc, #60]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d10e      	bne.n	8003bc0 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8003ba2:	f002 f809 	bl	8005bb8 <cppFlip10ms>

		tim13_timer++;
 8003ba6:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3301      	adds	r3, #1
 8003bac:	4a0c      	ldr	r2, [pc, #48]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003bae:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a06      	ldr	r2, [pc, #24]	; (8003bd0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d902      	bls.n	8003bc0 <HAL_TIM_PeriodElapsedCallback+0x80>
 8003bba:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
	}

}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40001000 	.word	0x40001000
 8003bcc:	20039200 	.word	0x20039200
 8003bd0:	0001869f 	.word	0x0001869f
 8003bd4:	40001400 	.word	0x40001400
 8003bd8:	20039244 	.word	0x20039244
 8003bdc:	40001c00 	.word	0x40001c00
 8003be0:	20039248 	.word	0x20039248

08003be4 <init>:

void init()
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8003be8:	2201      	movs	r2, #1
 8003bea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bee:	4808      	ldr	r0, [pc, #32]	; (8003c10 <init+0x2c>)
 8003bf0:	f003 ff4c 	bl	8007a8c <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8003bf4:	4807      	ldr	r0, [pc, #28]	; (8003c14 <init+0x30>)
 8003bf6:	f007 fe2c 	bl	800b852 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003bfa:	4807      	ldr	r0, [pc, #28]	; (8003c18 <init+0x34>)
 8003bfc:	f007 fe29 	bl	800b852 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8003c00:	4806      	ldr	r0, [pc, #24]	; (8003c1c <init+0x38>)
 8003c02:	f007 fe26 	bl	800b852 <HAL_TIM_Base_Start_IT>

	cppInit();
 8003c06:	f001 ff1f 	bl	8005a48 <cppInit>

	//path_following_initialize();

}
 8003c0a:	bf00      	nop
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	2003932c 	.word	0x2003932c
 8003c18:	200394d0 	.word	0x200394d0
 8003c1c:	2003924c 	.word	0x2003924c

08003c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c24:	f002 fc2a 	bl	800647c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c28:	f000 f82a 	bl	8003c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c2c:	f000 fdbc 	bl	80047a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c30:	f000 fd8a 	bl	8004748 <MX_DMA_Init>
  MX_I2C2_Init();
 8003c34:	f000 f9e8 	bl	8004008 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003c38:	f000 fa14 	bl	8004064 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8003c3c:	f000 fa32 	bl	80040a4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003c40:	f000 fa66 	bl	8004110 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003c44:	f000 fb70 	bl	8004328 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003c48:	f000 fc3c 	bl	80044c4 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003c4c:	f000 fd52 	bl	80046f4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003c50:	f009 fdd2 	bl	800d7f8 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003c54:	f000 fbcc 	bl	80043f0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003c58:	f000 f9a8 	bl	8003fac <MX_I2C1_Init>
  MX_TIM3_Init();
 8003c5c:	f000 fb00 	bl	8004260 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003c60:	f000 fc88 	bl	8004574 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003c64:	f000 fcd4 	bl	8004610 <MX_TIM11_Init>
  MX_ADC2_Init();
 8003c68:	f000 f898 	bl	8003d9c <MX_ADC2_Init>
  MX_TIM7_Init();
 8003c6c:	f000 fbf6 	bl	800445c <MX_TIM7_Init>
  MX_TIM13_Init();
 8003c70:	f000 fd1c 	bl	80046ac <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003c74:	f7ff ffb6 	bl	8003be4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8003c78:	f002 f85e 	bl	8005d38 <cppLoop>
 8003c7c:	e7fc      	b.n	8003c78 <main+0x58>
	...

08003c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b0a4      	sub	sp, #144	; 0x90
 8003c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c86:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c8a:	2234      	movs	r2, #52	; 0x34
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f00f f892 	bl	8012db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	60da      	str	r2, [r3, #12]
 8003ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ca4:	f107 030c 	add.w	r3, r7, #12
 8003ca8:	223c      	movs	r2, #60	; 0x3c
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f00f f883 	bl	8012db8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <SystemClock_Config+0x114>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	4a36      	ldr	r2, [pc, #216]	; (8003d94 <SystemClock_Config+0x114>)
 8003cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc2:	4b34      	ldr	r3, [pc, #208]	; (8003d94 <SystemClock_Config+0x114>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cce:	2300      	movs	r3, #0
 8003cd0:	607b      	str	r3, [r7, #4]
 8003cd2:	4b31      	ldr	r3, [pc, #196]	; (8003d98 <SystemClock_Config+0x118>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a30      	ldr	r2, [pc, #192]	; (8003d98 <SystemClock_Config+0x118>)
 8003cd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	4b2e      	ldr	r3, [pc, #184]	; (8003d98 <SystemClock_Config+0x118>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ce6:	607b      	str	r3, [r7, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003cea:	2301      	movs	r3, #1
 8003cec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003cee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cf2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cf8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cfc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003cfe:	2308      	movs	r3, #8
 8003d00:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003d02:	23b4      	movs	r3, #180	; 0xb4
 8003d04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003d0e:	2308      	movs	r3, #8
 8003d10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003d14:	2302      	movs	r3, #2
 8003d16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d1a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f005 faee 	bl	8009300 <HAL_RCC_OscConfig>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003d2a:	f000 fe93 	bl	8004a54 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003d2e:	f004 fe69 	bl	8008a04 <HAL_PWREx_EnableOverDrive>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003d38:	f000 fe8c 	bl	8004a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d3c:	230f      	movs	r3, #15
 8003d3e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d40:	2302      	movs	r3, #2
 8003d42:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d44:	2300      	movs	r3, #0
 8003d46:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d48:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d4c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d52:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003d54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d58:	2105      	movs	r1, #5
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f004 fea2 	bl	8008aa4 <HAL_RCC_ClockConfig>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003d66:	f000 fe75 	bl	8004a54 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8003d6a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003d6e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003d70:	2300      	movs	r3, #0
 8003d72:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003d74:	2300      	movs	r3, #0
 8003d76:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d78:	f107 030c 	add.w	r3, r7, #12
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f005 f881 	bl	8008e84 <HAL_RCCEx_PeriphCLKConfig>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d001      	beq.n	8003d8c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8003d88:	f000 fe64 	bl	8004a54 <Error_Handler>
  }
}
 8003d8c:	bf00      	nop
 8003d8e:	3790      	adds	r7, #144	; 0x90
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40023800 	.word	0x40023800
 8003d98:	40007000 	.word	0x40007000

08003d9c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003da2:	463b      	mov	r3, r7
 8003da4:	2200      	movs	r2, #0
 8003da6:	601a      	str	r2, [r3, #0]
 8003da8:	605a      	str	r2, [r3, #4]
 8003daa:	609a      	str	r2, [r3, #8]
 8003dac:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003dae:	4b7c      	ldr	r3, [pc, #496]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003db0:	4a7c      	ldr	r2, [pc, #496]	; (8003fa4 <MX_ADC2_Init+0x208>)
 8003db2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003db4:	4b7a      	ldr	r3, [pc, #488]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003db6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003dba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003dbc:	4b78      	ldr	r3, [pc, #480]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003dc2:	4b77      	ldr	r3, [pc, #476]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003dc8:	4b75      	ldr	r3, [pc, #468]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003dca:	2201      	movs	r2, #1
 8003dcc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003dce:	4b74      	ldr	r3, [pc, #464]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003dd6:	4b72      	ldr	r3, [pc, #456]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ddc:	4b70      	ldr	r3, [pc, #448]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003dde:	4a72      	ldr	r2, [pc, #456]	; (8003fa8 <MX_ADC2_Init+0x20c>)
 8003de0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003de2:	4b6f      	ldr	r3, [pc, #444]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8003de8:	4b6d      	ldr	r3, [pc, #436]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003dea:	220e      	movs	r2, #14
 8003dec:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003dee:	4b6c      	ldr	r3, [pc, #432]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003df6:	4b6a      	ldr	r3, [pc, #424]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003dfc:	4868      	ldr	r0, [pc, #416]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003dfe:	f002 fbd1 	bl	80065a4 <HAL_ADC_Init>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003e08:	f000 fe24 	bl	8004a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003e0c:	230a      	movs	r3, #10
 8003e0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003e10:	2301      	movs	r3, #1
 8003e12:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003e14:	2306      	movs	r3, #6
 8003e16:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e18:	463b      	mov	r3, r7
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4860      	ldr	r0, [pc, #384]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003e1e:	f002 fd15 	bl	800684c <HAL_ADC_ConfigChannel>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003e28:	f000 fe14 	bl	8004a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003e2c:	230b      	movs	r3, #11
 8003e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003e30:	2302      	movs	r3, #2
 8003e32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e34:	463b      	mov	r3, r7
 8003e36:	4619      	mov	r1, r3
 8003e38:	4859      	ldr	r0, [pc, #356]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003e3a:	f002 fd07 	bl	800684c <HAL_ADC_ConfigChannel>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003e44:	f000 fe06 	bl	8004a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003e48:	230c      	movs	r3, #12
 8003e4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e50:	463b      	mov	r3, r7
 8003e52:	4619      	mov	r1, r3
 8003e54:	4852      	ldr	r0, [pc, #328]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003e56:	f002 fcf9 	bl	800684c <HAL_ADC_ConfigChannel>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003e60:	f000 fdf8 	bl	8004a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003e64:	230d      	movs	r3, #13
 8003e66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003e68:	2304      	movs	r3, #4
 8003e6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e6c:	463b      	mov	r3, r7
 8003e6e:	4619      	mov	r1, r3
 8003e70:	484b      	ldr	r0, [pc, #300]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003e72:	f002 fceb 	bl	800684c <HAL_ADC_ConfigChannel>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003e7c:	f000 fdea 	bl	8004a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003e84:	2305      	movs	r3, #5
 8003e86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e88:	463b      	mov	r3, r7
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4844      	ldr	r0, [pc, #272]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003e8e:	f002 fcdd 	bl	800684c <HAL_ADC_ConfigChannel>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8003e98:	f000 fddc 	bl	8004a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003ea0:	2306      	movs	r3, #6
 8003ea2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ea4:	463b      	mov	r3, r7
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	483d      	ldr	r0, [pc, #244]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003eaa:	f002 fccf 	bl	800684c <HAL_ADC_ConfigChannel>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003eb4:	f000 fdce 	bl	8004a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003ebc:	2307      	movs	r3, #7
 8003ebe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ec0:	463b      	mov	r3, r7
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4836      	ldr	r0, [pc, #216]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003ec6:	f002 fcc1 	bl	800684c <HAL_ADC_ConfigChannel>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003ed0:	f000 fdc0 	bl	8004a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003ed8:	2308      	movs	r3, #8
 8003eda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003edc:	463b      	mov	r3, r7
 8003ede:	4619      	mov	r1, r3
 8003ee0:	482f      	ldr	r0, [pc, #188]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003ee2:	f002 fcb3 	bl	800684c <HAL_ADC_ConfigChannel>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003eec:	f000 fdb2 	bl	8004a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003ef0:	2304      	movs	r3, #4
 8003ef2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003ef4:	2309      	movs	r3, #9
 8003ef6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ef8:	463b      	mov	r3, r7
 8003efa:	4619      	mov	r1, r3
 8003efc:	4828      	ldr	r0, [pc, #160]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003efe:	f002 fca5 	bl	800684c <HAL_ADC_ConfigChannel>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8003f08:	f000 fda4 	bl	8004a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003f0c:	2305      	movs	r3, #5
 8003f0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003f10:	230a      	movs	r3, #10
 8003f12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f14:	463b      	mov	r3, r7
 8003f16:	4619      	mov	r1, r3
 8003f18:	4821      	ldr	r0, [pc, #132]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003f1a:	f002 fc97 	bl	800684c <HAL_ADC_ConfigChannel>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8003f24:	f000 fd96 	bl	8004a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003f28:	2306      	movs	r3, #6
 8003f2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003f2c:	230b      	movs	r3, #11
 8003f2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f30:	463b      	mov	r3, r7
 8003f32:	4619      	mov	r1, r3
 8003f34:	481a      	ldr	r0, [pc, #104]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003f36:	f002 fc89 	bl	800684c <HAL_ADC_ConfigChannel>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8003f40:	f000 fd88 	bl	8004a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003f44:	2307      	movs	r3, #7
 8003f46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8003f48:	230c      	movs	r3, #12
 8003f4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f4c:	463b      	mov	r3, r7
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4813      	ldr	r0, [pc, #76]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003f52:	f002 fc7b 	bl	800684c <HAL_ADC_ConfigChannel>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8003f5c:	f000 fd7a 	bl	8004a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003f60:	2308      	movs	r3, #8
 8003f62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003f64:	230d      	movs	r3, #13
 8003f66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f68:	463b      	mov	r3, r7
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	480c      	ldr	r0, [pc, #48]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003f6e:	f002 fc6d 	bl	800684c <HAL_ADC_ConfigChannel>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8003f78:	f000 fd6c 	bl	8004a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003f7c:	2309      	movs	r3, #9
 8003f7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8003f80:	230e      	movs	r3, #14
 8003f82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f84:	463b      	mov	r3, r7
 8003f86:	4619      	mov	r1, r3
 8003f88:	4805      	ldr	r0, [pc, #20]	; (8003fa0 <MX_ADC2_Init+0x204>)
 8003f8a:	f002 fc5f 	bl	800684c <HAL_ADC_ConfigChannel>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8003f94:	f000 fd5e 	bl	8004a54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003f98:	bf00      	nop
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	200390d0 	.word	0x200390d0
 8003fa4:	40012100 	.word	0x40012100
 8003fa8:	0f000001 	.word	0x0f000001

08003fac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003fb0:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <MX_I2C1_Init+0x50>)
 8003fb2:	4a13      	ldr	r2, [pc, #76]	; (8004000 <MX_I2C1_Init+0x54>)
 8003fb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003fb6:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <MX_I2C1_Init+0x50>)
 8003fb8:	4a12      	ldr	r2, [pc, #72]	; (8004004 <MX_I2C1_Init+0x58>)
 8003fba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	; (8003ffc <MX_I2C1_Init+0x50>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003fc2:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <MX_I2C1_Init+0x50>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003fc8:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <MX_I2C1_Init+0x50>)
 8003fca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <MX_I2C1_Init+0x50>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003fd6:	4b09      	ldr	r3, [pc, #36]	; (8003ffc <MX_I2C1_Init+0x50>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003fdc:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <MX_I2C1_Init+0x50>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003fe2:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <MX_I2C1_Init+0x50>)
 8003fe4:	2280      	movs	r2, #128	; 0x80
 8003fe6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003fe8:	4804      	ldr	r0, [pc, #16]	; (8003ffc <MX_I2C1_Init+0x50>)
 8003fea:	f003 fd81 	bl	8007af0 <HAL_I2C_Init>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d001      	beq.n	8003ff8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ff4:	f000 fd2e 	bl	8004a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ff8:	bf00      	nop
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20039118 	.word	0x20039118
 8004000:	40005400 	.word	0x40005400
 8004004:	000186a0 	.word	0x000186a0

08004008 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800400c:	4b12      	ldr	r3, [pc, #72]	; (8004058 <MX_I2C2_Init+0x50>)
 800400e:	4a13      	ldr	r2, [pc, #76]	; (800405c <MX_I2C2_Init+0x54>)
 8004010:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004012:	4b11      	ldr	r3, [pc, #68]	; (8004058 <MX_I2C2_Init+0x50>)
 8004014:	4a12      	ldr	r2, [pc, #72]	; (8004060 <MX_I2C2_Init+0x58>)
 8004016:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004018:	4b0f      	ldr	r3, [pc, #60]	; (8004058 <MX_I2C2_Init+0x50>)
 800401a:	2200      	movs	r2, #0
 800401c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800401e:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <MX_I2C2_Init+0x50>)
 8004020:	2200      	movs	r2, #0
 8004022:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004024:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <MX_I2C2_Init+0x50>)
 8004026:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800402a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800402c:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <MX_I2C2_Init+0x50>)
 800402e:	2200      	movs	r2, #0
 8004030:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <MX_I2C2_Init+0x50>)
 8004034:	2200      	movs	r2, #0
 8004036:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004038:	4b07      	ldr	r3, [pc, #28]	; (8004058 <MX_I2C2_Init+0x50>)
 800403a:	2200      	movs	r2, #0
 800403c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800403e:	4b06      	ldr	r3, [pc, #24]	; (8004058 <MX_I2C2_Init+0x50>)
 8004040:	2280      	movs	r2, #128	; 0x80
 8004042:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004044:	4804      	ldr	r0, [pc, #16]	; (8004058 <MX_I2C2_Init+0x50>)
 8004046:	f003 fd53 	bl	8007af0 <HAL_I2C_Init>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004050:	f000 fd00 	bl	8004a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004054:	bf00      	nop
 8004056:	bd80      	pop	{r7, pc}
 8004058:	200391ac 	.word	0x200391ac
 800405c:	40005800 	.word	0x40005800
 8004060:	000186a0 	.word	0x000186a0

08004064 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004068:	4b0c      	ldr	r3, [pc, #48]	; (800409c <MX_SDIO_SD_Init+0x38>)
 800406a:	4a0d      	ldr	r2, [pc, #52]	; (80040a0 <MX_SDIO_SD_Init+0x3c>)
 800406c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800406e:	4b0b      	ldr	r3, [pc, #44]	; (800409c <MX_SDIO_SD_Init+0x38>)
 8004070:	2200      	movs	r2, #0
 8004072:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004074:	4b09      	ldr	r3, [pc, #36]	; (800409c <MX_SDIO_SD_Init+0x38>)
 8004076:	2200      	movs	r2, #0
 8004078:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800407a:	4b08      	ldr	r3, [pc, #32]	; (800409c <MX_SDIO_SD_Init+0x38>)
 800407c:	2200      	movs	r2, #0
 800407e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <MX_SDIO_SD_Init+0x38>)
 8004082:	2200      	movs	r2, #0
 8004084:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <MX_SDIO_SD_Init+0x38>)
 8004088:	2200      	movs	r2, #0
 800408a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800408c:	4b03      	ldr	r3, [pc, #12]	; (800409c <MX_SDIO_SD_Init+0x38>)
 800408e:	2200      	movs	r2, #0
 8004090:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004092:	bf00      	nop
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	200393ac 	.word	0x200393ac
 80040a0:	40012c00 	.word	0x40012c00

080040a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80040a8:	4b17      	ldr	r3, [pc, #92]	; (8004108 <MX_SPI2_Init+0x64>)
 80040aa:	4a18      	ldr	r2, [pc, #96]	; (800410c <MX_SPI2_Init+0x68>)
 80040ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80040ae:	4b16      	ldr	r3, [pc, #88]	; (8004108 <MX_SPI2_Init+0x64>)
 80040b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80040b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80040b6:	4b14      	ldr	r3, [pc, #80]	; (8004108 <MX_SPI2_Init+0x64>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80040bc:	4b12      	ldr	r3, [pc, #72]	; (8004108 <MX_SPI2_Init+0x64>)
 80040be:	2200      	movs	r2, #0
 80040c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80040c2:	4b11      	ldr	r3, [pc, #68]	; (8004108 <MX_SPI2_Init+0x64>)
 80040c4:	2202      	movs	r2, #2
 80040c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80040c8:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <MX_SPI2_Init+0x64>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80040ce:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <MX_SPI2_Init+0x64>)
 80040d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <MX_SPI2_Init+0x64>)
 80040d8:	2228      	movs	r2, #40	; 0x28
 80040da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <MX_SPI2_Init+0x64>)
 80040de:	2200      	movs	r2, #0
 80040e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040e2:	4b09      	ldr	r3, [pc, #36]	; (8004108 <MX_SPI2_Init+0x64>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040e8:	4b07      	ldr	r3, [pc, #28]	; (8004108 <MX_SPI2_Init+0x64>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <MX_SPI2_Init+0x64>)
 80040f0:	220a      	movs	r2, #10
 80040f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040f4:	4804      	ldr	r0, [pc, #16]	; (8004108 <MX_SPI2_Init+0x64>)
 80040f6:	f006 fe2d 	bl	800ad54 <HAL_SPI_Init>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004100:	f000 fca8 	bl	8004a54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004104:	bf00      	nop
 8004106:	bd80      	pop	{r7, pc}
 8004108:	20038ff8 	.word	0x20038ff8
 800410c:	40003800 	.word	0x40003800

08004110 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b09a      	sub	sp, #104	; 0x68
 8004114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004116:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800411a:	2224      	movs	r2, #36	; 0x24
 800411c:	2100      	movs	r1, #0
 800411e:	4618      	mov	r0, r3
 8004120:	f00e fe4a 	bl	8012db8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004124:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800412e:	f107 0320 	add.w	r3, r7, #32
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	605a      	str	r2, [r3, #4]
 8004138:	609a      	str	r2, [r3, #8]
 800413a:	60da      	str	r2, [r3, #12]
 800413c:	611a      	str	r2, [r3, #16]
 800413e:	615a      	str	r2, [r3, #20]
 8004140:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004142:	463b      	mov	r3, r7
 8004144:	2220      	movs	r2, #32
 8004146:	2100      	movs	r1, #0
 8004148:	4618      	mov	r0, r3
 800414a:	f00e fe35 	bl	8012db8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800414e:	4b42      	ldr	r3, [pc, #264]	; (8004258 <MX_TIM1_Init+0x148>)
 8004150:	4a42      	ldr	r2, [pc, #264]	; (800425c <MX_TIM1_Init+0x14c>)
 8004152:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004154:	4b40      	ldr	r3, [pc, #256]	; (8004258 <MX_TIM1_Init+0x148>)
 8004156:	2200      	movs	r2, #0
 8004158:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800415a:	4b3f      	ldr	r3, [pc, #252]	; (8004258 <MX_TIM1_Init+0x148>)
 800415c:	2200      	movs	r2, #0
 800415e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004160:	4b3d      	ldr	r3, [pc, #244]	; (8004258 <MX_TIM1_Init+0x148>)
 8004162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004166:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004168:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <MX_TIM1_Init+0x148>)
 800416a:	2200      	movs	r2, #0
 800416c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800416e:	4b3a      	ldr	r3, [pc, #232]	; (8004258 <MX_TIM1_Init+0x148>)
 8004170:	2200      	movs	r2, #0
 8004172:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004174:	4b38      	ldr	r3, [pc, #224]	; (8004258 <MX_TIM1_Init+0x148>)
 8004176:	2200      	movs	r2, #0
 8004178:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800417a:	4837      	ldr	r0, [pc, #220]	; (8004258 <MX_TIM1_Init+0x148>)
 800417c:	f007 fb8d 	bl	800b89a <HAL_TIM_PWM_Init>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004186:	f000 fc65 	bl	8004a54 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800418a:	2303      	movs	r3, #3
 800418c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800418e:	2300      	movs	r3, #0
 8004190:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004192:	2301      	movs	r3, #1
 8004194:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004196:	2300      	movs	r3, #0
 8004198:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800419a:	2300      	movs	r3, #0
 800419c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800419e:	2300      	movs	r3, #0
 80041a0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80041a2:	2301      	movs	r3, #1
 80041a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80041a6:	2300      	movs	r3, #0
 80041a8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80041ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80041b2:	4619      	mov	r1, r3
 80041b4:	4828      	ldr	r0, [pc, #160]	; (8004258 <MX_TIM1_Init+0x148>)
 80041b6:	f007 fbd9 	bl	800b96c <HAL_TIM_Encoder_Init>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80041c0:	f000 fc48 	bl	8004a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041c4:	2300      	movs	r3, #0
 80041c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041c8:	2300      	movs	r3, #0
 80041ca:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80041cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041d0:	4619      	mov	r1, r3
 80041d2:	4821      	ldr	r0, [pc, #132]	; (8004258 <MX_TIM1_Init+0x148>)
 80041d4:	f008 f900 	bl	800c3d8 <HAL_TIMEx_MasterConfigSynchronization>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80041de:	f000 fc39 	bl	8004a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041e2:	2360      	movs	r3, #96	; 0x60
 80041e4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80041e6:	2300      	movs	r3, #0
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041ea:	2300      	movs	r3, #0
 80041ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80041ee:	2300      	movs	r3, #0
 80041f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80041f6:	2300      	movs	r3, #0
 80041f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041fa:	2300      	movs	r3, #0
 80041fc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041fe:	f107 0320 	add.w	r3, r7, #32
 8004202:	2208      	movs	r2, #8
 8004204:	4619      	mov	r1, r3
 8004206:	4814      	ldr	r0, [pc, #80]	; (8004258 <MX_TIM1_Init+0x148>)
 8004208:	f007 fd82 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8004212:	f000 fc1f 	bl	8004a54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004216:	2300      	movs	r3, #0
 8004218:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800421a:	2300      	movs	r3, #0
 800421c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004226:	2300      	movs	r3, #0
 8004228:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800422a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800422e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004230:	2300      	movs	r3, #0
 8004232:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004234:	463b      	mov	r3, r7
 8004236:	4619      	mov	r1, r3
 8004238:	4807      	ldr	r0, [pc, #28]	; (8004258 <MX_TIM1_Init+0x148>)
 800423a:	f008 f949 	bl	800c4d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004244:	f000 fc06 	bl	8004a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004248:	4803      	ldr	r0, [pc, #12]	; (8004258 <MX_TIM1_Init+0x148>)
 800424a:	f001 f97f 	bl	800554c <HAL_TIM_MspPostInit>

}
 800424e:	bf00      	nop
 8004250:	3768      	adds	r7, #104	; 0x68
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	2003936c 	.word	0x2003936c
 800425c:	40010000 	.word	0x40010000

08004260 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b08a      	sub	sp, #40	; 0x28
 8004264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004266:	f107 0320 	add.w	r3, r7, #32
 800426a:	2200      	movs	r2, #0
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004270:	1d3b      	adds	r3, r7, #4
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	605a      	str	r2, [r3, #4]
 8004278:	609a      	str	r2, [r3, #8]
 800427a:	60da      	str	r2, [r3, #12]
 800427c:	611a      	str	r2, [r3, #16]
 800427e:	615a      	str	r2, [r3, #20]
 8004280:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004282:	4b27      	ldr	r3, [pc, #156]	; (8004320 <MX_TIM3_Init+0xc0>)
 8004284:	4a27      	ldr	r2, [pc, #156]	; (8004324 <MX_TIM3_Init+0xc4>)
 8004286:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004288:	4b25      	ldr	r3, [pc, #148]	; (8004320 <MX_TIM3_Init+0xc0>)
 800428a:	2200      	movs	r2, #0
 800428c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800428e:	4b24      	ldr	r3, [pc, #144]	; (8004320 <MX_TIM3_Init+0xc0>)
 8004290:	2200      	movs	r2, #0
 8004292:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004294:	4b22      	ldr	r3, [pc, #136]	; (8004320 <MX_TIM3_Init+0xc0>)
 8004296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800429a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800429c:	4b20      	ldr	r3, [pc, #128]	; (8004320 <MX_TIM3_Init+0xc0>)
 800429e:	2200      	movs	r2, #0
 80042a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042a2:	4b1f      	ldr	r3, [pc, #124]	; (8004320 <MX_TIM3_Init+0xc0>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80042a8:	481d      	ldr	r0, [pc, #116]	; (8004320 <MX_TIM3_Init+0xc0>)
 80042aa:	f007 faf6 	bl	800b89a <HAL_TIM_PWM_Init>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d001      	beq.n	80042b8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80042b4:	f000 fbce 	bl	8004a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042b8:	2300      	movs	r3, #0
 80042ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042bc:	2300      	movs	r3, #0
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042c0:	f107 0320 	add.w	r3, r7, #32
 80042c4:	4619      	mov	r1, r3
 80042c6:	4816      	ldr	r0, [pc, #88]	; (8004320 <MX_TIM3_Init+0xc0>)
 80042c8:	f008 f886 	bl	800c3d8 <HAL_TIMEx_MasterConfigSynchronization>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80042d2:	f000 fbbf 	bl	8004a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042d6:	2360      	movs	r3, #96	; 0x60
 80042d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80042da:	2300      	movs	r3, #0
 80042dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042e6:	1d3b      	adds	r3, r7, #4
 80042e8:	2200      	movs	r2, #0
 80042ea:	4619      	mov	r1, r3
 80042ec:	480c      	ldr	r0, [pc, #48]	; (8004320 <MX_TIM3_Init+0xc0>)
 80042ee:	f007 fd0f 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80042f8:	f000 fbac 	bl	8004a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80042fc:	1d3b      	adds	r3, r7, #4
 80042fe:	2204      	movs	r2, #4
 8004300:	4619      	mov	r1, r3
 8004302:	4807      	ldr	r0, [pc, #28]	; (8004320 <MX_TIM3_Init+0xc0>)
 8004304:	f007 fd04 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800430e:	f000 fba1 	bl	8004a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004312:	4803      	ldr	r0, [pc, #12]	; (8004320 <MX_TIM3_Init+0xc0>)
 8004314:	f001 f91a 	bl	800554c <HAL_TIM_MspPostInit>

}
 8004318:	bf00      	nop
 800431a:	3728      	adds	r7, #40	; 0x28
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	20039204 	.word	0x20039204
 8004324:	40000400 	.word	0x40000400

08004328 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	; 0x28
 800432c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800432e:	f107 0320 	add.w	r3, r7, #32
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004338:	1d3b      	adds	r3, r7, #4
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	605a      	str	r2, [r3, #4]
 8004340:	609a      	str	r2, [r3, #8]
 8004342:	60da      	str	r2, [r3, #12]
 8004344:	611a      	str	r2, [r3, #16]
 8004346:	615a      	str	r2, [r3, #20]
 8004348:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800434a:	4b27      	ldr	r3, [pc, #156]	; (80043e8 <MX_TIM4_Init+0xc0>)
 800434c:	4a27      	ldr	r2, [pc, #156]	; (80043ec <MX_TIM4_Init+0xc4>)
 800434e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004350:	4b25      	ldr	r3, [pc, #148]	; (80043e8 <MX_TIM4_Init+0xc0>)
 8004352:	2200      	movs	r2, #0
 8004354:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004356:	4b24      	ldr	r3, [pc, #144]	; (80043e8 <MX_TIM4_Init+0xc0>)
 8004358:	2200      	movs	r2, #0
 800435a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800435c:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <MX_TIM4_Init+0xc0>)
 800435e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8004362:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004364:	4b20      	ldr	r3, [pc, #128]	; (80043e8 <MX_TIM4_Init+0xc0>)
 8004366:	2200      	movs	r2, #0
 8004368:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800436a:	4b1f      	ldr	r3, [pc, #124]	; (80043e8 <MX_TIM4_Init+0xc0>)
 800436c:	2200      	movs	r2, #0
 800436e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004370:	481d      	ldr	r0, [pc, #116]	; (80043e8 <MX_TIM4_Init+0xc0>)
 8004372:	f007 fa92 	bl	800b89a <HAL_TIM_PWM_Init>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800437c:	f000 fb6a 	bl	8004a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004380:	2300      	movs	r3, #0
 8004382:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004384:	2300      	movs	r3, #0
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004388:	f107 0320 	add.w	r3, r7, #32
 800438c:	4619      	mov	r1, r3
 800438e:	4816      	ldr	r0, [pc, #88]	; (80043e8 <MX_TIM4_Init+0xc0>)
 8004390:	f008 f822 	bl	800c3d8 <HAL_TIMEx_MasterConfigSynchronization>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800439a:	f000 fb5b 	bl	8004a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800439e:	2360      	movs	r3, #96	; 0x60
 80043a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043aa:	2300      	movs	r3, #0
 80043ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80043ae:	1d3b      	adds	r3, r7, #4
 80043b0:	2208      	movs	r2, #8
 80043b2:	4619      	mov	r1, r3
 80043b4:	480c      	ldr	r0, [pc, #48]	; (80043e8 <MX_TIM4_Init+0xc0>)
 80043b6:	f007 fcab 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80043c0:	f000 fb48 	bl	8004a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80043c4:	1d3b      	adds	r3, r7, #4
 80043c6:	220c      	movs	r2, #12
 80043c8:	4619      	mov	r1, r3
 80043ca:	4807      	ldr	r0, [pc, #28]	; (80043e8 <MX_TIM4_Init+0xc0>)
 80043cc:	f007 fca0 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80043d6:	f000 fb3d 	bl	8004a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80043da:	4803      	ldr	r0, [pc, #12]	; (80043e8 <MX_TIM4_Init+0xc0>)
 80043dc:	f001 f8b6 	bl	800554c <HAL_TIM_MspPostInit>

}
 80043e0:	bf00      	nop
 80043e2:	3728      	adds	r7, #40	; 0x28
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20039090 	.word	0x20039090
 80043ec:	40000800 	.word	0x40000800

080043f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043f6:	463b      	mov	r3, r7
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80043fe:	4b15      	ldr	r3, [pc, #84]	; (8004454 <MX_TIM6_Init+0x64>)
 8004400:	4a15      	ldr	r2, [pc, #84]	; (8004458 <MX_TIM6_Init+0x68>)
 8004402:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8004404:	4b13      	ldr	r3, [pc, #76]	; (8004454 <MX_TIM6_Init+0x64>)
 8004406:	2259      	movs	r2, #89	; 0x59
 8004408:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800440a:	4b12      	ldr	r3, [pc, #72]	; (8004454 <MX_TIM6_Init+0x64>)
 800440c:	2200      	movs	r2, #0
 800440e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004410:	4b10      	ldr	r3, [pc, #64]	; (8004454 <MX_TIM6_Init+0x64>)
 8004412:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004416:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004418:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <MX_TIM6_Init+0x64>)
 800441a:	2280      	movs	r2, #128	; 0x80
 800441c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800441e:	480d      	ldr	r0, [pc, #52]	; (8004454 <MX_TIM6_Init+0x64>)
 8004420:	f007 f9ec 	bl	800b7fc <HAL_TIM_Base_Init>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800442a:	f000 fb13 	bl	8004a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800442e:	2300      	movs	r3, #0
 8004430:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004432:	2300      	movs	r3, #0
 8004434:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004436:	463b      	mov	r3, r7
 8004438:	4619      	mov	r1, r3
 800443a:	4806      	ldr	r0, [pc, #24]	; (8004454 <MX_TIM6_Init+0x64>)
 800443c:	f007 ffcc 	bl	800c3d8 <HAL_TIMEx_MasterConfigSynchronization>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d001      	beq.n	800444a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004446:	f000 fb05 	bl	8004a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	2003932c 	.word	0x2003932c
 8004458:	40001000 	.word	0x40001000

0800445c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004462:	463b      	mov	r3, r7
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800446a:	4b14      	ldr	r3, [pc, #80]	; (80044bc <MX_TIM7_Init+0x60>)
 800446c:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <MX_TIM7_Init+0x64>)
 800446e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8004470:	4b12      	ldr	r3, [pc, #72]	; (80044bc <MX_TIM7_Init+0x60>)
 8004472:	22b3      	movs	r2, #179	; 0xb3
 8004474:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004476:	4b11      	ldr	r3, [pc, #68]	; (80044bc <MX_TIM7_Init+0x60>)
 8004478:	2200      	movs	r2, #0
 800447a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800447c:	4b0f      	ldr	r3, [pc, #60]	; (80044bc <MX_TIM7_Init+0x60>)
 800447e:	2231      	movs	r2, #49	; 0x31
 8004480:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004482:	4b0e      	ldr	r3, [pc, #56]	; (80044bc <MX_TIM7_Init+0x60>)
 8004484:	2280      	movs	r2, #128	; 0x80
 8004486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004488:	480c      	ldr	r0, [pc, #48]	; (80044bc <MX_TIM7_Init+0x60>)
 800448a:	f007 f9b7 	bl	800b7fc <HAL_TIM_Base_Init>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004494:	f000 fade 	bl	8004a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004498:	2300      	movs	r3, #0
 800449a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800449c:	2300      	movs	r3, #0
 800449e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80044a0:	463b      	mov	r3, r7
 80044a2:	4619      	mov	r1, r3
 80044a4:	4805      	ldr	r0, [pc, #20]	; (80044bc <MX_TIM7_Init+0x60>)
 80044a6:	f007 ff97 	bl	800c3d8 <HAL_TIMEx_MasterConfigSynchronization>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80044b0:	f000 fad0 	bl	8004a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	200394d0 	.word	0x200394d0
 80044c0:	40001400 	.word	0x40001400

080044c4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08c      	sub	sp, #48	; 0x30
 80044c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80044ca:	f107 030c 	add.w	r3, r7, #12
 80044ce:	2224      	movs	r2, #36	; 0x24
 80044d0:	2100      	movs	r1, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f00e fc70 	bl	8012db8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044d8:	1d3b      	adds	r3, r7, #4
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80044e0:	4b22      	ldr	r3, [pc, #136]	; (800456c <MX_TIM8_Init+0xa8>)
 80044e2:	4a23      	ldr	r2, [pc, #140]	; (8004570 <MX_TIM8_Init+0xac>)
 80044e4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80044e6:	4b21      	ldr	r3, [pc, #132]	; (800456c <MX_TIM8_Init+0xa8>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80044ec:	4b1f      	ldr	r3, [pc, #124]	; (800456c <MX_TIM8_Init+0xa8>)
 80044ee:	2210      	movs	r2, #16
 80044f0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80044f2:	4b1e      	ldr	r3, [pc, #120]	; (800456c <MX_TIM8_Init+0xa8>)
 80044f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044f8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044fa:	4b1c      	ldr	r3, [pc, #112]	; (800456c <MX_TIM8_Init+0xa8>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004500:	4b1a      	ldr	r3, [pc, #104]	; (800456c <MX_TIM8_Init+0xa8>)
 8004502:	2200      	movs	r2, #0
 8004504:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004506:	4b19      	ldr	r3, [pc, #100]	; (800456c <MX_TIM8_Init+0xa8>)
 8004508:	2200      	movs	r2, #0
 800450a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800450c:	2303      	movs	r3, #3
 800450e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004510:	2300      	movs	r3, #0
 8004512:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004514:	2301      	movs	r3, #1
 8004516:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004518:	2300      	movs	r3, #0
 800451a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004520:	2300      	movs	r3, #0
 8004522:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004524:	2301      	movs	r3, #1
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004528:	2300      	movs	r3, #0
 800452a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800452c:	2300      	movs	r3, #0
 800452e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004530:	f107 030c 	add.w	r3, r7, #12
 8004534:	4619      	mov	r1, r3
 8004536:	480d      	ldr	r0, [pc, #52]	; (800456c <MX_TIM8_Init+0xa8>)
 8004538:	f007 fa18 	bl	800b96c <HAL_TIM_Encoder_Init>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004542:	f000 fa87 	bl	8004a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004546:	2300      	movs	r3, #0
 8004548:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800454a:	2300      	movs	r3, #0
 800454c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800454e:	1d3b      	adds	r3, r7, #4
 8004550:	4619      	mov	r1, r3
 8004552:	4806      	ldr	r0, [pc, #24]	; (800456c <MX_TIM8_Init+0xa8>)
 8004554:	f007 ff40 	bl	800c3d8 <HAL_TIMEx_MasterConfigSynchronization>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800455e:	f000 fa79 	bl	8004a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004562:	bf00      	nop
 8004564:	3730      	adds	r7, #48	; 0x30
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20039050 	.word	0x20039050
 8004570:	40010400 	.word	0x40010400

08004574 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800457a:	1d3b      	adds	r3, r7, #4
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	609a      	str	r2, [r3, #8]
 8004584:	60da      	str	r2, [r3, #12]
 8004586:	611a      	str	r2, [r3, #16]
 8004588:	615a      	str	r2, [r3, #20]
 800458a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800458c:	4b1e      	ldr	r3, [pc, #120]	; (8004608 <MX_TIM10_Init+0x94>)
 800458e:	4a1f      	ldr	r2, [pc, #124]	; (800460c <MX_TIM10_Init+0x98>)
 8004590:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004592:	4b1d      	ldr	r3, [pc, #116]	; (8004608 <MX_TIM10_Init+0x94>)
 8004594:	2200      	movs	r2, #0
 8004596:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004598:	4b1b      	ldr	r3, [pc, #108]	; (8004608 <MX_TIM10_Init+0x94>)
 800459a:	2200      	movs	r2, #0
 800459c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800459e:	4b1a      	ldr	r3, [pc, #104]	; (8004608 <MX_TIM10_Init+0x94>)
 80045a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045a4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045a6:	4b18      	ldr	r3, [pc, #96]	; (8004608 <MX_TIM10_Init+0x94>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045ac:	4b16      	ldr	r3, [pc, #88]	; (8004608 <MX_TIM10_Init+0x94>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80045b2:	4815      	ldr	r0, [pc, #84]	; (8004608 <MX_TIM10_Init+0x94>)
 80045b4:	f007 f922 	bl	800b7fc <HAL_TIM_Base_Init>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80045be:	f000 fa49 	bl	8004a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80045c2:	4811      	ldr	r0, [pc, #68]	; (8004608 <MX_TIM10_Init+0x94>)
 80045c4:	f007 f969 	bl	800b89a <HAL_TIM_PWM_Init>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80045ce:	f000 fa41 	bl	8004a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045d2:	2360      	movs	r3, #96	; 0x60
 80045d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045de:	2300      	movs	r3, #0
 80045e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045e2:	1d3b      	adds	r3, r7, #4
 80045e4:	2200      	movs	r2, #0
 80045e6:	4619      	mov	r1, r3
 80045e8:	4807      	ldr	r0, [pc, #28]	; (8004608 <MX_TIM10_Init+0x94>)
 80045ea:	f007 fb91 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80045f4:	f000 fa2e 	bl	8004a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80045f8:	4803      	ldr	r0, [pc, #12]	; (8004608 <MX_TIM10_Init+0x94>)
 80045fa:	f000 ffa7 	bl	800554c <HAL_TIM_MspPostInit>

}
 80045fe:	bf00      	nop
 8004600:	3720      	adds	r7, #32
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	2003916c 	.word	0x2003916c
 800460c:	40014400 	.word	0x40014400

08004610 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004616:	1d3b      	adds	r3, r7, #4
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	605a      	str	r2, [r3, #4]
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	60da      	str	r2, [r3, #12]
 8004622:	611a      	str	r2, [r3, #16]
 8004624:	615a      	str	r2, [r3, #20]
 8004626:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004628:	4b1e      	ldr	r3, [pc, #120]	; (80046a4 <MX_TIM11_Init+0x94>)
 800462a:	4a1f      	ldr	r2, [pc, #124]	; (80046a8 <MX_TIM11_Init+0x98>)
 800462c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800462e:	4b1d      	ldr	r3, [pc, #116]	; (80046a4 <MX_TIM11_Init+0x94>)
 8004630:	2200      	movs	r2, #0
 8004632:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004634:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <MX_TIM11_Init+0x94>)
 8004636:	2200      	movs	r2, #0
 8004638:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800463a:	4b1a      	ldr	r3, [pc, #104]	; (80046a4 <MX_TIM11_Init+0x94>)
 800463c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004640:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004642:	4b18      	ldr	r3, [pc, #96]	; (80046a4 <MX_TIM11_Init+0x94>)
 8004644:	2200      	movs	r2, #0
 8004646:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004648:	4b16      	ldr	r3, [pc, #88]	; (80046a4 <MX_TIM11_Init+0x94>)
 800464a:	2200      	movs	r2, #0
 800464c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800464e:	4815      	ldr	r0, [pc, #84]	; (80046a4 <MX_TIM11_Init+0x94>)
 8004650:	f007 f8d4 	bl	800b7fc <HAL_TIM_Base_Init>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800465a:	f000 f9fb 	bl	8004a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800465e:	4811      	ldr	r0, [pc, #68]	; (80046a4 <MX_TIM11_Init+0x94>)
 8004660:	f007 f91b 	bl	800b89a <HAL_TIM_PWM_Init>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800466a:	f000 f9f3 	bl	8004a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800466e:	2360      	movs	r3, #96	; 0x60
 8004670:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800467e:	1d3b      	adds	r3, r7, #4
 8004680:	2200      	movs	r2, #0
 8004682:	4619      	mov	r1, r3
 8004684:	4807      	ldr	r0, [pc, #28]	; (80046a4 <MX_TIM11_Init+0x94>)
 8004686:	f007 fb43 	bl	800bd10 <HAL_TIM_PWM_ConfigChannel>
 800468a:	4603      	mov	r3, r0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004690:	f000 f9e0 	bl	8004a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004694:	4803      	ldr	r0, [pc, #12]	; (80046a4 <MX_TIM11_Init+0x94>)
 8004696:	f000 ff59 	bl	800554c <HAL_TIM_MspPostInit>

}
 800469a:	bf00      	nop
 800469c:	3720      	adds	r7, #32
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	2003928c 	.word	0x2003928c
 80046a8:	40014800 	.word	0x40014800

080046ac <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80046b0:	4b0e      	ldr	r3, [pc, #56]	; (80046ec <MX_TIM13_Init+0x40>)
 80046b2:	4a0f      	ldr	r2, [pc, #60]	; (80046f0 <MX_TIM13_Init+0x44>)
 80046b4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80046b6:	4b0d      	ldr	r3, [pc, #52]	; (80046ec <MX_TIM13_Init+0x40>)
 80046b8:	2259      	movs	r2, #89	; 0x59
 80046ba:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046bc:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <MX_TIM13_Init+0x40>)
 80046be:	2200      	movs	r2, #0
 80046c0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <MX_TIM13_Init+0x40>)
 80046c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80046c8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046ca:	4b08      	ldr	r3, [pc, #32]	; (80046ec <MX_TIM13_Init+0x40>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80046d0:	4b06      	ldr	r3, [pc, #24]	; (80046ec <MX_TIM13_Init+0x40>)
 80046d2:	2280      	movs	r2, #128	; 0x80
 80046d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80046d6:	4805      	ldr	r0, [pc, #20]	; (80046ec <MX_TIM13_Init+0x40>)
 80046d8:	f007 f890 	bl	800b7fc <HAL_TIM_Base_Init>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80046e2:	f000 f9b7 	bl	8004a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80046e6:	bf00      	nop
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	2003924c 	.word	0x2003924c
 80046f0:	40001c00 	.word	0x40001c00

080046f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80046f8:	4b11      	ldr	r3, [pc, #68]	; (8004740 <MX_USART2_UART_Init+0x4c>)
 80046fa:	4a12      	ldr	r2, [pc, #72]	; (8004744 <MX_USART2_UART_Init+0x50>)
 80046fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80046fe:	4b10      	ldr	r3, [pc, #64]	; (8004740 <MX_USART2_UART_Init+0x4c>)
 8004700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004704:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004706:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <MX_USART2_UART_Init+0x4c>)
 8004708:	2200      	movs	r2, #0
 800470a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800470c:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <MX_USART2_UART_Init+0x4c>)
 800470e:	2200      	movs	r2, #0
 8004710:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004712:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <MX_USART2_UART_Init+0x4c>)
 8004714:	2200      	movs	r2, #0
 8004716:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004718:	4b09      	ldr	r3, [pc, #36]	; (8004740 <MX_USART2_UART_Init+0x4c>)
 800471a:	220c      	movs	r2, #12
 800471c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800471e:	4b08      	ldr	r3, [pc, #32]	; (8004740 <MX_USART2_UART_Init+0x4c>)
 8004720:	2200      	movs	r2, #0
 8004722:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004724:	4b06      	ldr	r3, [pc, #24]	; (8004740 <MX_USART2_UART_Init+0x4c>)
 8004726:	2200      	movs	r2, #0
 8004728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800472a:	4805      	ldr	r0, [pc, #20]	; (8004740 <MX_USART2_UART_Init+0x4c>)
 800472c:	f007 ff36 	bl	800c59c <HAL_UART_Init>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004736:	f000 f98d 	bl	8004a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800473a:	bf00      	nop
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20039430 	.word	0x20039430
 8004744:	40004400 	.word	0x40004400

08004748 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800474e:	2300      	movs	r3, #0
 8004750:	607b      	str	r3, [r7, #4]
 8004752:	4b14      	ldr	r3, [pc, #80]	; (80047a4 <MX_DMA_Init+0x5c>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	4a13      	ldr	r2, [pc, #76]	; (80047a4 <MX_DMA_Init+0x5c>)
 8004758:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800475c:	6313      	str	r3, [r2, #48]	; 0x30
 800475e:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <MX_DMA_Init+0x5c>)
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004766:	607b      	str	r3, [r7, #4]
 8004768:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800476a:	2200      	movs	r2, #0
 800476c:	2100      	movs	r1, #0
 800476e:	203a      	movs	r0, #58	; 0x3a
 8004770:	f002 fbf7 	bl	8006f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004774:	203a      	movs	r0, #58	; 0x3a
 8004776:	f002 fc10 	bl	8006f9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800477a:	2200      	movs	r2, #0
 800477c:	2100      	movs	r1, #0
 800477e:	203b      	movs	r0, #59	; 0x3b
 8004780:	f002 fbef 	bl	8006f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004784:	203b      	movs	r0, #59	; 0x3b
 8004786:	f002 fc08 	bl	8006f9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800478a:	2200      	movs	r2, #0
 800478c:	2100      	movs	r1, #0
 800478e:	2045      	movs	r0, #69	; 0x45
 8004790:	f002 fbe7 	bl	8006f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004794:	2045      	movs	r0, #69	; 0x45
 8004796:	f002 fc00 	bl	8006f9a <HAL_NVIC_EnableIRQ>

}
 800479a:	bf00      	nop
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	40023800 	.word	0x40023800

080047a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08c      	sub	sp, #48	; 0x30
 80047ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047ae:	f107 031c 	add.w	r3, r7, #28
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	605a      	str	r2, [r3, #4]
 80047b8:	609a      	str	r2, [r3, #8]
 80047ba:	60da      	str	r2, [r3, #12]
 80047bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80047be:	2300      	movs	r3, #0
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	4b9c      	ldr	r3, [pc, #624]	; (8004a34 <MX_GPIO_Init+0x28c>)
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	4a9b      	ldr	r2, [pc, #620]	; (8004a34 <MX_GPIO_Init+0x28c>)
 80047c8:	f043 0310 	orr.w	r3, r3, #16
 80047cc:	6313      	str	r3, [r2, #48]	; 0x30
 80047ce:	4b99      	ldr	r3, [pc, #612]	; (8004a34 <MX_GPIO_Init+0x28c>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	61bb      	str	r3, [r7, #24]
 80047d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	4b95      	ldr	r3, [pc, #596]	; (8004a34 <MX_GPIO_Init+0x28c>)
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e2:	4a94      	ldr	r2, [pc, #592]	; (8004a34 <MX_GPIO_Init+0x28c>)
 80047e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047e8:	6313      	str	r3, [r2, #48]	; 0x30
 80047ea:	4b92      	ldr	r3, [pc, #584]	; (8004a34 <MX_GPIO_Init+0x28c>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f2:	617b      	str	r3, [r7, #20]
 80047f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047f6:	2300      	movs	r3, #0
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	4b8e      	ldr	r3, [pc, #568]	; (8004a34 <MX_GPIO_Init+0x28c>)
 80047fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fe:	4a8d      	ldr	r2, [pc, #564]	; (8004a34 <MX_GPIO_Init+0x28c>)
 8004800:	f043 0304 	orr.w	r3, r3, #4
 8004804:	6313      	str	r3, [r2, #48]	; 0x30
 8004806:	4b8b      	ldr	r3, [pc, #556]	; (8004a34 <MX_GPIO_Init+0x28c>)
 8004808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	613b      	str	r3, [r7, #16]
 8004810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	4b87      	ldr	r3, [pc, #540]	; (8004a34 <MX_GPIO_Init+0x28c>)
 8004818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481a:	4a86      	ldr	r2, [pc, #536]	; (8004a34 <MX_GPIO_Init+0x28c>)
 800481c:	f043 0301 	orr.w	r3, r3, #1
 8004820:	6313      	str	r3, [r2, #48]	; 0x30
 8004822:	4b84      	ldr	r3, [pc, #528]	; (8004a34 <MX_GPIO_Init+0x28c>)
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
 800482c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800482e:	2300      	movs	r3, #0
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	4b80      	ldr	r3, [pc, #512]	; (8004a34 <MX_GPIO_Init+0x28c>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	4a7f      	ldr	r2, [pc, #508]	; (8004a34 <MX_GPIO_Init+0x28c>)
 8004838:	f043 0302 	orr.w	r3, r3, #2
 800483c:	6313      	str	r3, [r2, #48]	; 0x30
 800483e:	4b7d      	ldr	r3, [pc, #500]	; (8004a34 <MX_GPIO_Init+0x28c>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	60bb      	str	r3, [r7, #8]
 8004848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800484a:	2300      	movs	r3, #0
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	4b79      	ldr	r3, [pc, #484]	; (8004a34 <MX_GPIO_Init+0x28c>)
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	4a78      	ldr	r2, [pc, #480]	; (8004a34 <MX_GPIO_Init+0x28c>)
 8004854:	f043 0308 	orr.w	r3, r3, #8
 8004858:	6313      	str	r3, [r2, #48]	; 0x30
 800485a:	4b76      	ldr	r3, [pc, #472]	; (8004a34 <MX_GPIO_Init+0x28c>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	f003 0308 	and.w	r3, r3, #8
 8004862:	607b      	str	r3, [r7, #4]
 8004864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004866:	2200      	movs	r2, #0
 8004868:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800486c:	4872      	ldr	r0, [pc, #456]	; (8004a38 <MX_GPIO_Init+0x290>)
 800486e:	f003 f90d 	bl	8007a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004872:	2200      	movs	r2, #0
 8004874:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004878:	4870      	ldr	r0, [pc, #448]	; (8004a3c <MX_GPIO_Init+0x294>)
 800487a:	f003 f907 	bl	8007a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 800487e:	2200      	movs	r2, #0
 8004880:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004884:	486e      	ldr	r0, [pc, #440]	; (8004a40 <MX_GPIO_Init+0x298>)
 8004886:	f003 f901 	bl	8007a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800488a:	2200      	movs	r2, #0
 800488c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004890:	486c      	ldr	r0, [pc, #432]	; (8004a44 <MX_GPIO_Init+0x29c>)
 8004892:	f003 f8fb 	bl	8007a8c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004896:	2304      	movs	r3, #4
 8004898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800489a:	4b6b      	ldr	r3, [pc, #428]	; (8004a48 <MX_GPIO_Init+0x2a0>)
 800489c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048a2:	f107 031c 	add.w	r3, r7, #28
 80048a6:	4619      	mov	r1, r3
 80048a8:	4863      	ldr	r0, [pc, #396]	; (8004a38 <MX_GPIO_Init+0x290>)
 80048aa:	f002 ff2d 	bl	8007708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80048ae:	230f      	movs	r3, #15
 80048b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048b2:	2303      	movs	r3, #3
 80048b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b6:	2300      	movs	r3, #0
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048ba:	f107 031c 	add.w	r3, r7, #28
 80048be:	4619      	mov	r1, r3
 80048c0:	4862      	ldr	r0, [pc, #392]	; (8004a4c <MX_GPIO_Init+0x2a4>)
 80048c2:	f002 ff21 	bl	8007708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80048c6:	23e1      	movs	r3, #225	; 0xe1
 80048c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048ca:	2303      	movs	r3, #3
 80048cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ce:	2300      	movs	r3, #0
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d2:	f107 031c 	add.w	r3, r7, #28
 80048d6:	4619      	mov	r1, r3
 80048d8:	485a      	ldr	r0, [pc, #360]	; (8004a44 <MX_GPIO_Init+0x29c>)
 80048da:	f002 ff15 	bl	8007708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80048de:	2303      	movs	r3, #3
 80048e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048e2:	2303      	movs	r3, #3
 80048e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e6:	2300      	movs	r3, #0
 80048e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048ea:	f107 031c 	add.w	r3, r7, #28
 80048ee:	4619      	mov	r1, r3
 80048f0:	4852      	ldr	r0, [pc, #328]	; (8004a3c <MX_GPIO_Init+0x294>)
 80048f2:	f002 ff09 	bl	8007708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80048f6:	2304      	movs	r3, #4
 80048f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048fa:	2300      	movs	r3, #0
 80048fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048fe:	2301      	movs	r3, #1
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004902:	f107 031c 	add.w	r3, r7, #28
 8004906:	4619      	mov	r1, r3
 8004908:	484c      	ldr	r0, [pc, #304]	; (8004a3c <MX_GPIO_Init+0x294>)
 800490a:	f002 fefd 	bl	8007708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800490e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8004912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004914:	2300      	movs	r3, #0
 8004916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004918:	2301      	movs	r3, #1
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800491c:	f107 031c 	add.w	r3, r7, #28
 8004920:	4619      	mov	r1, r3
 8004922:	4845      	ldr	r0, [pc, #276]	; (8004a38 <MX_GPIO_Init+0x290>)
 8004924:	f002 fef0 	bl	8007708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004928:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800492c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800492e:	2301      	movs	r3, #1
 8004930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004932:	2300      	movs	r3, #0
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004936:	2300      	movs	r3, #0
 8004938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800493a:	f107 031c 	add.w	r3, r7, #28
 800493e:	4619      	mov	r1, r3
 8004940:	483d      	ldr	r0, [pc, #244]	; (8004a38 <MX_GPIO_Init+0x290>)
 8004942:	f002 fee1 	bl	8007708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004946:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800494a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800494c:	2301      	movs	r3, #1
 800494e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004950:	2300      	movs	r3, #0
 8004952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004954:	2300      	movs	r3, #0
 8004956:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004958:	f107 031c 	add.w	r3, r7, #28
 800495c:	4619      	mov	r1, r3
 800495e:	4837      	ldr	r0, [pc, #220]	; (8004a3c <MX_GPIO_Init+0x294>)
 8004960:	f002 fed2 	bl	8007708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004964:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800496a:	4b39      	ldr	r3, [pc, #228]	; (8004a50 <MX_GPIO_Init+0x2a8>)
 800496c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496e:	2300      	movs	r3, #0
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004972:	f107 031c 	add.w	r3, r7, #28
 8004976:	4619      	mov	r1, r3
 8004978:	4831      	ldr	r0, [pc, #196]	; (8004a40 <MX_GPIO_Init+0x298>)
 800497a:	f002 fec5 	bl	8007708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800497e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004984:	2301      	movs	r3, #1
 8004986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004988:	2300      	movs	r3, #0
 800498a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800498c:	2300      	movs	r3, #0
 800498e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004990:	f107 031c 	add.w	r3, r7, #28
 8004994:	4619      	mov	r1, r3
 8004996:	482a      	ldr	r0, [pc, #168]	; (8004a40 <MX_GPIO_Init+0x298>)
 8004998:	f002 feb6 	bl	8007708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800499c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049a2:	2301      	movs	r3, #1
 80049a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049a6:	2301      	movs	r3, #1
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049aa:	2300      	movs	r3, #0
 80049ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049ae:	f107 031c 	add.w	r3, r7, #28
 80049b2:	4619      	mov	r1, r3
 80049b4:	4822      	ldr	r0, [pc, #136]	; (8004a40 <MX_GPIO_Init+0x298>)
 80049b6:	f002 fea7 	bl	8007708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80049ba:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80049be:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049c0:	2301      	movs	r3, #1
 80049c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049c8:	2300      	movs	r3, #0
 80049ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049cc:	f107 031c 	add.w	r3, r7, #28
 80049d0:	4619      	mov	r1, r3
 80049d2:	481c      	ldr	r0, [pc, #112]	; (8004a44 <MX_GPIO_Init+0x29c>)
 80049d4:	f002 fe98 	bl	8007708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80049d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049de:	2300      	movs	r3, #0
 80049e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e2:	2300      	movs	r3, #0
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049e6:	f107 031c 	add.w	r3, r7, #28
 80049ea:	4619      	mov	r1, r3
 80049ec:	4815      	ldr	r0, [pc, #84]	; (8004a44 <MX_GPIO_Init+0x29c>)
 80049ee:	f002 fe8b 	bl	8007708 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80049f2:	239b      	movs	r3, #155	; 0x9b
 80049f4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049f6:	2300      	movs	r3, #0
 80049f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049fa:	2301      	movs	r3, #1
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049fe:	f107 031c 	add.w	r3, r7, #28
 8004a02:	4619      	mov	r1, r3
 8004a04:	480e      	ldr	r0, [pc, #56]	; (8004a40 <MX_GPIO_Init+0x298>)
 8004a06:	f002 fe7f 	bl	8007708 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	2008      	movs	r0, #8
 8004a10:	f002 faa7 	bl	8006f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004a14:	2008      	movs	r0, #8
 8004a16:	f002 fac0 	bl	8006f9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	2017      	movs	r0, #23
 8004a20:	f002 fa9f 	bl	8006f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004a24:	2017      	movs	r0, #23
 8004a26:	f002 fab8 	bl	8006f9a <HAL_NVIC_EnableIRQ>

}
 8004a2a:	bf00      	nop
 8004a2c:	3730      	adds	r7, #48	; 0x30
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	40023800 	.word	0x40023800
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	40020400 	.word	0x40020400
 8004a40:	40020c00 	.word	0x40020c00
 8004a44:	40020000 	.word	0x40020000
 8004a48:	10310000 	.word	0x10310000
 8004a4c:	40020800 	.word	0x40020800
 8004a50:	10110000 	.word	0x10110000

08004a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a58:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a5a:	e7fe      	b.n	8004a5a <Error_Handler+0x6>

08004a5c <CalcError1>:
RT_MODEL *const rtM = &rtM_;
static void CalcError1(void);

/* Output and update for atomic system: '<S1>/CalcError1' */
static void CalcError1(void)
{
 8004a5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a60:	b088      	sub	sp, #32
 8004a62:	af00      	add	r7, sp, #0

  /* Sum: '<S2>/Add1' incorporates:
   *  Inport: '<Root>/Py'
   *  Inport: '<Root>/y_cur'
   */
  rtb_Add1 = rtU.target_y - rtU.y;
 8004a64:	4b3d      	ldr	r3, [pc, #244]	; (8004b5c <CalcError1+0x100>)
 8004a66:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004a6a:	4b3c      	ldr	r3, [pc, #240]	; (8004b5c <CalcError1+0x100>)
 8004a6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a70:	f7fb fc22 	bl	80002b8 <__aeabi_dsub>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	e9c7 2306 	strd	r2, r3, [r7, #24]

  /* Sum: '<S2>/Add2' incorporates:
   *  Inport: '<Root>/Px'
   *  Inport: '<Root>/x_cur'
   */
  rtb_Add2 = rtU.target_x - rtU.x;
 8004a7c:	4b37      	ldr	r3, [pc, #220]	; (8004b5c <CalcError1+0x100>)
 8004a7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a82:	4b36      	ldr	r3, [pc, #216]	; (8004b5c <CalcError1+0x100>)
 8004a84:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004a88:	f7fb fc16 	bl	80002b8 <__aeabi_dsub>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	e9c7 2304 	strd	r2, r3, [r7, #16]

  /* Trigonometry: '<S2>/Trigonometric Function1' incorporates:
   *  Inport: '<Root>/th_cur'
   *  Trigonometry: '<S2>/Trigonometric Function2'
   */
  Add4_tmp = sin(rtU.th_cur);
 8004a94:	4b31      	ldr	r3, [pc, #196]	; (8004b5c <CalcError1+0x100>)
 8004a96:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8004a9a:	eeb0 0a47 	vmov.f32	s0, s14
 8004a9e:	eef0 0a67 	vmov.f32	s1, s15
 8004aa2:	f00d f83d 	bl	8011b20 <sin>
 8004aa6:	ed87 0b02 	vstr	d0, [r7, #8]

  /* Trigonometry: '<S2>/Trigonometric Function4' incorporates:
   *  Inport: '<Root>/th_cur'
   *  Trigonometry: '<S2>/Trigonometric Function3'
   */
  Add4_tmp_0 = cos(rtU.th_cur);
 8004aaa:	4b2c      	ldr	r3, [pc, #176]	; (8004b5c <CalcError1+0x100>)
 8004aac:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8004ab0:	eeb0 0a47 	vmov.f32	s0, s14
 8004ab4:	eef0 0a67 	vmov.f32	s1, s15
 8004ab8:	f00c ffee 	bl	8011a98 <cos>
 8004abc:	ed87 0b00 	vstr	d0, [r7]
   *  Product: '<S2>/Product'
   *  Product: '<S2>/Product1'
   *  Trigonometry: '<S2>/Trigonometric Function1'
   *  Trigonometry: '<S2>/Trigonometric Function4'
   */
  rtDW.Add4 = rtb_Add2 * Add4_tmp_0 + rtb_Add1 * Add4_tmp;
 8004ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ac4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ac8:	f7fb fdae 	bl	8000628 <__aeabi_dmul>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4690      	mov	r8, r2
 8004ad2:	4699      	mov	r9, r3
 8004ad4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ad8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004adc:	f7fb fda4 	bl	8000628 <__aeabi_dmul>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4640      	mov	r0, r8
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	f7fb fbe8 	bl	80002bc <__adddf3>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	491b      	ldr	r1, [pc, #108]	; (8004b60 <CalcError1+0x104>)
 8004af2:	e9c1 2300 	strd	r2, r3, [r1]
  /* Sum: '<S2>/Add5' incorporates:
   *  Gain: '<S2>/Gain4'
   *  Product: '<S2>/Product2'
   *  Product: '<S2>/Product3'
   */
  rtDW.Add5 = rtb_Add2 * -Add4_tmp + rtb_Add1 * Add4_tmp_0;
 8004af6:	68bc      	ldr	r4, [r7, #8]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004afe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b02:	4620      	mov	r0, r4
 8004b04:	4629      	mov	r1, r5
 8004b06:	f7fb fd8f 	bl	8000628 <__aeabi_dmul>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	4625      	mov	r5, r4
 8004b10:	461c      	mov	r4, r3
 8004b12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b1a:	f7fb fd85 	bl	8000628 <__aeabi_dmul>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4620      	mov	r0, r4
 8004b24:	4629      	mov	r1, r5
 8004b26:	f7fb fbc9 	bl	80002bc <__adddf3>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	460c      	mov	r4, r1
 8004b2e:	4a0c      	ldr	r2, [pc, #48]	; (8004b60 <CalcError1+0x104>)
 8004b30:	e9c2 3402 	strd	r3, r4, [r2, #8]

  /* Sum: '<S2>/Add3' incorporates:
   *  Inport: '<Root>/Pth'
   *  Inport: '<Root>/th_cur'
   */
  rtDW.Add3 = rtU.th - rtU.th_cur;
 8004b34:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <CalcError1+0x100>)
 8004b36:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004b3a:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <CalcError1+0x100>)
 8004b3c:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004b40:	461a      	mov	r2, r3
 8004b42:	4623      	mov	r3, r4
 8004b44:	f7fb fbb8 	bl	80002b8 <__aeabi_dsub>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	4a04      	ldr	r2, [pc, #16]	; (8004b60 <CalcError1+0x104>)
 8004b4e:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004b52:	bf00      	nop
 8004b54:	3720      	adds	r7, #32
 8004b56:	46bd      	mov	sp, r7
 8004b58:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b5c:	20039520 	.word	0x20039520
 8004b60:	20039550 	.word	0x20039550

08004b64 <path_following_step>:

/* Model step function */
void path_following_step(void)
{
 8004b64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004b68:	b08a      	sub	sp, #40	; 0x28
 8004b6a:	af00      	add	r7, sp, #0
   *  Inport: '<Root>/Px'
   *
   * About '<S5>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_TSamp = rtU.target_x * 1000.0;
 8004b6c:	4b7a      	ldr	r3, [pc, #488]	; (8004d58 <path_following_step+0x1f4>)
 8004b6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b72:	f04f 0200 	mov.w	r2, #0
 8004b76:	4b79      	ldr	r3, [pc, #484]	; (8004d5c <path_following_step+0x1f8>)
 8004b78:	f7fb fd56 	bl	8000628 <__aeabi_dmul>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	460c      	mov	r4, r1
 8004b80:	e9c7 3408 	strd	r3, r4, [r7, #32]
   *
   * Block description for '<S5>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Uk1 = rtb_TSamp - rtDW.UD_DSTATE;
 8004b84:	4b76      	ldr	r3, [pc, #472]	; (8004d60 <path_following_step+0x1fc>)
 8004b86:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	4623      	mov	r3, r4
 8004b8e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004b92:	f7fb fb91 	bl	80002b8 <__aeabi_dsub>
 8004b96:	4603      	mov	r3, r0
 8004b98:	460c      	mov	r4, r1
 8004b9a:	e9c7 3406 	strd	r3, r4, [r7, #24]
  mon1 = rtb_TSamp;
 8004b9e:	4a71      	ldr	r2, [pc, #452]	; (8004d64 <path_following_step+0x200>)
 8004ba0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004ba4:	e9c2 3400 	strd	r3, r4, [r2]
  mon2 = rtDW.UD_DSTATE;
 8004ba8:	4b6d      	ldr	r3, [pc, #436]	; (8004d60 <path_following_step+0x1fc>)
 8004baa:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8004bae:	4a6e      	ldr	r2, [pc, #440]	; (8004d68 <path_following_step+0x204>)
 8004bb0:	e9c2 3400 	strd	r3, r4, [r2]

  /* Math: '<S1>/Square' */
  rtb_Square = rtb_Uk1 * rtb_Uk1;
 8004bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bb8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004bbc:	f7fb fd34 	bl	8000628 <__aeabi_dmul>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	e9c7 3404 	strd	r3, r4, [r7, #16]
   *  Inport: '<Root>/Py'
   *
   * About '<S6>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_TSamp_gl = rtU.target_y * 1000.0;
 8004bc8:	4b63      	ldr	r3, [pc, #396]	; (8004d58 <path_following_step+0x1f4>)
 8004bca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	4b62      	ldr	r3, [pc, #392]	; (8004d5c <path_following_step+0x1f8>)
 8004bd4:	f7fb fd28 	bl	8000628 <__aeabi_dmul>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	460c      	mov	r4, r1
 8004bdc:	e9c7 3402 	strd	r3, r4, [r7, #8]
   *
   * Block description for '<S6>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Uk1 = rtb_TSamp_gl - rtDW.UD_DSTATE_o;
 8004be0:	4b5f      	ldr	r3, [pc, #380]	; (8004d60 <path_following_step+0x1fc>)
 8004be2:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004be6:	461a      	mov	r2, r3
 8004be8:	4623      	mov	r3, r4
 8004bea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bee:	f7fb fb63 	bl	80002b8 <__aeabi_dsub>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	e9c7 3406 	strd	r3, r4, [r7, #24]

  /* Sqrt: '<S1>/Sqrt' incorporates:
   *  Math: '<S1>/Square1'
   *  Sum: '<S1>/Add5'
   */
  rtb_Uk1 = sqrt(rtb_Uk1 * rtb_Uk1 + rtb_Square);
 8004bfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bfe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c02:	f7fb fd11 	bl	8000628 <__aeabi_dmul>
 8004c06:	4603      	mov	r3, r0
 8004c08:	460c      	mov	r4, r1
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004c12:	f7fb fb53 	bl	80002bc <__adddf3>
 8004c16:	4603      	mov	r3, r0
 8004c18:	460c      	mov	r4, r1
 8004c1a:	ec44 3b17 	vmov	d7, r3, r4
 8004c1e:	eeb0 0a47 	vmov.f32	s0, s14
 8004c22:	eef0 0a67 	vmov.f32	s1, s15
 8004c26:	f00c ffc3 	bl	8011bb0 <sqrt>
 8004c2a:	ed87 0b06 	vstr	d0, [r7, #24]

  /* Outputs for Atomic SubSystem: '<S1>/CalcError1' */
  CalcError1();
 8004c2e:	f7ff ff15 	bl	8004a5c <CalcError1>
   *  Inport: '<Root>/Pth'
   *
   * About '<S4>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_Square = rtU.th * 1000.0;
 8004c32:	4b49      	ldr	r3, [pc, #292]	; (8004d58 <path_following_step+0x1f4>)
 8004c34:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	4b47      	ldr	r3, [pc, #284]	; (8004d5c <path_following_step+0x1f8>)
 8004c3e:	f7fb fcf3 	bl	8000628 <__aeabi_dmul>
 8004c42:	4603      	mov	r3, r0
 8004c44:	460c      	mov	r4, r1
 8004c46:	e9c7 3404 	strd	r3, r4, [r7, #16]
   *
   * Block description for '<S4>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Diff = rtb_Square - rtDW.UD_DSTATE_d;
 8004c4a:	4b45      	ldr	r3, [pc, #276]	; (8004d60 <path_following_step+0x1fc>)
 8004c4c:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004c50:	461a      	mov	r2, r3
 8004c52:	4623      	mov	r3, r4
 8004c54:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c58:	f7fb fb2e 	bl	80002b8 <__aeabi_dsub>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	460c      	mov	r4, r1
 8004c60:	e9c7 3400 	strd	r3, r4, [r7]
   *
   * Block description for '<S5>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE = rtb_TSamp;
 8004c64:	4a3e      	ldr	r2, [pc, #248]	; (8004d60 <path_following_step+0x1fc>)
 8004c66:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004c6a:	e9c2 3406 	strd	r3, r4, [r2, #24]
   *
   * Block description for '<S6>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE_o = rtb_TSamp_gl;
 8004c6e:	4a3c      	ldr	r2, [pc, #240]	; (8004d60 <path_following_step+0x1fc>)
 8004c70:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004c74:	e9c2 3408 	strd	r3, r4, [r2, #32]
   *
   * Block description for '<S4>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE_d = rtb_Square;
 8004c78:	4a39      	ldr	r2, [pc, #228]	; (8004d60 <path_following_step+0x1fc>)
 8004c7a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004c7e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
   *  Gain: '<S3>/Gain'
   *  Product: '<S3>/Product1'
   *  Sum: '<S3>/Add5'
   *  Trigonometry: '<S3>/Trigonometric Function2'
   */
  rtY.V_tar = rtParam.kx * rtDW.Add4 + cos(rtDW.Add3) * rtb_Uk1;
 8004c82:	4b3a      	ldr	r3, [pc, #232]	; (8004d6c <path_following_step+0x208>)
 8004c84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c88:	4b35      	ldr	r3, [pc, #212]	; (8004d60 <path_following_step+0x1fc>)
 8004c8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	4623      	mov	r3, r4
 8004c92:	f7fb fcc9 	bl	8000628 <__aeabi_dmul>
 8004c96:	4603      	mov	r3, r0
 8004c98:	460c      	mov	r4, r1
 8004c9a:	4625      	mov	r5, r4
 8004c9c:	461c      	mov	r4, r3
 8004c9e:	4b30      	ldr	r3, [pc, #192]	; (8004d60 <path_following_step+0x1fc>)
 8004ca0:	ed93 7b04 	vldr	d7, [r3, #16]
 8004ca4:	eeb0 0a47 	vmov.f32	s0, s14
 8004ca8:	eef0 0a67 	vmov.f32	s1, s15
 8004cac:	f00c fef4 	bl	8011a98 <cos>
 8004cb0:	ec51 0b10 	vmov	r0, r1, d0
 8004cb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cb8:	f7fb fcb6 	bl	8000628 <__aeabi_dmul>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	f7fb fafa 	bl	80002bc <__adddf3>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	460c      	mov	r4, r1
 8004ccc:	4a28      	ldr	r2, [pc, #160]	; (8004d70 <path_following_step+0x20c>)
 8004cce:	e9c2 3400 	strd	r3, r4, [r2]
   *  Product: '<S3>/Product2'
   *  Sum: '<S3>/Add1'
   *  Sum: '<S3>/Add2'
   *  Trigonometry: '<S3>/Trigonometric Function1'
   */
  rtY.tar = (rtParam.ky * rtDW.Add5 + rtParam.kt * sin(rtDW.Add3)) * rtb_Uk1 + rtb_Diff;
 8004cd2:	4b26      	ldr	r3, [pc, #152]	; (8004d6c <path_following_step+0x208>)
 8004cd4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004cd8:	4b21      	ldr	r3, [pc, #132]	; (8004d60 <path_following_step+0x1fc>)
 8004cda:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4623      	mov	r3, r4
 8004ce2:	f7fb fca1 	bl	8000628 <__aeabi_dmul>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	460c      	mov	r4, r1
 8004cea:	4698      	mov	r8, r3
 8004cec:	46a1      	mov	r9, r4
 8004cee:	4b1f      	ldr	r3, [pc, #124]	; (8004d6c <path_following_step+0x208>)
 8004cf0:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004cf4:	4b1a      	ldr	r3, [pc, #104]	; (8004d60 <path_following_step+0x1fc>)
 8004cf6:	ed93 7b04 	vldr	d7, [r3, #16]
 8004cfa:	eeb0 0a47 	vmov.f32	s0, s14
 8004cfe:	eef0 0a67 	vmov.f32	s1, s15
 8004d02:	f00c ff0d 	bl	8011b20 <sin>
 8004d06:	ec53 2b10 	vmov	r2, r3, d0
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	f7fb fc8b 	bl	8000628 <__aeabi_dmul>
 8004d12:	4603      	mov	r3, r0
 8004d14:	460c      	mov	r4, r1
 8004d16:	461a      	mov	r2, r3
 8004d18:	4623      	mov	r3, r4
 8004d1a:	4640      	mov	r0, r8
 8004d1c:	4649      	mov	r1, r9
 8004d1e:	f7fb facd 	bl	80002bc <__adddf3>
 8004d22:	4603      	mov	r3, r0
 8004d24:	460c      	mov	r4, r1
 8004d26:	4618      	mov	r0, r3
 8004d28:	4621      	mov	r1, r4
 8004d2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d2e:	f7fb fc7b 	bl	8000628 <__aeabi_dmul>
 8004d32:	4603      	mov	r3, r0
 8004d34:	460c      	mov	r4, r1
 8004d36:	4618      	mov	r0, r3
 8004d38:	4621      	mov	r1, r4
 8004d3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d3e:	f7fb fabd 	bl	80002bc <__adddf3>
 8004d42:	4603      	mov	r3, r0
 8004d44:	460c      	mov	r4, r1
 8004d46:	4a0a      	ldr	r2, [pc, #40]	; (8004d70 <path_following_step+0x20c>)
 8004d48:	e9c2 3402 	strd	r3, r4, [r2, #8]
  //mon2 = rtb_Diff;


  /* End of Outputs for SubSystem: '<S1>/ClacTarget_V��1' */
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}
 8004d4c:	bf00      	nop
 8004d4e:	3728      	adds	r7, #40	; 0x28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004d56:	bf00      	nop
 8004d58:	20039520 	.word	0x20039520
 8004d5c:	408f4000 	.word	0x408f4000
 8004d60:	20039550 	.word	0x20039550
 8004d64:	20039510 	.word	0x20039510
 8004d68:	20039518 	.word	0x20039518
 8004d6c:	20039590 	.word	0x20039590
 8004d70:	20039580 	.word	0x20039580

08004d74 <path_following_initialize>:

/* Model initialize function */
void path_following_initialize(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8004d78:	bf00      	nop
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	607b      	str	r3, [r7, #4]
 8004d8e:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <HAL_MspInit+0x4c>)
 8004d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d92:	4a0f      	ldr	r2, [pc, #60]	; (8004dd0 <HAL_MspInit+0x4c>)
 8004d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d98:	6453      	str	r3, [r2, #68]	; 0x44
 8004d9a:	4b0d      	ldr	r3, [pc, #52]	; (8004dd0 <HAL_MspInit+0x4c>)
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da2:	607b      	str	r3, [r7, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004da6:	2300      	movs	r3, #0
 8004da8:	603b      	str	r3, [r7, #0]
 8004daa:	4b09      	ldr	r3, [pc, #36]	; (8004dd0 <HAL_MspInit+0x4c>)
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	4a08      	ldr	r2, [pc, #32]	; (8004dd0 <HAL_MspInit+0x4c>)
 8004db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db4:	6413      	str	r3, [r2, #64]	; 0x40
 8004db6:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <HAL_MspInit+0x4c>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	603b      	str	r3, [r7, #0]
 8004dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	40023800 	.word	0x40023800

08004dd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08c      	sub	sp, #48	; 0x30
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ddc:	f107 031c 	add.w	r3, r7, #28
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	605a      	str	r2, [r3, #4]
 8004de6:	609a      	str	r2, [r3, #8]
 8004de8:	60da      	str	r2, [r3, #12]
 8004dea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a4a      	ldr	r2, [pc, #296]	; (8004f1c <HAL_ADC_MspInit+0x148>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	f040 808e 	bne.w	8004f14 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61bb      	str	r3, [r7, #24]
 8004dfc:	4b48      	ldr	r3, [pc, #288]	; (8004f20 <HAL_ADC_MspInit+0x14c>)
 8004dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e00:	4a47      	ldr	r2, [pc, #284]	; (8004f20 <HAL_ADC_MspInit+0x14c>)
 8004e02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e06:	6453      	str	r3, [r2, #68]	; 0x44
 8004e08:	4b45      	ldr	r3, [pc, #276]	; (8004f20 <HAL_ADC_MspInit+0x14c>)
 8004e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	4b41      	ldr	r3, [pc, #260]	; (8004f20 <HAL_ADC_MspInit+0x14c>)
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	4a40      	ldr	r2, [pc, #256]	; (8004f20 <HAL_ADC_MspInit+0x14c>)
 8004e1e:	f043 0304 	orr.w	r3, r3, #4
 8004e22:	6313      	str	r3, [r2, #48]	; 0x30
 8004e24:	4b3e      	ldr	r3, [pc, #248]	; (8004f20 <HAL_ADC_MspInit+0x14c>)
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e30:	2300      	movs	r3, #0
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	4b3a      	ldr	r3, [pc, #232]	; (8004f20 <HAL_ADC_MspInit+0x14c>)
 8004e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e38:	4a39      	ldr	r2, [pc, #228]	; (8004f20 <HAL_ADC_MspInit+0x14c>)
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8004e40:	4b37      	ldr	r3, [pc, #220]	; (8004f20 <HAL_ADC_MspInit+0x14c>)
 8004e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	4b33      	ldr	r3, [pc, #204]	; (8004f20 <HAL_ADC_MspInit+0x14c>)
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	4a32      	ldr	r2, [pc, #200]	; (8004f20 <HAL_ADC_MspInit+0x14c>)
 8004e56:	f043 0302 	orr.w	r3, r3, #2
 8004e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e5c:	4b30      	ldr	r3, [pc, #192]	; (8004f20 <HAL_ADC_MspInit+0x14c>)
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	60fb      	str	r3, [r7, #12]
 8004e66:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004e68:	230f      	movs	r3, #15
 8004e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e70:	2300      	movs	r3, #0
 8004e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e74:	f107 031c 	add.w	r3, r7, #28
 8004e78:	4619      	mov	r1, r3
 8004e7a:	482a      	ldr	r0, [pc, #168]	; (8004f24 <HAL_ADC_MspInit+0x150>)
 8004e7c:	f002 fc44 	bl	8007708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004e80:	23ff      	movs	r3, #255	; 0xff
 8004e82:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e84:	2303      	movs	r3, #3
 8004e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e8c:	f107 031c 	add.w	r3, r7, #28
 8004e90:	4619      	mov	r1, r3
 8004e92:	4825      	ldr	r0, [pc, #148]	; (8004f28 <HAL_ADC_MspInit+0x154>)
 8004e94:	f002 fc38 	bl	8007708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ea4:	f107 031c 	add.w	r3, r7, #28
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4820      	ldr	r0, [pc, #128]	; (8004f2c <HAL_ADC_MspInit+0x158>)
 8004eac:	f002 fc2c 	bl	8007708 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8004eb0:	4b1f      	ldr	r3, [pc, #124]	; (8004f30 <HAL_ADC_MspInit+0x15c>)
 8004eb2:	4a20      	ldr	r2, [pc, #128]	; (8004f34 <HAL_ADC_MspInit+0x160>)
 8004eb4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004eb6:	4b1e      	ldr	r3, [pc, #120]	; (8004f30 <HAL_ADC_MspInit+0x15c>)
 8004eb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ebc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ebe:	4b1c      	ldr	r3, [pc, #112]	; (8004f30 <HAL_ADC_MspInit+0x15c>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ec4:	4b1a      	ldr	r3, [pc, #104]	; (8004f30 <HAL_ADC_MspInit+0x15c>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004eca:	4b19      	ldr	r3, [pc, #100]	; (8004f30 <HAL_ADC_MspInit+0x15c>)
 8004ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ed0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004ed2:	4b17      	ldr	r3, [pc, #92]	; (8004f30 <HAL_ADC_MspInit+0x15c>)
 8004ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ed8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004eda:	4b15      	ldr	r3, [pc, #84]	; (8004f30 <HAL_ADC_MspInit+0x15c>)
 8004edc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ee0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004ee2:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <HAL_ADC_MspInit+0x15c>)
 8004ee4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ee8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004eea:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <HAL_ADC_MspInit+0x15c>)
 8004eec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ef0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ef2:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <HAL_ADC_MspInit+0x15c>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004ef8:	480d      	ldr	r0, [pc, #52]	; (8004f30 <HAL_ADC_MspInit+0x15c>)
 8004efa:	f002 f869 	bl	8006fd0 <HAL_DMA_Init>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8004f04:	f7ff fda6 	bl	8004a54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a09      	ldr	r2, [pc, #36]	; (8004f30 <HAL_ADC_MspInit+0x15c>)
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38
 8004f0e:	4a08      	ldr	r2, [pc, #32]	; (8004f30 <HAL_ADC_MspInit+0x15c>)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004f14:	bf00      	nop
 8004f16:	3730      	adds	r7, #48	; 0x30
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	40012100 	.word	0x40012100
 8004f20:	40023800 	.word	0x40023800
 8004f24:	40020800 	.word	0x40020800
 8004f28:	40020000 	.word	0x40020000
 8004f2c:	40020400 	.word	0x40020400
 8004f30:	20039470 	.word	0x20039470
 8004f34:	40026440 	.word	0x40026440

08004f38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08c      	sub	sp, #48	; 0x30
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f40:	f107 031c 	add.w	r3, r7, #28
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	605a      	str	r2, [r3, #4]
 8004f4a:	609a      	str	r2, [r3, #8]
 8004f4c:	60da      	str	r2, [r3, #12]
 8004f4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a32      	ldr	r2, [pc, #200]	; (8005020 <HAL_I2C_MspInit+0xe8>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d12c      	bne.n	8004fb4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	61bb      	str	r3, [r7, #24]
 8004f5e:	4b31      	ldr	r3, [pc, #196]	; (8005024 <HAL_I2C_MspInit+0xec>)
 8004f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f62:	4a30      	ldr	r2, [pc, #192]	; (8005024 <HAL_I2C_MspInit+0xec>)
 8004f64:	f043 0302 	orr.w	r3, r3, #2
 8004f68:	6313      	str	r3, [r2, #48]	; 0x30
 8004f6a:	4b2e      	ldr	r3, [pc, #184]	; (8005024 <HAL_I2C_MspInit+0xec>)
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	61bb      	str	r3, [r7, #24]
 8004f74:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f76:	23c0      	movs	r3, #192	; 0xc0
 8004f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f7a:	2312      	movs	r3, #18
 8004f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f82:	2303      	movs	r3, #3
 8004f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f86:	2304      	movs	r3, #4
 8004f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f8a:	f107 031c 	add.w	r3, r7, #28
 8004f8e:	4619      	mov	r1, r3
 8004f90:	4825      	ldr	r0, [pc, #148]	; (8005028 <HAL_I2C_MspInit+0xf0>)
 8004f92:	f002 fbb9 	bl	8007708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	4b22      	ldr	r3, [pc, #136]	; (8005024 <HAL_I2C_MspInit+0xec>)
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	4a21      	ldr	r2, [pc, #132]	; (8005024 <HAL_I2C_MspInit+0xec>)
 8004fa0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8004fa6:	4b1f      	ldr	r3, [pc, #124]	; (8005024 <HAL_I2C_MspInit+0xec>)
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004fb2:	e031      	b.n	8005018 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a1c      	ldr	r2, [pc, #112]	; (800502c <HAL_I2C_MspInit+0xf4>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d12c      	bne.n	8005018 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	4b18      	ldr	r3, [pc, #96]	; (8005024 <HAL_I2C_MspInit+0xec>)
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc6:	4a17      	ldr	r2, [pc, #92]	; (8005024 <HAL_I2C_MspInit+0xec>)
 8004fc8:	f043 0302 	orr.w	r3, r3, #2
 8004fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8004fce:	4b15      	ldr	r3, [pc, #84]	; (8005024 <HAL_I2C_MspInit+0xec>)
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	613b      	str	r3, [r7, #16]
 8004fd8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004fda:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fe0:	2312      	movs	r3, #18
 8004fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004fec:	2304      	movs	r3, #4
 8004fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ff0:	f107 031c 	add.w	r3, r7, #28
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	480c      	ldr	r0, [pc, #48]	; (8005028 <HAL_I2C_MspInit+0xf0>)
 8004ff8:	f002 fb86 	bl	8007708 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	4b08      	ldr	r3, [pc, #32]	; (8005024 <HAL_I2C_MspInit+0xec>)
 8005002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005004:	4a07      	ldr	r2, [pc, #28]	; (8005024 <HAL_I2C_MspInit+0xec>)
 8005006:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800500a:	6413      	str	r3, [r2, #64]	; 0x40
 800500c:	4b05      	ldr	r3, [pc, #20]	; (8005024 <HAL_I2C_MspInit+0xec>)
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005014:	60fb      	str	r3, [r7, #12]
 8005016:	68fb      	ldr	r3, [r7, #12]
}
 8005018:	bf00      	nop
 800501a:	3730      	adds	r7, #48	; 0x30
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40005400 	.word	0x40005400
 8005024:	40023800 	.word	0x40023800
 8005028:	40020400 	.word	0x40020400
 800502c:	40005800 	.word	0x40005800

08005030 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b08a      	sub	sp, #40	; 0x28
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005038:	f107 0314 	add.w	r3, r7, #20
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	609a      	str	r2, [r3, #8]
 8005044:	60da      	str	r2, [r3, #12]
 8005046:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a69      	ldr	r2, [pc, #420]	; (80051f4 <HAL_SD_MspInit+0x1c4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	f040 80cb 	bne.w	80051ea <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005054:	2300      	movs	r3, #0
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	4b67      	ldr	r3, [pc, #412]	; (80051f8 <HAL_SD_MspInit+0x1c8>)
 800505a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505c:	4a66      	ldr	r2, [pc, #408]	; (80051f8 <HAL_SD_MspInit+0x1c8>)
 800505e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005062:	6453      	str	r3, [r2, #68]	; 0x44
 8005064:	4b64      	ldr	r3, [pc, #400]	; (80051f8 <HAL_SD_MspInit+0x1c8>)
 8005066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800506c:	613b      	str	r3, [r7, #16]
 800506e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005070:	2300      	movs	r3, #0
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	4b60      	ldr	r3, [pc, #384]	; (80051f8 <HAL_SD_MspInit+0x1c8>)
 8005076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005078:	4a5f      	ldr	r2, [pc, #380]	; (80051f8 <HAL_SD_MspInit+0x1c8>)
 800507a:	f043 0304 	orr.w	r3, r3, #4
 800507e:	6313      	str	r3, [r2, #48]	; 0x30
 8005080:	4b5d      	ldr	r3, [pc, #372]	; (80051f8 <HAL_SD_MspInit+0x1c8>)
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	60fb      	str	r3, [r7, #12]
 800508a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800508c:	2300      	movs	r3, #0
 800508e:	60bb      	str	r3, [r7, #8]
 8005090:	4b59      	ldr	r3, [pc, #356]	; (80051f8 <HAL_SD_MspInit+0x1c8>)
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	4a58      	ldr	r2, [pc, #352]	; (80051f8 <HAL_SD_MspInit+0x1c8>)
 8005096:	f043 0308 	orr.w	r3, r3, #8
 800509a:	6313      	str	r3, [r2, #48]	; 0x30
 800509c:	4b56      	ldr	r3, [pc, #344]	; (80051f8 <HAL_SD_MspInit+0x1c8>)
 800509e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80050a8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80050ac:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ae:	2302      	movs	r3, #2
 80050b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b6:	2303      	movs	r3, #3
 80050b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80050ba:	230c      	movs	r3, #12
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050be:	f107 0314 	add.w	r3, r7, #20
 80050c2:	4619      	mov	r1, r3
 80050c4:	484d      	ldr	r0, [pc, #308]	; (80051fc <HAL_SD_MspInit+0x1cc>)
 80050c6:	f002 fb1f 	bl	8007708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80050ca:	2304      	movs	r3, #4
 80050cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ce:	2302      	movs	r3, #2
 80050d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050d6:	2303      	movs	r3, #3
 80050d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80050da:	230c      	movs	r3, #12
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80050de:	f107 0314 	add.w	r3, r7, #20
 80050e2:	4619      	mov	r1, r3
 80050e4:	4846      	ldr	r0, [pc, #280]	; (8005200 <HAL_SD_MspInit+0x1d0>)
 80050e6:	f002 fb0f 	bl	8007708 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80050ea:	4b46      	ldr	r3, [pc, #280]	; (8005204 <HAL_SD_MspInit+0x1d4>)
 80050ec:	4a46      	ldr	r2, [pc, #280]	; (8005208 <HAL_SD_MspInit+0x1d8>)
 80050ee:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80050f0:	4b44      	ldr	r3, [pc, #272]	; (8005204 <HAL_SD_MspInit+0x1d4>)
 80050f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80050f6:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050f8:	4b42      	ldr	r3, [pc, #264]	; (8005204 <HAL_SD_MspInit+0x1d4>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050fe:	4b41      	ldr	r3, [pc, #260]	; (8005204 <HAL_SD_MspInit+0x1d4>)
 8005100:	2200      	movs	r2, #0
 8005102:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005104:	4b3f      	ldr	r3, [pc, #252]	; (8005204 <HAL_SD_MspInit+0x1d4>)
 8005106:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800510a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800510c:	4b3d      	ldr	r3, [pc, #244]	; (8005204 <HAL_SD_MspInit+0x1d4>)
 800510e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005112:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005114:	4b3b      	ldr	r3, [pc, #236]	; (8005204 <HAL_SD_MspInit+0x1d4>)
 8005116:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800511a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800511c:	4b39      	ldr	r3, [pc, #228]	; (8005204 <HAL_SD_MspInit+0x1d4>)
 800511e:	2220      	movs	r2, #32
 8005120:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005122:	4b38      	ldr	r3, [pc, #224]	; (8005204 <HAL_SD_MspInit+0x1d4>)
 8005124:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005128:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800512a:	4b36      	ldr	r3, [pc, #216]	; (8005204 <HAL_SD_MspInit+0x1d4>)
 800512c:	2204      	movs	r2, #4
 800512e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005130:	4b34      	ldr	r3, [pc, #208]	; (8005204 <HAL_SD_MspInit+0x1d4>)
 8005132:	2203      	movs	r2, #3
 8005134:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8005136:	4b33      	ldr	r3, [pc, #204]	; (8005204 <HAL_SD_MspInit+0x1d4>)
 8005138:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800513c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800513e:	4b31      	ldr	r3, [pc, #196]	; (8005204 <HAL_SD_MspInit+0x1d4>)
 8005140:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005144:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8005146:	482f      	ldr	r0, [pc, #188]	; (8005204 <HAL_SD_MspInit+0x1d4>)
 8005148:	f001 ff42 	bl	8006fd0 <HAL_DMA_Init>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8005152:	f7ff fc7f 	bl	8004a54 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a2a      	ldr	r2, [pc, #168]	; (8005204 <HAL_SD_MspInit+0x1d4>)
 800515a:	641a      	str	r2, [r3, #64]	; 0x40
 800515c:	4a29      	ldr	r2, [pc, #164]	; (8005204 <HAL_SD_MspInit+0x1d4>)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8005162:	4b2a      	ldr	r3, [pc, #168]	; (800520c <HAL_SD_MspInit+0x1dc>)
 8005164:	4a2a      	ldr	r2, [pc, #168]	; (8005210 <HAL_SD_MspInit+0x1e0>)
 8005166:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005168:	4b28      	ldr	r3, [pc, #160]	; (800520c <HAL_SD_MspInit+0x1dc>)
 800516a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800516e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005170:	4b26      	ldr	r3, [pc, #152]	; (800520c <HAL_SD_MspInit+0x1dc>)
 8005172:	2240      	movs	r2, #64	; 0x40
 8005174:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005176:	4b25      	ldr	r3, [pc, #148]	; (800520c <HAL_SD_MspInit+0x1dc>)
 8005178:	2200      	movs	r2, #0
 800517a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800517c:	4b23      	ldr	r3, [pc, #140]	; (800520c <HAL_SD_MspInit+0x1dc>)
 800517e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005182:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005184:	4b21      	ldr	r3, [pc, #132]	; (800520c <HAL_SD_MspInit+0x1dc>)
 8005186:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800518a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800518c:	4b1f      	ldr	r3, [pc, #124]	; (800520c <HAL_SD_MspInit+0x1dc>)
 800518e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005192:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005194:	4b1d      	ldr	r3, [pc, #116]	; (800520c <HAL_SD_MspInit+0x1dc>)
 8005196:	2220      	movs	r2, #32
 8005198:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800519a:	4b1c      	ldr	r3, [pc, #112]	; (800520c <HAL_SD_MspInit+0x1dc>)
 800519c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051a0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80051a2:	4b1a      	ldr	r3, [pc, #104]	; (800520c <HAL_SD_MspInit+0x1dc>)
 80051a4:	2204      	movs	r2, #4
 80051a6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80051a8:	4b18      	ldr	r3, [pc, #96]	; (800520c <HAL_SD_MspInit+0x1dc>)
 80051aa:	2203      	movs	r2, #3
 80051ac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80051ae:	4b17      	ldr	r3, [pc, #92]	; (800520c <HAL_SD_MspInit+0x1dc>)
 80051b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80051b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80051b6:	4b15      	ldr	r3, [pc, #84]	; (800520c <HAL_SD_MspInit+0x1dc>)
 80051b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80051be:	4813      	ldr	r0, [pc, #76]	; (800520c <HAL_SD_MspInit+0x1dc>)
 80051c0:	f001 ff06 	bl	8006fd0 <HAL_DMA_Init>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80051ca:	f7ff fc43 	bl	8004a54 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a0e      	ldr	r2, [pc, #56]	; (800520c <HAL_SD_MspInit+0x1dc>)
 80051d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80051d4:	4a0d      	ldr	r2, [pc, #52]	; (800520c <HAL_SD_MspInit+0x1dc>)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80051da:	2200      	movs	r2, #0
 80051dc:	2100      	movs	r1, #0
 80051de:	2031      	movs	r0, #49	; 0x31
 80051e0:	f001 febf 	bl	8006f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80051e4:	2031      	movs	r0, #49	; 0x31
 80051e6:	f001 fed8 	bl	8006f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80051ea:	bf00      	nop
 80051ec:	3728      	adds	r7, #40	; 0x28
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40012c00 	.word	0x40012c00
 80051f8:	40023800 	.word	0x40023800
 80051fc:	40020800 	.word	0x40020800
 8005200:	40020c00 	.word	0x40020c00
 8005204:	20038f98 	.word	0x20038f98
 8005208:	40026458 	.word	0x40026458
 800520c:	200392cc 	.word	0x200392cc
 8005210:	400264a0 	.word	0x400264a0

08005214 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08a      	sub	sp, #40	; 0x28
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800521c:	f107 0314 	add.w	r3, r7, #20
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	605a      	str	r2, [r3, #4]
 8005226:	609a      	str	r2, [r3, #8]
 8005228:	60da      	str	r2, [r3, #12]
 800522a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a19      	ldr	r2, [pc, #100]	; (8005298 <HAL_SPI_MspInit+0x84>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d12c      	bne.n	8005290 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	4b18      	ldr	r3, [pc, #96]	; (800529c <HAL_SPI_MspInit+0x88>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	4a17      	ldr	r2, [pc, #92]	; (800529c <HAL_SPI_MspInit+0x88>)
 8005240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005244:	6413      	str	r3, [r2, #64]	; 0x40
 8005246:	4b15      	ldr	r3, [pc, #84]	; (800529c <HAL_SPI_MspInit+0x88>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	4b11      	ldr	r3, [pc, #68]	; (800529c <HAL_SPI_MspInit+0x88>)
 8005258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525a:	4a10      	ldr	r2, [pc, #64]	; (800529c <HAL_SPI_MspInit+0x88>)
 800525c:	f043 0302 	orr.w	r3, r3, #2
 8005260:	6313      	str	r3, [r2, #48]	; 0x30
 8005262:	4b0e      	ldr	r3, [pc, #56]	; (800529c <HAL_SPI_MspInit+0x88>)
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800526e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005274:	2302      	movs	r3, #2
 8005276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005278:	2300      	movs	r3, #0
 800527a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800527c:	2303      	movs	r3, #3
 800527e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005280:	2305      	movs	r3, #5
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005284:	f107 0314 	add.w	r3, r7, #20
 8005288:	4619      	mov	r1, r3
 800528a:	4805      	ldr	r0, [pc, #20]	; (80052a0 <HAL_SPI_MspInit+0x8c>)
 800528c:	f002 fa3c 	bl	8007708 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005290:	bf00      	nop
 8005292:	3728      	adds	r7, #40	; 0x28
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40003800 	.word	0x40003800
 800529c:	40023800 	.word	0x40023800
 80052a0:	40020400 	.word	0x40020400

080052a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08c      	sub	sp, #48	; 0x30
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052ac:	f107 031c 	add.w	r3, r7, #28
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	605a      	str	r2, [r3, #4]
 80052b6:	609a      	str	r2, [r3, #8]
 80052b8:	60da      	str	r2, [r3, #12]
 80052ba:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a2d      	ldr	r2, [pc, #180]	; (8005378 <HAL_TIM_PWM_MspInit+0xd4>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d12d      	bne.n	8005322 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80052c6:	2300      	movs	r3, #0
 80052c8:	61bb      	str	r3, [r7, #24]
 80052ca:	4b2c      	ldr	r3, [pc, #176]	; (800537c <HAL_TIM_PWM_MspInit+0xd8>)
 80052cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ce:	4a2b      	ldr	r2, [pc, #172]	; (800537c <HAL_TIM_PWM_MspInit+0xd8>)
 80052d0:	f043 0301 	orr.w	r3, r3, #1
 80052d4:	6453      	str	r3, [r2, #68]	; 0x44
 80052d6:	4b29      	ldr	r3, [pc, #164]	; (800537c <HAL_TIM_PWM_MspInit+0xd8>)
 80052d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	61bb      	str	r3, [r7, #24]
 80052e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	4b25      	ldr	r3, [pc, #148]	; (800537c <HAL_TIM_PWM_MspInit+0xd8>)
 80052e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ea:	4a24      	ldr	r2, [pc, #144]	; (800537c <HAL_TIM_PWM_MspInit+0xd8>)
 80052ec:	f043 0310 	orr.w	r3, r3, #16
 80052f0:	6313      	str	r3, [r2, #48]	; 0x30
 80052f2:	4b22      	ldr	r3, [pc, #136]	; (800537c <HAL_TIM_PWM_MspInit+0xd8>)
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	f003 0310 	and.w	r3, r3, #16
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80052fe:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005304:	2302      	movs	r3, #2
 8005306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005308:	2300      	movs	r3, #0
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800530c:	2300      	movs	r3, #0
 800530e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005310:	2301      	movs	r3, #1
 8005312:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005314:	f107 031c 	add.w	r3, r7, #28
 8005318:	4619      	mov	r1, r3
 800531a:	4819      	ldr	r0, [pc, #100]	; (8005380 <HAL_TIM_PWM_MspInit+0xdc>)
 800531c:	f002 f9f4 	bl	8007708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005320:	e026      	b.n	8005370 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a17      	ldr	r2, [pc, #92]	; (8005384 <HAL_TIM_PWM_MspInit+0xe0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d10e      	bne.n	800534a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800532c:	2300      	movs	r3, #0
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	4b12      	ldr	r3, [pc, #72]	; (800537c <HAL_TIM_PWM_MspInit+0xd8>)
 8005332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005334:	4a11      	ldr	r2, [pc, #68]	; (800537c <HAL_TIM_PWM_MspInit+0xd8>)
 8005336:	f043 0302 	orr.w	r3, r3, #2
 800533a:	6413      	str	r3, [r2, #64]	; 0x40
 800533c:	4b0f      	ldr	r3, [pc, #60]	; (800537c <HAL_TIM_PWM_MspInit+0xd8>)
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	613b      	str	r3, [r7, #16]
 8005346:	693b      	ldr	r3, [r7, #16]
}
 8005348:	e012      	b.n	8005370 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a0e      	ldr	r2, [pc, #56]	; (8005388 <HAL_TIM_PWM_MspInit+0xe4>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d10d      	bne.n	8005370 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005354:	2300      	movs	r3, #0
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	4b08      	ldr	r3, [pc, #32]	; (800537c <HAL_TIM_PWM_MspInit+0xd8>)
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	4a07      	ldr	r2, [pc, #28]	; (800537c <HAL_TIM_PWM_MspInit+0xd8>)
 800535e:	f043 0304 	orr.w	r3, r3, #4
 8005362:	6413      	str	r3, [r2, #64]	; 0x40
 8005364:	4b05      	ldr	r3, [pc, #20]	; (800537c <HAL_TIM_PWM_MspInit+0xd8>)
 8005366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	68fb      	ldr	r3, [r7, #12]
}
 8005370:	bf00      	nop
 8005372:	3730      	adds	r7, #48	; 0x30
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40010000 	.word	0x40010000
 800537c:	40023800 	.word	0x40023800
 8005380:	40021000 	.word	0x40021000
 8005384:	40000400 	.word	0x40000400
 8005388:	40000800 	.word	0x40000800

0800538c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b088      	sub	sp, #32
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a3e      	ldr	r2, [pc, #248]	; (8005494 <HAL_TIM_Base_MspInit+0x108>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d116      	bne.n	80053cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800539e:	2300      	movs	r3, #0
 80053a0:	61fb      	str	r3, [r7, #28]
 80053a2:	4b3d      	ldr	r3, [pc, #244]	; (8005498 <HAL_TIM_Base_MspInit+0x10c>)
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	4a3c      	ldr	r2, [pc, #240]	; (8005498 <HAL_TIM_Base_MspInit+0x10c>)
 80053a8:	f043 0310 	orr.w	r3, r3, #16
 80053ac:	6413      	str	r3, [r2, #64]	; 0x40
 80053ae:	4b3a      	ldr	r3, [pc, #232]	; (8005498 <HAL_TIM_Base_MspInit+0x10c>)
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	61fb      	str	r3, [r7, #28]
 80053b8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80053ba:	2200      	movs	r2, #0
 80053bc:	2101      	movs	r1, #1
 80053be:	2036      	movs	r0, #54	; 0x36
 80053c0:	f001 fdcf 	bl	8006f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80053c4:	2036      	movs	r0, #54	; 0x36
 80053c6:	f001 fde8 	bl	8006f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80053ca:	e05e      	b.n	800548a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a32      	ldr	r2, [pc, #200]	; (800549c <HAL_TIM_Base_MspInit+0x110>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d116      	bne.n	8005404 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80053d6:	2300      	movs	r3, #0
 80053d8:	61bb      	str	r3, [r7, #24]
 80053da:	4b2f      	ldr	r3, [pc, #188]	; (8005498 <HAL_TIM_Base_MspInit+0x10c>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053de:	4a2e      	ldr	r2, [pc, #184]	; (8005498 <HAL_TIM_Base_MspInit+0x10c>)
 80053e0:	f043 0320 	orr.w	r3, r3, #32
 80053e4:	6413      	str	r3, [r2, #64]	; 0x40
 80053e6:	4b2c      	ldr	r3, [pc, #176]	; (8005498 <HAL_TIM_Base_MspInit+0x10c>)
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	61bb      	str	r3, [r7, #24]
 80053f0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80053f2:	2200      	movs	r2, #0
 80053f4:	2100      	movs	r1, #0
 80053f6:	2037      	movs	r0, #55	; 0x37
 80053f8:	f001 fdb3 	bl	8006f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80053fc:	2037      	movs	r0, #55	; 0x37
 80053fe:	f001 fdcc 	bl	8006f9a <HAL_NVIC_EnableIRQ>
}
 8005402:	e042      	b.n	800548a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a25      	ldr	r2, [pc, #148]	; (80054a0 <HAL_TIM_Base_MspInit+0x114>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d10e      	bne.n	800542c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	4b21      	ldr	r3, [pc, #132]	; (8005498 <HAL_TIM_Base_MspInit+0x10c>)
 8005414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005416:	4a20      	ldr	r2, [pc, #128]	; (8005498 <HAL_TIM_Base_MspInit+0x10c>)
 8005418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800541c:	6453      	str	r3, [r2, #68]	; 0x44
 800541e:	4b1e      	ldr	r3, [pc, #120]	; (8005498 <HAL_TIM_Base_MspInit+0x10c>)
 8005420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	697b      	ldr	r3, [r7, #20]
}
 800542a:	e02e      	b.n	800548a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1c      	ldr	r2, [pc, #112]	; (80054a4 <HAL_TIM_Base_MspInit+0x118>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d10e      	bne.n	8005454 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	4b17      	ldr	r3, [pc, #92]	; (8005498 <HAL_TIM_Base_MspInit+0x10c>)
 800543c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543e:	4a16      	ldr	r2, [pc, #88]	; (8005498 <HAL_TIM_Base_MspInit+0x10c>)
 8005440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005444:	6453      	str	r3, [r2, #68]	; 0x44
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <HAL_TIM_Base_MspInit+0x10c>)
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	693b      	ldr	r3, [r7, #16]
}
 8005452:	e01a      	b.n	800548a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a13      	ldr	r2, [pc, #76]	; (80054a8 <HAL_TIM_Base_MspInit+0x11c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d115      	bne.n	800548a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <HAL_TIM_Base_MspInit+0x10c>)
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	4a0c      	ldr	r2, [pc, #48]	; (8005498 <HAL_TIM_Base_MspInit+0x10c>)
 8005468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546c:	6413      	str	r3, [r2, #64]	; 0x40
 800546e:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <HAL_TIM_Base_MspInit+0x10c>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800547a:	2200      	movs	r2, #0
 800547c:	2100      	movs	r1, #0
 800547e:	202c      	movs	r0, #44	; 0x2c
 8005480:	f001 fd6f 	bl	8006f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005484:	202c      	movs	r0, #44	; 0x2c
 8005486:	f001 fd88 	bl	8006f9a <HAL_NVIC_EnableIRQ>
}
 800548a:	bf00      	nop
 800548c:	3720      	adds	r7, #32
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40001000 	.word	0x40001000
 8005498:	40023800 	.word	0x40023800
 800549c:	40001400 	.word	0x40001400
 80054a0:	40014400 	.word	0x40014400
 80054a4:	40014800 	.word	0x40014800
 80054a8:	40001c00 	.word	0x40001c00

080054ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08a      	sub	sp, #40	; 0x28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054b4:	f107 0314 	add.w	r3, r7, #20
 80054b8:	2200      	movs	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	605a      	str	r2, [r3, #4]
 80054be:	609a      	str	r2, [r3, #8]
 80054c0:	60da      	str	r2, [r3, #12]
 80054c2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1d      	ldr	r2, [pc, #116]	; (8005540 <HAL_TIM_Encoder_MspInit+0x94>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d133      	bne.n	8005536 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80054ce:	2300      	movs	r3, #0
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <HAL_TIM_Encoder_MspInit+0x98>)
 80054d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d6:	4a1b      	ldr	r2, [pc, #108]	; (8005544 <HAL_TIM_Encoder_MspInit+0x98>)
 80054d8:	f043 0302 	orr.w	r3, r3, #2
 80054dc:	6453      	str	r3, [r2, #68]	; 0x44
 80054de:	4b19      	ldr	r3, [pc, #100]	; (8005544 <HAL_TIM_Encoder_MspInit+0x98>)
 80054e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	613b      	str	r3, [r7, #16]
 80054e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]
 80054ee:	4b15      	ldr	r3, [pc, #84]	; (8005544 <HAL_TIM_Encoder_MspInit+0x98>)
 80054f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f2:	4a14      	ldr	r2, [pc, #80]	; (8005544 <HAL_TIM_Encoder_MspInit+0x98>)
 80054f4:	f043 0304 	orr.w	r3, r3, #4
 80054f8:	6313      	str	r3, [r2, #48]	; 0x30
 80054fa:	4b12      	ldr	r3, [pc, #72]	; (8005544 <HAL_TIM_Encoder_MspInit+0x98>)
 80054fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005506:	23c0      	movs	r3, #192	; 0xc0
 8005508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800550a:	2302      	movs	r3, #2
 800550c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005512:	2300      	movs	r3, #0
 8005514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005516:	2303      	movs	r3, #3
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800551a:	f107 0314 	add.w	r3, r7, #20
 800551e:	4619      	mov	r1, r3
 8005520:	4809      	ldr	r0, [pc, #36]	; (8005548 <HAL_TIM_Encoder_MspInit+0x9c>)
 8005522:	f002 f8f1 	bl	8007708 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005526:	2200      	movs	r2, #0
 8005528:	2100      	movs	r1, #0
 800552a:	202c      	movs	r0, #44	; 0x2c
 800552c:	f001 fd19 	bl	8006f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005530:	202c      	movs	r0, #44	; 0x2c
 8005532:	f001 fd32 	bl	8006f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005536:	bf00      	nop
 8005538:	3728      	adds	r7, #40	; 0x28
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40010400 	.word	0x40010400
 8005544:	40023800 	.word	0x40023800
 8005548:	40020800 	.word	0x40020800

0800554c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b08c      	sub	sp, #48	; 0x30
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005554:	f107 031c 	add.w	r3, r7, #28
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	605a      	str	r2, [r3, #4]
 800555e:	609a      	str	r2, [r3, #8]
 8005560:	60da      	str	r2, [r3, #12]
 8005562:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a5c      	ldr	r2, [pc, #368]	; (80056dc <HAL_TIM_MspPostInit+0x190>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d11f      	bne.n	80055ae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800556e:	2300      	movs	r3, #0
 8005570:	61bb      	str	r3, [r7, #24]
 8005572:	4b5b      	ldr	r3, [pc, #364]	; (80056e0 <HAL_TIM_MspPostInit+0x194>)
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	4a5a      	ldr	r2, [pc, #360]	; (80056e0 <HAL_TIM_MspPostInit+0x194>)
 8005578:	f043 0310 	orr.w	r3, r3, #16
 800557c:	6313      	str	r3, [r2, #48]	; 0x30
 800557e:	4b58      	ldr	r3, [pc, #352]	; (80056e0 <HAL_TIM_MspPostInit+0x194>)
 8005580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005582:	f003 0310 	and.w	r3, r3, #16
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800558a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800558e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005590:	2302      	movs	r3, #2
 8005592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005594:	2300      	movs	r3, #0
 8005596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005598:	2300      	movs	r3, #0
 800559a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800559c:	2301      	movs	r3, #1
 800559e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055a0:	f107 031c 	add.w	r3, r7, #28
 80055a4:	4619      	mov	r1, r3
 80055a6:	484f      	ldr	r0, [pc, #316]	; (80056e4 <HAL_TIM_MspPostInit+0x198>)
 80055a8:	f002 f8ae 	bl	8007708 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80055ac:	e091      	b.n	80056d2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a4d      	ldr	r2, [pc, #308]	; (80056e8 <HAL_TIM_MspPostInit+0x19c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d11e      	bne.n	80055f6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	4b48      	ldr	r3, [pc, #288]	; (80056e0 <HAL_TIM_MspPostInit+0x194>)
 80055be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c0:	4a47      	ldr	r2, [pc, #284]	; (80056e0 <HAL_TIM_MspPostInit+0x194>)
 80055c2:	f043 0302 	orr.w	r3, r3, #2
 80055c6:	6313      	str	r3, [r2, #48]	; 0x30
 80055c8:	4b45      	ldr	r3, [pc, #276]	; (80056e0 <HAL_TIM_MspPostInit+0x194>)
 80055ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80055d4:	2330      	movs	r3, #48	; 0x30
 80055d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055d8:	2302      	movs	r3, #2
 80055da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055dc:	2300      	movs	r3, #0
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055e0:	2300      	movs	r3, #0
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80055e4:	2302      	movs	r3, #2
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055e8:	f107 031c 	add.w	r3, r7, #28
 80055ec:	4619      	mov	r1, r3
 80055ee:	483f      	ldr	r0, [pc, #252]	; (80056ec <HAL_TIM_MspPostInit+0x1a0>)
 80055f0:	f002 f88a 	bl	8007708 <HAL_GPIO_Init>
}
 80055f4:	e06d      	b.n	80056d2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a3d      	ldr	r2, [pc, #244]	; (80056f0 <HAL_TIM_MspPostInit+0x1a4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d11f      	bne.n	8005640 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005600:	2300      	movs	r3, #0
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	4b36      	ldr	r3, [pc, #216]	; (80056e0 <HAL_TIM_MspPostInit+0x194>)
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	4a35      	ldr	r2, [pc, #212]	; (80056e0 <HAL_TIM_MspPostInit+0x194>)
 800560a:	f043 0308 	orr.w	r3, r3, #8
 800560e:	6313      	str	r3, [r2, #48]	; 0x30
 8005610:	4b33      	ldr	r3, [pc, #204]	; (80056e0 <HAL_TIM_MspPostInit+0x194>)
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	f003 0308 	and.w	r3, r3, #8
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800561c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005622:	2302      	movs	r3, #2
 8005624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005626:	2300      	movs	r3, #0
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800562a:	2300      	movs	r3, #0
 800562c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800562e:	2302      	movs	r3, #2
 8005630:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005632:	f107 031c 	add.w	r3, r7, #28
 8005636:	4619      	mov	r1, r3
 8005638:	482e      	ldr	r0, [pc, #184]	; (80056f4 <HAL_TIM_MspPostInit+0x1a8>)
 800563a:	f002 f865 	bl	8007708 <HAL_GPIO_Init>
}
 800563e:	e048      	b.n	80056d2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a2c      	ldr	r2, [pc, #176]	; (80056f8 <HAL_TIM_MspPostInit+0x1ac>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d11f      	bne.n	800568a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	4b24      	ldr	r3, [pc, #144]	; (80056e0 <HAL_TIM_MspPostInit+0x194>)
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	4a23      	ldr	r2, [pc, #140]	; (80056e0 <HAL_TIM_MspPostInit+0x194>)
 8005654:	f043 0302 	orr.w	r3, r3, #2
 8005658:	6313      	str	r3, [r2, #48]	; 0x30
 800565a:	4b21      	ldr	r3, [pc, #132]	; (80056e0 <HAL_TIM_MspPostInit+0x194>)
 800565c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	60fb      	str	r3, [r7, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800566a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800566c:	2302      	movs	r3, #2
 800566e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005670:	2300      	movs	r3, #0
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005674:	2300      	movs	r3, #0
 8005676:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005678:	2303      	movs	r3, #3
 800567a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800567c:	f107 031c 	add.w	r3, r7, #28
 8005680:	4619      	mov	r1, r3
 8005682:	481a      	ldr	r0, [pc, #104]	; (80056ec <HAL_TIM_MspPostInit+0x1a0>)
 8005684:	f002 f840 	bl	8007708 <HAL_GPIO_Init>
}
 8005688:	e023      	b.n	80056d2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a1b      	ldr	r2, [pc, #108]	; (80056fc <HAL_TIM_MspPostInit+0x1b0>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d11e      	bne.n	80056d2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005694:	2300      	movs	r3, #0
 8005696:	60bb      	str	r3, [r7, #8]
 8005698:	4b11      	ldr	r3, [pc, #68]	; (80056e0 <HAL_TIM_MspPostInit+0x194>)
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	4a10      	ldr	r2, [pc, #64]	; (80056e0 <HAL_TIM_MspPostInit+0x194>)
 800569e:	f043 0302 	orr.w	r3, r3, #2
 80056a2:	6313      	str	r3, [r2, #48]	; 0x30
 80056a4:	4b0e      	ldr	r3, [pc, #56]	; (80056e0 <HAL_TIM_MspPostInit+0x194>)
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	60bb      	str	r3, [r7, #8]
 80056ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80056b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b6:	2302      	movs	r3, #2
 80056b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056be:	2300      	movs	r3, #0
 80056c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80056c2:	2303      	movs	r3, #3
 80056c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056c6:	f107 031c 	add.w	r3, r7, #28
 80056ca:	4619      	mov	r1, r3
 80056cc:	4807      	ldr	r0, [pc, #28]	; (80056ec <HAL_TIM_MspPostInit+0x1a0>)
 80056ce:	f002 f81b 	bl	8007708 <HAL_GPIO_Init>
}
 80056d2:	bf00      	nop
 80056d4:	3730      	adds	r7, #48	; 0x30
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40010000 	.word	0x40010000
 80056e0:	40023800 	.word	0x40023800
 80056e4:	40021000 	.word	0x40021000
 80056e8:	40000400 	.word	0x40000400
 80056ec:	40020400 	.word	0x40020400
 80056f0:	40000800 	.word	0x40000800
 80056f4:	40020c00 	.word	0x40020c00
 80056f8:	40014400 	.word	0x40014400
 80056fc:	40014800 	.word	0x40014800

08005700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b08a      	sub	sp, #40	; 0x28
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005708:	f107 0314 	add.w	r3, r7, #20
 800570c:	2200      	movs	r2, #0
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	605a      	str	r2, [r3, #4]
 8005712:	609a      	str	r2, [r3, #8]
 8005714:	60da      	str	r2, [r3, #12]
 8005716:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a19      	ldr	r2, [pc, #100]	; (8005784 <HAL_UART_MspInit+0x84>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d12b      	bne.n	800577a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005722:	2300      	movs	r3, #0
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	4b18      	ldr	r3, [pc, #96]	; (8005788 <HAL_UART_MspInit+0x88>)
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	4a17      	ldr	r2, [pc, #92]	; (8005788 <HAL_UART_MspInit+0x88>)
 800572c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005730:	6413      	str	r3, [r2, #64]	; 0x40
 8005732:	4b15      	ldr	r3, [pc, #84]	; (8005788 <HAL_UART_MspInit+0x88>)
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573a:	613b      	str	r3, [r7, #16]
 800573c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800573e:	2300      	movs	r3, #0
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	4b11      	ldr	r3, [pc, #68]	; (8005788 <HAL_UART_MspInit+0x88>)
 8005744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005746:	4a10      	ldr	r2, [pc, #64]	; (8005788 <HAL_UART_MspInit+0x88>)
 8005748:	f043 0308 	orr.w	r3, r3, #8
 800574c:	6313      	str	r3, [r2, #48]	; 0x30
 800574e:	4b0e      	ldr	r3, [pc, #56]	; (8005788 <HAL_UART_MspInit+0x88>)
 8005750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800575a:	2360      	movs	r3, #96	; 0x60
 800575c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800575e:	2302      	movs	r3, #2
 8005760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005762:	2300      	movs	r3, #0
 8005764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005766:	2303      	movs	r3, #3
 8005768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800576a:	2307      	movs	r3, #7
 800576c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800576e:	f107 0314 	add.w	r3, r7, #20
 8005772:	4619      	mov	r1, r3
 8005774:	4805      	ldr	r0, [pc, #20]	; (800578c <HAL_UART_MspInit+0x8c>)
 8005776:	f001 ffc7 	bl	8007708 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800577a:	bf00      	nop
 800577c:	3728      	adds	r7, #40	; 0x28
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	40004400 	.word	0x40004400
 8005788:	40023800 	.word	0x40023800
 800578c:	40020c00 	.word	0x40020c00

08005790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005794:	e7fe      	b.n	8005794 <NMI_Handler+0x4>

08005796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005796:	b480      	push	{r7}
 8005798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800579a:	e7fe      	b.n	800579a <HardFault_Handler+0x4>

0800579c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057a0:	e7fe      	b.n	80057a0 <MemManage_Handler+0x4>

080057a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057a2:	b480      	push	{r7}
 80057a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057a6:	e7fe      	b.n	80057a6 <BusFault_Handler+0x4>

080057a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057ac:	e7fe      	b.n	80057ac <UsageFault_Handler+0x4>

080057ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057ae:	b480      	push	{r7}
 80057b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057b2:	bf00      	nop
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057c0:	bf00      	nop
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057ca:	b480      	push	{r7}
 80057cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057ce:	bf00      	nop
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057dc:	f000 fea0 	bl	8006520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057e0:	bf00      	nop
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80057e8:	2004      	movs	r0, #4
 80057ea:	f002 f969 	bl	8007ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80057ee:	bf00      	nop
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80057f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80057fa:	f002 f961 	bl	8007ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80057fe:	bf00      	nop
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005808:	4803      	ldr	r0, [pc, #12]	; (8005818 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800580a:	f006 f978 	bl	800bafe <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800580e:	4803      	ldr	r0, [pc, #12]	; (800581c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005810:	f006 f975 	bl	800bafe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005814:	bf00      	nop
 8005816:	bd80      	pop	{r7, pc}
 8005818:	20039050 	.word	0x20039050
 800581c:	2003924c 	.word	0x2003924c

08005820 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8005824:	4802      	ldr	r0, [pc, #8]	; (8005830 <SDIO_IRQHandler+0x10>)
 8005826:	f004 fa11 	bl	8009c4c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800582a:	bf00      	nop
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	200393ac 	.word	0x200393ac

08005834 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005838:	4802      	ldr	r0, [pc, #8]	; (8005844 <TIM6_DAC_IRQHandler+0x10>)
 800583a:	f006 f960 	bl	800bafe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800583e:	bf00      	nop
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	2003932c 	.word	0x2003932c

08005848 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800584c:	4802      	ldr	r0, [pc, #8]	; (8005858 <TIM7_IRQHandler+0x10>)
 800584e:	f006 f956 	bl	800bafe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005852:	bf00      	nop
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	200394d0 	.word	0x200394d0

0800585c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005860:	4802      	ldr	r0, [pc, #8]	; (800586c <DMA2_Stream2_IRQHandler+0x10>)
 8005862:	f001 fcdd 	bl	8007220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005866:	bf00      	nop
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20039470 	.word	0x20039470

08005870 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8005874:	4802      	ldr	r0, [pc, #8]	; (8005880 <DMA2_Stream3_IRQHandler+0x10>)
 8005876:	f001 fcd3 	bl	8007220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800587a:	bf00      	nop
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20038f98 	.word	0x20038f98

08005884 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005888:	4802      	ldr	r0, [pc, #8]	; (8005894 <DMA2_Stream6_IRQHandler+0x10>)
 800588a:	f001 fcc9 	bl	8007220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800588e:	bf00      	nop
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	200392cc 	.word	0x200392cc

08005898 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058a4:	2300      	movs	r3, #0
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	e00a      	b.n	80058c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80058aa:	f3af 8000 	nop.w
 80058ae:	4601      	mov	r1, r0
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	60ba      	str	r2, [r7, #8]
 80058b6:	b2ca      	uxtb	r2, r1
 80058b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	3301      	adds	r3, #1
 80058be:	617b      	str	r3, [r7, #20]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	dbf0      	blt.n	80058aa <_read+0x12>
	}

return len;
 80058c8:	687b      	ldr	r3, [r7, #4]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3718      	adds	r7, #24
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
	return -1;
 80058da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058de:	4618      	mov	r0, r3
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058fa:	605a      	str	r2, [r3, #4]
	return 0;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <_isatty>:

int _isatty(int file)
{
 800590a:	b480      	push	{r7}
 800590c:	b083      	sub	sp, #12
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
	return 1;
 8005912:	2301      	movs	r3, #1
}
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
	return 0;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
	...

0800593c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005944:	4a14      	ldr	r2, [pc, #80]	; (8005998 <_sbrk+0x5c>)
 8005946:	4b15      	ldr	r3, [pc, #84]	; (800599c <_sbrk+0x60>)
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005950:	4b13      	ldr	r3, [pc, #76]	; (80059a0 <_sbrk+0x64>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d102      	bne.n	800595e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005958:	4b11      	ldr	r3, [pc, #68]	; (80059a0 <_sbrk+0x64>)
 800595a:	4a12      	ldr	r2, [pc, #72]	; (80059a4 <_sbrk+0x68>)
 800595c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800595e:	4b10      	ldr	r3, [pc, #64]	; (80059a0 <_sbrk+0x64>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4413      	add	r3, r2
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	429a      	cmp	r2, r3
 800596a:	d207      	bcs.n	800597c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800596c:	f00d f9fa 	bl	8012d64 <__errno>
 8005970:	4602      	mov	r2, r0
 8005972:	230c      	movs	r3, #12
 8005974:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005976:	f04f 33ff 	mov.w	r3, #4294967295
 800597a:	e009      	b.n	8005990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800597c:	4b08      	ldr	r3, [pc, #32]	; (80059a0 <_sbrk+0x64>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005982:	4b07      	ldr	r3, [pc, #28]	; (80059a0 <_sbrk+0x64>)
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4413      	add	r3, r2
 800598a:	4a05      	ldr	r2, [pc, #20]	; (80059a0 <_sbrk+0x64>)
 800598c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800598e:	68fb      	ldr	r3, [r7, #12]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	20050000 	.word	0x20050000
 800599c:	00000400 	.word	0x00000400
 80059a0:	20000260 	.word	0x20000260
 80059a4:	2003b628 	.word	0x2003b628

080059a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80059ac:	4b08      	ldr	r3, [pc, #32]	; (80059d0 <SystemInit+0x28>)
 80059ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b2:	4a07      	ldr	r2, [pc, #28]	; (80059d0 <SystemInit+0x28>)
 80059b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80059b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80059bc:	4b04      	ldr	r3, [pc, #16]	; (80059d0 <SystemInit+0x28>)
 80059be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80059c2:	609a      	str	r2, [r3, #8]
#endif
}
 80059c4:	bf00      	nop
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	e000ed00 	.word	0xe000ed00

080059d4 <batteryLowMode>:
double mon_v, mon_w;

bool flag = false;

void batteryLowMode()
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
	lcd_clear();
 80059d8:	f7fb fb62 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80059dc:	2100      	movs	r1, #0
 80059de:	2000      	movs	r0, #0
 80059e0:	f7fb fb6e 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 80059e4:	4814      	ldr	r0, [pc, #80]	; (8005a38 <batteryLowMode+0x64>)
 80059e6:	f7fb fb95 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80059ea:	2101      	movs	r1, #1
 80059ec:	2000      	movs	r0, #0
 80059ee:	f7fb fb67 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 80059f2:	4812      	ldr	r0, [pc, #72]	; (8005a3c <batteryLowMode+0x68>)
 80059f4:	f7fb fb8e 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 80059f8:	2152      	movs	r1, #82	; 0x52
 80059fa:	4811      	ldr	r0, [pc, #68]	; (8005a40 <batteryLowMode+0x6c>)
 80059fc:	f7fc fad4 	bl	8001fa8 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005a00:	2064      	movs	r0, #100	; 0x64
 8005a02:	f000 fdad 	bl	8006560 <HAL_Delay>
		led.fullColor('Y');
 8005a06:	2159      	movs	r1, #89	; 0x59
 8005a08:	480d      	ldr	r0, [pc, #52]	; (8005a40 <batteryLowMode+0x6c>)
 8005a0a:	f7fc facd 	bl	8001fa8 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005a0e:	2064      	movs	r0, #100	; 0x64
 8005a10:	f000 fda6 	bl	8006560 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 8005a14:	480b      	ldr	r0, [pc, #44]	; (8005a44 <batteryLowMode+0x70>)
 8005a16:	f7fc fa63 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	bf0c      	ite	eq
 8005a20:	2301      	moveq	r3, #1
 8005a22:	2300      	movne	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0e6      	beq.n	80059f8 <batteryLowMode+0x24>
			HAL_Delay(500);
 8005a2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a2e:	f000 fd97 	bl	8006560 <HAL_Delay>
			break;
 8005a32:	bf00      	nop
		}
	}
}
 8005a34:	bf00      	nop
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	08017c40 	.word	0x08017c40
 8005a3c:	08017c48 	.word	0x08017c48
 8005a40:	2000056c 	.word	0x2000056c
 8005a44:	20000560 	.word	0x20000560

08005a48 <cppInit>:

void cppInit(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
	lcd_init();
 8005a4c:	f7fb fae4 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8005a50:	4831      	ldr	r0, [pc, #196]	; (8005b18 <cppInit+0xd0>)
 8005a52:	f7fd fcc8 	bl	80033e6 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8005a56:	2064      	movs	r0, #100	; 0x64
 8005a58:	f000 fd82 	bl	8006560 <HAL_Delay>
	power_sensor.updateValues();
 8005a5c:	482e      	ldr	r0, [pc, #184]	; (8005b18 <cppInit+0xd0>)
 8005a5e:	f7fd fcd3 	bl	8003408 <_ZN11PowerSensor12updateValuesEv>
	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 8005a62:	482d      	ldr	r0, [pc, #180]	; (8005b18 <cppInit+0xd0>)
 8005a64:	f7fd fcfc 	bl	8003460 <_ZN11PowerSensor12butteryCheckEv>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <cppInit+0x2a>
 8005a6e:	f7ff ffb1 	bl	80059d4 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8005a72:	482a      	ldr	r0, [pc, #168]	; (8005b1c <cppInit+0xd4>)
 8005a74:	f7fc ff02 	bl	800287c <_ZN6Logger10sdCardInitEv>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d007      	beq.n	8005a8e <cppInit+0x46>
		led.fullColor('G');
 8005a7e:	2147      	movs	r1, #71	; 0x47
 8005a80:	4827      	ldr	r0, [pc, #156]	; (8005b20 <cppInit+0xd8>)
 8005a82:	f7fc fa91 	bl	8001fa8 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005a86:	2064      	movs	r0, #100	; 0x64
 8005a88:	f000 fd6a 	bl	8006560 <HAL_Delay>
 8005a8c:	e006      	b.n	8005a9c <cppInit+0x54>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8005a8e:	2152      	movs	r1, #82	; 0x52
 8005a90:	4823      	ldr	r0, [pc, #140]	; (8005b20 <cppInit+0xd8>)
 8005a92:	f7fc fa89 	bl	8001fa8 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005a96:	2064      	movs	r0, #100	; 0x64
 8005a98:	f000 fd62 	bl	8006560 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8005a9c:	4821      	ldr	r0, [pc, #132]	; (8005b24 <cppInit+0xdc>)
 8005a9e:	f7fc fbdf 	bl	8002260 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8005aa2:	4821      	ldr	r0, [pc, #132]	; (8005b28 <cppInit+0xe0>)
 8005aa4:	f7fc ffd2 	bl	8002a4c <_ZN5Motor4initEv>
	encoder.init();
 8005aa8:	4820      	ldr	r0, [pc, #128]	; (8005b2c <cppInit+0xe4>)
 8005aaa:	f7fb fb87 	bl	80011bc <_ZN7Encoder4initEv>
	imu.init();
 8005aae:	4820      	ldr	r0, [pc, #128]	; (8005b30 <cppInit+0xe8>)
 8005ab0:	f7fc f872 	bl	8001b98 <_ZN3IMU4initEv>

	//line_sensor.calibration();
	HAL_Delay(1000);
 8005ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ab8:	f000 fd52 	bl	8006560 <HAL_Delay>

	led.fullColor('M');
 8005abc:	214d      	movs	r1, #77	; 0x4d
 8005abe:	4818      	ldr	r0, [pc, #96]	; (8005b20 <cppInit+0xd8>)
 8005ac0:	f7fc fa72 	bl	8001fa8 <_ZN3LED9fullColorEc>
	imu.calibration();
 8005ac4:	481a      	ldr	r0, [pc, #104]	; (8005b30 <cppInit+0xe8>)
 8005ac6:	f7fc f8f9 	bl	8001cbc <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000002, 0);
 8005aca:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8005b34 <cppInit+0xec>
 8005ace:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8005b38 <cppInit+0xf0>
 8005ad2:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8005b3c <cppInit+0xf4>
 8005ad6:	481a      	ldr	r0, [pc, #104]	; (8005b40 <cppInit+0xf8>)
 8005ad8:	f7fc fe1a 	bl	8002710 <_ZN9LineTrace7setGainEfff>

	//velocity_ctrl.setVelocityGain(1.5, 0, 20);
	velocity_ctrl.setVelocityGain(0, 0, 0);
 8005adc:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8005b34 <cppInit+0xec>
 8005ae0:	eddf 0a14 	vldr	s1, [pc, #80]	; 8005b34 <cppInit+0xec>
 8005ae4:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8005b34 <cppInit+0xec>
 8005ae8:	4816      	ldr	r0, [pc, #88]	; (8005b44 <cppInit+0xfc>)
 8005aea:	f7fd ff69 	bl	80039c0 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setOmegaGain(0.05, 0, 7);
	velocity_ctrl.setOmegaGain(0.0, 0, 0);
 8005aee:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8005b34 <cppInit+0xec>
 8005af2:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005b34 <cppInit+0xec>
 8005af6:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8005b34 <cppInit+0xec>
 8005afa:	4812      	ldr	r0, [pc, #72]	; (8005b44 <cppInit+0xfc>)
 8005afc:	f7fd ff79 	bl	80039f2 <_ZN12VelocityCtrl12setOmegaGainEfff>


	encoder.clearDistance();
 8005b00:	480a      	ldr	r0, [pc, #40]	; (8005b2c <cppInit+0xe4>)
 8005b02:	f7fb fc49 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 8005b06:	4810      	ldr	r0, [pc, #64]	; (8005b48 <cppInit+0x100>)
 8005b08:	f7fd f9ae 	bl	8002e68 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8005b0c:	480f      	ldr	r0, [pc, #60]	; (8005b4c <cppInit+0x104>)
 8005b0e:	f7fd fa78 	bl	8003002 <_ZN13PathFollowing4initEv>

}
 8005b12:	bf00      	nop
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000570 	.word	0x20000570
 8005b1c:	200005a0 	.word	0x200005a0
 8005b20:	2000056c 	.word	0x2000056c
 8005b24:	20000264 	.word	0x20000264
 8005b28:	20000568 	.word	0x20000568
 8005b2c:	2001f1d8 	.word	0x2001f1d8
 8005b30:	20000580 	.word	0x20000580
 8005b34:	00000000 	.word	0x00000000
 8005b38:	360637bd 	.word	0x360637bd
 8005b3c:	3a03126f 	.word	0x3a03126f
 8005b40:	2001f248 	.word	0x2001f248
 8005b44:	2001f208 	.word	0x2001f208
 8005b48:	2001f2a8 	.word	0x2001f2a8
 8005b4c:	2001f2d8 	.word	0x2001f2d8

08005b50 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8005b54:	480c      	ldr	r0, [pc, #48]	; (8005b88 <cppFlip1ms+0x38>)
 8005b56:	f7fc fbe1 	bl	800231c <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8005b5a:	480c      	ldr	r0, [pc, #48]	; (8005b8c <cppFlip1ms+0x3c>)
 8005b5c:	f7fc f830 	bl	8001bc0 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 8005b60:	480b      	ldr	r0, [pc, #44]	; (8005b90 <cppFlip1ms+0x40>)
 8005b62:	f7fb fb4d 	bl	8001200 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8005b66:	480b      	ldr	r0, [pc, #44]	; (8005b94 <cppFlip1ms+0x44>)
 8005b68:	f7fc fe0a 	bl	8002780 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8005b6c:	480a      	ldr	r0, [pc, #40]	; (8005b98 <cppFlip1ms+0x48>)
 8005b6e:	f7fd ff59 	bl	8003a24 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8005b72:	480a      	ldr	r0, [pc, #40]	; (8005b9c <cppFlip1ms+0x4c>)
 8005b74:	f7fd f93a 	bl	8002dec <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8005b78:	4809      	ldr	r0, [pc, #36]	; (8005ba0 <cppFlip1ms+0x50>)
 8005b7a:	f7fc ff79 	bl	8002a70 <_ZN5Motor9motorCtrlEv>
		odometry.clearPotition();
	}
	*/


	encoder.clearCnt();
 8005b7e:	4804      	ldr	r0, [pc, #16]	; (8005b90 <cppFlip1ms+0x40>)
 8005b80:	f7fb fc1a 	bl	80013b8 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8005b84:	bf00      	nop
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	20000264 	.word	0x20000264
 8005b8c:	20000580 	.word	0x20000580
 8005b90:	2001f1d8 	.word	0x2001f1d8
 8005b94:	2001f248 	.word	0x2001f248
 8005b98:	2001f208 	.word	0x2001f208
 8005b9c:	2001f2a8 	.word	0x2001f2a8
 8005ba0:	20000568 	.word	0x20000568

08005ba4 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8005ba8:	4802      	ldr	r0, [pc, #8]	; (8005bb4 <cppFlip100ns+0x10>)
 8005baa:	f7fc fb69 	bl	8002280 <_ZN10LineSensor17storeSensorValuesEv>
}
 8005bae:	bf00      	nop
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20000264 	.word	0x20000264

08005bb8 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8005bb8:	b5b0      	push	{r4, r5, r7, lr}
 8005bba:	ed2d 8b04 	vpush	{d8-d9}
 8005bbe:	af00      	add	r7, sp, #0
	logger.storeLog(line_sensor.sensor[7]);
 8005bc0:	4b49      	ldr	r3, [pc, #292]	; (8005ce8 <cppFlip10ms+0x130>)
 8005bc2:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 8005bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8005bca:	4848      	ldr	r0, [pc, #288]	; (8005cec <cppFlip10ms+0x134>)
 8005bcc:	f7fc fe9e 	bl	800290c <_ZN6Logger8storeLogEf>

	path_following.setGain(0.0, 0.0, 0.0);
 8005bd0:	ed9f 2b41 	vldr	d2, [pc, #260]	; 8005cd8 <cppFlip10ms+0x120>
 8005bd4:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8005cd8 <cppFlip10ms+0x120>
 8005bd8:	ed9f 0b3f 	vldr	d0, [pc, #252]	; 8005cd8 <cppFlip10ms+0x120>
 8005bdc:	4844      	ldr	r0, [pc, #272]	; (8005cf0 <cppFlip10ms+0x138>)
 8005bde:	f7fd fa1b 	bl	8003018 <_ZN13PathFollowing7setGainEddd>
	static double x, y, th;
	if(flag == true){
 8005be2:	4b44      	ldr	r3, [pc, #272]	; (8005cf4 <cppFlip10ms+0x13c>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d028      	beq.n	8005c3c <cppFlip10ms+0x84>
		x += 0.001;
 8005bea:	4b43      	ldr	r3, [pc, #268]	; (8005cf8 <cppFlip10ms+0x140>)
 8005bec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005bf0:	a33b      	add	r3, pc, #236	; (adr r3, 8005ce0 <cppFlip10ms+0x128>)
 8005bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf6:	f7fa fb61 	bl	80002bc <__adddf3>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	4a3e      	ldr	r2, [pc, #248]	; (8005cf8 <cppFlip10ms+0x140>)
 8005c00:	e9c2 3400 	strd	r3, r4, [r2]
		y += 0.00;
 8005c04:	4b3d      	ldr	r3, [pc, #244]	; (8005cfc <cppFlip10ms+0x144>)
 8005c06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	f04f 0300 	mov.w	r3, #0
 8005c12:	f7fa fb53 	bl	80002bc <__adddf3>
 8005c16:	4603      	mov	r3, r0
 8005c18:	460c      	mov	r4, r1
 8005c1a:	4a38      	ldr	r2, [pc, #224]	; (8005cfc <cppFlip10ms+0x144>)
 8005c1c:	e9c2 3400 	strd	r3, r4, [r2]
		th += 0.00;
 8005c20:	4b37      	ldr	r3, [pc, #220]	; (8005d00 <cppFlip10ms+0x148>)
 8005c22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	f7fa fb45 	bl	80002bc <__adddf3>
 8005c32:	4603      	mov	r3, r0
 8005c34:	460c      	mov	r4, r1
 8005c36:	4a32      	ldr	r2, [pc, #200]	; (8005d00 <cppFlip10ms+0x148>)
 8005c38:	e9c2 3400 	strd	r3, r4, [r2]
	}
	//path_following.setTargetPathSingle(x, y, th);
	path_following.setCurrentPath(odometry.getX(), odometry.getY(), odometry.getTheta());
 8005c3c:	4831      	ldr	r0, [pc, #196]	; (8005d04 <cppFlip10ms+0x14c>)
 8005c3e:	f7fd f8e0 	bl	8002e02 <_ZN8Odometry4getXEv>
 8005c42:	eeb0 8a40 	vmov.f32	s16, s0
 8005c46:	eef0 8a60 	vmov.f32	s17, s1
 8005c4a:	482e      	ldr	r0, [pc, #184]	; (8005d04 <cppFlip10ms+0x14c>)
 8005c4c:	f7fd f8ea 	bl	8002e24 <_ZN8Odometry4getYEv>
 8005c50:	eeb0 9a40 	vmov.f32	s18, s0
 8005c54:	eef0 9a60 	vmov.f32	s19, s1
 8005c58:	482a      	ldr	r0, [pc, #168]	; (8005d04 <cppFlip10ms+0x14c>)
 8005c5a:	f7fd f8f4 	bl	8002e46 <_ZN8Odometry8getThetaEv>
 8005c5e:	eeb0 7a40 	vmov.f32	s14, s0
 8005c62:	eef0 7a60 	vmov.f32	s15, s1
 8005c66:	eeb0 2a47 	vmov.f32	s4, s14
 8005c6a:	eef0 2a67 	vmov.f32	s5, s15
 8005c6e:	eeb0 1a49 	vmov.f32	s2, s18
 8005c72:	eef0 1a69 	vmov.f32	s3, s19
 8005c76:	eeb0 0a48 	vmov.f32	s0, s16
 8005c7a:	eef0 0a68 	vmov.f32	s1, s17
 8005c7e:	481c      	ldr	r0, [pc, #112]	; (8005cf0 <cppFlip10ms+0x138>)
 8005c80:	f7fd fb34 	bl	80032ec <_ZN13PathFollowing14setCurrentPathEddd>
	path_following.targetUpdate();
 8005c84:	481a      	ldr	r0, [pc, #104]	; (8005cf0 <cppFlip10ms+0x138>)
 8005c86:	f7fd fa1b 	bl	80030c0 <_ZN13PathFollowing12targetUpdateEv>
	path_following.flip();
 8005c8a:	4819      	ldr	r0, [pc, #100]	; (8005cf0 <cppFlip10ms+0x138>)
 8005c8c:	f7fd fb68 	bl	8003360 <_ZN13PathFollowing4flipEv>

	path_following.getTargetVelocitys(mon_v, mon_w);
 8005c90:	4a1d      	ldr	r2, [pc, #116]	; (8005d08 <cppFlip10ms+0x150>)
 8005c92:	491e      	ldr	r1, [pc, #120]	; (8005d0c <cppFlip10ms+0x154>)
 8005c94:	4816      	ldr	r0, [pc, #88]	; (8005cf0 <cppFlip10ms+0x138>)
 8005c96:	f7fd fb49 	bl	800332c <_ZN13PathFollowing18getTargetVelocitysERdS0_>

	velocity_ctrl.setVelocity(mon_v, mon_w);
 8005c9a:	4b1c      	ldr	r3, [pc, #112]	; (8005d0c <cppFlip10ms+0x154>)
 8005c9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	4621      	mov	r1, r4
 8005ca4:	f7fa ffb8 	bl	8000c18 <__aeabi_d2f>
 8005ca8:	4605      	mov	r5, r0
 8005caa:	4b17      	ldr	r3, [pc, #92]	; (8005d08 <cppFlip10ms+0x150>)
 8005cac:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	4621      	mov	r1, r4
 8005cb4:	f7fa ffb0 	bl	8000c18 <__aeabi_d2f>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	ee00 3a90 	vmov	s1, r3
 8005cbe:	ee00 5a10 	vmov	s0, r5
 8005cc2:	4813      	ldr	r0, [pc, #76]	; (8005d10 <cppFlip10ms+0x158>)
 8005cc4:	f7fd fe68 	bl	8003998 <_ZN12VelocityCtrl11setVelocityEff>
}
 8005cc8:	bf00      	nop
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	ecbd 8b04 	vpop	{d8-d9}
 8005cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	f3af 8000 	nop.w
	...
 8005ce0:	d2f1a9fc 	.word	0xd2f1a9fc
 8005ce4:	3f50624d 	.word	0x3f50624d
 8005ce8:	20000264 	.word	0x20000264
 8005cec:	200005a0 	.word	0x200005a0
 8005cf0:	2001f2d8 	.word	0x2001f2d8
 8005cf4:	20036a20 	.word	0x20036a20
 8005cf8:	20036a28 	.word	0x20036a28
 8005cfc:	20036a30 	.word	0x20036a30
 8005d00:	20036a38 	.word	0x20036a38
 8005d04:	2001f2a8 	.word	0x2001f2a8
 8005d08:	20036a18 	.word	0x20036a18
 8005d0c:	20036a10 	.word	0x20036a10
 8005d10:	2001f208 	.word	0x2001f208

08005d14 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8005d1e:	88fb      	ldrh	r3, [r7, #6]
 8005d20:	4619      	mov	r1, r3
 8005d22:	4803      	ldr	r0, [pc, #12]	; (8005d30 <cppExit+0x1c>)
 8005d24:	f7fd fc28 	bl	8003578 <_ZN10SideSensor12updateStatusEt>
}
 8005d28:	bf00      	nop
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	2000055c 	.word	0x2000055c
 8005d34:	00000000 	.word	0x00000000

08005d38 <cppLoop>:

void cppLoop(void)
{
 8005d38:	b590      	push	{r4, r7, lr}
 8005d3a:	b089      	sub	sp, #36	; 0x24
 8005d3c:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 8005d3e:	48be      	ldr	r0, [pc, #760]	; (8006038 <cppLoop+0x300>)
 8005d40:	f7fd fbc0 	bl	80034c4 <_ZN12RotarySwitch8getValueEv>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b0f      	cmp	r3, #15
 8005d48:	f200 82d5 	bhi.w	80062f6 <cppLoop+0x5be>
 8005d4c:	a201      	add	r2, pc, #4	; (adr r2, 8005d54 <cppLoop+0x1c>)
 8005d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d52:	bf00      	nop
 8005d54:	08005d95 	.word	0x08005d95
 8005d58:	08005db7 	.word	0x08005db7
 8005d5c:	08005e3f 	.word	0x08005e3f
 8005d60:	08005eeb 	.word	0x08005eeb
 8005d64:	08005fa3 	.word	0x08005fa3
 8005d68:	0800609d 	.word	0x0800609d
 8005d6c:	08006167 	.word	0x08006167
 8005d70:	08006221 	.word	0x08006221
 8005d74:	080062f7 	.word	0x080062f7
 8005d78:	080062f7 	.word	0x080062f7
 8005d7c:	080062f7 	.word	0x080062f7
 8005d80:	080062f7 	.word	0x080062f7
 8005d84:	080062f7 	.word	0x080062f7
 8005d88:	080062f7 	.word	0x080062f7
 8005d8c:	080062f7 	.word	0x080062f7
 8005d90:	080062f7 	.word	0x080062f7

	case 0:
		lcd_clear();
 8005d94:	f7fb f984 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005d98:	2100      	movs	r1, #0
 8005d9a:	2000      	movs	r0, #0
 8005d9c:	f7fb f990 	bl	80010c0 <lcd_locate>
		lcd_printf("LCD");
 8005da0:	48a6      	ldr	r0, [pc, #664]	; (800603c <cppLoop+0x304>)
 8005da2:	f7fb f9b7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005da6:	2101      	movs	r1, #1
 8005da8:	2000      	movs	r0, #0
 8005daa:	f7fb f989 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST0");
 8005dae:	48a4      	ldr	r0, [pc, #656]	; (8006040 <cppLoop+0x308>)
 8005db0:	f7fb f9b0 	bl	8001114 <lcd_printf>
		break;
 8005db4:	e2ae      	b.n	8006314 <cppLoop+0x5dc>

	case 1:
		lcd_clear();
 8005db6:	f7fb f973 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005dba:	2100      	movs	r1, #0
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	f7fb f97f 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8005dc2:	48a0      	ldr	r0, [pc, #640]	; (8006044 <cppLoop+0x30c>)
 8005dc4:	f7fb f9a6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005dc8:	2101      	movs	r1, #1
 8005dca:	2000      	movs	r0, #0
 8005dcc:	f7fb f978 	bl	80010c0 <lcd_locate>
		lcd_printf("test");
 8005dd0:	489d      	ldr	r0, [pc, #628]	; (8006048 <cppLoop+0x310>)
 8005dd2:	f7fb f99f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005dd6:	489d      	ldr	r0, [pc, #628]	; (800604c <cppLoop+0x314>)
 8005dd8:	f7fc f882 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	bf0c      	ite	eq
 8005de2:	2301      	moveq	r3, #1
 8005de4:	2300      	movne	r3, #0
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8286 	beq.w	80062fa <cppLoop+0x5c2>
			HAL_Delay(500);
 8005dee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005df2:	f000 fbb5 	bl	8006560 <HAL_Delay>

			logger.start();
 8005df6:	4896      	ldr	r0, [pc, #600]	; (8006050 <cppLoop+0x318>)
 8005df8:	f7fc fdf7 	bl	80029ea <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8005dfc:	4895      	ldr	r0, [pc, #596]	; (8006054 <cppLoop+0x31c>)
 8005dfe:	f7fd fe24 	bl	8003a4a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0.0, 0.0);
 8005e02:	eddf 0a95 	vldr	s1, [pc, #596]	; 8006058 <cppLoop+0x320>
 8005e06:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8006058 <cppLoop+0x320>
 8005e0a:	4892      	ldr	r0, [pc, #584]	; (8006054 <cppLoop+0x31c>)
 8005e0c:	f7fd fdc4 	bl	8003998 <_ZN12VelocityCtrl11setVelocityEff>
			led.LR(1, -1);
 8005e10:	f04f 32ff 	mov.w	r2, #4294967295
 8005e14:	2101      	movs	r1, #1
 8005e16:	4891      	ldr	r0, [pc, #580]	; (800605c <cppLoop+0x324>)
 8005e18:	f7fc f982 	bl	8002120 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8005e1c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005e20:	f000 fb9e 	bl	8006560 <HAL_Delay>

			velocity_ctrl.stop();
 8005e24:	488b      	ldr	r0, [pc, #556]	; (8006054 <cppLoop+0x31c>)
 8005e26:	f7fd fe1f 	bl	8003a68 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 8005e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2e:	2100      	movs	r1, #0
 8005e30:	488a      	ldr	r0, [pc, #552]	; (800605c <cppLoop+0x324>)
 8005e32:	f7fc f975 	bl	8002120 <_ZN3LED2LREaa>

			logger.stop();
 8005e36:	4886      	ldr	r0, [pc, #536]	; (8006050 <cppLoop+0x318>)
 8005e38:	f7fc fde7 	bl	8002a0a <_ZN6Logger4stopEv>
		}

		break;
 8005e3c:	e25d      	b.n	80062fa <cppLoop+0x5c2>

	case 2:
		lcd_clear();
 8005e3e:	f7fb f92f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005e42:	2100      	movs	r1, #0
 8005e44:	2000      	movs	r0, #0
 8005e46:	f7fb f93b 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 8005e4a:	4885      	ldr	r0, [pc, #532]	; (8006060 <cppLoop+0x328>)
 8005e4c:	f7fb f962 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005e50:	2101      	movs	r1, #1
 8005e52:	2000      	movs	r0, #0
 8005e54:	f7fb f934 	bl	80010c0 <lcd_locate>
		lcd_printf("SAVE");
 8005e58:	4882      	ldr	r0, [pc, #520]	; (8006064 <cppLoop+0x32c>)
 8005e5a:	f7fb f95b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005e5e:	487b      	ldr	r0, [pc, #492]	; (800604c <cppLoop+0x314>)
 8005e60:	f7fc f83e 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	bf0c      	ite	eq
 8005e6a:	2301      	moveq	r3, #1
 8005e6c:	2300      	movne	r3, #0
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 8244 	beq.w	80062fe <cppLoop+0x5c6>
			led.LR(-1, 1);
 8005e76:	2201      	movs	r2, #1
 8005e78:	f04f 31ff 	mov.w	r1, #4294967295
 8005e7c:	4877      	ldr	r0, [pc, #476]	; (800605c <cppLoop+0x324>)
 8005e7e:	f7fc f94f 	bl	8002120 <_ZN3LED2LREaa>

			HAL_Delay(1000);
 8005e82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e86:	f000 fb6b 	bl	8006560 <HAL_Delay>
			float f = 0.123456789123456789123456789;
 8005e8a:	4b77      	ldr	r3, [pc, #476]	; (8006068 <cppLoop+0x330>)
 8005e8c:	617b      	str	r3, [r7, #20]
			double d = 0.123456789123456789123456789;
 8005e8e:	a468      	add	r4, pc, #416	; (adr r4, 8006030 <cppLoop+0x2f8>)
 8005e90:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005e94:	e9c7 3402 	strd	r3, r4, [r7, #8]
			mon_f = f;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fa fb6c 	bl	8000578 <__aeabi_f2d>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	4a71      	ldr	r2, [pc, #452]	; (800606c <cppLoop+0x334>)
 8005ea6:	e9c2 3400 	strd	r3, r4, [r2]
			mon_d = d;
 8005eaa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005eae:	4a70      	ldr	r2, [pc, #448]	; (8006070 <cppLoop+0x338>)
 8005eb0:	e9c2 3400 	strd	r3, r4, [r2]
			sd_write_array_float("type test", "float.txt", 1, &f, OVER_WRITE);
 8005eb4:	f107 0214 	add.w	r2, r7, #20
 8005eb8:	2300      	movs	r3, #0
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	496c      	ldr	r1, [pc, #432]	; (8006074 <cppLoop+0x33c>)
 8005ec2:	486d      	ldr	r0, [pc, #436]	; (8006078 <cppLoop+0x340>)
 8005ec4:	f7fb fb34 	bl	8001530 <sd_write_array_float>
			sd_write_array_double("type test", "double.txt", 1, &d, OVER_WRITE);
 8005ec8:	f107 0208 	add.w	r2, r7, #8
 8005ecc:	2300      	movs	r3, #0
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	4969      	ldr	r1, [pc, #420]	; (800607c <cppLoop+0x344>)
 8005ed6:	4868      	ldr	r0, [pc, #416]	; (8006078 <cppLoop+0x340>)
 8005ed8:	f7fb fb90 	bl	80015fc <sd_write_array_double>

			led.LR(-1, 0);
 8005edc:	2200      	movs	r2, #0
 8005ede:	f04f 31ff 	mov.w	r1, #4294967295
 8005ee2:	485e      	ldr	r0, [pc, #376]	; (800605c <cppLoop+0x324>)
 8005ee4:	f7fc f91c 	bl	8002120 <_ZN3LED2LREaa>
		}
		break;
 8005ee8:	e209      	b.n	80062fe <cppLoop+0x5c6>

	case 3:
		led.fullColor('C');
 8005eea:	2143      	movs	r1, #67	; 0x43
 8005eec:	485b      	ldr	r0, [pc, #364]	; (800605c <cppLoop+0x324>)
 8005eee:	f7fc f85b 	bl	8001fa8 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005ef2:	f7fb f8d5 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	2000      	movs	r0, #0
 8005efa:	f7fb f8e1 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8005efe:	4860      	ldr	r0, [pc, #384]	; (8006080 <cppLoop+0x348>)
 8005f00:	f7fb f908 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005f04:	2101      	movs	r1, #1
 8005f06:	2000      	movs	r0, #0
 8005f08:	f7fb f8da 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005f0c:	485d      	ldr	r0, [pc, #372]	; (8006084 <cppLoop+0x34c>)
 8005f0e:	f7fb f901 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005f12:	484e      	ldr	r0, [pc, #312]	; (800604c <cppLoop+0x314>)
 8005f14:	f7fb ffe4 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	bf0c      	ite	eq
 8005f1e:	2301      	moveq	r3, #1
 8005f20:	2300      	movne	r3, #0
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 81ec 	beq.w	8006302 <cppLoop+0x5ca>
			led.LR(-1, 1);
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f30:	484a      	ldr	r0, [pc, #296]	; (800605c <cppLoop+0x324>)
 8005f32:	f7fc f8f5 	bl	8002120 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005f36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f3a:	f000 fb11 	bl	8006560 <HAL_Delay>

			logger.start();
 8005f3e:	4844      	ldr	r0, [pc, #272]	; (8006050 <cppLoop+0x318>)
 8005f40:	f7fc fd53 	bl	80029ea <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8005f44:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8006088 <cppLoop+0x350>
 8005f48:	4850      	ldr	r0, [pc, #320]	; (800608c <cppLoop+0x354>)
 8005f4a:	f7fc fbfa 	bl	8002742 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8005f4e:	484f      	ldr	r0, [pc, #316]	; (800608c <cppLoop+0x354>)
 8005f50:	f7fc fc4e 	bl	80027f0 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8005f54:	f241 3088 	movw	r0, #5000	; 0x1388
 8005f58:	f000 fb02 	bl	8006560 <HAL_Delay>

			logger.stop();
 8005f5c:	483c      	ldr	r0, [pc, #240]	; (8006050 <cppLoop+0x318>)
 8005f5e:	f7fc fd54 	bl	8002a0a <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8005f62:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8006088 <cppLoop+0x350>
 8005f66:	4849      	ldr	r0, [pc, #292]	; (800608c <cppLoop+0x354>)
 8005f68:	f7fc fbeb 	bl	8002742 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8005f6c:	4847      	ldr	r0, [pc, #284]	; (800608c <cppLoop+0x354>)
 8005f6e:	f7fc fc4f 	bl	8002810 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8005f72:	f04f 32ff 	mov.w	r2, #4294967295
 8005f76:	2101      	movs	r1, #1
 8005f78:	4838      	ldr	r0, [pc, #224]	; (800605c <cppLoop+0x324>)
 8005f7a:	f7fc f8d1 	bl	8002120 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 8005f7e:	4a44      	ldr	r2, [pc, #272]	; (8006090 <cppLoop+0x358>)
 8005f80:	4944      	ldr	r1, [pc, #272]	; (8006094 <cppLoop+0x35c>)
 8005f82:	4833      	ldr	r0, [pc, #204]	; (8006050 <cppLoop+0x318>)
 8005f84:	f7fc fcfa 	bl	800297c <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8005f88:	f04f 32ff 	mov.w	r2, #4294967295
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	4833      	ldr	r0, [pc, #204]	; (800605c <cppLoop+0x324>)
 8005f90:	f7fc f8c6 	bl	8002120 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8005f94:	2200      	movs	r2, #0
 8005f96:	f04f 31ff 	mov.w	r1, #4294967295
 8005f9a:	4830      	ldr	r0, [pc, #192]	; (800605c <cppLoop+0x324>)
 8005f9c:	f7fc f8c0 	bl	8002120 <_ZN3LED2LREaa>
		}

		break;
 8005fa0:	e1af      	b.n	8006302 <cppLoop+0x5ca>

	case 4:
		led.fullColor('M');
 8005fa2:	214d      	movs	r1, #77	; 0x4d
 8005fa4:	482d      	ldr	r0, [pc, #180]	; (800605c <cppLoop+0x324>)
 8005fa6:	f7fb ffff 	bl	8001fa8 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005faa:	f7fb f879 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005fae:	2100      	movs	r1, #0
 8005fb0:	2000      	movs	r0, #0
 8005fb2:	f7fb f885 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8005fb6:	4838      	ldr	r0, [pc, #224]	; (8006098 <cppLoop+0x360>)
 8005fb8:	f7fb f8ac 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	f7fb f87e 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005fc4:	482f      	ldr	r0, [pc, #188]	; (8006084 <cppLoop+0x34c>)
 8005fc6:	f7fb f8a5 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005fca:	4820      	ldr	r0, [pc, #128]	; (800604c <cppLoop+0x314>)
 8005fcc:	f7fb ff88 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	bf0c      	ite	eq
 8005fd6:	2301      	moveq	r3, #1
 8005fd8:	2300      	movne	r3, #0
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8192 	beq.w	8006306 <cppLoop+0x5ce>
			led.LR(-1, 1);
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8005fe8:	481c      	ldr	r0, [pc, #112]	; (800605c <cppLoop+0x324>)
 8005fea:	f7fc f899 	bl	8002120 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005fee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ff2:	f000 fab5 	bl	8006560 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8005ff6:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8006088 <cppLoop+0x350>
 8005ffa:	4824      	ldr	r0, [pc, #144]	; (800608c <cppLoop+0x354>)
 8005ffc:	f7fc fbb0 	bl	8002760 <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8006000:	4814      	ldr	r0, [pc, #80]	; (8006054 <cppLoop+0x31c>)
 8006002:	f7fd fd22 	bl	8003a4a <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8006006:	4821      	ldr	r0, [pc, #132]	; (800608c <cppLoop+0x354>)
 8006008:	f7fc fbf2 	bl	80027f0 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 800600c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006010:	f000 faa6 	bl	8006560 <HAL_Delay>

			line_trace.stop();
 8006014:	481d      	ldr	r0, [pc, #116]	; (800608c <cppLoop+0x354>)
 8006016:	f7fc fbfb 	bl	8002810 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 800601a:	480e      	ldr	r0, [pc, #56]	; (8006054 <cppLoop+0x31c>)
 800601c:	f7fd fd24 	bl	8003a68 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8006020:	2200      	movs	r2, #0
 8006022:	f04f 31ff 	mov.w	r1, #4294967295
 8006026:	480d      	ldr	r0, [pc, #52]	; (800605c <cppLoop+0x324>)
 8006028:	f7fc f87a 	bl	8002120 <_ZN3LED2LREaa>
		}
		break;
 800602c:	e16b      	b.n	8006306 <cppLoop+0x5ce>
 800602e:	bf00      	nop
 8006030:	37c1215e 	.word	0x37c1215e
 8006034:	3fbf9add 	.word	0x3fbf9add
 8006038:	20000564 	.word	0x20000564
 800603c:	08017c4c 	.word	0x08017c4c
 8006040:	08017c50 	.word	0x08017c50
 8006044:	08017c58 	.word	0x08017c58
 8006048:	08017c64 	.word	0x08017c64
 800604c:	20000560 	.word	0x20000560
 8006050:	200005a0 	.word	0x200005a0
 8006054:	2001f208 	.word	0x2001f208
 8006058:	00000000 	.word	0x00000000
 800605c:	2000056c 	.word	0x2000056c
 8006060:	08017c6c 	.word	0x08017c6c
 8006064:	08017c70 	.word	0x08017c70
 8006068:	3dfcd6ea 	.word	0x3dfcd6ea
 800606c:	20036a00 	.word	0x20036a00
 8006070:	20036a08 	.word	0x20036a08
 8006074:	08017c78 	.word	0x08017c78
 8006078:	08017c84 	.word	0x08017c84
 800607c:	08017c90 	.word	0x08017c90
 8006080:	08017c9c 	.word	0x08017c9c
 8006084:	08017ca4 	.word	0x08017ca4
 8006088:	3dcccccd 	.word	0x3dcccccd
 800608c:	2001f248 	.word	0x2001f248
 8006090:	08017cac 	.word	0x08017cac
 8006094:	08017cb8 	.word	0x08017cb8
 8006098:	08017cc8 	.word	0x08017cc8

	case 5:
		led.fullColor('Y');
 800609c:	2159      	movs	r1, #89	; 0x59
 800609e:	48a1      	ldr	r0, [pc, #644]	; (8006324 <cppLoop+0x5ec>)
 80060a0:	f7fb ff82 	bl	8001fa8 <_ZN3LED9fullColorEc>

		lcd_clear();
 80060a4:	f7fa fffc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80060a8:	2100      	movs	r1, #0
 80060aa:	2000      	movs	r0, #0
 80060ac:	f7fb f808 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80060b0:	489d      	ldr	r0, [pc, #628]	; (8006328 <cppLoop+0x5f0>)
 80060b2:	f7fb f82f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80060b6:	2101      	movs	r1, #1
 80060b8:	2000      	movs	r0, #0
 80060ba:	f7fb f801 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80060be:	489b      	ldr	r0, [pc, #620]	; (800632c <cppLoop+0x5f4>)
 80060c0:	f7fb f828 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80060c4:	489a      	ldr	r0, [pc, #616]	; (8006330 <cppLoop+0x5f8>)
 80060c6:	f7fb ff0b 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	bf0c      	ite	eq
 80060d0:	2301      	moveq	r3, #1
 80060d2:	2300      	movne	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 8117 	beq.w	800630a <cppLoop+0x5d2>
			led.LR(-1, 1);
 80060dc:	2201      	movs	r2, #1
 80060de:	f04f 31ff 	mov.w	r1, #4294967295
 80060e2:	4890      	ldr	r0, [pc, #576]	; (8006324 <cppLoop+0x5ec>)
 80060e4:	f7fc f81c 	bl	8002120 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80060e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80060ec:	f000 fa38 	bl	8006560 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 80060f0:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8006334 <cppLoop+0x5fc>
 80060f4:	4890      	ldr	r0, [pc, #576]	; (8006338 <cppLoop+0x600>)
 80060f6:	f7fc fb24 	bl	8002742 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80060fa:	488f      	ldr	r0, [pc, #572]	; (8006338 <cppLoop+0x600>)
 80060fc:	f7fc fb78 	bl	80027f0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006100:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006104:	f000 fa2c 	bl	8006560 <HAL_Delay>

			led.fullColor('R');
 8006108:	2152      	movs	r1, #82	; 0x52
 800610a:	4886      	ldr	r0, [pc, #536]	; (8006324 <cppLoop+0x5ec>)
 800610c:	f7fb ff4c 	bl	8001fa8 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006110:	488a      	ldr	r0, [pc, #552]	; (800633c <cppLoop+0x604>)
 8006112:	f7fb f97b 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006116:	4889      	ldr	r0, [pc, #548]	; (800633c <cppLoop+0x604>)
 8006118:	f7fb f93e 	bl	8001398 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 800611c:	f242 7010 	movw	r0, #10000	; 0x2710
 8006120:	f000 fa1e 	bl	8006560 <HAL_Delay>

			line_trace.stop();
 8006124:	4884      	ldr	r0, [pc, #528]	; (8006338 <cppLoop+0x600>)
 8006126:	f7fc fb73 	bl	8002810 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800612a:	4985      	ldr	r1, [pc, #532]	; (8006340 <cppLoop+0x608>)
 800612c:	4885      	ldr	r0, [pc, #532]	; (8006344 <cppLoop+0x60c>)
 800612e:	f7fb f98b 	bl	8001448 <user_fopen>
			float d = encoder.getDistance();
 8006132:	4882      	ldr	r0, [pc, #520]	; (800633c <cppLoop+0x604>)
 8006134:	f7fb f91f 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 8006138:	ec54 3b10 	vmov	r3, r4, d0
 800613c:	4618      	mov	r0, r3
 800613e:	4621      	mov	r1, r4
 8006140:	f7fa fd6a 	bl	8000c18 <__aeabi_d2f>
 8006144:	4603      	mov	r3, r0
 8006146:	607b      	str	r3, [r7, #4]
			sd_write(1, &d, ADD_WRITE);
 8006148:	1d3b      	adds	r3, r7, #4
 800614a:	2201      	movs	r2, #1
 800614c:	4619      	mov	r1, r3
 800614e:	2001      	movs	r0, #1
 8006150:	f7fb f99c 	bl	800148c <sd_write>
			user_fclose();
 8006154:	f7fb f98a 	bl	800146c <user_fclose>

			led.LR(-1, 0);
 8006158:	2200      	movs	r2, #0
 800615a:	f04f 31ff 	mov.w	r1, #4294967295
 800615e:	4871      	ldr	r0, [pc, #452]	; (8006324 <cppLoop+0x5ec>)
 8006160:	f7fb ffde 	bl	8002120 <_ZN3LED2LREaa>
		}

		break;
 8006164:	e0d1      	b.n	800630a <cppLoop+0x5d2>

	case 6:
		led.fullColor('C');
 8006166:	2143      	movs	r1, #67	; 0x43
 8006168:	486e      	ldr	r0, [pc, #440]	; (8006324 <cppLoop+0x5ec>)
 800616a:	f7fb ff1d 	bl	8001fa8 <_ZN3LED9fullColorEc>

		lcd_clear();
 800616e:	f7fa ff97 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006172:	2100      	movs	r1, #0
 8006174:	2000      	movs	r0, #0
 8006176:	f7fa ffa3 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 800617a:	4873      	ldr	r0, [pc, #460]	; (8006348 <cppLoop+0x610>)
 800617c:	f7fa ffca 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006180:	2101      	movs	r1, #1
 8006182:	2000      	movs	r0, #0
 8006184:	f7fa ff9c 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006188:	4870      	ldr	r0, [pc, #448]	; (800634c <cppLoop+0x614>)
 800618a:	f7fa ffc3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800618e:	4868      	ldr	r0, [pc, #416]	; (8006330 <cppLoop+0x5f8>)
 8006190:	f7fb fea6 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 8006194:	4603      	mov	r3, r0
 8006196:	2b02      	cmp	r3, #2
 8006198:	bf0c      	ite	eq
 800619a:	2301      	moveq	r3, #1
 800619c:	2300      	movne	r3, #0
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 80b4 	beq.w	800630e <cppLoop+0x5d6>
			HAL_Delay(500);
 80061a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80061aa:	f000 f9d9 	bl	8006560 <HAL_Delay>
			led.LR(-1, 1);
 80061ae:	2201      	movs	r2, #1
 80061b0:	f04f 31ff 	mov.w	r1, #4294967295
 80061b4:	485b      	ldr	r0, [pc, #364]	; (8006324 <cppLoop+0x5ec>)
 80061b6:	f7fb ffb3 	bl	8002120 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.1);
 80061ba:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8006350 <cppLoop+0x618>
 80061be:	485e      	ldr	r0, [pc, #376]	; (8006338 <cppLoop+0x600>)
 80061c0:	f7fc fabf 	bl	8002742 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80061c4:	485c      	ldr	r0, [pc, #368]	; (8006338 <cppLoop+0x600>)
 80061c6:	f7fc fb13 	bl	80027f0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80061ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80061ce:	f000 f9c7 	bl	8006560 <HAL_Delay>

			led.fullColor('R');
 80061d2:	2152      	movs	r1, #82	; 0x52
 80061d4:	4853      	ldr	r0, [pc, #332]	; (8006324 <cppLoop+0x5ec>)
 80061d6:	f7fb fee7 	bl	8001fa8 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 80061da:	4858      	ldr	r0, [pc, #352]	; (800633c <cppLoop+0x604>)
 80061dc:	f7fb f916 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 80061e0:	4856      	ldr	r0, [pc, #344]	; (800633c <cppLoop+0x604>)
 80061e2:	f7fb f8d9 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 80061e6:	485b      	ldr	r0, [pc, #364]	; (8006354 <cppLoop+0x61c>)
 80061e8:	f7fc fe3e 	bl	8002e68 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 80061ec:	485a      	ldr	r0, [pc, #360]	; (8006358 <cppLoop+0x620>)
 80061ee:	f7fc fbfc 	bl	80029ea <_ZN6Logger5startEv>

			HAL_Delay(10000);
 80061f2:	f242 7010 	movw	r0, #10000	; 0x2710
 80061f6:	f000 f9b3 	bl	8006560 <HAL_Delay>

			line_trace.stop();
 80061fa:	484f      	ldr	r0, [pc, #316]	; (8006338 <cppLoop+0x600>)
 80061fc:	f7fc fb08 	bl	8002810 <_ZN9LineTrace4stopEv>
			logger.stop();
 8006200:	4855      	ldr	r0, [pc, #340]	; (8006358 <cppLoop+0x620>)
 8006202:	f7fc fc02 	bl	8002a0a <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Position", "delta_distance.txt", "delta_theta.txt");
 8006206:	4b55      	ldr	r3, [pc, #340]	; (800635c <cppLoop+0x624>)
 8006208:	4a55      	ldr	r2, [pc, #340]	; (8006360 <cppLoop+0x628>)
 800620a:	494f      	ldr	r1, [pc, #316]	; (8006348 <cppLoop+0x610>)
 800620c:	4852      	ldr	r0, [pc, #328]	; (8006358 <cppLoop+0x620>)
 800620e:	f7fc fbc9 	bl	80029a4 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 8006212:	2200      	movs	r2, #0
 8006214:	f04f 31ff 	mov.w	r1, #4294967295
 8006218:	4842      	ldr	r0, [pc, #264]	; (8006324 <cppLoop+0x5ec>)
 800621a:	f7fb ff81 	bl	8002120 <_ZN3LED2LREaa>
		}

		break;
 800621e:	e076      	b.n	800630e <cppLoop+0x5d6>

	case 7:
		led.fullColor('M');
 8006220:	214d      	movs	r1, #77	; 0x4d
 8006222:	4840      	ldr	r0, [pc, #256]	; (8006324 <cppLoop+0x5ec>)
 8006224:	f7fb fec0 	bl	8001fa8 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006228:	f7fa ff3a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800622c:	2100      	movs	r1, #0
 800622e:	2000      	movs	r0, #0
 8006230:	f7fa ff46 	bl	80010c0 <lcd_locate>
		lcd_printf("Path");
 8006234:	484b      	ldr	r0, [pc, #300]	; (8006364 <cppLoop+0x62c>)
 8006236:	f7fa ff6d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800623a:	2101      	movs	r1, #1
 800623c:	2000      	movs	r0, #0
 800623e:	f7fa ff3f 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8006242:	483a      	ldr	r0, [pc, #232]	; (800632c <cppLoop+0x5f4>)
 8006244:	f7fa ff66 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 8006248:	4839      	ldr	r0, [pc, #228]	; (8006330 <cppLoop+0x5f8>)
 800624a:	f7fb fe49 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 800624e:	4603      	mov	r3, r0
 8006250:	2b04      	cmp	r3, #4
 8006252:	bf0c      	ite	eq
 8006254:	2301      	moveq	r3, #1
 8006256:	2300      	movne	r3, #0
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00f      	beq.n	800627e <cppLoop+0x546>
			led.LR(-1, 1);
 800625e:	2201      	movs	r2, #1
 8006260:	f04f 31ff 	mov.w	r1, #4294967295
 8006264:	482f      	ldr	r0, [pc, #188]	; (8006324 <cppLoop+0x5ec>)
 8006266:	f7fb ff5b 	bl	8002120 <_ZN3LED2LREaa>
			path_following.setTargetPathMulti();
 800626a:	483f      	ldr	r0, [pc, #252]	; (8006368 <cppLoop+0x630>)
 800626c:	f7fc fef4 	bl	8003058 <_ZN13PathFollowing18setTargetPathMultiEv>
			led.LR(-1, 0);
 8006270:	2200      	movs	r2, #0
 8006272:	f04f 31ff 	mov.w	r1, #4294967295
 8006276:	482b      	ldr	r0, [pc, #172]	; (8006324 <cppLoop+0x5ec>)
 8006278:	f7fb ff52 	bl	8002120 <_ZN3LED2LREaa>
			velocity_ctrl.stop();
			flag = false;

			led.LR(-1, 0);
		}
		break;
 800627c:	e049      	b.n	8006312 <cppLoop+0x5da>
		else if(joy_stick.getValue() == JOY_C){
 800627e:	482c      	ldr	r0, [pc, #176]	; (8006330 <cppLoop+0x5f8>)
 8006280:	f7fb fe2e 	bl	8001ee0 <_ZN8JoyStick8getValueEv>
 8006284:	4603      	mov	r3, r0
 8006286:	2b02      	cmp	r3, #2
 8006288:	bf0c      	ite	eq
 800628a:	2301      	moveq	r3, #1
 800628c:	2300      	movne	r3, #0
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	d03e      	beq.n	8006312 <cppLoop+0x5da>
			led.LR(-1, 1);
 8006294:	2201      	movs	r2, #1
 8006296:	f04f 31ff 	mov.w	r1, #4294967295
 800629a:	4822      	ldr	r0, [pc, #136]	; (8006324 <cppLoop+0x5ec>)
 800629c:	f7fb ff40 	bl	8002120 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80062a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80062a4:	f000 f95c 	bl	8006560 <HAL_Delay>
			led.fullColor('R');
 80062a8:	2152      	movs	r1, #82	; 0x52
 80062aa:	481e      	ldr	r0, [pc, #120]	; (8006324 <cppLoop+0x5ec>)
 80062ac:	f7fb fe7c 	bl	8001fa8 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 80062b0:	4822      	ldr	r0, [pc, #136]	; (800633c <cppLoop+0x604>)
 80062b2:	f7fb f8ab 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 80062b6:	4821      	ldr	r0, [pc, #132]	; (800633c <cppLoop+0x604>)
 80062b8:	f7fb f86e 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 80062bc:	4825      	ldr	r0, [pc, #148]	; (8006354 <cppLoop+0x61c>)
 80062be:	f7fc fdd3 	bl	8002e68 <_ZN8Odometry13clearPotitionEv>
			path_following.start();
 80062c2:	4829      	ldr	r0, [pc, #164]	; (8006368 <cppLoop+0x630>)
 80062c4:	f7fd f85a 	bl	800337c <_ZN13PathFollowing5startEv>
			flag = true;
 80062c8:	4b28      	ldr	r3, [pc, #160]	; (800636c <cppLoop+0x634>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 80062ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80062d2:	f000 f945 	bl	8006560 <HAL_Delay>
			path_following.stop();
 80062d6:	4824      	ldr	r0, [pc, #144]	; (8006368 <cppLoop+0x630>)
 80062d8:	f7fd f85d 	bl	8003396 <_ZN13PathFollowing4stopEv>
			velocity_ctrl.stop();
 80062dc:	4824      	ldr	r0, [pc, #144]	; (8006370 <cppLoop+0x638>)
 80062de:	f7fd fbc3 	bl	8003a68 <_ZN12VelocityCtrl4stopEv>
			flag = false;
 80062e2:	4b22      	ldr	r3, [pc, #136]	; (800636c <cppLoop+0x634>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	701a      	strb	r2, [r3, #0]
			led.LR(-1, 0);
 80062e8:	2200      	movs	r2, #0
 80062ea:	f04f 31ff 	mov.w	r1, #4294967295
 80062ee:	480d      	ldr	r0, [pc, #52]	; (8006324 <cppLoop+0x5ec>)
 80062f0:	f7fb ff16 	bl	8002120 <_ZN3LED2LREaa>
		break;
 80062f4:	e00d      	b.n	8006312 <cppLoop+0x5da>
	case 15:

		break;

	default:
		break;
 80062f6:	bf00      	nop
 80062f8:	e00c      	b.n	8006314 <cppLoop+0x5dc>
		break;
 80062fa:	bf00      	nop
 80062fc:	e00a      	b.n	8006314 <cppLoop+0x5dc>
		break;
 80062fe:	bf00      	nop
 8006300:	e008      	b.n	8006314 <cppLoop+0x5dc>
		break;
 8006302:	bf00      	nop
 8006304:	e006      	b.n	8006314 <cppLoop+0x5dc>
		break;
 8006306:	bf00      	nop
 8006308:	e004      	b.n	8006314 <cppLoop+0x5dc>
		break;
 800630a:	bf00      	nop
 800630c:	e002      	b.n	8006314 <cppLoop+0x5dc>
		break;
 800630e:	bf00      	nop
 8006310:	e000      	b.n	8006314 <cppLoop+0x5dc>
		break;
 8006312:	bf00      	nop

	}

	HAL_Delay(10);
 8006314:	200a      	movs	r0, #10
 8006316:	f000 f923 	bl	8006560 <HAL_Delay>

}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	bd90      	pop	{r4, r7, pc}
 8006322:	bf00      	nop
 8006324:	2000056c 	.word	0x2000056c
 8006328:	08017cd4 	.word	0x08017cd4
 800632c:	08017cdc 	.word	0x08017cdc
 8006330:	20000560 	.word	0x20000560
 8006334:	00000000 	.word	0x00000000
 8006338:	2001f248 	.word	0x2001f248
 800633c:	2001f1d8 	.word	0x2001f1d8
 8006340:	08017ce8 	.word	0x08017ce8
 8006344:	08017cf0 	.word	0x08017cf0
 8006348:	08017cfc 	.word	0x08017cfc
 800634c:	08017d08 	.word	0x08017d08
 8006350:	3dcccccd 	.word	0x3dcccccd
 8006354:	2001f2a8 	.word	0x2001f2a8
 8006358:	200005a0 	.word	0x200005a0
 800635c:	08017d10 	.word	0x08017d10
 8006360:	08017d20 	.word	0x08017d20
 8006364:	08017d34 	.word	0x08017d34
 8006368:	2001f2d8 	.word	0x2001f2d8
 800636c:	20036a20 	.word	0x20036a20
 8006370:	2001f208 	.word	0x2001f208

08006374 <_Z41__static_initialization_and_destruction_0ii>:
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d12e      	bne.n	80063e2 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800638a:	4293      	cmp	r3, r2
 800638c:	d129      	bne.n	80063e2 <_Z41__static_initialization_and_destruction_0ii+0x6e>
LineSensor line_sensor;
 800638e:	4817      	ldr	r0, [pc, #92]	; (80063ec <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8006390:	f7fb fefe 	bl	8002190 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8006394:	4816      	ldr	r0, [pc, #88]	; (80063f0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8006396:	f7fd f8e3 	bl	8003560 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 800639a:	4816      	ldr	r0, [pc, #88]	; (80063f4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800639c:	f7fb fd94 	bl	8001ec8 <_ZN8JoyStickC1Ev>
Motor motor;
 80063a0:	4815      	ldr	r0, [pc, #84]	; (80063f8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80063a2:	f7fc fb42 	bl	8002a2a <_ZN5MotorC1Ev>
IMU imu;
 80063a6:	4815      	ldr	r0, [pc, #84]	; (80063fc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80063a8:	f7fb fbd2 	bl	8001b50 <_ZN3IMUC1Ev>
Logger logger;
 80063ac:	4814      	ldr	r0, [pc, #80]	; (8006400 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80063ae:	f7fc fa47 	bl	8002840 <_ZN6LoggerC1Ev>
Encoder encoder;
 80063b2:	4814      	ldr	r0, [pc, #80]	; (8006404 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80063b4:	f7fa fece 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80063b8:	4b10      	ldr	r3, [pc, #64]	; (80063fc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80063ba:	4a12      	ldr	r2, [pc, #72]	; (8006404 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80063bc:	490e      	ldr	r1, [pc, #56]	; (80063f8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80063be:	4812      	ldr	r0, [pc, #72]	; (8006408 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80063c0:	f7fd f938 	bl	8003634 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 80063c4:	4b10      	ldr	r3, [pc, #64]	; (8006408 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80063c6:	4a09      	ldr	r2, [pc, #36]	; (80063ec <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80063c8:	490b      	ldr	r1, [pc, #44]	; (80063f8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80063ca:	4810      	ldr	r0, [pc, #64]	; (800640c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80063cc:	f7fc f876 	bl	80024bc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80063d0:	4b0d      	ldr	r3, [pc, #52]	; (8006408 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80063d2:	4a0a      	ldr	r2, [pc, #40]	; (80063fc <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80063d4:	490b      	ldr	r1, [pc, #44]	; (8006404 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80063d6:	480e      	ldr	r0, [pc, #56]	; (8006410 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80063d8:	f7fc fc0c 	bl	8002bf4 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
PathFollowing path_following;
 80063dc:	480d      	ldr	r0, [pc, #52]	; (8006414 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80063de:	f7fc fd61 	bl	8002ea4 <_ZN13PathFollowingC1Ev>
}
 80063e2:	bf00      	nop
 80063e4:	3708      	adds	r7, #8
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000264 	.word	0x20000264
 80063f0:	2000055c 	.word	0x2000055c
 80063f4:	20000560 	.word	0x20000560
 80063f8:	20000568 	.word	0x20000568
 80063fc:	20000580 	.word	0x20000580
 8006400:	200005a0 	.word	0x200005a0
 8006404:	2001f1d8 	.word	0x2001f1d8
 8006408:	2001f208 	.word	0x2001f208
 800640c:	2001f248 	.word	0x2001f248
 8006410:	2001f2a8 	.word	0x2001f2a8
 8006414:	2001f2d8 	.word	0x2001f2d8

08006418 <_GLOBAL__sub_I_line_sensor>:
 8006418:	b580      	push	{r7, lr}
 800641a:	af00      	add	r7, sp, #0
 800641c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006420:	2001      	movs	r0, #1
 8006422:	f7ff ffa7 	bl	8006374 <_Z41__static_initialization_and_destruction_0ii>
 8006426:	bd80      	pop	{r7, pc}

08006428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006460 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800642c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800642e:	e003      	b.n	8006438 <LoopCopyDataInit>

08006430 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006430:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006432:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006434:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006436:	3104      	adds	r1, #4

08006438 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006438:	480b      	ldr	r0, [pc, #44]	; (8006468 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800643a:	4b0c      	ldr	r3, [pc, #48]	; (800646c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800643c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800643e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006440:	d3f6      	bcc.n	8006430 <CopyDataInit>
  ldr  r2, =_sbss
 8006442:	4a0b      	ldr	r2, [pc, #44]	; (8006470 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006444:	e002      	b.n	800644c <LoopFillZerobss>

08006446 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006446:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006448:	f842 3b04 	str.w	r3, [r2], #4

0800644c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800644c:	4b09      	ldr	r3, [pc, #36]	; (8006474 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800644e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006450:	d3f9      	bcc.n	8006446 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006452:	f7ff faa9 	bl	80059a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006456:	f00c fc8b 	bl	8012d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800645a:	f7fd fbe1 	bl	8003c20 <main>
  bx  lr    
 800645e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006460:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8006464:	08018738 	.word	0x08018738
  ldr  r0, =_sdata
 8006468:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800646c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8006470:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006474:	2003b624 	.word	0x2003b624

08006478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006478:	e7fe      	b.n	8006478 <ADC_IRQHandler>
	...

0800647c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006480:	4b0e      	ldr	r3, [pc, #56]	; (80064bc <HAL_Init+0x40>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a0d      	ldr	r2, [pc, #52]	; (80064bc <HAL_Init+0x40>)
 8006486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800648a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800648c:	4b0b      	ldr	r3, [pc, #44]	; (80064bc <HAL_Init+0x40>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a0a      	ldr	r2, [pc, #40]	; (80064bc <HAL_Init+0x40>)
 8006492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006496:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006498:	4b08      	ldr	r3, [pc, #32]	; (80064bc <HAL_Init+0x40>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a07      	ldr	r2, [pc, #28]	; (80064bc <HAL_Init+0x40>)
 800649e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064a4:	2003      	movs	r0, #3
 80064a6:	f000 fd51 	bl	8006f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80064aa:	2000      	movs	r0, #0
 80064ac:	f000 f808 	bl	80064c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80064b0:	f7fe fc68 	bl	8004d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	40023c00 	.word	0x40023c00

080064c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80064c8:	4b12      	ldr	r3, [pc, #72]	; (8006514 <HAL_InitTick+0x54>)
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	4b12      	ldr	r3, [pc, #72]	; (8006518 <HAL_InitTick+0x58>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	4619      	mov	r1, r3
 80064d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80064da:	fbb2 f3f3 	udiv	r3, r2, r3
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fd69 	bl	8006fb6 <HAL_SYSTICK_Config>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e00e      	b.n	800650c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b0f      	cmp	r3, #15
 80064f2:	d80a      	bhi.n	800650a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064f4:	2200      	movs	r2, #0
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	f04f 30ff 	mov.w	r0, #4294967295
 80064fc:	f000 fd31 	bl	8006f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006500:	4a06      	ldr	r2, [pc, #24]	; (800651c <HAL_InitTick+0x5c>)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	e000      	b.n	800650c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
}
 800650c:	4618      	mov	r0, r3
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	20000000 	.word	0x20000000
 8006518:	20000008 	.word	0x20000008
 800651c:	20000004 	.word	0x20000004

08006520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006520:	b480      	push	{r7}
 8006522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006524:	4b06      	ldr	r3, [pc, #24]	; (8006540 <HAL_IncTick+0x20>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	461a      	mov	r2, r3
 800652a:	4b06      	ldr	r3, [pc, #24]	; (8006544 <HAL_IncTick+0x24>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4413      	add	r3, r2
 8006530:	4a04      	ldr	r2, [pc, #16]	; (8006544 <HAL_IncTick+0x24>)
 8006532:	6013      	str	r3, [r2, #0]
}
 8006534:	bf00      	nop
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	20000008 	.word	0x20000008
 8006544:	200395a8 	.word	0x200395a8

08006548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
  return uwTick;
 800654c:	4b03      	ldr	r3, [pc, #12]	; (800655c <HAL_GetTick+0x14>)
 800654e:	681b      	ldr	r3, [r3, #0]
}
 8006550:	4618      	mov	r0, r3
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	200395a8 	.word	0x200395a8

08006560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006568:	f7ff ffee 	bl	8006548 <HAL_GetTick>
 800656c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006578:	d005      	beq.n	8006586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800657a:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <HAL_Delay+0x40>)
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	461a      	mov	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006586:	bf00      	nop
 8006588:	f7ff ffde 	bl	8006548 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	429a      	cmp	r2, r3
 8006596:	d8f7      	bhi.n	8006588 <HAL_Delay+0x28>
  {
  }
}
 8006598:	bf00      	nop
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	20000008 	.word	0x20000008

080065a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e033      	b.n	8006622 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fe fc06 	bl	8004dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065da:	f003 0310 	and.w	r3, r3, #16
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d118      	bne.n	8006614 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80065ea:	f023 0302 	bic.w	r3, r3, #2
 80065ee:	f043 0202 	orr.w	r2, r3, #2
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fa5a 	bl	8006ab0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	f023 0303 	bic.w	r3, r3, #3
 800660a:	f043 0201 	orr.w	r2, r3, #1
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	641a      	str	r2, [r3, #64]	; 0x40
 8006612:	e001      	b.n	8006618 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006620:	7bfb      	ldrb	r3, [r7, #15]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
	...

0800662c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006638:	2300      	movs	r3, #0
 800663a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <HAL_ADC_Start_DMA+0x1e>
 8006646:	2302      	movs	r3, #2
 8006648:	e0cc      	b.n	80067e4 <HAL_ADC_Start_DMA+0x1b8>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b01      	cmp	r3, #1
 800665e:	d018      	beq.n	8006692 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0201 	orr.w	r2, r2, #1
 800666e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006670:	4b5e      	ldr	r3, [pc, #376]	; (80067ec <HAL_ADC_Start_DMA+0x1c0>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a5e      	ldr	r2, [pc, #376]	; (80067f0 <HAL_ADC_Start_DMA+0x1c4>)
 8006676:	fba2 2303 	umull	r2, r3, r2, r3
 800667a:	0c9a      	lsrs	r2, r3, #18
 800667c:	4613      	mov	r3, r2
 800667e:	005b      	lsls	r3, r3, #1
 8006680:	4413      	add	r3, r2
 8006682:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006684:	e002      	b.n	800668c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	3b01      	subs	r3, #1
 800668a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1f9      	bne.n	8006686 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b01      	cmp	r3, #1
 800669e:	f040 80a0 	bne.w	80067e2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80066aa:	f023 0301 	bic.w	r3, r3, #1
 80066ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d007      	beq.n	80066d4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80066cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e0:	d106      	bne.n	80066f0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e6:	f023 0206 	bic.w	r2, r3, #6
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	645a      	str	r2, [r3, #68]	; 0x44
 80066ee:	e002      	b.n	80066f6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80066fe:	4b3d      	ldr	r3, [pc, #244]	; (80067f4 <HAL_ADC_Start_DMA+0x1c8>)
 8006700:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006706:	4a3c      	ldr	r2, [pc, #240]	; (80067f8 <HAL_ADC_Start_DMA+0x1cc>)
 8006708:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670e:	4a3b      	ldr	r2, [pc, #236]	; (80067fc <HAL_ADC_Start_DMA+0x1d0>)
 8006710:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006716:	4a3a      	ldr	r2, [pc, #232]	; (8006800 <HAL_ADC_Start_DMA+0x1d4>)
 8006718:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006722:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006732:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689a      	ldr	r2, [r3, #8]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006742:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	334c      	adds	r3, #76	; 0x4c
 800674e:	4619      	mov	r1, r3
 8006750:	68ba      	ldr	r2, [r7, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f000 fcea 	bl	800712c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	f003 031f 	and.w	r3, r3, #31
 8006760:	2b00      	cmp	r3, #0
 8006762:	d12a      	bne.n	80067ba <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a26      	ldr	r2, [pc, #152]	; (8006804 <HAL_ADC_Start_DMA+0x1d8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d015      	beq.n	800679a <HAL_ADC_Start_DMA+0x16e>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a25      	ldr	r2, [pc, #148]	; (8006808 <HAL_ADC_Start_DMA+0x1dc>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d105      	bne.n	8006784 <HAL_ADC_Start_DMA+0x158>
 8006778:	4b1e      	ldr	r3, [pc, #120]	; (80067f4 <HAL_ADC_Start_DMA+0x1c8>)
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f003 031f 	and.w	r3, r3, #31
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00a      	beq.n	800679a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a20      	ldr	r2, [pc, #128]	; (800680c <HAL_ADC_Start_DMA+0x1e0>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d129      	bne.n	80067e2 <HAL_ADC_Start_DMA+0x1b6>
 800678e:	4b19      	ldr	r3, [pc, #100]	; (80067f4 <HAL_ADC_Start_DMA+0x1c8>)
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f003 031f 	and.w	r3, r3, #31
 8006796:	2b0f      	cmp	r3, #15
 8006798:	d823      	bhi.n	80067e2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d11c      	bne.n	80067e2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689a      	ldr	r2, [r3, #8]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80067b6:	609a      	str	r2, [r3, #8]
 80067b8:	e013      	b.n	80067e2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a11      	ldr	r2, [pc, #68]	; (8006804 <HAL_ADC_Start_DMA+0x1d8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d10e      	bne.n	80067e2 <HAL_ADC_Start_DMA+0x1b6>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d107      	bne.n	80067e2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80067e0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000000 	.word	0x20000000
 80067f0:	431bde83 	.word	0x431bde83
 80067f4:	40012300 	.word	0x40012300
 80067f8:	08006ca9 	.word	0x08006ca9
 80067fc:	08006d63 	.word	0x08006d63
 8006800:	08006d7f 	.word	0x08006d7f
 8006804:	40012000 	.word	0x40012000
 8006808:	40012100 	.word	0x40012100
 800680c:	40012200 	.word	0x40012200

08006810 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <HAL_ADC_ConfigChannel+0x1c>
 8006864:	2302      	movs	r3, #2
 8006866:	e113      	b.n	8006a90 <HAL_ADC_ConfigChannel+0x244>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b09      	cmp	r3, #9
 8006876:	d925      	bls.n	80068c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68d9      	ldr	r1, [r3, #12]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	461a      	mov	r2, r3
 8006886:	4613      	mov	r3, r2
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	4413      	add	r3, r2
 800688c:	3b1e      	subs	r3, #30
 800688e:	2207      	movs	r2, #7
 8006890:	fa02 f303 	lsl.w	r3, r2, r3
 8006894:	43da      	mvns	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	400a      	ands	r2, r1
 800689c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68d9      	ldr	r1, [r3, #12]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	4618      	mov	r0, r3
 80068b0:	4603      	mov	r3, r0
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	4403      	add	r3, r0
 80068b6:	3b1e      	subs	r3, #30
 80068b8:	409a      	lsls	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	60da      	str	r2, [r3, #12]
 80068c2:	e022      	b.n	800690a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6919      	ldr	r1, [r3, #16]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	461a      	mov	r2, r3
 80068d2:	4613      	mov	r3, r2
 80068d4:	005b      	lsls	r3, r3, #1
 80068d6:	4413      	add	r3, r2
 80068d8:	2207      	movs	r2, #7
 80068da:	fa02 f303 	lsl.w	r3, r2, r3
 80068de:	43da      	mvns	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	400a      	ands	r2, r1
 80068e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6919      	ldr	r1, [r3, #16]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	689a      	ldr	r2, [r3, #8]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	4618      	mov	r0, r3
 80068fa:	4603      	mov	r3, r0
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	4403      	add	r3, r0
 8006900:	409a      	lsls	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	430a      	orrs	r2, r1
 8006908:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b06      	cmp	r3, #6
 8006910:	d824      	bhi.n	800695c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	4613      	mov	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	4413      	add	r3, r2
 8006922:	3b05      	subs	r3, #5
 8006924:	221f      	movs	r2, #31
 8006926:	fa02 f303 	lsl.w	r3, r2, r3
 800692a:	43da      	mvns	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	400a      	ands	r2, r1
 8006932:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	b29b      	uxth	r3, r3
 8006940:	4618      	mov	r0, r3
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	4613      	mov	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4413      	add	r3, r2
 800694c:	3b05      	subs	r3, #5
 800694e:	fa00 f203 	lsl.w	r2, r0, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	635a      	str	r2, [r3, #52]	; 0x34
 800695a:	e04c      	b.n	80069f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	2b0c      	cmp	r3, #12
 8006962:	d824      	bhi.n	80069ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	4613      	mov	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	3b23      	subs	r3, #35	; 0x23
 8006976:	221f      	movs	r2, #31
 8006978:	fa02 f303 	lsl.w	r3, r2, r3
 800697c:	43da      	mvns	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	400a      	ands	r2, r1
 8006984:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	b29b      	uxth	r3, r3
 8006992:	4618      	mov	r0, r3
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	4613      	mov	r3, r2
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	4413      	add	r3, r2
 800699e:	3b23      	subs	r3, #35	; 0x23
 80069a0:	fa00 f203 	lsl.w	r2, r0, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	430a      	orrs	r2, r1
 80069aa:	631a      	str	r2, [r3, #48]	; 0x30
 80069ac:	e023      	b.n	80069f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	4613      	mov	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	3b41      	subs	r3, #65	; 0x41
 80069c0:	221f      	movs	r2, #31
 80069c2:	fa02 f303 	lsl.w	r3, r2, r3
 80069c6:	43da      	mvns	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	400a      	ands	r2, r1
 80069ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	4618      	mov	r0, r3
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	685a      	ldr	r2, [r3, #4]
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	3b41      	subs	r3, #65	; 0x41
 80069ea:	fa00 f203 	lsl.w	r2, r0, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80069f6:	4b29      	ldr	r3, [pc, #164]	; (8006a9c <HAL_ADC_ConfigChannel+0x250>)
 80069f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a28      	ldr	r2, [pc, #160]	; (8006aa0 <HAL_ADC_ConfigChannel+0x254>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d10f      	bne.n	8006a24 <HAL_ADC_ConfigChannel+0x1d8>
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b12      	cmp	r3, #18
 8006a0a:	d10b      	bne.n	8006a24 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a1d      	ldr	r2, [pc, #116]	; (8006aa0 <HAL_ADC_ConfigChannel+0x254>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d12b      	bne.n	8006a86 <HAL_ADC_ConfigChannel+0x23a>
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a1c      	ldr	r2, [pc, #112]	; (8006aa4 <HAL_ADC_ConfigChannel+0x258>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d003      	beq.n	8006a40 <HAL_ADC_ConfigChannel+0x1f4>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b11      	cmp	r3, #17
 8006a3e:	d122      	bne.n	8006a86 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a11      	ldr	r2, [pc, #68]	; (8006aa4 <HAL_ADC_ConfigChannel+0x258>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d111      	bne.n	8006a86 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006a62:	4b11      	ldr	r3, [pc, #68]	; (8006aa8 <HAL_ADC_ConfigChannel+0x25c>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a11      	ldr	r2, [pc, #68]	; (8006aac <HAL_ADC_ConfigChannel+0x260>)
 8006a68:	fba2 2303 	umull	r2, r3, r2, r3
 8006a6c:	0c9a      	lsrs	r2, r3, #18
 8006a6e:	4613      	mov	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a78:	e002      	b.n	8006a80 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1f9      	bne.n	8006a7a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	40012300 	.word	0x40012300
 8006aa0:	40012000 	.word	0x40012000
 8006aa4:	10000012 	.word	0x10000012
 8006aa8:	20000000 	.word	0x20000000
 8006aac:	431bde83 	.word	0x431bde83

08006ab0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006ab8:	4b79      	ldr	r3, [pc, #484]	; (8006ca0 <ADC_Init+0x1f0>)
 8006aba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	431a      	orrs	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	685a      	ldr	r2, [r3, #4]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ae4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6859      	ldr	r1, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	021a      	lsls	r2, r3, #8
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	430a      	orrs	r2, r1
 8006af8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006b08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	6859      	ldr	r1, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689a      	ldr	r2, [r3, #8]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6899      	ldr	r1, [r3, #8]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68da      	ldr	r2, [r3, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b42:	4a58      	ldr	r2, [pc, #352]	; (8006ca4 <ADC_Init+0x1f4>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d022      	beq.n	8006b8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689a      	ldr	r2, [r3, #8]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	6899      	ldr	r1, [r3, #8]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006b78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6899      	ldr	r1, [r3, #8]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	609a      	str	r2, [r3, #8]
 8006b8c:	e00f      	b.n	8006bae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006b9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006bac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f022 0202 	bic.w	r2, r2, #2
 8006bbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6899      	ldr	r1, [r3, #8]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	7e1b      	ldrb	r3, [r3, #24]
 8006bc8:	005a      	lsls	r2, r3, #1
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d01b      	beq.n	8006c14 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685a      	ldr	r2, [r3, #4]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006bfa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	6859      	ldr	r1, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	3b01      	subs	r3, #1
 8006c08:	035a      	lsls	r2, r3, #13
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	605a      	str	r2, [r3, #4]
 8006c12:	e007      	b.n	8006c24 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c22:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006c32:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	051a      	lsls	r2, r3, #20
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689a      	ldr	r2, [r3, #8]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006c58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6899      	ldr	r1, [r3, #8]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c66:	025a      	lsls	r2, r3, #9
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689a      	ldr	r2, [r3, #8]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6899      	ldr	r1, [r3, #8]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	029a      	lsls	r2, r3, #10
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	609a      	str	r2, [r3, #8]
}
 8006c94:	bf00      	nop
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	40012300 	.word	0x40012300
 8006ca4:	0f000001 	.word	0x0f000001

08006ca8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d13c      	bne.n	8006d3c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d12b      	bne.n	8006d34 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d127      	bne.n	8006d34 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d006      	beq.n	8006d00 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d119      	bne.n	8006d34 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0220 	bic.w	r2, r2, #32
 8006d0e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d105      	bne.n	8006d34 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2c:	f043 0201 	orr.w	r2, r3, #1
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f7ff fd6b 	bl	8006810 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006d3a:	e00e      	b.n	8006d5a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d40:	f003 0310 	and.w	r3, r3, #16
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006d48:	68f8      	ldr	r0, [r7, #12]
 8006d4a:	f7ff fd75 	bl	8006838 <HAL_ADC_ErrorCallback>
}
 8006d4e:	e004      	b.n	8006d5a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	4798      	blx	r3
}
 8006d5a:	bf00      	nop
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b084      	sub	sp, #16
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f7ff fd57 	bl	8006824 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006d76:	bf00      	nop
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2240      	movs	r2, #64	; 0x40
 8006d90:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d96:	f043 0204 	orr.w	r2, r3, #4
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f7ff fd4a 	bl	8006838 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006da4:	bf00      	nop
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <__NVIC_SetPriorityGrouping>:
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006dbc:	4b0c      	ldr	r3, [pc, #48]	; (8006df0 <__NVIC_SetPriorityGrouping+0x44>)
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006dc8:	4013      	ands	r3, r2
 8006dca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006dde:	4a04      	ldr	r2, [pc, #16]	; (8006df0 <__NVIC_SetPriorityGrouping+0x44>)
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	60d3      	str	r3, [r2, #12]
}
 8006de4:	bf00      	nop
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr
 8006df0:	e000ed00 	.word	0xe000ed00

08006df4 <__NVIC_GetPriorityGrouping>:
{
 8006df4:	b480      	push	{r7}
 8006df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006df8:	4b04      	ldr	r3, [pc, #16]	; (8006e0c <__NVIC_GetPriorityGrouping+0x18>)
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	0a1b      	lsrs	r3, r3, #8
 8006dfe:	f003 0307 	and.w	r3, r3, #7
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	e000ed00 	.word	0xe000ed00

08006e10 <__NVIC_EnableIRQ>:
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	4603      	mov	r3, r0
 8006e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	db0b      	blt.n	8006e3a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e22:	79fb      	ldrb	r3, [r7, #7]
 8006e24:	f003 021f 	and.w	r2, r3, #31
 8006e28:	4907      	ldr	r1, [pc, #28]	; (8006e48 <__NVIC_EnableIRQ+0x38>)
 8006e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e2e:	095b      	lsrs	r3, r3, #5
 8006e30:	2001      	movs	r0, #1
 8006e32:	fa00 f202 	lsl.w	r2, r0, r2
 8006e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	e000e100 	.word	0xe000e100

08006e4c <__NVIC_SetPriority>:
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4603      	mov	r3, r0
 8006e54:	6039      	str	r1, [r7, #0]
 8006e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	db0a      	blt.n	8006e76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	b2da      	uxtb	r2, r3
 8006e64:	490c      	ldr	r1, [pc, #48]	; (8006e98 <__NVIC_SetPriority+0x4c>)
 8006e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e6a:	0112      	lsls	r2, r2, #4
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	440b      	add	r3, r1
 8006e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006e74:	e00a      	b.n	8006e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	4908      	ldr	r1, [pc, #32]	; (8006e9c <__NVIC_SetPriority+0x50>)
 8006e7c:	79fb      	ldrb	r3, [r7, #7]
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	3b04      	subs	r3, #4
 8006e84:	0112      	lsls	r2, r2, #4
 8006e86:	b2d2      	uxtb	r2, r2
 8006e88:	440b      	add	r3, r1
 8006e8a:	761a      	strb	r2, [r3, #24]
}
 8006e8c:	bf00      	nop
 8006e8e:	370c      	adds	r7, #12
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	e000e100 	.word	0xe000e100
 8006e9c:	e000ed00 	.word	0xe000ed00

08006ea0 <NVIC_EncodePriority>:
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b089      	sub	sp, #36	; 0x24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	f1c3 0307 	rsb	r3, r3, #7
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	bf28      	it	cs
 8006ebe:	2304      	movcs	r3, #4
 8006ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	3304      	adds	r3, #4
 8006ec6:	2b06      	cmp	r3, #6
 8006ec8:	d902      	bls.n	8006ed0 <NVIC_EncodePriority+0x30>
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	3b03      	subs	r3, #3
 8006ece:	e000      	b.n	8006ed2 <NVIC_EncodePriority+0x32>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	fa02 f303 	lsl.w	r3, r2, r3
 8006ede:	43da      	mvns	r2, r3
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	401a      	ands	r2, r3
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef2:	43d9      	mvns	r1, r3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ef8:	4313      	orrs	r3, r2
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3724      	adds	r7, #36	; 0x24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
	...

08006f08 <SysTick_Config>:
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3b01      	subs	r3, #1
 8006f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f18:	d301      	bcc.n	8006f1e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e00f      	b.n	8006f3e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f1e:	4a0a      	ldr	r2, [pc, #40]	; (8006f48 <SysTick_Config+0x40>)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	3b01      	subs	r3, #1
 8006f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f26:	210f      	movs	r1, #15
 8006f28:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2c:	f7ff ff8e 	bl	8006e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f30:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <SysTick_Config+0x40>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f36:	4b04      	ldr	r3, [pc, #16]	; (8006f48 <SysTick_Config+0x40>)
 8006f38:	2207      	movs	r2, #7
 8006f3a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	e000e010 	.word	0xe000e010

08006f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff ff29 	bl	8006dac <__NVIC_SetPriorityGrouping>
}
 8006f5a:	bf00      	nop
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b086      	sub	sp, #24
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	4603      	mov	r3, r0
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	607a      	str	r2, [r7, #4]
 8006f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f74:	f7ff ff3e 	bl	8006df4 <__NVIC_GetPriorityGrouping>
 8006f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	68b9      	ldr	r1, [r7, #8]
 8006f7e:	6978      	ldr	r0, [r7, #20]
 8006f80:	f7ff ff8e 	bl	8006ea0 <NVIC_EncodePriority>
 8006f84:	4602      	mov	r2, r0
 8006f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f7ff ff5d 	bl	8006e4c <__NVIC_SetPriority>
}
 8006f92:	bf00      	nop
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7ff ff31 	bl	8006e10 <__NVIC_EnableIRQ>
}
 8006fae:	bf00      	nop
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b082      	sub	sp, #8
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7ff ffa2 	bl	8006f08 <SysTick_Config>
 8006fc4:	4603      	mov	r3, r0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006fdc:	f7ff fab4 	bl	8006548 <HAL_GetTick>
 8006fe0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e099      	b.n	8007120 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0201 	bic.w	r2, r2, #1
 800700a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800700c:	e00f      	b.n	800702e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800700e:	f7ff fa9b 	bl	8006548 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b05      	cmp	r3, #5
 800701a:	d908      	bls.n	800702e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2220      	movs	r2, #32
 8007020:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2203      	movs	r2, #3
 8007026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e078      	b.n	8007120 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e8      	bne.n	800700e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	4b38      	ldr	r3, [pc, #224]	; (8007128 <HAL_DMA_Init+0x158>)
 8007048:	4013      	ands	r3, r2
 800704a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800705a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007066:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007072:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	4313      	orrs	r3, r2
 800707e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007084:	2b04      	cmp	r3, #4
 8007086:	d107      	bne.n	8007098 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007090:	4313      	orrs	r3, r2
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	4313      	orrs	r3, r2
 8007096:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	f023 0307 	bic.w	r3, r3, #7
 80070ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070be:	2b04      	cmp	r3, #4
 80070c0:	d117      	bne.n	80070f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00e      	beq.n	80070f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fa9d 	bl	8007614 <DMA_CheckFifoParam>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d008      	beq.n	80070f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2240      	movs	r2, #64	; 0x40
 80070e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80070ee:	2301      	movs	r3, #1
 80070f0:	e016      	b.n	8007120 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fa54 	bl	80075a8 <DMA_CalcBaseAndBitshift>
 8007100:	4603      	mov	r3, r0
 8007102:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007108:	223f      	movs	r2, #63	; 0x3f
 800710a:	409a      	lsls	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3718      	adds	r7, #24
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	f010803f 	.word	0xf010803f

0800712c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007142:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800714a:	2b01      	cmp	r3, #1
 800714c:	d101      	bne.n	8007152 <HAL_DMA_Start_IT+0x26>
 800714e:	2302      	movs	r3, #2
 8007150:	e040      	b.n	80071d4 <HAL_DMA_Start_IT+0xa8>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2201      	movs	r2, #1
 8007156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b01      	cmp	r3, #1
 8007164:	d12f      	bne.n	80071c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2202      	movs	r2, #2
 800716a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	68b9      	ldr	r1, [r7, #8]
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 f9e6 	bl	800754c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007184:	223f      	movs	r2, #63	; 0x3f
 8007186:	409a      	lsls	r2, r3
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0216 	orr.w	r2, r2, #22
 800719a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d007      	beq.n	80071b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f042 0208 	orr.w	r2, r2, #8
 80071b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0201 	orr.w	r2, r2, #1
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	e005      	b.n	80071d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80071ce:	2302      	movs	r3, #2
 80071d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3718      	adds	r7, #24
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d004      	beq.n	80071fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2280      	movs	r2, #128	; 0x80
 80071f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e00c      	b.n	8007214 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2205      	movs	r2, #5
 80071fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0201 	bic.w	r2, r2, #1
 8007210:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800722c:	4b92      	ldr	r3, [pc, #584]	; (8007478 <HAL_DMA_IRQHandler+0x258>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a92      	ldr	r2, [pc, #584]	; (800747c <HAL_DMA_IRQHandler+0x25c>)
 8007232:	fba2 2303 	umull	r2, r3, r2, r3
 8007236:	0a9b      	lsrs	r3, r3, #10
 8007238:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800724a:	2208      	movs	r2, #8
 800724c:	409a      	lsls	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	4013      	ands	r3, r2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d01a      	beq.n	800728c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0304 	and.w	r3, r3, #4
 8007260:	2b00      	cmp	r3, #0
 8007262:	d013      	beq.n	800728c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0204 	bic.w	r2, r2, #4
 8007272:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007278:	2208      	movs	r2, #8
 800727a:	409a      	lsls	r2, r3
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007284:	f043 0201 	orr.w	r2, r3, #1
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007290:	2201      	movs	r2, #1
 8007292:	409a      	lsls	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4013      	ands	r3, r2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d012      	beq.n	80072c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00b      	beq.n	80072c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ae:	2201      	movs	r2, #1
 80072b0:	409a      	lsls	r2, r3
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ba:	f043 0202 	orr.w	r2, r3, #2
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c6:	2204      	movs	r2, #4
 80072c8:	409a      	lsls	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4013      	ands	r3, r2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d012      	beq.n	80072f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0302 	and.w	r3, r3, #2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00b      	beq.n	80072f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072e4:	2204      	movs	r2, #4
 80072e6:	409a      	lsls	r2, r3
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f0:	f043 0204 	orr.w	r2, r3, #4
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072fc:	2210      	movs	r2, #16
 80072fe:	409a      	lsls	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4013      	ands	r3, r2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d043      	beq.n	8007390 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0308 	and.w	r3, r3, #8
 8007312:	2b00      	cmp	r3, #0
 8007314:	d03c      	beq.n	8007390 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800731a:	2210      	movs	r2, #16
 800731c:	409a      	lsls	r2, r3
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d018      	beq.n	8007362 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d108      	bne.n	8007350 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	2b00      	cmp	r3, #0
 8007344:	d024      	beq.n	8007390 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	4798      	blx	r3
 800734e:	e01f      	b.n	8007390 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007354:	2b00      	cmp	r3, #0
 8007356:	d01b      	beq.n	8007390 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	4798      	blx	r3
 8007360:	e016      	b.n	8007390 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800736c:	2b00      	cmp	r3, #0
 800736e:	d107      	bne.n	8007380 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0208 	bic.w	r2, r2, #8
 800737e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007394:	2220      	movs	r2, #32
 8007396:	409a      	lsls	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4013      	ands	r3, r2
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 808e 	beq.w	80074be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0310 	and.w	r3, r3, #16
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 8086 	beq.w	80074be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b6:	2220      	movs	r2, #32
 80073b8:	409a      	lsls	r2, r3
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b05      	cmp	r3, #5
 80073c8:	d136      	bne.n	8007438 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f022 0216 	bic.w	r2, r2, #22
 80073d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	695a      	ldr	r2, [r3, #20]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d103      	bne.n	80073fa <HAL_DMA_IRQHandler+0x1da>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d007      	beq.n	800740a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0208 	bic.w	r2, r2, #8
 8007408:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800740e:	223f      	movs	r2, #63	; 0x3f
 8007410:	409a      	lsls	r2, r3
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800742a:	2b00      	cmp	r3, #0
 800742c:	d07d      	beq.n	800752a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	4798      	blx	r3
        }
        return;
 8007436:	e078      	b.n	800752a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d01c      	beq.n	8007480 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d108      	bne.n	8007466 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007458:	2b00      	cmp	r3, #0
 800745a:	d030      	beq.n	80074be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	4798      	blx	r3
 8007464:	e02b      	b.n	80074be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746a:	2b00      	cmp	r3, #0
 800746c:	d027      	beq.n	80074be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	4798      	blx	r3
 8007476:	e022      	b.n	80074be <HAL_DMA_IRQHandler+0x29e>
 8007478:	20000000 	.word	0x20000000
 800747c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10f      	bne.n	80074ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f022 0210 	bic.w	r2, r2, #16
 800749c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d032      	beq.n	800752c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d022      	beq.n	8007518 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2205      	movs	r2, #5
 80074d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f022 0201 	bic.w	r2, r2, #1
 80074e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	3301      	adds	r3, #1
 80074ee:	60bb      	str	r3, [r7, #8]
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d307      	bcc.n	8007506 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1f2      	bne.n	80074ea <HAL_DMA_IRQHandler+0x2ca>
 8007504:	e000      	b.n	8007508 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007506:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800751c:	2b00      	cmp	r3, #0
 800751e:	d005      	beq.n	800752c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	4798      	blx	r3
 8007528:	e000      	b.n	800752c <HAL_DMA_IRQHandler+0x30c>
        return;
 800752a:	bf00      	nop
    }
  }
}
 800752c:	3718      	adds	r7, #24
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop

08007534 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007540:	4618      	mov	r0, r3
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007568:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	2b40      	cmp	r3, #64	; 0x40
 8007578:	d108      	bne.n	800758c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800758a:	e007      	b.n	800759c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	60da      	str	r2, [r3, #12]
}
 800759c:	bf00      	nop
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	3b10      	subs	r3, #16
 80075b8:	4a14      	ldr	r2, [pc, #80]	; (800760c <DMA_CalcBaseAndBitshift+0x64>)
 80075ba:	fba2 2303 	umull	r2, r3, r2, r3
 80075be:	091b      	lsrs	r3, r3, #4
 80075c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80075c2:	4a13      	ldr	r2, [pc, #76]	; (8007610 <DMA_CalcBaseAndBitshift+0x68>)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4413      	add	r3, r2
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	461a      	mov	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d909      	bls.n	80075ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80075de:	f023 0303 	bic.w	r3, r3, #3
 80075e2:	1d1a      	adds	r2, r3, #4
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	659a      	str	r2, [r3, #88]	; 0x58
 80075e8:	e007      	b.n	80075fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80075f2:	f023 0303 	bic.w	r3, r3, #3
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	aaaaaaab 	.word	0xaaaaaaab
 8007610:	08017da8 	.word	0x08017da8

08007614 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007624:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d11f      	bne.n	800766e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2b03      	cmp	r3, #3
 8007632:	d855      	bhi.n	80076e0 <DMA_CheckFifoParam+0xcc>
 8007634:	a201      	add	r2, pc, #4	; (adr r2, 800763c <DMA_CheckFifoParam+0x28>)
 8007636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763a:	bf00      	nop
 800763c:	0800764d 	.word	0x0800764d
 8007640:	0800765f 	.word	0x0800765f
 8007644:	0800764d 	.word	0x0800764d
 8007648:	080076e1 	.word	0x080076e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d045      	beq.n	80076e4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800765c:	e042      	b.n	80076e4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007662:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007666:	d13f      	bne.n	80076e8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800766c:	e03c      	b.n	80076e8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007676:	d121      	bne.n	80076bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b03      	cmp	r3, #3
 800767c:	d836      	bhi.n	80076ec <DMA_CheckFifoParam+0xd8>
 800767e:	a201      	add	r2, pc, #4	; (adr r2, 8007684 <DMA_CheckFifoParam+0x70>)
 8007680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007684:	08007695 	.word	0x08007695
 8007688:	0800769b 	.word	0x0800769b
 800768c:	08007695 	.word	0x08007695
 8007690:	080076ad 	.word	0x080076ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	73fb      	strb	r3, [r7, #15]
      break;
 8007698:	e02f      	b.n	80076fa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d024      	beq.n	80076f0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076aa:	e021      	b.n	80076f0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076b4:	d11e      	bne.n	80076f4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80076ba:	e01b      	b.n	80076f4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d902      	bls.n	80076c8 <DMA_CheckFifoParam+0xb4>
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d003      	beq.n	80076ce <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80076c6:	e018      	b.n	80076fa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	73fb      	strb	r3, [r7, #15]
      break;
 80076cc:	e015      	b.n	80076fa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00e      	beq.n	80076f8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	73fb      	strb	r3, [r7, #15]
      break;
 80076de:	e00b      	b.n	80076f8 <DMA_CheckFifoParam+0xe4>
      break;
 80076e0:	bf00      	nop
 80076e2:	e00a      	b.n	80076fa <DMA_CheckFifoParam+0xe6>
      break;
 80076e4:	bf00      	nop
 80076e6:	e008      	b.n	80076fa <DMA_CheckFifoParam+0xe6>
      break;
 80076e8:	bf00      	nop
 80076ea:	e006      	b.n	80076fa <DMA_CheckFifoParam+0xe6>
      break;
 80076ec:	bf00      	nop
 80076ee:	e004      	b.n	80076fa <DMA_CheckFifoParam+0xe6>
      break;
 80076f0:	bf00      	nop
 80076f2:	e002      	b.n	80076fa <DMA_CheckFifoParam+0xe6>
      break;   
 80076f4:	bf00      	nop
 80076f6:	e000      	b.n	80076fa <DMA_CheckFifoParam+0xe6>
      break;
 80076f8:	bf00      	nop
    }
  } 
  
  return status; 
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007708:	b480      	push	{r7}
 800770a:	b089      	sub	sp, #36	; 0x24
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007716:	2300      	movs	r3, #0
 8007718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800771a:	2300      	movs	r3, #0
 800771c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800771e:	2300      	movs	r3, #0
 8007720:	61fb      	str	r3, [r7, #28]
 8007722:	e177      	b.n	8007a14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007724:	2201      	movs	r2, #1
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	fa02 f303 	lsl.w	r3, r2, r3
 800772c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	4013      	ands	r3, r2
 8007736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007738:	693a      	ldr	r2, [r7, #16]
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	429a      	cmp	r2, r3
 800773e:	f040 8166 	bne.w	8007a0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	2b01      	cmp	r3, #1
 8007748:	d00b      	beq.n	8007762 <HAL_GPIO_Init+0x5a>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d007      	beq.n	8007762 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007756:	2b11      	cmp	r3, #17
 8007758:	d003      	beq.n	8007762 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	2b12      	cmp	r3, #18
 8007760:	d130      	bne.n	80077c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	2203      	movs	r2, #3
 800776e:	fa02 f303 	lsl.w	r3, r2, r3
 8007772:	43db      	mvns	r3, r3
 8007774:	69ba      	ldr	r2, [r7, #24]
 8007776:	4013      	ands	r3, r2
 8007778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	fa02 f303 	lsl.w	r3, r2, r3
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	4313      	orrs	r3, r2
 800778a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007798:	2201      	movs	r2, #1
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	fa02 f303 	lsl.w	r3, r2, r3
 80077a0:	43db      	mvns	r3, r3
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	4013      	ands	r3, r2
 80077a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	091b      	lsrs	r3, r3, #4
 80077ae:	f003 0201 	and.w	r2, r3, #1
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	fa02 f303 	lsl.w	r3, r2, r3
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	2203      	movs	r2, #3
 80077d0:	fa02 f303 	lsl.w	r3, r2, r3
 80077d4:	43db      	mvns	r3, r3
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	4013      	ands	r3, r2
 80077da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	689a      	ldr	r2, [r3, #8]
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	fa02 f303 	lsl.w	r3, r2, r3
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	69ba      	ldr	r2, [r7, #24]
 80077f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d003      	beq.n	8007804 <HAL_GPIO_Init+0xfc>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	2b12      	cmp	r3, #18
 8007802:	d123      	bne.n	800784c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	08da      	lsrs	r2, r3, #3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3208      	adds	r2, #8
 800780c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007810:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	f003 0307 	and.w	r3, r3, #7
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	220f      	movs	r2, #15
 800781c:	fa02 f303 	lsl.w	r3, r2, r3
 8007820:	43db      	mvns	r3, r3
 8007822:	69ba      	ldr	r2, [r7, #24]
 8007824:	4013      	ands	r3, r2
 8007826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	691a      	ldr	r2, [r3, #16]
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	fa02 f303 	lsl.w	r3, r2, r3
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	4313      	orrs	r3, r2
 800783c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	08da      	lsrs	r2, r3, #3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	3208      	adds	r2, #8
 8007846:	69b9      	ldr	r1, [r7, #24]
 8007848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	2203      	movs	r2, #3
 8007858:	fa02 f303 	lsl.w	r3, r2, r3
 800785c:	43db      	mvns	r3, r3
 800785e:	69ba      	ldr	r2, [r7, #24]
 8007860:	4013      	ands	r3, r2
 8007862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f003 0203 	and.w	r2, r3, #3
 800786c:	69fb      	ldr	r3, [r7, #28]
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	fa02 f303 	lsl.w	r3, r2, r3
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	4313      	orrs	r3, r2
 8007878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 80c0 	beq.w	8007a0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800788e:	2300      	movs	r3, #0
 8007890:	60fb      	str	r3, [r7, #12]
 8007892:	4b65      	ldr	r3, [pc, #404]	; (8007a28 <HAL_GPIO_Init+0x320>)
 8007894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007896:	4a64      	ldr	r2, [pc, #400]	; (8007a28 <HAL_GPIO_Init+0x320>)
 8007898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800789c:	6453      	str	r3, [r2, #68]	; 0x44
 800789e:	4b62      	ldr	r3, [pc, #392]	; (8007a28 <HAL_GPIO_Init+0x320>)
 80078a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80078aa:	4a60      	ldr	r2, [pc, #384]	; (8007a2c <HAL_GPIO_Init+0x324>)
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	089b      	lsrs	r3, r3, #2
 80078b0:	3302      	adds	r3, #2
 80078b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	f003 0303 	and.w	r3, r3, #3
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	220f      	movs	r2, #15
 80078c2:	fa02 f303 	lsl.w	r3, r2, r3
 80078c6:	43db      	mvns	r3, r3
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	4013      	ands	r3, r2
 80078cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a57      	ldr	r2, [pc, #348]	; (8007a30 <HAL_GPIO_Init+0x328>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d037      	beq.n	8007946 <HAL_GPIO_Init+0x23e>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a56      	ldr	r2, [pc, #344]	; (8007a34 <HAL_GPIO_Init+0x32c>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d031      	beq.n	8007942 <HAL_GPIO_Init+0x23a>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a55      	ldr	r2, [pc, #340]	; (8007a38 <HAL_GPIO_Init+0x330>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d02b      	beq.n	800793e <HAL_GPIO_Init+0x236>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a54      	ldr	r2, [pc, #336]	; (8007a3c <HAL_GPIO_Init+0x334>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d025      	beq.n	800793a <HAL_GPIO_Init+0x232>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a53      	ldr	r2, [pc, #332]	; (8007a40 <HAL_GPIO_Init+0x338>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d01f      	beq.n	8007936 <HAL_GPIO_Init+0x22e>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a52      	ldr	r2, [pc, #328]	; (8007a44 <HAL_GPIO_Init+0x33c>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d019      	beq.n	8007932 <HAL_GPIO_Init+0x22a>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a51      	ldr	r2, [pc, #324]	; (8007a48 <HAL_GPIO_Init+0x340>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d013      	beq.n	800792e <HAL_GPIO_Init+0x226>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a50      	ldr	r2, [pc, #320]	; (8007a4c <HAL_GPIO_Init+0x344>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d00d      	beq.n	800792a <HAL_GPIO_Init+0x222>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a4f      	ldr	r2, [pc, #316]	; (8007a50 <HAL_GPIO_Init+0x348>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d007      	beq.n	8007926 <HAL_GPIO_Init+0x21e>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a4e      	ldr	r2, [pc, #312]	; (8007a54 <HAL_GPIO_Init+0x34c>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d101      	bne.n	8007922 <HAL_GPIO_Init+0x21a>
 800791e:	2309      	movs	r3, #9
 8007920:	e012      	b.n	8007948 <HAL_GPIO_Init+0x240>
 8007922:	230a      	movs	r3, #10
 8007924:	e010      	b.n	8007948 <HAL_GPIO_Init+0x240>
 8007926:	2308      	movs	r3, #8
 8007928:	e00e      	b.n	8007948 <HAL_GPIO_Init+0x240>
 800792a:	2307      	movs	r3, #7
 800792c:	e00c      	b.n	8007948 <HAL_GPIO_Init+0x240>
 800792e:	2306      	movs	r3, #6
 8007930:	e00a      	b.n	8007948 <HAL_GPIO_Init+0x240>
 8007932:	2305      	movs	r3, #5
 8007934:	e008      	b.n	8007948 <HAL_GPIO_Init+0x240>
 8007936:	2304      	movs	r3, #4
 8007938:	e006      	b.n	8007948 <HAL_GPIO_Init+0x240>
 800793a:	2303      	movs	r3, #3
 800793c:	e004      	b.n	8007948 <HAL_GPIO_Init+0x240>
 800793e:	2302      	movs	r3, #2
 8007940:	e002      	b.n	8007948 <HAL_GPIO_Init+0x240>
 8007942:	2301      	movs	r3, #1
 8007944:	e000      	b.n	8007948 <HAL_GPIO_Init+0x240>
 8007946:	2300      	movs	r3, #0
 8007948:	69fa      	ldr	r2, [r7, #28]
 800794a:	f002 0203 	and.w	r2, r2, #3
 800794e:	0092      	lsls	r2, r2, #2
 8007950:	4093      	lsls	r3, r2
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	4313      	orrs	r3, r2
 8007956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007958:	4934      	ldr	r1, [pc, #208]	; (8007a2c <HAL_GPIO_Init+0x324>)
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	089b      	lsrs	r3, r3, #2
 800795e:	3302      	adds	r3, #2
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007966:	4b3c      	ldr	r3, [pc, #240]	; (8007a58 <HAL_GPIO_Init+0x350>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	43db      	mvns	r3, r3
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	4013      	ands	r3, r2
 8007974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	4313      	orrs	r3, r2
 8007988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800798a:	4a33      	ldr	r2, [pc, #204]	; (8007a58 <HAL_GPIO_Init+0x350>)
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007990:	4b31      	ldr	r3, [pc, #196]	; (8007a58 <HAL_GPIO_Init+0x350>)
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	43db      	mvns	r3, r3
 800799a:	69ba      	ldr	r2, [r7, #24]
 800799c:	4013      	ands	r3, r2
 800799e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d003      	beq.n	80079b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80079b4:	4a28      	ldr	r2, [pc, #160]	; (8007a58 <HAL_GPIO_Init+0x350>)
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80079ba:	4b27      	ldr	r3, [pc, #156]	; (8007a58 <HAL_GPIO_Init+0x350>)
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	43db      	mvns	r3, r3
 80079c4:	69ba      	ldr	r2, [r7, #24]
 80079c6:	4013      	ands	r3, r2
 80079c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d003      	beq.n	80079de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80079d6:	69ba      	ldr	r2, [r7, #24]
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	4313      	orrs	r3, r2
 80079dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80079de:	4a1e      	ldr	r2, [pc, #120]	; (8007a58 <HAL_GPIO_Init+0x350>)
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80079e4:	4b1c      	ldr	r3, [pc, #112]	; (8007a58 <HAL_GPIO_Init+0x350>)
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	43db      	mvns	r3, r3
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	4013      	ands	r3, r2
 80079f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d003      	beq.n	8007a08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007a00:	69ba      	ldr	r2, [r7, #24]
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a08:	4a13      	ldr	r2, [pc, #76]	; (8007a58 <HAL_GPIO_Init+0x350>)
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	3301      	adds	r3, #1
 8007a12:	61fb      	str	r3, [r7, #28]
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	2b0f      	cmp	r3, #15
 8007a18:	f67f ae84 	bls.w	8007724 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007a1c:	bf00      	nop
 8007a1e:	3724      	adds	r7, #36	; 0x24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	40023800 	.word	0x40023800
 8007a2c:	40013800 	.word	0x40013800
 8007a30:	40020000 	.word	0x40020000
 8007a34:	40020400 	.word	0x40020400
 8007a38:	40020800 	.word	0x40020800
 8007a3c:	40020c00 	.word	0x40020c00
 8007a40:	40021000 	.word	0x40021000
 8007a44:	40021400 	.word	0x40021400
 8007a48:	40021800 	.word	0x40021800
 8007a4c:	40021c00 	.word	0x40021c00
 8007a50:	40022000 	.word	0x40022000
 8007a54:	40022400 	.word	0x40022400
 8007a58:	40013c00 	.word	0x40013c00

08007a5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	460b      	mov	r3, r1
 8007a66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	691a      	ldr	r2, [r3, #16]
 8007a6c:	887b      	ldrh	r3, [r7, #2]
 8007a6e:	4013      	ands	r3, r2
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007a74:	2301      	movs	r3, #1
 8007a76:	73fb      	strb	r3, [r7, #15]
 8007a78:	e001      	b.n	8007a7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3714      	adds	r7, #20
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	807b      	strh	r3, [r7, #2]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a9c:	787b      	ldrb	r3, [r7, #1]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007aa2:	887a      	ldrh	r2, [r7, #2]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007aa8:	e003      	b.n	8007ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007aaa:	887b      	ldrh	r3, [r7, #2]
 8007aac:	041a      	lsls	r2, r3, #16
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	619a      	str	r2, [r3, #24]
}
 8007ab2:	bf00      	nop
 8007ab4:	370c      	adds	r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
	...

08007ac0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007aca:	4b08      	ldr	r3, [pc, #32]	; (8007aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007acc:	695a      	ldr	r2, [r3, #20]
 8007ace:	88fb      	ldrh	r3, [r7, #6]
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d006      	beq.n	8007ae4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007ad6:	4a05      	ldr	r2, [pc, #20]	; (8007aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ad8:	88fb      	ldrh	r3, [r7, #6]
 8007ada:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007adc:	88fb      	ldrh	r3, [r7, #6]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fc f821 	bl	8003b26 <HAL_GPIO_EXTI_Callback>
  }
}
 8007ae4:	bf00      	nop
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	40013c00 	.word	0x40013c00

08007af0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e11f      	b.n	8007d42 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7fd fa0e 	bl	8004f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2224      	movs	r2, #36	; 0x24
 8007b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0201 	bic.w	r2, r2, #1
 8007b32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007b54:	f001 f96e 	bl	8008e34 <HAL_RCC_GetPCLK1Freq>
 8007b58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	4a7b      	ldr	r2, [pc, #492]	; (8007d4c <HAL_I2C_Init+0x25c>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d807      	bhi.n	8007b74 <HAL_I2C_Init+0x84>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4a7a      	ldr	r2, [pc, #488]	; (8007d50 <HAL_I2C_Init+0x260>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	bf94      	ite	ls
 8007b6c:	2301      	movls	r3, #1
 8007b6e:	2300      	movhi	r3, #0
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	e006      	b.n	8007b82 <HAL_I2C_Init+0x92>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	4a77      	ldr	r2, [pc, #476]	; (8007d54 <HAL_I2C_Init+0x264>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	bf94      	ite	ls
 8007b7c:	2301      	movls	r3, #1
 8007b7e:	2300      	movhi	r3, #0
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e0db      	b.n	8007d42 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	4a72      	ldr	r2, [pc, #456]	; (8007d58 <HAL_I2C_Init+0x268>)
 8007b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b92:	0c9b      	lsrs	r3, r3, #18
 8007b94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6a1b      	ldr	r3, [r3, #32]
 8007bb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	4a64      	ldr	r2, [pc, #400]	; (8007d4c <HAL_I2C_Init+0x25c>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d802      	bhi.n	8007bc4 <HAL_I2C_Init+0xd4>
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	e009      	b.n	8007bd8 <HAL_I2C_Init+0xe8>
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007bca:	fb02 f303 	mul.w	r3, r2, r3
 8007bce:	4a63      	ldr	r2, [pc, #396]	; (8007d5c <HAL_I2C_Init+0x26c>)
 8007bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd4:	099b      	lsrs	r3, r3, #6
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	6812      	ldr	r2, [r2, #0]
 8007bdc:	430b      	orrs	r3, r1
 8007bde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007bea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	4956      	ldr	r1, [pc, #344]	; (8007d4c <HAL_I2C_Init+0x25c>)
 8007bf4:	428b      	cmp	r3, r1
 8007bf6:	d80d      	bhi.n	8007c14 <HAL_I2C_Init+0x124>
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	1e59      	subs	r1, r3, #1
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c06:	3301      	adds	r3, #1
 8007c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	bf38      	it	cc
 8007c10:	2304      	movcc	r3, #4
 8007c12:	e04f      	b.n	8007cb4 <HAL_I2C_Init+0x1c4>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d111      	bne.n	8007c40 <HAL_I2C_Init+0x150>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	1e58      	subs	r0, r3, #1
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6859      	ldr	r1, [r3, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	440b      	add	r3, r1
 8007c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c2e:	3301      	adds	r3, #1
 8007c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	bf0c      	ite	eq
 8007c38:	2301      	moveq	r3, #1
 8007c3a:	2300      	movne	r3, #0
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	e012      	b.n	8007c66 <HAL_I2C_Init+0x176>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	1e58      	subs	r0, r3, #1
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6859      	ldr	r1, [r3, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	440b      	add	r3, r1
 8007c4e:	0099      	lsls	r1, r3, #2
 8007c50:	440b      	add	r3, r1
 8007c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c56:	3301      	adds	r3, #1
 8007c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	bf0c      	ite	eq
 8007c60:	2301      	moveq	r3, #1
 8007c62:	2300      	movne	r3, #0
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <HAL_I2C_Init+0x17e>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e022      	b.n	8007cb4 <HAL_I2C_Init+0x1c4>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d10e      	bne.n	8007c94 <HAL_I2C_Init+0x1a4>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	1e58      	subs	r0, r3, #1
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6859      	ldr	r1, [r3, #4]
 8007c7e:	460b      	mov	r3, r1
 8007c80:	005b      	lsls	r3, r3, #1
 8007c82:	440b      	add	r3, r1
 8007c84:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c88:	3301      	adds	r3, #1
 8007c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c92:	e00f      	b.n	8007cb4 <HAL_I2C_Init+0x1c4>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	1e58      	subs	r0, r3, #1
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6859      	ldr	r1, [r3, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	440b      	add	r3, r1
 8007ca2:	0099      	lsls	r1, r3, #2
 8007ca4:	440b      	add	r3, r1
 8007ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8007caa:	3301      	adds	r3, #1
 8007cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cb4:	6879      	ldr	r1, [r7, #4]
 8007cb6:	6809      	ldr	r1, [r1, #0]
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	69da      	ldr	r2, [r3, #28]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007ce2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	6911      	ldr	r1, [r2, #16]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	68d2      	ldr	r2, [r2, #12]
 8007cee:	4311      	orrs	r1, r2
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	6812      	ldr	r2, [r2, #0]
 8007cf4:	430b      	orrs	r3, r1
 8007cf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	695a      	ldr	r2, [r3, #20]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	430a      	orrs	r2, r1
 8007d12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f042 0201 	orr.w	r2, r2, #1
 8007d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2200      	movs	r2, #0
 8007d28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	000186a0 	.word	0x000186a0
 8007d50:	001e847f 	.word	0x001e847f
 8007d54:	003d08ff 	.word	0x003d08ff
 8007d58:	431bde83 	.word	0x431bde83
 8007d5c:	10624dd3 	.word	0x10624dd3

08007d60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b088      	sub	sp, #32
 8007d64:	af02      	add	r7, sp, #8
 8007d66:	60f8      	str	r0, [r7, #12]
 8007d68:	607a      	str	r2, [r7, #4]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	817b      	strh	r3, [r7, #10]
 8007d70:	4613      	mov	r3, r2
 8007d72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d74:	f7fe fbe8 	bl	8006548 <HAL_GetTick>
 8007d78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b20      	cmp	r3, #32
 8007d84:	f040 80e0 	bne.w	8007f48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	2319      	movs	r3, #25
 8007d8e:	2201      	movs	r2, #1
 8007d90:	4970      	ldr	r1, [pc, #448]	; (8007f54 <HAL_I2C_Master_Transmit+0x1f4>)
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 fc58 	bl	8008648 <I2C_WaitOnFlagUntilTimeout>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007d9e:	2302      	movs	r3, #2
 8007da0:	e0d3      	b.n	8007f4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d101      	bne.n	8007db0 <HAL_I2C_Master_Transmit+0x50>
 8007dac:	2302      	movs	r3, #2
 8007dae:	e0cc      	b.n	8007f4a <HAL_I2C_Master_Transmit+0x1ea>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d007      	beq.n	8007dd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f042 0201 	orr.w	r2, r2, #1
 8007dd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007de4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2221      	movs	r2, #33	; 0x21
 8007dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2210      	movs	r2, #16
 8007df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	893a      	ldrh	r2, [r7, #8]
 8007e06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	4a50      	ldr	r2, [pc, #320]	; (8007f58 <HAL_I2C_Master_Transmit+0x1f8>)
 8007e16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007e18:	8979      	ldrh	r1, [r7, #10]
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	6a3a      	ldr	r2, [r7, #32]
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f000 fac2 	bl	80083a8 <I2C_MasterRequestWrite>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e08d      	b.n	8007f4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e2e:	2300      	movs	r3, #0
 8007e30:	613b      	str	r3, [r7, #16]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	695b      	ldr	r3, [r3, #20]
 8007e38:	613b      	str	r3, [r7, #16]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	699b      	ldr	r3, [r3, #24]
 8007e40:	613b      	str	r3, [r7, #16]
 8007e42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007e44:	e066      	b.n	8007f14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	6a39      	ldr	r1, [r7, #32]
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f000 fcd2 	bl	80087f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00d      	beq.n	8007e72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	d107      	bne.n	8007e6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e06b      	b.n	8007f4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	781a      	ldrb	r2, [r3, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	1c5a      	adds	r2, r3, #1
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	f003 0304 	and.w	r3, r3, #4
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	d11b      	bne.n	8007ee8 <HAL_I2C_Master_Transmit+0x188>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d017      	beq.n	8007ee8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebc:	781a      	ldrb	r2, [r3, #0]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	1c5a      	adds	r2, r3, #1
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	6a39      	ldr	r1, [r7, #32]
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 fcc2 	bl	8008876 <I2C_WaitOnBTFFlagUntilTimeout>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00d      	beq.n	8007f14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efc:	2b04      	cmp	r3, #4
 8007efe:	d107      	bne.n	8007f10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e01a      	b.n	8007f4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d194      	bne.n	8007e46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	e000      	b.n	8007f4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007f48:	2302      	movs	r3, #2
  }
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	00100002 	.word	0x00100002
 8007f58:	ffff0000 	.word	0xffff0000

08007f5c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b08c      	sub	sp, #48	; 0x30
 8007f60:	af02      	add	r7, sp, #8
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	607a      	str	r2, [r7, #4]
 8007f66:	461a      	mov	r2, r3
 8007f68:	460b      	mov	r3, r1
 8007f6a:	817b      	strh	r3, [r7, #10]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f70:	f7fe faea 	bl	8006548 <HAL_GetTick>
 8007f74:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b20      	cmp	r3, #32
 8007f80:	f040 820b 	bne.w	800839a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	2319      	movs	r3, #25
 8007f8a:	2201      	movs	r2, #1
 8007f8c:	497c      	ldr	r1, [pc, #496]	; (8008180 <HAL_I2C_Master_Receive+0x224>)
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f000 fb5a 	bl	8008648 <I2C_WaitOnFlagUntilTimeout>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007f9a:	2302      	movs	r3, #2
 8007f9c:	e1fe      	b.n	800839c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d101      	bne.n	8007fac <HAL_I2C_Master_Receive+0x50>
 8007fa8:	2302      	movs	r3, #2
 8007faa:	e1f7      	b.n	800839c <HAL_I2C_Master_Receive+0x440>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d007      	beq.n	8007fd2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f042 0201 	orr.w	r2, r2, #1
 8007fd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fe0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2222      	movs	r2, #34	; 0x22
 8007fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2210      	movs	r2, #16
 8007fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	893a      	ldrh	r2, [r7, #8]
 8008002:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008008:	b29a      	uxth	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	4a5c      	ldr	r2, [pc, #368]	; (8008184 <HAL_I2C_Master_Receive+0x228>)
 8008012:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008014:	8979      	ldrh	r1, [r7, #10]
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 fa46 	bl	80084ac <I2C_MasterRequestRead>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e1b8      	b.n	800839c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800802e:	2b00      	cmp	r3, #0
 8008030:	d113      	bne.n	800805a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008032:	2300      	movs	r3, #0
 8008034:	623b      	str	r3, [r7, #32]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	695b      	ldr	r3, [r3, #20]
 800803c:	623b      	str	r3, [r7, #32]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	623b      	str	r3, [r7, #32]
 8008046:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	e18c      	b.n	8008374 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800805e:	2b01      	cmp	r3, #1
 8008060:	d11b      	bne.n	800809a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008070:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008072:	2300      	movs	r3, #0
 8008074:	61fb      	str	r3, [r7, #28]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	61fb      	str	r3, [r7, #28]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	61fb      	str	r3, [r7, #28]
 8008086:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	e16c      	b.n	8008374 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d11b      	bne.n	80080da <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080c2:	2300      	movs	r3, #0
 80080c4:	61bb      	str	r3, [r7, #24]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	61bb      	str	r3, [r7, #24]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	61bb      	str	r3, [r7, #24]
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	e14c      	b.n	8008374 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080ea:	2300      	movs	r3, #0
 80080ec:	617b      	str	r3, [r7, #20]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	695b      	ldr	r3, [r3, #20]
 80080f4:	617b      	str	r3, [r7, #20]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	617b      	str	r3, [r7, #20]
 80080fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008100:	e138      	b.n	8008374 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008106:	2b03      	cmp	r3, #3
 8008108:	f200 80f1 	bhi.w	80082ee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008110:	2b01      	cmp	r3, #1
 8008112:	d123      	bne.n	800815c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008116:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 fbed 	bl	80088f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e139      	b.n	800839c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	691a      	ldr	r2, [r3, #16]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008132:	b2d2      	uxtb	r2, r2
 8008134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813a:	1c5a      	adds	r2, r3, #1
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008144:	3b01      	subs	r3, #1
 8008146:	b29a      	uxth	r2, r3
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008150:	b29b      	uxth	r3, r3
 8008152:	3b01      	subs	r3, #1
 8008154:	b29a      	uxth	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	855a      	strh	r2, [r3, #42]	; 0x2a
 800815a:	e10b      	b.n	8008374 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008160:	2b02      	cmp	r3, #2
 8008162:	d14e      	bne.n	8008202 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	2200      	movs	r2, #0
 800816c:	4906      	ldr	r1, [pc, #24]	; (8008188 <HAL_I2C_Master_Receive+0x22c>)
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 fa6a 	bl	8008648 <I2C_WaitOnFlagUntilTimeout>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d008      	beq.n	800818c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e10e      	b.n	800839c <HAL_I2C_Master_Receive+0x440>
 800817e:	bf00      	nop
 8008180:	00100002 	.word	0x00100002
 8008184:	ffff0000 	.word	0xffff0000
 8008188:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800819a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	691a      	ldr	r2, [r3, #16]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	b2d2      	uxtb	r2, r2
 80081a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081b8:	3b01      	subs	r3, #1
 80081ba:	b29a      	uxth	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	3b01      	subs	r3, #1
 80081c8:	b29a      	uxth	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	691a      	ldr	r2, [r3, #16]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	b2d2      	uxtb	r2, r2
 80081da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ea:	3b01      	subs	r3, #1
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	3b01      	subs	r3, #1
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008200:	e0b8      	b.n	8008374 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	2200      	movs	r2, #0
 800820a:	4966      	ldr	r1, [pc, #408]	; (80083a4 <HAL_I2C_Master_Receive+0x448>)
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 fa1b 	bl	8008648 <I2C_WaitOnFlagUntilTimeout>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	e0bf      	b.n	800839c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800822a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	691a      	ldr	r2, [r3, #16]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	b2d2      	uxtb	r2, r2
 8008238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	1c5a      	adds	r2, r3, #1
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008248:	3b01      	subs	r3, #1
 800824a:	b29a      	uxth	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008254:	b29b      	uxth	r3, r3
 8008256:	3b01      	subs	r3, #1
 8008258:	b29a      	uxth	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008264:	2200      	movs	r2, #0
 8008266:	494f      	ldr	r1, [pc, #316]	; (80083a4 <HAL_I2C_Master_Receive+0x448>)
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 f9ed 	bl	8008648 <I2C_WaitOnFlagUntilTimeout>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d001      	beq.n	8008278 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e091      	b.n	800839c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008286:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	691a      	ldr	r2, [r3, #16]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008292:	b2d2      	uxtb	r2, r2
 8008294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082a4:	3b01      	subs	r3, #1
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	3b01      	subs	r3, #1
 80082b4:	b29a      	uxth	r2, r3
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	691a      	ldr	r2, [r3, #16]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c4:	b2d2      	uxtb	r2, r2
 80082c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082d6:	3b01      	subs	r3, #1
 80082d8:	b29a      	uxth	r2, r3
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	3b01      	subs	r3, #1
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80082ec:	e042      	b.n	8008374 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80082ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 fb00 	bl	80088f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e04c      	b.n	800839c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	691a      	ldr	r2, [r3, #16]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830c:	b2d2      	uxtb	r2, r2
 800830e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800831e:	3b01      	subs	r3, #1
 8008320:	b29a      	uxth	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800832a:	b29b      	uxth	r3, r3
 800832c:	3b01      	subs	r3, #1
 800832e:	b29a      	uxth	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	f003 0304 	and.w	r3, r3, #4
 800833e:	2b04      	cmp	r3, #4
 8008340:	d118      	bne.n	8008374 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	691a      	ldr	r2, [r3, #16]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834c:	b2d2      	uxtb	r2, r2
 800834e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800835e:	3b01      	subs	r3, #1
 8008360:	b29a      	uxth	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800836a:	b29b      	uxth	r3, r3
 800836c:	3b01      	subs	r3, #1
 800836e:	b29a      	uxth	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008378:	2b00      	cmp	r3, #0
 800837a:	f47f aec2 	bne.w	8008102 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2220      	movs	r2, #32
 8008382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	e000      	b.n	800839c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800839a:	2302      	movs	r3, #2
  }
}
 800839c:	4618      	mov	r0, r3
 800839e:	3728      	adds	r7, #40	; 0x28
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	00010004 	.word	0x00010004

080083a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af02      	add	r7, sp, #8
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	607a      	str	r2, [r7, #4]
 80083b2:	603b      	str	r3, [r7, #0]
 80083b4:	460b      	mov	r3, r1
 80083b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d006      	beq.n	80083d2 <I2C_MasterRequestWrite+0x2a>
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d003      	beq.n	80083d2 <I2C_MasterRequestWrite+0x2a>
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80083d0:	d108      	bne.n	80083e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681a      	ldr	r2, [r3, #0]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083e0:	601a      	str	r2, [r3, #0]
 80083e2:	e00b      	b.n	80083fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e8:	2b12      	cmp	r3, #18
 80083ea:	d107      	bne.n	80083fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 f91d 	bl	8008648 <I2C_WaitOnFlagUntilTimeout>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00d      	beq.n	8008430 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800841e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008422:	d103      	bne.n	800842c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800842a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e035      	b.n	800849c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008438:	d108      	bne.n	800844c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800843a:	897b      	ldrh	r3, [r7, #10]
 800843c:	b2db      	uxtb	r3, r3
 800843e:	461a      	mov	r2, r3
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008448:	611a      	str	r2, [r3, #16]
 800844a:	e01b      	b.n	8008484 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800844c:	897b      	ldrh	r3, [r7, #10]
 800844e:	11db      	asrs	r3, r3, #7
 8008450:	b2db      	uxtb	r3, r3
 8008452:	f003 0306 	and.w	r3, r3, #6
 8008456:	b2db      	uxtb	r3, r3
 8008458:	f063 030f 	orn	r3, r3, #15
 800845c:	b2da      	uxtb	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	490e      	ldr	r1, [pc, #56]	; (80084a4 <I2C_MasterRequestWrite+0xfc>)
 800846a:	68f8      	ldr	r0, [r7, #12]
 800846c:	f000 f943 	bl	80086f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e010      	b.n	800849c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800847a:	897b      	ldrh	r3, [r7, #10]
 800847c:	b2da      	uxtb	r2, r3
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	4907      	ldr	r1, [pc, #28]	; (80084a8 <I2C_MasterRequestWrite+0x100>)
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f000 f933 	bl	80086f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e000      	b.n	800849c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	00010008 	.word	0x00010008
 80084a8:	00010002 	.word	0x00010002

080084ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af02      	add	r7, sp, #8
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	607a      	str	r2, [r7, #4]
 80084b6:	603b      	str	r3, [r7, #0]
 80084b8:	460b      	mov	r3, r1
 80084ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	2b08      	cmp	r3, #8
 80084d6:	d006      	beq.n	80084e6 <I2C_MasterRequestRead+0x3a>
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d003      	beq.n	80084e6 <I2C_MasterRequestRead+0x3a>
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80084e4:	d108      	bne.n	80084f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084f4:	601a      	str	r2, [r3, #0]
 80084f6:	e00b      	b.n	8008510 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fc:	2b11      	cmp	r3, #17
 80084fe:	d107      	bne.n	8008510 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800850e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	9300      	str	r3, [sp, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	f000 f893 	bl	8008648 <I2C_WaitOnFlagUntilTimeout>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00d      	beq.n	8008544 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008536:	d103      	bne.n	8008540 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800853e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e079      	b.n	8008638 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800854c:	d108      	bne.n	8008560 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800854e:	897b      	ldrh	r3, [r7, #10]
 8008550:	b2db      	uxtb	r3, r3
 8008552:	f043 0301 	orr.w	r3, r3, #1
 8008556:	b2da      	uxtb	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	611a      	str	r2, [r3, #16]
 800855e:	e05f      	b.n	8008620 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008560:	897b      	ldrh	r3, [r7, #10]
 8008562:	11db      	asrs	r3, r3, #7
 8008564:	b2db      	uxtb	r3, r3
 8008566:	f003 0306 	and.w	r3, r3, #6
 800856a:	b2db      	uxtb	r3, r3
 800856c:	f063 030f 	orn	r3, r3, #15
 8008570:	b2da      	uxtb	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	4930      	ldr	r1, [pc, #192]	; (8008640 <I2C_MasterRequestRead+0x194>)
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f000 f8b9 	bl	80086f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e054      	b.n	8008638 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800858e:	897b      	ldrh	r3, [r7, #10]
 8008590:	b2da      	uxtb	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	4929      	ldr	r1, [pc, #164]	; (8008644 <I2C_MasterRequestRead+0x198>)
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 f8a9 	bl	80086f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e044      	b.n	8008638 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085ae:	2300      	movs	r3, #0
 80085b0:	613b      	str	r3, [r7, #16]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	613b      	str	r3, [r7, #16]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	613b      	str	r3, [r7, #16]
 80085c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 f831 	bl	8008648 <I2C_WaitOnFlagUntilTimeout>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00d      	beq.n	8008608 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085fa:	d103      	bne.n	8008604 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008602:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e017      	b.n	8008638 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008608:	897b      	ldrh	r3, [r7, #10]
 800860a:	11db      	asrs	r3, r3, #7
 800860c:	b2db      	uxtb	r3, r3
 800860e:	f003 0306 	and.w	r3, r3, #6
 8008612:	b2db      	uxtb	r3, r3
 8008614:	f063 030e 	orn	r3, r3, #14
 8008618:	b2da      	uxtb	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	4907      	ldr	r1, [pc, #28]	; (8008644 <I2C_MasterRequestRead+0x198>)
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f000 f865 	bl	80086f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e000      	b.n	8008638 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3718      	adds	r7, #24
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	00010008 	.word	0x00010008
 8008644:	00010002 	.word	0x00010002

08008648 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	603b      	str	r3, [r7, #0]
 8008654:	4613      	mov	r3, r2
 8008656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008658:	e025      	b.n	80086a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008660:	d021      	beq.n	80086a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008662:	f7fd ff71 	bl	8006548 <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	429a      	cmp	r2, r3
 8008670:	d302      	bcc.n	8008678 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d116      	bne.n	80086a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2220      	movs	r2, #32
 8008682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008692:	f043 0220 	orr.w	r2, r3, #32
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e023      	b.n	80086ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	0c1b      	lsrs	r3, r3, #16
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d10d      	bne.n	80086cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	43da      	mvns	r2, r3
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	4013      	ands	r3, r2
 80086bc:	b29b      	uxth	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	bf0c      	ite	eq
 80086c2:	2301      	moveq	r3, #1
 80086c4:	2300      	movne	r3, #0
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	461a      	mov	r2, r3
 80086ca:	e00c      	b.n	80086e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	43da      	mvns	r2, r3
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	4013      	ands	r3, r2
 80086d8:	b29b      	uxth	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	bf0c      	ite	eq
 80086de:	2301      	moveq	r3, #1
 80086e0:	2300      	movne	r3, #0
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	461a      	mov	r2, r3
 80086e6:	79fb      	ldrb	r3, [r7, #7]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d0b6      	beq.n	800865a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3710      	adds	r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b084      	sub	sp, #16
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	60f8      	str	r0, [r7, #12]
 80086fe:	60b9      	str	r1, [r7, #8]
 8008700:	607a      	str	r2, [r7, #4]
 8008702:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008704:	e051      	b.n	80087aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008714:	d123      	bne.n	800875e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008724:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800872e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2220      	movs	r2, #32
 800873a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874a:	f043 0204 	orr.w	r2, r3, #4
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e046      	b.n	80087ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008764:	d021      	beq.n	80087aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008766:	f7fd feef 	bl	8006548 <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	429a      	cmp	r2, r3
 8008774:	d302      	bcc.n	800877c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d116      	bne.n	80087aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2220      	movs	r2, #32
 8008786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008796:	f043 0220 	orr.w	r2, r3, #32
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	e020      	b.n	80087ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	0c1b      	lsrs	r3, r3, #16
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d10c      	bne.n	80087ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	43da      	mvns	r2, r3
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	4013      	ands	r3, r2
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	bf14      	ite	ne
 80087c6:	2301      	movne	r3, #1
 80087c8:	2300      	moveq	r3, #0
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	e00b      	b.n	80087e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	43da      	mvns	r2, r3
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	4013      	ands	r3, r2
 80087da:	b29b      	uxth	r3, r3
 80087dc:	2b00      	cmp	r3, #0
 80087de:	bf14      	ite	ne
 80087e0:	2301      	movne	r3, #1
 80087e2:	2300      	moveq	r3, #0
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d18d      	bne.n	8008706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008800:	e02d      	b.n	800885e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008802:	68f8      	ldr	r0, [r7, #12]
 8008804:	f000 f8ce 	bl	80089a4 <I2C_IsAcknowledgeFailed>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d001      	beq.n	8008812 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e02d      	b.n	800886e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008818:	d021      	beq.n	800885e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800881a:	f7fd fe95 	bl	8006548 <HAL_GetTick>
 800881e:	4602      	mov	r2, r0
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	429a      	cmp	r2, r3
 8008828:	d302      	bcc.n	8008830 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d116      	bne.n	800885e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2200      	movs	r2, #0
 8008834:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2220      	movs	r2, #32
 800883a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884a:	f043 0220 	orr.w	r2, r3, #32
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e007      	b.n	800886e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	695b      	ldr	r3, [r3, #20]
 8008864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008868:	2b80      	cmp	r3, #128	; 0x80
 800886a:	d1ca      	bne.n	8008802 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800886c:	2300      	movs	r3, #0
}
 800886e:	4618      	mov	r0, r3
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b084      	sub	sp, #16
 800887a:	af00      	add	r7, sp, #0
 800887c:	60f8      	str	r0, [r7, #12]
 800887e:	60b9      	str	r1, [r7, #8]
 8008880:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008882:	e02d      	b.n	80088e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 f88d 	bl	80089a4 <I2C_IsAcknowledgeFailed>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e02d      	b.n	80088f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889a:	d021      	beq.n	80088e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800889c:	f7fd fe54 	bl	8006548 <HAL_GetTick>
 80088a0:	4602      	mov	r2, r0
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d302      	bcc.n	80088b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d116      	bne.n	80088e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2220      	movs	r2, #32
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088cc:	f043 0220 	orr.w	r2, r3, #32
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	e007      	b.n	80088f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	f003 0304 	and.w	r3, r3, #4
 80088ea:	2b04      	cmp	r3, #4
 80088ec:	d1ca      	bne.n	8008884 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008904:	e042      	b.n	800898c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	f003 0310 	and.w	r3, r3, #16
 8008910:	2b10      	cmp	r3, #16
 8008912:	d119      	bne.n	8008948 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f06f 0210 	mvn.w	r2, #16
 800891c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2220      	movs	r2, #32
 8008928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e029      	b.n	800899c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008948:	f7fd fdfe 	bl	8006548 <HAL_GetTick>
 800894c:	4602      	mov	r2, r0
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	429a      	cmp	r2, r3
 8008956:	d302      	bcc.n	800895e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d116      	bne.n	800898c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2220      	movs	r2, #32
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008978:	f043 0220 	orr.w	r2, r3, #32
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e007      	b.n	800899c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008996:	2b40      	cmp	r3, #64	; 0x40
 8008998:	d1b5      	bne.n	8008906 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80089b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089ba:	d11b      	bne.n	80089f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80089c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2220      	movs	r2, #32
 80089d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e0:	f043 0204 	orr.w	r2, r3, #4
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e000      	b.n	80089f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80089f4:	2300      	movs	r3, #0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
	...

08008a04 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008a0e:	2300      	movs	r3, #0
 8008a10:	603b      	str	r3, [r7, #0]
 8008a12:	4b20      	ldr	r3, [pc, #128]	; (8008a94 <HAL_PWREx_EnableOverDrive+0x90>)
 8008a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a16:	4a1f      	ldr	r2, [pc, #124]	; (8008a94 <HAL_PWREx_EnableOverDrive+0x90>)
 8008a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8008a1e:	4b1d      	ldr	r3, [pc, #116]	; (8008a94 <HAL_PWREx_EnableOverDrive+0x90>)
 8008a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a26:	603b      	str	r3, [r7, #0]
 8008a28:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008a2a:	4b1b      	ldr	r3, [pc, #108]	; (8008a98 <HAL_PWREx_EnableOverDrive+0x94>)
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a30:	f7fd fd8a 	bl	8006548 <HAL_GetTick>
 8008a34:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008a36:	e009      	b.n	8008a4c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008a38:	f7fd fd86 	bl	8006548 <HAL_GetTick>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a46:	d901      	bls.n	8008a4c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e01f      	b.n	8008a8c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008a4c:	4b13      	ldr	r3, [pc, #76]	; (8008a9c <HAL_PWREx_EnableOverDrive+0x98>)
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a58:	d1ee      	bne.n	8008a38 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008a5a:	4b11      	ldr	r3, [pc, #68]	; (8008aa0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a60:	f7fd fd72 	bl	8006548 <HAL_GetTick>
 8008a64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008a66:	e009      	b.n	8008a7c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008a68:	f7fd fd6e 	bl	8006548 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a76:	d901      	bls.n	8008a7c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008a78:	2303      	movs	r3, #3
 8008a7a:	e007      	b.n	8008a8c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008a7c:	4b07      	ldr	r3, [pc, #28]	; (8008a9c <HAL_PWREx_EnableOverDrive+0x98>)
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a88:	d1ee      	bne.n	8008a68 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	40023800 	.word	0x40023800
 8008a98:	420e0040 	.word	0x420e0040
 8008a9c:	40007000 	.word	0x40007000
 8008aa0:	420e0044 	.word	0x420e0044

08008aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b084      	sub	sp, #16
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e0cc      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008ab8:	4b68      	ldr	r3, [pc, #416]	; (8008c5c <HAL_RCC_ClockConfig+0x1b8>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 030f 	and.w	r3, r3, #15
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d90c      	bls.n	8008ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ac6:	4b65      	ldr	r3, [pc, #404]	; (8008c5c <HAL_RCC_ClockConfig+0x1b8>)
 8008ac8:	683a      	ldr	r2, [r7, #0]
 8008aca:	b2d2      	uxtb	r2, r2
 8008acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ace:	4b63      	ldr	r3, [pc, #396]	; (8008c5c <HAL_RCC_ClockConfig+0x1b8>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 030f 	and.w	r3, r3, #15
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d001      	beq.n	8008ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e0b8      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0302 	and.w	r3, r3, #2
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d020      	beq.n	8008b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0304 	and.w	r3, r3, #4
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d005      	beq.n	8008b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008af8:	4b59      	ldr	r3, [pc, #356]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	4a58      	ldr	r2, [pc, #352]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0308 	and.w	r3, r3, #8
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d005      	beq.n	8008b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b10:	4b53      	ldr	r3, [pc, #332]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	4a52      	ldr	r2, [pc, #328]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b1c:	4b50      	ldr	r3, [pc, #320]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	494d      	ldr	r1, [pc, #308]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d044      	beq.n	8008bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d107      	bne.n	8008b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b42:	4b47      	ldr	r3, [pc, #284]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d119      	bne.n	8008b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e07f      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d003      	beq.n	8008b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d107      	bne.n	8008b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b62:	4b3f      	ldr	r3, [pc, #252]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d109      	bne.n	8008b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e06f      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b72:	4b3b      	ldr	r3, [pc, #236]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e067      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b82:	4b37      	ldr	r3, [pc, #220]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f023 0203 	bic.w	r2, r3, #3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	4934      	ldr	r1, [pc, #208]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008b90:	4313      	orrs	r3, r2
 8008b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b94:	f7fd fcd8 	bl	8006548 <HAL_GetTick>
 8008b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b9a:	e00a      	b.n	8008bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b9c:	f7fd fcd4 	bl	8006548 <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d901      	bls.n	8008bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e04f      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bb2:	4b2b      	ldr	r3, [pc, #172]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f003 020c 	and.w	r2, r3, #12
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d1eb      	bne.n	8008b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008bc4:	4b25      	ldr	r3, [pc, #148]	; (8008c5c <HAL_RCC_ClockConfig+0x1b8>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f003 030f 	and.w	r3, r3, #15
 8008bcc:	683a      	ldr	r2, [r7, #0]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d20c      	bcs.n	8008bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bd2:	4b22      	ldr	r3, [pc, #136]	; (8008c5c <HAL_RCC_ClockConfig+0x1b8>)
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	b2d2      	uxtb	r2, r2
 8008bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bda:	4b20      	ldr	r3, [pc, #128]	; (8008c5c <HAL_RCC_ClockConfig+0x1b8>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 030f 	and.w	r3, r3, #15
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d001      	beq.n	8008bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e032      	b.n	8008c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0304 	and.w	r3, r3, #4
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d008      	beq.n	8008c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bf8:	4b19      	ldr	r3, [pc, #100]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	4916      	ldr	r1, [pc, #88]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c06:	4313      	orrs	r3, r2
 8008c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0308 	and.w	r3, r3, #8
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d009      	beq.n	8008c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c16:	4b12      	ldr	r3, [pc, #72]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	00db      	lsls	r3, r3, #3
 8008c24:	490e      	ldr	r1, [pc, #56]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c26:	4313      	orrs	r3, r2
 8008c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c2a:	f000 f821 	bl	8008c70 <HAL_RCC_GetSysClockFreq>
 8008c2e:	4601      	mov	r1, r0
 8008c30:	4b0b      	ldr	r3, [pc, #44]	; (8008c60 <HAL_RCC_ClockConfig+0x1bc>)
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	091b      	lsrs	r3, r3, #4
 8008c36:	f003 030f 	and.w	r3, r3, #15
 8008c3a:	4a0a      	ldr	r2, [pc, #40]	; (8008c64 <HAL_RCC_ClockConfig+0x1c0>)
 8008c3c:	5cd3      	ldrb	r3, [r2, r3]
 8008c3e:	fa21 f303 	lsr.w	r3, r1, r3
 8008c42:	4a09      	ldr	r2, [pc, #36]	; (8008c68 <HAL_RCC_ClockConfig+0x1c4>)
 8008c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c46:	4b09      	ldr	r3, [pc, #36]	; (8008c6c <HAL_RCC_ClockConfig+0x1c8>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fd fc38 	bl	80064c0 <HAL_InitTick>

  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	40023c00 	.word	0x40023c00
 8008c60:	40023800 	.word	0x40023800
 8008c64:	08017d90 	.word	0x08017d90
 8008c68:	20000000 	.word	0x20000000
 8008c6c:	20000004 	.word	0x20000004

08008c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008c76:	2300      	movs	r3, #0
 8008c78:	607b      	str	r3, [r7, #4]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	60fb      	str	r3, [r7, #12]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c86:	4b63      	ldr	r3, [pc, #396]	; (8008e14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f003 030c 	and.w	r3, r3, #12
 8008c8e:	2b04      	cmp	r3, #4
 8008c90:	d007      	beq.n	8008ca2 <HAL_RCC_GetSysClockFreq+0x32>
 8008c92:	2b08      	cmp	r3, #8
 8008c94:	d008      	beq.n	8008ca8 <HAL_RCC_GetSysClockFreq+0x38>
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f040 80b4 	bne.w	8008e04 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c9c:	4b5e      	ldr	r3, [pc, #376]	; (8008e18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008c9e:	60bb      	str	r3, [r7, #8]
       break;
 8008ca0:	e0b3      	b.n	8008e0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ca2:	4b5d      	ldr	r3, [pc, #372]	; (8008e18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008ca4:	60bb      	str	r3, [r7, #8]
      break;
 8008ca6:	e0b0      	b.n	8008e0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ca8:	4b5a      	ldr	r3, [pc, #360]	; (8008e14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008cb2:	4b58      	ldr	r3, [pc, #352]	; (8008e14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d04a      	beq.n	8008d54 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cbe:	4b55      	ldr	r3, [pc, #340]	; (8008e14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	099b      	lsrs	r3, r3, #6
 8008cc4:	f04f 0400 	mov.w	r4, #0
 8008cc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008ccc:	f04f 0200 	mov.w	r2, #0
 8008cd0:	ea03 0501 	and.w	r5, r3, r1
 8008cd4:	ea04 0602 	and.w	r6, r4, r2
 8008cd8:	4629      	mov	r1, r5
 8008cda:	4632      	mov	r2, r6
 8008cdc:	f04f 0300 	mov.w	r3, #0
 8008ce0:	f04f 0400 	mov.w	r4, #0
 8008ce4:	0154      	lsls	r4, r2, #5
 8008ce6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008cea:	014b      	lsls	r3, r1, #5
 8008cec:	4619      	mov	r1, r3
 8008cee:	4622      	mov	r2, r4
 8008cf0:	1b49      	subs	r1, r1, r5
 8008cf2:	eb62 0206 	sbc.w	r2, r2, r6
 8008cf6:	f04f 0300 	mov.w	r3, #0
 8008cfa:	f04f 0400 	mov.w	r4, #0
 8008cfe:	0194      	lsls	r4, r2, #6
 8008d00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008d04:	018b      	lsls	r3, r1, #6
 8008d06:	1a5b      	subs	r3, r3, r1
 8008d08:	eb64 0402 	sbc.w	r4, r4, r2
 8008d0c:	f04f 0100 	mov.w	r1, #0
 8008d10:	f04f 0200 	mov.w	r2, #0
 8008d14:	00e2      	lsls	r2, r4, #3
 8008d16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008d1a:	00d9      	lsls	r1, r3, #3
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4614      	mov	r4, r2
 8008d20:	195b      	adds	r3, r3, r5
 8008d22:	eb44 0406 	adc.w	r4, r4, r6
 8008d26:	f04f 0100 	mov.w	r1, #0
 8008d2a:	f04f 0200 	mov.w	r2, #0
 8008d2e:	02a2      	lsls	r2, r4, #10
 8008d30:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008d34:	0299      	lsls	r1, r3, #10
 8008d36:	460b      	mov	r3, r1
 8008d38:	4614      	mov	r4, r2
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	4621      	mov	r1, r4
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f04f 0400 	mov.w	r4, #0
 8008d44:	461a      	mov	r2, r3
 8008d46:	4623      	mov	r3, r4
 8008d48:	f7f7 ffb6 	bl	8000cb8 <__aeabi_uldivmod>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	460c      	mov	r4, r1
 8008d50:	60fb      	str	r3, [r7, #12]
 8008d52:	e049      	b.n	8008de8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d54:	4b2f      	ldr	r3, [pc, #188]	; (8008e14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	099b      	lsrs	r3, r3, #6
 8008d5a:	f04f 0400 	mov.w	r4, #0
 8008d5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008d62:	f04f 0200 	mov.w	r2, #0
 8008d66:	ea03 0501 	and.w	r5, r3, r1
 8008d6a:	ea04 0602 	and.w	r6, r4, r2
 8008d6e:	4629      	mov	r1, r5
 8008d70:	4632      	mov	r2, r6
 8008d72:	f04f 0300 	mov.w	r3, #0
 8008d76:	f04f 0400 	mov.w	r4, #0
 8008d7a:	0154      	lsls	r4, r2, #5
 8008d7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008d80:	014b      	lsls	r3, r1, #5
 8008d82:	4619      	mov	r1, r3
 8008d84:	4622      	mov	r2, r4
 8008d86:	1b49      	subs	r1, r1, r5
 8008d88:	eb62 0206 	sbc.w	r2, r2, r6
 8008d8c:	f04f 0300 	mov.w	r3, #0
 8008d90:	f04f 0400 	mov.w	r4, #0
 8008d94:	0194      	lsls	r4, r2, #6
 8008d96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008d9a:	018b      	lsls	r3, r1, #6
 8008d9c:	1a5b      	subs	r3, r3, r1
 8008d9e:	eb64 0402 	sbc.w	r4, r4, r2
 8008da2:	f04f 0100 	mov.w	r1, #0
 8008da6:	f04f 0200 	mov.w	r2, #0
 8008daa:	00e2      	lsls	r2, r4, #3
 8008dac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008db0:	00d9      	lsls	r1, r3, #3
 8008db2:	460b      	mov	r3, r1
 8008db4:	4614      	mov	r4, r2
 8008db6:	195b      	adds	r3, r3, r5
 8008db8:	eb44 0406 	adc.w	r4, r4, r6
 8008dbc:	f04f 0100 	mov.w	r1, #0
 8008dc0:	f04f 0200 	mov.w	r2, #0
 8008dc4:	02a2      	lsls	r2, r4, #10
 8008dc6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008dca:	0299      	lsls	r1, r3, #10
 8008dcc:	460b      	mov	r3, r1
 8008dce:	4614      	mov	r4, r2
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f04f 0400 	mov.w	r4, #0
 8008dda:	461a      	mov	r2, r3
 8008ddc:	4623      	mov	r3, r4
 8008dde:	f7f7 ff6b 	bl	8000cb8 <__aeabi_uldivmod>
 8008de2:	4603      	mov	r3, r0
 8008de4:	460c      	mov	r4, r1
 8008de6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008de8:	4b0a      	ldr	r3, [pc, #40]	; (8008e14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	0c1b      	lsrs	r3, r3, #16
 8008dee:	f003 0303 	and.w	r3, r3, #3
 8008df2:	3301      	adds	r3, #1
 8008df4:	005b      	lsls	r3, r3, #1
 8008df6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e00:	60bb      	str	r3, [r7, #8]
      break;
 8008e02:	e002      	b.n	8008e0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e04:	4b04      	ldr	r3, [pc, #16]	; (8008e18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008e06:	60bb      	str	r3, [r7, #8]
      break;
 8008e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e0a:	68bb      	ldr	r3, [r7, #8]
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3714      	adds	r7, #20
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e14:	40023800 	.word	0x40023800
 8008e18:	00f42400 	.word	0x00f42400

08008e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e20:	4b03      	ldr	r3, [pc, #12]	; (8008e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8008e22:	681b      	ldr	r3, [r3, #0]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	20000000 	.word	0x20000000

08008e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008e38:	f7ff fff0 	bl	8008e1c <HAL_RCC_GetHCLKFreq>
 8008e3c:	4601      	mov	r1, r0
 8008e3e:	4b05      	ldr	r3, [pc, #20]	; (8008e54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	0a9b      	lsrs	r3, r3, #10
 8008e44:	f003 0307 	and.w	r3, r3, #7
 8008e48:	4a03      	ldr	r2, [pc, #12]	; (8008e58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e4a:	5cd3      	ldrb	r3, [r2, r3]
 8008e4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	40023800 	.word	0x40023800
 8008e58:	08017da0 	.word	0x08017da0

08008e5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008e60:	f7ff ffdc 	bl	8008e1c <HAL_RCC_GetHCLKFreq>
 8008e64:	4601      	mov	r1, r0
 8008e66:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	0b5b      	lsrs	r3, r3, #13
 8008e6c:	f003 0307 	and.w	r3, r3, #7
 8008e70:	4a03      	ldr	r2, [pc, #12]	; (8008e80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e72:	5cd3      	ldrb	r3, [r2, r3]
 8008e74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	40023800 	.word	0x40023800
 8008e80:	08017da0 	.word	0x08017da0

08008e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b088      	sub	sp, #32
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8008e90:	2300      	movs	r3, #0
 8008e92:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d00a      	beq.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008eac:	4b66      	ldr	r3, [pc, #408]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008eae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008eb2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eba:	4963      	ldr	r1, [pc, #396]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00a      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008ece:	4b5e      	ldr	r3, [pc, #376]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ed4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008edc:	495a      	ldr	r1, [pc, #360]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10b      	bne.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d105      	bne.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d075      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008f08:	4b50      	ldr	r3, [pc, #320]	; (800904c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f0e:	f7fd fb1b 	bl	8006548 <HAL_GetTick>
 8008f12:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f14:	e008      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008f16:	f7fd fb17 	bl	8006548 <HAL_GetTick>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d901      	bls.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e1dc      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008f28:	4b47      	ldr	r3, [pc, #284]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1f0      	bne.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0301 	and.w	r3, r3, #1
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d009      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	019a      	lsls	r2, r3, #6
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	071b      	lsls	r3, r3, #28
 8008f4c:	493e      	ldr	r1, [pc, #248]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 0302 	and.w	r3, r3, #2
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d01f      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008f60:	4b39      	ldr	r3, [pc, #228]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008f62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f66:	0f1b      	lsrs	r3, r3, #28
 8008f68:	f003 0307 	and.w	r3, r3, #7
 8008f6c:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	019a      	lsls	r2, r3, #6
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68db      	ldr	r3, [r3, #12]
 8008f78:	061b      	lsls	r3, r3, #24
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	071b      	lsls	r3, r3, #28
 8008f80:	4931      	ldr	r1, [pc, #196]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008f82:	4313      	orrs	r3, r2
 8008f84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008f88:	4b2f      	ldr	r3, [pc, #188]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f8e:	f023 021f 	bic.w	r2, r3, #31
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	492b      	ldr	r1, [pc, #172]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00d      	beq.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	019a      	lsls	r2, r3, #6
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	061b      	lsls	r3, r3, #24
 8008fb8:	431a      	orrs	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	071b      	lsls	r3, r3, #28
 8008fc0:	4921      	ldr	r1, [pc, #132]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008fc8:	4b20      	ldr	r3, [pc, #128]	; (800904c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008fca:	2201      	movs	r2, #1
 8008fcc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008fce:	f7fd fabb 	bl	8006548 <HAL_GetTick>
 8008fd2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008fd4:	e008      	b.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008fd6:	f7fd fab7 	bl	8006548 <HAL_GetTick>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d901      	bls.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e17c      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008fe8:	4b17      	ldr	r3, [pc, #92]	; (8009048 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d0f0      	beq.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 0304 	and.w	r3, r3, #4
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d112      	bne.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10c      	bne.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 80ce 	beq.w	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800901e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009022:	f040 80c8 	bne.w	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009026:	4b0a      	ldr	r3, [pc, #40]	; (8009050 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009028:	2200      	movs	r2, #0
 800902a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800902c:	f7fd fa8c 	bl	8006548 <HAL_GetTick>
 8009030:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009032:	e00f      	b.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009034:	f7fd fa88 	bl	8006548 <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	2b02      	cmp	r3, #2
 8009040:	d908      	bls.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e14d      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8009046:	bf00      	nop
 8009048:	40023800 	.word	0x40023800
 800904c:	42470068 	.word	0x42470068
 8009050:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009054:	4ba5      	ldr	r3, [pc, #660]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800905c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009060:	d0e8      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 0304 	and.w	r3, r3, #4
 800906a:	2b00      	cmp	r3, #0
 800906c:	d02e      	beq.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800906e:	4b9f      	ldr	r3, [pc, #636]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009074:	0c1b      	lsrs	r3, r3, #16
 8009076:	f003 0303 	and.w	r3, r3, #3
 800907a:	3301      	adds	r3, #1
 800907c:	005b      	lsls	r3, r3, #1
 800907e:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009080:	4b9a      	ldr	r3, [pc, #616]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009086:	0f1b      	lsrs	r3, r3, #28
 8009088:	f003 0307 	and.w	r3, r3, #7
 800908c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	019a      	lsls	r2, r3, #6
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	085b      	lsrs	r3, r3, #1
 8009098:	3b01      	subs	r3, #1
 800909a:	041b      	lsls	r3, r3, #16
 800909c:	431a      	orrs	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	699b      	ldr	r3, [r3, #24]
 80090a2:	061b      	lsls	r3, r3, #24
 80090a4:	431a      	orrs	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	071b      	lsls	r3, r3, #28
 80090aa:	4990      	ldr	r1, [pc, #576]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80090ac:	4313      	orrs	r3, r2
 80090ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80090b2:	4b8e      	ldr	r3, [pc, #568]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80090b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	3b01      	subs	r3, #1
 80090c2:	021b      	lsls	r3, r3, #8
 80090c4:	4989      	ldr	r1, [pc, #548]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 0308 	and.w	r3, r3, #8
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d02c      	beq.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80090d8:	4b84      	ldr	r3, [pc, #528]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80090da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090de:	0c1b      	lsrs	r3, r3, #16
 80090e0:	f003 0303 	and.w	r3, r3, #3
 80090e4:	3301      	adds	r3, #1
 80090e6:	005b      	lsls	r3, r3, #1
 80090e8:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80090ea:	4b80      	ldr	r3, [pc, #512]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80090ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090f0:	0e1b      	lsrs	r3, r3, #24
 80090f2:	f003 030f 	and.w	r3, r3, #15
 80090f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	691b      	ldr	r3, [r3, #16]
 80090fc:	019a      	lsls	r2, r3, #6
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	085b      	lsrs	r3, r3, #1
 8009102:	3b01      	subs	r3, #1
 8009104:	041b      	lsls	r3, r3, #16
 8009106:	431a      	orrs	r2, r3
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	061b      	lsls	r3, r3, #24
 800910c:	431a      	orrs	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	69db      	ldr	r3, [r3, #28]
 8009112:	071b      	lsls	r3, r3, #28
 8009114:	4975      	ldr	r1, [pc, #468]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009116:	4313      	orrs	r3, r2
 8009118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800911c:	4b73      	ldr	r3, [pc, #460]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800911e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009122:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912a:	4970      	ldr	r1, [pc, #448]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800912c:	4313      	orrs	r3, r2
 800912e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800913a:	2b00      	cmp	r3, #0
 800913c:	d024      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8009142:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009146:	d11f      	bne.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009148:	4b68      	ldr	r3, [pc, #416]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800914a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800914e:	0e1b      	lsrs	r3, r3, #24
 8009150:	f003 030f 	and.w	r3, r3, #15
 8009154:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009156:	4b65      	ldr	r3, [pc, #404]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800915c:	0f1b      	lsrs	r3, r3, #28
 800915e:	f003 0307 	and.w	r3, r3, #7
 8009162:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	019a      	lsls	r2, r3, #6
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	085b      	lsrs	r3, r3, #1
 8009170:	3b01      	subs	r3, #1
 8009172:	041b      	lsls	r3, r3, #16
 8009174:	431a      	orrs	r2, r3
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	061b      	lsls	r3, r3, #24
 800917a:	431a      	orrs	r2, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	071b      	lsls	r3, r3, #28
 8009180:	495a      	ldr	r1, [pc, #360]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009182:	4313      	orrs	r3, r2
 8009184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009188:	4b59      	ldr	r3, [pc, #356]	; (80092f0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800918a:	2201      	movs	r2, #1
 800918c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800918e:	f7fd f9db 	bl	8006548 <HAL_GetTick>
 8009192:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009194:	e008      	b.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009196:	f7fd f9d7 	bl	8006548 <HAL_GetTick>
 800919a:	4602      	mov	r2, r0
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	d901      	bls.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e09c      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80091a8:	4b50      	ldr	r3, [pc, #320]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091b4:	d1ef      	bne.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0320 	and.w	r3, r3, #32
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 8083 	beq.w	80092ca <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80091c4:	2300      	movs	r3, #0
 80091c6:	60bb      	str	r3, [r7, #8]
 80091c8:	4b48      	ldr	r3, [pc, #288]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80091ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091cc:	4a47      	ldr	r2, [pc, #284]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80091ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091d2:	6413      	str	r3, [r2, #64]	; 0x40
 80091d4:	4b45      	ldr	r3, [pc, #276]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80091d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091dc:	60bb      	str	r3, [r7, #8]
 80091de:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80091e0:	4b44      	ldr	r3, [pc, #272]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a43      	ldr	r2, [pc, #268]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80091e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091ea:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80091ec:	f7fd f9ac 	bl	8006548 <HAL_GetTick>
 80091f0:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80091f2:	e008      	b.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80091f4:	f7fd f9a8 	bl	8006548 <HAL_GetTick>
 80091f8:	4602      	mov	r2, r0
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	1ad3      	subs	r3, r2, r3
 80091fe:	2b02      	cmp	r3, #2
 8009200:	d901      	bls.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8009202:	2303      	movs	r3, #3
 8009204:	e06d      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009206:	4b3b      	ldr	r3, [pc, #236]	; (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800920e:	2b00      	cmp	r3, #0
 8009210:	d0f0      	beq.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009212:	4b36      	ldr	r3, [pc, #216]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800921a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d02f      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800922a:	69ba      	ldr	r2, [r7, #24]
 800922c:	429a      	cmp	r2, r3
 800922e:	d028      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009230:	4b2e      	ldr	r3, [pc, #184]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009238:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800923a:	4b2f      	ldr	r3, [pc, #188]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800923c:	2201      	movs	r2, #1
 800923e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009240:	4b2d      	ldr	r3, [pc, #180]	; (80092f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009242:	2200      	movs	r2, #0
 8009244:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009246:	4a29      	ldr	r2, [pc, #164]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800924c:	4b27      	ldr	r3, [pc, #156]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800924e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	2b01      	cmp	r3, #1
 8009256:	d114      	bne.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009258:	f7fd f976 	bl	8006548 <HAL_GetTick>
 800925c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800925e:	e00a      	b.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009260:	f7fd f972 	bl	8006548 <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	f241 3288 	movw	r2, #5000	; 0x1388
 800926e:	4293      	cmp	r3, r2
 8009270:	d901      	bls.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e035      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009276:	4b1d      	ldr	r3, [pc, #116]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800927a:	f003 0302 	and.w	r3, r3, #2
 800927e:	2b00      	cmp	r3, #0
 8009280:	d0ee      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800928a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800928e:	d10d      	bne.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x428>
 8009290:	4b16      	ldr	r3, [pc, #88]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800929c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80092a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092a4:	4911      	ldr	r1, [pc, #68]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80092a6:	4313      	orrs	r3, r2
 80092a8:	608b      	str	r3, [r1, #8]
 80092aa:	e005      	b.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80092ac:	4b0f      	ldr	r3, [pc, #60]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	4a0e      	ldr	r2, [pc, #56]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80092b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80092b6:	6093      	str	r3, [r2, #8]
 80092b8:	4b0c      	ldr	r3, [pc, #48]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80092ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092c4:	4909      	ldr	r1, [pc, #36]	; (80092ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 0310 	and.w	r3, r3, #16
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d004      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80092dc:	4b07      	ldr	r3, [pc, #28]	; (80092fc <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80092de:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80092e0:	2300      	movs	r3, #0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3720      	adds	r7, #32
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	40023800 	.word	0x40023800
 80092f0:	42470070 	.word	0x42470070
 80092f4:	40007000 	.word	0x40007000
 80092f8:	42470e40 	.word	0x42470e40
 80092fc:	424711e0 	.word	0x424711e0

08009300 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009308:	2300      	movs	r3, #0
 800930a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0301 	and.w	r3, r3, #1
 8009314:	2b00      	cmp	r3, #0
 8009316:	d075      	beq.n	8009404 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009318:	4ba2      	ldr	r3, [pc, #648]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f003 030c 	and.w	r3, r3, #12
 8009320:	2b04      	cmp	r3, #4
 8009322:	d00c      	beq.n	800933e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009324:	4b9f      	ldr	r3, [pc, #636]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800932c:	2b08      	cmp	r3, #8
 800932e:	d112      	bne.n	8009356 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009330:	4b9c      	ldr	r3, [pc, #624]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009338:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800933c:	d10b      	bne.n	8009356 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800933e:	4b99      	ldr	r3, [pc, #612]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009346:	2b00      	cmp	r3, #0
 8009348:	d05b      	beq.n	8009402 <HAL_RCC_OscConfig+0x102>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d157      	bne.n	8009402 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e20b      	b.n	800976e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800935e:	d106      	bne.n	800936e <HAL_RCC_OscConfig+0x6e>
 8009360:	4b90      	ldr	r3, [pc, #576]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a8f      	ldr	r2, [pc, #572]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 8009366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	e01d      	b.n	80093aa <HAL_RCC_OscConfig+0xaa>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009376:	d10c      	bne.n	8009392 <HAL_RCC_OscConfig+0x92>
 8009378:	4b8a      	ldr	r3, [pc, #552]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a89      	ldr	r2, [pc, #548]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 800937e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009382:	6013      	str	r3, [r2, #0]
 8009384:	4b87      	ldr	r3, [pc, #540]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a86      	ldr	r2, [pc, #536]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 800938a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800938e:	6013      	str	r3, [r2, #0]
 8009390:	e00b      	b.n	80093aa <HAL_RCC_OscConfig+0xaa>
 8009392:	4b84      	ldr	r3, [pc, #528]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a83      	ldr	r2, [pc, #524]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 8009398:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	4b81      	ldr	r3, [pc, #516]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a80      	ldr	r2, [pc, #512]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 80093a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d013      	beq.n	80093da <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093b2:	f7fd f8c9 	bl	8006548 <HAL_GetTick>
 80093b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093b8:	e008      	b.n	80093cc <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80093ba:	f7fd f8c5 	bl	8006548 <HAL_GetTick>
 80093be:	4602      	mov	r2, r0
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	1ad3      	subs	r3, r2, r3
 80093c4:	2b64      	cmp	r3, #100	; 0x64
 80093c6:	d901      	bls.n	80093cc <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80093c8:	2303      	movs	r3, #3
 80093ca:	e1d0      	b.n	800976e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093cc:	4b75      	ldr	r3, [pc, #468]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d0f0      	beq.n	80093ba <HAL_RCC_OscConfig+0xba>
 80093d8:	e014      	b.n	8009404 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093da:	f7fd f8b5 	bl	8006548 <HAL_GetTick>
 80093de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093e0:	e008      	b.n	80093f4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80093e2:	f7fd f8b1 	bl	8006548 <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	2b64      	cmp	r3, #100	; 0x64
 80093ee:	d901      	bls.n	80093f4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e1bc      	b.n	800976e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80093f4:	4b6b      	ldr	r3, [pc, #428]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1f0      	bne.n	80093e2 <HAL_RCC_OscConfig+0xe2>
 8009400:	e000      	b.n	8009404 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009402:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 0302 	and.w	r3, r3, #2
 800940c:	2b00      	cmp	r3, #0
 800940e:	d063      	beq.n	80094d8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009410:	4b64      	ldr	r3, [pc, #400]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f003 030c 	and.w	r3, r3, #12
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00b      	beq.n	8009434 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800941c:	4b61      	ldr	r3, [pc, #388]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009424:	2b08      	cmp	r3, #8
 8009426:	d11c      	bne.n	8009462 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009428:	4b5e      	ldr	r3, [pc, #376]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009430:	2b00      	cmp	r3, #0
 8009432:	d116      	bne.n	8009462 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009434:	4b5b      	ldr	r3, [pc, #364]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0302 	and.w	r3, r3, #2
 800943c:	2b00      	cmp	r3, #0
 800943e:	d005      	beq.n	800944c <HAL_RCC_OscConfig+0x14c>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d001      	beq.n	800944c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	e190      	b.n	800976e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800944c:	4b55      	ldr	r3, [pc, #340]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	00db      	lsls	r3, r3, #3
 800945a:	4952      	ldr	r1, [pc, #328]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 800945c:	4313      	orrs	r3, r2
 800945e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009460:	e03a      	b.n	80094d8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d020      	beq.n	80094ac <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800946a:	4b4f      	ldr	r3, [pc, #316]	; (80095a8 <HAL_RCC_OscConfig+0x2a8>)
 800946c:	2201      	movs	r2, #1
 800946e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009470:	f7fd f86a 	bl	8006548 <HAL_GetTick>
 8009474:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009476:	e008      	b.n	800948a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009478:	f7fd f866 	bl	8006548 <HAL_GetTick>
 800947c:	4602      	mov	r2, r0
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	1ad3      	subs	r3, r2, r3
 8009482:	2b02      	cmp	r3, #2
 8009484:	d901      	bls.n	800948a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8009486:	2303      	movs	r3, #3
 8009488:	e171      	b.n	800976e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800948a:	4b46      	ldr	r3, [pc, #280]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b00      	cmp	r3, #0
 8009494:	d0f0      	beq.n	8009478 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009496:	4b43      	ldr	r3, [pc, #268]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	493f      	ldr	r1, [pc, #252]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	600b      	str	r3, [r1, #0]
 80094aa:	e015      	b.n	80094d8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80094ac:	4b3e      	ldr	r3, [pc, #248]	; (80095a8 <HAL_RCC_OscConfig+0x2a8>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094b2:	f7fd f849 	bl	8006548 <HAL_GetTick>
 80094b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094b8:	e008      	b.n	80094cc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80094ba:	f7fd f845 	bl	8006548 <HAL_GetTick>
 80094be:	4602      	mov	r2, r0
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	1ad3      	subs	r3, r2, r3
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	d901      	bls.n	80094cc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80094c8:	2303      	movs	r3, #3
 80094ca:	e150      	b.n	800976e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80094cc:	4b35      	ldr	r3, [pc, #212]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0302 	and.w	r3, r3, #2
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1f0      	bne.n	80094ba <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0308 	and.w	r3, r3, #8
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d030      	beq.n	8009546 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d016      	beq.n	800951a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80094ec:	4b2f      	ldr	r3, [pc, #188]	; (80095ac <HAL_RCC_OscConfig+0x2ac>)
 80094ee:	2201      	movs	r2, #1
 80094f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094f2:	f7fd f829 	bl	8006548 <HAL_GetTick>
 80094f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80094f8:	e008      	b.n	800950c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80094fa:	f7fd f825 	bl	8006548 <HAL_GetTick>
 80094fe:	4602      	mov	r2, r0
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	2b02      	cmp	r3, #2
 8009506:	d901      	bls.n	800950c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8009508:	2303      	movs	r3, #3
 800950a:	e130      	b.n	800976e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800950c:	4b25      	ldr	r3, [pc, #148]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 800950e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009510:	f003 0302 	and.w	r3, r3, #2
 8009514:	2b00      	cmp	r3, #0
 8009516:	d0f0      	beq.n	80094fa <HAL_RCC_OscConfig+0x1fa>
 8009518:	e015      	b.n	8009546 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800951a:	4b24      	ldr	r3, [pc, #144]	; (80095ac <HAL_RCC_OscConfig+0x2ac>)
 800951c:	2200      	movs	r2, #0
 800951e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009520:	f7fd f812 	bl	8006548 <HAL_GetTick>
 8009524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009526:	e008      	b.n	800953a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009528:	f7fd f80e 	bl	8006548 <HAL_GetTick>
 800952c:	4602      	mov	r2, r0
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	2b02      	cmp	r3, #2
 8009534:	d901      	bls.n	800953a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	e119      	b.n	800976e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800953a:	4b1a      	ldr	r3, [pc, #104]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 800953c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800953e:	f003 0302 	and.w	r3, r3, #2
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1f0      	bne.n	8009528 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 0304 	and.w	r3, r3, #4
 800954e:	2b00      	cmp	r3, #0
 8009550:	f000 809f 	beq.w	8009692 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009554:	2300      	movs	r3, #0
 8009556:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009558:	4b12      	ldr	r3, [pc, #72]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 800955a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10f      	bne.n	8009584 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009564:	2300      	movs	r3, #0
 8009566:	60fb      	str	r3, [r7, #12]
 8009568:	4b0e      	ldr	r3, [pc, #56]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 800956a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956c:	4a0d      	ldr	r2, [pc, #52]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 800956e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009572:	6413      	str	r3, [r2, #64]	; 0x40
 8009574:	4b0b      	ldr	r3, [pc, #44]	; (80095a4 <HAL_RCC_OscConfig+0x2a4>)
 8009576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800957c:	60fb      	str	r3, [r7, #12]
 800957e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009580:	2301      	movs	r3, #1
 8009582:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009584:	4b0a      	ldr	r3, [pc, #40]	; (80095b0 <HAL_RCC_OscConfig+0x2b0>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800958c:	2b00      	cmp	r3, #0
 800958e:	d120      	bne.n	80095d2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009590:	4b07      	ldr	r3, [pc, #28]	; (80095b0 <HAL_RCC_OscConfig+0x2b0>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a06      	ldr	r2, [pc, #24]	; (80095b0 <HAL_RCC_OscConfig+0x2b0>)
 8009596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800959a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800959c:	f7fc ffd4 	bl	8006548 <HAL_GetTick>
 80095a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095a2:	e010      	b.n	80095c6 <HAL_RCC_OscConfig+0x2c6>
 80095a4:	40023800 	.word	0x40023800
 80095a8:	42470000 	.word	0x42470000
 80095ac:	42470e80 	.word	0x42470e80
 80095b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095b4:	f7fc ffc8 	bl	8006548 <HAL_GetTick>
 80095b8:	4602      	mov	r2, r0
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d901      	bls.n	80095c6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80095c2:	2303      	movs	r3, #3
 80095c4:	e0d3      	b.n	800976e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80095c6:	4b6c      	ldr	r3, [pc, #432]	; (8009778 <HAL_RCC_OscConfig+0x478>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d0f0      	beq.n	80095b4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	2b01      	cmp	r3, #1
 80095d8:	d106      	bne.n	80095e8 <HAL_RCC_OscConfig+0x2e8>
 80095da:	4b68      	ldr	r3, [pc, #416]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 80095dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095de:	4a67      	ldr	r2, [pc, #412]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 80095e0:	f043 0301 	orr.w	r3, r3, #1
 80095e4:	6713      	str	r3, [r2, #112]	; 0x70
 80095e6:	e01c      	b.n	8009622 <HAL_RCC_OscConfig+0x322>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	2b05      	cmp	r3, #5
 80095ee:	d10c      	bne.n	800960a <HAL_RCC_OscConfig+0x30a>
 80095f0:	4b62      	ldr	r3, [pc, #392]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 80095f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095f4:	4a61      	ldr	r2, [pc, #388]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 80095f6:	f043 0304 	orr.w	r3, r3, #4
 80095fa:	6713      	str	r3, [r2, #112]	; 0x70
 80095fc:	4b5f      	ldr	r3, [pc, #380]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 80095fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009600:	4a5e      	ldr	r2, [pc, #376]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 8009602:	f043 0301 	orr.w	r3, r3, #1
 8009606:	6713      	str	r3, [r2, #112]	; 0x70
 8009608:	e00b      	b.n	8009622 <HAL_RCC_OscConfig+0x322>
 800960a:	4b5c      	ldr	r3, [pc, #368]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 800960c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800960e:	4a5b      	ldr	r2, [pc, #364]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 8009610:	f023 0301 	bic.w	r3, r3, #1
 8009614:	6713      	str	r3, [r2, #112]	; 0x70
 8009616:	4b59      	ldr	r3, [pc, #356]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 8009618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800961a:	4a58      	ldr	r2, [pc, #352]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 800961c:	f023 0304 	bic.w	r3, r3, #4
 8009620:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d015      	beq.n	8009656 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800962a:	f7fc ff8d 	bl	8006548 <HAL_GetTick>
 800962e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009630:	e00a      	b.n	8009648 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009632:	f7fc ff89 	bl	8006548 <HAL_GetTick>
 8009636:	4602      	mov	r2, r0
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009640:	4293      	cmp	r3, r2
 8009642:	d901      	bls.n	8009648 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8009644:	2303      	movs	r3, #3
 8009646:	e092      	b.n	800976e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009648:	4b4c      	ldr	r3, [pc, #304]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 800964a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800964c:	f003 0302 	and.w	r3, r3, #2
 8009650:	2b00      	cmp	r3, #0
 8009652:	d0ee      	beq.n	8009632 <HAL_RCC_OscConfig+0x332>
 8009654:	e014      	b.n	8009680 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009656:	f7fc ff77 	bl	8006548 <HAL_GetTick>
 800965a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800965c:	e00a      	b.n	8009674 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800965e:	f7fc ff73 	bl	8006548 <HAL_GetTick>
 8009662:	4602      	mov	r2, r0
 8009664:	693b      	ldr	r3, [r7, #16]
 8009666:	1ad3      	subs	r3, r2, r3
 8009668:	f241 3288 	movw	r2, #5000	; 0x1388
 800966c:	4293      	cmp	r3, r2
 800966e:	d901      	bls.n	8009674 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8009670:	2303      	movs	r3, #3
 8009672:	e07c      	b.n	800976e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009674:	4b41      	ldr	r3, [pc, #260]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 8009676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1ee      	bne.n	800965e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009680:	7dfb      	ldrb	r3, [r7, #23]
 8009682:	2b01      	cmp	r3, #1
 8009684:	d105      	bne.n	8009692 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009686:	4b3d      	ldr	r3, [pc, #244]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 8009688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968a:	4a3c      	ldr	r2, [pc, #240]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 800968c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009690:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d068      	beq.n	800976c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800969a:	4b38      	ldr	r3, [pc, #224]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f003 030c 	and.w	r3, r3, #12
 80096a2:	2b08      	cmp	r3, #8
 80096a4:	d060      	beq.n	8009768 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d145      	bne.n	800973a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096ae:	4b34      	ldr	r3, [pc, #208]	; (8009780 <HAL_RCC_OscConfig+0x480>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096b4:	f7fc ff48 	bl	8006548 <HAL_GetTick>
 80096b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096ba:	e008      	b.n	80096ce <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096bc:	f7fc ff44 	bl	8006548 <HAL_GetTick>
 80096c0:	4602      	mov	r2, r0
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d901      	bls.n	80096ce <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80096ca:	2303      	movs	r3, #3
 80096cc:	e04f      	b.n	800976e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096ce:	4b2b      	ldr	r3, [pc, #172]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d1f0      	bne.n	80096bc <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	69da      	ldr	r2, [r3, #28]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a1b      	ldr	r3, [r3, #32]
 80096e2:	431a      	orrs	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e8:	019b      	lsls	r3, r3, #6
 80096ea:	431a      	orrs	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f0:	085b      	lsrs	r3, r3, #1
 80096f2:	3b01      	subs	r3, #1
 80096f4:	041b      	lsls	r3, r3, #16
 80096f6:	431a      	orrs	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096fc:	061b      	lsls	r3, r3, #24
 80096fe:	431a      	orrs	r2, r3
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009704:	071b      	lsls	r3, r3, #28
 8009706:	491d      	ldr	r1, [pc, #116]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 8009708:	4313      	orrs	r3, r2
 800970a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800970c:	4b1c      	ldr	r3, [pc, #112]	; (8009780 <HAL_RCC_OscConfig+0x480>)
 800970e:	2201      	movs	r2, #1
 8009710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009712:	f7fc ff19 	bl	8006548 <HAL_GetTick>
 8009716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009718:	e008      	b.n	800972c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800971a:	f7fc ff15 	bl	8006548 <HAL_GetTick>
 800971e:	4602      	mov	r2, r0
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	1ad3      	subs	r3, r2, r3
 8009724:	2b02      	cmp	r3, #2
 8009726:	d901      	bls.n	800972c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009728:	2303      	movs	r3, #3
 800972a:	e020      	b.n	800976e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800972c:	4b13      	ldr	r3, [pc, #76]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009734:	2b00      	cmp	r3, #0
 8009736:	d0f0      	beq.n	800971a <HAL_RCC_OscConfig+0x41a>
 8009738:	e018      	b.n	800976c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800973a:	4b11      	ldr	r3, [pc, #68]	; (8009780 <HAL_RCC_OscConfig+0x480>)
 800973c:	2200      	movs	r2, #0
 800973e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009740:	f7fc ff02 	bl	8006548 <HAL_GetTick>
 8009744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009746:	e008      	b.n	800975a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009748:	f7fc fefe 	bl	8006548 <HAL_GetTick>
 800974c:	4602      	mov	r2, r0
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	2b02      	cmp	r3, #2
 8009754:	d901      	bls.n	800975a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	e009      	b.n	800976e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800975a:	4b08      	ldr	r3, [pc, #32]	; (800977c <HAL_RCC_OscConfig+0x47c>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1f0      	bne.n	8009748 <HAL_RCC_OscConfig+0x448>
 8009766:	e001      	b.n	800976c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009768:	2301      	movs	r3, #1
 800976a:	e000      	b.n	800976e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3718      	adds	r7, #24
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	40007000 	.word	0x40007000
 800977c:	40023800 	.word	0x40023800
 8009780:	42470060 	.word	0x42470060

08009784 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d101      	bne.n	8009796 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e022      	b.n	80097dc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d105      	bne.n	80097ae <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f7fb fc41 	bl	8005030 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2203      	movs	r2, #3
 80097b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f000 f814 	bl	80097e4 <HAL_SD_InitCard>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d001      	beq.n	80097c6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e00a      	b.n	80097dc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80097e4:	b5b0      	push	{r4, r5, r7, lr}
 80097e6:	b08e      	sub	sp, #56	; 0x38
 80097e8:	af04      	add	r7, sp, #16
 80097ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80097ec:	2300      	movs	r3, #0
 80097ee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80097f0:	2300      	movs	r3, #0
 80097f2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80097f4:	2300      	movs	r3, #0
 80097f6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80097f8:	2300      	movs	r3, #0
 80097fa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80097fc:	2300      	movs	r3, #0
 80097fe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009800:	2376      	movs	r3, #118	; 0x76
 8009802:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681d      	ldr	r5, [r3, #0]
 8009808:	466c      	mov	r4, sp
 800980a:	f107 0314 	add.w	r3, r7, #20
 800980e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009812:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009816:	f107 0308 	add.w	r3, r7, #8
 800981a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800981c:	4628      	mov	r0, r5
 800981e:	f003 fa87 	bl	800cd30 <SDIO_Init>
 8009822:	4603      	mov	r3, r0
 8009824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e031      	b.n	8009898 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009834:	4b1a      	ldr	r3, [pc, #104]	; (80098a0 <HAL_SD_InitCard+0xbc>)
 8009836:	2200      	movs	r2, #0
 8009838:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4618      	mov	r0, r3
 8009840:	f003 fabf 	bl	800cdc2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009844:	4b16      	ldr	r3, [pc, #88]	; (80098a0 <HAL_SD_InitCard+0xbc>)
 8009846:	2201      	movs	r2, #1
 8009848:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 ffc6 	bl	800a7dc <SD_PowerON>
 8009850:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009852:	6a3b      	ldr	r3, [r7, #32]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00b      	beq.n	8009870 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	431a      	orrs	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e013      	b.n	8009898 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 fee5 	bl	800a640 <SD_InitCard>
 8009876:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009878:	6a3b      	ldr	r3, [r7, #32]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00b      	beq.n	8009896 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800988a:	6a3b      	ldr	r3, [r7, #32]
 800988c:	431a      	orrs	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e000      	b.n	8009898 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3728      	adds	r7, #40	; 0x28
 800989c:	46bd      	mov	sp, r7
 800989e:	bdb0      	pop	{r4, r5, r7, pc}
 80098a0:	422580a0 	.word	0x422580a0

080098a4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b08c      	sub	sp, #48	; 0x30
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
 80098b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d107      	bne.n	80098cc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e0c7      	b.n	8009a5c <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	f040 80c0 	bne.w	8009a5a <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80098e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	441a      	add	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d907      	bls.n	80098fe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e0ae      	b.n	8009a5c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2203      	movs	r2, #3
 8009902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2200      	movs	r2, #0
 800990c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800991c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009922:	4a50      	ldr	r2, [pc, #320]	; (8009a64 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009924:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800992a:	4a4f      	ldr	r2, [pc, #316]	; (8009a68 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800992c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009932:	2200      	movs	r2, #0
 8009934:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	3380      	adds	r3, #128	; 0x80
 8009940:	4619      	mov	r1, r3
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	025b      	lsls	r3, r3, #9
 8009948:	089b      	lsrs	r3, r3, #2
 800994a:	f7fd fbef 	bl	800712c <HAL_DMA_Start_IT>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d017      	beq.n	8009984 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8009962:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a40      	ldr	r2, [pc, #256]	; (8009a6c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800996a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009970:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e06b      	b.n	8009a5c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009984:	4b3a      	ldr	r3, [pc, #232]	; (8009a70 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8009986:	2201      	movs	r2, #1
 8009988:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800998e:	2b01      	cmp	r3, #1
 8009990:	d002      	beq.n	8009998 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 8009992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009994:	025b      	lsls	r3, r3, #9
 8009996:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80099a0:	4618      	mov	r0, r3
 80099a2:	f003 faa1 	bl	800cee8 <SDMMC_CmdBlockLength>
 80099a6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80099a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d00f      	beq.n	80099ce <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a2e      	ldr	r2, [pc, #184]	; (8009a6c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80099b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099bc:	431a      	orrs	r2, r3
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	e046      	b.n	8009a5c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80099ce:	f04f 33ff 	mov.w	r3, #4294967295
 80099d2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	025b      	lsls	r3, r3, #9
 80099d8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80099da:	2390      	movs	r3, #144	; 0x90
 80099dc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80099de:	2302      	movs	r3, #2
 80099e0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80099e6:	2301      	movs	r3, #1
 80099e8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f107 0210 	add.w	r2, r7, #16
 80099f2:	4611      	mov	r1, r2
 80099f4:	4618      	mov	r0, r3
 80099f6:	f003 fa4b 	bl	800ce90 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d90a      	bls.n	8009a16 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2282      	movs	r2, #130	; 0x82
 8009a04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f003 faaf 	bl	800cf70 <SDMMC_CmdReadMultiBlock>
 8009a12:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009a14:	e009      	b.n	8009a2a <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2281      	movs	r2, #129	; 0x81
 8009a1a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a22:	4618      	mov	r0, r3
 8009a24:	f003 fa82 	bl	800cf2c <SDMMC_CmdReadSingleBlock>
 8009a28:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d012      	beq.n	8009a56 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a0d      	ldr	r2, [pc, #52]	; (8009a6c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009a36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3e:	431a      	orrs	r2, r3
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e002      	b.n	8009a5c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 8009a56:	2300      	movs	r3, #0
 8009a58:	e000      	b.n	8009a5c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 8009a5a:	2302      	movs	r3, #2
  }
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3730      	adds	r7, #48	; 0x30
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	0800a44f 	.word	0x0800a44f
 8009a68:	0800a4c1 	.word	0x0800a4c1
 8009a6c:	004005ff 	.word	0x004005ff
 8009a70:	4225858c 	.word	0x4225858c

08009a74 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b08c      	sub	sp, #48	; 0x30
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
 8009a80:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d107      	bne.n	8009a9c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a90:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e0ca      	b.n	8009c32 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	f040 80c3 	bne.w	8009c30 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2200      	movs	r2, #0
 8009aae:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	441a      	add	r2, r3
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d907      	bls.n	8009ace <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e0b1      	b.n	8009c32 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2203      	movs	r2, #3
 8009ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2200      	movs	r2, #0
 8009adc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f042 021a 	orr.w	r2, r2, #26
 8009aec:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009af2:	4a52      	ldr	r2, [pc, #328]	; (8009c3c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009af4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009afa:	4a51      	ldr	r2, [pc, #324]	; (8009c40 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 8009afc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b02:	2200      	movs	r2, #0
 8009b04:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d002      	beq.n	8009b14 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b10:	025b      	lsls	r3, r3, #9
 8009b12:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f003 f9e3 	bl	800cee8 <SDMMC_CmdBlockLength>
 8009b22:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00f      	beq.n	8009b4a <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a45      	ldr	r2, [pc, #276]	; (8009c44 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009b30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b38:	431a      	orrs	r2, r3
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2201      	movs	r2, #1
 8009b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e073      	b.n	8009c32 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d90a      	bls.n	8009b66 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	22a0      	movs	r2, #160	; 0xa0
 8009b54:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f003 fa4b 	bl	800cff8 <SDMMC_CmdWriteMultiBlock>
 8009b62:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009b64:	e009      	b.n	8009b7a <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2290      	movs	r2, #144	; 0x90
 8009b6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b72:	4618      	mov	r0, r3
 8009b74:	f003 fa1e 	bl	800cfb4 <SDMMC_CmdWriteSingleBlock>
 8009b78:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d012      	beq.n	8009ba6 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a2f      	ldr	r2, [pc, #188]	; (8009c44 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009b86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8e:	431a      	orrs	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e045      	b.n	8009c32 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009ba6:	4b28      	ldr	r3, [pc, #160]	; (8009c48 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8009ba8:	2201      	movs	r2, #1
 8009baa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009bb0:	68b9      	ldr	r1, [r7, #8]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3380      	adds	r3, #128	; 0x80
 8009bb8:	461a      	mov	r2, r3
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	025b      	lsls	r3, r3, #9
 8009bbe:	089b      	lsrs	r3, r3, #2
 8009bc0:	f7fd fab4 	bl	800712c <HAL_DMA_Start_IT>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d01a      	beq.n	8009c00 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f022 021a 	bic.w	r2, r2, #26
 8009bd8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a19      	ldr	r2, [pc, #100]	; (8009c44 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009be0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e018      	b.n	8009c32 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c00:	f04f 33ff 	mov.w	r3, #4294967295
 8009c04:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	025b      	lsls	r3, r3, #9
 8009c0a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009c0c:	2390      	movs	r3, #144	; 0x90
 8009c0e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009c10:	2300      	movs	r3, #0
 8009c12:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f107 0210 	add.w	r2, r7, #16
 8009c24:	4611      	mov	r1, r2
 8009c26:	4618      	mov	r0, r3
 8009c28:	f003 f932 	bl	800ce90 <SDIO_ConfigData>

      return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	e000      	b.n	8009c32 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 8009c30:	2302      	movs	r3, #2
  }
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3730      	adds	r7, #48	; 0x30
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	0800a425 	.word	0x0800a425
 8009c40:	0800a4c1 	.word	0x0800a4c1
 8009c44:	004005ff 	.word	0x004005ff
 8009c48:	4225858c 	.word	0x4225858c

08009c4c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b084      	sub	sp, #16
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c58:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d008      	beq.n	8009c7a <HAL_SD_IRQHandler+0x2e>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f003 0308 	and.w	r3, r3, #8
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 ffc8 	bl	800ac08 <SD_Read_IT>
 8009c78:	e155      	b.n	8009f26 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 808f 	beq.w	8009da8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c92:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	6812      	ldr	r2, [r2, #0]
 8009c9e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8009ca2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8009ca6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f022 0201 	bic.w	r2, r2, #1
 8009cb6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f003 0308 	and.w	r3, r3, #8
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d039      	beq.n	8009d36 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f003 0302 	and.w	r3, r3, #2
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d104      	bne.n	8009cd6 <HAL_SD_IRQHandler+0x8a>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f003 0320 	and.w	r3, r3, #32
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d011      	beq.n	8009cfa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f003 f9ae 	bl	800d03c <SDMMC_CmdStopTransfer>
 8009ce0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d008      	beq.n	8009cfa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	431a      	orrs	r2, r3
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f91f 	bl	8009f38 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f240 523a 	movw	r2, #1338	; 0x53a
 8009d02:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d104      	bne.n	8009d26 <HAL_SD_IRQHandler+0xda>
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f003 0302 	and.w	r3, r3, #2
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d003      	beq.n	8009d2e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f003 fe0c 	bl	800d944 <HAL_SD_RxCpltCallback>
 8009d2c:	e0fb      	b.n	8009f26 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f003 fdfe 	bl	800d930 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009d34:	e0f7      	b.n	8009f26 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f000 80f2 	beq.w	8009f26 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f003 0320 	and.w	r3, r3, #32
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d011      	beq.n	8009d70 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4618      	mov	r0, r3
 8009d52:	f003 f973 	bl	800d03c <SDMMC_CmdStopTransfer>
 8009d56:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d008      	beq.n	8009d70 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	431a      	orrs	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f8e4 	bl	8009f38 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f003 0301 	and.w	r3, r3, #1
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	f040 80d5 	bne.w	8009f26 <HAL_SD_IRQHandler+0x2da>
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f003 0302 	and.w	r3, r3, #2
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	f040 80cf 	bne.w	8009f26 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f022 0208 	bic.w	r2, r2, #8
 8009d96:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f003 fdc5 	bl	800d930 <HAL_SD_TxCpltCallback>
}
 8009da6:	e0be      	b.n	8009f26 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d008      	beq.n	8009dc8 <HAL_SD_IRQHandler+0x17c>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f003 0308 	and.w	r3, r3, #8
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d003      	beq.n	8009dc8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f000 ff72 	bl	800acaa <SD_Write_IT>
 8009dc6:	e0ae      	b.n	8009f26 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dce:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f000 80a7 	beq.w	8009f26 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dde:	f003 0302 	and.w	r3, r3, #2
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d005      	beq.n	8009df2 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dea:	f043 0202 	orr.w	r2, r3, #2
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df8:	f003 0308 	and.w	r3, r3, #8
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d005      	beq.n	8009e0c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e04:	f043 0208 	orr.w	r2, r3, #8
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e12:	f003 0320 	and.w	r3, r3, #32
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d005      	beq.n	8009e26 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1e:	f043 0220 	orr.w	r2, r3, #32
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2c:	f003 0310 	and.w	r3, r3, #16
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d005      	beq.n	8009e40 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e38:	f043 0210 	orr.w	r2, r3, #16
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f240 523a 	movw	r2, #1338	; 0x53a
 8009e48:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009e58:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f003 f8ec 	bl	800d03c <SDMMC_CmdStopTransfer>
 8009e64:	4602      	mov	r2, r0
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6a:	431a      	orrs	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f003 0308 	and.w	r3, r3, #8
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00a      	beq.n	8009e90 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2200      	movs	r2, #0
 8009e86:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f855 	bl	8009f38 <HAL_SD_ErrorCallback>
}
 8009e8e:	e04a      	b.n	8009f26 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d045      	beq.n	8009f26 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f003 0310 	and.w	r3, r3, #16
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d104      	bne.n	8009eae <HAL_SD_IRQHandler+0x262>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f003 0320 	and.w	r3, r3, #32
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d011      	beq.n	8009ed2 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb2:	4a1f      	ldr	r2, [pc, #124]	; (8009f30 <HAL_SD_IRQHandler+0x2e4>)
 8009eb4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f7fd f98e 	bl	80071dc <HAL_DMA_Abort_IT>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d02f      	beq.n	8009f26 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f000 fb4a 	bl	800a564 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009ed0:	e029      	b.n	8009f26 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f003 0301 	and.w	r3, r3, #1
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d104      	bne.n	8009ee6 <HAL_SD_IRQHandler+0x29a>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f003 0302 	and.w	r3, r3, #2
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d011      	beq.n	8009f0a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eea:	4a12      	ldr	r2, [pc, #72]	; (8009f34 <HAL_SD_IRQHandler+0x2e8>)
 8009eec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fd f972 	bl	80071dc <HAL_DMA_Abort_IT>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d013      	beq.n	8009f26 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f02:	4618      	mov	r0, r3
 8009f04:	f000 fb65 	bl	800a5d2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009f08:	e00d      	b.n	8009f26 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f003 fcfc 	bl	800d91c <HAL_SD_AbortCallback>
}
 8009f24:	e7ff      	b.n	8009f26 <HAL_SD_IRQHandler+0x2da>
 8009f26:	bf00      	nop
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	0800a565 	.word	0x0800a565
 8009f34:	0800a5d3 	.word	0x0800a5d3

08009f38 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f5a:	0f9b      	lsrs	r3, r3, #30
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f66:	0e9b      	lsrs	r3, r3, #26
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	f003 030f 	and.w	r3, r3, #15
 8009f6e:	b2da      	uxtb	r2, r3
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f78:	0e1b      	lsrs	r3, r3, #24
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	f003 0303 	and.w	r3, r3, #3
 8009f80:	b2da      	uxtb	r2, r3
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f8a:	0c1b      	lsrs	r3, r3, #16
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f96:	0a1b      	lsrs	r3, r3, #8
 8009f98:	b2da      	uxtb	r2, r3
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fa2:	b2da      	uxtb	r2, r3
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fac:	0d1b      	lsrs	r3, r3, #20
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fb8:	0c1b      	lsrs	r3, r3, #16
 8009fba:	b2db      	uxtb	r3, r3
 8009fbc:	f003 030f 	and.w	r3, r3, #15
 8009fc0:	b2da      	uxtb	r2, r3
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fca:	0bdb      	lsrs	r3, r3, #15
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fdc:	0b9b      	lsrs	r3, r3, #14
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	f003 0301 	and.w	r3, r3, #1
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009fee:	0b5b      	lsrs	r3, r3, #13
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	f003 0301 	and.w	r3, r3, #1
 8009ff6:	b2da      	uxtb	r2, r3
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a000:	0b1b      	lsrs	r3, r3, #12
 800a002:	b2db      	uxtb	r3, r3
 800a004:	f003 0301 	and.w	r3, r3, #1
 800a008:	b2da      	uxtb	r2, r3
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2200      	movs	r2, #0
 800a012:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d163      	bne.n	800a0e4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a020:	009a      	lsls	r2, r3, #2
 800a022:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a026:	4013      	ands	r3, r2
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a02c:	0f92      	lsrs	r2, r2, #30
 800a02e:	431a      	orrs	r2, r3
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a038:	0edb      	lsrs	r3, r3, #27
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	f003 0307 	and.w	r3, r3, #7
 800a040:	b2da      	uxtb	r2, r3
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a04a:	0e1b      	lsrs	r3, r3, #24
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	f003 0307 	and.w	r3, r3, #7
 800a052:	b2da      	uxtb	r2, r3
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a05c:	0d5b      	lsrs	r3, r3, #21
 800a05e:	b2db      	uxtb	r3, r3
 800a060:	f003 0307 	and.w	r3, r3, #7
 800a064:	b2da      	uxtb	r2, r3
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a06e:	0c9b      	lsrs	r3, r3, #18
 800a070:	b2db      	uxtb	r3, r3
 800a072:	f003 0307 	and.w	r3, r3, #7
 800a076:	b2da      	uxtb	r2, r3
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a080:	0bdb      	lsrs	r3, r3, #15
 800a082:	b2db      	uxtb	r3, r3
 800a084:	f003 0307 	and.w	r3, r3, #7
 800a088:	b2da      	uxtb	r2, r3
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	1c5a      	adds	r2, r3, #1
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	7e1b      	ldrb	r3, [r3, #24]
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	f003 0307 	and.w	r3, r3, #7
 800a0a2:	3302      	adds	r3, #2
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a0ae:	fb02 f203 	mul.w	r2, r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	7a1b      	ldrb	r3, [r3, #8]
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	f003 030f 	and.w	r3, r3, #15
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	409a      	lsls	r2, r3
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a0d0:	0a52      	lsrs	r2, r2, #9
 800a0d2:	fb02 f203 	mul.w	r2, r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0e0:	661a      	str	r2, [r3, #96]	; 0x60
 800a0e2:	e031      	b.n	800a148 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d11d      	bne.n	800a128 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a0f0:	041b      	lsls	r3, r3, #16
 800a0f2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0fa:	0c1b      	lsrs	r3, r3, #16
 800a0fc:	431a      	orrs	r2, r3
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	3301      	adds	r3, #1
 800a108:	029a      	lsls	r2, r3, #10
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a11c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	661a      	str	r2, [r3, #96]	; 0x60
 800a126:	e00f      	b.n	800a148 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a58      	ldr	r2, [pc, #352]	; (800a290 <HAL_SD_GetCardCSD+0x344>)
 800a12e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a134:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	e09d      	b.n	800a284 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a14c:	0b9b      	lsrs	r3, r3, #14
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	f003 0301 	and.w	r3, r3, #1
 800a154:	b2da      	uxtb	r2, r3
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a15e:	09db      	lsrs	r3, r3, #7
 800a160:	b2db      	uxtb	r3, r3
 800a162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a166:	b2da      	uxtb	r2, r3
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a170:	b2db      	uxtb	r3, r3
 800a172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a176:	b2da      	uxtb	r2, r3
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a180:	0fdb      	lsrs	r3, r3, #31
 800a182:	b2da      	uxtb	r2, r3
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a18c:	0f5b      	lsrs	r3, r3, #29
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	f003 0303 	and.w	r3, r3, #3
 800a194:	b2da      	uxtb	r2, r3
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a19e:	0e9b      	lsrs	r3, r3, #26
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	f003 0307 	and.w	r3, r3, #7
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b0:	0d9b      	lsrs	r3, r3, #22
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	f003 030f 	and.w	r3, r3, #15
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1c2:	0d5b      	lsrs	r3, r3, #21
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	f003 0301 	and.w	r3, r3, #1
 800a1ca:	b2da      	uxtb	r2, r3
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1de:	0c1b      	lsrs	r3, r3, #16
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	f003 0301 	and.w	r3, r3, #1
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1f2:	0bdb      	lsrs	r3, r3, #15
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	f003 0301 	and.w	r3, r3, #1
 800a1fa:	b2da      	uxtb	r2, r3
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a206:	0b9b      	lsrs	r3, r3, #14
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	f003 0301 	and.w	r3, r3, #1
 800a20e:	b2da      	uxtb	r2, r3
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a21a:	0b5b      	lsrs	r3, r3, #13
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	f003 0301 	and.w	r3, r3, #1
 800a222:	b2da      	uxtb	r2, r3
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a22e:	0b1b      	lsrs	r3, r3, #12
 800a230:	b2db      	uxtb	r3, r3
 800a232:	f003 0301 	and.w	r3, r3, #1
 800a236:	b2da      	uxtb	r2, r3
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a242:	0a9b      	lsrs	r3, r3, #10
 800a244:	b2db      	uxtb	r3, r3
 800a246:	f003 0303 	and.w	r3, r3, #3
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a256:	0a1b      	lsrs	r3, r3, #8
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	f003 0303 	and.w	r3, r3, #3
 800a25e:	b2da      	uxtb	r2, r3
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a26a:	085b      	lsrs	r3, r3, #1
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a272:	b2da      	uxtb	r2, r3
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2201      	movs	r2, #1
 800a27e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr
 800a290:	004005ff 	.word	0x004005ff

0800a294 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a2ec:	b5b0      	push	{r4, r5, r7, lr}
 800a2ee:	b08e      	sub	sp, #56	; 0x38
 800a2f0:	af04      	add	r7, sp, #16
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2203      	movs	r2, #3
 800a2fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a302:	2b03      	cmp	r3, #3
 800a304:	d02e      	beq.n	800a364 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a30c:	d106      	bne.n	800a31c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a312:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	639a      	str	r2, [r3, #56]	; 0x38
 800a31a:	e029      	b.n	800a370 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a322:	d10a      	bne.n	800a33a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 fb0f 	bl	800a948 <SD_WideBus_Enable>
 800a32a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a332:	431a      	orrs	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	639a      	str	r2, [r3, #56]	; 0x38
 800a338:	e01a      	b.n	800a370 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d10a      	bne.n	800a356 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fb4c 	bl	800a9de <SD_WideBus_Disable>
 800a346:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34e:	431a      	orrs	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	639a      	str	r2, [r3, #56]	; 0x38
 800a354:	e00c      	b.n	800a370 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a35a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	639a      	str	r2, [r3, #56]	; 0x38
 800a362:	e005      	b.n	800a370 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a368:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a374:	2b00      	cmp	r3, #0
 800a376:	d009      	beq.n	800a38c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a18      	ldr	r2, [pc, #96]	; (800a3e0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800a37e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	e024      	b.n	800a3d6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681d      	ldr	r5, [r3, #0]
 800a3b2:	466c      	mov	r4, sp
 800a3b4:	f107 0318 	add.w	r3, r7, #24
 800a3b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a3bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a3c0:	f107 030c 	add.w	r3, r7, #12
 800a3c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	f002 fcb2 	bl	800cd30 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3728      	adds	r7, #40	; 0x28
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bdb0      	pop	{r4, r5, r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	004005ff 	.word	0x004005ff

0800a3e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b086      	sub	sp, #24
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a3f0:	f107 030c 	add.w	r3, r7, #12
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 fa7e 	bl	800a8f8 <SD_SendStatus>
 800a3fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d005      	beq.n	800a410 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	431a      	orrs	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	0a5b      	lsrs	r3, r3, #9
 800a414:	f003 030f 	and.w	r3, r3, #15
 800a418:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a41a:	693b      	ldr	r3, [r7, #16]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3718      	adds	r7, #24
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a424:	b480      	push	{r7}
 800a426:	b085      	sub	sp, #20
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a430:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a440:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a442:	bf00      	nop
 800a444:	3714      	adds	r7, #20
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr

0800a44e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b084      	sub	sp, #16
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a460:	2b82      	cmp	r3, #130	; 0x82
 800a462:	d111      	bne.n	800a488 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4618      	mov	r0, r3
 800a46a:	f002 fde7 	bl	800d03c <SDMMC_CmdStopTransfer>
 800a46e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d008      	beq.n	800a488 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	431a      	orrs	r2, r3
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f7ff fd58 	bl	8009f38 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f022 0208 	bic.w	r2, r2, #8
 800a496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f240 523a 	movw	r2, #1338	; 0x53a
 800a4a0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a4b0:	68f8      	ldr	r0, [r7, #12]
 800a4b2:	f003 fa47 	bl	800d944 <HAL_SD_RxCpltCallback>
#endif
}
 800a4b6:	bf00      	nop
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
	...

0800a4c0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4cc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f7fd f830 	bl	8007534 <HAL_DMA_GetError>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d03e      	beq.n	800a558 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4e0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4e8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d002      	beq.n	800a4f6 <SD_DMAError+0x36>
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d12d      	bne.n	800a552 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a19      	ldr	r2, [pc, #100]	; (800a560 <SD_DMAError+0xa0>)
 800a4fc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a50c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a50e:	697b      	ldr	r3, [r7, #20]
 800a510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a512:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a51a:	6978      	ldr	r0, [r7, #20]
 800a51c:	f7ff ff62 	bl	800a3e4 <HAL_SD_GetCardState>
 800a520:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	2b06      	cmp	r3, #6
 800a526:	d002      	beq.n	800a52e <SD_DMAError+0x6e>
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	2b05      	cmp	r3, #5
 800a52c:	d10a      	bne.n	800a544 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4618      	mov	r0, r3
 800a534:	f002 fd82 	bl	800d03c <SDMMC_CmdStopTransfer>
 800a538:	4602      	mov	r2, r0
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53e:	431a      	orrs	r2, r3
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	2200      	movs	r2, #0
 800a550:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a552:	6978      	ldr	r0, [r7, #20]
 800a554:	f7ff fcf0 	bl	8009f38 <HAL_SD_ErrorCallback>
#endif
  }
}
 800a558:	bf00      	nop
 800a55a:	3718      	adds	r7, #24
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	004005ff 	.word	0x004005ff

0800a564 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a570:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f240 523a 	movw	r2, #1338	; 0x53a
 800a57a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f7ff ff31 	bl	800a3e4 <HAL_SD_GetCardState>
 800a582:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2b06      	cmp	r3, #6
 800a596:	d002      	beq.n	800a59e <SD_DMATxAbort+0x3a>
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	2b05      	cmp	r3, #5
 800a59c:	d10a      	bne.n	800a5b4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f002 fd4a 	bl	800d03c <SDMMC_CmdStopTransfer>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ae:	431a      	orrs	r2, r3
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d103      	bne.n	800a5c4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f003 f9ad 	bl	800d91c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a5c2:	e002      	b.n	800a5ca <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f7ff fcb7 	bl	8009f38 <HAL_SD_ErrorCallback>
}
 800a5ca:	bf00      	nop
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b084      	sub	sp, #16
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5de:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f240 523a 	movw	r2, #1338	; 0x53a
 800a5e8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f7ff fefa 	bl	800a3e4 <HAL_SD_GetCardState>
 800a5f0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	2b06      	cmp	r3, #6
 800a604:	d002      	beq.n	800a60c <SD_DMARxAbort+0x3a>
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	2b05      	cmp	r3, #5
 800a60a:	d10a      	bne.n	800a622 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4618      	mov	r0, r3
 800a612:	f002 fd13 	bl	800d03c <SDMMC_CmdStopTransfer>
 800a616:	4602      	mov	r2, r0
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a61c:	431a      	orrs	r2, r3
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a626:	2b00      	cmp	r3, #0
 800a628:	d103      	bne.n	800a632 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f003 f976 	bl	800d91c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a630:	e002      	b.n	800a638 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f7ff fc80 	bl	8009f38 <HAL_SD_ErrorCallback>
}
 800a638:	bf00      	nop
 800a63a:	3710      	adds	r7, #16
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}

0800a640 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a640:	b5b0      	push	{r4, r5, r7, lr}
 800a642:	b094      	sub	sp, #80	; 0x50
 800a644:	af04      	add	r7, sp, #16
 800a646:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a648:	2301      	movs	r3, #1
 800a64a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4618      	mov	r0, r3
 800a652:	f002 fbc5 	bl	800cde0 <SDIO_GetPowerState>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d102      	bne.n	800a662 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a65c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a660:	e0b7      	b.n	800a7d2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a666:	2b03      	cmp	r3, #3
 800a668:	d02f      	beq.n	800a6ca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4618      	mov	r0, r3
 800a670:	f002 fdee 	bl	800d250 <SDMMC_CmdSendCID>
 800a674:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <SD_InitCard+0x40>
    {
      return errorstate;
 800a67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a67e:	e0a8      	b.n	800a7d2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2100      	movs	r1, #0
 800a686:	4618      	mov	r0, r3
 800a688:	f002 fbef 	bl	800ce6a <SDIO_GetResponse>
 800a68c:	4602      	mov	r2, r0
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2104      	movs	r1, #4
 800a698:	4618      	mov	r0, r3
 800a69a:	f002 fbe6 	bl	800ce6a <SDIO_GetResponse>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2108      	movs	r1, #8
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f002 fbdd 	bl	800ce6a <SDIO_GetResponse>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	210c      	movs	r1, #12
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f002 fbd4 	bl	800ce6a <SDIO_GetResponse>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6ce:	2b03      	cmp	r3, #3
 800a6d0:	d00d      	beq.n	800a6ee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f107 020e 	add.w	r2, r7, #14
 800a6da:	4611      	mov	r1, r2
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f002 fdf4 	bl	800d2ca <SDMMC_CmdSetRelAdd>
 800a6e2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a6e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d001      	beq.n	800a6ee <SD_InitCard+0xae>
    {
      return errorstate;
 800a6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ec:	e071      	b.n	800a7d2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6f2:	2b03      	cmp	r3, #3
 800a6f4:	d036      	beq.n	800a764 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a6f6:	89fb      	ldrh	r3, [r7, #14]
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681a      	ldr	r2, [r3, #0]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a706:	041b      	lsls	r3, r3, #16
 800a708:	4619      	mov	r1, r3
 800a70a:	4610      	mov	r0, r2
 800a70c:	f002 fdbe 	bl	800d28c <SDMMC_CmdSendCSD>
 800a710:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a714:	2b00      	cmp	r3, #0
 800a716:	d001      	beq.n	800a71c <SD_InitCard+0xdc>
    {
      return errorstate;
 800a718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a71a:	e05a      	b.n	800a7d2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2100      	movs	r1, #0
 800a722:	4618      	mov	r0, r3
 800a724:	f002 fba1 	bl	800ce6a <SDIO_GetResponse>
 800a728:	4602      	mov	r2, r0
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2104      	movs	r1, #4
 800a734:	4618      	mov	r0, r3
 800a736:	f002 fb98 	bl	800ce6a <SDIO_GetResponse>
 800a73a:	4602      	mov	r2, r0
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2108      	movs	r1, #8
 800a746:	4618      	mov	r0, r3
 800a748:	f002 fb8f 	bl	800ce6a <SDIO_GetResponse>
 800a74c:	4602      	mov	r2, r0
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	210c      	movs	r1, #12
 800a758:	4618      	mov	r0, r3
 800a75a:	f002 fb86 	bl	800ce6a <SDIO_GetResponse>
 800a75e:	4602      	mov	r2, r0
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2104      	movs	r1, #4
 800a76a:	4618      	mov	r0, r3
 800a76c:	f002 fb7d 	bl	800ce6a <SDIO_GetResponse>
 800a770:	4603      	mov	r3, r0
 800a772:	0d1a      	lsrs	r2, r3, #20
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a778:	f107 0310 	add.w	r3, r7, #16
 800a77c:	4619      	mov	r1, r3
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f7ff fbe4 	bl	8009f4c <HAL_SD_GetCardCSD>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d002      	beq.n	800a790 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a78a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a78e:	e020      	b.n	800a7d2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6819      	ldr	r1, [r3, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a798:	041b      	lsls	r3, r3, #16
 800a79a:	f04f 0400 	mov.w	r4, #0
 800a79e:	461a      	mov	r2, r3
 800a7a0:	4623      	mov	r3, r4
 800a7a2:	4608      	mov	r0, r1
 800a7a4:	f002 fc6c 	bl	800d080 <SDMMC_CmdSelDesel>
 800a7a8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d001      	beq.n	800a7b4 <SD_InitCard+0x174>
  {
    return errorstate;
 800a7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7b2:	e00e      	b.n	800a7d2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681d      	ldr	r5, [r3, #0]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	466c      	mov	r4, sp
 800a7bc:	f103 0210 	add.w	r2, r3, #16
 800a7c0:	ca07      	ldmia	r2, {r0, r1, r2}
 800a7c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a7c6:	3304      	adds	r3, #4
 800a7c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	f002 fab0 	bl	800cd30 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3740      	adds	r7, #64	; 0x40
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a7dc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	617b      	str	r3, [r7, #20]
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f002 fc66 	bl	800d0c6 <SDMMC_CmdGoIdleState>
 800a7fa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	e072      	b.n	800a8ec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4618      	mov	r0, r3
 800a80c:	f002 fc79 	bl	800d102 <SDMMC_CmdOperCond>
 800a810:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00d      	beq.n	800a834 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4618      	mov	r0, r3
 800a824:	f002 fc4f 	bl	800d0c6 <SDMMC_CmdGoIdleState>
 800a828:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d004      	beq.n	800a83a <SD_PowerON+0x5e>
    {
      return errorstate;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	e05b      	b.n	800a8ec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d137      	bne.n	800a8b2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2100      	movs	r1, #0
 800a848:	4618      	mov	r0, r3
 800a84a:	f002 fc79 	bl	800d140 <SDMMC_CmdAppCommand>
 800a84e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d02d      	beq.n	800a8b2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a856:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a85a:	e047      	b.n	800a8ec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2100      	movs	r1, #0
 800a862:	4618      	mov	r0, r3
 800a864:	f002 fc6c 	bl	800d140 <SDMMC_CmdAppCommand>
 800a868:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d001      	beq.n	800a874 <SD_PowerON+0x98>
    {
      return errorstate;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	e03b      	b.n	800a8ec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	491e      	ldr	r1, [pc, #120]	; (800a8f4 <SD_PowerON+0x118>)
 800a87a:	4618      	mov	r0, r3
 800a87c:	f002 fc82 	bl	800d184 <SDMMC_CmdAppOperCommand>
 800a880:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d002      	beq.n	800a88e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a888:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a88c:	e02e      	b.n	800a8ec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2100      	movs	r1, #0
 800a894:	4618      	mov	r0, r3
 800a896:	f002 fae8 	bl	800ce6a <SDIO_GetResponse>
 800a89a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	0fdb      	lsrs	r3, r3, #31
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d101      	bne.n	800a8a8 <SD_PowerON+0xcc>
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e000      	b.n	800a8aa <SD_PowerON+0xce>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	613b      	str	r3, [r7, #16]

    count++;
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d802      	bhi.n	800a8c2 <SD_PowerON+0xe6>
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d0cc      	beq.n	800a85c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d902      	bls.n	800a8d2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a8cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a8d0:	e00c      	b.n	800a8ec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d003      	beq.n	800a8e4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	645a      	str	r2, [r3, #68]	; 0x44
 800a8e2:	e002      	b.n	800a8ea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3718      	adds	r7, #24
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	c1100000 	.word	0xc1100000

0800a8f8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d102      	bne.n	800a90e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a908:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a90c:	e018      	b.n	800a940 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a916:	041b      	lsls	r3, r3, #16
 800a918:	4619      	mov	r1, r3
 800a91a:	4610      	mov	r0, r2
 800a91c:	f002 fcf6 	bl	800d30c <SDMMC_CmdSendStatus>
 800a920:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <SD_SendStatus+0x34>
  {
    return errorstate;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	e009      	b.n	800a940 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	2100      	movs	r1, #0
 800a932:	4618      	mov	r0, r3
 800a934:	f002 fa99 	bl	800ce6a <SDIO_GetResponse>
 800a938:	4602      	mov	r2, r0
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b086      	sub	sp, #24
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a950:	2300      	movs	r3, #0
 800a952:	60fb      	str	r3, [r7, #12]
 800a954:	2300      	movs	r3, #0
 800a956:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2100      	movs	r1, #0
 800a95e:	4618      	mov	r0, r3
 800a960:	f002 fa83 	bl	800ce6a <SDIO_GetResponse>
 800a964:	4603      	mov	r3, r0
 800a966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a96a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a96e:	d102      	bne.n	800a976 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a970:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a974:	e02f      	b.n	800a9d6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a976:	f107 030c 	add.w	r3, r7, #12
 800a97a:	4619      	mov	r1, r3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 f879 	bl	800aa74 <SD_FindSCR>
 800a982:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d001      	beq.n	800a98e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	e023      	b.n	800a9d6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d01c      	beq.n	800a9d2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9a0:	041b      	lsls	r3, r3, #16
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	4610      	mov	r0, r2
 800a9a6:	f002 fbcb 	bl	800d140 <SDMMC_CmdAppCommand>
 800a9aa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	e00f      	b.n	800a9d6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2102      	movs	r1, #2
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f002 fc04 	bl	800d1ca <SDMMC_CmdBusWidth>
 800a9c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d001      	beq.n	800a9ce <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	e003      	b.n	800a9d6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	e001      	b.n	800a9d6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a9d2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3718      	adds	r7, #24
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b086      	sub	sp, #24
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	60fb      	str	r3, [r7, #12]
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f002 fa38 	bl	800ce6a <SDIO_GetResponse>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa04:	d102      	bne.n	800aa0c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aa06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa0a:	e02f      	b.n	800aa6c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aa0c:	f107 030c 	add.w	r3, r7, #12
 800aa10:	4619      	mov	r1, r3
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f82e 	bl	800aa74 <SD_FindSCR>
 800aa18:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d001      	beq.n	800aa24 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	e023      	b.n	800aa6c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d01c      	beq.n	800aa68 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa36:	041b      	lsls	r3, r3, #16
 800aa38:	4619      	mov	r1, r3
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	f002 fb80 	bl	800d140 <SDMMC_CmdAppCommand>
 800aa40:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d001      	beq.n	800aa4c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	e00f      	b.n	800aa6c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2100      	movs	r1, #0
 800aa52:	4618      	mov	r0, r3
 800aa54:	f002 fbb9 	bl	800d1ca <SDMMC_CmdBusWidth>
 800aa58:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d001      	beq.n	800aa64 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	e003      	b.n	800aa6c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aa64:	2300      	movs	r3, #0
 800aa66:	e001      	b.n	800aa6c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aa68:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3718      	adds	r7, #24
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800aa74:	b590      	push	{r4, r7, lr}
 800aa76:	b08f      	sub	sp, #60	; 0x3c
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800aa7e:	f7fb fd63 	bl	8006548 <HAL_GetTick>
 800aa82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800aa84:	2300      	movs	r3, #0
 800aa86:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800aa88:	2300      	movs	r3, #0
 800aa8a:	60bb      	str	r3, [r7, #8]
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2108      	movs	r1, #8
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f002 fa24 	bl	800cee8 <SDMMC_CmdBlockLength>
 800aaa0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d001      	beq.n	800aaac <SD_FindSCR+0x38>
  {
    return errorstate;
 800aaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaaa:	e0a9      	b.n	800ac00 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aab4:	041b      	lsls	r3, r3, #16
 800aab6:	4619      	mov	r1, r3
 800aab8:	4610      	mov	r0, r2
 800aaba:	f002 fb41 	bl	800d140 <SDMMC_CmdAppCommand>
 800aabe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d001      	beq.n	800aaca <SD_FindSCR+0x56>
  {
    return errorstate;
 800aac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac8:	e09a      	b.n	800ac00 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aaca:	f04f 33ff 	mov.w	r3, #4294967295
 800aace:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800aad0:	2308      	movs	r3, #8
 800aad2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800aad4:	2330      	movs	r3, #48	; 0x30
 800aad6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800aad8:	2302      	movs	r3, #2
 800aada:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800aadc:	2300      	movs	r3, #0
 800aade:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800aae0:	2301      	movs	r3, #1
 800aae2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f107 0210 	add.w	r2, r7, #16
 800aaec:	4611      	mov	r1, r2
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f002 f9ce 	bl	800ce90 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f002 fb88 	bl	800d20e <SDMMC_CmdSendSCR>
 800aafe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d022      	beq.n	800ab4c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800ab06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab08:	e07a      	b.n	800ac00 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d00e      	beq.n	800ab36 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6819      	ldr	r1, [r3, #0]
 800ab1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	f107 0208 	add.w	r2, r7, #8
 800ab24:	18d4      	adds	r4, r2, r3
 800ab26:	4608      	mov	r0, r1
 800ab28:	f002 f92d 	bl	800cd86 <SDIO_ReadFIFO>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	6023      	str	r3, [r4, #0]
      index++;
 800ab30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab32:	3301      	adds	r3, #1
 800ab34:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ab36:	f7fb fd07 	bl	8006548 <HAL_GetTick>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab44:	d102      	bne.n	800ab4c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ab46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab4a:	e059      	b.n	800ac00 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab52:	f240 432a 	movw	r3, #1066	; 0x42a
 800ab56:	4013      	ands	r3, r2
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d0d6      	beq.n	800ab0a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab62:	f003 0308 	and.w	r3, r3, #8
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d005      	beq.n	800ab76 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2208      	movs	r2, #8
 800ab70:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ab72:	2308      	movs	r3, #8
 800ab74:	e044      	b.n	800ac00 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab7c:	f003 0302 	and.w	r3, r3, #2
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d005      	beq.n	800ab90 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2202      	movs	r2, #2
 800ab8a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	e037      	b.n	800ac00 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab96:	f003 0320 	and.w	r3, r3, #32
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d005      	beq.n	800abaa <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	2220      	movs	r2, #32
 800aba4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800aba6:	2320      	movs	r3, #32
 800aba8:	e02a      	b.n	800ac00 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f240 523a 	movw	r2, #1338	; 0x53a
 800abb2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	061a      	lsls	r2, r3, #24
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	021b      	lsls	r3, r3, #8
 800abbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800abc0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	0a1b      	lsrs	r3, r3, #8
 800abc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800abca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	0e1b      	lsrs	r3, r3, #24
 800abd0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800abd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd4:	601a      	str	r2, [r3, #0]
    scr++;
 800abd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd8:	3304      	adds	r3, #4
 800abda:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	061a      	lsls	r2, r3, #24
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	021b      	lsls	r3, r3, #8
 800abe4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800abe8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	0a1b      	lsrs	r3, r3, #8
 800abee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800abf2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	0e1b      	lsrs	r3, r3, #24
 800abf8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800abfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abfc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	373c      	adds	r7, #60	; 0x3c
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd90      	pop	{r4, r7, pc}

0800ac08 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b086      	sub	sp, #24
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac14:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d03f      	beq.n	800aca2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800ac22:	2300      	movs	r3, #0
 800ac24:	617b      	str	r3, [r7, #20]
 800ac26:	e033      	b.n	800ac90 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f002 f8aa 	bl	800cd86 <SDIO_ReadFIFO>
 800ac32:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	3b01      	subs	r3, #1
 800ac46:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	0a1b      	lsrs	r3, r3, #8
 800ac4c:	b2da      	uxtb	r2, r3
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	3301      	adds	r3, #1
 800ac56:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	0c1b      	lsrs	r3, r3, #16
 800ac62:	b2da      	uxtb	r2, r3
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	3b01      	subs	r3, #1
 800ac72:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	0e1b      	lsrs	r3, r3, #24
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3301      	adds	r3, #1
 800ac82:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	3b01      	subs	r3, #1
 800ac88:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	617b      	str	r3, [r7, #20]
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	2b07      	cmp	r3, #7
 800ac94:	d9c8      	bls.n	800ac28 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	693a      	ldr	r2, [r7, #16]
 800aca0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800aca2:	bf00      	nop
 800aca4:	3718      	adds	r7, #24
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b086      	sub	sp, #24
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6a1b      	ldr	r3, [r3, #32]
 800acb6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbc:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d043      	beq.n	800ad4c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800acc4:	2300      	movs	r3, #0
 800acc6:	617b      	str	r3, [r7, #20]
 800acc8:	e037      	b.n	800ad3a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	60bb      	str	r3, [r7, #8]
      tmp++;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	3301      	adds	r3, #1
 800acd4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	3b01      	subs	r3, #1
 800acda:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	021a      	lsls	r2, r3, #8
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	3301      	adds	r3, #1
 800acec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	3b01      	subs	r3, #1
 800acf2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	041a      	lsls	r2, r3, #16
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	3301      	adds	r3, #1
 800ad04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	061a      	lsls	r2, r3, #24
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	4313      	orrs	r3, r2
 800ad16:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	3b01      	subs	r3, #1
 800ad22:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f107 0208 	add.w	r2, r7, #8
 800ad2c:	4611      	mov	r1, r2
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f002 f836 	bl	800cda0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	3301      	adds	r3, #1
 800ad38:	617b      	str	r3, [r7, #20]
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	2b07      	cmp	r3, #7
 800ad3e:	d9c4      	bls.n	800acca <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	68fa      	ldr	r2, [r7, #12]
 800ad44:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	693a      	ldr	r2, [r7, #16]
 800ad4a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ad4c:	bf00      	nop
 800ad4e:	3718      	adds	r7, #24
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d101      	bne.n	800ad66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ad62:	2301      	movs	r3, #1
 800ad64:	e056      	b.n	800ae14 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d106      	bne.n	800ad86 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f7fa fa47 	bl	8005214 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2202      	movs	r2, #2
 800ad8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad9c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	431a      	orrs	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	68db      	ldr	r3, [r3, #12]
 800adac:	431a      	orrs	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	431a      	orrs	r2, r3
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	695b      	ldr	r3, [r3, #20]
 800adb8:	431a      	orrs	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	699b      	ldr	r3, [r3, #24]
 800adbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800adc2:	431a      	orrs	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	69db      	ldr	r3, [r3, #28]
 800adc8:	431a      	orrs	r2, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	ea42 0103 	orr.w	r1, r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	430a      	orrs	r2, r1
 800addc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	699b      	ldr	r3, [r3, #24]
 800ade2:	0c1b      	lsrs	r3, r3, #16
 800ade4:	f003 0104 	and.w	r1, r3, #4
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	430a      	orrs	r2, r1
 800adf2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	69da      	ldr	r2, [r3, #28]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ae02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ae12:	2300      	movs	r3, #0
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b088      	sub	sp, #32
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	603b      	str	r3, [r7, #0]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d101      	bne.n	800ae3e <HAL_SPI_Transmit+0x22>
 800ae3a:	2302      	movs	r3, #2
 800ae3c:	e11e      	b.n	800b07c <HAL_SPI_Transmit+0x260>
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2201      	movs	r2, #1
 800ae42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae46:	f7fb fb7f 	bl	8006548 <HAL_GetTick>
 800ae4a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ae4c:	88fb      	ldrh	r3, [r7, #6]
 800ae4e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d002      	beq.n	800ae62 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ae5c:	2302      	movs	r3, #2
 800ae5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ae60:	e103      	b.n	800b06a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d002      	beq.n	800ae6e <HAL_SPI_Transmit+0x52>
 800ae68:	88fb      	ldrh	r3, [r7, #6]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d102      	bne.n	800ae74 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ae72:	e0fa      	b.n	800b06a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2203      	movs	r2, #3
 800ae78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	68ba      	ldr	r2, [r7, #8]
 800ae86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	88fa      	ldrh	r2, [r7, #6]
 800ae8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	88fa      	ldrh	r2, [r7, #6]
 800ae92:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2200      	movs	r2, #0
 800aea4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeba:	d107      	bne.n	800aecc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aeca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed6:	2b40      	cmp	r3, #64	; 0x40
 800aed8:	d007      	beq.n	800aeea <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aee8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aef2:	d14b      	bne.n	800af8c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d002      	beq.n	800af02 <HAL_SPI_Transmit+0xe6>
 800aefc:	8afb      	ldrh	r3, [r7, #22]
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d13e      	bne.n	800af80 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af06:	881a      	ldrh	r2, [r3, #0]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af12:	1c9a      	adds	r2, r3, #2
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	3b01      	subs	r3, #1
 800af20:	b29a      	uxth	r2, r3
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800af26:	e02b      	b.n	800af80 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	f003 0302 	and.w	r3, r3, #2
 800af32:	2b02      	cmp	r3, #2
 800af34:	d112      	bne.n	800af5c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af3a:	881a      	ldrh	r2, [r3, #0]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af46:	1c9a      	adds	r2, r3, #2
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af50:	b29b      	uxth	r3, r3
 800af52:	3b01      	subs	r3, #1
 800af54:	b29a      	uxth	r2, r3
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	86da      	strh	r2, [r3, #54]	; 0x36
 800af5a:	e011      	b.n	800af80 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af5c:	f7fb faf4 	bl	8006548 <HAL_GetTick>
 800af60:	4602      	mov	r2, r0
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d803      	bhi.n	800af74 <HAL_SPI_Transmit+0x158>
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af72:	d102      	bne.n	800af7a <HAL_SPI_Transmit+0x15e>
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d102      	bne.n	800af80 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800af7a:	2303      	movs	r3, #3
 800af7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800af7e:	e074      	b.n	800b06a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af84:	b29b      	uxth	r3, r3
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1ce      	bne.n	800af28 <HAL_SPI_Transmit+0x10c>
 800af8a:	e04c      	b.n	800b026 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d002      	beq.n	800af9a <HAL_SPI_Transmit+0x17e>
 800af94:	8afb      	ldrh	r3, [r7, #22]
 800af96:	2b01      	cmp	r3, #1
 800af98:	d140      	bne.n	800b01c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	330c      	adds	r3, #12
 800afa4:	7812      	ldrb	r2, [r2, #0]
 800afa6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afac:	1c5a      	adds	r2, r3, #1
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	3b01      	subs	r3, #1
 800afba:	b29a      	uxth	r2, r3
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800afc0:	e02c      	b.n	800b01c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	689b      	ldr	r3, [r3, #8]
 800afc8:	f003 0302 	and.w	r3, r3, #2
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d113      	bne.n	800aff8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	330c      	adds	r3, #12
 800afda:	7812      	ldrb	r2, [r2, #0]
 800afdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe2:	1c5a      	adds	r2, r3, #1
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800afec:	b29b      	uxth	r3, r3
 800afee:	3b01      	subs	r3, #1
 800aff0:	b29a      	uxth	r2, r3
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	86da      	strh	r2, [r3, #54]	; 0x36
 800aff6:	e011      	b.n	800b01c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aff8:	f7fb faa6 	bl	8006548 <HAL_GetTick>
 800affc:	4602      	mov	r2, r0
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	683a      	ldr	r2, [r7, #0]
 800b004:	429a      	cmp	r2, r3
 800b006:	d803      	bhi.n	800b010 <HAL_SPI_Transmit+0x1f4>
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b00e:	d102      	bne.n	800b016 <HAL_SPI_Transmit+0x1fa>
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d102      	bne.n	800b01c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800b016:	2303      	movs	r3, #3
 800b018:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b01a:	e026      	b.n	800b06a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b020:	b29b      	uxth	r3, r3
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1cd      	bne.n	800afc2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b026:	69ba      	ldr	r2, [r7, #24]
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f000 fba4 	bl	800b778 <SPI_EndRxTxTransaction>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d002      	beq.n	800b03c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2220      	movs	r2, #32
 800b03a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d10a      	bne.n	800b05a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b044:	2300      	movs	r3, #0
 800b046:	613b      	str	r3, [r7, #16]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	613b      	str	r3, [r7, #16]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	613b      	str	r3, [r7, #16]
 800b058:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d002      	beq.n	800b068 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800b062:	2301      	movs	r3, #1
 800b064:	77fb      	strb	r3, [r7, #31]
 800b066:	e000      	b.n	800b06a <HAL_SPI_Transmit+0x24e>
  }

error:
 800b068:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2201      	movs	r2, #1
 800b06e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b07a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3720      	adds	r7, #32
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b088      	sub	sp, #32
 800b088:	af02      	add	r7, sp, #8
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	603b      	str	r3, [r7, #0]
 800b090:	4613      	mov	r3, r2
 800b092:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b094:	2300      	movs	r3, #0
 800b096:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0a0:	d112      	bne.n	800b0c8 <HAL_SPI_Receive+0x44>
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d10e      	bne.n	800b0c8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2204      	movs	r2, #4
 800b0ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b0b2:	88fa      	ldrh	r2, [r7, #6]
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	68ba      	ldr	r2, [r7, #8]
 800b0bc:	68b9      	ldr	r1, [r7, #8]
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	f000 f8e9 	bl	800b296 <HAL_SPI_TransmitReceive>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	e0e2      	b.n	800b28e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d101      	bne.n	800b0d6 <HAL_SPI_Receive+0x52>
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	e0db      	b.n	800b28e <HAL_SPI_Receive+0x20a>
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b0de:	f7fb fa33 	bl	8006548 <HAL_GetTick>
 800b0e2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d002      	beq.n	800b0f6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b0f4:	e0c2      	b.n	800b27c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d002      	beq.n	800b102 <HAL_SPI_Receive+0x7e>
 800b0fc:	88fb      	ldrh	r3, [r7, #6]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d102      	bne.n	800b108 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b106:	e0b9      	b.n	800b27c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2204      	movs	r2, #4
 800b10c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2200      	movs	r2, #0
 800b114:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	68ba      	ldr	r2, [r7, #8]
 800b11a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	88fa      	ldrh	r2, [r7, #6]
 800b120:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	88fa      	ldrh	r2, [r7, #6]
 800b126:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2200      	movs	r2, #0
 800b12c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2200      	movs	r2, #0
 800b132:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2200      	movs	r2, #0
 800b138:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2200      	movs	r2, #0
 800b13e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2200      	movs	r2, #0
 800b144:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b14e:	d107      	bne.n	800b160 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b15e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b16a:	2b40      	cmp	r3, #64	; 0x40
 800b16c:	d007      	beq.n	800b17e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b17c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d162      	bne.n	800b24c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b186:	e02e      	b.n	800b1e6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	f003 0301 	and.w	r3, r3, #1
 800b192:	2b01      	cmp	r3, #1
 800b194:	d115      	bne.n	800b1c2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f103 020c 	add.w	r2, r3, #12
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a2:	7812      	ldrb	r2, [r2, #0]
 800b1a4:	b2d2      	uxtb	r2, r2
 800b1a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ac:	1c5a      	adds	r2, r3, #1
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	b29a      	uxth	r2, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b1c0:	e011      	b.n	800b1e6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1c2:	f7fb f9c1 	bl	8006548 <HAL_GetTick>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	683a      	ldr	r2, [r7, #0]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d803      	bhi.n	800b1da <HAL_SPI_Receive+0x156>
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1d8:	d102      	bne.n	800b1e0 <HAL_SPI_Receive+0x15c>
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d102      	bne.n	800b1e6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800b1e0:	2303      	movs	r3, #3
 800b1e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b1e4:	e04a      	b.n	800b27c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d1cb      	bne.n	800b188 <HAL_SPI_Receive+0x104>
 800b1f0:	e031      	b.n	800b256 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	f003 0301 	and.w	r3, r3, #1
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d113      	bne.n	800b228 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	68da      	ldr	r2, [r3, #12]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20a:	b292      	uxth	r2, r2
 800b20c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b212:	1c9a      	adds	r2, r3, #2
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	3b01      	subs	r3, #1
 800b220:	b29a      	uxth	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b226:	e011      	b.n	800b24c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b228:	f7fb f98e 	bl	8006548 <HAL_GetTick>
 800b22c:	4602      	mov	r2, r0
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	1ad3      	subs	r3, r2, r3
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	429a      	cmp	r2, r3
 800b236:	d803      	bhi.n	800b240 <HAL_SPI_Receive+0x1bc>
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b23e:	d102      	bne.n	800b246 <HAL_SPI_Receive+0x1c2>
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d102      	bne.n	800b24c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800b246:	2303      	movs	r3, #3
 800b248:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b24a:	e017      	b.n	800b27c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b250:	b29b      	uxth	r3, r3
 800b252:	2b00      	cmp	r3, #0
 800b254:	d1cd      	bne.n	800b1f2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b256:	693a      	ldr	r2, [r7, #16]
 800b258:	6839      	ldr	r1, [r7, #0]
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f000 fa27 	bl	800b6ae <SPI_EndRxTransaction>
 800b260:	4603      	mov	r3, r0
 800b262:	2b00      	cmp	r3, #0
 800b264:	d002      	beq.n	800b26c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2220      	movs	r2, #32
 800b26a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b270:	2b00      	cmp	r3, #0
 800b272:	d002      	beq.n	800b27a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	75fb      	strb	r3, [r7, #23]
 800b278:	e000      	b.n	800b27c <HAL_SPI_Receive+0x1f8>
  }

error :
 800b27a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2201      	movs	r2, #1
 800b280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2200      	movs	r2, #0
 800b288:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b28c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3718      	adds	r7, #24
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}

0800b296 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b296:	b580      	push	{r7, lr}
 800b298:	b08c      	sub	sp, #48	; 0x30
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	60f8      	str	r0, [r7, #12]
 800b29e:	60b9      	str	r1, [r7, #8]
 800b2a0:	607a      	str	r2, [r7, #4]
 800b2a2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d101      	bne.n	800b2bc <HAL_SPI_TransmitReceive+0x26>
 800b2b8:	2302      	movs	r3, #2
 800b2ba:	e18a      	b.n	800b5d2 <HAL_SPI_TransmitReceive+0x33c>
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b2c4:	f7fb f940 	bl	8006548 <HAL_GetTick>
 800b2c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b2d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	685b      	ldr	r3, [r3, #4]
 800b2d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b2da:	887b      	ldrh	r3, [r7, #2]
 800b2dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b2de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d00f      	beq.n	800b306 <HAL_SPI_TransmitReceive+0x70>
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b2ec:	d107      	bne.n	800b2fe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d103      	bne.n	800b2fe <HAL_SPI_TransmitReceive+0x68>
 800b2f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2fa:	2b04      	cmp	r3, #4
 800b2fc:	d003      	beq.n	800b306 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b2fe:	2302      	movs	r3, #2
 800b300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b304:	e15b      	b.n	800b5be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d005      	beq.n	800b318 <HAL_SPI_TransmitReceive+0x82>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d002      	beq.n	800b318 <HAL_SPI_TransmitReceive+0x82>
 800b312:	887b      	ldrh	r3, [r7, #2]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d103      	bne.n	800b320 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b31e:	e14e      	b.n	800b5be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b326:	b2db      	uxtb	r3, r3
 800b328:	2b04      	cmp	r3, #4
 800b32a:	d003      	beq.n	800b334 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2205      	movs	r2, #5
 800b330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	887a      	ldrh	r2, [r7, #2]
 800b344:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	887a      	ldrh	r2, [r7, #2]
 800b34a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	68ba      	ldr	r2, [r7, #8]
 800b350:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	887a      	ldrh	r2, [r7, #2]
 800b356:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	887a      	ldrh	r2, [r7, #2]
 800b35c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2200      	movs	r2, #0
 800b362:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2200      	movs	r2, #0
 800b368:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b374:	2b40      	cmp	r3, #64	; 0x40
 800b376:	d007      	beq.n	800b388 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b386:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b390:	d178      	bne.n	800b484 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d002      	beq.n	800b3a0 <HAL_SPI_TransmitReceive+0x10a>
 800b39a:	8b7b      	ldrh	r3, [r7, #26]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d166      	bne.n	800b46e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3a4:	881a      	ldrh	r2, [r3, #0]
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b0:	1c9a      	adds	r2, r3, #2
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	3b01      	subs	r3, #1
 800b3be:	b29a      	uxth	r2, r3
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b3c4:	e053      	b.n	800b46e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	f003 0302 	and.w	r3, r3, #2
 800b3d0:	2b02      	cmp	r3, #2
 800b3d2:	d11b      	bne.n	800b40c <HAL_SPI_TransmitReceive+0x176>
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d016      	beq.n	800b40c <HAL_SPI_TransmitReceive+0x176>
 800b3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d113      	bne.n	800b40c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e8:	881a      	ldrh	r2, [r3, #0]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f4:	1c9a      	adds	r2, r3, #2
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	3b01      	subs	r3, #1
 800b402:	b29a      	uxth	r2, r3
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b408:	2300      	movs	r3, #0
 800b40a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	f003 0301 	and.w	r3, r3, #1
 800b416:	2b01      	cmp	r3, #1
 800b418:	d119      	bne.n	800b44e <HAL_SPI_TransmitReceive+0x1b8>
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b41e:	b29b      	uxth	r3, r3
 800b420:	2b00      	cmp	r3, #0
 800b422:	d014      	beq.n	800b44e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	68da      	ldr	r2, [r3, #12]
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b42e:	b292      	uxth	r2, r2
 800b430:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b436:	1c9a      	adds	r2, r3, #2
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b440:	b29b      	uxth	r3, r3
 800b442:	3b01      	subs	r3, #1
 800b444:	b29a      	uxth	r2, r3
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b44a:	2301      	movs	r3, #1
 800b44c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b44e:	f7fb f87b 	bl	8006548 <HAL_GetTick>
 800b452:	4602      	mov	r2, r0
 800b454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b456:	1ad3      	subs	r3, r2, r3
 800b458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d807      	bhi.n	800b46e <HAL_SPI_TransmitReceive+0x1d8>
 800b45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b464:	d003      	beq.n	800b46e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b466:	2303      	movs	r3, #3
 800b468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b46c:	e0a7      	b.n	800b5be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b472:	b29b      	uxth	r3, r3
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1a6      	bne.n	800b3c6 <HAL_SPI_TransmitReceive+0x130>
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1a1      	bne.n	800b3c6 <HAL_SPI_TransmitReceive+0x130>
 800b482:	e07c      	b.n	800b57e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <HAL_SPI_TransmitReceive+0x1fc>
 800b48c:	8b7b      	ldrh	r3, [r7, #26]
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d16b      	bne.n	800b56a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	330c      	adds	r3, #12
 800b49c:	7812      	ldrb	r2, [r2, #0]
 800b49e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4a4:	1c5a      	adds	r2, r3, #1
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	b29a      	uxth	r2, r3
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b4b8:	e057      	b.n	800b56a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	f003 0302 	and.w	r3, r3, #2
 800b4c4:	2b02      	cmp	r3, #2
 800b4c6:	d11c      	bne.n	800b502 <HAL_SPI_TransmitReceive+0x26c>
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d017      	beq.n	800b502 <HAL_SPI_TransmitReceive+0x26c>
 800b4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d114      	bne.n	800b502 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	330c      	adds	r3, #12
 800b4e2:	7812      	ldrb	r2, [r2, #0]
 800b4e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ea:	1c5a      	adds	r2, r3, #1
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	3b01      	subs	r3, #1
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b4fe:	2300      	movs	r3, #0
 800b500:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	f003 0301 	and.w	r3, r3, #1
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d119      	bne.n	800b544 <HAL_SPI_TransmitReceive+0x2ae>
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b514:	b29b      	uxth	r3, r3
 800b516:	2b00      	cmp	r3, #0
 800b518:	d014      	beq.n	800b544 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	68da      	ldr	r2, [r3, #12]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b524:	b2d2      	uxtb	r2, r2
 800b526:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52c:	1c5a      	adds	r2, r3, #1
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b536:	b29b      	uxth	r3, r3
 800b538:	3b01      	subs	r3, #1
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b540:	2301      	movs	r3, #1
 800b542:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b544:	f7fb f800 	bl	8006548 <HAL_GetTick>
 800b548:	4602      	mov	r2, r0
 800b54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b550:	429a      	cmp	r2, r3
 800b552:	d803      	bhi.n	800b55c <HAL_SPI_TransmitReceive+0x2c6>
 800b554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b55a:	d102      	bne.n	800b562 <HAL_SPI_TransmitReceive+0x2cc>
 800b55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d103      	bne.n	800b56a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b562:	2303      	movs	r3, #3
 800b564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b568:	e029      	b.n	800b5be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b56e:	b29b      	uxth	r3, r3
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1a2      	bne.n	800b4ba <HAL_SPI_TransmitReceive+0x224>
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b578:	b29b      	uxth	r3, r3
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d19d      	bne.n	800b4ba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b57e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b580:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f000 f8f8 	bl	800b778 <SPI_EndRxTxTransaction>
 800b588:	4603      	mov	r3, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d006      	beq.n	800b59c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b58e:	2301      	movs	r3, #1
 800b590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2220      	movs	r2, #32
 800b598:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b59a:	e010      	b.n	800b5be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10b      	bne.n	800b5bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	617b      	str	r3, [r7, #20]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	68db      	ldr	r3, [r3, #12]
 800b5ae:	617b      	str	r3, [r7, #20]
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	617b      	str	r3, [r7, #20]
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	e000      	b.n	800b5be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b5bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b5ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3730      	adds	r7, #48	; 0x30
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b084      	sub	sp, #16
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	60f8      	str	r0, [r7, #12]
 800b5e2:	60b9      	str	r1, [r7, #8]
 800b5e4:	603b      	str	r3, [r7, #0]
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b5ea:	e04c      	b.n	800b686 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5f2:	d048      	beq.n	800b686 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b5f4:	f7fa ffa8 	bl	8006548 <HAL_GetTick>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	1ad3      	subs	r3, r2, r3
 800b5fe:	683a      	ldr	r2, [r7, #0]
 800b600:	429a      	cmp	r2, r3
 800b602:	d902      	bls.n	800b60a <SPI_WaitFlagStateUntilTimeout+0x30>
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d13d      	bne.n	800b686 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	685a      	ldr	r2, [r3, #4]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b618:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b622:	d111      	bne.n	800b648 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b62c:	d004      	beq.n	800b638 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	689b      	ldr	r3, [r3, #8]
 800b632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b636:	d107      	bne.n	800b648 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b646:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b64c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b650:	d10f      	bne.n	800b672 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b660:	601a      	str	r2, [r3, #0]
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b670:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2201      	movs	r2, #1
 800b676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b682:	2303      	movs	r3, #3
 800b684:	e00f      	b.n	800b6a6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	689a      	ldr	r2, [r3, #8]
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	4013      	ands	r3, r2
 800b690:	68ba      	ldr	r2, [r7, #8]
 800b692:	429a      	cmp	r2, r3
 800b694:	bf0c      	ite	eq
 800b696:	2301      	moveq	r3, #1
 800b698:	2300      	movne	r3, #0
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	461a      	mov	r2, r3
 800b69e:	79fb      	ldrb	r3, [r7, #7]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d1a3      	bne.n	800b5ec <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b086      	sub	sp, #24
 800b6b2:	af02      	add	r7, sp, #8
 800b6b4:	60f8      	str	r0, [r7, #12]
 800b6b6:	60b9      	str	r1, [r7, #8]
 800b6b8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6c2:	d111      	bne.n	800b6e8 <SPI_EndRxTransaction+0x3a>
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6cc:	d004      	beq.n	800b6d8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6d6:	d107      	bne.n	800b6e8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6e6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6f0:	d12a      	bne.n	800b748 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6fa:	d012      	beq.n	800b722 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	9300      	str	r3, [sp, #0]
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	2200      	movs	r2, #0
 800b704:	2180      	movs	r1, #128	; 0x80
 800b706:	68f8      	ldr	r0, [r7, #12]
 800b708:	f7ff ff67 	bl	800b5da <SPI_WaitFlagStateUntilTimeout>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d02d      	beq.n	800b76e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b716:	f043 0220 	orr.w	r2, r3, #32
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b71e:	2303      	movs	r3, #3
 800b720:	e026      	b.n	800b770 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	2200      	movs	r2, #0
 800b72a:	2101      	movs	r1, #1
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	f7ff ff54 	bl	800b5da <SPI_WaitFlagStateUntilTimeout>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d01a      	beq.n	800b76e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b73c:	f043 0220 	orr.w	r2, r3, #32
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b744:	2303      	movs	r3, #3
 800b746:	e013      	b.n	800b770 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	2200      	movs	r2, #0
 800b750:	2101      	movs	r1, #1
 800b752:	68f8      	ldr	r0, [r7, #12]
 800b754:	f7ff ff41 	bl	800b5da <SPI_WaitFlagStateUntilTimeout>
 800b758:	4603      	mov	r3, r0
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d007      	beq.n	800b76e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b762:	f043 0220 	orr.w	r2, r3, #32
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b76a:	2303      	movs	r3, #3
 800b76c:	e000      	b.n	800b770 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3710      	adds	r7, #16
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b088      	sub	sp, #32
 800b77c:	af02      	add	r7, sp, #8
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b784:	4b1b      	ldr	r3, [pc, #108]	; (800b7f4 <SPI_EndRxTxTransaction+0x7c>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	4a1b      	ldr	r2, [pc, #108]	; (800b7f8 <SPI_EndRxTxTransaction+0x80>)
 800b78a:	fba2 2303 	umull	r2, r3, r2, r3
 800b78e:	0d5b      	lsrs	r3, r3, #21
 800b790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b794:	fb02 f303 	mul.w	r3, r2, r3
 800b798:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b7a2:	d112      	bne.n	800b7ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	2180      	movs	r1, #128	; 0x80
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f7ff ff13 	bl	800b5da <SPI_WaitFlagStateUntilTimeout>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d016      	beq.n	800b7e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7be:	f043 0220 	orr.w	r2, r3, #32
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b7c6:	2303      	movs	r3, #3
 800b7c8:	e00f      	b.n	800b7ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d00a      	beq.n	800b7e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7e0:	2b80      	cmp	r3, #128	; 0x80
 800b7e2:	d0f2      	beq.n	800b7ca <SPI_EndRxTxTransaction+0x52>
 800b7e4:	e000      	b.n	800b7e8 <SPI_EndRxTxTransaction+0x70>
        break;
 800b7e6:	bf00      	nop
  }

  return HAL_OK;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3718      	adds	r7, #24
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	20000000 	.word	0x20000000
 800b7f8:	165e9f81 	.word	0x165e9f81

0800b7fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d101      	bne.n	800b80e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b80a:	2301      	movs	r3, #1
 800b80c:	e01d      	b.n	800b84a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b814:	b2db      	uxtb	r3, r3
 800b816:	2b00      	cmp	r3, #0
 800b818:	d106      	bne.n	800b828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2200      	movs	r2, #0
 800b81e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f7f9 fdb2 	bl	800538c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2202      	movs	r2, #2
 800b82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	3304      	adds	r3, #4
 800b838:	4619      	mov	r1, r3
 800b83a:	4610      	mov	r0, r2
 800b83c:	f000 fb56 	bl	800beec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3708      	adds	r7, #8
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b852:	b480      	push	{r7}
 800b854:	b085      	sub	sp, #20
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	68da      	ldr	r2, [r3, #12]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f042 0201 	orr.w	r2, r2, #1
 800b868:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	f003 0307 	and.w	r3, r3, #7
 800b874:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2b06      	cmp	r3, #6
 800b87a:	d007      	beq.n	800b88c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f042 0201 	orr.w	r2, r2, #1
 800b88a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b88c:	2300      	movs	r3, #0
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3714      	adds	r7, #20
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr

0800b89a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b082      	sub	sp, #8
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d101      	bne.n	800b8ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e01d      	b.n	800b8e8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d106      	bne.n	800b8c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7f9 fcef 	bl	80052a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2202      	movs	r2, #2
 800b8ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	3304      	adds	r3, #4
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	4610      	mov	r0, r2
 800b8da:	f000 fb07 	bl	800beec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3708      	adds	r7, #8
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2201      	movs	r2, #1
 800b900:	6839      	ldr	r1, [r7, #0]
 800b902:	4618      	mov	r0, r3
 800b904:	f000 fd42 	bl	800c38c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a15      	ldr	r2, [pc, #84]	; (800b964 <HAL_TIM_PWM_Start+0x74>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d004      	beq.n	800b91c <HAL_TIM_PWM_Start+0x2c>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a14      	ldr	r2, [pc, #80]	; (800b968 <HAL_TIM_PWM_Start+0x78>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d101      	bne.n	800b920 <HAL_TIM_PWM_Start+0x30>
 800b91c:	2301      	movs	r3, #1
 800b91e:	e000      	b.n	800b922 <HAL_TIM_PWM_Start+0x32>
 800b920:	2300      	movs	r3, #0
 800b922:	2b00      	cmp	r3, #0
 800b924:	d007      	beq.n	800b936 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b934:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	f003 0307 	and.w	r3, r3, #7
 800b940:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2b06      	cmp	r3, #6
 800b946:	d007      	beq.n	800b958 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f042 0201 	orr.w	r2, r2, #1
 800b956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3710      	adds	r7, #16
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	40010000 	.word	0x40010000
 800b968:	40010400 	.word	0x40010400

0800b96c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d101      	bne.n	800b980 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b97c:	2301      	movs	r3, #1
 800b97e:	e083      	b.n	800ba88 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b986:	b2db      	uxtb	r3, r3
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d106      	bne.n	800b99a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f7f9 fd89 	bl	80054ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2202      	movs	r2, #2
 800b99e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	6812      	ldr	r2, [r2, #0]
 800b9ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b9b0:	f023 0307 	bic.w	r3, r3, #7
 800b9b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	3304      	adds	r3, #4
 800b9be:	4619      	mov	r1, r3
 800b9c0:	4610      	mov	r0, r2
 800b9c2:	f000 fa93 	bl	800beec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	699b      	ldr	r3, [r3, #24]
 800b9d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	6a1b      	ldr	r3, [r3, #32]
 800b9dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	697a      	ldr	r2, [r7, #20]
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9ee:	f023 0303 	bic.w	r3, r3, #3
 800b9f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	689a      	ldr	r2, [r3, #8]
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	021b      	lsls	r3, r3, #8
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	693a      	ldr	r2, [r7, #16]
 800ba02:	4313      	orrs	r3, r2
 800ba04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ba0c:	f023 030c 	bic.w	r3, r3, #12
 800ba10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	68da      	ldr	r2, [r3, #12]
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	69db      	ldr	r3, [r3, #28]
 800ba26:	021b      	lsls	r3, r3, #8
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	693a      	ldr	r2, [r7, #16]
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	691b      	ldr	r3, [r3, #16]
 800ba34:	011a      	lsls	r2, r3, #4
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	6a1b      	ldr	r3, [r3, #32]
 800ba3a:	031b      	lsls	r3, r3, #12
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	693a      	ldr	r2, [r7, #16]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ba4a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ba52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	685a      	ldr	r2, [r3, #4]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	695b      	ldr	r3, [r3, #20]
 800ba5c:	011b      	lsls	r3, r3, #4
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	697a      	ldr	r2, [r7, #20]
 800ba6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	693a      	ldr	r2, [r7, #16]
 800ba74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2201      	movs	r2, #1
 800ba82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3718      	adds	r7, #24
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d002      	beq.n	800baa6 <HAL_TIM_Encoder_Start+0x16>
 800baa0:	2b04      	cmp	r3, #4
 800baa2:	d008      	beq.n	800bab6 <HAL_TIM_Encoder_Start+0x26>
 800baa4:	e00f      	b.n	800bac6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	2201      	movs	r2, #1
 800baac:	2100      	movs	r1, #0
 800baae:	4618      	mov	r0, r3
 800bab0:	f000 fc6c 	bl	800c38c <TIM_CCxChannelCmd>
      break;
 800bab4:	e016      	b.n	800bae4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	2201      	movs	r2, #1
 800babc:	2104      	movs	r1, #4
 800babe:	4618      	mov	r0, r3
 800bac0:	f000 fc64 	bl	800c38c <TIM_CCxChannelCmd>
      break;
 800bac4:	e00e      	b.n	800bae4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2201      	movs	r2, #1
 800bacc:	2100      	movs	r1, #0
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 fc5c 	bl	800c38c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2201      	movs	r2, #1
 800bada:	2104      	movs	r1, #4
 800badc:	4618      	mov	r0, r3
 800bade:	f000 fc55 	bl	800c38c <TIM_CCxChannelCmd>
      break;
 800bae2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f042 0201 	orr.w	r2, r2, #1
 800baf2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800baf4:	2300      	movs	r3, #0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b082      	sub	sp, #8
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	691b      	ldr	r3, [r3, #16]
 800bb0c:	f003 0302 	and.w	r3, r3, #2
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	d122      	bne.n	800bb5a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	f003 0302 	and.w	r3, r3, #2
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d11b      	bne.n	800bb5a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f06f 0202 	mvn.w	r2, #2
 800bb2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	699b      	ldr	r3, [r3, #24]
 800bb38:	f003 0303 	and.w	r3, r3, #3
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d003      	beq.n	800bb48 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 f9b5 	bl	800beb0 <HAL_TIM_IC_CaptureCallback>
 800bb46:	e005      	b.n	800bb54 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 f9a7 	bl	800be9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 f9b8 	bl	800bec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2200      	movs	r2, #0
 800bb58:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	f003 0304 	and.w	r3, r3, #4
 800bb64:	2b04      	cmp	r3, #4
 800bb66:	d122      	bne.n	800bbae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	68db      	ldr	r3, [r3, #12]
 800bb6e:	f003 0304 	and.w	r3, r3, #4
 800bb72:	2b04      	cmp	r3, #4
 800bb74:	d11b      	bne.n	800bbae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f06f 0204 	mvn.w	r2, #4
 800bb7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2202      	movs	r2, #2
 800bb84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	699b      	ldr	r3, [r3, #24]
 800bb8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d003      	beq.n	800bb9c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 f98b 	bl	800beb0 <HAL_TIM_IC_CaptureCallback>
 800bb9a:	e005      	b.n	800bba8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 f97d 	bl	800be9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f000 f98e 	bl	800bec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	f003 0308 	and.w	r3, r3, #8
 800bbb8:	2b08      	cmp	r3, #8
 800bbba:	d122      	bne.n	800bc02 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	f003 0308 	and.w	r3, r3, #8
 800bbc6:	2b08      	cmp	r3, #8
 800bbc8:	d11b      	bne.n	800bc02 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f06f 0208 	mvn.w	r2, #8
 800bbd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2204      	movs	r2, #4
 800bbd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	69db      	ldr	r3, [r3, #28]
 800bbe0:	f003 0303 	and.w	r3, r3, #3
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d003      	beq.n	800bbf0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 f961 	bl	800beb0 <HAL_TIM_IC_CaptureCallback>
 800bbee:	e005      	b.n	800bbfc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 f953 	bl	800be9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 f964 	bl	800bec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	691b      	ldr	r3, [r3, #16]
 800bc08:	f003 0310 	and.w	r3, r3, #16
 800bc0c:	2b10      	cmp	r3, #16
 800bc0e:	d122      	bne.n	800bc56 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68db      	ldr	r3, [r3, #12]
 800bc16:	f003 0310 	and.w	r3, r3, #16
 800bc1a:	2b10      	cmp	r3, #16
 800bc1c:	d11b      	bne.n	800bc56 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f06f 0210 	mvn.w	r2, #16
 800bc26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2208      	movs	r2, #8
 800bc2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	69db      	ldr	r3, [r3, #28]
 800bc34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d003      	beq.n	800bc44 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 f937 	bl	800beb0 <HAL_TIM_IC_CaptureCallback>
 800bc42:	e005      	b.n	800bc50 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 f929 	bl	800be9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f000 f93a 	bl	800bec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	f003 0301 	and.w	r3, r3, #1
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d10e      	bne.n	800bc82 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	f003 0301 	and.w	r3, r3, #1
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d107      	bne.n	800bc82 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f06f 0201 	mvn.w	r2, #1
 800bc7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f7f7 ff5f 	bl	8003b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	691b      	ldr	r3, [r3, #16]
 800bc88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc8c:	2b80      	cmp	r3, #128	; 0x80
 800bc8e:	d10e      	bne.n	800bcae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc9a:	2b80      	cmp	r3, #128	; 0x80
 800bc9c:	d107      	bne.n	800bcae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f000 fc6d 	bl	800c588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	691b      	ldr	r3, [r3, #16]
 800bcb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb8:	2b40      	cmp	r3, #64	; 0x40
 800bcba:	d10e      	bne.n	800bcda <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcc6:	2b40      	cmp	r3, #64	; 0x40
 800bcc8:	d107      	bne.n	800bcda <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bcd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 f8ff 	bl	800bed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	f003 0320 	and.w	r3, r3, #32
 800bce4:	2b20      	cmp	r3, #32
 800bce6:	d10e      	bne.n	800bd06 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	f003 0320 	and.w	r3, r3, #32
 800bcf2:	2b20      	cmp	r3, #32
 800bcf4:	d107      	bne.n	800bd06 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f06f 0220 	mvn.w	r2, #32
 800bcfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 fc37 	bl	800c574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd06:	bf00      	nop
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
	...

0800bd10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d101      	bne.n	800bd2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bd26:	2302      	movs	r3, #2
 800bd28:	e0b4      	b.n	800be94 <HAL_TIM_PWM_ConfigChannel+0x184>
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2202      	movs	r2, #2
 800bd36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2b0c      	cmp	r3, #12
 800bd3e:	f200 809f 	bhi.w	800be80 <HAL_TIM_PWM_ConfigChannel+0x170>
 800bd42:	a201      	add	r2, pc, #4	; (adr r2, 800bd48 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800bd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd48:	0800bd7d 	.word	0x0800bd7d
 800bd4c:	0800be81 	.word	0x0800be81
 800bd50:	0800be81 	.word	0x0800be81
 800bd54:	0800be81 	.word	0x0800be81
 800bd58:	0800bdbd 	.word	0x0800bdbd
 800bd5c:	0800be81 	.word	0x0800be81
 800bd60:	0800be81 	.word	0x0800be81
 800bd64:	0800be81 	.word	0x0800be81
 800bd68:	0800bdff 	.word	0x0800bdff
 800bd6c:	0800be81 	.word	0x0800be81
 800bd70:	0800be81 	.word	0x0800be81
 800bd74:	0800be81 	.word	0x0800be81
 800bd78:	0800be3f 	.word	0x0800be3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68b9      	ldr	r1, [r7, #8]
 800bd82:	4618      	mov	r0, r3
 800bd84:	f000 f952 	bl	800c02c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	699a      	ldr	r2, [r3, #24]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f042 0208 	orr.w	r2, r2, #8
 800bd96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	699a      	ldr	r2, [r3, #24]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f022 0204 	bic.w	r2, r2, #4
 800bda6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	6999      	ldr	r1, [r3, #24]
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	691a      	ldr	r2, [r3, #16]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	430a      	orrs	r2, r1
 800bdb8:	619a      	str	r2, [r3, #24]
      break;
 800bdba:	e062      	b.n	800be82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	68b9      	ldr	r1, [r7, #8]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f000 f9a2 	bl	800c10c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	699a      	ldr	r2, [r3, #24]
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	699a      	ldr	r2, [r3, #24]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bde6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	6999      	ldr	r1, [r3, #24]
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	021a      	lsls	r2, r3, #8
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	430a      	orrs	r2, r1
 800bdfa:	619a      	str	r2, [r3, #24]
      break;
 800bdfc:	e041      	b.n	800be82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	68b9      	ldr	r1, [r7, #8]
 800be04:	4618      	mov	r0, r3
 800be06:	f000 f9f7 	bl	800c1f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	69da      	ldr	r2, [r3, #28]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f042 0208 	orr.w	r2, r2, #8
 800be18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	69da      	ldr	r2, [r3, #28]
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f022 0204 	bic.w	r2, r2, #4
 800be28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	69d9      	ldr	r1, [r3, #28]
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	691a      	ldr	r2, [r3, #16]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	430a      	orrs	r2, r1
 800be3a:	61da      	str	r2, [r3, #28]
      break;
 800be3c:	e021      	b.n	800be82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	68b9      	ldr	r1, [r7, #8]
 800be44:	4618      	mov	r0, r3
 800be46:	f000 fa4b 	bl	800c2e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	69da      	ldr	r2, [r3, #28]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	69da      	ldr	r2, [r3, #28]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	69d9      	ldr	r1, [r3, #28]
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	691b      	ldr	r3, [r3, #16]
 800be74:	021a      	lsls	r2, r3, #8
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	430a      	orrs	r2, r1
 800be7c:	61da      	str	r2, [r3, #28]
      break;
 800be7e:	e000      	b.n	800be82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800be80:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2201      	movs	r2, #1
 800be86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bea4:	bf00      	nop
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800beb8:	bf00      	nop
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800becc:	bf00      	nop
 800bece:	370c      	adds	r7, #12
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr

0800bed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bee0:	bf00      	nop
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800beec:	b480      	push	{r7}
 800beee:	b085      	sub	sp, #20
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4a40      	ldr	r2, [pc, #256]	; (800c000 <TIM_Base_SetConfig+0x114>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d013      	beq.n	800bf2c <TIM_Base_SetConfig+0x40>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf0a:	d00f      	beq.n	800bf2c <TIM_Base_SetConfig+0x40>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a3d      	ldr	r2, [pc, #244]	; (800c004 <TIM_Base_SetConfig+0x118>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d00b      	beq.n	800bf2c <TIM_Base_SetConfig+0x40>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4a3c      	ldr	r2, [pc, #240]	; (800c008 <TIM_Base_SetConfig+0x11c>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d007      	beq.n	800bf2c <TIM_Base_SetConfig+0x40>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a3b      	ldr	r2, [pc, #236]	; (800c00c <TIM_Base_SetConfig+0x120>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d003      	beq.n	800bf2c <TIM_Base_SetConfig+0x40>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a3a      	ldr	r2, [pc, #232]	; (800c010 <TIM_Base_SetConfig+0x124>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d108      	bne.n	800bf3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	68fa      	ldr	r2, [r7, #12]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4a2f      	ldr	r2, [pc, #188]	; (800c000 <TIM_Base_SetConfig+0x114>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d02b      	beq.n	800bf9e <TIM_Base_SetConfig+0xb2>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf4c:	d027      	beq.n	800bf9e <TIM_Base_SetConfig+0xb2>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a2c      	ldr	r2, [pc, #176]	; (800c004 <TIM_Base_SetConfig+0x118>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d023      	beq.n	800bf9e <TIM_Base_SetConfig+0xb2>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	4a2b      	ldr	r2, [pc, #172]	; (800c008 <TIM_Base_SetConfig+0x11c>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d01f      	beq.n	800bf9e <TIM_Base_SetConfig+0xb2>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4a2a      	ldr	r2, [pc, #168]	; (800c00c <TIM_Base_SetConfig+0x120>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d01b      	beq.n	800bf9e <TIM_Base_SetConfig+0xb2>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	4a29      	ldr	r2, [pc, #164]	; (800c010 <TIM_Base_SetConfig+0x124>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d017      	beq.n	800bf9e <TIM_Base_SetConfig+0xb2>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	4a28      	ldr	r2, [pc, #160]	; (800c014 <TIM_Base_SetConfig+0x128>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d013      	beq.n	800bf9e <TIM_Base_SetConfig+0xb2>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	4a27      	ldr	r2, [pc, #156]	; (800c018 <TIM_Base_SetConfig+0x12c>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d00f      	beq.n	800bf9e <TIM_Base_SetConfig+0xb2>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	4a26      	ldr	r2, [pc, #152]	; (800c01c <TIM_Base_SetConfig+0x130>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d00b      	beq.n	800bf9e <TIM_Base_SetConfig+0xb2>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	4a25      	ldr	r2, [pc, #148]	; (800c020 <TIM_Base_SetConfig+0x134>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d007      	beq.n	800bf9e <TIM_Base_SetConfig+0xb2>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	4a24      	ldr	r2, [pc, #144]	; (800c024 <TIM_Base_SetConfig+0x138>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d003      	beq.n	800bf9e <TIM_Base_SetConfig+0xb2>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	4a23      	ldr	r2, [pc, #140]	; (800c028 <TIM_Base_SetConfig+0x13c>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d108      	bne.n	800bfb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	68db      	ldr	r3, [r3, #12]
 800bfaa:	68fa      	ldr	r2, [r7, #12]
 800bfac:	4313      	orrs	r3, r2
 800bfae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	695b      	ldr	r3, [r3, #20]
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	68fa      	ldr	r2, [r7, #12]
 800bfc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	689a      	ldr	r2, [r3, #8]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a0a      	ldr	r2, [pc, #40]	; (800c000 <TIM_Base_SetConfig+0x114>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d003      	beq.n	800bfe4 <TIM_Base_SetConfig+0xf8>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a0c      	ldr	r2, [pc, #48]	; (800c010 <TIM_Base_SetConfig+0x124>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d103      	bne.n	800bfec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	691a      	ldr	r2, [r3, #16]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2201      	movs	r2, #1
 800bff0:	615a      	str	r2, [r3, #20]
}
 800bff2:	bf00      	nop
 800bff4:	3714      	adds	r7, #20
 800bff6:	46bd      	mov	sp, r7
 800bff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffc:	4770      	bx	lr
 800bffe:	bf00      	nop
 800c000:	40010000 	.word	0x40010000
 800c004:	40000400 	.word	0x40000400
 800c008:	40000800 	.word	0x40000800
 800c00c:	40000c00 	.word	0x40000c00
 800c010:	40010400 	.word	0x40010400
 800c014:	40014000 	.word	0x40014000
 800c018:	40014400 	.word	0x40014400
 800c01c:	40014800 	.word	0x40014800
 800c020:	40001800 	.word	0x40001800
 800c024:	40001c00 	.word	0x40001c00
 800c028:	40002000 	.word	0x40002000

0800c02c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b087      	sub	sp, #28
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6a1b      	ldr	r3, [r3, #32]
 800c03a:	f023 0201 	bic.w	r2, r3, #1
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a1b      	ldr	r3, [r3, #32]
 800c046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	699b      	ldr	r3, [r3, #24]
 800c052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c05a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f023 0303 	bic.w	r3, r3, #3
 800c062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	4313      	orrs	r3, r2
 800c06c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	f023 0302 	bic.w	r3, r3, #2
 800c074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	697a      	ldr	r2, [r7, #20]
 800c07c:	4313      	orrs	r3, r2
 800c07e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	4a20      	ldr	r2, [pc, #128]	; (800c104 <TIM_OC1_SetConfig+0xd8>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d003      	beq.n	800c090 <TIM_OC1_SetConfig+0x64>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	4a1f      	ldr	r2, [pc, #124]	; (800c108 <TIM_OC1_SetConfig+0xdc>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d10c      	bne.n	800c0aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	f023 0308 	bic.w	r3, r3, #8
 800c096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	68db      	ldr	r3, [r3, #12]
 800c09c:	697a      	ldr	r2, [r7, #20]
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	f023 0304 	bic.w	r3, r3, #4
 800c0a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4a15      	ldr	r2, [pc, #84]	; (800c104 <TIM_OC1_SetConfig+0xd8>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d003      	beq.n	800c0ba <TIM_OC1_SetConfig+0x8e>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	4a14      	ldr	r2, [pc, #80]	; (800c108 <TIM_OC1_SetConfig+0xdc>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d111      	bne.n	800c0de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c0c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	695b      	ldr	r3, [r3, #20]
 800c0ce:	693a      	ldr	r2, [r7, #16]
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	699b      	ldr	r3, [r3, #24]
 800c0d8:	693a      	ldr	r2, [r7, #16]
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	693a      	ldr	r2, [r7, #16]
 800c0e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	68fa      	ldr	r2, [r7, #12]
 800c0e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	685a      	ldr	r2, [r3, #4]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	697a      	ldr	r2, [r7, #20]
 800c0f6:	621a      	str	r2, [r3, #32]
}
 800c0f8:	bf00      	nop
 800c0fa:	371c      	adds	r7, #28
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr
 800c104:	40010000 	.word	0x40010000
 800c108:	40010400 	.word	0x40010400

0800c10c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b087      	sub	sp, #28
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
 800c114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6a1b      	ldr	r3, [r3, #32]
 800c11a:	f023 0210 	bic.w	r2, r3, #16
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6a1b      	ldr	r3, [r3, #32]
 800c126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	699b      	ldr	r3, [r3, #24]
 800c132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c13a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	021b      	lsls	r3, r3, #8
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c150:	697b      	ldr	r3, [r7, #20]
 800c152:	f023 0320 	bic.w	r3, r3, #32
 800c156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	689b      	ldr	r3, [r3, #8]
 800c15c:	011b      	lsls	r3, r3, #4
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	4313      	orrs	r3, r2
 800c162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	4a22      	ldr	r2, [pc, #136]	; (800c1f0 <TIM_OC2_SetConfig+0xe4>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d003      	beq.n	800c174 <TIM_OC2_SetConfig+0x68>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4a21      	ldr	r2, [pc, #132]	; (800c1f4 <TIM_OC2_SetConfig+0xe8>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d10d      	bne.n	800c190 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c17a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	011b      	lsls	r3, r3, #4
 800c182:	697a      	ldr	r2, [r7, #20]
 800c184:	4313      	orrs	r3, r2
 800c186:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c18e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4a17      	ldr	r2, [pc, #92]	; (800c1f0 <TIM_OC2_SetConfig+0xe4>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d003      	beq.n	800c1a0 <TIM_OC2_SetConfig+0x94>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4a16      	ldr	r2, [pc, #88]	; (800c1f4 <TIM_OC2_SetConfig+0xe8>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d113      	bne.n	800c1c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c1a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c1ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	695b      	ldr	r3, [r3, #20]
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	693a      	ldr	r2, [r7, #16]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	699b      	ldr	r3, [r3, #24]
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	693a      	ldr	r2, [r7, #16]
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	693a      	ldr	r2, [r7, #16]
 800c1cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	68fa      	ldr	r2, [r7, #12]
 800c1d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	685a      	ldr	r2, [r3, #4]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	697a      	ldr	r2, [r7, #20]
 800c1e0:	621a      	str	r2, [r3, #32]
}
 800c1e2:	bf00      	nop
 800c1e4:	371c      	adds	r7, #28
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr
 800c1ee:	bf00      	nop
 800c1f0:	40010000 	.word	0x40010000
 800c1f4:	40010400 	.word	0x40010400

0800c1f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b087      	sub	sp, #28
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a1b      	ldr	r3, [r3, #32]
 800c206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6a1b      	ldr	r3, [r3, #32]
 800c212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	69db      	ldr	r3, [r3, #28]
 800c21e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f023 0303 	bic.w	r3, r3, #3
 800c22e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	68fa      	ldr	r2, [r7, #12]
 800c236:	4313      	orrs	r3, r2
 800c238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	021b      	lsls	r3, r3, #8
 800c248:	697a      	ldr	r2, [r7, #20]
 800c24a:	4313      	orrs	r3, r2
 800c24c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	4a21      	ldr	r2, [pc, #132]	; (800c2d8 <TIM_OC3_SetConfig+0xe0>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d003      	beq.n	800c25e <TIM_OC3_SetConfig+0x66>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	4a20      	ldr	r2, [pc, #128]	; (800c2dc <TIM_OC3_SetConfig+0xe4>)
 800c25a:	4293      	cmp	r3, r2
 800c25c:	d10d      	bne.n	800c27a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	021b      	lsls	r3, r3, #8
 800c26c:	697a      	ldr	r2, [r7, #20]
 800c26e:	4313      	orrs	r3, r2
 800c270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a16      	ldr	r2, [pc, #88]	; (800c2d8 <TIM_OC3_SetConfig+0xe0>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d003      	beq.n	800c28a <TIM_OC3_SetConfig+0x92>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a15      	ldr	r2, [pc, #84]	; (800c2dc <TIM_OC3_SetConfig+0xe4>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d113      	bne.n	800c2b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	695b      	ldr	r3, [r3, #20]
 800c29e:	011b      	lsls	r3, r3, #4
 800c2a0:	693a      	ldr	r2, [r7, #16]
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c2a6:	683b      	ldr	r3, [r7, #0]
 800c2a8:	699b      	ldr	r3, [r3, #24]
 800c2aa:	011b      	lsls	r3, r3, #4
 800c2ac:	693a      	ldr	r2, [r7, #16]
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	693a      	ldr	r2, [r7, #16]
 800c2b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	68fa      	ldr	r2, [r7, #12]
 800c2bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	685a      	ldr	r2, [r3, #4]
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	697a      	ldr	r2, [r7, #20]
 800c2ca:	621a      	str	r2, [r3, #32]
}
 800c2cc:	bf00      	nop
 800c2ce:	371c      	adds	r7, #28
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d6:	4770      	bx	lr
 800c2d8:	40010000 	.word	0x40010000
 800c2dc:	40010400 	.word	0x40010400

0800c2e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b087      	sub	sp, #28
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6a1b      	ldr	r3, [r3, #32]
 800c2ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	69db      	ldr	r3, [r3, #28]
 800c306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c30e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	021b      	lsls	r3, r3, #8
 800c31e:	68fa      	ldr	r2, [r7, #12]
 800c320:	4313      	orrs	r3, r2
 800c322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c32a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	689b      	ldr	r3, [r3, #8]
 800c330:	031b      	lsls	r3, r3, #12
 800c332:	693a      	ldr	r2, [r7, #16]
 800c334:	4313      	orrs	r3, r2
 800c336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	4a12      	ldr	r2, [pc, #72]	; (800c384 <TIM_OC4_SetConfig+0xa4>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d003      	beq.n	800c348 <TIM_OC4_SetConfig+0x68>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	4a11      	ldr	r2, [pc, #68]	; (800c388 <TIM_OC4_SetConfig+0xa8>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d109      	bne.n	800c35c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c34e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	695b      	ldr	r3, [r3, #20]
 800c354:	019b      	lsls	r3, r3, #6
 800c356:	697a      	ldr	r2, [r7, #20]
 800c358:	4313      	orrs	r3, r2
 800c35a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	697a      	ldr	r2, [r7, #20]
 800c360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	68fa      	ldr	r2, [r7, #12]
 800c366:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	685a      	ldr	r2, [r3, #4]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	693a      	ldr	r2, [r7, #16]
 800c374:	621a      	str	r2, [r3, #32]
}
 800c376:	bf00      	nop
 800c378:	371c      	adds	r7, #28
 800c37a:	46bd      	mov	sp, r7
 800c37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c380:	4770      	bx	lr
 800c382:	bf00      	nop
 800c384:	40010000 	.word	0x40010000
 800c388:	40010400 	.word	0x40010400

0800c38c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b087      	sub	sp, #28
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	60b9      	str	r1, [r7, #8]
 800c396:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	f003 031f 	and.w	r3, r3, #31
 800c39e:	2201      	movs	r2, #1
 800c3a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6a1a      	ldr	r2, [r3, #32]
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	43db      	mvns	r3, r3
 800c3ae:	401a      	ands	r2, r3
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6a1a      	ldr	r2, [r3, #32]
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	f003 031f 	and.w	r3, r3, #31
 800c3be:	6879      	ldr	r1, [r7, #4]
 800c3c0:	fa01 f303 	lsl.w	r3, r1, r3
 800c3c4:	431a      	orrs	r2, r3
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	621a      	str	r2, [r3, #32]
}
 800c3ca:	bf00      	nop
 800c3cc:	371c      	adds	r7, #28
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr
	...

0800c3d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b085      	sub	sp, #20
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d101      	bne.n	800c3f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c3ec:	2302      	movs	r3, #2
 800c3ee:	e05a      	b.n	800c4a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2202      	movs	r2, #2
 800c3fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	689b      	ldr	r3, [r3, #8]
 800c40e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c416:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	68fa      	ldr	r2, [r7, #12]
 800c41e:	4313      	orrs	r3, r2
 800c420:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	68fa      	ldr	r2, [r7, #12]
 800c428:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a21      	ldr	r2, [pc, #132]	; (800c4b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d022      	beq.n	800c47a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c43c:	d01d      	beq.n	800c47a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a1d      	ldr	r2, [pc, #116]	; (800c4b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d018      	beq.n	800c47a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a1b      	ldr	r2, [pc, #108]	; (800c4bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d013      	beq.n	800c47a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a1a      	ldr	r2, [pc, #104]	; (800c4c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d00e      	beq.n	800c47a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a18      	ldr	r2, [pc, #96]	; (800c4c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d009      	beq.n	800c47a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a17      	ldr	r2, [pc, #92]	; (800c4c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d004      	beq.n	800c47a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a15      	ldr	r2, [pc, #84]	; (800c4cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d10c      	bne.n	800c494 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c480:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	68ba      	ldr	r2, [r7, #8]
 800c488:	4313      	orrs	r3, r2
 800c48a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	68ba      	ldr	r2, [r7, #8]
 800c492:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3714      	adds	r7, #20
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	40010000 	.word	0x40010000
 800c4b8:	40000400 	.word	0x40000400
 800c4bc:	40000800 	.word	0x40000800
 800c4c0:	40000c00 	.word	0x40000c00
 800c4c4:	40010400 	.word	0x40010400
 800c4c8:	40014000 	.word	0x40014000
 800c4cc:	40001800 	.word	0x40001800

0800c4d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b085      	sub	sp, #20
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d101      	bne.n	800c4ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c4e8:	2302      	movs	r3, #2
 800c4ea:	e03d      	b.n	800c568 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	4313      	orrs	r3, r2
 800c500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	4313      	orrs	r3, r2
 800c50e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	4313      	orrs	r3, r2
 800c51c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4313      	orrs	r3, r2
 800c52a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	691b      	ldr	r3, [r3, #16]
 800c536:	4313      	orrs	r3, r2
 800c538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	695b      	ldr	r3, [r3, #20]
 800c544:	4313      	orrs	r3, r2
 800c546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	69db      	ldr	r3, [r3, #28]
 800c552:	4313      	orrs	r3, r2
 800c554:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2200      	movs	r2, #0
 800c562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c566:	2300      	movs	r3, #0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3714      	adds	r7, #20
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c574:	b480      	push	{r7}
 800c576:	b083      	sub	sp, #12
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c57c:	bf00      	nop
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c590:	bf00      	nop
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d101      	bne.n	800c5ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e03f      	b.n	800c62e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d106      	bne.n	800c5c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f7f9 f89c 	bl	8005700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2224      	movs	r2, #36	; 0x24
 800c5cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	68da      	ldr	r2, [r3, #12]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c5de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 f829 	bl	800c638 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	691a      	ldr	r2, [r3, #16]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c5f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	695a      	ldr	r2, [r3, #20]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c604:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68da      	ldr	r2, [r3, #12]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c614:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2200      	movs	r2, #0
 800c61a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2220      	movs	r2, #32
 800c620:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2220      	movs	r2, #32
 800c628:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3708      	adds	r7, #8
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
	...

0800c638 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63c:	b085      	sub	sp, #20
 800c63e:	af00      	add	r7, sp, #0
 800c640:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	691b      	ldr	r3, [r3, #16]
 800c648:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	68da      	ldr	r2, [r3, #12]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	430a      	orrs	r2, r1
 800c656:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	689a      	ldr	r2, [r3, #8]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	691b      	ldr	r3, [r3, #16]
 800c660:	431a      	orrs	r2, r3
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	695b      	ldr	r3, [r3, #20]
 800c666:	431a      	orrs	r2, r3
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	69db      	ldr	r3, [r3, #28]
 800c66c:	4313      	orrs	r3, r2
 800c66e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c67a:	f023 030c 	bic.w	r3, r3, #12
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	6812      	ldr	r2, [r2, #0]
 800c682:	68f9      	ldr	r1, [r7, #12]
 800c684:	430b      	orrs	r3, r1
 800c686:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	695b      	ldr	r3, [r3, #20]
 800c68e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	699a      	ldr	r2, [r3, #24]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	430a      	orrs	r2, r1
 800c69c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	69db      	ldr	r3, [r3, #28]
 800c6a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6a6:	f040 818b 	bne.w	800c9c0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4ac1      	ldr	r2, [pc, #772]	; (800c9b4 <UART_SetConfig+0x37c>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d005      	beq.n	800c6c0 <UART_SetConfig+0x88>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4abf      	ldr	r2, [pc, #764]	; (800c9b8 <UART_SetConfig+0x380>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	f040 80bd 	bne.w	800c83a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c6c0:	f7fc fbcc 	bl	8008e5c <HAL_RCC_GetPCLK2Freq>
 800c6c4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	461d      	mov	r5, r3
 800c6ca:	f04f 0600 	mov.w	r6, #0
 800c6ce:	46a8      	mov	r8, r5
 800c6d0:	46b1      	mov	r9, r6
 800c6d2:	eb18 0308 	adds.w	r3, r8, r8
 800c6d6:	eb49 0409 	adc.w	r4, r9, r9
 800c6da:	4698      	mov	r8, r3
 800c6dc:	46a1      	mov	r9, r4
 800c6de:	eb18 0805 	adds.w	r8, r8, r5
 800c6e2:	eb49 0906 	adc.w	r9, r9, r6
 800c6e6:	f04f 0100 	mov.w	r1, #0
 800c6ea:	f04f 0200 	mov.w	r2, #0
 800c6ee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c6f2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c6f6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c6fa:	4688      	mov	r8, r1
 800c6fc:	4691      	mov	r9, r2
 800c6fe:	eb18 0005 	adds.w	r0, r8, r5
 800c702:	eb49 0106 	adc.w	r1, r9, r6
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	685b      	ldr	r3, [r3, #4]
 800c70a:	461d      	mov	r5, r3
 800c70c:	f04f 0600 	mov.w	r6, #0
 800c710:	196b      	adds	r3, r5, r5
 800c712:	eb46 0406 	adc.w	r4, r6, r6
 800c716:	461a      	mov	r2, r3
 800c718:	4623      	mov	r3, r4
 800c71a:	f7f4 facd 	bl	8000cb8 <__aeabi_uldivmod>
 800c71e:	4603      	mov	r3, r0
 800c720:	460c      	mov	r4, r1
 800c722:	461a      	mov	r2, r3
 800c724:	4ba5      	ldr	r3, [pc, #660]	; (800c9bc <UART_SetConfig+0x384>)
 800c726:	fba3 2302 	umull	r2, r3, r3, r2
 800c72a:	095b      	lsrs	r3, r3, #5
 800c72c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	461d      	mov	r5, r3
 800c734:	f04f 0600 	mov.w	r6, #0
 800c738:	46a9      	mov	r9, r5
 800c73a:	46b2      	mov	sl, r6
 800c73c:	eb19 0309 	adds.w	r3, r9, r9
 800c740:	eb4a 040a 	adc.w	r4, sl, sl
 800c744:	4699      	mov	r9, r3
 800c746:	46a2      	mov	sl, r4
 800c748:	eb19 0905 	adds.w	r9, r9, r5
 800c74c:	eb4a 0a06 	adc.w	sl, sl, r6
 800c750:	f04f 0100 	mov.w	r1, #0
 800c754:	f04f 0200 	mov.w	r2, #0
 800c758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c75c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c760:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c764:	4689      	mov	r9, r1
 800c766:	4692      	mov	sl, r2
 800c768:	eb19 0005 	adds.w	r0, r9, r5
 800c76c:	eb4a 0106 	adc.w	r1, sl, r6
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	461d      	mov	r5, r3
 800c776:	f04f 0600 	mov.w	r6, #0
 800c77a:	196b      	adds	r3, r5, r5
 800c77c:	eb46 0406 	adc.w	r4, r6, r6
 800c780:	461a      	mov	r2, r3
 800c782:	4623      	mov	r3, r4
 800c784:	f7f4 fa98 	bl	8000cb8 <__aeabi_uldivmod>
 800c788:	4603      	mov	r3, r0
 800c78a:	460c      	mov	r4, r1
 800c78c:	461a      	mov	r2, r3
 800c78e:	4b8b      	ldr	r3, [pc, #556]	; (800c9bc <UART_SetConfig+0x384>)
 800c790:	fba3 1302 	umull	r1, r3, r3, r2
 800c794:	095b      	lsrs	r3, r3, #5
 800c796:	2164      	movs	r1, #100	; 0x64
 800c798:	fb01 f303 	mul.w	r3, r1, r3
 800c79c:	1ad3      	subs	r3, r2, r3
 800c79e:	00db      	lsls	r3, r3, #3
 800c7a0:	3332      	adds	r3, #50	; 0x32
 800c7a2:	4a86      	ldr	r2, [pc, #536]	; (800c9bc <UART_SetConfig+0x384>)
 800c7a4:	fba2 2303 	umull	r2, r3, r2, r3
 800c7a8:	095b      	lsrs	r3, r3, #5
 800c7aa:	005b      	lsls	r3, r3, #1
 800c7ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c7b0:	4498      	add	r8, r3
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	461d      	mov	r5, r3
 800c7b6:	f04f 0600 	mov.w	r6, #0
 800c7ba:	46a9      	mov	r9, r5
 800c7bc:	46b2      	mov	sl, r6
 800c7be:	eb19 0309 	adds.w	r3, r9, r9
 800c7c2:	eb4a 040a 	adc.w	r4, sl, sl
 800c7c6:	4699      	mov	r9, r3
 800c7c8:	46a2      	mov	sl, r4
 800c7ca:	eb19 0905 	adds.w	r9, r9, r5
 800c7ce:	eb4a 0a06 	adc.w	sl, sl, r6
 800c7d2:	f04f 0100 	mov.w	r1, #0
 800c7d6:	f04f 0200 	mov.w	r2, #0
 800c7da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c7de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c7e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c7e6:	4689      	mov	r9, r1
 800c7e8:	4692      	mov	sl, r2
 800c7ea:	eb19 0005 	adds.w	r0, r9, r5
 800c7ee:	eb4a 0106 	adc.w	r1, sl, r6
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	461d      	mov	r5, r3
 800c7f8:	f04f 0600 	mov.w	r6, #0
 800c7fc:	196b      	adds	r3, r5, r5
 800c7fe:	eb46 0406 	adc.w	r4, r6, r6
 800c802:	461a      	mov	r2, r3
 800c804:	4623      	mov	r3, r4
 800c806:	f7f4 fa57 	bl	8000cb8 <__aeabi_uldivmod>
 800c80a:	4603      	mov	r3, r0
 800c80c:	460c      	mov	r4, r1
 800c80e:	461a      	mov	r2, r3
 800c810:	4b6a      	ldr	r3, [pc, #424]	; (800c9bc <UART_SetConfig+0x384>)
 800c812:	fba3 1302 	umull	r1, r3, r3, r2
 800c816:	095b      	lsrs	r3, r3, #5
 800c818:	2164      	movs	r1, #100	; 0x64
 800c81a:	fb01 f303 	mul.w	r3, r1, r3
 800c81e:	1ad3      	subs	r3, r2, r3
 800c820:	00db      	lsls	r3, r3, #3
 800c822:	3332      	adds	r3, #50	; 0x32
 800c824:	4a65      	ldr	r2, [pc, #404]	; (800c9bc <UART_SetConfig+0x384>)
 800c826:	fba2 2303 	umull	r2, r3, r2, r3
 800c82a:	095b      	lsrs	r3, r3, #5
 800c82c:	f003 0207 	and.w	r2, r3, #7
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4442      	add	r2, r8
 800c836:	609a      	str	r2, [r3, #8]
 800c838:	e26f      	b.n	800cd1a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c83a:	f7fc fafb 	bl	8008e34 <HAL_RCC_GetPCLK1Freq>
 800c83e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	461d      	mov	r5, r3
 800c844:	f04f 0600 	mov.w	r6, #0
 800c848:	46a8      	mov	r8, r5
 800c84a:	46b1      	mov	r9, r6
 800c84c:	eb18 0308 	adds.w	r3, r8, r8
 800c850:	eb49 0409 	adc.w	r4, r9, r9
 800c854:	4698      	mov	r8, r3
 800c856:	46a1      	mov	r9, r4
 800c858:	eb18 0805 	adds.w	r8, r8, r5
 800c85c:	eb49 0906 	adc.w	r9, r9, r6
 800c860:	f04f 0100 	mov.w	r1, #0
 800c864:	f04f 0200 	mov.w	r2, #0
 800c868:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c86c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c870:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c874:	4688      	mov	r8, r1
 800c876:	4691      	mov	r9, r2
 800c878:	eb18 0005 	adds.w	r0, r8, r5
 800c87c:	eb49 0106 	adc.w	r1, r9, r6
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	461d      	mov	r5, r3
 800c886:	f04f 0600 	mov.w	r6, #0
 800c88a:	196b      	adds	r3, r5, r5
 800c88c:	eb46 0406 	adc.w	r4, r6, r6
 800c890:	461a      	mov	r2, r3
 800c892:	4623      	mov	r3, r4
 800c894:	f7f4 fa10 	bl	8000cb8 <__aeabi_uldivmod>
 800c898:	4603      	mov	r3, r0
 800c89a:	460c      	mov	r4, r1
 800c89c:	461a      	mov	r2, r3
 800c89e:	4b47      	ldr	r3, [pc, #284]	; (800c9bc <UART_SetConfig+0x384>)
 800c8a0:	fba3 2302 	umull	r2, r3, r3, r2
 800c8a4:	095b      	lsrs	r3, r3, #5
 800c8a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	461d      	mov	r5, r3
 800c8ae:	f04f 0600 	mov.w	r6, #0
 800c8b2:	46a9      	mov	r9, r5
 800c8b4:	46b2      	mov	sl, r6
 800c8b6:	eb19 0309 	adds.w	r3, r9, r9
 800c8ba:	eb4a 040a 	adc.w	r4, sl, sl
 800c8be:	4699      	mov	r9, r3
 800c8c0:	46a2      	mov	sl, r4
 800c8c2:	eb19 0905 	adds.w	r9, r9, r5
 800c8c6:	eb4a 0a06 	adc.w	sl, sl, r6
 800c8ca:	f04f 0100 	mov.w	r1, #0
 800c8ce:	f04f 0200 	mov.w	r2, #0
 800c8d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c8d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c8da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c8de:	4689      	mov	r9, r1
 800c8e0:	4692      	mov	sl, r2
 800c8e2:	eb19 0005 	adds.w	r0, r9, r5
 800c8e6:	eb4a 0106 	adc.w	r1, sl, r6
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	685b      	ldr	r3, [r3, #4]
 800c8ee:	461d      	mov	r5, r3
 800c8f0:	f04f 0600 	mov.w	r6, #0
 800c8f4:	196b      	adds	r3, r5, r5
 800c8f6:	eb46 0406 	adc.w	r4, r6, r6
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	4623      	mov	r3, r4
 800c8fe:	f7f4 f9db 	bl	8000cb8 <__aeabi_uldivmod>
 800c902:	4603      	mov	r3, r0
 800c904:	460c      	mov	r4, r1
 800c906:	461a      	mov	r2, r3
 800c908:	4b2c      	ldr	r3, [pc, #176]	; (800c9bc <UART_SetConfig+0x384>)
 800c90a:	fba3 1302 	umull	r1, r3, r3, r2
 800c90e:	095b      	lsrs	r3, r3, #5
 800c910:	2164      	movs	r1, #100	; 0x64
 800c912:	fb01 f303 	mul.w	r3, r1, r3
 800c916:	1ad3      	subs	r3, r2, r3
 800c918:	00db      	lsls	r3, r3, #3
 800c91a:	3332      	adds	r3, #50	; 0x32
 800c91c:	4a27      	ldr	r2, [pc, #156]	; (800c9bc <UART_SetConfig+0x384>)
 800c91e:	fba2 2303 	umull	r2, r3, r2, r3
 800c922:	095b      	lsrs	r3, r3, #5
 800c924:	005b      	lsls	r3, r3, #1
 800c926:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c92a:	4498      	add	r8, r3
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	461d      	mov	r5, r3
 800c930:	f04f 0600 	mov.w	r6, #0
 800c934:	46a9      	mov	r9, r5
 800c936:	46b2      	mov	sl, r6
 800c938:	eb19 0309 	adds.w	r3, r9, r9
 800c93c:	eb4a 040a 	adc.w	r4, sl, sl
 800c940:	4699      	mov	r9, r3
 800c942:	46a2      	mov	sl, r4
 800c944:	eb19 0905 	adds.w	r9, r9, r5
 800c948:	eb4a 0a06 	adc.w	sl, sl, r6
 800c94c:	f04f 0100 	mov.w	r1, #0
 800c950:	f04f 0200 	mov.w	r2, #0
 800c954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c958:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c95c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c960:	4689      	mov	r9, r1
 800c962:	4692      	mov	sl, r2
 800c964:	eb19 0005 	adds.w	r0, r9, r5
 800c968:	eb4a 0106 	adc.w	r1, sl, r6
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	461d      	mov	r5, r3
 800c972:	f04f 0600 	mov.w	r6, #0
 800c976:	196b      	adds	r3, r5, r5
 800c978:	eb46 0406 	adc.w	r4, r6, r6
 800c97c:	461a      	mov	r2, r3
 800c97e:	4623      	mov	r3, r4
 800c980:	f7f4 f99a 	bl	8000cb8 <__aeabi_uldivmod>
 800c984:	4603      	mov	r3, r0
 800c986:	460c      	mov	r4, r1
 800c988:	461a      	mov	r2, r3
 800c98a:	4b0c      	ldr	r3, [pc, #48]	; (800c9bc <UART_SetConfig+0x384>)
 800c98c:	fba3 1302 	umull	r1, r3, r3, r2
 800c990:	095b      	lsrs	r3, r3, #5
 800c992:	2164      	movs	r1, #100	; 0x64
 800c994:	fb01 f303 	mul.w	r3, r1, r3
 800c998:	1ad3      	subs	r3, r2, r3
 800c99a:	00db      	lsls	r3, r3, #3
 800c99c:	3332      	adds	r3, #50	; 0x32
 800c99e:	4a07      	ldr	r2, [pc, #28]	; (800c9bc <UART_SetConfig+0x384>)
 800c9a0:	fba2 2303 	umull	r2, r3, r2, r3
 800c9a4:	095b      	lsrs	r3, r3, #5
 800c9a6:	f003 0207 	and.w	r2, r3, #7
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	4442      	add	r2, r8
 800c9b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800c9b2:	e1b2      	b.n	800cd1a <UART_SetConfig+0x6e2>
 800c9b4:	40011000 	.word	0x40011000
 800c9b8:	40011400 	.word	0x40011400
 800c9bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4ad7      	ldr	r2, [pc, #860]	; (800cd24 <UART_SetConfig+0x6ec>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d005      	beq.n	800c9d6 <UART_SetConfig+0x39e>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4ad6      	ldr	r2, [pc, #856]	; (800cd28 <UART_SetConfig+0x6f0>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	f040 80d1 	bne.w	800cb78 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800c9d6:	f7fc fa41 	bl	8008e5c <HAL_RCC_GetPCLK2Freq>
 800c9da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	469a      	mov	sl, r3
 800c9e0:	f04f 0b00 	mov.w	fp, #0
 800c9e4:	46d0      	mov	r8, sl
 800c9e6:	46d9      	mov	r9, fp
 800c9e8:	eb18 0308 	adds.w	r3, r8, r8
 800c9ec:	eb49 0409 	adc.w	r4, r9, r9
 800c9f0:	4698      	mov	r8, r3
 800c9f2:	46a1      	mov	r9, r4
 800c9f4:	eb18 080a 	adds.w	r8, r8, sl
 800c9f8:	eb49 090b 	adc.w	r9, r9, fp
 800c9fc:	f04f 0100 	mov.w	r1, #0
 800ca00:	f04f 0200 	mov.w	r2, #0
 800ca04:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ca08:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ca0c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ca10:	4688      	mov	r8, r1
 800ca12:	4691      	mov	r9, r2
 800ca14:	eb1a 0508 	adds.w	r5, sl, r8
 800ca18:	eb4b 0609 	adc.w	r6, fp, r9
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	4619      	mov	r1, r3
 800ca22:	f04f 0200 	mov.w	r2, #0
 800ca26:	f04f 0300 	mov.w	r3, #0
 800ca2a:	f04f 0400 	mov.w	r4, #0
 800ca2e:	0094      	lsls	r4, r2, #2
 800ca30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ca34:	008b      	lsls	r3, r1, #2
 800ca36:	461a      	mov	r2, r3
 800ca38:	4623      	mov	r3, r4
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	4631      	mov	r1, r6
 800ca3e:	f7f4 f93b 	bl	8000cb8 <__aeabi_uldivmod>
 800ca42:	4603      	mov	r3, r0
 800ca44:	460c      	mov	r4, r1
 800ca46:	461a      	mov	r2, r3
 800ca48:	4bb8      	ldr	r3, [pc, #736]	; (800cd2c <UART_SetConfig+0x6f4>)
 800ca4a:	fba3 2302 	umull	r2, r3, r3, r2
 800ca4e:	095b      	lsrs	r3, r3, #5
 800ca50:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	469b      	mov	fp, r3
 800ca58:	f04f 0c00 	mov.w	ip, #0
 800ca5c:	46d9      	mov	r9, fp
 800ca5e:	46e2      	mov	sl, ip
 800ca60:	eb19 0309 	adds.w	r3, r9, r9
 800ca64:	eb4a 040a 	adc.w	r4, sl, sl
 800ca68:	4699      	mov	r9, r3
 800ca6a:	46a2      	mov	sl, r4
 800ca6c:	eb19 090b 	adds.w	r9, r9, fp
 800ca70:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ca74:	f04f 0100 	mov.w	r1, #0
 800ca78:	f04f 0200 	mov.w	r2, #0
 800ca7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ca80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ca84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ca88:	4689      	mov	r9, r1
 800ca8a:	4692      	mov	sl, r2
 800ca8c:	eb1b 0509 	adds.w	r5, fp, r9
 800ca90:	eb4c 060a 	adc.w	r6, ip, sl
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	4619      	mov	r1, r3
 800ca9a:	f04f 0200 	mov.w	r2, #0
 800ca9e:	f04f 0300 	mov.w	r3, #0
 800caa2:	f04f 0400 	mov.w	r4, #0
 800caa6:	0094      	lsls	r4, r2, #2
 800caa8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800caac:	008b      	lsls	r3, r1, #2
 800caae:	461a      	mov	r2, r3
 800cab0:	4623      	mov	r3, r4
 800cab2:	4628      	mov	r0, r5
 800cab4:	4631      	mov	r1, r6
 800cab6:	f7f4 f8ff 	bl	8000cb8 <__aeabi_uldivmod>
 800caba:	4603      	mov	r3, r0
 800cabc:	460c      	mov	r4, r1
 800cabe:	461a      	mov	r2, r3
 800cac0:	4b9a      	ldr	r3, [pc, #616]	; (800cd2c <UART_SetConfig+0x6f4>)
 800cac2:	fba3 1302 	umull	r1, r3, r3, r2
 800cac6:	095b      	lsrs	r3, r3, #5
 800cac8:	2164      	movs	r1, #100	; 0x64
 800caca:	fb01 f303 	mul.w	r3, r1, r3
 800cace:	1ad3      	subs	r3, r2, r3
 800cad0:	011b      	lsls	r3, r3, #4
 800cad2:	3332      	adds	r3, #50	; 0x32
 800cad4:	4a95      	ldr	r2, [pc, #596]	; (800cd2c <UART_SetConfig+0x6f4>)
 800cad6:	fba2 2303 	umull	r2, r3, r2, r3
 800cada:	095b      	lsrs	r3, r3, #5
 800cadc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cae0:	4498      	add	r8, r3
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	469b      	mov	fp, r3
 800cae6:	f04f 0c00 	mov.w	ip, #0
 800caea:	46d9      	mov	r9, fp
 800caec:	46e2      	mov	sl, ip
 800caee:	eb19 0309 	adds.w	r3, r9, r9
 800caf2:	eb4a 040a 	adc.w	r4, sl, sl
 800caf6:	4699      	mov	r9, r3
 800caf8:	46a2      	mov	sl, r4
 800cafa:	eb19 090b 	adds.w	r9, r9, fp
 800cafe:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cb02:	f04f 0100 	mov.w	r1, #0
 800cb06:	f04f 0200 	mov.w	r2, #0
 800cb0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cb0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cb12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cb16:	4689      	mov	r9, r1
 800cb18:	4692      	mov	sl, r2
 800cb1a:	eb1b 0509 	adds.w	r5, fp, r9
 800cb1e:	eb4c 060a 	adc.w	r6, ip, sl
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	4619      	mov	r1, r3
 800cb28:	f04f 0200 	mov.w	r2, #0
 800cb2c:	f04f 0300 	mov.w	r3, #0
 800cb30:	f04f 0400 	mov.w	r4, #0
 800cb34:	0094      	lsls	r4, r2, #2
 800cb36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cb3a:	008b      	lsls	r3, r1, #2
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	4623      	mov	r3, r4
 800cb40:	4628      	mov	r0, r5
 800cb42:	4631      	mov	r1, r6
 800cb44:	f7f4 f8b8 	bl	8000cb8 <__aeabi_uldivmod>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	460c      	mov	r4, r1
 800cb4c:	461a      	mov	r2, r3
 800cb4e:	4b77      	ldr	r3, [pc, #476]	; (800cd2c <UART_SetConfig+0x6f4>)
 800cb50:	fba3 1302 	umull	r1, r3, r3, r2
 800cb54:	095b      	lsrs	r3, r3, #5
 800cb56:	2164      	movs	r1, #100	; 0x64
 800cb58:	fb01 f303 	mul.w	r3, r1, r3
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	011b      	lsls	r3, r3, #4
 800cb60:	3332      	adds	r3, #50	; 0x32
 800cb62:	4a72      	ldr	r2, [pc, #456]	; (800cd2c <UART_SetConfig+0x6f4>)
 800cb64:	fba2 2303 	umull	r2, r3, r2, r3
 800cb68:	095b      	lsrs	r3, r3, #5
 800cb6a:	f003 020f 	and.w	r2, r3, #15
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4442      	add	r2, r8
 800cb74:	609a      	str	r2, [r3, #8]
 800cb76:	e0d0      	b.n	800cd1a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800cb78:	f7fc f95c 	bl	8008e34 <HAL_RCC_GetPCLK1Freq>
 800cb7c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cb7e:	68bb      	ldr	r3, [r7, #8]
 800cb80:	469a      	mov	sl, r3
 800cb82:	f04f 0b00 	mov.w	fp, #0
 800cb86:	46d0      	mov	r8, sl
 800cb88:	46d9      	mov	r9, fp
 800cb8a:	eb18 0308 	adds.w	r3, r8, r8
 800cb8e:	eb49 0409 	adc.w	r4, r9, r9
 800cb92:	4698      	mov	r8, r3
 800cb94:	46a1      	mov	r9, r4
 800cb96:	eb18 080a 	adds.w	r8, r8, sl
 800cb9a:	eb49 090b 	adc.w	r9, r9, fp
 800cb9e:	f04f 0100 	mov.w	r1, #0
 800cba2:	f04f 0200 	mov.w	r2, #0
 800cba6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cbaa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cbae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cbb2:	4688      	mov	r8, r1
 800cbb4:	4691      	mov	r9, r2
 800cbb6:	eb1a 0508 	adds.w	r5, sl, r8
 800cbba:	eb4b 0609 	adc.w	r6, fp, r9
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	f04f 0200 	mov.w	r2, #0
 800cbc8:	f04f 0300 	mov.w	r3, #0
 800cbcc:	f04f 0400 	mov.w	r4, #0
 800cbd0:	0094      	lsls	r4, r2, #2
 800cbd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cbd6:	008b      	lsls	r3, r1, #2
 800cbd8:	461a      	mov	r2, r3
 800cbda:	4623      	mov	r3, r4
 800cbdc:	4628      	mov	r0, r5
 800cbde:	4631      	mov	r1, r6
 800cbe0:	f7f4 f86a 	bl	8000cb8 <__aeabi_uldivmod>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	461a      	mov	r2, r3
 800cbea:	4b50      	ldr	r3, [pc, #320]	; (800cd2c <UART_SetConfig+0x6f4>)
 800cbec:	fba3 2302 	umull	r2, r3, r3, r2
 800cbf0:	095b      	lsrs	r3, r3, #5
 800cbf2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	469b      	mov	fp, r3
 800cbfa:	f04f 0c00 	mov.w	ip, #0
 800cbfe:	46d9      	mov	r9, fp
 800cc00:	46e2      	mov	sl, ip
 800cc02:	eb19 0309 	adds.w	r3, r9, r9
 800cc06:	eb4a 040a 	adc.w	r4, sl, sl
 800cc0a:	4699      	mov	r9, r3
 800cc0c:	46a2      	mov	sl, r4
 800cc0e:	eb19 090b 	adds.w	r9, r9, fp
 800cc12:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cc16:	f04f 0100 	mov.w	r1, #0
 800cc1a:	f04f 0200 	mov.w	r2, #0
 800cc1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cc22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cc26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cc2a:	4689      	mov	r9, r1
 800cc2c:	4692      	mov	sl, r2
 800cc2e:	eb1b 0509 	adds.w	r5, fp, r9
 800cc32:	eb4c 060a 	adc.w	r6, ip, sl
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	f04f 0200 	mov.w	r2, #0
 800cc40:	f04f 0300 	mov.w	r3, #0
 800cc44:	f04f 0400 	mov.w	r4, #0
 800cc48:	0094      	lsls	r4, r2, #2
 800cc4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cc4e:	008b      	lsls	r3, r1, #2
 800cc50:	461a      	mov	r2, r3
 800cc52:	4623      	mov	r3, r4
 800cc54:	4628      	mov	r0, r5
 800cc56:	4631      	mov	r1, r6
 800cc58:	f7f4 f82e 	bl	8000cb8 <__aeabi_uldivmod>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	460c      	mov	r4, r1
 800cc60:	461a      	mov	r2, r3
 800cc62:	4b32      	ldr	r3, [pc, #200]	; (800cd2c <UART_SetConfig+0x6f4>)
 800cc64:	fba3 1302 	umull	r1, r3, r3, r2
 800cc68:	095b      	lsrs	r3, r3, #5
 800cc6a:	2164      	movs	r1, #100	; 0x64
 800cc6c:	fb01 f303 	mul.w	r3, r1, r3
 800cc70:	1ad3      	subs	r3, r2, r3
 800cc72:	011b      	lsls	r3, r3, #4
 800cc74:	3332      	adds	r3, #50	; 0x32
 800cc76:	4a2d      	ldr	r2, [pc, #180]	; (800cd2c <UART_SetConfig+0x6f4>)
 800cc78:	fba2 2303 	umull	r2, r3, r2, r3
 800cc7c:	095b      	lsrs	r3, r3, #5
 800cc7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc82:	4498      	add	r8, r3
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	469b      	mov	fp, r3
 800cc88:	f04f 0c00 	mov.w	ip, #0
 800cc8c:	46d9      	mov	r9, fp
 800cc8e:	46e2      	mov	sl, ip
 800cc90:	eb19 0309 	adds.w	r3, r9, r9
 800cc94:	eb4a 040a 	adc.w	r4, sl, sl
 800cc98:	4699      	mov	r9, r3
 800cc9a:	46a2      	mov	sl, r4
 800cc9c:	eb19 090b 	adds.w	r9, r9, fp
 800cca0:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cca4:	f04f 0100 	mov.w	r1, #0
 800cca8:	f04f 0200 	mov.w	r2, #0
 800ccac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ccb0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ccb4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ccb8:	4689      	mov	r9, r1
 800ccba:	4692      	mov	sl, r2
 800ccbc:	eb1b 0509 	adds.w	r5, fp, r9
 800ccc0:	eb4c 060a 	adc.w	r6, ip, sl
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	4619      	mov	r1, r3
 800ccca:	f04f 0200 	mov.w	r2, #0
 800ccce:	f04f 0300 	mov.w	r3, #0
 800ccd2:	f04f 0400 	mov.w	r4, #0
 800ccd6:	0094      	lsls	r4, r2, #2
 800ccd8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ccdc:	008b      	lsls	r3, r1, #2
 800ccde:	461a      	mov	r2, r3
 800cce0:	4623      	mov	r3, r4
 800cce2:	4628      	mov	r0, r5
 800cce4:	4631      	mov	r1, r6
 800cce6:	f7f3 ffe7 	bl	8000cb8 <__aeabi_uldivmod>
 800ccea:	4603      	mov	r3, r0
 800ccec:	460c      	mov	r4, r1
 800ccee:	461a      	mov	r2, r3
 800ccf0:	4b0e      	ldr	r3, [pc, #56]	; (800cd2c <UART_SetConfig+0x6f4>)
 800ccf2:	fba3 1302 	umull	r1, r3, r3, r2
 800ccf6:	095b      	lsrs	r3, r3, #5
 800ccf8:	2164      	movs	r1, #100	; 0x64
 800ccfa:	fb01 f303 	mul.w	r3, r1, r3
 800ccfe:	1ad3      	subs	r3, r2, r3
 800cd00:	011b      	lsls	r3, r3, #4
 800cd02:	3332      	adds	r3, #50	; 0x32
 800cd04:	4a09      	ldr	r2, [pc, #36]	; (800cd2c <UART_SetConfig+0x6f4>)
 800cd06:	fba2 2303 	umull	r2, r3, r2, r3
 800cd0a:	095b      	lsrs	r3, r3, #5
 800cd0c:	f003 020f 	and.w	r2, r3, #15
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4442      	add	r2, r8
 800cd16:	609a      	str	r2, [r3, #8]
}
 800cd18:	e7ff      	b.n	800cd1a <UART_SetConfig+0x6e2>
 800cd1a:	bf00      	nop
 800cd1c:	3714      	adds	r7, #20
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd24:	40011000 	.word	0x40011000
 800cd28:	40011400 	.word	0x40011400
 800cd2c:	51eb851f 	.word	0x51eb851f

0800cd30 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800cd30:	b084      	sub	sp, #16
 800cd32:	b480      	push	{r7}
 800cd34:	b085      	sub	sp, #20
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
 800cd3a:	f107 001c 	add.w	r0, r7, #28
 800cd3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cd42:	2300      	movs	r3, #0
 800cd44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800cd46:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800cd48:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cd4a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800cd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800cd4e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800cd52:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800cd56:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800cd5a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	4313      	orrs	r3, r2
 800cd60:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800cd6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cd6e:	68fa      	ldr	r2, [r7, #12]
 800cd70:	431a      	orrs	r2, r3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cd76:	2300      	movs	r3, #0
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3714      	adds	r7, #20
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	b004      	add	sp, #16
 800cd84:	4770      	bx	lr

0800cd86 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800cd86:	b480      	push	{r7}
 800cd88:	b083      	sub	sp, #12
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	370c      	adds	r7, #12
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	370c      	adds	r7, #12
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr

0800cdc2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b082      	sub	sp, #8
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2203      	movs	r2, #3
 800cdce:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800cdd0:	2002      	movs	r0, #2
 800cdd2:	f7f9 fbc5 	bl	8006560 <HAL_Delay>
  
  return HAL_OK;
 800cdd6:	2300      	movs	r3, #0
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800cde0:	b480      	push	{r7}
 800cde2:	b083      	sub	sp, #12
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f003 0303 	and.w	r3, r3, #3
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	370c      	adds	r7, #12
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr

0800cdfc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800cdfc:	b480      	push	{r7}
 800cdfe:	b085      	sub	sp, #20
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ce06:	2300      	movs	r3, #0
 800ce08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	681a      	ldr	r2, [r3, #0]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ce1a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ce20:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ce26:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	68db      	ldr	r3, [r3, #12]
 800ce32:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ce36:	f023 030f 	bic.w	r3, r3, #15
 800ce3a:	68fa      	ldr	r2, [r7, #12]
 800ce3c:	431a      	orrs	r2, r3
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ce42:	2300      	movs	r3, #0
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b083      	sub	sp, #12
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	691b      	ldr	r3, [r3, #16]
 800ce5c:	b2db      	uxtb	r3, r3
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	370c      	adds	r7, #12
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr

0800ce6a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ce6a:	b480      	push	{r7}
 800ce6c:	b085      	sub	sp, #20
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
 800ce72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	3314      	adds	r3, #20
 800ce78:	461a      	mov	r2, r3
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
}  
 800ce84:	4618      	mov	r0, r3
 800ce86:	3714      	adds	r7, #20
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b085      	sub	sp, #20
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	685a      	ldr	r2, [r3, #4]
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ceb6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cebc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cec2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cec4:	68fa      	ldr	r2, [r7, #12]
 800cec6:	4313      	orrs	r3, r2
 800cec8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cece:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	431a      	orrs	r2, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ceda:	2300      	movs	r3, #0

}
 800cedc:	4618      	mov	r0, r3
 800cede:	3714      	adds	r7, #20
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b088      	sub	sp, #32
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cef6:	2310      	movs	r3, #16
 800cef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cefa:	2340      	movs	r3, #64	; 0x40
 800cefc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cefe:	2300      	movs	r3, #0
 800cf00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf08:	f107 0308 	add.w	r3, r7, #8
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f7ff ff74 	bl	800cdfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800cf14:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf18:	2110      	movs	r1, #16
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 fa40 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800cf20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf22:	69fb      	ldr	r3, [r7, #28]
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3720      	adds	r7, #32
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b088      	sub	sp, #32
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cf3a:	2311      	movs	r3, #17
 800cf3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf3e:	2340      	movs	r3, #64	; 0x40
 800cf40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf42:	2300      	movs	r3, #0
 800cf44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf4c:	f107 0308 	add.w	r3, r7, #8
 800cf50:	4619      	mov	r1, r3
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f7ff ff52 	bl	800cdfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cf58:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf5c:	2111      	movs	r1, #17
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 fa1e 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800cf64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf66:	69fb      	ldr	r3, [r7, #28]
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3720      	adds	r7, #32
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b088      	sub	sp, #32
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cf7e:	2312      	movs	r3, #18
 800cf80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf82:	2340      	movs	r3, #64	; 0x40
 800cf84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf86:	2300      	movs	r3, #0
 800cf88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf90:	f107 0308 	add.w	r3, r7, #8
 800cf94:	4619      	mov	r1, r3
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f7ff ff30 	bl	800cdfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cf9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfa0:	2112      	movs	r1, #18
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 f9fc 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800cfa8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfaa:	69fb      	ldr	r3, [r7, #28]
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3720      	adds	r7, #32
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b088      	sub	sp, #32
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cfc2:	2318      	movs	r3, #24
 800cfc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cfc6:	2340      	movs	r3, #64	; 0x40
 800cfc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfd4:	f107 0308 	add.w	r3, r7, #8
 800cfd8:	4619      	mov	r1, r3
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f7ff ff0e 	bl	800cdfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cfe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfe4:	2118      	movs	r1, #24
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 f9da 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800cfec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfee:	69fb      	ldr	r3, [r7, #28]
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3720      	adds	r7, #32
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b088      	sub	sp, #32
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d006:	2319      	movs	r3, #25
 800d008:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d00a:	2340      	movs	r3, #64	; 0x40
 800d00c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d00e:	2300      	movs	r3, #0
 800d010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d016:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d018:	f107 0308 	add.w	r3, r7, #8
 800d01c:	4619      	mov	r1, r3
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f7ff feec 	bl	800cdfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d024:	f241 3288 	movw	r2, #5000	; 0x1388
 800d028:	2119      	movs	r1, #25
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 f9b8 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800d030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d032:	69fb      	ldr	r3, [r7, #28]
}
 800d034:	4618      	mov	r0, r3
 800d036:	3720      	adds	r7, #32
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b088      	sub	sp, #32
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d044:	2300      	movs	r3, #0
 800d046:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d048:	230c      	movs	r3, #12
 800d04a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d04c:	2340      	movs	r3, #64	; 0x40
 800d04e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d050:	2300      	movs	r3, #0
 800d052:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d058:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d05a:	f107 0308 	add.w	r3, r7, #8
 800d05e:	4619      	mov	r1, r3
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f7ff fecb 	bl	800cdfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d066:	4a05      	ldr	r2, [pc, #20]	; (800d07c <SDMMC_CmdStopTransfer+0x40>)
 800d068:	210c      	movs	r1, #12
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 f998 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800d070:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d072:	69fb      	ldr	r3, [r7, #28]
}
 800d074:	4618      	mov	r0, r3
 800d076:	3720      	adds	r7, #32
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	05f5e100 	.word	0x05f5e100

0800d080 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b08a      	sub	sp, #40	; 0x28
 800d084:	af00      	add	r7, sp, #0
 800d086:	60f8      	str	r0, [r7, #12]
 800d088:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d090:	2307      	movs	r3, #7
 800d092:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d094:	2340      	movs	r3, #64	; 0x40
 800d096:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d098:	2300      	movs	r3, #0
 800d09a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d09c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0a0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0a2:	f107 0310 	add.w	r3, r7, #16
 800d0a6:	4619      	mov	r1, r3
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f7ff fea7 	bl	800cdfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d0ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0b2:	2107      	movs	r1, #7
 800d0b4:	68f8      	ldr	r0, [r7, #12]
 800d0b6:	f000 f973 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800d0ba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3728      	adds	r7, #40	; 0x28
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d0c6:	b580      	push	{r7, lr}
 800d0c8:	b088      	sub	sp, #32
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0e4:	f107 0308 	add.w	r3, r7, #8
 800d0e8:	4619      	mov	r1, r3
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f7ff fe86 	bl	800cdfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 f92d 	bl	800d350 <SDMMC_GetCmdError>
 800d0f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0f8:	69fb      	ldr	r3, [r7, #28]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3720      	adds	r7, #32
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b088      	sub	sp, #32
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d10a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d10e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d110:	2308      	movs	r3, #8
 800d112:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d114:	2340      	movs	r3, #64	; 0x40
 800d116:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d118:	2300      	movs	r3, #0
 800d11a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d11c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d120:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d122:	f107 0308 	add.w	r3, r7, #8
 800d126:	4619      	mov	r1, r3
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f7ff fe67 	bl	800cdfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 fb16 	bl	800d760 <SDMMC_GetCmdResp7>
 800d134:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d136:	69fb      	ldr	r3, [r7, #28]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3720      	adds	r7, #32
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b088      	sub	sp, #32
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d14e:	2337      	movs	r3, #55	; 0x37
 800d150:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d152:	2340      	movs	r3, #64	; 0x40
 800d154:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d156:	2300      	movs	r3, #0
 800d158:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d15a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d15e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d160:	f107 0308 	add.w	r3, r7, #8
 800d164:	4619      	mov	r1, r3
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f7ff fe48 	bl	800cdfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d16c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d170:	2137      	movs	r1, #55	; 0x37
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 f914 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800d178:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d17a:	69fb      	ldr	r3, [r7, #28]
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3720      	adds	r7, #32
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b088      	sub	sp, #32
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d194:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d198:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d19a:	2329      	movs	r3, #41	; 0x29
 800d19c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d19e:	2340      	movs	r3, #64	; 0x40
 800d1a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d1a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d1ac:	f107 0308 	add.w	r3, r7, #8
 800d1b0:	4619      	mov	r1, r3
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f7ff fe22 	bl	800cdfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 fa23 	bl	800d604 <SDMMC_GetCmdResp3>
 800d1be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1c0:	69fb      	ldr	r3, [r7, #28]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3720      	adds	r7, #32
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}

0800d1ca <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d1ca:	b580      	push	{r7, lr}
 800d1cc:	b088      	sub	sp, #32
 800d1ce:	af00      	add	r7, sp, #0
 800d1d0:	6078      	str	r0, [r7, #4]
 800d1d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d1d8:	2306      	movs	r3, #6
 800d1da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d1dc:	2340      	movs	r3, #64	; 0x40
 800d1de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d1e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d1ea:	f107 0308 	add.w	r3, r7, #8
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f7ff fe03 	bl	800cdfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d1f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1fa:	2106      	movs	r1, #6
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 f8cf 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800d202:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d204:	69fb      	ldr	r3, [r7, #28]
}
 800d206:	4618      	mov	r0, r3
 800d208:	3720      	adds	r7, #32
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	b088      	sub	sp, #32
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d216:	2300      	movs	r3, #0
 800d218:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d21a:	2333      	movs	r3, #51	; 0x33
 800d21c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d21e:	2340      	movs	r3, #64	; 0x40
 800d220:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d222:	2300      	movs	r3, #0
 800d224:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d22a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d22c:	f107 0308 	add.w	r3, r7, #8
 800d230:	4619      	mov	r1, r3
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f7ff fde2 	bl	800cdfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d238:	f241 3288 	movw	r2, #5000	; 0x1388
 800d23c:	2133      	movs	r1, #51	; 0x33
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 f8ae 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800d244:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d246:	69fb      	ldr	r3, [r7, #28]
}
 800d248:	4618      	mov	r0, r3
 800d24a:	3720      	adds	r7, #32
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b088      	sub	sp, #32
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d258:	2300      	movs	r3, #0
 800d25a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d25c:	2302      	movs	r3, #2
 800d25e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d260:	23c0      	movs	r3, #192	; 0xc0
 800d262:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d264:	2300      	movs	r3, #0
 800d266:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d26c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d26e:	f107 0308 	add.w	r3, r7, #8
 800d272:	4619      	mov	r1, r3
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f7ff fdc1 	bl	800cdfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f97c 	bl	800d578 <SDMMC_GetCmdResp2>
 800d280:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d282:	69fb      	ldr	r3, [r7, #28]
}
 800d284:	4618      	mov	r0, r3
 800d286:	3720      	adds	r7, #32
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b088      	sub	sp, #32
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d29a:	2309      	movs	r3, #9
 800d29c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d29e:	23c0      	movs	r3, #192	; 0xc0
 800d2a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d2a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d2ac:	f107 0308 	add.w	r3, r7, #8
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f7ff fda2 	bl	800cdfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 f95d 	bl	800d578 <SDMMC_GetCmdResp2>
 800d2be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2c0:	69fb      	ldr	r3, [r7, #28]
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3720      	adds	r7, #32
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b088      	sub	sp, #32
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
 800d2d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d2d8:	2303      	movs	r3, #3
 800d2da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d2dc:	2340      	movs	r3, #64	; 0x40
 800d2de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d2e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d2ea:	f107 0308 	add.w	r3, r7, #8
 800d2ee:	4619      	mov	r1, r3
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f7ff fd83 	bl	800cdfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d2f6:	683a      	ldr	r2, [r7, #0]
 800d2f8:	2103      	movs	r1, #3
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 f9bc 	bl	800d678 <SDMMC_GetCmdResp6>
 800d300:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d302:	69fb      	ldr	r3, [r7, #28]
}
 800d304:	4618      	mov	r0, r3
 800d306:	3720      	adds	r7, #32
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b088      	sub	sp, #32
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d31a:	230d      	movs	r3, #13
 800d31c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d31e:	2340      	movs	r3, #64	; 0x40
 800d320:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d322:	2300      	movs	r3, #0
 800d324:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d32a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d32c:	f107 0308 	add.w	r3, r7, #8
 800d330:	4619      	mov	r1, r3
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f7ff fd62 	bl	800cdfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d338:	f241 3288 	movw	r2, #5000	; 0x1388
 800d33c:	210d      	movs	r1, #13
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f000 f82e 	bl	800d3a0 <SDMMC_GetCmdResp1>
 800d344:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d346:	69fb      	ldr	r3, [r7, #28]
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3720      	adds	r7, #32
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d350:	b490      	push	{r4, r7}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d358:	4b0f      	ldr	r3, [pc, #60]	; (800d398 <SDMMC_GetCmdError+0x48>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4a0f      	ldr	r2, [pc, #60]	; (800d39c <SDMMC_GetCmdError+0x4c>)
 800d35e:	fba2 2303 	umull	r2, r3, r2, r3
 800d362:	0a5b      	lsrs	r3, r3, #9
 800d364:	f241 3288 	movw	r2, #5000	; 0x1388
 800d368:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d36c:	4623      	mov	r3, r4
 800d36e:	1e5c      	subs	r4, r3, #1
 800d370:	2b00      	cmp	r3, #0
 800d372:	d102      	bne.n	800d37a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d374:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d378:	e009      	b.n	800d38e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d382:	2b00      	cmp	r3, #0
 800d384:	d0f2      	beq.n	800d36c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	22c5      	movs	r2, #197	; 0xc5
 800d38a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d38c:	2300      	movs	r3, #0
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3708      	adds	r7, #8
 800d392:	46bd      	mov	sp, r7
 800d394:	bc90      	pop	{r4, r7}
 800d396:	4770      	bx	lr
 800d398:	20000000 	.word	0x20000000
 800d39c:	10624dd3 	.word	0x10624dd3

0800d3a0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d3a0:	b590      	push	{r4, r7, lr}
 800d3a2:	b087      	sub	sp, #28
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	60f8      	str	r0, [r7, #12]
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	607a      	str	r2, [r7, #4]
 800d3ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d3ae:	4b6f      	ldr	r3, [pc, #444]	; (800d56c <SDMMC_GetCmdResp1+0x1cc>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	4a6f      	ldr	r2, [pc, #444]	; (800d570 <SDMMC_GetCmdResp1+0x1d0>)
 800d3b4:	fba2 2303 	umull	r2, r3, r2, r3
 800d3b8:	0a5b      	lsrs	r3, r3, #9
 800d3ba:	687a      	ldr	r2, [r7, #4]
 800d3bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d3c0:	4623      	mov	r3, r4
 800d3c2:	1e5c      	subs	r4, r3, #1
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d102      	bne.n	800d3ce <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d3c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d3cc:	e0c9      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3d2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d0f0      	beq.n	800d3c0 <SDMMC_GetCmdResp1+0x20>
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1eb      	bne.n	800d3c0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ec:	f003 0304 	and.w	r3, r3, #4
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d004      	beq.n	800d3fe <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	2204      	movs	r2, #4
 800d3f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d3fa:	2304      	movs	r3, #4
 800d3fc:	e0b1      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d402:	f003 0301 	and.w	r3, r3, #1
 800d406:	2b00      	cmp	r3, #0
 800d408:	d004      	beq.n	800d414 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2201      	movs	r2, #1
 800d40e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d410:	2301      	movs	r3, #1
 800d412:	e0a6      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	22c5      	movs	r2, #197	; 0xc5
 800d418:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	f7ff fd18 	bl	800ce50 <SDIO_GetCommandResponse>
 800d420:	4603      	mov	r3, r0
 800d422:	461a      	mov	r2, r3
 800d424:	7afb      	ldrb	r3, [r7, #11]
 800d426:	4293      	cmp	r3, r2
 800d428:	d001      	beq.n	800d42e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d42a:	2301      	movs	r3, #1
 800d42c:	e099      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d42e:	2100      	movs	r1, #0
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	f7ff fd1a 	bl	800ce6a <SDIO_GetResponse>
 800d436:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d438:	693a      	ldr	r2, [r7, #16]
 800d43a:	4b4e      	ldr	r3, [pc, #312]	; (800d574 <SDMMC_GetCmdResp1+0x1d4>)
 800d43c:	4013      	ands	r3, r2
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d101      	bne.n	800d446 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800d442:	2300      	movs	r3, #0
 800d444:	e08d      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	da02      	bge.n	800d452 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d44c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d450:	e087      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d001      	beq.n	800d460 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d45c:	2340      	movs	r3, #64	; 0x40
 800d45e:	e080      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d466:	2b00      	cmp	r3, #0
 800d468:	d001      	beq.n	800d46e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d46a:	2380      	movs	r3, #128	; 0x80
 800d46c:	e079      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d474:	2b00      	cmp	r3, #0
 800d476:	d002      	beq.n	800d47e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d478:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d47c:	e071      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d484:	2b00      	cmp	r3, #0
 800d486:	d002      	beq.n	800d48e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d48c:	e069      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d494:	2b00      	cmp	r3, #0
 800d496:	d002      	beq.n	800d49e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d49c:	e061      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d002      	beq.n	800d4ae <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d4a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d4ac:	e059      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d002      	beq.n	800d4be <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d4b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4bc:	e051      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d002      	beq.n	800d4ce <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d4c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d4cc:	e049      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d002      	beq.n	800d4de <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d4d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d4dc:	e041      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d4de:	693b      	ldr	r3, [r7, #16]
 800d4e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d002      	beq.n	800d4ee <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800d4e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d4ec:	e039      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d002      	beq.n	800d4fe <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d4f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d4fc:	e031      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d4fe:	693b      	ldr	r3, [r7, #16]
 800d500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d504:	2b00      	cmp	r3, #0
 800d506:	d002      	beq.n	800d50e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d508:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d50c:	e029      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d514:	2b00      	cmp	r3, #0
 800d516:	d002      	beq.n	800d51e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d518:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d51c:	e021      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d51e:	693b      	ldr	r3, [r7, #16]
 800d520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d524:	2b00      	cmp	r3, #0
 800d526:	d002      	beq.n	800d52e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d528:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d52c:	e019      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d534:	2b00      	cmp	r3, #0
 800d536:	d002      	beq.n	800d53e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d538:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d53c:	e011      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d544:	2b00      	cmp	r3, #0
 800d546:	d002      	beq.n	800d54e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d548:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d54c:	e009      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	f003 0308 	and.w	r3, r3, #8
 800d554:	2b00      	cmp	r3, #0
 800d556:	d002      	beq.n	800d55e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d558:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d55c:	e001      	b.n	800d562 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d55e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d562:	4618      	mov	r0, r3
 800d564:	371c      	adds	r7, #28
 800d566:	46bd      	mov	sp, r7
 800d568:	bd90      	pop	{r4, r7, pc}
 800d56a:	bf00      	nop
 800d56c:	20000000 	.word	0x20000000
 800d570:	10624dd3 	.word	0x10624dd3
 800d574:	fdffe008 	.word	0xfdffe008

0800d578 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d578:	b490      	push	{r4, r7}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d580:	4b1e      	ldr	r3, [pc, #120]	; (800d5fc <SDMMC_GetCmdResp2+0x84>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4a1e      	ldr	r2, [pc, #120]	; (800d600 <SDMMC_GetCmdResp2+0x88>)
 800d586:	fba2 2303 	umull	r2, r3, r2, r3
 800d58a:	0a5b      	lsrs	r3, r3, #9
 800d58c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d590:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d594:	4623      	mov	r3, r4
 800d596:	1e5c      	subs	r4, r3, #1
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d102      	bne.n	800d5a2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d59c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d5a0:	e026      	b.n	800d5f0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5a6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d0f0      	beq.n	800d594 <SDMMC_GetCmdResp2+0x1c>
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d1eb      	bne.n	800d594 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5c0:	f003 0304 	and.w	r3, r3, #4
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d004      	beq.n	800d5d2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2204      	movs	r2, #4
 800d5cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5ce:	2304      	movs	r3, #4
 800d5d0:	e00e      	b.n	800d5f0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d6:	f003 0301 	and.w	r3, r3, #1
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d004      	beq.n	800d5e8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	e003      	b.n	800d5f0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	22c5      	movs	r2, #197	; 0xc5
 800d5ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d5ee:	2300      	movs	r3, #0
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bc90      	pop	{r4, r7}
 800d5f8:	4770      	bx	lr
 800d5fa:	bf00      	nop
 800d5fc:	20000000 	.word	0x20000000
 800d600:	10624dd3 	.word	0x10624dd3

0800d604 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d604:	b490      	push	{r4, r7}
 800d606:	b084      	sub	sp, #16
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d60c:	4b18      	ldr	r3, [pc, #96]	; (800d670 <SDMMC_GetCmdResp3+0x6c>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	4a18      	ldr	r2, [pc, #96]	; (800d674 <SDMMC_GetCmdResp3+0x70>)
 800d612:	fba2 2303 	umull	r2, r3, r2, r3
 800d616:	0a5b      	lsrs	r3, r3, #9
 800d618:	f241 3288 	movw	r2, #5000	; 0x1388
 800d61c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d620:	4623      	mov	r3, r4
 800d622:	1e5c      	subs	r4, r3, #1
 800d624:	2b00      	cmp	r3, #0
 800d626:	d102      	bne.n	800d62e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d628:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d62c:	e01b      	b.n	800d666 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d632:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d0f0      	beq.n	800d620 <SDMMC_GetCmdResp3+0x1c>
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d644:	2b00      	cmp	r3, #0
 800d646:	d1eb      	bne.n	800d620 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d64c:	f003 0304 	and.w	r3, r3, #4
 800d650:	2b00      	cmp	r3, #0
 800d652:	d004      	beq.n	800d65e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2204      	movs	r2, #4
 800d658:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d65a:	2304      	movs	r3, #4
 800d65c:	e003      	b.n	800d666 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	22c5      	movs	r2, #197	; 0xc5
 800d662:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d664:	2300      	movs	r3, #0
}
 800d666:	4618      	mov	r0, r3
 800d668:	3710      	adds	r7, #16
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bc90      	pop	{r4, r7}
 800d66e:	4770      	bx	lr
 800d670:	20000000 	.word	0x20000000
 800d674:	10624dd3 	.word	0x10624dd3

0800d678 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d678:	b590      	push	{r4, r7, lr}
 800d67a:	b087      	sub	sp, #28
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	60f8      	str	r0, [r7, #12]
 800d680:	460b      	mov	r3, r1
 800d682:	607a      	str	r2, [r7, #4]
 800d684:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d686:	4b34      	ldr	r3, [pc, #208]	; (800d758 <SDMMC_GetCmdResp6+0xe0>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a34      	ldr	r2, [pc, #208]	; (800d75c <SDMMC_GetCmdResp6+0xe4>)
 800d68c:	fba2 2303 	umull	r2, r3, r2, r3
 800d690:	0a5b      	lsrs	r3, r3, #9
 800d692:	f241 3288 	movw	r2, #5000	; 0x1388
 800d696:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d69a:	4623      	mov	r3, r4
 800d69c:	1e5c      	subs	r4, r3, #1
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d102      	bne.n	800d6a8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d6a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d6a6:	e052      	b.n	800d74e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ac:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d0f0      	beq.n	800d69a <SDMMC_GetCmdResp6+0x22>
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d1eb      	bne.n	800d69a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6c6:	f003 0304 	and.w	r3, r3, #4
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d004      	beq.n	800d6d8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2204      	movs	r2, #4
 800d6d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d6d4:	2304      	movs	r3, #4
 800d6d6:	e03a      	b.n	800d74e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6dc:	f003 0301 	and.w	r3, r3, #1
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d004      	beq.n	800d6ee <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e02f      	b.n	800d74e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d6ee:	68f8      	ldr	r0, [r7, #12]
 800d6f0:	f7ff fbae 	bl	800ce50 <SDIO_GetCommandResponse>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	7afb      	ldrb	r3, [r7, #11]
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d001      	beq.n	800d702 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6fe:	2301      	movs	r3, #1
 800d700:	e025      	b.n	800d74e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	22c5      	movs	r2, #197	; 0xc5
 800d706:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d708:	2100      	movs	r1, #0
 800d70a:	68f8      	ldr	r0, [r7, #12]
 800d70c:	f7ff fbad 	bl	800ce6a <SDIO_GetResponse>
 800d710:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d106      	bne.n	800d72a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	0c1b      	lsrs	r3, r3, #16
 800d720:	b29a      	uxth	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d726:	2300      	movs	r3, #0
 800d728:	e011      	b.n	800d74e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d730:	2b00      	cmp	r3, #0
 800d732:	d002      	beq.n	800d73a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d734:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d738:	e009      	b.n	800d74e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d740:	2b00      	cmp	r3, #0
 800d742:	d002      	beq.n	800d74a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d748:	e001      	b.n	800d74e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d74a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d74e:	4618      	mov	r0, r3
 800d750:	371c      	adds	r7, #28
 800d752:	46bd      	mov	sp, r7
 800d754:	bd90      	pop	{r4, r7, pc}
 800d756:	bf00      	nop
 800d758:	20000000 	.word	0x20000000
 800d75c:	10624dd3 	.word	0x10624dd3

0800d760 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d760:	b490      	push	{r4, r7}
 800d762:	b084      	sub	sp, #16
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d768:	4b21      	ldr	r3, [pc, #132]	; (800d7f0 <SDMMC_GetCmdResp7+0x90>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a21      	ldr	r2, [pc, #132]	; (800d7f4 <SDMMC_GetCmdResp7+0x94>)
 800d76e:	fba2 2303 	umull	r2, r3, r2, r3
 800d772:	0a5b      	lsrs	r3, r3, #9
 800d774:	f241 3288 	movw	r2, #5000	; 0x1388
 800d778:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d77c:	4623      	mov	r3, r4
 800d77e:	1e5c      	subs	r4, r3, #1
 800d780:	2b00      	cmp	r3, #0
 800d782:	d102      	bne.n	800d78a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d784:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d788:	e02c      	b.n	800d7e4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d78e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d796:	2b00      	cmp	r3, #0
 800d798:	d0f0      	beq.n	800d77c <SDMMC_GetCmdResp7+0x1c>
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d1eb      	bne.n	800d77c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a8:	f003 0304 	and.w	r3, r3, #4
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d004      	beq.n	800d7ba <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2204      	movs	r2, #4
 800d7b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d7b6:	2304      	movs	r3, #4
 800d7b8:	e014      	b.n	800d7e4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7be:	f003 0301 	and.w	r3, r3, #1
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d004      	beq.n	800d7d0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	e009      	b.n	800d7e4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d002      	beq.n	800d7e2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2240      	movs	r2, #64	; 0x40
 800d7e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d7e2:	2300      	movs	r3, #0
  
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3710      	adds	r7, #16
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bc90      	pop	{r4, r7}
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop
 800d7f0:	20000000 	.word	0x20000000
 800d7f4:	10624dd3 	.word	0x10624dd3

0800d7f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d7fc:	4904      	ldr	r1, [pc, #16]	; (800d810 <MX_FATFS_Init+0x18>)
 800d7fe:	4805      	ldr	r0, [pc, #20]	; (800d814 <MX_FATFS_Init+0x1c>)
 800d800:	f004 f874 	bl	80118ec <FATFS_LinkDriver>
 800d804:	4603      	mov	r3, r0
 800d806:	461a      	mov	r2, r3
 800d808:	4b03      	ldr	r3, [pc, #12]	; (800d818 <MX_FATFS_Init+0x20>)
 800d80a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d80c:	bf00      	nop
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	200395b0 	.word	0x200395b0
 800d814:	08017db0 	.word	0x08017db0
 800d818:	200395ac 	.word	0x200395ac

0800d81c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d81c:	b480      	push	{r7}
 800d81e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d820:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d822:	4618      	mov	r0, r3
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr

0800d82c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d832:	2300      	movs	r3, #0
 800d834:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d836:	f000 f896 	bl	800d966 <BSP_SD_IsDetected>
 800d83a:	4603      	mov	r3, r0
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d001      	beq.n	800d844 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d840:	2301      	movs	r3, #1
 800d842:	e012      	b.n	800d86a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d844:	480b      	ldr	r0, [pc, #44]	; (800d874 <BSP_SD_Init+0x48>)
 800d846:	f7fb ff9d 	bl	8009784 <HAL_SD_Init>
 800d84a:	4603      	mov	r3, r0
 800d84c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d84e:	79fb      	ldrb	r3, [r7, #7]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d109      	bne.n	800d868 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d854:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d858:	4806      	ldr	r0, [pc, #24]	; (800d874 <BSP_SD_Init+0x48>)
 800d85a:	f7fc fd47 	bl	800a2ec <HAL_SD_ConfigWideBusOperation>
 800d85e:	4603      	mov	r3, r0
 800d860:	2b00      	cmp	r3, #0
 800d862:	d001      	beq.n	800d868 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d864:	2301      	movs	r3, #1
 800d866:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d868:	79fb      	ldrb	r3, [r7, #7]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	200393ac 	.word	0x200393ac

0800d878 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b086      	sub	sp, #24
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	60b9      	str	r1, [r7, #8]
 800d882:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d884:	2300      	movs	r3, #0
 800d886:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	68ba      	ldr	r2, [r7, #8]
 800d88c:	68f9      	ldr	r1, [r7, #12]
 800d88e:	4806      	ldr	r0, [pc, #24]	; (800d8a8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d890:	f7fc f808 	bl	80098a4 <HAL_SD_ReadBlocks_DMA>
 800d894:	4603      	mov	r3, r0
 800d896:	2b00      	cmp	r3, #0
 800d898:	d001      	beq.n	800d89e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d89a:	2301      	movs	r3, #1
 800d89c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d89e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3718      	adds	r7, #24
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	200393ac 	.word	0x200393ac

0800d8ac <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b086      	sub	sp, #24
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	68ba      	ldr	r2, [r7, #8]
 800d8c0:	68f9      	ldr	r1, [r7, #12]
 800d8c2:	4806      	ldr	r0, [pc, #24]	; (800d8dc <BSP_SD_WriteBlocks_DMA+0x30>)
 800d8c4:	f7fc f8d6 	bl	8009a74 <HAL_SD_WriteBlocks_DMA>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d001      	beq.n	800d8d2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d8d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3718      	adds	r7, #24
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}
 800d8dc:	200393ac 	.word	0x200393ac

0800d8e0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d8e4:	4805      	ldr	r0, [pc, #20]	; (800d8fc <BSP_SD_GetCardState+0x1c>)
 800d8e6:	f7fc fd7d 	bl	800a3e4 <HAL_SD_GetCardState>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	2b04      	cmp	r3, #4
 800d8ee:	bf14      	ite	ne
 800d8f0:	2301      	movne	r3, #1
 800d8f2:	2300      	moveq	r3, #0
 800d8f4:	b2db      	uxtb	r3, r3
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	200393ac 	.word	0x200393ac

0800d900 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b082      	sub	sp, #8
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d908:	6879      	ldr	r1, [r7, #4]
 800d90a:	4803      	ldr	r0, [pc, #12]	; (800d918 <BSP_SD_GetCardInfo+0x18>)
 800d90c:	f7fc fcc2 	bl	800a294 <HAL_SD_GetCardInfo>
}
 800d910:	bf00      	nop
 800d912:	3708      	adds	r7, #8
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	200393ac 	.word	0x200393ac

0800d91c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b082      	sub	sp, #8
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d924:	f000 f818 	bl	800d958 <BSP_SD_AbortCallback>
}
 800d928:	bf00      	nop
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}

0800d930 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d938:	f000 f9a8 	bl	800dc8c <BSP_SD_WriteCpltCallback>
}
 800d93c:	bf00      	nop
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d94c:	f000 f9aa 	bl	800dca4 <BSP_SD_ReadCpltCallback>
}
 800d950:	bf00      	nop
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d958:	b480      	push	{r7}
 800d95a:	af00      	add	r7, sp, #0

}
 800d95c:	bf00      	nop
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr

0800d966 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d966:	b580      	push	{r7, lr}
 800d968:	b082      	sub	sp, #8
 800d96a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d96c:	2301      	movs	r3, #1
 800d96e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d970:	f000 f80c 	bl	800d98c <BSP_PlatformIsDetected>
 800d974:	4603      	mov	r3, r0
 800d976:	2b00      	cmp	r3, #0
 800d978:	d101      	bne.n	800d97e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d97a:	2300      	movs	r3, #0
 800d97c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d97e:	79fb      	ldrb	r3, [r7, #7]
 800d980:	b2db      	uxtb	r3, r3
}
 800d982:	4618      	mov	r0, r3
 800d984:	3708      	adds	r7, #8
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}
	...

0800d98c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b082      	sub	sp, #8
 800d990:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d992:	2301      	movs	r3, #1
 800d994:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d99a:	4806      	ldr	r0, [pc, #24]	; (800d9b4 <BSP_PlatformIsDetected+0x28>)
 800d99c:	f7fa f85e 	bl	8007a5c <HAL_GPIO_ReadPin>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d001      	beq.n	800d9aa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d9aa:	79fb      	ldrb	r3, [r7, #7]
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3708      	adds	r7, #8
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	40020000 	.word	0x40020000

0800d9b8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b084      	sub	sp, #16
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d9c0:	f7f8 fdc2 	bl	8006548 <HAL_GetTick>
 800d9c4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d9c6:	e006      	b.n	800d9d6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d9c8:	f7ff ff8a 	bl	800d8e0 <BSP_SD_GetCardState>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d101      	bne.n	800d9d6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	e009      	b.n	800d9ea <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d9d6:	f7f8 fdb7 	bl	8006548 <HAL_GetTick>
 800d9da:	4602      	mov	r2, r0
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	1ad3      	subs	r3, r2, r3
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d8f0      	bhi.n	800d9c8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d9e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3710      	adds	r7, #16
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}
	...

0800d9f4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b082      	sub	sp, #8
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d9fe:	4b0b      	ldr	r3, [pc, #44]	; (800da2c <SD_CheckStatus+0x38>)
 800da00:	2201      	movs	r2, #1
 800da02:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800da04:	f7ff ff6c 	bl	800d8e0 <BSP_SD_GetCardState>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d107      	bne.n	800da1e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800da0e:	4b07      	ldr	r3, [pc, #28]	; (800da2c <SD_CheckStatus+0x38>)
 800da10:	781b      	ldrb	r3, [r3, #0]
 800da12:	b2db      	uxtb	r3, r3
 800da14:	f023 0301 	bic.w	r3, r3, #1
 800da18:	b2da      	uxtb	r2, r3
 800da1a:	4b04      	ldr	r3, [pc, #16]	; (800da2c <SD_CheckStatus+0x38>)
 800da1c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800da1e:	4b03      	ldr	r3, [pc, #12]	; (800da2c <SD_CheckStatus+0x38>)
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	b2db      	uxtb	r3, r3
}
 800da24:	4618      	mov	r0, r3
 800da26:	3708      	adds	r7, #8
 800da28:	46bd      	mov	sp, r7
 800da2a:	bd80      	pop	{r7, pc}
 800da2c:	20000009 	.word	0x20000009

0800da30 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	4603      	mov	r3, r0
 800da38:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800da3a:	f7ff fef7 	bl	800d82c <BSP_SD_Init>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b00      	cmp	r3, #0
 800da42:	d107      	bne.n	800da54 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800da44:	79fb      	ldrb	r3, [r7, #7]
 800da46:	4618      	mov	r0, r3
 800da48:	f7ff ffd4 	bl	800d9f4 <SD_CheckStatus>
 800da4c:	4603      	mov	r3, r0
 800da4e:	461a      	mov	r2, r3
 800da50:	4b04      	ldr	r3, [pc, #16]	; (800da64 <SD_initialize+0x34>)
 800da52:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800da54:	4b03      	ldr	r3, [pc, #12]	; (800da64 <SD_initialize+0x34>)
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	b2db      	uxtb	r3, r3
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3708      	adds	r7, #8
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	20000009 	.word	0x20000009

0800da68 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	4603      	mov	r3, r0
 800da70:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800da72:	79fb      	ldrb	r3, [r7, #7]
 800da74:	4618      	mov	r0, r3
 800da76:	f7ff ffbd 	bl	800d9f4 <SD_CheckStatus>
 800da7a:	4603      	mov	r3, r0
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3708      	adds	r7, #8
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}

0800da84 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b086      	sub	sp, #24
 800da88:	af00      	add	r7, sp, #0
 800da8a:	60b9      	str	r1, [r7, #8]
 800da8c:	607a      	str	r2, [r7, #4]
 800da8e:	603b      	str	r3, [r7, #0]
 800da90:	4603      	mov	r3, r0
 800da92:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800da94:	2301      	movs	r3, #1
 800da96:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800da98:	f247 5030 	movw	r0, #30000	; 0x7530
 800da9c:	f7ff ff8c 	bl	800d9b8 <SD_CheckStatusWithTimeout>
 800daa0:	4603      	mov	r3, r0
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	da01      	bge.n	800daaa <SD_read+0x26>
  {
    return res;
 800daa6:	7dfb      	ldrb	r3, [r7, #23]
 800daa8:	e03b      	b.n	800db22 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800daaa:	683a      	ldr	r2, [r7, #0]
 800daac:	6879      	ldr	r1, [r7, #4]
 800daae:	68b8      	ldr	r0, [r7, #8]
 800dab0:	f7ff fee2 	bl	800d878 <BSP_SD_ReadBlocks_DMA>
 800dab4:	4603      	mov	r3, r0
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d132      	bne.n	800db20 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800daba:	4b1c      	ldr	r3, [pc, #112]	; (800db2c <SD_read+0xa8>)
 800dabc:	2200      	movs	r2, #0
 800dabe:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800dac0:	f7f8 fd42 	bl	8006548 <HAL_GetTick>
 800dac4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800dac6:	bf00      	nop
 800dac8:	4b18      	ldr	r3, [pc, #96]	; (800db2c <SD_read+0xa8>)
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d108      	bne.n	800dae2 <SD_read+0x5e>
 800dad0:	f7f8 fd3a 	bl	8006548 <HAL_GetTick>
 800dad4:	4602      	mov	r2, r0
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	1ad3      	subs	r3, r2, r3
 800dada:	f247 522f 	movw	r2, #29999	; 0x752f
 800dade:	4293      	cmp	r3, r2
 800dae0:	d9f2      	bls.n	800dac8 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800dae2:	4b12      	ldr	r3, [pc, #72]	; (800db2c <SD_read+0xa8>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d102      	bne.n	800daf0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800daea:	2301      	movs	r3, #1
 800daec:	75fb      	strb	r3, [r7, #23]
 800daee:	e017      	b.n	800db20 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800daf0:	4b0e      	ldr	r3, [pc, #56]	; (800db2c <SD_read+0xa8>)
 800daf2:	2200      	movs	r2, #0
 800daf4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800daf6:	f7f8 fd27 	bl	8006548 <HAL_GetTick>
 800dafa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dafc:	e007      	b.n	800db0e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dafe:	f7ff feef 	bl	800d8e0 <BSP_SD_GetCardState>
 800db02:	4603      	mov	r3, r0
 800db04:	2b00      	cmp	r3, #0
 800db06:	d102      	bne.n	800db0e <SD_read+0x8a>
          {
            res = RES_OK;
 800db08:	2300      	movs	r3, #0
 800db0a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800db0c:	e008      	b.n	800db20 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800db0e:	f7f8 fd1b 	bl	8006548 <HAL_GetTick>
 800db12:	4602      	mov	r2, r0
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	1ad3      	subs	r3, r2, r3
 800db18:	f247 522f 	movw	r2, #29999	; 0x752f
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d9ee      	bls.n	800dafe <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800db20:	7dfb      	ldrb	r3, [r7, #23]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3718      	adds	r7, #24
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	20036a44 	.word	0x20036a44

0800db30 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b086      	sub	sp, #24
 800db34:	af00      	add	r7, sp, #0
 800db36:	60b9      	str	r1, [r7, #8]
 800db38:	607a      	str	r2, [r7, #4]
 800db3a:	603b      	str	r3, [r7, #0]
 800db3c:	4603      	mov	r3, r0
 800db3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800db40:	2301      	movs	r3, #1
 800db42:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800db44:	4b24      	ldr	r3, [pc, #144]	; (800dbd8 <SD_write+0xa8>)
 800db46:	2200      	movs	r2, #0
 800db48:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800db4a:	f247 5030 	movw	r0, #30000	; 0x7530
 800db4e:	f7ff ff33 	bl	800d9b8 <SD_CheckStatusWithTimeout>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	da01      	bge.n	800db5c <SD_write+0x2c>
  {
    return res;
 800db58:	7dfb      	ldrb	r3, [r7, #23]
 800db5a:	e038      	b.n	800dbce <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800db5c:	683a      	ldr	r2, [r7, #0]
 800db5e:	6879      	ldr	r1, [r7, #4]
 800db60:	68b8      	ldr	r0, [r7, #8]
 800db62:	f7ff fea3 	bl	800d8ac <BSP_SD_WriteBlocks_DMA>
 800db66:	4603      	mov	r3, r0
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d12f      	bne.n	800dbcc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800db6c:	f7f8 fcec 	bl	8006548 <HAL_GetTick>
 800db70:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800db72:	bf00      	nop
 800db74:	4b18      	ldr	r3, [pc, #96]	; (800dbd8 <SD_write+0xa8>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d108      	bne.n	800db8e <SD_write+0x5e>
 800db7c:	f7f8 fce4 	bl	8006548 <HAL_GetTick>
 800db80:	4602      	mov	r2, r0
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	1ad3      	subs	r3, r2, r3
 800db86:	f247 522f 	movw	r2, #29999	; 0x752f
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d9f2      	bls.n	800db74 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800db8e:	4b12      	ldr	r3, [pc, #72]	; (800dbd8 <SD_write+0xa8>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d102      	bne.n	800db9c <SD_write+0x6c>
      {
        res = RES_ERROR;
 800db96:	2301      	movs	r3, #1
 800db98:	75fb      	strb	r3, [r7, #23]
 800db9a:	e017      	b.n	800dbcc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800db9c:	4b0e      	ldr	r3, [pc, #56]	; (800dbd8 <SD_write+0xa8>)
 800db9e:	2200      	movs	r2, #0
 800dba0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800dba2:	f7f8 fcd1 	bl	8006548 <HAL_GetTick>
 800dba6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dba8:	e007      	b.n	800dbba <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dbaa:	f7ff fe99 	bl	800d8e0 <BSP_SD_GetCardState>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d102      	bne.n	800dbba <SD_write+0x8a>
          {
            res = RES_OK;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	75fb      	strb	r3, [r7, #23]
            break;
 800dbb8:	e008      	b.n	800dbcc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dbba:	f7f8 fcc5 	bl	8006548 <HAL_GetTick>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	1ad3      	subs	r3, r2, r3
 800dbc4:	f247 522f 	movw	r2, #29999	; 0x752f
 800dbc8:	4293      	cmp	r3, r2
 800dbca:	d9ee      	bls.n	800dbaa <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800dbcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	3718      	adds	r7, #24
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	bf00      	nop
 800dbd8:	20036a40 	.word	0x20036a40

0800dbdc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b08c      	sub	sp, #48	; 0x30
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	603a      	str	r2, [r7, #0]
 800dbe6:	71fb      	strb	r3, [r7, #7]
 800dbe8:	460b      	mov	r3, r1
 800dbea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dbec:	2301      	movs	r3, #1
 800dbee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dbf2:	4b25      	ldr	r3, [pc, #148]	; (800dc88 <SD_ioctl+0xac>)
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	f003 0301 	and.w	r3, r3, #1
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d001      	beq.n	800dc04 <SD_ioctl+0x28>
 800dc00:	2303      	movs	r3, #3
 800dc02:	e03c      	b.n	800dc7e <SD_ioctl+0xa2>

  switch (cmd)
 800dc04:	79bb      	ldrb	r3, [r7, #6]
 800dc06:	2b03      	cmp	r3, #3
 800dc08:	d834      	bhi.n	800dc74 <SD_ioctl+0x98>
 800dc0a:	a201      	add	r2, pc, #4	; (adr r2, 800dc10 <SD_ioctl+0x34>)
 800dc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc10:	0800dc21 	.word	0x0800dc21
 800dc14:	0800dc29 	.word	0x0800dc29
 800dc18:	0800dc41 	.word	0x0800dc41
 800dc1c:	0800dc5b 	.word	0x0800dc5b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800dc20:	2300      	movs	r3, #0
 800dc22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dc26:	e028      	b.n	800dc7a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dc28:	f107 030c 	add.w	r3, r7, #12
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7ff fe67 	bl	800d900 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dc32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dc3e:	e01c      	b.n	800dc7a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dc40:	f107 030c 	add.w	r3, r7, #12
 800dc44:	4618      	mov	r0, r3
 800dc46:	f7ff fe5b 	bl	800d900 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4c:	b29a      	uxth	r2, r3
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dc52:	2300      	movs	r3, #0
 800dc54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dc58:	e00f      	b.n	800dc7a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dc5a:	f107 030c 	add.w	r3, r7, #12
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7ff fe4e 	bl	800d900 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc66:	0a5a      	lsrs	r2, r3, #9
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dc72:	e002      	b.n	800dc7a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800dc74:	2304      	movs	r3, #4
 800dc76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800dc7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3730      	adds	r7, #48	; 0x30
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	20000009 	.word	0x20000009

0800dc8c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800dc8c:	b480      	push	{r7}
 800dc8e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800dc90:	4b03      	ldr	r3, [pc, #12]	; (800dca0 <BSP_SD_WriteCpltCallback+0x14>)
 800dc92:	2201      	movs	r2, #1
 800dc94:	601a      	str	r2, [r3, #0]
}
 800dc96:	bf00      	nop
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr
 800dca0:	20036a40 	.word	0x20036a40

0800dca4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800dca4:	b480      	push	{r7}
 800dca6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800dca8:	4b03      	ldr	r3, [pc, #12]	; (800dcb8 <BSP_SD_ReadCpltCallback+0x14>)
 800dcaa:	2201      	movs	r2, #1
 800dcac:	601a      	str	r2, [r3, #0]
}
 800dcae:	bf00      	nop
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr
 800dcb8:	20036a44 	.word	0x20036a44

0800dcbc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b084      	sub	sp, #16
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dcc6:	79fb      	ldrb	r3, [r7, #7]
 800dcc8:	4a08      	ldr	r2, [pc, #32]	; (800dcec <disk_status+0x30>)
 800dcca:	009b      	lsls	r3, r3, #2
 800dccc:	4413      	add	r3, r2
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	79fa      	ldrb	r2, [r7, #7]
 800dcd4:	4905      	ldr	r1, [pc, #20]	; (800dcec <disk_status+0x30>)
 800dcd6:	440a      	add	r2, r1
 800dcd8:	7a12      	ldrb	r2, [r2, #8]
 800dcda:	4610      	mov	r0, r2
 800dcdc:	4798      	blx	r3
 800dcde:	4603      	mov	r3, r0
 800dce0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800dce2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3710      	adds	r7, #16
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	20036c70 	.word	0x20036c70

0800dcf0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800dcfe:	79fb      	ldrb	r3, [r7, #7]
 800dd00:	4a0d      	ldr	r2, [pc, #52]	; (800dd38 <disk_initialize+0x48>)
 800dd02:	5cd3      	ldrb	r3, [r2, r3]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d111      	bne.n	800dd2c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800dd08:	79fb      	ldrb	r3, [r7, #7]
 800dd0a:	4a0b      	ldr	r2, [pc, #44]	; (800dd38 <disk_initialize+0x48>)
 800dd0c:	2101      	movs	r1, #1
 800dd0e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800dd10:	79fb      	ldrb	r3, [r7, #7]
 800dd12:	4a09      	ldr	r2, [pc, #36]	; (800dd38 <disk_initialize+0x48>)
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	4413      	add	r3, r2
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	79fa      	ldrb	r2, [r7, #7]
 800dd1e:	4906      	ldr	r1, [pc, #24]	; (800dd38 <disk_initialize+0x48>)
 800dd20:	440a      	add	r2, r1
 800dd22:	7a12      	ldrb	r2, [r2, #8]
 800dd24:	4610      	mov	r0, r2
 800dd26:	4798      	blx	r3
 800dd28:	4603      	mov	r3, r0
 800dd2a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800dd2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3710      	adds	r7, #16
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
 800dd36:	bf00      	nop
 800dd38:	20036c70 	.word	0x20036c70

0800dd3c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800dd3c:	b590      	push	{r4, r7, lr}
 800dd3e:	b087      	sub	sp, #28
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60b9      	str	r1, [r7, #8]
 800dd44:	607a      	str	r2, [r7, #4]
 800dd46:	603b      	str	r3, [r7, #0]
 800dd48:	4603      	mov	r3, r0
 800dd4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dd4c:	7bfb      	ldrb	r3, [r7, #15]
 800dd4e:	4a0a      	ldr	r2, [pc, #40]	; (800dd78 <disk_read+0x3c>)
 800dd50:	009b      	lsls	r3, r3, #2
 800dd52:	4413      	add	r3, r2
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	689c      	ldr	r4, [r3, #8]
 800dd58:	7bfb      	ldrb	r3, [r7, #15]
 800dd5a:	4a07      	ldr	r2, [pc, #28]	; (800dd78 <disk_read+0x3c>)
 800dd5c:	4413      	add	r3, r2
 800dd5e:	7a18      	ldrb	r0, [r3, #8]
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	687a      	ldr	r2, [r7, #4]
 800dd64:	68b9      	ldr	r1, [r7, #8]
 800dd66:	47a0      	blx	r4
 800dd68:	4603      	mov	r3, r0
 800dd6a:	75fb      	strb	r3, [r7, #23]
  return res;
 800dd6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	371c      	adds	r7, #28
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd90      	pop	{r4, r7, pc}
 800dd76:	bf00      	nop
 800dd78:	20036c70 	.word	0x20036c70

0800dd7c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800dd7c:	b590      	push	{r4, r7, lr}
 800dd7e:	b087      	sub	sp, #28
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	60b9      	str	r1, [r7, #8]
 800dd84:	607a      	str	r2, [r7, #4]
 800dd86:	603b      	str	r3, [r7, #0]
 800dd88:	4603      	mov	r3, r0
 800dd8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800dd8c:	7bfb      	ldrb	r3, [r7, #15]
 800dd8e:	4a0a      	ldr	r2, [pc, #40]	; (800ddb8 <disk_write+0x3c>)
 800dd90:	009b      	lsls	r3, r3, #2
 800dd92:	4413      	add	r3, r2
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	68dc      	ldr	r4, [r3, #12]
 800dd98:	7bfb      	ldrb	r3, [r7, #15]
 800dd9a:	4a07      	ldr	r2, [pc, #28]	; (800ddb8 <disk_write+0x3c>)
 800dd9c:	4413      	add	r3, r2
 800dd9e:	7a18      	ldrb	r0, [r3, #8]
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	68b9      	ldr	r1, [r7, #8]
 800dda6:	47a0      	blx	r4
 800dda8:	4603      	mov	r3, r0
 800ddaa:	75fb      	strb	r3, [r7, #23]
  return res;
 800ddac:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	371c      	adds	r7, #28
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd90      	pop	{r4, r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	20036c70 	.word	0x20036c70

0800ddbc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	603a      	str	r2, [r7, #0]
 800ddc6:	71fb      	strb	r3, [r7, #7]
 800ddc8:	460b      	mov	r3, r1
 800ddca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ddcc:	79fb      	ldrb	r3, [r7, #7]
 800ddce:	4a09      	ldr	r2, [pc, #36]	; (800ddf4 <disk_ioctl+0x38>)
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	4413      	add	r3, r2
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	691b      	ldr	r3, [r3, #16]
 800ddd8:	79fa      	ldrb	r2, [r7, #7]
 800ddda:	4906      	ldr	r1, [pc, #24]	; (800ddf4 <disk_ioctl+0x38>)
 800dddc:	440a      	add	r2, r1
 800ddde:	7a10      	ldrb	r0, [r2, #8]
 800dde0:	79b9      	ldrb	r1, [r7, #6]
 800dde2:	683a      	ldr	r2, [r7, #0]
 800dde4:	4798      	blx	r3
 800dde6:	4603      	mov	r3, r0
 800dde8:	73fb      	strb	r3, [r7, #15]
  return res;
 800ddea:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3710      	adds	r7, #16
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	20036c70 	.word	0x20036c70

0800ddf8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b085      	sub	sp, #20
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	3301      	adds	r3, #1
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800de08:	89fb      	ldrh	r3, [r7, #14]
 800de0a:	021b      	lsls	r3, r3, #8
 800de0c:	b21a      	sxth	r2, r3
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	b21b      	sxth	r3, r3
 800de14:	4313      	orrs	r3, r2
 800de16:	b21b      	sxth	r3, r3
 800de18:	81fb      	strh	r3, [r7, #14]
	return rv;
 800de1a:	89fb      	ldrh	r3, [r7, #14]
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3714      	adds	r7, #20
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr

0800de28 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800de28:	b480      	push	{r7}
 800de2a:	b085      	sub	sp, #20
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	3303      	adds	r3, #3
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	021b      	lsls	r3, r3, #8
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	3202      	adds	r2, #2
 800de40:	7812      	ldrb	r2, [r2, #0]
 800de42:	4313      	orrs	r3, r2
 800de44:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	021b      	lsls	r3, r3, #8
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	3201      	adds	r2, #1
 800de4e:	7812      	ldrb	r2, [r2, #0]
 800de50:	4313      	orrs	r3, r2
 800de52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	021b      	lsls	r3, r3, #8
 800de58:	687a      	ldr	r2, [r7, #4]
 800de5a:	7812      	ldrb	r2, [r2, #0]
 800de5c:	4313      	orrs	r3, r2
 800de5e:	60fb      	str	r3, [r7, #12]
	return rv;
 800de60:	68fb      	ldr	r3, [r7, #12]
}
 800de62:	4618      	mov	r0, r3
 800de64:	3714      	adds	r7, #20
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr

0800de6e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800de6e:	b480      	push	{r7}
 800de70:	b083      	sub	sp, #12
 800de72:	af00      	add	r7, sp, #0
 800de74:	6078      	str	r0, [r7, #4]
 800de76:	460b      	mov	r3, r1
 800de78:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	1c5a      	adds	r2, r3, #1
 800de7e:	607a      	str	r2, [r7, #4]
 800de80:	887a      	ldrh	r2, [r7, #2]
 800de82:	b2d2      	uxtb	r2, r2
 800de84:	701a      	strb	r2, [r3, #0]
 800de86:	887b      	ldrh	r3, [r7, #2]
 800de88:	0a1b      	lsrs	r3, r3, #8
 800de8a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	1c5a      	adds	r2, r3, #1
 800de90:	607a      	str	r2, [r7, #4]
 800de92:	887a      	ldrh	r2, [r7, #2]
 800de94:	b2d2      	uxtb	r2, r2
 800de96:	701a      	strb	r2, [r3, #0]
}
 800de98:	bf00      	nop
 800de9a:	370c      	adds	r7, #12
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr

0800dea4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	1c5a      	adds	r2, r3, #1
 800deb2:	607a      	str	r2, [r7, #4]
 800deb4:	683a      	ldr	r2, [r7, #0]
 800deb6:	b2d2      	uxtb	r2, r2
 800deb8:	701a      	strb	r2, [r3, #0]
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	0a1b      	lsrs	r3, r3, #8
 800debe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	1c5a      	adds	r2, r3, #1
 800dec4:	607a      	str	r2, [r7, #4]
 800dec6:	683a      	ldr	r2, [r7, #0]
 800dec8:	b2d2      	uxtb	r2, r2
 800deca:	701a      	strb	r2, [r3, #0]
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	0a1b      	lsrs	r3, r3, #8
 800ded0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	1c5a      	adds	r2, r3, #1
 800ded6:	607a      	str	r2, [r7, #4]
 800ded8:	683a      	ldr	r2, [r7, #0]
 800deda:	b2d2      	uxtb	r2, r2
 800dedc:	701a      	strb	r2, [r3, #0]
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	0a1b      	lsrs	r3, r3, #8
 800dee2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	1c5a      	adds	r2, r3, #1
 800dee8:	607a      	str	r2, [r7, #4]
 800deea:	683a      	ldr	r2, [r7, #0]
 800deec:	b2d2      	uxtb	r2, r2
 800deee:	701a      	strb	r2, [r3, #0]
}
 800def0:	bf00      	nop
 800def2:	370c      	adds	r7, #12
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800defc:	b480      	push	{r7}
 800defe:	b087      	sub	sp, #28
 800df00:	af00      	add	r7, sp, #0
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	60b9      	str	r1, [r7, #8]
 800df06:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00d      	beq.n	800df32 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800df16:	693a      	ldr	r2, [r7, #16]
 800df18:	1c53      	adds	r3, r2, #1
 800df1a:	613b      	str	r3, [r7, #16]
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	1c59      	adds	r1, r3, #1
 800df20:	6179      	str	r1, [r7, #20]
 800df22:	7812      	ldrb	r2, [r2, #0]
 800df24:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	3b01      	subs	r3, #1
 800df2a:	607b      	str	r3, [r7, #4]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d1f1      	bne.n	800df16 <mem_cpy+0x1a>
	}
}
 800df32:	bf00      	nop
 800df34:	371c      	adds	r7, #28
 800df36:	46bd      	mov	sp, r7
 800df38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3c:	4770      	bx	lr

0800df3e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800df3e:	b480      	push	{r7}
 800df40:	b087      	sub	sp, #28
 800df42:	af00      	add	r7, sp, #0
 800df44:	60f8      	str	r0, [r7, #12]
 800df46:	60b9      	str	r1, [r7, #8]
 800df48:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	1c5a      	adds	r2, r3, #1
 800df52:	617a      	str	r2, [r7, #20]
 800df54:	68ba      	ldr	r2, [r7, #8]
 800df56:	b2d2      	uxtb	r2, r2
 800df58:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	3b01      	subs	r3, #1
 800df5e:	607b      	str	r3, [r7, #4]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d1f3      	bne.n	800df4e <mem_set+0x10>
}
 800df66:	bf00      	nop
 800df68:	371c      	adds	r7, #28
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr

0800df72 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800df72:	b480      	push	{r7}
 800df74:	b089      	sub	sp, #36	; 0x24
 800df76:	af00      	add	r7, sp, #0
 800df78:	60f8      	str	r0, [r7, #12]
 800df7a:	60b9      	str	r1, [r7, #8]
 800df7c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	61fb      	str	r3, [r7, #28]
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800df86:	2300      	movs	r3, #0
 800df88:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800df8a:	69fb      	ldr	r3, [r7, #28]
 800df8c:	1c5a      	adds	r2, r3, #1
 800df8e:	61fa      	str	r2, [r7, #28]
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	4619      	mov	r1, r3
 800df94:	69bb      	ldr	r3, [r7, #24]
 800df96:	1c5a      	adds	r2, r3, #1
 800df98:	61ba      	str	r2, [r7, #24]
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	1acb      	subs	r3, r1, r3
 800df9e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	3b01      	subs	r3, #1
 800dfa4:	607b      	str	r3, [r7, #4]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d002      	beq.n	800dfb2 <mem_cmp+0x40>
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d0eb      	beq.n	800df8a <mem_cmp+0x18>

	return r;
 800dfb2:	697b      	ldr	r3, [r7, #20]
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3724      	adds	r7, #36	; 0x24
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbe:	4770      	bx	lr

0800dfc0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800dfc0:	b480      	push	{r7}
 800dfc2:	b083      	sub	sp, #12
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800dfca:	e002      	b.n	800dfd2 <chk_chr+0x12>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	3301      	adds	r3, #1
 800dfd0:	607b      	str	r3, [r7, #4]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d005      	beq.n	800dfe6 <chk_chr+0x26>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	461a      	mov	r2, r3
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d1f2      	bne.n	800dfcc <chk_chr+0xc>
	return *str;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	781b      	ldrb	r3, [r3, #0]
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	370c      	adds	r7, #12
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr
	...

0800dff8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b085      	sub	sp, #20
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e002:	2300      	movs	r3, #0
 800e004:	60bb      	str	r3, [r7, #8]
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	60fb      	str	r3, [r7, #12]
 800e00a:	e029      	b.n	800e060 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e00c:	4a27      	ldr	r2, [pc, #156]	; (800e0ac <chk_lock+0xb4>)
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	011b      	lsls	r3, r3, #4
 800e012:	4413      	add	r3, r2
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d01d      	beq.n	800e056 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e01a:	4a24      	ldr	r2, [pc, #144]	; (800e0ac <chk_lock+0xb4>)
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	011b      	lsls	r3, r3, #4
 800e020:	4413      	add	r3, r2
 800e022:	681a      	ldr	r2, [r3, #0]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	429a      	cmp	r2, r3
 800e02a:	d116      	bne.n	800e05a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e02c:	4a1f      	ldr	r2, [pc, #124]	; (800e0ac <chk_lock+0xb4>)
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	011b      	lsls	r3, r3, #4
 800e032:	4413      	add	r3, r2
 800e034:	3304      	adds	r3, #4
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e03c:	429a      	cmp	r2, r3
 800e03e:	d10c      	bne.n	800e05a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e040:	4a1a      	ldr	r2, [pc, #104]	; (800e0ac <chk_lock+0xb4>)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	011b      	lsls	r3, r3, #4
 800e046:	4413      	add	r3, r2
 800e048:	3308      	adds	r3, #8
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e050:	429a      	cmp	r2, r3
 800e052:	d102      	bne.n	800e05a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e054:	e007      	b.n	800e066 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e056:	2301      	movs	r3, #1
 800e058:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	3301      	adds	r3, #1
 800e05e:	60fb      	str	r3, [r7, #12]
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2b01      	cmp	r3, #1
 800e064:	d9d2      	bls.n	800e00c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	2b02      	cmp	r3, #2
 800e06a:	d109      	bne.n	800e080 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d102      	bne.n	800e078 <chk_lock+0x80>
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	2b02      	cmp	r3, #2
 800e076:	d101      	bne.n	800e07c <chk_lock+0x84>
 800e078:	2300      	movs	r3, #0
 800e07a:	e010      	b.n	800e09e <chk_lock+0xa6>
 800e07c:	2312      	movs	r3, #18
 800e07e:	e00e      	b.n	800e09e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d108      	bne.n	800e098 <chk_lock+0xa0>
 800e086:	4a09      	ldr	r2, [pc, #36]	; (800e0ac <chk_lock+0xb4>)
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	011b      	lsls	r3, r3, #4
 800e08c:	4413      	add	r3, r2
 800e08e:	330c      	adds	r3, #12
 800e090:	881b      	ldrh	r3, [r3, #0]
 800e092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e096:	d101      	bne.n	800e09c <chk_lock+0xa4>
 800e098:	2310      	movs	r3, #16
 800e09a:	e000      	b.n	800e09e <chk_lock+0xa6>
 800e09c:	2300      	movs	r3, #0
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3714      	adds	r7, #20
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a8:	4770      	bx	lr
 800e0aa:	bf00      	nop
 800e0ac:	20036a50 	.word	0x20036a50

0800e0b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b083      	sub	sp, #12
 800e0b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	607b      	str	r3, [r7, #4]
 800e0ba:	e002      	b.n	800e0c2 <enq_lock+0x12>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	3301      	adds	r3, #1
 800e0c0:	607b      	str	r3, [r7, #4]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d806      	bhi.n	800e0d6 <enq_lock+0x26>
 800e0c8:	4a09      	ldr	r2, [pc, #36]	; (800e0f0 <enq_lock+0x40>)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	011b      	lsls	r3, r3, #4
 800e0ce:	4413      	add	r3, r2
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d1f2      	bne.n	800e0bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2b02      	cmp	r3, #2
 800e0da:	bf14      	ite	ne
 800e0dc:	2301      	movne	r3, #1
 800e0de:	2300      	moveq	r3, #0
 800e0e0:	b2db      	uxtb	r3, r3
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	370c      	adds	r7, #12
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr
 800e0ee:	bf00      	nop
 800e0f0:	20036a50 	.word	0x20036a50

0800e0f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b085      	sub	sp, #20
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e0fe:	2300      	movs	r3, #0
 800e100:	60fb      	str	r3, [r7, #12]
 800e102:	e01f      	b.n	800e144 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e104:	4a41      	ldr	r2, [pc, #260]	; (800e20c <inc_lock+0x118>)
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	011b      	lsls	r3, r3, #4
 800e10a:	4413      	add	r3, r2
 800e10c:	681a      	ldr	r2, [r3, #0]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	429a      	cmp	r2, r3
 800e114:	d113      	bne.n	800e13e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e116:	4a3d      	ldr	r2, [pc, #244]	; (800e20c <inc_lock+0x118>)
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	011b      	lsls	r3, r3, #4
 800e11c:	4413      	add	r3, r2
 800e11e:	3304      	adds	r3, #4
 800e120:	681a      	ldr	r2, [r3, #0]
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e126:	429a      	cmp	r2, r3
 800e128:	d109      	bne.n	800e13e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e12a:	4a38      	ldr	r2, [pc, #224]	; (800e20c <inc_lock+0x118>)
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	011b      	lsls	r3, r3, #4
 800e130:	4413      	add	r3, r2
 800e132:	3308      	adds	r3, #8
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d006      	beq.n	800e14c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	3301      	adds	r3, #1
 800e142:	60fb      	str	r3, [r7, #12]
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	2b01      	cmp	r3, #1
 800e148:	d9dc      	bls.n	800e104 <inc_lock+0x10>
 800e14a:	e000      	b.n	800e14e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e14c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	2b02      	cmp	r3, #2
 800e152:	d132      	bne.n	800e1ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e154:	2300      	movs	r3, #0
 800e156:	60fb      	str	r3, [r7, #12]
 800e158:	e002      	b.n	800e160 <inc_lock+0x6c>
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	3301      	adds	r3, #1
 800e15e:	60fb      	str	r3, [r7, #12]
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2b01      	cmp	r3, #1
 800e164:	d806      	bhi.n	800e174 <inc_lock+0x80>
 800e166:	4a29      	ldr	r2, [pc, #164]	; (800e20c <inc_lock+0x118>)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	011b      	lsls	r3, r3, #4
 800e16c:	4413      	add	r3, r2
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d1f2      	bne.n	800e15a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2b02      	cmp	r3, #2
 800e178:	d101      	bne.n	800e17e <inc_lock+0x8a>
 800e17a:	2300      	movs	r3, #0
 800e17c:	e040      	b.n	800e200 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681a      	ldr	r2, [r3, #0]
 800e182:	4922      	ldr	r1, [pc, #136]	; (800e20c <inc_lock+0x118>)
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	011b      	lsls	r3, r3, #4
 800e188:	440b      	add	r3, r1
 800e18a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	689a      	ldr	r2, [r3, #8]
 800e190:	491e      	ldr	r1, [pc, #120]	; (800e20c <inc_lock+0x118>)
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	011b      	lsls	r3, r3, #4
 800e196:	440b      	add	r3, r1
 800e198:	3304      	adds	r3, #4
 800e19a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	695a      	ldr	r2, [r3, #20]
 800e1a0:	491a      	ldr	r1, [pc, #104]	; (800e20c <inc_lock+0x118>)
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	011b      	lsls	r3, r3, #4
 800e1a6:	440b      	add	r3, r1
 800e1a8:	3308      	adds	r3, #8
 800e1aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e1ac:	4a17      	ldr	r2, [pc, #92]	; (800e20c <inc_lock+0x118>)
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	011b      	lsls	r3, r3, #4
 800e1b2:	4413      	add	r3, r2
 800e1b4:	330c      	adds	r3, #12
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d009      	beq.n	800e1d4 <inc_lock+0xe0>
 800e1c0:	4a12      	ldr	r2, [pc, #72]	; (800e20c <inc_lock+0x118>)
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	011b      	lsls	r3, r3, #4
 800e1c6:	4413      	add	r3, r2
 800e1c8:	330c      	adds	r3, #12
 800e1ca:	881b      	ldrh	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d001      	beq.n	800e1d4 <inc_lock+0xe0>
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	e015      	b.n	800e200 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d108      	bne.n	800e1ec <inc_lock+0xf8>
 800e1da:	4a0c      	ldr	r2, [pc, #48]	; (800e20c <inc_lock+0x118>)
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	011b      	lsls	r3, r3, #4
 800e1e0:	4413      	add	r3, r2
 800e1e2:	330c      	adds	r3, #12
 800e1e4:	881b      	ldrh	r3, [r3, #0]
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	b29a      	uxth	r2, r3
 800e1ea:	e001      	b.n	800e1f0 <inc_lock+0xfc>
 800e1ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e1f0:	4906      	ldr	r1, [pc, #24]	; (800e20c <inc_lock+0x118>)
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	011b      	lsls	r3, r3, #4
 800e1f6:	440b      	add	r3, r1
 800e1f8:	330c      	adds	r3, #12
 800e1fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	3301      	adds	r3, #1
}
 800e200:	4618      	mov	r0, r3
 800e202:	3714      	adds	r7, #20
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr
 800e20c:	20036a50 	.word	0x20036a50

0800e210 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e210:	b480      	push	{r7}
 800e212:	b085      	sub	sp, #20
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	3b01      	subs	r3, #1
 800e21c:	607b      	str	r3, [r7, #4]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2b01      	cmp	r3, #1
 800e222:	d825      	bhi.n	800e270 <dec_lock+0x60>
		n = Files[i].ctr;
 800e224:	4a17      	ldr	r2, [pc, #92]	; (800e284 <dec_lock+0x74>)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	011b      	lsls	r3, r3, #4
 800e22a:	4413      	add	r3, r2
 800e22c:	330c      	adds	r3, #12
 800e22e:	881b      	ldrh	r3, [r3, #0]
 800e230:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e232:	89fb      	ldrh	r3, [r7, #14]
 800e234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e238:	d101      	bne.n	800e23e <dec_lock+0x2e>
 800e23a:	2300      	movs	r3, #0
 800e23c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e23e:	89fb      	ldrh	r3, [r7, #14]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d002      	beq.n	800e24a <dec_lock+0x3a>
 800e244:	89fb      	ldrh	r3, [r7, #14]
 800e246:	3b01      	subs	r3, #1
 800e248:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e24a:	4a0e      	ldr	r2, [pc, #56]	; (800e284 <dec_lock+0x74>)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	011b      	lsls	r3, r3, #4
 800e250:	4413      	add	r3, r2
 800e252:	330c      	adds	r3, #12
 800e254:	89fa      	ldrh	r2, [r7, #14]
 800e256:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e258:	89fb      	ldrh	r3, [r7, #14]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d105      	bne.n	800e26a <dec_lock+0x5a>
 800e25e:	4a09      	ldr	r2, [pc, #36]	; (800e284 <dec_lock+0x74>)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	011b      	lsls	r3, r3, #4
 800e264:	4413      	add	r3, r2
 800e266:	2200      	movs	r2, #0
 800e268:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e26a:	2300      	movs	r3, #0
 800e26c:	737b      	strb	r3, [r7, #13]
 800e26e:	e001      	b.n	800e274 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e270:	2302      	movs	r3, #2
 800e272:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e274:	7b7b      	ldrb	r3, [r7, #13]
}
 800e276:	4618      	mov	r0, r3
 800e278:	3714      	adds	r7, #20
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr
 800e282:	bf00      	nop
 800e284:	20036a50 	.word	0x20036a50

0800e288 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e288:	b480      	push	{r7}
 800e28a:	b085      	sub	sp, #20
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e290:	2300      	movs	r3, #0
 800e292:	60fb      	str	r3, [r7, #12]
 800e294:	e010      	b.n	800e2b8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e296:	4a0d      	ldr	r2, [pc, #52]	; (800e2cc <clear_lock+0x44>)
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	011b      	lsls	r3, r3, #4
 800e29c:	4413      	add	r3, r2
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	687a      	ldr	r2, [r7, #4]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d105      	bne.n	800e2b2 <clear_lock+0x2a>
 800e2a6:	4a09      	ldr	r2, [pc, #36]	; (800e2cc <clear_lock+0x44>)
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	011b      	lsls	r3, r3, #4
 800e2ac:	4413      	add	r3, r2
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	60fb      	str	r3, [r7, #12]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2b01      	cmp	r3, #1
 800e2bc:	d9eb      	bls.n	800e296 <clear_lock+0xe>
	}
}
 800e2be:	bf00      	nop
 800e2c0:	3714      	adds	r7, #20
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop
 800e2cc:	20036a50 	.word	0x20036a50

0800e2d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b086      	sub	sp, #24
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e2d8:	2300      	movs	r3, #0
 800e2da:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	78db      	ldrb	r3, [r3, #3]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d034      	beq.n	800e34e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2e8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	7858      	ldrb	r0, [r3, #1]
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	697a      	ldr	r2, [r7, #20]
 800e2f8:	f7ff fd40 	bl	800dd7c <disk_write>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d002      	beq.n	800e308 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e302:	2301      	movs	r3, #1
 800e304:	73fb      	strb	r3, [r7, #15]
 800e306:	e022      	b.n	800e34e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2200      	movs	r2, #0
 800e30c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e312:	697a      	ldr	r2, [r7, #20]
 800e314:	1ad2      	subs	r2, r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d217      	bcs.n	800e34e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	789b      	ldrb	r3, [r3, #2]
 800e322:	613b      	str	r3, [r7, #16]
 800e324:	e010      	b.n	800e348 <sync_window+0x78>
					wsect += fs->fsize;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e32a:	697a      	ldr	r2, [r7, #20]
 800e32c:	4413      	add	r3, r2
 800e32e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	7858      	ldrb	r0, [r3, #1]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e33a:	2301      	movs	r3, #1
 800e33c:	697a      	ldr	r2, [r7, #20]
 800e33e:	f7ff fd1d 	bl	800dd7c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e342:	693b      	ldr	r3, [r7, #16]
 800e344:	3b01      	subs	r3, #1
 800e346:	613b      	str	r3, [r7, #16]
 800e348:	693b      	ldr	r3, [r7, #16]
 800e34a:	2b01      	cmp	r3, #1
 800e34c:	d8eb      	bhi.n	800e326 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e34e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e350:	4618      	mov	r0, r3
 800e352:	3718      	adds	r7, #24
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b084      	sub	sp, #16
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e362:	2300      	movs	r3, #0
 800e364:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e36a:	683a      	ldr	r2, [r7, #0]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d01b      	beq.n	800e3a8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f7ff ffad 	bl	800e2d0 <sync_window>
 800e376:	4603      	mov	r3, r0
 800e378:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e37a:	7bfb      	ldrb	r3, [r7, #15]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d113      	bne.n	800e3a8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	7858      	ldrb	r0, [r3, #1]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e38a:	2301      	movs	r3, #1
 800e38c:	683a      	ldr	r2, [r7, #0]
 800e38e:	f7ff fcd5 	bl	800dd3c <disk_read>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	d004      	beq.n	800e3a2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e398:	f04f 33ff 	mov.w	r3, #4294967295
 800e39c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	683a      	ldr	r2, [r7, #0]
 800e3a6:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800e3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3710      	adds	r7, #16
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
	...

0800e3b4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e3bc:	6878      	ldr	r0, [r7, #4]
 800e3be:	f7ff ff87 	bl	800e2d0 <sync_window>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e3c6:	7bfb      	ldrb	r3, [r7, #15]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d159      	bne.n	800e480 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	2b03      	cmp	r3, #3
 800e3d2:	d149      	bne.n	800e468 <sync_fs+0xb4>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	791b      	ldrb	r3, [r3, #4]
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	d145      	bne.n	800e468 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	899b      	ldrh	r3, [r3, #12]
 800e3e6:	461a      	mov	r2, r3
 800e3e8:	2100      	movs	r1, #0
 800e3ea:	f7ff fda8 	bl	800df3e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	333c      	adds	r3, #60	; 0x3c
 800e3f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e3f6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7ff fd37 	bl	800de6e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	333c      	adds	r3, #60	; 0x3c
 800e404:	4921      	ldr	r1, [pc, #132]	; (800e48c <sync_fs+0xd8>)
 800e406:	4618      	mov	r0, r3
 800e408:	f7ff fd4c 	bl	800dea4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	333c      	adds	r3, #60	; 0x3c
 800e410:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e414:	491e      	ldr	r1, [pc, #120]	; (800e490 <sync_fs+0xdc>)
 800e416:	4618      	mov	r0, r3
 800e418:	f7ff fd44 	bl	800dea4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	333c      	adds	r3, #60	; 0x3c
 800e420:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	699b      	ldr	r3, [r3, #24]
 800e428:	4619      	mov	r1, r3
 800e42a:	4610      	mov	r0, r2
 800e42c:	f7ff fd3a 	bl	800dea4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	333c      	adds	r3, #60	; 0x3c
 800e434:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	695b      	ldr	r3, [r3, #20]
 800e43c:	4619      	mov	r1, r3
 800e43e:	4610      	mov	r0, r2
 800e440:	f7ff fd30 	bl	800dea4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e448:	1c5a      	adds	r2, r3, #1
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	7858      	ldrb	r0, [r3, #1]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e45c:	2301      	movs	r3, #1
 800e45e:	f7ff fc8d 	bl	800dd7c <disk_write>
			fs->fsi_flag = 0;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2200      	movs	r2, #0
 800e466:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	785b      	ldrb	r3, [r3, #1]
 800e46c:	2200      	movs	r2, #0
 800e46e:	2100      	movs	r1, #0
 800e470:	4618      	mov	r0, r3
 800e472:	f7ff fca3 	bl	800ddbc <disk_ioctl>
 800e476:	4603      	mov	r3, r0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d001      	beq.n	800e480 <sync_fs+0xcc>
 800e47c:	2301      	movs	r3, #1
 800e47e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e480:	7bfb      	ldrb	r3, [r7, #15]
}
 800e482:	4618      	mov	r0, r3
 800e484:	3710      	adds	r7, #16
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	41615252 	.word	0x41615252
 800e490:	61417272 	.word	0x61417272

0800e494 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e494:	b480      	push	{r7}
 800e496:	b083      	sub	sp, #12
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	3b02      	subs	r3, #2
 800e4a2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6a1b      	ldr	r3, [r3, #32]
 800e4a8:	3b02      	subs	r3, #2
 800e4aa:	683a      	ldr	r2, [r7, #0]
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d301      	bcc.n	800e4b4 <clust2sect+0x20>
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	e008      	b.n	800e4c6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	895b      	ldrh	r3, [r3, #10]
 800e4b8:	461a      	mov	r2, r3
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	fb03 f202 	mul.w	r2, r3, r2
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4c4:	4413      	add	r3, r2
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	370c      	adds	r7, #12
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr

0800e4d2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e4d2:	b580      	push	{r7, lr}
 800e4d4:	b086      	sub	sp, #24
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
 800e4da:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	2b01      	cmp	r3, #1
 800e4e6:	d904      	bls.n	800e4f2 <get_fat+0x20>
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	6a1b      	ldr	r3, [r3, #32]
 800e4ec:	683a      	ldr	r2, [r7, #0]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d302      	bcc.n	800e4f8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	617b      	str	r3, [r7, #20]
 800e4f6:	e0b7      	b.n	800e668 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e4fc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e4fe:	693b      	ldr	r3, [r7, #16]
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	2b02      	cmp	r3, #2
 800e504:	d05a      	beq.n	800e5bc <get_fat+0xea>
 800e506:	2b03      	cmp	r3, #3
 800e508:	d07d      	beq.n	800e606 <get_fat+0x134>
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	f040 80a2 	bne.w	800e654 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	60fb      	str	r3, [r7, #12]
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	085b      	lsrs	r3, r3, #1
 800e518:	68fa      	ldr	r2, [r7, #12]
 800e51a:	4413      	add	r3, r2
 800e51c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e51e:	693b      	ldr	r3, [r7, #16]
 800e520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	899b      	ldrh	r3, [r3, #12]
 800e526:	4619      	mov	r1, r3
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e52e:	4413      	add	r3, r2
 800e530:	4619      	mov	r1, r3
 800e532:	6938      	ldr	r0, [r7, #16]
 800e534:	f7ff ff10 	bl	800e358 <move_window>
 800e538:	4603      	mov	r3, r0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f040 808d 	bne.w	800e65a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	1c5a      	adds	r2, r3, #1
 800e544:	60fa      	str	r2, [r7, #12]
 800e546:	693a      	ldr	r2, [r7, #16]
 800e548:	8992      	ldrh	r2, [r2, #12]
 800e54a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e54e:	fb02 f201 	mul.w	r2, r2, r1
 800e552:	1a9b      	subs	r3, r3, r2
 800e554:	693a      	ldr	r2, [r7, #16]
 800e556:	4413      	add	r3, r2
 800e558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e55c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e55e:	693b      	ldr	r3, [r7, #16]
 800e560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	899b      	ldrh	r3, [r3, #12]
 800e566:	4619      	mov	r1, r3
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e56e:	4413      	add	r3, r2
 800e570:	4619      	mov	r1, r3
 800e572:	6938      	ldr	r0, [r7, #16]
 800e574:	f7ff fef0 	bl	800e358 <move_window>
 800e578:	4603      	mov	r3, r0
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d16f      	bne.n	800e65e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	899b      	ldrh	r3, [r3, #12]
 800e582:	461a      	mov	r2, r3
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	fbb3 f1f2 	udiv	r1, r3, r2
 800e58a:	fb02 f201 	mul.w	r2, r2, r1
 800e58e:	1a9b      	subs	r3, r3, r2
 800e590:	693a      	ldr	r2, [r7, #16]
 800e592:	4413      	add	r3, r2
 800e594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e598:	021b      	lsls	r3, r3, #8
 800e59a:	461a      	mov	r2, r3
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	4313      	orrs	r3, r2
 800e5a0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	f003 0301 	and.w	r3, r3, #1
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d002      	beq.n	800e5b2 <get_fat+0xe0>
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	091b      	lsrs	r3, r3, #4
 800e5b0:	e002      	b.n	800e5b8 <get_fat+0xe6>
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e5b8:	617b      	str	r3, [r7, #20]
			break;
 800e5ba:	e055      	b.n	800e668 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	899b      	ldrh	r3, [r3, #12]
 800e5c4:	085b      	lsrs	r3, r3, #1
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	fbb3 f3f1 	udiv	r3, r3, r1
 800e5d0:	4413      	add	r3, r2
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	6938      	ldr	r0, [r7, #16]
 800e5d6:	f7ff febf 	bl	800e358 <move_window>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d140      	bne.n	800e662 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	005b      	lsls	r3, r3, #1
 800e5ea:	693a      	ldr	r2, [r7, #16]
 800e5ec:	8992      	ldrh	r2, [r2, #12]
 800e5ee:	fbb3 f0f2 	udiv	r0, r3, r2
 800e5f2:	fb02 f200 	mul.w	r2, r2, r0
 800e5f6:	1a9b      	subs	r3, r3, r2
 800e5f8:	440b      	add	r3, r1
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7ff fbfc 	bl	800ddf8 <ld_word>
 800e600:	4603      	mov	r3, r0
 800e602:	617b      	str	r3, [r7, #20]
			break;
 800e604:	e030      	b.n	800e668 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	899b      	ldrh	r3, [r3, #12]
 800e60e:	089b      	lsrs	r3, r3, #2
 800e610:	b29b      	uxth	r3, r3
 800e612:	4619      	mov	r1, r3
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	fbb3 f3f1 	udiv	r3, r3, r1
 800e61a:	4413      	add	r3, r2
 800e61c:	4619      	mov	r1, r3
 800e61e:	6938      	ldr	r0, [r7, #16]
 800e620:	f7ff fe9a 	bl	800e358 <move_window>
 800e624:	4603      	mov	r3, r0
 800e626:	2b00      	cmp	r3, #0
 800e628:	d11d      	bne.n	800e666 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	693a      	ldr	r2, [r7, #16]
 800e636:	8992      	ldrh	r2, [r2, #12]
 800e638:	fbb3 f0f2 	udiv	r0, r3, r2
 800e63c:	fb02 f200 	mul.w	r2, r2, r0
 800e640:	1a9b      	subs	r3, r3, r2
 800e642:	440b      	add	r3, r1
 800e644:	4618      	mov	r0, r3
 800e646:	f7ff fbef 	bl	800de28 <ld_dword>
 800e64a:	4603      	mov	r3, r0
 800e64c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e650:	617b      	str	r3, [r7, #20]
			break;
 800e652:	e009      	b.n	800e668 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e654:	2301      	movs	r3, #1
 800e656:	617b      	str	r3, [r7, #20]
 800e658:	e006      	b.n	800e668 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e65a:	bf00      	nop
 800e65c:	e004      	b.n	800e668 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e65e:	bf00      	nop
 800e660:	e002      	b.n	800e668 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e662:	bf00      	nop
 800e664:	e000      	b.n	800e668 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e666:	bf00      	nop
		}
	}

	return val;
 800e668:	697b      	ldr	r3, [r7, #20]
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3718      	adds	r7, #24
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}

0800e672 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e672:	b590      	push	{r4, r7, lr}
 800e674:	b089      	sub	sp, #36	; 0x24
 800e676:	af00      	add	r7, sp, #0
 800e678:	60f8      	str	r0, [r7, #12]
 800e67a:	60b9      	str	r1, [r7, #8]
 800e67c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e67e:	2302      	movs	r3, #2
 800e680:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e682:	68bb      	ldr	r3, [r7, #8]
 800e684:	2b01      	cmp	r3, #1
 800e686:	f240 8106 	bls.w	800e896 <put_fat+0x224>
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	6a1b      	ldr	r3, [r3, #32]
 800e68e:	68ba      	ldr	r2, [r7, #8]
 800e690:	429a      	cmp	r2, r3
 800e692:	f080 8100 	bcs.w	800e896 <put_fat+0x224>
		switch (fs->fs_type) {
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	2b02      	cmp	r3, #2
 800e69c:	f000 8088 	beq.w	800e7b0 <put_fat+0x13e>
 800e6a0:	2b03      	cmp	r3, #3
 800e6a2:	f000 80b0 	beq.w	800e806 <put_fat+0x194>
 800e6a6:	2b01      	cmp	r3, #1
 800e6a8:	f040 80f5 	bne.w	800e896 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	61bb      	str	r3, [r7, #24]
 800e6b0:	69bb      	ldr	r3, [r7, #24]
 800e6b2:	085b      	lsrs	r3, r3, #1
 800e6b4:	69ba      	ldr	r2, [r7, #24]
 800e6b6:	4413      	add	r3, r2
 800e6b8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	899b      	ldrh	r3, [r3, #12]
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	69bb      	ldr	r3, [r7, #24]
 800e6c6:	fbb3 f3f1 	udiv	r3, r3, r1
 800e6ca:	4413      	add	r3, r2
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	68f8      	ldr	r0, [r7, #12]
 800e6d0:	f7ff fe42 	bl	800e358 <move_window>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e6d8:	7ffb      	ldrb	r3, [r7, #31]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f040 80d4 	bne.w	800e888 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	1c5a      	adds	r2, r3, #1
 800e6ea:	61ba      	str	r2, [r7, #24]
 800e6ec:	68fa      	ldr	r2, [r7, #12]
 800e6ee:	8992      	ldrh	r2, [r2, #12]
 800e6f0:	fbb3 f0f2 	udiv	r0, r3, r2
 800e6f4:	fb02 f200 	mul.w	r2, r2, r0
 800e6f8:	1a9b      	subs	r3, r3, r2
 800e6fa:	440b      	add	r3, r1
 800e6fc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	f003 0301 	and.w	r3, r3, #1
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00d      	beq.n	800e724 <put_fat+0xb2>
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	b25b      	sxtb	r3, r3
 800e70e:	f003 030f 	and.w	r3, r3, #15
 800e712:	b25a      	sxtb	r2, r3
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	b2db      	uxtb	r3, r3
 800e718:	011b      	lsls	r3, r3, #4
 800e71a:	b25b      	sxtb	r3, r3
 800e71c:	4313      	orrs	r3, r2
 800e71e:	b25b      	sxtb	r3, r3
 800e720:	b2db      	uxtb	r3, r3
 800e722:	e001      	b.n	800e728 <put_fat+0xb6>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	b2db      	uxtb	r3, r3
 800e728:	697a      	ldr	r2, [r7, #20]
 800e72a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2201      	movs	r2, #1
 800e730:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	899b      	ldrh	r3, [r3, #12]
 800e73a:	4619      	mov	r1, r3
 800e73c:	69bb      	ldr	r3, [r7, #24]
 800e73e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e742:	4413      	add	r3, r2
 800e744:	4619      	mov	r1, r3
 800e746:	68f8      	ldr	r0, [r7, #12]
 800e748:	f7ff fe06 	bl	800e358 <move_window>
 800e74c:	4603      	mov	r3, r0
 800e74e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e750:	7ffb      	ldrb	r3, [r7, #31]
 800e752:	2b00      	cmp	r3, #0
 800e754:	f040 809a 	bne.w	800e88c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	899b      	ldrh	r3, [r3, #12]
 800e762:	461a      	mov	r2, r3
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	fbb3 f0f2 	udiv	r0, r3, r2
 800e76a:	fb02 f200 	mul.w	r2, r2, r0
 800e76e:	1a9b      	subs	r3, r3, r2
 800e770:	440b      	add	r3, r1
 800e772:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	f003 0301 	and.w	r3, r3, #1
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d003      	beq.n	800e786 <put_fat+0x114>
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	091b      	lsrs	r3, r3, #4
 800e782:	b2db      	uxtb	r3, r3
 800e784:	e00e      	b.n	800e7a4 <put_fat+0x132>
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	b25b      	sxtb	r3, r3
 800e78c:	f023 030f 	bic.w	r3, r3, #15
 800e790:	b25a      	sxtb	r2, r3
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	0a1b      	lsrs	r3, r3, #8
 800e796:	b25b      	sxtb	r3, r3
 800e798:	f003 030f 	and.w	r3, r3, #15
 800e79c:	b25b      	sxtb	r3, r3
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	b25b      	sxtb	r3, r3
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	697a      	ldr	r2, [r7, #20]
 800e7a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	70da      	strb	r2, [r3, #3]
			break;
 800e7ae:	e072      	b.n	800e896 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	899b      	ldrh	r3, [r3, #12]
 800e7b8:	085b      	lsrs	r3, r3, #1
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	4619      	mov	r1, r3
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	fbb3 f3f1 	udiv	r3, r3, r1
 800e7c4:	4413      	add	r3, r2
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	68f8      	ldr	r0, [r7, #12]
 800e7ca:	f7ff fdc5 	bl	800e358 <move_window>
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e7d2:	7ffb      	ldrb	r3, [r7, #31]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d15b      	bne.n	800e890 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e7de:	68bb      	ldr	r3, [r7, #8]
 800e7e0:	005b      	lsls	r3, r3, #1
 800e7e2:	68fa      	ldr	r2, [r7, #12]
 800e7e4:	8992      	ldrh	r2, [r2, #12]
 800e7e6:	fbb3 f0f2 	udiv	r0, r3, r2
 800e7ea:	fb02 f200 	mul.w	r2, r2, r0
 800e7ee:	1a9b      	subs	r3, r3, r2
 800e7f0:	440b      	add	r3, r1
 800e7f2:	687a      	ldr	r2, [r7, #4]
 800e7f4:	b292      	uxth	r2, r2
 800e7f6:	4611      	mov	r1, r2
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7ff fb38 	bl	800de6e <st_word>
			fs->wflag = 1;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	2201      	movs	r2, #1
 800e802:	70da      	strb	r2, [r3, #3]
			break;
 800e804:	e047      	b.n	800e896 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	899b      	ldrh	r3, [r3, #12]
 800e80e:	089b      	lsrs	r3, r3, #2
 800e810:	b29b      	uxth	r3, r3
 800e812:	4619      	mov	r1, r3
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	fbb3 f3f1 	udiv	r3, r3, r1
 800e81a:	4413      	add	r3, r2
 800e81c:	4619      	mov	r1, r3
 800e81e:	68f8      	ldr	r0, [r7, #12]
 800e820:	f7ff fd9a 	bl	800e358 <move_window>
 800e824:	4603      	mov	r3, r0
 800e826:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e828:	7ffb      	ldrb	r3, [r7, #31]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d132      	bne.n	800e894 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	68fa      	ldr	r2, [r7, #12]
 800e840:	8992      	ldrh	r2, [r2, #12]
 800e842:	fbb3 f0f2 	udiv	r0, r3, r2
 800e846:	fb02 f200 	mul.w	r2, r2, r0
 800e84a:	1a9b      	subs	r3, r3, r2
 800e84c:	440b      	add	r3, r1
 800e84e:	4618      	mov	r0, r3
 800e850:	f7ff faea 	bl	800de28 <ld_dword>
 800e854:	4603      	mov	r3, r0
 800e856:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e85a:	4323      	orrs	r3, r4
 800e85c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	009b      	lsls	r3, r3, #2
 800e868:	68fa      	ldr	r2, [r7, #12]
 800e86a:	8992      	ldrh	r2, [r2, #12]
 800e86c:	fbb3 f0f2 	udiv	r0, r3, r2
 800e870:	fb02 f200 	mul.w	r2, r2, r0
 800e874:	1a9b      	subs	r3, r3, r2
 800e876:	440b      	add	r3, r1
 800e878:	6879      	ldr	r1, [r7, #4]
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7ff fb12 	bl	800dea4 <st_dword>
			fs->wflag = 1;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	2201      	movs	r2, #1
 800e884:	70da      	strb	r2, [r3, #3]
			break;
 800e886:	e006      	b.n	800e896 <put_fat+0x224>
			if (res != FR_OK) break;
 800e888:	bf00      	nop
 800e88a:	e004      	b.n	800e896 <put_fat+0x224>
			if (res != FR_OK) break;
 800e88c:	bf00      	nop
 800e88e:	e002      	b.n	800e896 <put_fat+0x224>
			if (res != FR_OK) break;
 800e890:	bf00      	nop
 800e892:	e000      	b.n	800e896 <put_fat+0x224>
			if (res != FR_OK) break;
 800e894:	bf00      	nop
		}
	}
	return res;
 800e896:	7ffb      	ldrb	r3, [r7, #31]
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3724      	adds	r7, #36	; 0x24
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd90      	pop	{r4, r7, pc}

0800e8a0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b088      	sub	sp, #32
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	60f8      	str	r0, [r7, #12]
 800e8a8:	60b9      	str	r1, [r7, #8]
 800e8aa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	2b01      	cmp	r3, #1
 800e8ba:	d904      	bls.n	800e8c6 <remove_chain+0x26>
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	6a1b      	ldr	r3, [r3, #32]
 800e8c0:	68ba      	ldr	r2, [r7, #8]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d301      	bcc.n	800e8ca <remove_chain+0x2a>
 800e8c6:	2302      	movs	r3, #2
 800e8c8:	e04b      	b.n	800e962 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d00c      	beq.n	800e8ea <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e8d0:	f04f 32ff 	mov.w	r2, #4294967295
 800e8d4:	6879      	ldr	r1, [r7, #4]
 800e8d6:	69b8      	ldr	r0, [r7, #24]
 800e8d8:	f7ff fecb 	bl	800e672 <put_fat>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e8e0:	7ffb      	ldrb	r3, [r7, #31]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d001      	beq.n	800e8ea <remove_chain+0x4a>
 800e8e6:	7ffb      	ldrb	r3, [r7, #31]
 800e8e8:	e03b      	b.n	800e962 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e8ea:	68b9      	ldr	r1, [r7, #8]
 800e8ec:	68f8      	ldr	r0, [r7, #12]
 800e8ee:	f7ff fdf0 	bl	800e4d2 <get_fat>
 800e8f2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e8f4:	697b      	ldr	r3, [r7, #20]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d031      	beq.n	800e95e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	d101      	bne.n	800e904 <remove_chain+0x64>
 800e900:	2302      	movs	r3, #2
 800e902:	e02e      	b.n	800e962 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e90a:	d101      	bne.n	800e910 <remove_chain+0x70>
 800e90c:	2301      	movs	r3, #1
 800e90e:	e028      	b.n	800e962 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e910:	2200      	movs	r2, #0
 800e912:	68b9      	ldr	r1, [r7, #8]
 800e914:	69b8      	ldr	r0, [r7, #24]
 800e916:	f7ff feac 	bl	800e672 <put_fat>
 800e91a:	4603      	mov	r3, r0
 800e91c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e91e:	7ffb      	ldrb	r3, [r7, #31]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d001      	beq.n	800e928 <remove_chain+0x88>
 800e924:	7ffb      	ldrb	r3, [r7, #31]
 800e926:	e01c      	b.n	800e962 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e928:	69bb      	ldr	r3, [r7, #24]
 800e92a:	699a      	ldr	r2, [r3, #24]
 800e92c:	69bb      	ldr	r3, [r7, #24]
 800e92e:	6a1b      	ldr	r3, [r3, #32]
 800e930:	3b02      	subs	r3, #2
 800e932:	429a      	cmp	r2, r3
 800e934:	d20b      	bcs.n	800e94e <remove_chain+0xae>
			fs->free_clst++;
 800e936:	69bb      	ldr	r3, [r7, #24]
 800e938:	699b      	ldr	r3, [r3, #24]
 800e93a:	1c5a      	adds	r2, r3, #1
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800e940:	69bb      	ldr	r3, [r7, #24]
 800e942:	791b      	ldrb	r3, [r3, #4]
 800e944:	f043 0301 	orr.w	r3, r3, #1
 800e948:	b2da      	uxtb	r2, r3
 800e94a:	69bb      	ldr	r3, [r7, #24]
 800e94c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e952:	69bb      	ldr	r3, [r7, #24]
 800e954:	6a1b      	ldr	r3, [r3, #32]
 800e956:	68ba      	ldr	r2, [r7, #8]
 800e958:	429a      	cmp	r2, r3
 800e95a:	d3c6      	bcc.n	800e8ea <remove_chain+0x4a>
 800e95c:	e000      	b.n	800e960 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e95e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e960:	2300      	movs	r3, #0
}
 800e962:	4618      	mov	r0, r3
 800e964:	3720      	adds	r7, #32
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}

0800e96a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e96a:	b580      	push	{r7, lr}
 800e96c:	b088      	sub	sp, #32
 800e96e:	af00      	add	r7, sp, #0
 800e970:	6078      	str	r0, [r7, #4]
 800e972:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e97a:	683b      	ldr	r3, [r7, #0]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d10d      	bne.n	800e99c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e980:	693b      	ldr	r3, [r7, #16]
 800e982:	695b      	ldr	r3, [r3, #20]
 800e984:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e986:	69bb      	ldr	r3, [r7, #24]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d004      	beq.n	800e996 <create_chain+0x2c>
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	6a1b      	ldr	r3, [r3, #32]
 800e990:	69ba      	ldr	r2, [r7, #24]
 800e992:	429a      	cmp	r2, r3
 800e994:	d31b      	bcc.n	800e9ce <create_chain+0x64>
 800e996:	2301      	movs	r3, #1
 800e998:	61bb      	str	r3, [r7, #24]
 800e99a:	e018      	b.n	800e9ce <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e99c:	6839      	ldr	r1, [r7, #0]
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f7ff fd97 	bl	800e4d2 <get_fat>
 800e9a4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d801      	bhi.n	800e9b0 <create_chain+0x46>
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	e070      	b.n	800ea92 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9b6:	d101      	bne.n	800e9bc <create_chain+0x52>
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	e06a      	b.n	800ea92 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	6a1b      	ldr	r3, [r3, #32]
 800e9c0:	68fa      	ldr	r2, [r7, #12]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d201      	bcs.n	800e9ca <create_chain+0x60>
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	e063      	b.n	800ea92 <create_chain+0x128>
		scl = clst;
 800e9ca:	683b      	ldr	r3, [r7, #0]
 800e9cc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e9ce:	69bb      	ldr	r3, [r7, #24]
 800e9d0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e9d2:	69fb      	ldr	r3, [r7, #28]
 800e9d4:	3301      	adds	r3, #1
 800e9d6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	6a1b      	ldr	r3, [r3, #32]
 800e9dc:	69fa      	ldr	r2, [r7, #28]
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d307      	bcc.n	800e9f2 <create_chain+0x88>
				ncl = 2;
 800e9e2:	2302      	movs	r3, #2
 800e9e4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e9e6:	69fa      	ldr	r2, [r7, #28]
 800e9e8:	69bb      	ldr	r3, [r7, #24]
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	d901      	bls.n	800e9f2 <create_chain+0x88>
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	e04f      	b.n	800ea92 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e9f2:	69f9      	ldr	r1, [r7, #28]
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f7ff fd6c 	bl	800e4d2 <get_fat>
 800e9fa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00e      	beq.n	800ea20 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2b01      	cmp	r3, #1
 800ea06:	d003      	beq.n	800ea10 <create_chain+0xa6>
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea0e:	d101      	bne.n	800ea14 <create_chain+0xaa>
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	e03e      	b.n	800ea92 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ea14:	69fa      	ldr	r2, [r7, #28]
 800ea16:	69bb      	ldr	r3, [r7, #24]
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d1da      	bne.n	800e9d2 <create_chain+0x68>
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	e038      	b.n	800ea92 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ea20:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ea22:	f04f 32ff 	mov.w	r2, #4294967295
 800ea26:	69f9      	ldr	r1, [r7, #28]
 800ea28:	6938      	ldr	r0, [r7, #16]
 800ea2a:	f7ff fe22 	bl	800e672 <put_fat>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ea32:	7dfb      	ldrb	r3, [r7, #23]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d109      	bne.n	800ea4c <create_chain+0xe2>
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d006      	beq.n	800ea4c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ea3e:	69fa      	ldr	r2, [r7, #28]
 800ea40:	6839      	ldr	r1, [r7, #0]
 800ea42:	6938      	ldr	r0, [r7, #16]
 800ea44:	f7ff fe15 	bl	800e672 <put_fat>
 800ea48:	4603      	mov	r3, r0
 800ea4a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ea4c:	7dfb      	ldrb	r3, [r7, #23]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d116      	bne.n	800ea80 <create_chain+0x116>
		fs->last_clst = ncl;
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	69fa      	ldr	r2, [r7, #28]
 800ea56:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	699a      	ldr	r2, [r3, #24]
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	6a1b      	ldr	r3, [r3, #32]
 800ea60:	3b02      	subs	r3, #2
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d804      	bhi.n	800ea70 <create_chain+0x106>
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	699b      	ldr	r3, [r3, #24]
 800ea6a:	1e5a      	subs	r2, r3, #1
 800ea6c:	693b      	ldr	r3, [r7, #16]
 800ea6e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	791b      	ldrb	r3, [r3, #4]
 800ea74:	f043 0301 	orr.w	r3, r3, #1
 800ea78:	b2da      	uxtb	r2, r3
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	711a      	strb	r2, [r3, #4]
 800ea7e:	e007      	b.n	800ea90 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ea80:	7dfb      	ldrb	r3, [r7, #23]
 800ea82:	2b01      	cmp	r3, #1
 800ea84:	d102      	bne.n	800ea8c <create_chain+0x122>
 800ea86:	f04f 33ff 	mov.w	r3, #4294967295
 800ea8a:	e000      	b.n	800ea8e <create_chain+0x124>
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ea90:	69fb      	ldr	r3, [r7, #28]
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3720      	adds	r7, #32
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}

0800ea9a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ea9a:	b480      	push	{r7}
 800ea9c:	b087      	sub	sp, #28
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
 800eaa2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaae:	3304      	adds	r3, #4
 800eab0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	899b      	ldrh	r3, [r3, #12]
 800eab6:	461a      	mov	r2, r3
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	fbb3 f3f2 	udiv	r3, r3, r2
 800eabe:	68fa      	ldr	r2, [r7, #12]
 800eac0:	8952      	ldrh	r2, [r2, #10]
 800eac2:	fbb3 f3f2 	udiv	r3, r3, r2
 800eac6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	1d1a      	adds	r2, r3, #4
 800eacc:	613a      	str	r2, [r7, #16]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d101      	bne.n	800eadc <clmt_clust+0x42>
 800ead8:	2300      	movs	r3, #0
 800eada:	e010      	b.n	800eafe <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800eadc:	697a      	ldr	r2, [r7, #20]
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	429a      	cmp	r2, r3
 800eae2:	d307      	bcc.n	800eaf4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800eae4:	697a      	ldr	r2, [r7, #20]
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	1ad3      	subs	r3, r2, r3
 800eaea:	617b      	str	r3, [r7, #20]
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	3304      	adds	r3, #4
 800eaf0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eaf2:	e7e9      	b.n	800eac8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800eaf4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	4413      	add	r3, r2
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	371c      	adds	r7, #28
 800eb02:	46bd      	mov	sp, r7
 800eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb08:	4770      	bx	lr

0800eb0a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800eb0a:	b580      	push	{r7, lr}
 800eb0c:	b086      	sub	sp, #24
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
 800eb12:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eb20:	d204      	bcs.n	800eb2c <dir_sdi+0x22>
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	f003 031f 	and.w	r3, r3, #31
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d001      	beq.n	800eb30 <dir_sdi+0x26>
		return FR_INT_ERR;
 800eb2c:	2302      	movs	r3, #2
 800eb2e:	e071      	b.n	800ec14 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	683a      	ldr	r2, [r7, #0]
 800eb34:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	689b      	ldr	r3, [r3, #8]
 800eb3a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d106      	bne.n	800eb50 <dir_sdi+0x46>
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	2b02      	cmp	r3, #2
 800eb48:	d902      	bls.n	800eb50 <dir_sdi+0x46>
		clst = fs->dirbase;
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb4e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d10c      	bne.n	800eb70 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	095b      	lsrs	r3, r3, #5
 800eb5a:	693a      	ldr	r2, [r7, #16]
 800eb5c:	8912      	ldrh	r2, [r2, #8]
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	d301      	bcc.n	800eb66 <dir_sdi+0x5c>
 800eb62:	2302      	movs	r3, #2
 800eb64:	e056      	b.n	800ec14 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	61da      	str	r2, [r3, #28]
 800eb6e:	e02d      	b.n	800ebcc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800eb70:	693b      	ldr	r3, [r7, #16]
 800eb72:	895b      	ldrh	r3, [r3, #10]
 800eb74:	461a      	mov	r2, r3
 800eb76:	693b      	ldr	r3, [r7, #16]
 800eb78:	899b      	ldrh	r3, [r3, #12]
 800eb7a:	fb03 f302 	mul.w	r3, r3, r2
 800eb7e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800eb80:	e019      	b.n	800ebb6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6979      	ldr	r1, [r7, #20]
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7ff fca3 	bl	800e4d2 <get_fat>
 800eb8c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb94:	d101      	bne.n	800eb9a <dir_sdi+0x90>
 800eb96:	2301      	movs	r3, #1
 800eb98:	e03c      	b.n	800ec14 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d904      	bls.n	800ebaa <dir_sdi+0xa0>
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	6a1b      	ldr	r3, [r3, #32]
 800eba4:	697a      	ldr	r2, [r7, #20]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d301      	bcc.n	800ebae <dir_sdi+0xa4>
 800ebaa:	2302      	movs	r3, #2
 800ebac:	e032      	b.n	800ec14 <dir_sdi+0x10a>
			ofs -= csz;
 800ebae:	683a      	ldr	r2, [r7, #0]
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	1ad3      	subs	r3, r2, r3
 800ebb4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ebb6:	683a      	ldr	r2, [r7, #0]
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d2e1      	bcs.n	800eb82 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ebbe:	6979      	ldr	r1, [r7, #20]
 800ebc0:	6938      	ldr	r0, [r7, #16]
 800ebc2:	f7ff fc67 	bl	800e494 <clust2sect>
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	697a      	ldr	r2, [r7, #20]
 800ebd0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	69db      	ldr	r3, [r3, #28]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d101      	bne.n	800ebde <dir_sdi+0xd4>
 800ebda:	2302      	movs	r3, #2
 800ebdc:	e01a      	b.n	800ec14 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	69da      	ldr	r2, [r3, #28]
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	899b      	ldrh	r3, [r3, #12]
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	fbb3 f3f1 	udiv	r3, r3, r1
 800ebee:	441a      	add	r2, r3
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	899b      	ldrh	r3, [r3, #12]
 800ebfe:	461a      	mov	r2, r3
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	fbb3 f0f2 	udiv	r0, r3, r2
 800ec06:	fb02 f200 	mul.w	r2, r2, r0
 800ec0a:	1a9b      	subs	r3, r3, r2
 800ec0c:	18ca      	adds	r2, r1, r3
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ec12:	2300      	movs	r3, #0
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3718      	adds	r7, #24
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b086      	sub	sp, #24
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	695b      	ldr	r3, [r3, #20]
 800ec30:	3320      	adds	r3, #32
 800ec32:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	69db      	ldr	r3, [r3, #28]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d003      	beq.n	800ec44 <dir_next+0x28>
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ec42:	d301      	bcc.n	800ec48 <dir_next+0x2c>
 800ec44:	2304      	movs	r3, #4
 800ec46:	e0bb      	b.n	800edc0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	899b      	ldrh	r3, [r3, #12]
 800ec4c:	461a      	mov	r2, r3
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec54:	fb02 f201 	mul.w	r2, r2, r1
 800ec58:	1a9b      	subs	r3, r3, r2
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	f040 809d 	bne.w	800ed9a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	69db      	ldr	r3, [r3, #28]
 800ec64:	1c5a      	adds	r2, r3, #1
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	699b      	ldr	r3, [r3, #24]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d10b      	bne.n	800ec8a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	095b      	lsrs	r3, r3, #5
 800ec76:	68fa      	ldr	r2, [r7, #12]
 800ec78:	8912      	ldrh	r2, [r2, #8]
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	f0c0 808d 	bcc.w	800ed9a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2200      	movs	r2, #0
 800ec84:	61da      	str	r2, [r3, #28]
 800ec86:	2304      	movs	r3, #4
 800ec88:	e09a      	b.n	800edc0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	899b      	ldrh	r3, [r3, #12]
 800ec8e:	461a      	mov	r2, r3
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec96:	68fa      	ldr	r2, [r7, #12]
 800ec98:	8952      	ldrh	r2, [r2, #10]
 800ec9a:	3a01      	subs	r2, #1
 800ec9c:	4013      	ands	r3, r2
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d17b      	bne.n	800ed9a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	699b      	ldr	r3, [r3, #24]
 800eca8:	4619      	mov	r1, r3
 800ecaa:	4610      	mov	r0, r2
 800ecac:	f7ff fc11 	bl	800e4d2 <get_fat>
 800ecb0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d801      	bhi.n	800ecbc <dir_next+0xa0>
 800ecb8:	2302      	movs	r3, #2
 800ecba:	e081      	b.n	800edc0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecc2:	d101      	bne.n	800ecc8 <dir_next+0xac>
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	e07b      	b.n	800edc0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	6a1b      	ldr	r3, [r3, #32]
 800eccc:	697a      	ldr	r2, [r7, #20]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	d359      	bcc.n	800ed86 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d104      	bne.n	800ece2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2200      	movs	r2, #0
 800ecdc:	61da      	str	r2, [r3, #28]
 800ecde:	2304      	movs	r3, #4
 800ece0:	e06e      	b.n	800edc0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ece2:	687a      	ldr	r2, [r7, #4]
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	699b      	ldr	r3, [r3, #24]
 800ece8:	4619      	mov	r1, r3
 800ecea:	4610      	mov	r0, r2
 800ecec:	f7ff fe3d 	bl	800e96a <create_chain>
 800ecf0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d101      	bne.n	800ecfc <dir_next+0xe0>
 800ecf8:	2307      	movs	r3, #7
 800ecfa:	e061      	b.n	800edc0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	2b01      	cmp	r3, #1
 800ed00:	d101      	bne.n	800ed06 <dir_next+0xea>
 800ed02:	2302      	movs	r3, #2
 800ed04:	e05c      	b.n	800edc0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed0c:	d101      	bne.n	800ed12 <dir_next+0xf6>
 800ed0e:	2301      	movs	r3, #1
 800ed10:	e056      	b.n	800edc0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ed12:	68f8      	ldr	r0, [r7, #12]
 800ed14:	f7ff fadc 	bl	800e2d0 <sync_window>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d001      	beq.n	800ed22 <dir_next+0x106>
 800ed1e:	2301      	movs	r3, #1
 800ed20:	e04e      	b.n	800edc0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	899b      	ldrh	r3, [r3, #12]
 800ed2c:	461a      	mov	r2, r3
 800ed2e:	2100      	movs	r1, #0
 800ed30:	f7ff f905 	bl	800df3e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ed34:	2300      	movs	r3, #0
 800ed36:	613b      	str	r3, [r7, #16]
 800ed38:	6979      	ldr	r1, [r7, #20]
 800ed3a:	68f8      	ldr	r0, [r7, #12]
 800ed3c:	f7ff fbaa 	bl	800e494 <clust2sect>
 800ed40:	4602      	mov	r2, r0
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	639a      	str	r2, [r3, #56]	; 0x38
 800ed46:	e012      	b.n	800ed6e <dir_next+0x152>
						fs->wflag = 1;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ed4e:	68f8      	ldr	r0, [r7, #12]
 800ed50:	f7ff fabe 	bl	800e2d0 <sync_window>
 800ed54:	4603      	mov	r3, r0
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d001      	beq.n	800ed5e <dir_next+0x142>
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	e030      	b.n	800edc0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	3301      	adds	r3, #1
 800ed62:	613b      	str	r3, [r7, #16]
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed68:	1c5a      	adds	r2, r3, #1
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	639a      	str	r2, [r3, #56]	; 0x38
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	895b      	ldrh	r3, [r3, #10]
 800ed72:	461a      	mov	r2, r3
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d3e6      	bcc.n	800ed48 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	1ad2      	subs	r2, r2, r3
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	697a      	ldr	r2, [r7, #20]
 800ed8a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ed8c:	6979      	ldr	r1, [r7, #20]
 800ed8e:	68f8      	ldr	r0, [r7, #12]
 800ed90:	f7ff fb80 	bl	800e494 <clust2sect>
 800ed94:	4602      	mov	r2, r0
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	68ba      	ldr	r2, [r7, #8]
 800ed9e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	899b      	ldrh	r3, [r3, #12]
 800edaa:	461a      	mov	r2, r3
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	fbb3 f0f2 	udiv	r0, r3, r2
 800edb2:	fb02 f200 	mul.w	r2, r2, r0
 800edb6:	1a9b      	subs	r3, r3, r2
 800edb8:	18ca      	adds	r2, r1, r3
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800edbe:	2300      	movs	r3, #0
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3718      	adds	r7, #24
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}

0800edc8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b086      	sub	sp, #24
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
 800edd0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800edd8:	2100      	movs	r1, #0
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f7ff fe95 	bl	800eb0a <dir_sdi>
 800ede0:	4603      	mov	r3, r0
 800ede2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ede4:	7dfb      	ldrb	r3, [r7, #23]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d12b      	bne.n	800ee42 <dir_alloc+0x7a>
		n = 0;
 800edea:	2300      	movs	r3, #0
 800edec:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	69db      	ldr	r3, [r3, #28]
 800edf2:	4619      	mov	r1, r3
 800edf4:	68f8      	ldr	r0, [r7, #12]
 800edf6:	f7ff faaf 	bl	800e358 <move_window>
 800edfa:	4603      	mov	r3, r0
 800edfc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800edfe:	7dfb      	ldrb	r3, [r7, #23]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d11d      	bne.n	800ee40 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6a1b      	ldr	r3, [r3, #32]
 800ee08:	781b      	ldrb	r3, [r3, #0]
 800ee0a:	2be5      	cmp	r3, #229	; 0xe5
 800ee0c:	d004      	beq.n	800ee18 <dir_alloc+0x50>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6a1b      	ldr	r3, [r3, #32]
 800ee12:	781b      	ldrb	r3, [r3, #0]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d107      	bne.n	800ee28 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	613b      	str	r3, [r7, #16]
 800ee1e:	693a      	ldr	r2, [r7, #16]
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d102      	bne.n	800ee2c <dir_alloc+0x64>
 800ee26:	e00c      	b.n	800ee42 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ee28:	2300      	movs	r3, #0
 800ee2a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ee2c:	2101      	movs	r1, #1
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f7ff fef4 	bl	800ec1c <dir_next>
 800ee34:	4603      	mov	r3, r0
 800ee36:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ee38:	7dfb      	ldrb	r3, [r7, #23]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d0d7      	beq.n	800edee <dir_alloc+0x26>
 800ee3e:	e000      	b.n	800ee42 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ee40:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ee42:	7dfb      	ldrb	r3, [r7, #23]
 800ee44:	2b04      	cmp	r3, #4
 800ee46:	d101      	bne.n	800ee4c <dir_alloc+0x84>
 800ee48:	2307      	movs	r3, #7
 800ee4a:	75fb      	strb	r3, [r7, #23]
	return res;
 800ee4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3718      	adds	r7, #24
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}

0800ee56 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ee56:	b580      	push	{r7, lr}
 800ee58:	b084      	sub	sp, #16
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
 800ee5e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	331a      	adds	r3, #26
 800ee64:	4618      	mov	r0, r3
 800ee66:	f7fe ffc7 	bl	800ddf8 <ld_word>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	2b03      	cmp	r3, #3
 800ee74:	d109      	bne.n	800ee8a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	3314      	adds	r3, #20
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7fe ffbc 	bl	800ddf8 <ld_word>
 800ee80:	4603      	mov	r3, r0
 800ee82:	041b      	lsls	r3, r3, #16
 800ee84:	68fa      	ldr	r2, [r7, #12]
 800ee86:	4313      	orrs	r3, r2
 800ee88:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3710      	adds	r7, #16
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}

0800ee94 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b084      	sub	sp, #16
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	60f8      	str	r0, [r7, #12]
 800ee9c:	60b9      	str	r1, [r7, #8]
 800ee9e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	331a      	adds	r3, #26
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	b292      	uxth	r2, r2
 800eea8:	4611      	mov	r1, r2
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7fe ffdf 	bl	800de6e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	781b      	ldrb	r3, [r3, #0]
 800eeb4:	2b03      	cmp	r3, #3
 800eeb6:	d109      	bne.n	800eecc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	f103 0214 	add.w	r2, r3, #20
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	0c1b      	lsrs	r3, r3, #16
 800eec2:	b29b      	uxth	r3, r3
 800eec4:	4619      	mov	r1, r3
 800eec6:	4610      	mov	r0, r2
 800eec8:	f7fe ffd1 	bl	800de6e <st_word>
	}
}
 800eecc:	bf00      	nop
 800eece:	3710      	adds	r7, #16
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800eed4:	b590      	push	{r4, r7, lr}
 800eed6:	b087      	sub	sp, #28
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	331a      	adds	r3, #26
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7fe ff88 	bl	800ddf8 <ld_word>
 800eee8:	4603      	mov	r3, r0
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d001      	beq.n	800eef2 <cmp_lfn+0x1e>
 800eeee:	2300      	movs	r3, #0
 800eef0:	e059      	b.n	800efa6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	781b      	ldrb	r3, [r3, #0]
 800eef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eefa:	1e5a      	subs	r2, r3, #1
 800eefc:	4613      	mov	r3, r2
 800eefe:	005b      	lsls	r3, r3, #1
 800ef00:	4413      	add	r3, r2
 800ef02:	009b      	lsls	r3, r3, #2
 800ef04:	4413      	add	r3, r2
 800ef06:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ef08:	2301      	movs	r3, #1
 800ef0a:	81fb      	strh	r3, [r7, #14]
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	613b      	str	r3, [r7, #16]
 800ef10:	e033      	b.n	800ef7a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ef12:	4a27      	ldr	r2, [pc, #156]	; (800efb0 <cmp_lfn+0xdc>)
 800ef14:	693b      	ldr	r3, [r7, #16]
 800ef16:	4413      	add	r3, r2
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	461a      	mov	r2, r3
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	4413      	add	r3, r2
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7fe ff69 	bl	800ddf8 <ld_word>
 800ef26:	4603      	mov	r3, r0
 800ef28:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ef2a:	89fb      	ldrh	r3, [r7, #14]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d01a      	beq.n	800ef66 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	2bfe      	cmp	r3, #254	; 0xfe
 800ef34:	d812      	bhi.n	800ef5c <cmp_lfn+0x88>
 800ef36:	89bb      	ldrh	r3, [r7, #12]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f002 fd23 	bl	8011984 <ff_wtoupper>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	461c      	mov	r4, r3
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	1c5a      	adds	r2, r3, #1
 800ef46:	617a      	str	r2, [r7, #20]
 800ef48:	005b      	lsls	r3, r3, #1
 800ef4a:	687a      	ldr	r2, [r7, #4]
 800ef4c:	4413      	add	r3, r2
 800ef4e:	881b      	ldrh	r3, [r3, #0]
 800ef50:	4618      	mov	r0, r3
 800ef52:	f002 fd17 	bl	8011984 <ff_wtoupper>
 800ef56:	4603      	mov	r3, r0
 800ef58:	429c      	cmp	r4, r3
 800ef5a:	d001      	beq.n	800ef60 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	e022      	b.n	800efa6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800ef60:	89bb      	ldrh	r3, [r7, #12]
 800ef62:	81fb      	strh	r3, [r7, #14]
 800ef64:	e006      	b.n	800ef74 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ef66:	89bb      	ldrh	r3, [r7, #12]
 800ef68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d001      	beq.n	800ef74 <cmp_lfn+0xa0>
 800ef70:	2300      	movs	r3, #0
 800ef72:	e018      	b.n	800efa6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ef74:	693b      	ldr	r3, [r7, #16]
 800ef76:	3301      	adds	r3, #1
 800ef78:	613b      	str	r3, [r7, #16]
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	2b0c      	cmp	r3, #12
 800ef7e:	d9c8      	bls.n	800ef12 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00b      	beq.n	800efa4 <cmp_lfn+0xd0>
 800ef8c:	89fb      	ldrh	r3, [r7, #14]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d008      	beq.n	800efa4 <cmp_lfn+0xd0>
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	005b      	lsls	r3, r3, #1
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	4413      	add	r3, r2
 800ef9a:	881b      	ldrh	r3, [r3, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d001      	beq.n	800efa4 <cmp_lfn+0xd0>
 800efa0:	2300      	movs	r3, #0
 800efa2:	e000      	b.n	800efa6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800efa4:	2301      	movs	r3, #1
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	371c      	adds	r7, #28
 800efaa:	46bd      	mov	sp, r7
 800efac:	bd90      	pop	{r4, r7, pc}
 800efae:	bf00      	nop
 800efb0:	08017e44 	.word	0x08017e44

0800efb4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b086      	sub	sp, #24
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	331a      	adds	r3, #26
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fe ff18 	bl	800ddf8 <ld_word>
 800efc8:	4603      	mov	r3, r0
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d001      	beq.n	800efd2 <pick_lfn+0x1e>
 800efce:	2300      	movs	r3, #0
 800efd0:	e04d      	b.n	800f06e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	781b      	ldrb	r3, [r3, #0]
 800efd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800efda:	1e5a      	subs	r2, r3, #1
 800efdc:	4613      	mov	r3, r2
 800efde:	005b      	lsls	r3, r3, #1
 800efe0:	4413      	add	r3, r2
 800efe2:	009b      	lsls	r3, r3, #2
 800efe4:	4413      	add	r3, r2
 800efe6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800efe8:	2301      	movs	r3, #1
 800efea:	81fb      	strh	r3, [r7, #14]
 800efec:	2300      	movs	r3, #0
 800efee:	613b      	str	r3, [r7, #16]
 800eff0:	e028      	b.n	800f044 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800eff2:	4a21      	ldr	r2, [pc, #132]	; (800f078 <pick_lfn+0xc4>)
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	4413      	add	r3, r2
 800eff8:	781b      	ldrb	r3, [r3, #0]
 800effa:	461a      	mov	r2, r3
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	4413      	add	r3, r2
 800f000:	4618      	mov	r0, r3
 800f002:	f7fe fef9 	bl	800ddf8 <ld_word>
 800f006:	4603      	mov	r3, r0
 800f008:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f00a:	89fb      	ldrh	r3, [r7, #14]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d00f      	beq.n	800f030 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	2bfe      	cmp	r3, #254	; 0xfe
 800f014:	d901      	bls.n	800f01a <pick_lfn+0x66>
 800f016:	2300      	movs	r3, #0
 800f018:	e029      	b.n	800f06e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f01a:	89bb      	ldrh	r3, [r7, #12]
 800f01c:	81fb      	strh	r3, [r7, #14]
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	1c5a      	adds	r2, r3, #1
 800f022:	617a      	str	r2, [r7, #20]
 800f024:	005b      	lsls	r3, r3, #1
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	4413      	add	r3, r2
 800f02a:	89fa      	ldrh	r2, [r7, #14]
 800f02c:	801a      	strh	r2, [r3, #0]
 800f02e:	e006      	b.n	800f03e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f030:	89bb      	ldrh	r3, [r7, #12]
 800f032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f036:	4293      	cmp	r3, r2
 800f038:	d001      	beq.n	800f03e <pick_lfn+0x8a>
 800f03a:	2300      	movs	r3, #0
 800f03c:	e017      	b.n	800f06e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	3301      	adds	r3, #1
 800f042:	613b      	str	r3, [r7, #16]
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	2b0c      	cmp	r3, #12
 800f048:	d9d3      	bls.n	800eff2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f052:	2b00      	cmp	r3, #0
 800f054:	d00a      	beq.n	800f06c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	2bfe      	cmp	r3, #254	; 0xfe
 800f05a:	d901      	bls.n	800f060 <pick_lfn+0xac>
 800f05c:	2300      	movs	r3, #0
 800f05e:	e006      	b.n	800f06e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	005b      	lsls	r3, r3, #1
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	4413      	add	r3, r2
 800f068:	2200      	movs	r2, #0
 800f06a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800f06c:	2301      	movs	r3, #1
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3718      	adds	r7, #24
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}
 800f076:	bf00      	nop
 800f078:	08017e44 	.word	0x08017e44

0800f07c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b088      	sub	sp, #32
 800f080:	af00      	add	r7, sp, #0
 800f082:	60f8      	str	r0, [r7, #12]
 800f084:	60b9      	str	r1, [r7, #8]
 800f086:	4611      	mov	r1, r2
 800f088:	461a      	mov	r2, r3
 800f08a:	460b      	mov	r3, r1
 800f08c:	71fb      	strb	r3, [r7, #7]
 800f08e:	4613      	mov	r3, r2
 800f090:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	330d      	adds	r3, #13
 800f096:	79ba      	ldrb	r2, [r7, #6]
 800f098:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	330b      	adds	r3, #11
 800f09e:	220f      	movs	r2, #15
 800f0a0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	330c      	adds	r3, #12
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	331a      	adds	r3, #26
 800f0ae:	2100      	movs	r1, #0
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7fe fedc 	bl	800de6e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f0b6:	79fb      	ldrb	r3, [r7, #7]
 800f0b8:	1e5a      	subs	r2, r3, #1
 800f0ba:	4613      	mov	r3, r2
 800f0bc:	005b      	lsls	r3, r3, #1
 800f0be:	4413      	add	r3, r2
 800f0c0:	009b      	lsls	r3, r3, #2
 800f0c2:	4413      	add	r3, r2
 800f0c4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	82fb      	strh	r3, [r7, #22]
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f0ce:	8afb      	ldrh	r3, [r7, #22]
 800f0d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d007      	beq.n	800f0e8 <put_lfn+0x6c>
 800f0d8:	69fb      	ldr	r3, [r7, #28]
 800f0da:	1c5a      	adds	r2, r3, #1
 800f0dc:	61fa      	str	r2, [r7, #28]
 800f0de:	005b      	lsls	r3, r3, #1
 800f0e0:	68fa      	ldr	r2, [r7, #12]
 800f0e2:	4413      	add	r3, r2
 800f0e4:	881b      	ldrh	r3, [r3, #0]
 800f0e6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f0e8:	4a17      	ldr	r2, [pc, #92]	; (800f148 <put_lfn+0xcc>)
 800f0ea:	69bb      	ldr	r3, [r7, #24]
 800f0ec:	4413      	add	r3, r2
 800f0ee:	781b      	ldrb	r3, [r3, #0]
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	4413      	add	r3, r2
 800f0f6:	8afa      	ldrh	r2, [r7, #22]
 800f0f8:	4611      	mov	r1, r2
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7fe feb7 	bl	800de6e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f100:	8afb      	ldrh	r3, [r7, #22]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d102      	bne.n	800f10c <put_lfn+0x90>
 800f106:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f10a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f10c:	69bb      	ldr	r3, [r7, #24]
 800f10e:	3301      	adds	r3, #1
 800f110:	61bb      	str	r3, [r7, #24]
 800f112:	69bb      	ldr	r3, [r7, #24]
 800f114:	2b0c      	cmp	r3, #12
 800f116:	d9da      	bls.n	800f0ce <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f118:	8afb      	ldrh	r3, [r7, #22]
 800f11a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f11e:	4293      	cmp	r3, r2
 800f120:	d006      	beq.n	800f130 <put_lfn+0xb4>
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	005b      	lsls	r3, r3, #1
 800f126:	68fa      	ldr	r2, [r7, #12]
 800f128:	4413      	add	r3, r2
 800f12a:	881b      	ldrh	r3, [r3, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d103      	bne.n	800f138 <put_lfn+0xbc>
 800f130:	79fb      	ldrb	r3, [r7, #7]
 800f132:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f136:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	79fa      	ldrb	r2, [r7, #7]
 800f13c:	701a      	strb	r2, [r3, #0]
}
 800f13e:	bf00      	nop
 800f140:	3720      	adds	r7, #32
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}
 800f146:	bf00      	nop
 800f148:	08017e44 	.word	0x08017e44

0800f14c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b08c      	sub	sp, #48	; 0x30
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	607a      	str	r2, [r7, #4]
 800f158:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f15a:	220b      	movs	r2, #11
 800f15c:	68b9      	ldr	r1, [r7, #8]
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	f7fe fecc 	bl	800defc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	2b05      	cmp	r3, #5
 800f168:	d92b      	bls.n	800f1c2 <gen_numname+0x76>
		sr = seq;
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f16e:	e022      	b.n	800f1b6 <gen_numname+0x6a>
			wc = *lfn++;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	1c9a      	adds	r2, r3, #2
 800f174:	607a      	str	r2, [r7, #4]
 800f176:	881b      	ldrh	r3, [r3, #0]
 800f178:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800f17a:	2300      	movs	r3, #0
 800f17c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f17e:	e017      	b.n	800f1b0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f180:	69fb      	ldr	r3, [r7, #28]
 800f182:	005a      	lsls	r2, r3, #1
 800f184:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f186:	f003 0301 	and.w	r3, r3, #1
 800f18a:	4413      	add	r3, r2
 800f18c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f18e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f190:	085b      	lsrs	r3, r3, #1
 800f192:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d005      	beq.n	800f1aa <gen_numname+0x5e>
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800f1a4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800f1a8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800f1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b2:	2b0f      	cmp	r3, #15
 800f1b4:	d9e4      	bls.n	800f180 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	881b      	ldrh	r3, [r3, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d1d8      	bne.n	800f170 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f1c2:	2307      	movs	r3, #7
 800f1c4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	f003 030f 	and.w	r3, r3, #15
 800f1ce:	b2db      	uxtb	r3, r3
 800f1d0:	3330      	adds	r3, #48	; 0x30
 800f1d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800f1d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f1da:	2b39      	cmp	r3, #57	; 0x39
 800f1dc:	d904      	bls.n	800f1e8 <gen_numname+0x9c>
 800f1de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f1e2:	3307      	adds	r3, #7
 800f1e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800f1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ea:	1e5a      	subs	r2, r3, #1
 800f1ec:	62ba      	str	r2, [r7, #40]	; 0x28
 800f1ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f1f2:	4413      	add	r3, r2
 800f1f4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f1f8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	091b      	lsrs	r3, r3, #4
 800f200:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d1de      	bne.n	800f1c6 <gen_numname+0x7a>
	ns[i] = '~';
 800f208:	f107 0214 	add.w	r2, r7, #20
 800f20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f20e:	4413      	add	r3, r2
 800f210:	227e      	movs	r2, #126	; 0x7e
 800f212:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f214:	2300      	movs	r3, #0
 800f216:	627b      	str	r3, [r7, #36]	; 0x24
 800f218:	e002      	b.n	800f220 <gen_numname+0xd4>
 800f21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21c:	3301      	adds	r3, #1
 800f21e:	627b      	str	r3, [r7, #36]	; 0x24
 800f220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f224:	429a      	cmp	r2, r3
 800f226:	d205      	bcs.n	800f234 <gen_numname+0xe8>
 800f228:	68fa      	ldr	r2, [r7, #12]
 800f22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22c:	4413      	add	r3, r2
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	2b20      	cmp	r3, #32
 800f232:	d1f2      	bne.n	800f21a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f236:	2b07      	cmp	r3, #7
 800f238:	d808      	bhi.n	800f24c <gen_numname+0x100>
 800f23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f23c:	1c5a      	adds	r2, r3, #1
 800f23e:	62ba      	str	r2, [r7, #40]	; 0x28
 800f240:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f244:	4413      	add	r3, r2
 800f246:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f24a:	e000      	b.n	800f24e <gen_numname+0x102>
 800f24c:	2120      	movs	r1, #32
 800f24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f250:	1c5a      	adds	r2, r3, #1
 800f252:	627a      	str	r2, [r7, #36]	; 0x24
 800f254:	68fa      	ldr	r2, [r7, #12]
 800f256:	4413      	add	r3, r2
 800f258:	460a      	mov	r2, r1
 800f25a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25e:	2b07      	cmp	r3, #7
 800f260:	d9e8      	bls.n	800f234 <gen_numname+0xe8>
}
 800f262:	bf00      	nop
 800f264:	3730      	adds	r7, #48	; 0x30
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}

0800f26a <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f26a:	b480      	push	{r7}
 800f26c:	b085      	sub	sp, #20
 800f26e:	af00      	add	r7, sp, #0
 800f270:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f272:	2300      	movs	r3, #0
 800f274:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f276:	230b      	movs	r3, #11
 800f278:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f27a:	7bfb      	ldrb	r3, [r7, #15]
 800f27c:	b2da      	uxtb	r2, r3
 800f27e:	0852      	lsrs	r2, r2, #1
 800f280:	01db      	lsls	r3, r3, #7
 800f282:	4313      	orrs	r3, r2
 800f284:	b2da      	uxtb	r2, r3
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	1c59      	adds	r1, r3, #1
 800f28a:	6079      	str	r1, [r7, #4]
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	4413      	add	r3, r2
 800f290:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	3b01      	subs	r3, #1
 800f296:	60bb      	str	r3, [r7, #8]
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d1ed      	bne.n	800f27a <sum_sfn+0x10>
	return sum;
 800f29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	3714      	adds	r7, #20
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr

0800f2ac <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b086      	sub	sp, #24
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f2b6:	2304      	movs	r3, #4
 800f2b8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800f2c0:	23ff      	movs	r3, #255	; 0xff
 800f2c2:	757b      	strb	r3, [r7, #21]
 800f2c4:	23ff      	movs	r3, #255	; 0xff
 800f2c6:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800f2c8:	e081      	b.n	800f3ce <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	69db      	ldr	r3, [r3, #28]
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	6938      	ldr	r0, [r7, #16]
 800f2d2:	f7ff f841 	bl	800e358 <move_window>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f2da:	7dfb      	ldrb	r3, [r7, #23]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d17c      	bne.n	800f3da <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6a1b      	ldr	r3, [r3, #32]
 800f2e4:	781b      	ldrb	r3, [r3, #0]
 800f2e6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800f2e8:	7dbb      	ldrb	r3, [r7, #22]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d102      	bne.n	800f2f4 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f2ee:	2304      	movs	r3, #4
 800f2f0:	75fb      	strb	r3, [r7, #23]
 800f2f2:	e077      	b.n	800f3e4 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6a1b      	ldr	r3, [r3, #32]
 800f2f8:	330b      	adds	r3, #11
 800f2fa:	781b      	ldrb	r3, [r3, #0]
 800f2fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f300:	73fb      	strb	r3, [r7, #15]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	7bfa      	ldrb	r2, [r7, #15]
 800f306:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f308:	7dbb      	ldrb	r3, [r7, #22]
 800f30a:	2be5      	cmp	r3, #229	; 0xe5
 800f30c:	d00e      	beq.n	800f32c <dir_read+0x80>
 800f30e:	7dbb      	ldrb	r3, [r7, #22]
 800f310:	2b2e      	cmp	r3, #46	; 0x2e
 800f312:	d00b      	beq.n	800f32c <dir_read+0x80>
 800f314:	7bfb      	ldrb	r3, [r7, #15]
 800f316:	f023 0320 	bic.w	r3, r3, #32
 800f31a:	2b08      	cmp	r3, #8
 800f31c:	bf0c      	ite	eq
 800f31e:	2301      	moveq	r3, #1
 800f320:	2300      	movne	r3, #0
 800f322:	b2db      	uxtb	r3, r3
 800f324:	461a      	mov	r2, r3
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	4293      	cmp	r3, r2
 800f32a:	d002      	beq.n	800f332 <dir_read+0x86>
				ord = 0xFF;
 800f32c:	23ff      	movs	r3, #255	; 0xff
 800f32e:	757b      	strb	r3, [r7, #21]
 800f330:	e044      	b.n	800f3bc <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f332:	7bfb      	ldrb	r3, [r7, #15]
 800f334:	2b0f      	cmp	r3, #15
 800f336:	d12f      	bne.n	800f398 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f338:	7dbb      	ldrb	r3, [r7, #22]
 800f33a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d00d      	beq.n	800f35e <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6a1b      	ldr	r3, [r3, #32]
 800f346:	7b5b      	ldrb	r3, [r3, #13]
 800f348:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f34a:	7dbb      	ldrb	r3, [r7, #22]
 800f34c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f350:	75bb      	strb	r3, [r7, #22]
 800f352:	7dbb      	ldrb	r3, [r7, #22]
 800f354:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	695a      	ldr	r2, [r3, #20]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f35e:	7dba      	ldrb	r2, [r7, #22]
 800f360:	7d7b      	ldrb	r3, [r7, #21]
 800f362:	429a      	cmp	r2, r3
 800f364:	d115      	bne.n	800f392 <dir_read+0xe6>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6a1b      	ldr	r3, [r3, #32]
 800f36a:	330d      	adds	r3, #13
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	7d3a      	ldrb	r2, [r7, #20]
 800f370:	429a      	cmp	r2, r3
 800f372:	d10e      	bne.n	800f392 <dir_read+0xe6>
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	691a      	ldr	r2, [r3, #16]
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	6a1b      	ldr	r3, [r3, #32]
 800f37c:	4619      	mov	r1, r3
 800f37e:	4610      	mov	r0, r2
 800f380:	f7ff fe18 	bl	800efb4 <pick_lfn>
 800f384:	4603      	mov	r3, r0
 800f386:	2b00      	cmp	r3, #0
 800f388:	d003      	beq.n	800f392 <dir_read+0xe6>
 800f38a:	7d7b      	ldrb	r3, [r7, #21]
 800f38c:	3b01      	subs	r3, #1
 800f38e:	b2db      	uxtb	r3, r3
 800f390:	e000      	b.n	800f394 <dir_read+0xe8>
 800f392:	23ff      	movs	r3, #255	; 0xff
 800f394:	757b      	strb	r3, [r7, #21]
 800f396:	e011      	b.n	800f3bc <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f398:	7d7b      	ldrb	r3, [r7, #21]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d109      	bne.n	800f3b2 <dir_read+0x106>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6a1b      	ldr	r3, [r3, #32]
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7ff ff61 	bl	800f26a <sum_sfn>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	7d3b      	ldrb	r3, [r7, #20]
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d015      	beq.n	800f3de <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f3b8:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800f3ba:	e010      	b.n	800f3de <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f3bc:	2100      	movs	r1, #0
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f7ff fc2c 	bl	800ec1c <dir_next>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f3c8:	7dfb      	ldrb	r3, [r7, #23]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d109      	bne.n	800f3e2 <dir_read+0x136>
	while (dp->sect) {
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	69db      	ldr	r3, [r3, #28]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	f47f af79 	bne.w	800f2ca <dir_read+0x1e>
 800f3d8:	e004      	b.n	800f3e4 <dir_read+0x138>
		if (res != FR_OK) break;
 800f3da:	bf00      	nop
 800f3dc:	e002      	b.n	800f3e4 <dir_read+0x138>
					break;
 800f3de:	bf00      	nop
 800f3e0:	e000      	b.n	800f3e4 <dir_read+0x138>
		if (res != FR_OK) break;
 800f3e2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f3e4:	7dfb      	ldrb	r3, [r7, #23]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d002      	beq.n	800f3f0 <dir_read+0x144>
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	61da      	str	r2, [r3, #28]
	return res;
 800f3f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3718      	adds	r7, #24
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}

0800f3fa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f3fa:	b580      	push	{r7, lr}
 800f3fc:	b086      	sub	sp, #24
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f408:	2100      	movs	r1, #0
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f7ff fb7d 	bl	800eb0a <dir_sdi>
 800f410:	4603      	mov	r3, r0
 800f412:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f414:	7dfb      	ldrb	r3, [r7, #23]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d001      	beq.n	800f41e <dir_find+0x24>
 800f41a:	7dfb      	ldrb	r3, [r7, #23]
 800f41c:	e0a9      	b.n	800f572 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f41e:	23ff      	movs	r3, #255	; 0xff
 800f420:	753b      	strb	r3, [r7, #20]
 800f422:	7d3b      	ldrb	r3, [r7, #20]
 800f424:	757b      	strb	r3, [r7, #21]
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f04f 32ff 	mov.w	r2, #4294967295
 800f42c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	69db      	ldr	r3, [r3, #28]
 800f432:	4619      	mov	r1, r3
 800f434:	6938      	ldr	r0, [r7, #16]
 800f436:	f7fe ff8f 	bl	800e358 <move_window>
 800f43a:	4603      	mov	r3, r0
 800f43c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f43e:	7dfb      	ldrb	r3, [r7, #23]
 800f440:	2b00      	cmp	r3, #0
 800f442:	f040 8090 	bne.w	800f566 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6a1b      	ldr	r3, [r3, #32]
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f44e:	7dbb      	ldrb	r3, [r7, #22]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d102      	bne.n	800f45a <dir_find+0x60>
 800f454:	2304      	movs	r3, #4
 800f456:	75fb      	strb	r3, [r7, #23]
 800f458:	e08a      	b.n	800f570 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6a1b      	ldr	r3, [r3, #32]
 800f45e:	330b      	adds	r3, #11
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f466:	73fb      	strb	r3, [r7, #15]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	7bfa      	ldrb	r2, [r7, #15]
 800f46c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f46e:	7dbb      	ldrb	r3, [r7, #22]
 800f470:	2be5      	cmp	r3, #229	; 0xe5
 800f472:	d007      	beq.n	800f484 <dir_find+0x8a>
 800f474:	7bfb      	ldrb	r3, [r7, #15]
 800f476:	f003 0308 	and.w	r3, r3, #8
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d009      	beq.n	800f492 <dir_find+0x98>
 800f47e:	7bfb      	ldrb	r3, [r7, #15]
 800f480:	2b0f      	cmp	r3, #15
 800f482:	d006      	beq.n	800f492 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f484:	23ff      	movs	r3, #255	; 0xff
 800f486:	757b      	strb	r3, [r7, #21]
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f04f 32ff 	mov.w	r2, #4294967295
 800f48e:	631a      	str	r2, [r3, #48]	; 0x30
 800f490:	e05e      	b.n	800f550 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f492:	7bfb      	ldrb	r3, [r7, #15]
 800f494:	2b0f      	cmp	r3, #15
 800f496:	d136      	bne.n	800f506 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f49e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d154      	bne.n	800f550 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f4a6:	7dbb      	ldrb	r3, [r7, #22]
 800f4a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d00d      	beq.n	800f4cc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6a1b      	ldr	r3, [r3, #32]
 800f4b4:	7b5b      	ldrb	r3, [r3, #13]
 800f4b6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f4b8:	7dbb      	ldrb	r3, [r7, #22]
 800f4ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4be:	75bb      	strb	r3, [r7, #22]
 800f4c0:	7dbb      	ldrb	r3, [r7, #22]
 800f4c2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	695a      	ldr	r2, [r3, #20]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f4cc:	7dba      	ldrb	r2, [r7, #22]
 800f4ce:	7d7b      	ldrb	r3, [r7, #21]
 800f4d0:	429a      	cmp	r2, r3
 800f4d2:	d115      	bne.n	800f500 <dir_find+0x106>
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6a1b      	ldr	r3, [r3, #32]
 800f4d8:	330d      	adds	r3, #13
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	7d3a      	ldrb	r2, [r7, #20]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d10e      	bne.n	800f500 <dir_find+0x106>
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	691a      	ldr	r2, [r3, #16]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6a1b      	ldr	r3, [r3, #32]
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	4610      	mov	r0, r2
 800f4ee:	f7ff fcf1 	bl	800eed4 <cmp_lfn>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d003      	beq.n	800f500 <dir_find+0x106>
 800f4f8:	7d7b      	ldrb	r3, [r7, #21]
 800f4fa:	3b01      	subs	r3, #1
 800f4fc:	b2db      	uxtb	r3, r3
 800f4fe:	e000      	b.n	800f502 <dir_find+0x108>
 800f500:	23ff      	movs	r3, #255	; 0xff
 800f502:	757b      	strb	r3, [r7, #21]
 800f504:	e024      	b.n	800f550 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f506:	7d7b      	ldrb	r3, [r7, #21]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d109      	bne.n	800f520 <dir_find+0x126>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6a1b      	ldr	r3, [r3, #32]
 800f510:	4618      	mov	r0, r3
 800f512:	f7ff feaa 	bl	800f26a <sum_sfn>
 800f516:	4603      	mov	r3, r0
 800f518:	461a      	mov	r2, r3
 800f51a:	7d3b      	ldrb	r3, [r7, #20]
 800f51c:	4293      	cmp	r3, r2
 800f51e:	d024      	beq.n	800f56a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f526:	f003 0301 	and.w	r3, r3, #1
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d10a      	bne.n	800f544 <dir_find+0x14a>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6a18      	ldr	r0, [r3, #32]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	3324      	adds	r3, #36	; 0x24
 800f536:	220b      	movs	r2, #11
 800f538:	4619      	mov	r1, r3
 800f53a:	f7fe fd1a 	bl	800df72 <mem_cmp>
 800f53e:	4603      	mov	r3, r0
 800f540:	2b00      	cmp	r3, #0
 800f542:	d014      	beq.n	800f56e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f544:	23ff      	movs	r3, #255	; 0xff
 800f546:	757b      	strb	r3, [r7, #21]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f04f 32ff 	mov.w	r2, #4294967295
 800f54e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f550:	2100      	movs	r1, #0
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f7ff fb62 	bl	800ec1c <dir_next>
 800f558:	4603      	mov	r3, r0
 800f55a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f55c:	7dfb      	ldrb	r3, [r7, #23]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	f43f af65 	beq.w	800f42e <dir_find+0x34>
 800f564:	e004      	b.n	800f570 <dir_find+0x176>
		if (res != FR_OK) break;
 800f566:	bf00      	nop
 800f568:	e002      	b.n	800f570 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f56a:	bf00      	nop
 800f56c:	e000      	b.n	800f570 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f56e:	bf00      	nop

	return res;
 800f570:	7dfb      	ldrb	r3, [r7, #23]
}
 800f572:	4618      	mov	r0, r3
 800f574:	3718      	adds	r7, #24
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}
	...

0800f57c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b08c      	sub	sp, #48	; 0x30
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f590:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f594:	2b00      	cmp	r3, #0
 800f596:	d001      	beq.n	800f59c <dir_register+0x20>
 800f598:	2306      	movs	r3, #6
 800f59a:	e0e0      	b.n	800f75e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f59c:	2300      	movs	r3, #0
 800f59e:	627b      	str	r3, [r7, #36]	; 0x24
 800f5a0:	e002      	b.n	800f5a8 <dir_register+0x2c>
 800f5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a4:	3301      	adds	r3, #1
 800f5a6:	627b      	str	r3, [r7, #36]	; 0x24
 800f5a8:	69fb      	ldr	r3, [r7, #28]
 800f5aa:	691a      	ldr	r2, [r3, #16]
 800f5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ae:	005b      	lsls	r3, r3, #1
 800f5b0:	4413      	add	r3, r2
 800f5b2:	881b      	ldrh	r3, [r3, #0]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d1f4      	bne.n	800f5a2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f5be:	f107 030c 	add.w	r3, r7, #12
 800f5c2:	220c      	movs	r2, #12
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f7fe fc99 	bl	800defc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f5ca:	7dfb      	ldrb	r3, [r7, #23]
 800f5cc:	f003 0301 	and.w	r3, r3, #1
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d032      	beq.n	800f63a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	2240      	movs	r2, #64	; 0x40
 800f5d8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f5dc:	2301      	movs	r3, #1
 800f5de:	62bb      	str	r3, [r7, #40]	; 0x28
 800f5e0:	e016      	b.n	800f610 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f5e8:	69fb      	ldr	r3, [r7, #28]
 800f5ea:	691a      	ldr	r2, [r3, #16]
 800f5ec:	f107 010c 	add.w	r1, r7, #12
 800f5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f2:	f7ff fdab 	bl	800f14c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f7ff feff 	bl	800f3fa <dir_find>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f602:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f606:	2b00      	cmp	r3, #0
 800f608:	d106      	bne.n	800f618 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f60c:	3301      	adds	r3, #1
 800f60e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f612:	2b63      	cmp	r3, #99	; 0x63
 800f614:	d9e5      	bls.n	800f5e2 <dir_register+0x66>
 800f616:	e000      	b.n	800f61a <dir_register+0x9e>
			if (res != FR_OK) break;
 800f618:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f61c:	2b64      	cmp	r3, #100	; 0x64
 800f61e:	d101      	bne.n	800f624 <dir_register+0xa8>
 800f620:	2307      	movs	r3, #7
 800f622:	e09c      	b.n	800f75e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f624:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f628:	2b04      	cmp	r3, #4
 800f62a:	d002      	beq.n	800f632 <dir_register+0xb6>
 800f62c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f630:	e095      	b.n	800f75e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f632:	7dfa      	ldrb	r2, [r7, #23]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f63a:	7dfb      	ldrb	r3, [r7, #23]
 800f63c:	f003 0302 	and.w	r3, r3, #2
 800f640:	2b00      	cmp	r3, #0
 800f642:	d007      	beq.n	800f654 <dir_register+0xd8>
 800f644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f646:	330c      	adds	r3, #12
 800f648:	4a47      	ldr	r2, [pc, #284]	; (800f768 <dir_register+0x1ec>)
 800f64a:	fba2 2303 	umull	r2, r3, r2, r3
 800f64e:	089b      	lsrs	r3, r3, #2
 800f650:	3301      	adds	r3, #1
 800f652:	e000      	b.n	800f656 <dir_register+0xda>
 800f654:	2301      	movs	r3, #1
 800f656:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f658:	6a39      	ldr	r1, [r7, #32]
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f7ff fbb4 	bl	800edc8 <dir_alloc>
 800f660:	4603      	mov	r3, r0
 800f662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f666:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d148      	bne.n	800f700 <dir_register+0x184>
 800f66e:	6a3b      	ldr	r3, [r7, #32]
 800f670:	3b01      	subs	r3, #1
 800f672:	623b      	str	r3, [r7, #32]
 800f674:	6a3b      	ldr	r3, [r7, #32]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d042      	beq.n	800f700 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	695a      	ldr	r2, [r3, #20]
 800f67e:	6a3b      	ldr	r3, [r7, #32]
 800f680:	015b      	lsls	r3, r3, #5
 800f682:	1ad3      	subs	r3, r2, r3
 800f684:	4619      	mov	r1, r3
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f7ff fa3f 	bl	800eb0a <dir_sdi>
 800f68c:	4603      	mov	r3, r0
 800f68e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f692:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f696:	2b00      	cmp	r3, #0
 800f698:	d132      	bne.n	800f700 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	3324      	adds	r3, #36	; 0x24
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7ff fde3 	bl	800f26a <sum_sfn>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	69db      	ldr	r3, [r3, #28]
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	69f8      	ldr	r0, [r7, #28]
 800f6b0:	f7fe fe52 	bl	800e358 <move_window>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800f6ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d11d      	bne.n	800f6fe <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f6c2:	69fb      	ldr	r3, [r7, #28]
 800f6c4:	6918      	ldr	r0, [r3, #16]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	6a19      	ldr	r1, [r3, #32]
 800f6ca:	6a3b      	ldr	r3, [r7, #32]
 800f6cc:	b2da      	uxtb	r2, r3
 800f6ce:	7efb      	ldrb	r3, [r7, #27]
 800f6d0:	f7ff fcd4 	bl	800f07c <put_lfn>
				fs->wflag = 1;
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f6da:	2100      	movs	r1, #0
 800f6dc:	6878      	ldr	r0, [r7, #4]
 800f6de:	f7ff fa9d 	bl	800ec1c <dir_next>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800f6e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d107      	bne.n	800f700 <dir_register+0x184>
 800f6f0:	6a3b      	ldr	r3, [r7, #32]
 800f6f2:	3b01      	subs	r3, #1
 800f6f4:	623b      	str	r3, [r7, #32]
 800f6f6:	6a3b      	ldr	r3, [r7, #32]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d1d5      	bne.n	800f6a8 <dir_register+0x12c>
 800f6fc:	e000      	b.n	800f700 <dir_register+0x184>
				if (res != FR_OK) break;
 800f6fe:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f700:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f704:	2b00      	cmp	r3, #0
 800f706:	d128      	bne.n	800f75a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	69db      	ldr	r3, [r3, #28]
 800f70c:	4619      	mov	r1, r3
 800f70e:	69f8      	ldr	r0, [r7, #28]
 800f710:	f7fe fe22 	bl	800e358 <move_window>
 800f714:	4603      	mov	r3, r0
 800f716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f71a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d11b      	bne.n	800f75a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6a1b      	ldr	r3, [r3, #32]
 800f726:	2220      	movs	r2, #32
 800f728:	2100      	movs	r1, #0
 800f72a:	4618      	mov	r0, r3
 800f72c:	f7fe fc07 	bl	800df3e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6a18      	ldr	r0, [r3, #32]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	3324      	adds	r3, #36	; 0x24
 800f738:	220b      	movs	r2, #11
 800f73a:	4619      	mov	r1, r3
 800f73c:	f7fe fbde 	bl	800defc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6a1b      	ldr	r3, [r3, #32]
 800f74a:	330c      	adds	r3, #12
 800f74c:	f002 0218 	and.w	r2, r2, #24
 800f750:	b2d2      	uxtb	r2, r2
 800f752:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f754:	69fb      	ldr	r3, [r7, #28]
 800f756:	2201      	movs	r2, #1
 800f758:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f75a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3730      	adds	r7, #48	; 0x30
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}
 800f766:	bf00      	nop
 800f768:	4ec4ec4f 	.word	0x4ec4ec4f

0800f76c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b086      	sub	sp, #24
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	695b      	ldr	r3, [r3, #20]
 800f77e:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f788:	d007      	beq.n	800f79a <dir_remove+0x2e>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f78e:	4619      	mov	r1, r3
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f7ff f9ba 	bl	800eb0a <dir_sdi>
 800f796:	4603      	mov	r3, r0
 800f798:	e000      	b.n	800f79c <dir_remove+0x30>
 800f79a:	2300      	movs	r3, #0
 800f79c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f79e:	7dfb      	ldrb	r3, [r7, #23]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d128      	bne.n	800f7f6 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	69db      	ldr	r3, [r3, #28]
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	6938      	ldr	r0, [r7, #16]
 800f7ac:	f7fe fdd4 	bl	800e358 <move_window>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f7b4:	7dfb      	ldrb	r3, [r7, #23]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d115      	bne.n	800f7e6 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6a1b      	ldr	r3, [r3, #32]
 800f7be:	22e5      	movs	r2, #229	; 0xe5
 800f7c0:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	695b      	ldr	r3, [r3, #20]
 800f7cc:	68fa      	ldr	r2, [r7, #12]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d90b      	bls.n	800f7ea <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800f7d2:	2100      	movs	r1, #0
 800f7d4:	6878      	ldr	r0, [r7, #4]
 800f7d6:	f7ff fa21 	bl	800ec1c <dir_next>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800f7de:	7dfb      	ldrb	r3, [r7, #23]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d0df      	beq.n	800f7a4 <dir_remove+0x38>
 800f7e4:	e002      	b.n	800f7ec <dir_remove+0x80>
			if (res != FR_OK) break;
 800f7e6:	bf00      	nop
 800f7e8:	e000      	b.n	800f7ec <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800f7ea:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800f7ec:	7dfb      	ldrb	r3, [r7, #23]
 800f7ee:	2b04      	cmp	r3, #4
 800f7f0:	d101      	bne.n	800f7f6 <dir_remove+0x8a>
 800f7f2:	2302      	movs	r3, #2
 800f7f4:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800f7f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3718      	adds	r7, #24
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b08a      	sub	sp, #40	; 0x28
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	613b      	str	r3, [r7, #16]
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	691b      	ldr	r3, [r3, #16]
 800f816:	60fb      	str	r3, [r7, #12]
 800f818:	2300      	movs	r3, #0
 800f81a:	617b      	str	r3, [r7, #20]
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f820:	69bb      	ldr	r3, [r7, #24]
 800f822:	1c5a      	adds	r2, r3, #1
 800f824:	61ba      	str	r2, [r7, #24]
 800f826:	693a      	ldr	r2, [r7, #16]
 800f828:	4413      	add	r3, r2
 800f82a:	781b      	ldrb	r3, [r3, #0]
 800f82c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f82e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f830:	2b1f      	cmp	r3, #31
 800f832:	d940      	bls.n	800f8b6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f834:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f836:	2b2f      	cmp	r3, #47	; 0x2f
 800f838:	d006      	beq.n	800f848 <create_name+0x48>
 800f83a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f83c:	2b5c      	cmp	r3, #92	; 0x5c
 800f83e:	d110      	bne.n	800f862 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f840:	e002      	b.n	800f848 <create_name+0x48>
 800f842:	69bb      	ldr	r3, [r7, #24]
 800f844:	3301      	adds	r3, #1
 800f846:	61bb      	str	r3, [r7, #24]
 800f848:	693a      	ldr	r2, [r7, #16]
 800f84a:	69bb      	ldr	r3, [r7, #24]
 800f84c:	4413      	add	r3, r2
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	2b2f      	cmp	r3, #47	; 0x2f
 800f852:	d0f6      	beq.n	800f842 <create_name+0x42>
 800f854:	693a      	ldr	r2, [r7, #16]
 800f856:	69bb      	ldr	r3, [r7, #24]
 800f858:	4413      	add	r3, r2
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	2b5c      	cmp	r3, #92	; 0x5c
 800f85e:	d0f0      	beq.n	800f842 <create_name+0x42>
			break;
 800f860:	e02a      	b.n	800f8b8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	2bfe      	cmp	r3, #254	; 0xfe
 800f866:	d901      	bls.n	800f86c <create_name+0x6c>
 800f868:	2306      	movs	r3, #6
 800f86a:	e1c9      	b.n	800fc00 <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f86c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f86e:	b2db      	uxtb	r3, r3
 800f870:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f874:	2101      	movs	r1, #1
 800f876:	4618      	mov	r0, r3
 800f878:	f002 f848 	bl	801190c <ff_convert>
 800f87c:	4603      	mov	r3, r0
 800f87e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f880:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f882:	2b00      	cmp	r3, #0
 800f884:	d101      	bne.n	800f88a <create_name+0x8a>
 800f886:	2306      	movs	r3, #6
 800f888:	e1ba      	b.n	800fc00 <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f88a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f88c:	2b7f      	cmp	r3, #127	; 0x7f
 800f88e:	d809      	bhi.n	800f8a4 <create_name+0xa4>
 800f890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f892:	4619      	mov	r1, r3
 800f894:	48a5      	ldr	r0, [pc, #660]	; (800fb2c <create_name+0x32c>)
 800f896:	f7fe fb93 	bl	800dfc0 <chk_chr>
 800f89a:	4603      	mov	r3, r0
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d001      	beq.n	800f8a4 <create_name+0xa4>
 800f8a0:	2306      	movs	r3, #6
 800f8a2:	e1ad      	b.n	800fc00 <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	1c5a      	adds	r2, r3, #1
 800f8a8:	617a      	str	r2, [r7, #20]
 800f8aa:	005b      	lsls	r3, r3, #1
 800f8ac:	68fa      	ldr	r2, [r7, #12]
 800f8ae:	4413      	add	r3, r2
 800f8b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f8b2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f8b4:	e7b4      	b.n	800f820 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f8b6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f8b8:	693a      	ldr	r2, [r7, #16]
 800f8ba:	69bb      	ldr	r3, [r7, #24]
 800f8bc:	441a      	add	r2, r3
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f8c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8c4:	2b1f      	cmp	r3, #31
 800f8c6:	d801      	bhi.n	800f8cc <create_name+0xcc>
 800f8c8:	2304      	movs	r3, #4
 800f8ca:	e000      	b.n	800f8ce <create_name+0xce>
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	2b01      	cmp	r3, #1
 800f8d6:	d109      	bne.n	800f8ec <create_name+0xec>
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f8de:	3b01      	subs	r3, #1
 800f8e0:	005b      	lsls	r3, r3, #1
 800f8e2:	68fa      	ldr	r2, [r7, #12]
 800f8e4:	4413      	add	r3, r2
 800f8e6:	881b      	ldrh	r3, [r3, #0]
 800f8e8:	2b2e      	cmp	r3, #46	; 0x2e
 800f8ea:	d016      	beq.n	800f91a <create_name+0x11a>
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	2b02      	cmp	r3, #2
 800f8f0:	d14e      	bne.n	800f990 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800f8f2:	697b      	ldr	r3, [r7, #20]
 800f8f4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f8f8:	3b01      	subs	r3, #1
 800f8fa:	005b      	lsls	r3, r3, #1
 800f8fc:	68fa      	ldr	r2, [r7, #12]
 800f8fe:	4413      	add	r3, r2
 800f900:	881b      	ldrh	r3, [r3, #0]
 800f902:	2b2e      	cmp	r3, #46	; 0x2e
 800f904:	d144      	bne.n	800f990 <create_name+0x190>
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f90c:	3b02      	subs	r3, #2
 800f90e:	005b      	lsls	r3, r3, #1
 800f910:	68fa      	ldr	r2, [r7, #12]
 800f912:	4413      	add	r3, r2
 800f914:	881b      	ldrh	r3, [r3, #0]
 800f916:	2b2e      	cmp	r3, #46	; 0x2e
 800f918:	d13a      	bne.n	800f990 <create_name+0x190>
		lfn[di] = 0;
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	005b      	lsls	r3, r3, #1
 800f91e:	68fa      	ldr	r2, [r7, #12]
 800f920:	4413      	add	r3, r2
 800f922:	2200      	movs	r2, #0
 800f924:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800f926:	2300      	movs	r3, #0
 800f928:	623b      	str	r3, [r7, #32]
 800f92a:	e00f      	b.n	800f94c <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800f92c:	6a3a      	ldr	r2, [r7, #32]
 800f92e:	697b      	ldr	r3, [r7, #20]
 800f930:	429a      	cmp	r2, r3
 800f932:	d201      	bcs.n	800f938 <create_name+0x138>
 800f934:	212e      	movs	r1, #46	; 0x2e
 800f936:	e000      	b.n	800f93a <create_name+0x13a>
 800f938:	2120      	movs	r1, #32
 800f93a:	687a      	ldr	r2, [r7, #4]
 800f93c:	6a3b      	ldr	r3, [r7, #32]
 800f93e:	4413      	add	r3, r2
 800f940:	3324      	adds	r3, #36	; 0x24
 800f942:	460a      	mov	r2, r1
 800f944:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800f946:	6a3b      	ldr	r3, [r7, #32]
 800f948:	3301      	adds	r3, #1
 800f94a:	623b      	str	r3, [r7, #32]
 800f94c:	6a3b      	ldr	r3, [r7, #32]
 800f94e:	2b0a      	cmp	r3, #10
 800f950:	d9ec      	bls.n	800f92c <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800f952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f956:	f043 0320 	orr.w	r3, r3, #32
 800f95a:	b2d9      	uxtb	r1, r3
 800f95c:	687a      	ldr	r2, [r7, #4]
 800f95e:	6a3b      	ldr	r3, [r7, #32]
 800f960:	4413      	add	r3, r2
 800f962:	3324      	adds	r3, #36	; 0x24
 800f964:	460a      	mov	r2, r1
 800f966:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800f968:	2300      	movs	r3, #0
 800f96a:	e149      	b.n	800fc00 <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f972:	3b01      	subs	r3, #1
 800f974:	005b      	lsls	r3, r3, #1
 800f976:	68fa      	ldr	r2, [r7, #12]
 800f978:	4413      	add	r3, r2
 800f97a:	881b      	ldrh	r3, [r3, #0]
 800f97c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f97e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f980:	2b20      	cmp	r3, #32
 800f982:	d002      	beq.n	800f98a <create_name+0x18a>
 800f984:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f986:	2b2e      	cmp	r3, #46	; 0x2e
 800f988:	d106      	bne.n	800f998 <create_name+0x198>
		di--;
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	3b01      	subs	r3, #1
 800f98e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f990:	697b      	ldr	r3, [r7, #20]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d1ea      	bne.n	800f96c <create_name+0x16c>
 800f996:	e000      	b.n	800f99a <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800f998:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	005b      	lsls	r3, r3, #1
 800f99e:	68fa      	ldr	r2, [r7, #12]
 800f9a0:	4413      	add	r3, r2
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d101      	bne.n	800f9b0 <create_name+0x1b0>
 800f9ac:	2306      	movs	r3, #6
 800f9ae:	e127      	b.n	800fc00 <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	3324      	adds	r3, #36	; 0x24
 800f9b4:	220b      	movs	r2, #11
 800f9b6:	2120      	movs	r1, #32
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7fe fac0 	bl	800df3e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f9be:	2300      	movs	r3, #0
 800f9c0:	61bb      	str	r3, [r7, #24]
 800f9c2:	e002      	b.n	800f9ca <create_name+0x1ca>
 800f9c4:	69bb      	ldr	r3, [r7, #24]
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	61bb      	str	r3, [r7, #24]
 800f9ca:	69bb      	ldr	r3, [r7, #24]
 800f9cc:	005b      	lsls	r3, r3, #1
 800f9ce:	68fa      	ldr	r2, [r7, #12]
 800f9d0:	4413      	add	r3, r2
 800f9d2:	881b      	ldrh	r3, [r3, #0]
 800f9d4:	2b20      	cmp	r3, #32
 800f9d6:	d0f5      	beq.n	800f9c4 <create_name+0x1c4>
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	005b      	lsls	r3, r3, #1
 800f9dc:	68fa      	ldr	r2, [r7, #12]
 800f9de:	4413      	add	r3, r2
 800f9e0:	881b      	ldrh	r3, [r3, #0]
 800f9e2:	2b2e      	cmp	r3, #46	; 0x2e
 800f9e4:	d0ee      	beq.n	800f9c4 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f9e6:	69bb      	ldr	r3, [r7, #24]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d009      	beq.n	800fa00 <create_name+0x200>
 800f9ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9f0:	f043 0303 	orr.w	r3, r3, #3
 800f9f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f9f8:	e002      	b.n	800fa00 <create_name+0x200>
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	3b01      	subs	r3, #1
 800f9fe:	617b      	str	r3, [r7, #20]
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d009      	beq.n	800fa1a <create_name+0x21a>
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fa0c:	3b01      	subs	r3, #1
 800fa0e:	005b      	lsls	r3, r3, #1
 800fa10:	68fa      	ldr	r2, [r7, #12]
 800fa12:	4413      	add	r3, r2
 800fa14:	881b      	ldrh	r3, [r3, #0]
 800fa16:	2b2e      	cmp	r3, #46	; 0x2e
 800fa18:	d1ef      	bne.n	800f9fa <create_name+0x1fa>

	i = b = 0; ni = 8;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fa20:	2300      	movs	r3, #0
 800fa22:	623b      	str	r3, [r7, #32]
 800fa24:	2308      	movs	r3, #8
 800fa26:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800fa28:	69bb      	ldr	r3, [r7, #24]
 800fa2a:	1c5a      	adds	r2, r3, #1
 800fa2c:	61ba      	str	r2, [r7, #24]
 800fa2e:	005b      	lsls	r3, r3, #1
 800fa30:	68fa      	ldr	r2, [r7, #12]
 800fa32:	4413      	add	r3, r2
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800fa38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	f000 8096 	beq.w	800fb6c <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800fa40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa42:	2b20      	cmp	r3, #32
 800fa44:	d006      	beq.n	800fa54 <create_name+0x254>
 800fa46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa48:	2b2e      	cmp	r3, #46	; 0x2e
 800fa4a:	d10a      	bne.n	800fa62 <create_name+0x262>
 800fa4c:	69ba      	ldr	r2, [r7, #24]
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d006      	beq.n	800fa62 <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800fa54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa58:	f043 0303 	orr.w	r3, r3, #3
 800fa5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa60:	e083      	b.n	800fb6a <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800fa62:	6a3a      	ldr	r2, [r7, #32]
 800fa64:	69fb      	ldr	r3, [r7, #28]
 800fa66:	429a      	cmp	r2, r3
 800fa68:	d203      	bcs.n	800fa72 <create_name+0x272>
 800fa6a:	69ba      	ldr	r2, [r7, #24]
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	429a      	cmp	r2, r3
 800fa70:	d123      	bne.n	800faba <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800fa72:	69fb      	ldr	r3, [r7, #28]
 800fa74:	2b0b      	cmp	r3, #11
 800fa76:	d106      	bne.n	800fa86 <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800fa78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa7c:	f043 0303 	orr.w	r3, r3, #3
 800fa80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa84:	e075      	b.n	800fb72 <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800fa86:	69ba      	ldr	r2, [r7, #24]
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d005      	beq.n	800fa9a <create_name+0x29a>
 800fa8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa92:	f043 0303 	orr.w	r3, r3, #3
 800fa96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800fa9a:	69ba      	ldr	r2, [r7, #24]
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d866      	bhi.n	800fb70 <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	61bb      	str	r3, [r7, #24]
 800faa6:	2308      	movs	r3, #8
 800faa8:	623b      	str	r3, [r7, #32]
 800faaa:	230b      	movs	r3, #11
 800faac:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800faae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fab2:	009b      	lsls	r3, r3, #2
 800fab4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fab8:	e057      	b.n	800fb6a <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800faba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fabc:	2b7f      	cmp	r3, #127	; 0x7f
 800fabe:	d914      	bls.n	800faea <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800fac0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fac2:	2100      	movs	r1, #0
 800fac4:	4618      	mov	r0, r3
 800fac6:	f001 ff21 	bl	801190c <ff_convert>
 800faca:	4603      	mov	r3, r0
 800facc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800face:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d004      	beq.n	800fade <create_name+0x2de>
 800fad4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fad6:	3b80      	subs	r3, #128	; 0x80
 800fad8:	4a15      	ldr	r2, [pc, #84]	; (800fb30 <create_name+0x330>)
 800fada:	5cd3      	ldrb	r3, [r2, r3]
 800fadc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800fade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fae2:	f043 0302 	orr.w	r3, r3, #2
 800fae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800faea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800faec:	2b00      	cmp	r3, #0
 800faee:	d007      	beq.n	800fb00 <create_name+0x300>
 800faf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800faf2:	4619      	mov	r1, r3
 800faf4:	480f      	ldr	r0, [pc, #60]	; (800fb34 <create_name+0x334>)
 800faf6:	f7fe fa63 	bl	800dfc0 <chk_chr>
 800fafa:	4603      	mov	r3, r0
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d008      	beq.n	800fb12 <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800fb00:	235f      	movs	r3, #95	; 0x5f
 800fb02:	84bb      	strh	r3, [r7, #36]	; 0x24
 800fb04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb08:	f043 0303 	orr.w	r3, r3, #3
 800fb0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb10:	e021      	b.n	800fb56 <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800fb12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb14:	2b40      	cmp	r3, #64	; 0x40
 800fb16:	d90f      	bls.n	800fb38 <create_name+0x338>
 800fb18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb1a:	2b5a      	cmp	r3, #90	; 0x5a
 800fb1c:	d80c      	bhi.n	800fb38 <create_name+0x338>
					b |= 2;
 800fb1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fb22:	f043 0302 	orr.w	r3, r3, #2
 800fb26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fb2a:	e014      	b.n	800fb56 <create_name+0x356>
 800fb2c:	08017d3c 	.word	0x08017d3c
 800fb30:	08017dc4 	.word	0x08017dc4
 800fb34:	08017d48 	.word	0x08017d48
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800fb38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb3a:	2b60      	cmp	r3, #96	; 0x60
 800fb3c:	d90b      	bls.n	800fb56 <create_name+0x356>
 800fb3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb40:	2b7a      	cmp	r3, #122	; 0x7a
 800fb42:	d808      	bhi.n	800fb56 <create_name+0x356>
						b |= 1; w -= 0x20;
 800fb44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fb48:	f043 0301 	orr.w	r3, r3, #1
 800fb4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fb50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb52:	3b20      	subs	r3, #32
 800fb54:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800fb56:	6a3b      	ldr	r3, [r7, #32]
 800fb58:	1c5a      	adds	r2, r3, #1
 800fb5a:	623a      	str	r2, [r7, #32]
 800fb5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fb5e:	b2d1      	uxtb	r1, r2
 800fb60:	687a      	ldr	r2, [r7, #4]
 800fb62:	4413      	add	r3, r2
 800fb64:	460a      	mov	r2, r1
 800fb66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800fb6a:	e75d      	b.n	800fa28 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800fb6c:	bf00      	nop
 800fb6e:	e000      	b.n	800fb72 <create_name+0x372>
			if (si > di) break;			/* No extension */
 800fb70:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800fb78:	2be5      	cmp	r3, #229	; 0xe5
 800fb7a:	d103      	bne.n	800fb84 <create_name+0x384>
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2205      	movs	r2, #5
 800fb80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800fb84:	69fb      	ldr	r3, [r7, #28]
 800fb86:	2b08      	cmp	r3, #8
 800fb88:	d104      	bne.n	800fb94 <create_name+0x394>
 800fb8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fb8e:	009b      	lsls	r3, r3, #2
 800fb90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800fb94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fb98:	f003 030c 	and.w	r3, r3, #12
 800fb9c:	2b0c      	cmp	r3, #12
 800fb9e:	d005      	beq.n	800fbac <create_name+0x3ac>
 800fba0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fba4:	f003 0303 	and.w	r3, r3, #3
 800fba8:	2b03      	cmp	r3, #3
 800fbaa:	d105      	bne.n	800fbb8 <create_name+0x3b8>
 800fbac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbb0:	f043 0302 	orr.w	r3, r3, #2
 800fbb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800fbb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbbc:	f003 0302 	and.w	r3, r3, #2
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d117      	bne.n	800fbf4 <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800fbc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fbc8:	f003 0303 	and.w	r3, r3, #3
 800fbcc:	2b01      	cmp	r3, #1
 800fbce:	d105      	bne.n	800fbdc <create_name+0x3dc>
 800fbd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbd4:	f043 0310 	orr.w	r3, r3, #16
 800fbd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800fbdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fbe0:	f003 030c 	and.w	r3, r3, #12
 800fbe4:	2b04      	cmp	r3, #4
 800fbe6:	d105      	bne.n	800fbf4 <create_name+0x3f4>
 800fbe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbec:	f043 0308 	orr.w	r3, r3, #8
 800fbf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fbfa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800fbfe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800fc00:	4618      	mov	r0, r3
 800fc02:	3728      	adds	r7, #40	; 0x28
 800fc04:	46bd      	mov	sp, r7
 800fc06:	bd80      	pop	{r7, pc}

0800fc08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b086      	sub	sp, #24
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	2b2f      	cmp	r3, #47	; 0x2f
 800fc22:	d00b      	beq.n	800fc3c <follow_path+0x34>
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	781b      	ldrb	r3, [r3, #0]
 800fc28:	2b5c      	cmp	r3, #92	; 0x5c
 800fc2a:	d007      	beq.n	800fc3c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	69da      	ldr	r2, [r3, #28]
 800fc30:	693b      	ldr	r3, [r7, #16]
 800fc32:	609a      	str	r2, [r3, #8]
 800fc34:	e00d      	b.n	800fc52 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fc36:	683b      	ldr	r3, [r7, #0]
 800fc38:	3301      	adds	r3, #1
 800fc3a:	603b      	str	r3, [r7, #0]
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	781b      	ldrb	r3, [r3, #0]
 800fc40:	2b2f      	cmp	r3, #47	; 0x2f
 800fc42:	d0f8      	beq.n	800fc36 <follow_path+0x2e>
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	2b5c      	cmp	r3, #92	; 0x5c
 800fc4a:	d0f4      	beq.n	800fc36 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	2200      	movs	r2, #0
 800fc50:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fc52:	683b      	ldr	r3, [r7, #0]
 800fc54:	781b      	ldrb	r3, [r3, #0]
 800fc56:	2b1f      	cmp	r3, #31
 800fc58:	d80a      	bhi.n	800fc70 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2280      	movs	r2, #128	; 0x80
 800fc5e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fc62:	2100      	movs	r1, #0
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f7fe ff50 	bl	800eb0a <dir_sdi>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	75fb      	strb	r3, [r7, #23]
 800fc6e:	e05b      	b.n	800fd28 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fc70:	463b      	mov	r3, r7
 800fc72:	4619      	mov	r1, r3
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f7ff fdc3 	bl	800f800 <create_name>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fc7e:	7dfb      	ldrb	r3, [r7, #23]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d14c      	bne.n	800fd1e <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f7ff fbb8 	bl	800f3fa <dir_find>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fc94:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fc96:	7dfb      	ldrb	r3, [r7, #23]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d01b      	beq.n	800fcd4 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fc9c:	7dfb      	ldrb	r3, [r7, #23]
 800fc9e:	2b04      	cmp	r3, #4
 800fca0:	d13f      	bne.n	800fd22 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800fca2:	7afb      	ldrb	r3, [r7, #11]
 800fca4:	f003 0320 	and.w	r3, r3, #32
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d00b      	beq.n	800fcc4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800fcac:	7afb      	ldrb	r3, [r7, #11]
 800fcae:	f003 0304 	and.w	r3, r3, #4
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d031      	beq.n	800fd1a <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	2280      	movs	r2, #128	; 0x80
 800fcba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800fcc2:	e02e      	b.n	800fd22 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fcc4:	7afb      	ldrb	r3, [r7, #11]
 800fcc6:	f003 0304 	and.w	r3, r3, #4
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d129      	bne.n	800fd22 <follow_path+0x11a>
 800fcce:	2305      	movs	r3, #5
 800fcd0:	75fb      	strb	r3, [r7, #23]
				break;
 800fcd2:	e026      	b.n	800fd22 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fcd4:	7afb      	ldrb	r3, [r7, #11]
 800fcd6:	f003 0304 	and.w	r3, r3, #4
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d123      	bne.n	800fd26 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	799b      	ldrb	r3, [r3, #6]
 800fce2:	f003 0310 	and.w	r3, r3, #16
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d102      	bne.n	800fcf0 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800fcea:	2305      	movs	r3, #5
 800fcec:	75fb      	strb	r3, [r7, #23]
 800fcee:	e01b      	b.n	800fd28 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	695b      	ldr	r3, [r3, #20]
 800fcfa:	68fa      	ldr	r2, [r7, #12]
 800fcfc:	8992      	ldrh	r2, [r2, #12]
 800fcfe:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd02:	fb02 f200 	mul.w	r2, r2, r0
 800fd06:	1a9b      	subs	r3, r3, r2
 800fd08:	440b      	add	r3, r1
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	68f8      	ldr	r0, [r7, #12]
 800fd0e:	f7ff f8a2 	bl	800ee56 <ld_clust>
 800fd12:	4602      	mov	r2, r0
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	609a      	str	r2, [r3, #8]
 800fd18:	e7aa      	b.n	800fc70 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800fd1a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fd1c:	e7a8      	b.n	800fc70 <follow_path+0x68>
			if (res != FR_OK) break;
 800fd1e:	bf00      	nop
 800fd20:	e002      	b.n	800fd28 <follow_path+0x120>
				break;
 800fd22:	bf00      	nop
 800fd24:	e000      	b.n	800fd28 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fd26:	bf00      	nop
			}
		}
	}

	return res;
 800fd28:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	3718      	adds	r7, #24
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}

0800fd32 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fd32:	b480      	push	{r7}
 800fd34:	b087      	sub	sp, #28
 800fd36:	af00      	add	r7, sp, #0
 800fd38:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fd3a:	f04f 33ff 	mov.w	r3, #4294967295
 800fd3e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d031      	beq.n	800fdac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	617b      	str	r3, [r7, #20]
 800fd4e:	e002      	b.n	800fd56 <get_ldnumber+0x24>
 800fd50:	697b      	ldr	r3, [r7, #20]
 800fd52:	3301      	adds	r3, #1
 800fd54:	617b      	str	r3, [r7, #20]
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	781b      	ldrb	r3, [r3, #0]
 800fd5a:	2b1f      	cmp	r3, #31
 800fd5c:	d903      	bls.n	800fd66 <get_ldnumber+0x34>
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	2b3a      	cmp	r3, #58	; 0x3a
 800fd64:	d1f4      	bne.n	800fd50 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fd66:	697b      	ldr	r3, [r7, #20]
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	2b3a      	cmp	r3, #58	; 0x3a
 800fd6c:	d11c      	bne.n	800fda8 <get_ldnumber+0x76>
			tp = *path;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	1c5a      	adds	r2, r3, #1
 800fd78:	60fa      	str	r2, [r7, #12]
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	3b30      	subs	r3, #48	; 0x30
 800fd7e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	2b09      	cmp	r3, #9
 800fd84:	d80e      	bhi.n	800fda4 <get_ldnumber+0x72>
 800fd86:	68fa      	ldr	r2, [r7, #12]
 800fd88:	697b      	ldr	r3, [r7, #20]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d10a      	bne.n	800fda4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d107      	bne.n	800fda4 <get_ldnumber+0x72>
					vol = (int)i;
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	3301      	adds	r3, #1
 800fd9c:	617b      	str	r3, [r7, #20]
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	697a      	ldr	r2, [r7, #20]
 800fda2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	e002      	b.n	800fdae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fda8:	2300      	movs	r3, #0
 800fdaa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fdac:	693b      	ldr	r3, [r7, #16]
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	371c      	adds	r7, #28
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb8:	4770      	bx	lr
	...

0800fdbc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fdbc:	b580      	push	{r7, lr}
 800fdbe:	b082      	sub	sp, #8
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2200      	movs	r2, #0
 800fdca:	70da      	strb	r2, [r3, #3]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f04f 32ff 	mov.w	r2, #4294967295
 800fdd2:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fdd4:	6839      	ldr	r1, [r7, #0]
 800fdd6:	6878      	ldr	r0, [r7, #4]
 800fdd8:	f7fe fabe 	bl	800e358 <move_window>
 800fddc:	4603      	mov	r3, r0
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d001      	beq.n	800fde6 <check_fs+0x2a>
 800fde2:	2304      	movs	r3, #4
 800fde4:	e038      	b.n	800fe58 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	333c      	adds	r3, #60	; 0x3c
 800fdea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7fe f802 	bl	800ddf8 <ld_word>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	d001      	beq.n	800fe04 <check_fs+0x48>
 800fe00:	2303      	movs	r3, #3
 800fe02:	e029      	b.n	800fe58 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe0a:	2be9      	cmp	r3, #233	; 0xe9
 800fe0c:	d009      	beq.n	800fe22 <check_fs+0x66>
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe14:	2beb      	cmp	r3, #235	; 0xeb
 800fe16:	d11e      	bne.n	800fe56 <check_fs+0x9a>
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fe1e:	2b90      	cmp	r3, #144	; 0x90
 800fe20:	d119      	bne.n	800fe56 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	333c      	adds	r3, #60	; 0x3c
 800fe26:	3336      	adds	r3, #54	; 0x36
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7fd fffd 	bl	800de28 <ld_dword>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fe34:	4a0a      	ldr	r2, [pc, #40]	; (800fe60 <check_fs+0xa4>)
 800fe36:	4293      	cmp	r3, r2
 800fe38:	d101      	bne.n	800fe3e <check_fs+0x82>
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	e00c      	b.n	800fe58 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	333c      	adds	r3, #60	; 0x3c
 800fe42:	3352      	adds	r3, #82	; 0x52
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7fd ffef 	bl	800de28 <ld_dword>
 800fe4a:	4602      	mov	r2, r0
 800fe4c:	4b05      	ldr	r3, [pc, #20]	; (800fe64 <check_fs+0xa8>)
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d101      	bne.n	800fe56 <check_fs+0x9a>
 800fe52:	2300      	movs	r3, #0
 800fe54:	e000      	b.n	800fe58 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fe56:	2302      	movs	r3, #2
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3708      	adds	r7, #8
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}
 800fe60:	00544146 	.word	0x00544146
 800fe64:	33544146 	.word	0x33544146

0800fe68 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b096      	sub	sp, #88	; 0x58
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	60f8      	str	r0, [r7, #12]
 800fe70:	60b9      	str	r1, [r7, #8]
 800fe72:	4613      	mov	r3, r2
 800fe74:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fe7c:	68f8      	ldr	r0, [r7, #12]
 800fe7e:	f7ff ff58 	bl	800fd32 <get_ldnumber>
 800fe82:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fe84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	da01      	bge.n	800fe8e <find_volume+0x26>
 800fe8a:	230b      	movs	r3, #11
 800fe8c:	e26b      	b.n	8010366 <find_volume+0x4fe>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fe8e:	4ab0      	ldr	r2, [pc, #704]	; (8010150 <find_volume+0x2e8>)
 800fe90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe96:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fe98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d101      	bne.n	800fea2 <find_volume+0x3a>
 800fe9e:	230c      	movs	r3, #12
 800fea0:	e261      	b.n	8010366 <find_volume+0x4fe>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fea6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fea8:	79fb      	ldrb	r3, [r7, #7]
 800feaa:	f023 0301 	bic.w	r3, r3, #1
 800feae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800feb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d01a      	beq.n	800feee <find_volume+0x86>
		stat = disk_status(fs->drv);
 800feb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feba:	785b      	ldrb	r3, [r3, #1]
 800febc:	4618      	mov	r0, r3
 800febe:	f7fd fefd 	bl	800dcbc <disk_status>
 800fec2:	4603      	mov	r3, r0
 800fec4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fec8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fecc:	f003 0301 	and.w	r3, r3, #1
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d10c      	bne.n	800feee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fed4:	79fb      	ldrb	r3, [r7, #7]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d007      	beq.n	800feea <find_volume+0x82>
 800feda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fede:	f003 0304 	and.w	r3, r3, #4
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d001      	beq.n	800feea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fee6:	230a      	movs	r3, #10
 800fee8:	e23d      	b.n	8010366 <find_volume+0x4fe>
			}
			return FR_OK;				/* The file system object is valid */
 800feea:	2300      	movs	r3, #0
 800feec:	e23b      	b.n	8010366 <find_volume+0x4fe>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800feee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef0:	2200      	movs	r2, #0
 800fef2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fef6:	b2da      	uxtb	r2, r3
 800fef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefe:	785b      	ldrb	r3, [r3, #1]
 800ff00:	4618      	mov	r0, r3
 800ff02:	f7fd fef5 	bl	800dcf0 <disk_initialize>
 800ff06:	4603      	mov	r3, r0
 800ff08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ff0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff10:	f003 0301 	and.w	r3, r3, #1
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d001      	beq.n	800ff1c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ff18:	2303      	movs	r3, #3
 800ff1a:	e224      	b.n	8010366 <find_volume+0x4fe>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ff1c:	79fb      	ldrb	r3, [r7, #7]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d007      	beq.n	800ff32 <find_volume+0xca>
 800ff22:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff26:	f003 0304 	and.w	r3, r3, #4
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d001      	beq.n	800ff32 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ff2e:	230a      	movs	r3, #10
 800ff30:	e219      	b.n	8010366 <find_volume+0x4fe>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ff32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff34:	7858      	ldrb	r0, [r3, #1]
 800ff36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff38:	330c      	adds	r3, #12
 800ff3a:	461a      	mov	r2, r3
 800ff3c:	2102      	movs	r1, #2
 800ff3e:	f7fd ff3d 	bl	800ddbc <disk_ioctl>
 800ff42:	4603      	mov	r3, r0
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d001      	beq.n	800ff4c <find_volume+0xe4>
 800ff48:	2301      	movs	r3, #1
 800ff4a:	e20c      	b.n	8010366 <find_volume+0x4fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ff4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4e:	899b      	ldrh	r3, [r3, #12]
 800ff50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff54:	d80d      	bhi.n	800ff72 <find_volume+0x10a>
 800ff56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff58:	899b      	ldrh	r3, [r3, #12]
 800ff5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff5e:	d308      	bcc.n	800ff72 <find_volume+0x10a>
 800ff60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff62:	899b      	ldrh	r3, [r3, #12]
 800ff64:	461a      	mov	r2, r3
 800ff66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff68:	899b      	ldrh	r3, [r3, #12]
 800ff6a:	3b01      	subs	r3, #1
 800ff6c:	4013      	ands	r3, r2
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d001      	beq.n	800ff76 <find_volume+0x10e>
 800ff72:	2301      	movs	r3, #1
 800ff74:	e1f7      	b.n	8010366 <find_volume+0x4fe>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ff76:	2300      	movs	r3, #0
 800ff78:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ff7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ff7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff7e:	f7ff ff1d 	bl	800fdbc <check_fs>
 800ff82:	4603      	mov	r3, r0
 800ff84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ff88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff8c:	2b02      	cmp	r3, #2
 800ff8e:	d14b      	bne.n	8010028 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ff90:	2300      	movs	r3, #0
 800ff92:	643b      	str	r3, [r7, #64]	; 0x40
 800ff94:	e01f      	b.n	800ffd6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ff96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff98:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800ff9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff9e:	011b      	lsls	r3, r3, #4
 800ffa0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ffa4:	4413      	add	r3, r2
 800ffa6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ffa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffaa:	3304      	adds	r3, #4
 800ffac:	781b      	ldrb	r3, [r3, #0]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d006      	beq.n	800ffc0 <find_volume+0x158>
 800ffb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb4:	3308      	adds	r3, #8
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7fd ff36 	bl	800de28 <ld_dword>
 800ffbc:	4602      	mov	r2, r0
 800ffbe:	e000      	b.n	800ffc2 <find_volume+0x15a>
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffc4:	009b      	lsls	r3, r3, #2
 800ffc6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ffca:	440b      	add	r3, r1
 800ffcc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ffd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	643b      	str	r3, [r7, #64]	; 0x40
 800ffd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffd8:	2b03      	cmp	r3, #3
 800ffda:	d9dc      	bls.n	800ff96 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ffdc:	2300      	movs	r3, #0
 800ffde:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ffe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d002      	beq.n	800ffec <find_volume+0x184>
 800ffe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffe8:	3b01      	subs	r3, #1
 800ffea:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ffec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffee:	009b      	lsls	r3, r3, #2
 800fff0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fff4:	4413      	add	r3, r2
 800fff6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fffa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d005      	beq.n	801000e <find_volume+0x1a6>
 8010002:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010004:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010006:	f7ff fed9 	bl	800fdbc <check_fs>
 801000a:	4603      	mov	r3, r0
 801000c:	e000      	b.n	8010010 <find_volume+0x1a8>
 801000e:	2303      	movs	r3, #3
 8010010:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010014:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010018:	2b01      	cmp	r3, #1
 801001a:	d905      	bls.n	8010028 <find_volume+0x1c0>
 801001c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801001e:	3301      	adds	r3, #1
 8010020:	643b      	str	r3, [r7, #64]	; 0x40
 8010022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010024:	2b03      	cmp	r3, #3
 8010026:	d9e1      	bls.n	800ffec <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010028:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801002c:	2b04      	cmp	r3, #4
 801002e:	d101      	bne.n	8010034 <find_volume+0x1cc>
 8010030:	2301      	movs	r3, #1
 8010032:	e198      	b.n	8010366 <find_volume+0x4fe>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010034:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010038:	2b01      	cmp	r3, #1
 801003a:	d901      	bls.n	8010040 <find_volume+0x1d8>
 801003c:	230d      	movs	r3, #13
 801003e:	e192      	b.n	8010366 <find_volume+0x4fe>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010042:	333c      	adds	r3, #60	; 0x3c
 8010044:	330b      	adds	r3, #11
 8010046:	4618      	mov	r0, r3
 8010048:	f7fd fed6 	bl	800ddf8 <ld_word>
 801004c:	4603      	mov	r3, r0
 801004e:	461a      	mov	r2, r3
 8010050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010052:	899b      	ldrh	r3, [r3, #12]
 8010054:	429a      	cmp	r2, r3
 8010056:	d001      	beq.n	801005c <find_volume+0x1f4>
 8010058:	230d      	movs	r3, #13
 801005a:	e184      	b.n	8010366 <find_volume+0x4fe>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801005c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005e:	333c      	adds	r3, #60	; 0x3c
 8010060:	3316      	adds	r3, #22
 8010062:	4618      	mov	r0, r3
 8010064:	f7fd fec8 	bl	800ddf8 <ld_word>
 8010068:	4603      	mov	r3, r0
 801006a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801006c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801006e:	2b00      	cmp	r3, #0
 8010070:	d106      	bne.n	8010080 <find_volume+0x218>
 8010072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010074:	333c      	adds	r3, #60	; 0x3c
 8010076:	3324      	adds	r3, #36	; 0x24
 8010078:	4618      	mov	r0, r3
 801007a:	f7fd fed5 	bl	800de28 <ld_dword>
 801007e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010082:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010084:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010088:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 801008c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010092:	789b      	ldrb	r3, [r3, #2]
 8010094:	2b01      	cmp	r3, #1
 8010096:	d005      	beq.n	80100a4 <find_volume+0x23c>
 8010098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801009a:	789b      	ldrb	r3, [r3, #2]
 801009c:	2b02      	cmp	r3, #2
 801009e:	d001      	beq.n	80100a4 <find_volume+0x23c>
 80100a0:	230d      	movs	r3, #13
 80100a2:	e160      	b.n	8010366 <find_volume+0x4fe>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80100a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a6:	789b      	ldrb	r3, [r3, #2]
 80100a8:	461a      	mov	r2, r3
 80100aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100ac:	fb02 f303 	mul.w	r3, r2, r3
 80100b0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80100b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80100b8:	b29a      	uxth	r2, r3
 80100ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80100be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c0:	895b      	ldrh	r3, [r3, #10]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d008      	beq.n	80100d8 <find_volume+0x270>
 80100c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c8:	895b      	ldrh	r3, [r3, #10]
 80100ca:	461a      	mov	r2, r3
 80100cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ce:	895b      	ldrh	r3, [r3, #10]
 80100d0:	3b01      	subs	r3, #1
 80100d2:	4013      	ands	r3, r2
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d001      	beq.n	80100dc <find_volume+0x274>
 80100d8:	230d      	movs	r3, #13
 80100da:	e144      	b.n	8010366 <find_volume+0x4fe>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80100dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100de:	333c      	adds	r3, #60	; 0x3c
 80100e0:	3311      	adds	r3, #17
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7fd fe88 	bl	800ddf8 <ld_word>
 80100e8:	4603      	mov	r3, r0
 80100ea:	461a      	mov	r2, r3
 80100ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80100f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f2:	891b      	ldrh	r3, [r3, #8]
 80100f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100f6:	8992      	ldrh	r2, [r2, #12]
 80100f8:	0952      	lsrs	r2, r2, #5
 80100fa:	b292      	uxth	r2, r2
 80100fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8010100:	fb02 f201 	mul.w	r2, r2, r1
 8010104:	1a9b      	subs	r3, r3, r2
 8010106:	b29b      	uxth	r3, r3
 8010108:	2b00      	cmp	r3, #0
 801010a:	d001      	beq.n	8010110 <find_volume+0x2a8>
 801010c:	230d      	movs	r3, #13
 801010e:	e12a      	b.n	8010366 <find_volume+0x4fe>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010112:	333c      	adds	r3, #60	; 0x3c
 8010114:	3313      	adds	r3, #19
 8010116:	4618      	mov	r0, r3
 8010118:	f7fd fe6e 	bl	800ddf8 <ld_word>
 801011c:	4603      	mov	r3, r0
 801011e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010122:	2b00      	cmp	r3, #0
 8010124:	d106      	bne.n	8010134 <find_volume+0x2cc>
 8010126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010128:	333c      	adds	r3, #60	; 0x3c
 801012a:	3320      	adds	r3, #32
 801012c:	4618      	mov	r0, r3
 801012e:	f7fd fe7b 	bl	800de28 <ld_dword>
 8010132:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010136:	333c      	adds	r3, #60	; 0x3c
 8010138:	330e      	adds	r3, #14
 801013a:	4618      	mov	r0, r3
 801013c:	f7fd fe5c 	bl	800ddf8 <ld_word>
 8010140:	4603      	mov	r3, r0
 8010142:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010144:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010146:	2b00      	cmp	r3, #0
 8010148:	d104      	bne.n	8010154 <find_volume+0x2ec>
 801014a:	230d      	movs	r3, #13
 801014c:	e10b      	b.n	8010366 <find_volume+0x4fe>
 801014e:	bf00      	nop
 8010150:	20036a48 	.word	0x20036a48

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010154:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010158:	4413      	add	r3, r2
 801015a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801015c:	8911      	ldrh	r1, [r2, #8]
 801015e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010160:	8992      	ldrh	r2, [r2, #12]
 8010162:	0952      	lsrs	r2, r2, #5
 8010164:	b292      	uxth	r2, r2
 8010166:	fbb1 f2f2 	udiv	r2, r1, r2
 801016a:	b292      	uxth	r2, r2
 801016c:	4413      	add	r3, r2
 801016e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010170:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010174:	429a      	cmp	r2, r3
 8010176:	d201      	bcs.n	801017c <find_volume+0x314>
 8010178:	230d      	movs	r3, #13
 801017a:	e0f4      	b.n	8010366 <find_volume+0x4fe>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801017c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801017e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010180:	1ad3      	subs	r3, r2, r3
 8010182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010184:	8952      	ldrh	r2, [r2, #10]
 8010186:	fbb3 f3f2 	udiv	r3, r3, r2
 801018a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801018c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801018e:	2b00      	cmp	r3, #0
 8010190:	d101      	bne.n	8010196 <find_volume+0x32e>
 8010192:	230d      	movs	r3, #13
 8010194:	e0e7      	b.n	8010366 <find_volume+0x4fe>
		fmt = FS_FAT32;
 8010196:	2303      	movs	r3, #3
 8010198:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801019c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80101a2:	4293      	cmp	r3, r2
 80101a4:	d802      	bhi.n	80101ac <find_volume+0x344>
 80101a6:	2302      	movs	r3, #2
 80101a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80101ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ae:	f640 72f5 	movw	r2, #4085	; 0xff5
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d802      	bhi.n	80101bc <find_volume+0x354>
 80101b6:	2301      	movs	r3, #1
 80101b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80101bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101be:	1c9a      	adds	r2, r3, #2
 80101c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c2:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 80101c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80101c8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80101ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80101cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101ce:	441a      	add	r2, r3
 80101d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d2:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80101d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80101d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d8:	441a      	add	r2, r3
 80101da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101dc:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 80101de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80101e2:	2b03      	cmp	r3, #3
 80101e4:	d11e      	bne.n	8010224 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80101e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e8:	333c      	adds	r3, #60	; 0x3c
 80101ea:	332a      	adds	r3, #42	; 0x2a
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7fd fe03 	bl	800ddf8 <ld_word>
 80101f2:	4603      	mov	r3, r0
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d001      	beq.n	80101fc <find_volume+0x394>
 80101f8:	230d      	movs	r3, #13
 80101fa:	e0b4      	b.n	8010366 <find_volume+0x4fe>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80101fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101fe:	891b      	ldrh	r3, [r3, #8]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d001      	beq.n	8010208 <find_volume+0x3a0>
 8010204:	230d      	movs	r3, #13
 8010206:	e0ae      	b.n	8010366 <find_volume+0x4fe>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801020a:	333c      	adds	r3, #60	; 0x3c
 801020c:	332c      	adds	r3, #44	; 0x2c
 801020e:	4618      	mov	r0, r3
 8010210:	f7fd fe0a 	bl	800de28 <ld_dword>
 8010214:	4602      	mov	r2, r0
 8010216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010218:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801021a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801021c:	6a1b      	ldr	r3, [r3, #32]
 801021e:	009b      	lsls	r3, r3, #2
 8010220:	647b      	str	r3, [r7, #68]	; 0x44
 8010222:	e01f      	b.n	8010264 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010226:	891b      	ldrh	r3, [r3, #8]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d101      	bne.n	8010230 <find_volume+0x3c8>
 801022c:	230d      	movs	r3, #13
 801022e:	e09a      	b.n	8010366 <find_volume+0x4fe>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010236:	441a      	add	r2, r3
 8010238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801023a:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801023c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010240:	2b02      	cmp	r3, #2
 8010242:	d103      	bne.n	801024c <find_volume+0x3e4>
 8010244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010246:	6a1b      	ldr	r3, [r3, #32]
 8010248:	005b      	lsls	r3, r3, #1
 801024a:	e00a      	b.n	8010262 <find_volume+0x3fa>
 801024c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801024e:	6a1a      	ldr	r2, [r3, #32]
 8010250:	4613      	mov	r3, r2
 8010252:	005b      	lsls	r3, r3, #1
 8010254:	4413      	add	r3, r2
 8010256:	085a      	lsrs	r2, r3, #1
 8010258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801025a:	6a1b      	ldr	r3, [r3, #32]
 801025c:	f003 0301 	and.w	r3, r3, #1
 8010260:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010262:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801026a:	899b      	ldrh	r3, [r3, #12]
 801026c:	4619      	mov	r1, r3
 801026e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010270:	440b      	add	r3, r1
 8010272:	3b01      	subs	r3, #1
 8010274:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010276:	8989      	ldrh	r1, [r1, #12]
 8010278:	fbb3 f3f1 	udiv	r3, r3, r1
 801027c:	429a      	cmp	r2, r3
 801027e:	d201      	bcs.n	8010284 <find_volume+0x41c>
 8010280:	230d      	movs	r3, #13
 8010282:	e070      	b.n	8010366 <find_volume+0x4fe>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010286:	f04f 32ff 	mov.w	r2, #4294967295
 801028a:	619a      	str	r2, [r3, #24]
 801028c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801028e:	699a      	ldr	r2, [r3, #24]
 8010290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010292:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8010294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010296:	2280      	movs	r2, #128	; 0x80
 8010298:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801029a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801029e:	2b03      	cmp	r3, #3
 80102a0:	d149      	bne.n	8010336 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80102a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a4:	333c      	adds	r3, #60	; 0x3c
 80102a6:	3330      	adds	r3, #48	; 0x30
 80102a8:	4618      	mov	r0, r3
 80102aa:	f7fd fda5 	bl	800ddf8 <ld_word>
 80102ae:	4603      	mov	r3, r0
 80102b0:	2b01      	cmp	r3, #1
 80102b2:	d140      	bne.n	8010336 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80102b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102b6:	3301      	adds	r3, #1
 80102b8:	4619      	mov	r1, r3
 80102ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80102bc:	f7fe f84c 	bl	800e358 <move_window>
 80102c0:	4603      	mov	r3, r0
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d137      	bne.n	8010336 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80102c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c8:	2200      	movs	r2, #0
 80102ca:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80102cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ce:	333c      	adds	r3, #60	; 0x3c
 80102d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7fd fd8f 	bl	800ddf8 <ld_word>
 80102da:	4603      	mov	r3, r0
 80102dc:	461a      	mov	r2, r3
 80102de:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d127      	bne.n	8010336 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80102e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e8:	333c      	adds	r3, #60	; 0x3c
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7fd fd9c 	bl	800de28 <ld_dword>
 80102f0:	4602      	mov	r2, r0
 80102f2:	4b1f      	ldr	r3, [pc, #124]	; (8010370 <find_volume+0x508>)
 80102f4:	429a      	cmp	r2, r3
 80102f6:	d11e      	bne.n	8010336 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80102f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102fa:	333c      	adds	r3, #60	; 0x3c
 80102fc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010300:	4618      	mov	r0, r3
 8010302:	f7fd fd91 	bl	800de28 <ld_dword>
 8010306:	4602      	mov	r2, r0
 8010308:	4b1a      	ldr	r3, [pc, #104]	; (8010374 <find_volume+0x50c>)
 801030a:	429a      	cmp	r2, r3
 801030c:	d113      	bne.n	8010336 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801030e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010310:	333c      	adds	r3, #60	; 0x3c
 8010312:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010316:	4618      	mov	r0, r3
 8010318:	f7fd fd86 	bl	800de28 <ld_dword>
 801031c:	4602      	mov	r2, r0
 801031e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010320:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010324:	333c      	adds	r3, #60	; 0x3c
 8010326:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801032a:	4618      	mov	r0, r3
 801032c:	f7fd fd7c 	bl	800de28 <ld_dword>
 8010330:	4602      	mov	r2, r0
 8010332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010334:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010338:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801033c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801033e:	4b0e      	ldr	r3, [pc, #56]	; (8010378 <find_volume+0x510>)
 8010340:	881b      	ldrh	r3, [r3, #0]
 8010342:	3301      	adds	r3, #1
 8010344:	b29a      	uxth	r2, r3
 8010346:	4b0c      	ldr	r3, [pc, #48]	; (8010378 <find_volume+0x510>)
 8010348:	801a      	strh	r2, [r3, #0]
 801034a:	4b0b      	ldr	r3, [pc, #44]	; (8010378 <find_volume+0x510>)
 801034c:	881a      	ldrh	r2, [r3, #0]
 801034e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010350:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8010352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010354:	4a09      	ldr	r2, [pc, #36]	; (801037c <find_volume+0x514>)
 8010356:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8010358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801035a:	2200      	movs	r2, #0
 801035c:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801035e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010360:	f7fd ff92 	bl	800e288 <clear_lock>
#endif
	return FR_OK;
 8010364:	2300      	movs	r3, #0
}
 8010366:	4618      	mov	r0, r3
 8010368:	3758      	adds	r7, #88	; 0x58
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}
 801036e:	bf00      	nop
 8010370:	41615252 	.word	0x41615252
 8010374:	61417272 	.word	0x61417272
 8010378:	20036a4c 	.word	0x20036a4c
 801037c:	20036a70 	.word	0x20036a70

08010380 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b084      	sub	sp, #16
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801038a:	2309      	movs	r3, #9
 801038c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d01c      	beq.n	80103ce <validate+0x4e>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d018      	beq.n	80103ce <validate+0x4e>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	781b      	ldrb	r3, [r3, #0]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d013      	beq.n	80103ce <validate+0x4e>
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	889a      	ldrh	r2, [r3, #4]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	88db      	ldrh	r3, [r3, #6]
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d10c      	bne.n	80103ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	785b      	ldrb	r3, [r3, #1]
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7fd fc7e 	bl	800dcbc <disk_status>
 80103c0:	4603      	mov	r3, r0
 80103c2:	f003 0301 	and.w	r3, r3, #1
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d101      	bne.n	80103ce <validate+0x4e>
			res = FR_OK;
 80103ca:	2300      	movs	r3, #0
 80103cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80103ce:	7bfb      	ldrb	r3, [r7, #15]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d102      	bne.n	80103da <validate+0x5a>
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	e000      	b.n	80103dc <validate+0x5c>
 80103da:	2300      	movs	r3, #0
 80103dc:	683a      	ldr	r2, [r7, #0]
 80103de:	6013      	str	r3, [r2, #0]
	return res;
 80103e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3710      	adds	r7, #16
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}
	...

080103ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	b088      	sub	sp, #32
 80103f0:	af00      	add	r7, sp, #0
 80103f2:	60f8      	str	r0, [r7, #12]
 80103f4:	60b9      	str	r1, [r7, #8]
 80103f6:	4613      	mov	r3, r2
 80103f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80103fe:	f107 0310 	add.w	r3, r7, #16
 8010402:	4618      	mov	r0, r3
 8010404:	f7ff fc95 	bl	800fd32 <get_ldnumber>
 8010408:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801040a:	69fb      	ldr	r3, [r7, #28]
 801040c:	2b00      	cmp	r3, #0
 801040e:	da01      	bge.n	8010414 <f_mount+0x28>
 8010410:	230b      	movs	r3, #11
 8010412:	e02b      	b.n	801046c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010414:	4a17      	ldr	r2, [pc, #92]	; (8010474 <f_mount+0x88>)
 8010416:	69fb      	ldr	r3, [r7, #28]
 8010418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801041c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801041e:	69bb      	ldr	r3, [r7, #24]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d005      	beq.n	8010430 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010424:	69b8      	ldr	r0, [r7, #24]
 8010426:	f7fd ff2f 	bl	800e288 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801042a:	69bb      	ldr	r3, [r7, #24]
 801042c:	2200      	movs	r2, #0
 801042e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d002      	beq.n	801043c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	2200      	movs	r2, #0
 801043a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801043c:	68fa      	ldr	r2, [r7, #12]
 801043e:	490d      	ldr	r1, [pc, #52]	; (8010474 <f_mount+0x88>)
 8010440:	69fb      	ldr	r3, [r7, #28]
 8010442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d002      	beq.n	8010452 <f_mount+0x66>
 801044c:	79fb      	ldrb	r3, [r7, #7]
 801044e:	2b01      	cmp	r3, #1
 8010450:	d001      	beq.n	8010456 <f_mount+0x6a>
 8010452:	2300      	movs	r3, #0
 8010454:	e00a      	b.n	801046c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010456:	f107 010c 	add.w	r1, r7, #12
 801045a:	f107 0308 	add.w	r3, r7, #8
 801045e:	2200      	movs	r2, #0
 8010460:	4618      	mov	r0, r3
 8010462:	f7ff fd01 	bl	800fe68 <find_volume>
 8010466:	4603      	mov	r3, r0
 8010468:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801046a:	7dfb      	ldrb	r3, [r7, #23]
}
 801046c:	4618      	mov	r0, r3
 801046e:	3720      	adds	r7, #32
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}
 8010474:	20036a48 	.word	0x20036a48

08010478 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b09a      	sub	sp, #104	; 0x68
 801047c:	af00      	add	r7, sp, #0
 801047e:	60f8      	str	r0, [r7, #12]
 8010480:	60b9      	str	r1, [r7, #8]
 8010482:	4613      	mov	r3, r2
 8010484:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d101      	bne.n	8010490 <f_open+0x18>
 801048c:	2309      	movs	r3, #9
 801048e:	e1bb      	b.n	8010808 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010490:	79fb      	ldrb	r3, [r7, #7]
 8010492:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010496:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010498:	79fa      	ldrb	r2, [r7, #7]
 801049a:	f107 0114 	add.w	r1, r7, #20
 801049e:	f107 0308 	add.w	r3, r7, #8
 80104a2:	4618      	mov	r0, r3
 80104a4:	f7ff fce0 	bl	800fe68 <find_volume>
 80104a8:	4603      	mov	r3, r0
 80104aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80104ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	f040 819f 	bne.w	80107f6 <f_open+0x37e>
		dj.obj.fs = fs;
 80104b8:	697b      	ldr	r3, [r7, #20]
 80104ba:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80104bc:	68ba      	ldr	r2, [r7, #8]
 80104be:	f107 0318 	add.w	r3, r7, #24
 80104c2:	4611      	mov	r1, r2
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7ff fb9f 	bl	800fc08 <follow_path>
 80104ca:	4603      	mov	r3, r0
 80104cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80104d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d11a      	bne.n	801050e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80104d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80104dc:	b25b      	sxtb	r3, r3
 80104de:	2b00      	cmp	r3, #0
 80104e0:	da03      	bge.n	80104ea <f_open+0x72>
				res = FR_INVALID_NAME;
 80104e2:	2306      	movs	r3, #6
 80104e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80104e8:	e011      	b.n	801050e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80104ea:	79fb      	ldrb	r3, [r7, #7]
 80104ec:	f023 0301 	bic.w	r3, r3, #1
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	bf14      	ite	ne
 80104f4:	2301      	movne	r3, #1
 80104f6:	2300      	moveq	r3, #0
 80104f8:	b2db      	uxtb	r3, r3
 80104fa:	461a      	mov	r2, r3
 80104fc:	f107 0318 	add.w	r3, r7, #24
 8010500:	4611      	mov	r1, r2
 8010502:	4618      	mov	r0, r3
 8010504:	f7fd fd78 	bl	800dff8 <chk_lock>
 8010508:	4603      	mov	r3, r0
 801050a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801050e:	79fb      	ldrb	r3, [r7, #7]
 8010510:	f003 031c 	and.w	r3, r3, #28
 8010514:	2b00      	cmp	r3, #0
 8010516:	d07f      	beq.n	8010618 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010518:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801051c:	2b00      	cmp	r3, #0
 801051e:	d017      	beq.n	8010550 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010520:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010524:	2b04      	cmp	r3, #4
 8010526:	d10e      	bne.n	8010546 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010528:	f7fd fdc2 	bl	800e0b0 <enq_lock>
 801052c:	4603      	mov	r3, r0
 801052e:	2b00      	cmp	r3, #0
 8010530:	d006      	beq.n	8010540 <f_open+0xc8>
 8010532:	f107 0318 	add.w	r3, r7, #24
 8010536:	4618      	mov	r0, r3
 8010538:	f7ff f820 	bl	800f57c <dir_register>
 801053c:	4603      	mov	r3, r0
 801053e:	e000      	b.n	8010542 <f_open+0xca>
 8010540:	2312      	movs	r3, #18
 8010542:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010546:	79fb      	ldrb	r3, [r7, #7]
 8010548:	f043 0308 	orr.w	r3, r3, #8
 801054c:	71fb      	strb	r3, [r7, #7]
 801054e:	e010      	b.n	8010572 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010550:	7fbb      	ldrb	r3, [r7, #30]
 8010552:	f003 0311 	and.w	r3, r3, #17
 8010556:	2b00      	cmp	r3, #0
 8010558:	d003      	beq.n	8010562 <f_open+0xea>
					res = FR_DENIED;
 801055a:	2307      	movs	r3, #7
 801055c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010560:	e007      	b.n	8010572 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010562:	79fb      	ldrb	r3, [r7, #7]
 8010564:	f003 0304 	and.w	r3, r3, #4
 8010568:	2b00      	cmp	r3, #0
 801056a:	d002      	beq.n	8010572 <f_open+0xfa>
 801056c:	2308      	movs	r3, #8
 801056e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010572:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010576:	2b00      	cmp	r3, #0
 8010578:	d168      	bne.n	801064c <f_open+0x1d4>
 801057a:	79fb      	ldrb	r3, [r7, #7]
 801057c:	f003 0308 	and.w	r3, r3, #8
 8010580:	2b00      	cmp	r3, #0
 8010582:	d063      	beq.n	801064c <f_open+0x1d4>
				dw = GET_FATTIME();
 8010584:	f7fd f94a 	bl	800d81c <get_fattime>
 8010588:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801058a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801058c:	330e      	adds	r3, #14
 801058e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010590:	4618      	mov	r0, r3
 8010592:	f7fd fc87 	bl	800dea4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010598:	3316      	adds	r3, #22
 801059a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801059c:	4618      	mov	r0, r3
 801059e:	f7fd fc81 	bl	800dea4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80105a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105a4:	330b      	adds	r3, #11
 80105a6:	2220      	movs	r2, #32
 80105a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105ae:	4611      	mov	r1, r2
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7fe fc50 	bl	800ee56 <ld_clust>
 80105b6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105bc:	2200      	movs	r2, #0
 80105be:	4618      	mov	r0, r3
 80105c0:	f7fe fc68 	bl	800ee94 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80105c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c6:	331c      	adds	r3, #28
 80105c8:	2100      	movs	r1, #0
 80105ca:	4618      	mov	r0, r3
 80105cc:	f7fd fc6a 	bl	800dea4 <st_dword>
					fs->wflag = 1;
 80105d0:	697b      	ldr	r3, [r7, #20]
 80105d2:	2201      	movs	r2, #1
 80105d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80105d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d037      	beq.n	801064c <f_open+0x1d4>
						dw = fs->winsect;
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105e0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80105e2:	f107 0318 	add.w	r3, r7, #24
 80105e6:	2200      	movs	r2, #0
 80105e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80105ea:	4618      	mov	r0, r3
 80105ec:	f7fe f958 	bl	800e8a0 <remove_chain>
 80105f0:	4603      	mov	r3, r0
 80105f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80105f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d126      	bne.n	801064c <f_open+0x1d4>
							res = move_window(fs, dw);
 80105fe:	697b      	ldr	r3, [r7, #20]
 8010600:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010602:	4618      	mov	r0, r3
 8010604:	f7fd fea8 	bl	800e358 <move_window>
 8010608:	4603      	mov	r3, r0
 801060a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801060e:	697b      	ldr	r3, [r7, #20]
 8010610:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010612:	3a01      	subs	r2, #1
 8010614:	615a      	str	r2, [r3, #20]
 8010616:	e019      	b.n	801064c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010618:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801061c:	2b00      	cmp	r3, #0
 801061e:	d115      	bne.n	801064c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010620:	7fbb      	ldrb	r3, [r7, #30]
 8010622:	f003 0310 	and.w	r3, r3, #16
 8010626:	2b00      	cmp	r3, #0
 8010628:	d003      	beq.n	8010632 <f_open+0x1ba>
					res = FR_NO_FILE;
 801062a:	2304      	movs	r3, #4
 801062c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010630:	e00c      	b.n	801064c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010632:	79fb      	ldrb	r3, [r7, #7]
 8010634:	f003 0302 	and.w	r3, r3, #2
 8010638:	2b00      	cmp	r3, #0
 801063a:	d007      	beq.n	801064c <f_open+0x1d4>
 801063c:	7fbb      	ldrb	r3, [r7, #30]
 801063e:	f003 0301 	and.w	r3, r3, #1
 8010642:	2b00      	cmp	r3, #0
 8010644:	d002      	beq.n	801064c <f_open+0x1d4>
						res = FR_DENIED;
 8010646:	2307      	movs	r3, #7
 8010648:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801064c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010650:	2b00      	cmp	r3, #0
 8010652:	d128      	bne.n	80106a6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010654:	79fb      	ldrb	r3, [r7, #7]
 8010656:	f003 0308 	and.w	r3, r3, #8
 801065a:	2b00      	cmp	r3, #0
 801065c:	d003      	beq.n	8010666 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801065e:	79fb      	ldrb	r3, [r7, #7]
 8010660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010664:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801066e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010674:	79fb      	ldrb	r3, [r7, #7]
 8010676:	f023 0301 	bic.w	r3, r3, #1
 801067a:	2b00      	cmp	r3, #0
 801067c:	bf14      	ite	ne
 801067e:	2301      	movne	r3, #1
 8010680:	2300      	moveq	r3, #0
 8010682:	b2db      	uxtb	r3, r3
 8010684:	461a      	mov	r2, r3
 8010686:	f107 0318 	add.w	r3, r7, #24
 801068a:	4611      	mov	r1, r2
 801068c:	4618      	mov	r0, r3
 801068e:	f7fd fd31 	bl	800e0f4 <inc_lock>
 8010692:	4602      	mov	r2, r0
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	691b      	ldr	r3, [r3, #16]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d102      	bne.n	80106a6 <f_open+0x22e>
 80106a0:	2302      	movs	r3, #2
 80106a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80106a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	f040 80a3 	bne.w	80107f6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106b4:	4611      	mov	r1, r2
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7fe fbcd 	bl	800ee56 <ld_clust>
 80106bc:	4602      	mov	r2, r0
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80106c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c4:	331c      	adds	r3, #28
 80106c6:	4618      	mov	r0, r3
 80106c8:	f7fd fbae 	bl	800de28 <ld_dword>
 80106cc:	4602      	mov	r2, r0
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	2200      	movs	r2, #0
 80106d6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80106d8:	697a      	ldr	r2, [r7, #20]
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	88da      	ldrh	r2, [r3, #6]
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	79fa      	ldrb	r2, [r7, #7]
 80106ea:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	2200      	movs	r2, #0
 80106f0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	2200      	movs	r2, #0
 80106f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	2200      	movs	r2, #0
 80106fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	3330      	adds	r3, #48	; 0x30
 8010702:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010706:	2100      	movs	r1, #0
 8010708:	4618      	mov	r0, r3
 801070a:	f7fd fc18 	bl	800df3e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801070e:	79fb      	ldrb	r3, [r7, #7]
 8010710:	f003 0320 	and.w	r3, r3, #32
 8010714:	2b00      	cmp	r3, #0
 8010716:	d06e      	beq.n	80107f6 <f_open+0x37e>
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	68db      	ldr	r3, [r3, #12]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d06a      	beq.n	80107f6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	68da      	ldr	r2, [r3, #12]
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	895b      	ldrh	r3, [r3, #10]
 801072c:	461a      	mov	r2, r3
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	899b      	ldrh	r3, [r3, #12]
 8010732:	fb03 f302 	mul.w	r3, r3, r2
 8010736:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	689b      	ldr	r3, [r3, #8]
 801073c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	68db      	ldr	r3, [r3, #12]
 8010742:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010744:	e016      	b.n	8010774 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801074a:	4618      	mov	r0, r3
 801074c:	f7fd fec1 	bl	800e4d2 <get_fat>
 8010750:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8010752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010754:	2b01      	cmp	r3, #1
 8010756:	d802      	bhi.n	801075e <f_open+0x2e6>
 8010758:	2302      	movs	r3, #2
 801075a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801075e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010764:	d102      	bne.n	801076c <f_open+0x2f4>
 8010766:	2301      	movs	r3, #1
 8010768:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801076c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801076e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010770:	1ad3      	subs	r3, r2, r3
 8010772:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010774:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010778:	2b00      	cmp	r3, #0
 801077a:	d103      	bne.n	8010784 <f_open+0x30c>
 801077c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801077e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010780:	429a      	cmp	r2, r3
 8010782:	d8e0      	bhi.n	8010746 <f_open+0x2ce>
				}
				fp->clust = clst;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010788:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801078a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801078e:	2b00      	cmp	r3, #0
 8010790:	d131      	bne.n	80107f6 <f_open+0x37e>
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	899b      	ldrh	r3, [r3, #12]
 8010796:	461a      	mov	r2, r3
 8010798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801079a:	fbb3 f1f2 	udiv	r1, r3, r2
 801079e:	fb02 f201 	mul.w	r2, r2, r1
 80107a2:	1a9b      	subs	r3, r3, r2
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d026      	beq.n	80107f6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80107ac:	4618      	mov	r0, r3
 80107ae:	f7fd fe71 	bl	800e494 <clust2sect>
 80107b2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80107b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d103      	bne.n	80107c2 <f_open+0x34a>
						res = FR_INT_ERR;
 80107ba:	2302      	movs	r3, #2
 80107bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80107c0:	e019      	b.n	80107f6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80107c2:	697b      	ldr	r3, [r7, #20]
 80107c4:	899b      	ldrh	r3, [r3, #12]
 80107c6:	461a      	mov	r2, r3
 80107c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80107ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107d0:	441a      	add	r2, r3
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	7858      	ldrb	r0, [r3, #1]
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	6a1a      	ldr	r2, [r3, #32]
 80107e4:	2301      	movs	r3, #1
 80107e6:	f7fd faa9 	bl	800dd3c <disk_read>
 80107ea:	4603      	mov	r3, r0
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d002      	beq.n	80107f6 <f_open+0x37e>
 80107f0:	2301      	movs	r3, #1
 80107f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80107f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d002      	beq.n	8010804 <f_open+0x38c>
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	2200      	movs	r2, #0
 8010802:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010804:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010808:	4618      	mov	r0, r3
 801080a:	3768      	adds	r7, #104	; 0x68
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b08e      	sub	sp, #56	; 0x38
 8010814:	af00      	add	r7, sp, #0
 8010816:	60f8      	str	r0, [r7, #12]
 8010818:	60b9      	str	r1, [r7, #8]
 801081a:	607a      	str	r2, [r7, #4]
 801081c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	2200      	movs	r2, #0
 8010826:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	f107 0214 	add.w	r2, r7, #20
 801082e:	4611      	mov	r1, r2
 8010830:	4618      	mov	r0, r3
 8010832:	f7ff fda5 	bl	8010380 <validate>
 8010836:	4603      	mov	r3, r0
 8010838:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801083c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010840:	2b00      	cmp	r3, #0
 8010842:	d107      	bne.n	8010854 <f_read+0x44>
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	7d5b      	ldrb	r3, [r3, #21]
 8010848:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801084c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010850:	2b00      	cmp	r3, #0
 8010852:	d002      	beq.n	801085a <f_read+0x4a>
 8010854:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010858:	e135      	b.n	8010ac6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	7d1b      	ldrb	r3, [r3, #20]
 801085e:	f003 0301 	and.w	r3, r3, #1
 8010862:	2b00      	cmp	r3, #0
 8010864:	d101      	bne.n	801086a <f_read+0x5a>
 8010866:	2307      	movs	r3, #7
 8010868:	e12d      	b.n	8010ac6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	68da      	ldr	r2, [r3, #12]
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	699b      	ldr	r3, [r3, #24]
 8010872:	1ad3      	subs	r3, r2, r3
 8010874:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010876:	687a      	ldr	r2, [r7, #4]
 8010878:	6a3b      	ldr	r3, [r7, #32]
 801087a:	429a      	cmp	r2, r3
 801087c:	f240 811e 	bls.w	8010abc <f_read+0x2ac>
 8010880:	6a3b      	ldr	r3, [r7, #32]
 8010882:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010884:	e11a      	b.n	8010abc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	699b      	ldr	r3, [r3, #24]
 801088a:	697a      	ldr	r2, [r7, #20]
 801088c:	8992      	ldrh	r2, [r2, #12]
 801088e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010892:	fb02 f201 	mul.w	r2, r2, r1
 8010896:	1a9b      	subs	r3, r3, r2
 8010898:	2b00      	cmp	r3, #0
 801089a:	f040 80d5 	bne.w	8010a48 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	699b      	ldr	r3, [r3, #24]
 80108a2:	697a      	ldr	r2, [r7, #20]
 80108a4:	8992      	ldrh	r2, [r2, #12]
 80108a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80108aa:	697a      	ldr	r2, [r7, #20]
 80108ac:	8952      	ldrh	r2, [r2, #10]
 80108ae:	3a01      	subs	r2, #1
 80108b0:	4013      	ands	r3, r2
 80108b2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80108b4:	69fb      	ldr	r3, [r7, #28]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d12f      	bne.n	801091a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	699b      	ldr	r3, [r3, #24]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d103      	bne.n	80108ca <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	689b      	ldr	r3, [r3, #8]
 80108c6:	633b      	str	r3, [r7, #48]	; 0x30
 80108c8:	e013      	b.n	80108f2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d007      	beq.n	80108e2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	699b      	ldr	r3, [r3, #24]
 80108d6:	4619      	mov	r1, r3
 80108d8:	68f8      	ldr	r0, [r7, #12]
 80108da:	f7fe f8de 	bl	800ea9a <clmt_clust>
 80108de:	6338      	str	r0, [r7, #48]	; 0x30
 80108e0:	e007      	b.n	80108f2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80108e2:	68fa      	ldr	r2, [r7, #12]
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	69db      	ldr	r3, [r3, #28]
 80108e8:	4619      	mov	r1, r3
 80108ea:	4610      	mov	r0, r2
 80108ec:	f7fd fdf1 	bl	800e4d2 <get_fat>
 80108f0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80108f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108f4:	2b01      	cmp	r3, #1
 80108f6:	d804      	bhi.n	8010902 <f_read+0xf2>
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	2202      	movs	r2, #2
 80108fc:	755a      	strb	r2, [r3, #21]
 80108fe:	2302      	movs	r3, #2
 8010900:	e0e1      	b.n	8010ac6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010908:	d104      	bne.n	8010914 <f_read+0x104>
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	2201      	movs	r2, #1
 801090e:	755a      	strb	r2, [r3, #21]
 8010910:	2301      	movs	r3, #1
 8010912:	e0d8      	b.n	8010ac6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010918:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801091a:	697a      	ldr	r2, [r7, #20]
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	69db      	ldr	r3, [r3, #28]
 8010920:	4619      	mov	r1, r3
 8010922:	4610      	mov	r0, r2
 8010924:	f7fd fdb6 	bl	800e494 <clust2sect>
 8010928:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801092a:	69bb      	ldr	r3, [r7, #24]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d104      	bne.n	801093a <f_read+0x12a>
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	2202      	movs	r2, #2
 8010934:	755a      	strb	r2, [r3, #21]
 8010936:	2302      	movs	r3, #2
 8010938:	e0c5      	b.n	8010ac6 <f_read+0x2b6>
			sect += csect;
 801093a:	69ba      	ldr	r2, [r7, #24]
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	4413      	add	r3, r2
 8010940:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	899b      	ldrh	r3, [r3, #12]
 8010946:	461a      	mov	r2, r3
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	fbb3 f3f2 	udiv	r3, r3, r2
 801094e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010952:	2b00      	cmp	r3, #0
 8010954:	d041      	beq.n	80109da <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010956:	69fa      	ldr	r2, [r7, #28]
 8010958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801095a:	4413      	add	r3, r2
 801095c:	697a      	ldr	r2, [r7, #20]
 801095e:	8952      	ldrh	r2, [r2, #10]
 8010960:	4293      	cmp	r3, r2
 8010962:	d905      	bls.n	8010970 <f_read+0x160>
					cc = fs->csize - csect;
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	895b      	ldrh	r3, [r3, #10]
 8010968:	461a      	mov	r2, r3
 801096a:	69fb      	ldr	r3, [r7, #28]
 801096c:	1ad3      	subs	r3, r2, r3
 801096e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	7858      	ldrb	r0, [r3, #1]
 8010974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010976:	69ba      	ldr	r2, [r7, #24]
 8010978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801097a:	f7fd f9df 	bl	800dd3c <disk_read>
 801097e:	4603      	mov	r3, r0
 8010980:	2b00      	cmp	r3, #0
 8010982:	d004      	beq.n	801098e <f_read+0x17e>
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	2201      	movs	r2, #1
 8010988:	755a      	strb	r2, [r3, #21]
 801098a:	2301      	movs	r3, #1
 801098c:	e09b      	b.n	8010ac6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	7d1b      	ldrb	r3, [r3, #20]
 8010992:	b25b      	sxtb	r3, r3
 8010994:	2b00      	cmp	r3, #0
 8010996:	da18      	bge.n	80109ca <f_read+0x1ba>
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	6a1a      	ldr	r2, [r3, #32]
 801099c:	69bb      	ldr	r3, [r7, #24]
 801099e:	1ad3      	subs	r3, r2, r3
 80109a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d911      	bls.n	80109ca <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	6a1a      	ldr	r2, [r3, #32]
 80109aa:	69bb      	ldr	r3, [r7, #24]
 80109ac:	1ad3      	subs	r3, r2, r3
 80109ae:	697a      	ldr	r2, [r7, #20]
 80109b0:	8992      	ldrh	r2, [r2, #12]
 80109b2:	fb02 f303 	mul.w	r3, r2, r3
 80109b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109b8:	18d0      	adds	r0, r2, r3
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	899b      	ldrh	r3, [r3, #12]
 80109c4:	461a      	mov	r2, r3
 80109c6:	f7fd fa99 	bl	800defc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	899b      	ldrh	r3, [r3, #12]
 80109ce:	461a      	mov	r2, r3
 80109d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109d2:	fb02 f303 	mul.w	r3, r2, r3
 80109d6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80109d8:	e05c      	b.n	8010a94 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	6a1b      	ldr	r3, [r3, #32]
 80109de:	69ba      	ldr	r2, [r7, #24]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d02e      	beq.n	8010a42 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	7d1b      	ldrb	r3, [r3, #20]
 80109e8:	b25b      	sxtb	r3, r3
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	da18      	bge.n	8010a20 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80109ee:	697b      	ldr	r3, [r7, #20]
 80109f0:	7858      	ldrb	r0, [r3, #1]
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	6a1a      	ldr	r2, [r3, #32]
 80109fc:	2301      	movs	r3, #1
 80109fe:	f7fd f9bd 	bl	800dd7c <disk_write>
 8010a02:	4603      	mov	r3, r0
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d004      	beq.n	8010a12 <f_read+0x202>
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	2201      	movs	r2, #1
 8010a0c:	755a      	strb	r2, [r3, #21]
 8010a0e:	2301      	movs	r3, #1
 8010a10:	e059      	b.n	8010ac6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	7d1b      	ldrb	r3, [r3, #20]
 8010a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a1a:	b2da      	uxtb	r2, r3
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	7858      	ldrb	r0, [r3, #1]
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	69ba      	ldr	r2, [r7, #24]
 8010a2e:	f7fd f985 	bl	800dd3c <disk_read>
 8010a32:	4603      	mov	r3, r0
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d004      	beq.n	8010a42 <f_read+0x232>
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	2201      	movs	r2, #1
 8010a3c:	755a      	strb	r2, [r3, #21]
 8010a3e:	2301      	movs	r3, #1
 8010a40:	e041      	b.n	8010ac6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	69ba      	ldr	r2, [r7, #24]
 8010a46:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	899b      	ldrh	r3, [r3, #12]
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	699b      	ldr	r3, [r3, #24]
 8010a52:	697a      	ldr	r2, [r7, #20]
 8010a54:	8992      	ldrh	r2, [r2, #12]
 8010a56:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a5a:	fb02 f201 	mul.w	r2, r2, r1
 8010a5e:	1a9b      	subs	r3, r3, r2
 8010a60:	1ac3      	subs	r3, r0, r3
 8010a62:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d901      	bls.n	8010a70 <f_read+0x260>
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	699b      	ldr	r3, [r3, #24]
 8010a7a:	697a      	ldr	r2, [r7, #20]
 8010a7c:	8992      	ldrh	r2, [r2, #12]
 8010a7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010a82:	fb02 f200 	mul.w	r2, r2, r0
 8010a86:	1a9b      	subs	r3, r3, r2
 8010a88:	440b      	add	r3, r1
 8010a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a8c:	4619      	mov	r1, r3
 8010a8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a90:	f7fd fa34 	bl	800defc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a98:	4413      	add	r3, r2
 8010a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	699a      	ldr	r2, [r3, #24]
 8010aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aa2:	441a      	add	r2, r3
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	619a      	str	r2, [r3, #24]
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	681a      	ldr	r2, [r3, #0]
 8010aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aae:	441a      	add	r2, r3
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	601a      	str	r2, [r3, #0]
 8010ab4:	687a      	ldr	r2, [r7, #4]
 8010ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ab8:	1ad3      	subs	r3, r2, r3
 8010aba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	f47f aee1 	bne.w	8010886 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010ac4:	2300      	movs	r3, #0
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	3738      	adds	r7, #56	; 0x38
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}

08010ace <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010ace:	b580      	push	{r7, lr}
 8010ad0:	b08c      	sub	sp, #48	; 0x30
 8010ad2:	af00      	add	r7, sp, #0
 8010ad4:	60f8      	str	r0, [r7, #12]
 8010ad6:	60b9      	str	r1, [r7, #8]
 8010ad8:	607a      	str	r2, [r7, #4]
 8010ada:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010ae0:	683b      	ldr	r3, [r7, #0]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	f107 0210 	add.w	r2, r7, #16
 8010aec:	4611      	mov	r1, r2
 8010aee:	4618      	mov	r0, r3
 8010af0:	f7ff fc46 	bl	8010380 <validate>
 8010af4:	4603      	mov	r3, r0
 8010af6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010afa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d107      	bne.n	8010b12 <f_write+0x44>
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	7d5b      	ldrb	r3, [r3, #21]
 8010b06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d002      	beq.n	8010b18 <f_write+0x4a>
 8010b12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b16:	e16a      	b.n	8010dee <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	7d1b      	ldrb	r3, [r3, #20]
 8010b1c:	f003 0302 	and.w	r3, r3, #2
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d101      	bne.n	8010b28 <f_write+0x5a>
 8010b24:	2307      	movs	r3, #7
 8010b26:	e162      	b.n	8010dee <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	699a      	ldr	r2, [r3, #24]
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	441a      	add	r2, r3
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	699b      	ldr	r3, [r3, #24]
 8010b34:	429a      	cmp	r2, r3
 8010b36:	f080 814c 	bcs.w	8010dd2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	699b      	ldr	r3, [r3, #24]
 8010b3e:	43db      	mvns	r3, r3
 8010b40:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010b42:	e146      	b.n	8010dd2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	699b      	ldr	r3, [r3, #24]
 8010b48:	693a      	ldr	r2, [r7, #16]
 8010b4a:	8992      	ldrh	r2, [r2, #12]
 8010b4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b50:	fb02 f201 	mul.w	r2, r2, r1
 8010b54:	1a9b      	subs	r3, r3, r2
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	f040 80f1 	bne.w	8010d3e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	699b      	ldr	r3, [r3, #24]
 8010b60:	693a      	ldr	r2, [r7, #16]
 8010b62:	8992      	ldrh	r2, [r2, #12]
 8010b64:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b68:	693a      	ldr	r2, [r7, #16]
 8010b6a:	8952      	ldrh	r2, [r2, #10]
 8010b6c:	3a01      	subs	r2, #1
 8010b6e:	4013      	ands	r3, r2
 8010b70:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010b72:	69bb      	ldr	r3, [r7, #24]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d143      	bne.n	8010c00 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	699b      	ldr	r3, [r3, #24]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d10c      	bne.n	8010b9a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	689b      	ldr	r3, [r3, #8]
 8010b84:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d11a      	bne.n	8010bc2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	2100      	movs	r1, #0
 8010b90:	4618      	mov	r0, r3
 8010b92:	f7fd feea 	bl	800e96a <create_chain>
 8010b96:	62b8      	str	r0, [r7, #40]	; 0x28
 8010b98:	e013      	b.n	8010bc2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d007      	beq.n	8010bb2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	699b      	ldr	r3, [r3, #24]
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	68f8      	ldr	r0, [r7, #12]
 8010baa:	f7fd ff76 	bl	800ea9a <clmt_clust>
 8010bae:	62b8      	str	r0, [r7, #40]	; 0x28
 8010bb0:	e007      	b.n	8010bc2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010bb2:	68fa      	ldr	r2, [r7, #12]
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	69db      	ldr	r3, [r3, #28]
 8010bb8:	4619      	mov	r1, r3
 8010bba:	4610      	mov	r0, r2
 8010bbc:	f7fd fed5 	bl	800e96a <create_chain>
 8010bc0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	f000 8109 	beq.w	8010ddc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bcc:	2b01      	cmp	r3, #1
 8010bce:	d104      	bne.n	8010bda <f_write+0x10c>
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	2202      	movs	r2, #2
 8010bd4:	755a      	strb	r2, [r3, #21]
 8010bd6:	2302      	movs	r3, #2
 8010bd8:	e109      	b.n	8010dee <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010be0:	d104      	bne.n	8010bec <f_write+0x11e>
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	2201      	movs	r2, #1
 8010be6:	755a      	strb	r2, [r3, #21]
 8010be8:	2301      	movs	r3, #1
 8010bea:	e100      	b.n	8010dee <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010bf0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	689b      	ldr	r3, [r3, #8]
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d102      	bne.n	8010c00 <f_write+0x132>
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010bfe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	7d1b      	ldrb	r3, [r3, #20]
 8010c04:	b25b      	sxtb	r3, r3
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	da18      	bge.n	8010c3c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	7858      	ldrb	r0, [r3, #1]
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	6a1a      	ldr	r2, [r3, #32]
 8010c18:	2301      	movs	r3, #1
 8010c1a:	f7fd f8af 	bl	800dd7c <disk_write>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d004      	beq.n	8010c2e <f_write+0x160>
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	2201      	movs	r2, #1
 8010c28:	755a      	strb	r2, [r3, #21]
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	e0df      	b.n	8010dee <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	7d1b      	ldrb	r3, [r3, #20]
 8010c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c36:	b2da      	uxtb	r2, r3
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010c3c:	693a      	ldr	r2, [r7, #16]
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	69db      	ldr	r3, [r3, #28]
 8010c42:	4619      	mov	r1, r3
 8010c44:	4610      	mov	r0, r2
 8010c46:	f7fd fc25 	bl	800e494 <clust2sect>
 8010c4a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d104      	bne.n	8010c5c <f_write+0x18e>
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	2202      	movs	r2, #2
 8010c56:	755a      	strb	r2, [r3, #21]
 8010c58:	2302      	movs	r3, #2
 8010c5a:	e0c8      	b.n	8010dee <f_write+0x320>
			sect += csect;
 8010c5c:	697a      	ldr	r2, [r7, #20]
 8010c5e:	69bb      	ldr	r3, [r7, #24]
 8010c60:	4413      	add	r3, r2
 8010c62:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010c64:	693b      	ldr	r3, [r7, #16]
 8010c66:	899b      	ldrh	r3, [r3, #12]
 8010c68:	461a      	mov	r2, r3
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010c70:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010c72:	6a3b      	ldr	r3, [r7, #32]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d043      	beq.n	8010d00 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010c78:	69ba      	ldr	r2, [r7, #24]
 8010c7a:	6a3b      	ldr	r3, [r7, #32]
 8010c7c:	4413      	add	r3, r2
 8010c7e:	693a      	ldr	r2, [r7, #16]
 8010c80:	8952      	ldrh	r2, [r2, #10]
 8010c82:	4293      	cmp	r3, r2
 8010c84:	d905      	bls.n	8010c92 <f_write+0x1c4>
					cc = fs->csize - csect;
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	895b      	ldrh	r3, [r3, #10]
 8010c8a:	461a      	mov	r2, r3
 8010c8c:	69bb      	ldr	r3, [r7, #24]
 8010c8e:	1ad3      	subs	r3, r2, r3
 8010c90:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010c92:	693b      	ldr	r3, [r7, #16]
 8010c94:	7858      	ldrb	r0, [r3, #1]
 8010c96:	6a3b      	ldr	r3, [r7, #32]
 8010c98:	697a      	ldr	r2, [r7, #20]
 8010c9a:	69f9      	ldr	r1, [r7, #28]
 8010c9c:	f7fd f86e 	bl	800dd7c <disk_write>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d004      	beq.n	8010cb0 <f_write+0x1e2>
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	2201      	movs	r2, #1
 8010caa:	755a      	strb	r2, [r3, #21]
 8010cac:	2301      	movs	r3, #1
 8010cae:	e09e      	b.n	8010dee <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	6a1a      	ldr	r2, [r3, #32]
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	1ad3      	subs	r3, r2, r3
 8010cb8:	6a3a      	ldr	r2, [r7, #32]
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d918      	bls.n	8010cf0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	6a1a      	ldr	r2, [r3, #32]
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	1ad3      	subs	r3, r2, r3
 8010ccc:	693a      	ldr	r2, [r7, #16]
 8010cce:	8992      	ldrh	r2, [r2, #12]
 8010cd0:	fb02 f303 	mul.w	r3, r2, r3
 8010cd4:	69fa      	ldr	r2, [r7, #28]
 8010cd6:	18d1      	adds	r1, r2, r3
 8010cd8:	693b      	ldr	r3, [r7, #16]
 8010cda:	899b      	ldrh	r3, [r3, #12]
 8010cdc:	461a      	mov	r2, r3
 8010cde:	f7fd f90d 	bl	800defc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	7d1b      	ldrb	r3, [r3, #20]
 8010ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010cea:	b2da      	uxtb	r2, r3
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	899b      	ldrh	r3, [r3, #12]
 8010cf4:	461a      	mov	r2, r3
 8010cf6:	6a3b      	ldr	r3, [r7, #32]
 8010cf8:	fb02 f303 	mul.w	r3, r2, r3
 8010cfc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010cfe:	e04b      	b.n	8010d98 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	6a1b      	ldr	r3, [r3, #32]
 8010d04:	697a      	ldr	r2, [r7, #20]
 8010d06:	429a      	cmp	r2, r3
 8010d08:	d016      	beq.n	8010d38 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	699a      	ldr	r2, [r3, #24]
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d210      	bcs.n	8010d38 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	7858      	ldrb	r0, [r3, #1]
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d20:	2301      	movs	r3, #1
 8010d22:	697a      	ldr	r2, [r7, #20]
 8010d24:	f7fd f80a 	bl	800dd3c <disk_read>
 8010d28:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d004      	beq.n	8010d38 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	2201      	movs	r2, #1
 8010d32:	755a      	strb	r2, [r3, #21]
 8010d34:	2301      	movs	r3, #1
 8010d36:	e05a      	b.n	8010dee <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	697a      	ldr	r2, [r7, #20]
 8010d3c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010d3e:	693b      	ldr	r3, [r7, #16]
 8010d40:	899b      	ldrh	r3, [r3, #12]
 8010d42:	4618      	mov	r0, r3
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	699b      	ldr	r3, [r3, #24]
 8010d48:	693a      	ldr	r2, [r7, #16]
 8010d4a:	8992      	ldrh	r2, [r2, #12]
 8010d4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d50:	fb02 f201 	mul.w	r2, r2, r1
 8010d54:	1a9b      	subs	r3, r3, r2
 8010d56:	1ac3      	subs	r3, r0, r3
 8010d58:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d901      	bls.n	8010d66 <f_write+0x298>
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	699b      	ldr	r3, [r3, #24]
 8010d70:	693a      	ldr	r2, [r7, #16]
 8010d72:	8992      	ldrh	r2, [r2, #12]
 8010d74:	fbb3 f0f2 	udiv	r0, r3, r2
 8010d78:	fb02 f200 	mul.w	r2, r2, r0
 8010d7c:	1a9b      	subs	r3, r3, r2
 8010d7e:	440b      	add	r3, r1
 8010d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d82:	69f9      	ldr	r1, [r7, #28]
 8010d84:	4618      	mov	r0, r3
 8010d86:	f7fd f8b9 	bl	800defc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	7d1b      	ldrb	r3, [r3, #20]
 8010d8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010d92:	b2da      	uxtb	r2, r3
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010d98:	69fa      	ldr	r2, [r7, #28]
 8010d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d9c:	4413      	add	r3, r2
 8010d9e:	61fb      	str	r3, [r7, #28]
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	699a      	ldr	r2, [r3, #24]
 8010da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da6:	441a      	add	r2, r3
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	619a      	str	r2, [r3, #24]
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	68da      	ldr	r2, [r3, #12]
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	699b      	ldr	r3, [r3, #24]
 8010db4:	429a      	cmp	r2, r3
 8010db6:	bf38      	it	cc
 8010db8:	461a      	movcc	r2, r3
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	60da      	str	r2, [r3, #12]
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	681a      	ldr	r2, [r3, #0]
 8010dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc4:	441a      	add	r2, r3
 8010dc6:	683b      	ldr	r3, [r7, #0]
 8010dc8:	601a      	str	r2, [r3, #0]
 8010dca:	687a      	ldr	r2, [r7, #4]
 8010dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dce:	1ad3      	subs	r3, r2, r3
 8010dd0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	f47f aeb5 	bne.w	8010b44 <f_write+0x76>
 8010dda:	e000      	b.n	8010dde <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010ddc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	7d1b      	ldrb	r3, [r3, #20]
 8010de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010de6:	b2da      	uxtb	r2, r3
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010dec:	2300      	movs	r3, #0
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	3730      	adds	r7, #48	; 0x30
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bd80      	pop	{r7, pc}

08010df6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010df6:	b580      	push	{r7, lr}
 8010df8:	b086      	sub	sp, #24
 8010dfa:	af00      	add	r7, sp, #0
 8010dfc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f107 0208 	add.w	r2, r7, #8
 8010e04:	4611      	mov	r1, r2
 8010e06:	4618      	mov	r0, r3
 8010e08:	f7ff faba 	bl	8010380 <validate>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010e10:	7dfb      	ldrb	r3, [r7, #23]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d168      	bne.n	8010ee8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	7d1b      	ldrb	r3, [r3, #20]
 8010e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d062      	beq.n	8010ee8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	7d1b      	ldrb	r3, [r3, #20]
 8010e26:	b25b      	sxtb	r3, r3
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	da15      	bge.n	8010e58 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	7858      	ldrb	r0, [r3, #1]
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6a1a      	ldr	r2, [r3, #32]
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	f7fc ff9e 	bl	800dd7c <disk_write>
 8010e40:	4603      	mov	r3, r0
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d001      	beq.n	8010e4a <f_sync+0x54>
 8010e46:	2301      	movs	r3, #1
 8010e48:	e04f      	b.n	8010eea <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	7d1b      	ldrb	r3, [r3, #20]
 8010e4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e52:	b2da      	uxtb	r2, r3
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010e58:	f7fc fce0 	bl	800d81c <get_fattime>
 8010e5c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010e5e:	68ba      	ldr	r2, [r7, #8]
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e64:	4619      	mov	r1, r3
 8010e66:	4610      	mov	r0, r2
 8010e68:	f7fd fa76 	bl	800e358 <move_window>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010e70:	7dfb      	ldrb	r3, [r7, #23]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d138      	bne.n	8010ee8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e7a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	330b      	adds	r3, #11
 8010e80:	781a      	ldrb	r2, [r3, #0]
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	330b      	adds	r3, #11
 8010e86:	f042 0220 	orr.w	r2, r2, #32
 8010e8a:	b2d2      	uxtb	r2, r2
 8010e8c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	6818      	ldr	r0, [r3, #0]
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	689b      	ldr	r3, [r3, #8]
 8010e96:	461a      	mov	r2, r3
 8010e98:	68f9      	ldr	r1, [r7, #12]
 8010e9a:	f7fd fffb 	bl	800ee94 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	f103 021c 	add.w	r2, r3, #28
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	68db      	ldr	r3, [r3, #12]
 8010ea8:	4619      	mov	r1, r3
 8010eaa:	4610      	mov	r0, r2
 8010eac:	f7fc fffa 	bl	800dea4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	3316      	adds	r3, #22
 8010eb4:	6939      	ldr	r1, [r7, #16]
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7fc fff4 	bl	800dea4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	3312      	adds	r3, #18
 8010ec0:	2100      	movs	r1, #0
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	f7fc ffd3 	bl	800de6e <st_word>
					fs->wflag = 1;
 8010ec8:	68bb      	ldr	r3, [r7, #8]
 8010eca:	2201      	movs	r2, #1
 8010ecc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010ece:	68bb      	ldr	r3, [r7, #8]
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7fd fa6f 	bl	800e3b4 <sync_fs>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	7d1b      	ldrb	r3, [r3, #20]
 8010ede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ee2:	b2da      	uxtb	r2, r3
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3718      	adds	r7, #24
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}

08010ef2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010ef2:	b580      	push	{r7, lr}
 8010ef4:	b084      	sub	sp, #16
 8010ef6:	af00      	add	r7, sp, #0
 8010ef8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f7ff ff7b 	bl	8010df6 <f_sync>
 8010f00:	4603      	mov	r3, r0
 8010f02:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010f04:	7bfb      	ldrb	r3, [r7, #15]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d118      	bne.n	8010f3c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	f107 0208 	add.w	r2, r7, #8
 8010f10:	4611      	mov	r1, r2
 8010f12:	4618      	mov	r0, r3
 8010f14:	f7ff fa34 	bl	8010380 <validate>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010f1c:	7bfb      	ldrb	r3, [r7, #15]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d10c      	bne.n	8010f3c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	691b      	ldr	r3, [r3, #16]
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7fd f972 	bl	800e210 <dec_lock>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010f30:	7bfb      	ldrb	r3, [r7, #15]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d102      	bne.n	8010f3c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2200      	movs	r2, #0
 8010f3a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3710      	adds	r7, #16
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}

08010f46 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010f46:	b590      	push	{r4, r7, lr}
 8010f48:	b093      	sub	sp, #76	; 0x4c
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010f4e:	f107 010c 	add.w	r1, r7, #12
 8010f52:	1d3b      	adds	r3, r7, #4
 8010f54:	2200      	movs	r2, #0
 8010f56:	4618      	mov	r0, r3
 8010f58:	f7fe ff86 	bl	800fe68 <find_volume>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010f62:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d131      	bne.n	8010fce <f_chdir+0x88>
		dj.obj.fs = fs;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8010f6e:	687a      	ldr	r2, [r7, #4]
 8010f70:	f107 0310 	add.w	r3, r7, #16
 8010f74:	4611      	mov	r1, r2
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7fe fe46 	bl	800fc08 <follow_path>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 8010f82:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d11a      	bne.n	8010fc0 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8010f8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f8e:	b25b      	sxtb	r3, r3
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	da03      	bge.n	8010f9c <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	69ba      	ldr	r2, [r7, #24]
 8010f98:	61da      	str	r2, [r3, #28]
 8010f9a:	e011      	b.n	8010fc0 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8010f9c:	7dbb      	ldrb	r3, [r7, #22]
 8010f9e:	f003 0310 	and.w	r3, r3, #16
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d009      	beq.n	8010fba <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010faa:	68fc      	ldr	r4, [r7, #12]
 8010fac:	4611      	mov	r1, r2
 8010fae:	4618      	mov	r0, r3
 8010fb0:	f7fd ff51 	bl	800ee56 <ld_clust>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	61e3      	str	r3, [r4, #28]
 8010fb8:	e002      	b.n	8010fc0 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8010fba:	2305      	movs	r3, #5
 8010fbc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010fc0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010fc4:	2b04      	cmp	r3, #4
 8010fc6:	d102      	bne.n	8010fce <f_chdir+0x88>
 8010fc8:	2305      	movs	r3, #5
 8010fca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 8010fce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	374c      	adds	r7, #76	; 0x4c
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd90      	pop	{r4, r7, pc}

08010fda <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010fda:	b580      	push	{r7, lr}
 8010fdc:	b090      	sub	sp, #64	; 0x40
 8010fde:	af00      	add	r7, sp, #0
 8010fe0:	6078      	str	r0, [r7, #4]
 8010fe2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f107 0208 	add.w	r2, r7, #8
 8010fea:	4611      	mov	r1, r2
 8010fec:	4618      	mov	r0, r3
 8010fee:	f7ff f9c7 	bl	8010380 <validate>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010ff8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d103      	bne.n	8011008 <f_lseek+0x2e>
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	7d5b      	ldrb	r3, [r3, #21]
 8011004:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8011008:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801100c:	2b00      	cmp	r3, #0
 801100e:	d002      	beq.n	8011016 <f_lseek+0x3c>
 8011010:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011014:	e201      	b.n	801141a <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801101a:	2b00      	cmp	r3, #0
 801101c:	f000 80d9 	beq.w	80111d2 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011026:	d15a      	bne.n	80110de <f_lseek+0x104>
			tbl = fp->cltbl;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801102c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011030:	1d1a      	adds	r2, r3, #4
 8011032:	627a      	str	r2, [r7, #36]	; 0x24
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	617b      	str	r3, [r7, #20]
 8011038:	2302      	movs	r3, #2
 801103a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	689b      	ldr	r3, [r3, #8]
 8011040:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011044:	2b00      	cmp	r3, #0
 8011046:	d03a      	beq.n	80110be <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8011048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801104a:	613b      	str	r3, [r7, #16]
 801104c:	2300      	movs	r3, #0
 801104e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011052:	3302      	adds	r3, #2
 8011054:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8011056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011058:	60fb      	str	r3, [r7, #12]
 801105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801105c:	3301      	adds	r3, #1
 801105e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011064:	4618      	mov	r0, r3
 8011066:	f7fd fa34 	bl	800e4d2 <get_fat>
 801106a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801106c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801106e:	2b01      	cmp	r3, #1
 8011070:	d804      	bhi.n	801107c <f_lseek+0xa2>
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	2202      	movs	r2, #2
 8011076:	755a      	strb	r2, [r3, #21]
 8011078:	2302      	movs	r3, #2
 801107a:	e1ce      	b.n	801141a <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801107c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801107e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011082:	d104      	bne.n	801108e <f_lseek+0xb4>
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2201      	movs	r2, #1
 8011088:	755a      	strb	r2, [r3, #21]
 801108a:	2301      	movs	r3, #1
 801108c:	e1c5      	b.n	801141a <f_lseek+0x440>
					} while (cl == pcl + 1);
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	3301      	adds	r3, #1
 8011092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011094:	429a      	cmp	r2, r3
 8011096:	d0de      	beq.n	8011056 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8011098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801109a:	697b      	ldr	r3, [r7, #20]
 801109c:	429a      	cmp	r2, r3
 801109e:	d809      	bhi.n	80110b4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80110a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a2:	1d1a      	adds	r2, r3, #4
 80110a4:	627a      	str	r2, [r7, #36]	; 0x24
 80110a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110a8:	601a      	str	r2, [r3, #0]
 80110aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ac:	1d1a      	adds	r2, r3, #4
 80110ae:	627a      	str	r2, [r7, #36]	; 0x24
 80110b0:	693a      	ldr	r2, [r7, #16]
 80110b2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80110b4:	68bb      	ldr	r3, [r7, #8]
 80110b6:	6a1b      	ldr	r3, [r3, #32]
 80110b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80110ba:	429a      	cmp	r2, r3
 80110bc:	d3c4      	bcc.n	8011048 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110c4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80110c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110c8:	697b      	ldr	r3, [r7, #20]
 80110ca:	429a      	cmp	r2, r3
 80110cc:	d803      	bhi.n	80110d6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80110ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d0:	2200      	movs	r2, #0
 80110d2:	601a      	str	r2, [r3, #0]
 80110d4:	e19f      	b.n	8011416 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80110d6:	2311      	movs	r3, #17
 80110d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80110dc:	e19b      	b.n	8011416 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	68db      	ldr	r3, [r3, #12]
 80110e2:	683a      	ldr	r2, [r7, #0]
 80110e4:	429a      	cmp	r2, r3
 80110e6:	d902      	bls.n	80110ee <f_lseek+0x114>
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	68db      	ldr	r3, [r3, #12]
 80110ec:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	683a      	ldr	r2, [r7, #0]
 80110f2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	f000 818d 	beq.w	8011416 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	3b01      	subs	r3, #1
 8011100:	4619      	mov	r1, r3
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f7fd fcc9 	bl	800ea9a <clmt_clust>
 8011108:	4602      	mov	r2, r0
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801110e:	68ba      	ldr	r2, [r7, #8]
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	69db      	ldr	r3, [r3, #28]
 8011114:	4619      	mov	r1, r3
 8011116:	4610      	mov	r0, r2
 8011118:	f7fd f9bc 	bl	800e494 <clust2sect>
 801111c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801111e:	69bb      	ldr	r3, [r7, #24]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d104      	bne.n	801112e <f_lseek+0x154>
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2202      	movs	r2, #2
 8011128:	755a      	strb	r2, [r3, #21]
 801112a:	2302      	movs	r3, #2
 801112c:	e175      	b.n	801141a <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	3b01      	subs	r3, #1
 8011132:	68ba      	ldr	r2, [r7, #8]
 8011134:	8992      	ldrh	r2, [r2, #12]
 8011136:	fbb3 f3f2 	udiv	r3, r3, r2
 801113a:	68ba      	ldr	r2, [r7, #8]
 801113c:	8952      	ldrh	r2, [r2, #10]
 801113e:	3a01      	subs	r2, #1
 8011140:	4013      	ands	r3, r2
 8011142:	69ba      	ldr	r2, [r7, #24]
 8011144:	4413      	add	r3, r2
 8011146:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	699b      	ldr	r3, [r3, #24]
 801114c:	68ba      	ldr	r2, [r7, #8]
 801114e:	8992      	ldrh	r2, [r2, #12]
 8011150:	fbb3 f1f2 	udiv	r1, r3, r2
 8011154:	fb02 f201 	mul.w	r2, r2, r1
 8011158:	1a9b      	subs	r3, r3, r2
 801115a:	2b00      	cmp	r3, #0
 801115c:	f000 815b 	beq.w	8011416 <f_lseek+0x43c>
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	6a1b      	ldr	r3, [r3, #32]
 8011164:	69ba      	ldr	r2, [r7, #24]
 8011166:	429a      	cmp	r2, r3
 8011168:	f000 8155 	beq.w	8011416 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	7d1b      	ldrb	r3, [r3, #20]
 8011170:	b25b      	sxtb	r3, r3
 8011172:	2b00      	cmp	r3, #0
 8011174:	da18      	bge.n	80111a8 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	7858      	ldrb	r0, [r3, #1]
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	6a1a      	ldr	r2, [r3, #32]
 8011184:	2301      	movs	r3, #1
 8011186:	f7fc fdf9 	bl	800dd7c <disk_write>
 801118a:	4603      	mov	r3, r0
 801118c:	2b00      	cmp	r3, #0
 801118e:	d004      	beq.n	801119a <f_lseek+0x1c0>
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2201      	movs	r2, #1
 8011194:	755a      	strb	r2, [r3, #21]
 8011196:	2301      	movs	r3, #1
 8011198:	e13f      	b.n	801141a <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	7d1b      	ldrb	r3, [r3, #20]
 801119e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111a2:	b2da      	uxtb	r2, r3
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	7858      	ldrb	r0, [r3, #1]
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80111b2:	2301      	movs	r3, #1
 80111b4:	69ba      	ldr	r2, [r7, #24]
 80111b6:	f7fc fdc1 	bl	800dd3c <disk_read>
 80111ba:	4603      	mov	r3, r0
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d004      	beq.n	80111ca <f_lseek+0x1f0>
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	2201      	movs	r2, #1
 80111c4:	755a      	strb	r2, [r3, #21]
 80111c6:	2301      	movs	r3, #1
 80111c8:	e127      	b.n	801141a <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	69ba      	ldr	r2, [r7, #24]
 80111ce:	621a      	str	r2, [r3, #32]
 80111d0:	e121      	b.n	8011416 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	68db      	ldr	r3, [r3, #12]
 80111d6:	683a      	ldr	r2, [r7, #0]
 80111d8:	429a      	cmp	r2, r3
 80111da:	d908      	bls.n	80111ee <f_lseek+0x214>
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	7d1b      	ldrb	r3, [r3, #20]
 80111e0:	f003 0302 	and.w	r3, r3, #2
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d102      	bne.n	80111ee <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	68db      	ldr	r3, [r3, #12]
 80111ec:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	699b      	ldr	r3, [r3, #24]
 80111f2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80111f4:	2300      	movs	r3, #0
 80111f6:	637b      	str	r3, [r7, #52]	; 0x34
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80111fc:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	2b00      	cmp	r3, #0
 8011202:	f000 80b5 	beq.w	8011370 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	895b      	ldrh	r3, [r3, #10]
 801120a:	461a      	mov	r2, r3
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	899b      	ldrh	r3, [r3, #12]
 8011210:	fb03 f302 	mul.w	r3, r3, r2
 8011214:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8011216:	6a3b      	ldr	r3, [r7, #32]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d01b      	beq.n	8011254 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	1e5a      	subs	r2, r3, #1
 8011220:	69fb      	ldr	r3, [r7, #28]
 8011222:	fbb2 f2f3 	udiv	r2, r2, r3
 8011226:	6a3b      	ldr	r3, [r7, #32]
 8011228:	1e59      	subs	r1, r3, #1
 801122a:	69fb      	ldr	r3, [r7, #28]
 801122c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011230:	429a      	cmp	r2, r3
 8011232:	d30f      	bcc.n	8011254 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011234:	6a3b      	ldr	r3, [r7, #32]
 8011236:	1e5a      	subs	r2, r3, #1
 8011238:	69fb      	ldr	r3, [r7, #28]
 801123a:	425b      	negs	r3, r3
 801123c:	401a      	ands	r2, r3
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	699b      	ldr	r3, [r3, #24]
 8011246:	683a      	ldr	r2, [r7, #0]
 8011248:	1ad3      	subs	r3, r2, r3
 801124a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	69db      	ldr	r3, [r3, #28]
 8011250:	63bb      	str	r3, [r7, #56]	; 0x38
 8011252:	e022      	b.n	801129a <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	689b      	ldr	r3, [r3, #8]
 8011258:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801125a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801125c:	2b00      	cmp	r3, #0
 801125e:	d119      	bne.n	8011294 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	2100      	movs	r1, #0
 8011264:	4618      	mov	r0, r3
 8011266:	f7fd fb80 	bl	800e96a <create_chain>
 801126a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801126c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801126e:	2b01      	cmp	r3, #1
 8011270:	d104      	bne.n	801127c <f_lseek+0x2a2>
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	2202      	movs	r2, #2
 8011276:	755a      	strb	r2, [r3, #21]
 8011278:	2302      	movs	r3, #2
 801127a:	e0ce      	b.n	801141a <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801127c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801127e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011282:	d104      	bne.n	801128e <f_lseek+0x2b4>
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2201      	movs	r2, #1
 8011288:	755a      	strb	r2, [r3, #21]
 801128a:	2301      	movs	r3, #1
 801128c:	e0c5      	b.n	801141a <f_lseek+0x440>
					fp->obj.sclust = clst;
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011292:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011298:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801129a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801129c:	2b00      	cmp	r3, #0
 801129e:	d067      	beq.n	8011370 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80112a0:	e03a      	b.n	8011318 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80112a2:	683a      	ldr	r2, [r7, #0]
 80112a4:	69fb      	ldr	r3, [r7, #28]
 80112a6:	1ad3      	subs	r3, r2, r3
 80112a8:	603b      	str	r3, [r7, #0]
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	699a      	ldr	r2, [r3, #24]
 80112ae:	69fb      	ldr	r3, [r7, #28]
 80112b0:	441a      	add	r2, r3
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	7d1b      	ldrb	r3, [r3, #20]
 80112ba:	f003 0302 	and.w	r3, r3, #2
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d00b      	beq.n	80112da <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80112c6:	4618      	mov	r0, r3
 80112c8:	f7fd fb4f 	bl	800e96a <create_chain>
 80112cc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80112ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d108      	bne.n	80112e6 <f_lseek+0x30c>
							ofs = 0; break;
 80112d4:	2300      	movs	r3, #0
 80112d6:	603b      	str	r3, [r7, #0]
 80112d8:	e022      	b.n	8011320 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80112de:	4618      	mov	r0, r3
 80112e0:	f7fd f8f7 	bl	800e4d2 <get_fat>
 80112e4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80112e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112ec:	d104      	bne.n	80112f8 <f_lseek+0x31e>
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2201      	movs	r2, #1
 80112f2:	755a      	strb	r2, [r3, #21]
 80112f4:	2301      	movs	r3, #1
 80112f6:	e090      	b.n	801141a <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80112f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fa:	2b01      	cmp	r3, #1
 80112fc:	d904      	bls.n	8011308 <f_lseek+0x32e>
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	6a1b      	ldr	r3, [r3, #32]
 8011302:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011304:	429a      	cmp	r2, r3
 8011306:	d304      	bcc.n	8011312 <f_lseek+0x338>
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	2202      	movs	r2, #2
 801130c:	755a      	strb	r2, [r3, #21]
 801130e:	2302      	movs	r3, #2
 8011310:	e083      	b.n	801141a <f_lseek+0x440>
					fp->clust = clst;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011316:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011318:	683a      	ldr	r2, [r7, #0]
 801131a:	69fb      	ldr	r3, [r7, #28]
 801131c:	429a      	cmp	r2, r3
 801131e:	d8c0      	bhi.n	80112a2 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	699a      	ldr	r2, [r3, #24]
 8011324:	683b      	ldr	r3, [r7, #0]
 8011326:	441a      	add	r2, r3
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	899b      	ldrh	r3, [r3, #12]
 8011330:	461a      	mov	r2, r3
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	fbb3 f1f2 	udiv	r1, r3, r2
 8011338:	fb02 f201 	mul.w	r2, r2, r1
 801133c:	1a9b      	subs	r3, r3, r2
 801133e:	2b00      	cmp	r3, #0
 8011340:	d016      	beq.n	8011370 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011346:	4618      	mov	r0, r3
 8011348:	f7fd f8a4 	bl	800e494 <clust2sect>
 801134c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801134e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011350:	2b00      	cmp	r3, #0
 8011352:	d104      	bne.n	801135e <f_lseek+0x384>
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2202      	movs	r2, #2
 8011358:	755a      	strb	r2, [r3, #21]
 801135a:	2302      	movs	r3, #2
 801135c:	e05d      	b.n	801141a <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	899b      	ldrh	r3, [r3, #12]
 8011362:	461a      	mov	r2, r3
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	fbb3 f3f2 	udiv	r3, r3, r2
 801136a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801136c:	4413      	add	r3, r2
 801136e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	699a      	ldr	r2, [r3, #24]
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	68db      	ldr	r3, [r3, #12]
 8011378:	429a      	cmp	r2, r3
 801137a:	d90a      	bls.n	8011392 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	699a      	ldr	r2, [r3, #24]
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	7d1b      	ldrb	r3, [r3, #20]
 8011388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801138c:	b2da      	uxtb	r2, r3
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	699b      	ldr	r3, [r3, #24]
 8011396:	68ba      	ldr	r2, [r7, #8]
 8011398:	8992      	ldrh	r2, [r2, #12]
 801139a:	fbb3 f1f2 	udiv	r1, r3, r2
 801139e:	fb02 f201 	mul.w	r2, r2, r1
 80113a2:	1a9b      	subs	r3, r3, r2
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d036      	beq.n	8011416 <f_lseek+0x43c>
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6a1b      	ldr	r3, [r3, #32]
 80113ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113ae:	429a      	cmp	r2, r3
 80113b0:	d031      	beq.n	8011416 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	7d1b      	ldrb	r3, [r3, #20]
 80113b6:	b25b      	sxtb	r3, r3
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	da18      	bge.n	80113ee <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80113bc:	68bb      	ldr	r3, [r7, #8]
 80113be:	7858      	ldrb	r0, [r3, #1]
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	6a1a      	ldr	r2, [r3, #32]
 80113ca:	2301      	movs	r3, #1
 80113cc:	f7fc fcd6 	bl	800dd7c <disk_write>
 80113d0:	4603      	mov	r3, r0
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d004      	beq.n	80113e0 <f_lseek+0x406>
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	2201      	movs	r2, #1
 80113da:	755a      	strb	r2, [r3, #21]
 80113dc:	2301      	movs	r3, #1
 80113de:	e01c      	b.n	801141a <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	7d1b      	ldrb	r3, [r3, #20]
 80113e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113e8:	b2da      	uxtb	r2, r3
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80113ee:	68bb      	ldr	r3, [r7, #8]
 80113f0:	7858      	ldrb	r0, [r3, #1]
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80113f8:	2301      	movs	r3, #1
 80113fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113fc:	f7fc fc9e 	bl	800dd3c <disk_read>
 8011400:	4603      	mov	r3, r0
 8011402:	2b00      	cmp	r3, #0
 8011404:	d004      	beq.n	8011410 <f_lseek+0x436>
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	2201      	movs	r2, #1
 801140a:	755a      	strb	r2, [r3, #21]
 801140c:	2301      	movs	r3, #1
 801140e:	e004      	b.n	801141a <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011414:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011416:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801141a:	4618      	mov	r0, r3
 801141c:	3740      	adds	r7, #64	; 0x40
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}

08011422 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8011422:	b580      	push	{r7, lr}
 8011424:	b0a0      	sub	sp, #128	; 0x80
 8011426:	af00      	add	r7, sp, #0
 8011428:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801142a:	2300      	movs	r3, #0
 801142c:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801142e:	f107 010c 	add.w	r1, r7, #12
 8011432:	1d3b      	adds	r3, r7, #4
 8011434:	2202      	movs	r2, #2
 8011436:	4618      	mov	r0, r3
 8011438:	f7fe fd16 	bl	800fe68 <find_volume>
 801143c:	4603      	mov	r3, r0
 801143e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 8011446:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801144a:	2b00      	cmp	r3, #0
 801144c:	f040 80a4 	bne.w	8011598 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8011450:	687a      	ldr	r2, [r7, #4]
 8011452:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011456:	4611      	mov	r1, r2
 8011458:	4618      	mov	r0, r3
 801145a:	f7fe fbd5 	bl	800fc08 <follow_path>
 801145e:	4603      	mov	r3, r0
 8011460:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8011464:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011468:	2b00      	cmp	r3, #0
 801146a:	d108      	bne.n	801147e <f_unlink+0x5c>
 801146c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8011470:	f003 0320 	and.w	r3, r3, #32
 8011474:	2b00      	cmp	r3, #0
 8011476:	d002      	beq.n	801147e <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8011478:	2306      	movs	r3, #6
 801147a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801147e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011482:	2b00      	cmp	r3, #0
 8011484:	d108      	bne.n	8011498 <f_unlink+0x76>
 8011486:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801148a:	2102      	movs	r1, #2
 801148c:	4618      	mov	r0, r3
 801148e:	f7fc fdb3 	bl	800dff8 <chk_lock>
 8011492:	4603      	mov	r3, r0
 8011494:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8011498:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801149c:	2b00      	cmp	r3, #0
 801149e:	d17b      	bne.n	8011598 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80114a0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80114a4:	b25b      	sxtb	r3, r3
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	da03      	bge.n	80114b2 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80114aa:	2306      	movs	r3, #6
 80114ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80114b0:	e008      	b.n	80114c4 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80114b2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80114b6:	f003 0301 	and.w	r3, r3, #1
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d002      	beq.n	80114c4 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80114be:	2307      	movs	r3, #7
 80114c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 80114c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d13d      	bne.n	8011548 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80114d0:	4611      	mov	r1, r2
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7fd fcbf 	bl	800ee56 <ld_clust>
 80114d8:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80114da:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80114de:	f003 0310 	and.w	r3, r3, #16
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d030      	beq.n	8011548 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	69db      	ldr	r3, [r3, #28]
 80114ea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80114ec:	429a      	cmp	r2, r3
 80114ee:	d103      	bne.n	80114f8 <f_unlink+0xd6>
						res = FR_DENIED;
 80114f0:	2307      	movs	r3, #7
 80114f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80114f6:	e027      	b.n	8011548 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80114fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80114fe:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8011500:	f107 0310 	add.w	r3, r7, #16
 8011504:	2100      	movs	r1, #0
 8011506:	4618      	mov	r0, r3
 8011508:	f7fd faff 	bl	800eb0a <dir_sdi>
 801150c:	4603      	mov	r3, r0
 801150e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 8011512:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011516:	2b00      	cmp	r3, #0
 8011518:	d116      	bne.n	8011548 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 801151a:	f107 0310 	add.w	r3, r7, #16
 801151e:	2100      	movs	r1, #0
 8011520:	4618      	mov	r0, r3
 8011522:	f7fd fec3 	bl	800f2ac <dir_read>
 8011526:	4603      	mov	r3, r0
 8011528:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801152c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011530:	2b00      	cmp	r3, #0
 8011532:	d102      	bne.n	801153a <f_unlink+0x118>
 8011534:	2307      	movs	r3, #7
 8011536:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801153a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801153e:	2b04      	cmp	r3, #4
 8011540:	d102      	bne.n	8011548 <f_unlink+0x126>
 8011542:	2300      	movs	r3, #0
 8011544:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8011548:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801154c:	2b00      	cmp	r3, #0
 801154e:	d123      	bne.n	8011598 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8011550:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011554:	4618      	mov	r0, r3
 8011556:	f7fe f909 	bl	800f76c <dir_remove>
 801155a:	4603      	mov	r3, r0
 801155c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8011560:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011564:	2b00      	cmp	r3, #0
 8011566:	d10c      	bne.n	8011582 <f_unlink+0x160>
 8011568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801156a:	2b00      	cmp	r3, #0
 801156c:	d009      	beq.n	8011582 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801156e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011572:	2200      	movs	r2, #0
 8011574:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011576:	4618      	mov	r0, r3
 8011578:	f7fd f992 	bl	800e8a0 <remove_chain>
 801157c:	4603      	mov	r3, r0
 801157e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8011582:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011586:	2b00      	cmp	r3, #0
 8011588:	d106      	bne.n	8011598 <f_unlink+0x176>
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	4618      	mov	r0, r3
 801158e:	f7fc ff11 	bl	800e3b4 <sync_fs>
 8011592:	4603      	mov	r3, r0
 8011594:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011598:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801159c:	4618      	mov	r0, r3
 801159e:	3780      	adds	r7, #128	; 0x80
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}

080115a4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b098      	sub	sp, #96	; 0x60
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80115ac:	f107 010c 	add.w	r1, r7, #12
 80115b0:	1d3b      	adds	r3, r7, #4
 80115b2:	2202      	movs	r2, #2
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7fe fc57 	bl	800fe68 <find_volume>
 80115ba:	4603      	mov	r3, r0
 80115bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 80115c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	f040 80ff 	bne.w	80117cc <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80115ce:	687a      	ldr	r2, [r7, #4]
 80115d0:	f107 0310 	add.w	r3, r7, #16
 80115d4:	4611      	mov	r1, r2
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7fe fb16 	bl	800fc08 <follow_path>
 80115dc:	4603      	mov	r3, r0
 80115de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80115e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d102      	bne.n	80115f0 <f_mkdir+0x4c>
 80115ea:	2308      	movs	r3, #8
 80115ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80115f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80115f4:	2b04      	cmp	r3, #4
 80115f6:	d108      	bne.n	801160a <f_mkdir+0x66>
 80115f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80115fc:	f003 0320 	and.w	r3, r3, #32
 8011600:	2b00      	cmp	r3, #0
 8011602:	d002      	beq.n	801160a <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8011604:	2306      	movs	r3, #6
 8011606:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801160a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801160e:	2b04      	cmp	r3, #4
 8011610:	f040 80dc 	bne.w	80117cc <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8011614:	f107 0310 	add.w	r3, r7, #16
 8011618:	2100      	movs	r1, #0
 801161a:	4618      	mov	r0, r3
 801161c:	f7fd f9a5 	bl	800e96a <create_chain>
 8011620:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	895b      	ldrh	r3, [r3, #10]
 8011626:	461a      	mov	r2, r3
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	899b      	ldrh	r3, [r3, #12]
 801162c:	fb03 f302 	mul.w	r3, r3, r2
 8011630:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8011632:	2300      	movs	r3, #0
 8011634:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8011638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801163a:	2b00      	cmp	r3, #0
 801163c:	d102      	bne.n	8011644 <f_mkdir+0xa0>
 801163e:	2307      	movs	r3, #7
 8011640:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8011644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011646:	2b01      	cmp	r3, #1
 8011648:	d102      	bne.n	8011650 <f_mkdir+0xac>
 801164a:	2302      	movs	r3, #2
 801164c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011656:	d102      	bne.n	801165e <f_mkdir+0xba>
 8011658:	2301      	movs	r3, #1
 801165a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801165e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011662:	2b00      	cmp	r3, #0
 8011664:	d106      	bne.n	8011674 <f_mkdir+0xd0>
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	4618      	mov	r0, r3
 801166a:	f7fc fe31 	bl	800e2d0 <sync_window>
 801166e:	4603      	mov	r3, r0
 8011670:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8011674:	f7fc f8d2 	bl	800d81c <get_fattime>
 8011678:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 801167a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801167e:	2b00      	cmp	r3, #0
 8011680:	d16c      	bne.n	801175c <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011686:	4618      	mov	r0, r3
 8011688:	f7fc ff04 	bl	800e494 <clust2sect>
 801168c:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	333c      	adds	r3, #60	; 0x3c
 8011692:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	899b      	ldrh	r3, [r3, #12]
 8011698:	461a      	mov	r2, r3
 801169a:	2100      	movs	r1, #0
 801169c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801169e:	f7fc fc4e 	bl	800df3e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80116a2:	220b      	movs	r2, #11
 80116a4:	2120      	movs	r1, #32
 80116a6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80116a8:	f7fc fc49 	bl	800df3e <mem_set>
					dir[DIR_Name] = '.';
 80116ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116ae:	222e      	movs	r2, #46	; 0x2e
 80116b0:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80116b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116b4:	330b      	adds	r3, #11
 80116b6:	2210      	movs	r2, #16
 80116b8:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80116ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116bc:	3316      	adds	r3, #22
 80116be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80116c0:	4618      	mov	r0, r3
 80116c2:	f7fc fbef 	bl	800dea4 <st_dword>
					st_clust(fs, dir, dcl);
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80116ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80116cc:	4618      	mov	r0, r3
 80116ce:	f7fd fbe1 	bl	800ee94 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80116d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116d4:	3320      	adds	r3, #32
 80116d6:	2220      	movs	r2, #32
 80116d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80116da:	4618      	mov	r0, r3
 80116dc:	f7fc fc0e 	bl	800defc <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80116e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116e2:	3321      	adds	r3, #33	; 0x21
 80116e4:	222e      	movs	r2, #46	; 0x2e
 80116e6:	701a      	strb	r2, [r3, #0]
 80116e8:	69bb      	ldr	r3, [r7, #24]
 80116ea:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	781b      	ldrb	r3, [r3, #0]
 80116f0:	2b03      	cmp	r3, #3
 80116f2:	d106      	bne.n	8011702 <f_mkdir+0x15e>
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80116fa:	429a      	cmp	r2, r3
 80116fc:	d101      	bne.n	8011702 <f_mkdir+0x15e>
 80116fe:	2300      	movs	r3, #0
 8011700:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8011702:	68f8      	ldr	r0, [r7, #12]
 8011704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011706:	3320      	adds	r3, #32
 8011708:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801170a:	4619      	mov	r1, r3
 801170c:	f7fd fbc2 	bl	800ee94 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	895b      	ldrh	r3, [r3, #10]
 8011714:	65bb      	str	r3, [r7, #88]	; 0x58
 8011716:	e01c      	b.n	8011752 <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 8011718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801171a:	1c5a      	adds	r2, r3, #1
 801171c:	657a      	str	r2, [r7, #84]	; 0x54
 801171e:	68fa      	ldr	r2, [r7, #12]
 8011720:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	2201      	movs	r2, #1
 8011726:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	4618      	mov	r0, r3
 801172c:	f7fc fdd0 	bl	800e2d0 <sync_window>
 8011730:	4603      	mov	r3, r0
 8011732:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8011736:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801173a:	2b00      	cmp	r3, #0
 801173c:	d10d      	bne.n	801175a <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	899b      	ldrh	r3, [r3, #12]
 8011742:	461a      	mov	r2, r3
 8011744:	2100      	movs	r1, #0
 8011746:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011748:	f7fc fbf9 	bl	800df3e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801174c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801174e:	3b01      	subs	r3, #1
 8011750:	65bb      	str	r3, [r7, #88]	; 0x58
 8011752:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011754:	2b00      	cmp	r3, #0
 8011756:	d1df      	bne.n	8011718 <f_mkdir+0x174>
 8011758:	e000      	b.n	801175c <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 801175a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801175c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011760:	2b00      	cmp	r3, #0
 8011762:	d107      	bne.n	8011774 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8011764:	f107 0310 	add.w	r3, r7, #16
 8011768:	4618      	mov	r0, r3
 801176a:	f7fd ff07 	bl	800f57c <dir_register>
 801176e:	4603      	mov	r3, r0
 8011770:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8011774:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011778:	2b00      	cmp	r3, #0
 801177a:	d120      	bne.n	80117be <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801177e:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8011780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011782:	3316      	adds	r3, #22
 8011784:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011786:	4618      	mov	r0, r3
 8011788:	f7fc fb8c 	bl	800dea4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011790:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011792:	4618      	mov	r0, r3
 8011794:	f7fd fb7e 	bl	800ee94 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801179a:	330b      	adds	r3, #11
 801179c:	2210      	movs	r2, #16
 801179e:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	2201      	movs	r2, #1
 80117a4:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80117a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d10e      	bne.n	80117cc <f_mkdir+0x228>
					res = sync_fs(fs);
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7fc fdff 	bl	800e3b4 <sync_fs>
 80117b6:	4603      	mov	r3, r0
 80117b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80117bc:	e006      	b.n	80117cc <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80117be:	f107 0310 	add.w	r3, r7, #16
 80117c2:	2200      	movs	r2, #0
 80117c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80117c6:	4618      	mov	r0, r3
 80117c8:	f7fd f86a 	bl	800e8a0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80117cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	3760      	adds	r7, #96	; 0x60
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}

080117d8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b088      	sub	sp, #32
 80117dc:	af00      	add	r7, sp, #0
 80117de:	60f8      	str	r0, [r7, #12]
 80117e0:	60b9      	str	r1, [r7, #8]
 80117e2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80117e4:	2300      	movs	r3, #0
 80117e6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80117ec:	e01b      	b.n	8011826 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80117ee:	f107 0310 	add.w	r3, r7, #16
 80117f2:	f107 0114 	add.w	r1, r7, #20
 80117f6:	2201      	movs	r2, #1
 80117f8:	6878      	ldr	r0, [r7, #4]
 80117fa:	f7ff f809 	bl	8010810 <f_read>
		if (rc != 1) break;
 80117fe:	693b      	ldr	r3, [r7, #16]
 8011800:	2b01      	cmp	r3, #1
 8011802:	d116      	bne.n	8011832 <f_gets+0x5a>
		c = s[0];
 8011804:	7d3b      	ldrb	r3, [r7, #20]
 8011806:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8011808:	7dfb      	ldrb	r3, [r7, #23]
 801180a:	2b0d      	cmp	r3, #13
 801180c:	d100      	bne.n	8011810 <f_gets+0x38>
 801180e:	e00a      	b.n	8011826 <f_gets+0x4e>
		*p++ = c;
 8011810:	69bb      	ldr	r3, [r7, #24]
 8011812:	1c5a      	adds	r2, r3, #1
 8011814:	61ba      	str	r2, [r7, #24]
 8011816:	7dfa      	ldrb	r2, [r7, #23]
 8011818:	701a      	strb	r2, [r3, #0]
		n++;
 801181a:	69fb      	ldr	r3, [r7, #28]
 801181c:	3301      	adds	r3, #1
 801181e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8011820:	7dfb      	ldrb	r3, [r7, #23]
 8011822:	2b0a      	cmp	r3, #10
 8011824:	d007      	beq.n	8011836 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011826:	68bb      	ldr	r3, [r7, #8]
 8011828:	3b01      	subs	r3, #1
 801182a:	69fa      	ldr	r2, [r7, #28]
 801182c:	429a      	cmp	r2, r3
 801182e:	dbde      	blt.n	80117ee <f_gets+0x16>
 8011830:	e002      	b.n	8011838 <f_gets+0x60>
		if (rc != 1) break;
 8011832:	bf00      	nop
 8011834:	e000      	b.n	8011838 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8011836:	bf00      	nop
	}
	*p = 0;
 8011838:	69bb      	ldr	r3, [r7, #24]
 801183a:	2200      	movs	r2, #0
 801183c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801183e:	69fb      	ldr	r3, [r7, #28]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d001      	beq.n	8011848 <f_gets+0x70>
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	e000      	b.n	801184a <f_gets+0x72>
 8011848:	2300      	movs	r3, #0
}
 801184a:	4618      	mov	r0, r3
 801184c:	3720      	adds	r7, #32
 801184e:	46bd      	mov	sp, r7
 8011850:	bd80      	pop	{r7, pc}
	...

08011854 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011854:	b480      	push	{r7}
 8011856:	b087      	sub	sp, #28
 8011858:	af00      	add	r7, sp, #0
 801185a:	60f8      	str	r0, [r7, #12]
 801185c:	60b9      	str	r1, [r7, #8]
 801185e:	4613      	mov	r3, r2
 8011860:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011862:	2301      	movs	r3, #1
 8011864:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011866:	2300      	movs	r3, #0
 8011868:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801186a:	4b1f      	ldr	r3, [pc, #124]	; (80118e8 <FATFS_LinkDriverEx+0x94>)
 801186c:	7a5b      	ldrb	r3, [r3, #9]
 801186e:	b2db      	uxtb	r3, r3
 8011870:	2b00      	cmp	r3, #0
 8011872:	d131      	bne.n	80118d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011874:	4b1c      	ldr	r3, [pc, #112]	; (80118e8 <FATFS_LinkDriverEx+0x94>)
 8011876:	7a5b      	ldrb	r3, [r3, #9]
 8011878:	b2db      	uxtb	r3, r3
 801187a:	461a      	mov	r2, r3
 801187c:	4b1a      	ldr	r3, [pc, #104]	; (80118e8 <FATFS_LinkDriverEx+0x94>)
 801187e:	2100      	movs	r1, #0
 8011880:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011882:	4b19      	ldr	r3, [pc, #100]	; (80118e8 <FATFS_LinkDriverEx+0x94>)
 8011884:	7a5b      	ldrb	r3, [r3, #9]
 8011886:	b2db      	uxtb	r3, r3
 8011888:	4a17      	ldr	r2, [pc, #92]	; (80118e8 <FATFS_LinkDriverEx+0x94>)
 801188a:	009b      	lsls	r3, r3, #2
 801188c:	4413      	add	r3, r2
 801188e:	68fa      	ldr	r2, [r7, #12]
 8011890:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011892:	4b15      	ldr	r3, [pc, #84]	; (80118e8 <FATFS_LinkDriverEx+0x94>)
 8011894:	7a5b      	ldrb	r3, [r3, #9]
 8011896:	b2db      	uxtb	r3, r3
 8011898:	461a      	mov	r2, r3
 801189a:	4b13      	ldr	r3, [pc, #76]	; (80118e8 <FATFS_LinkDriverEx+0x94>)
 801189c:	4413      	add	r3, r2
 801189e:	79fa      	ldrb	r2, [r7, #7]
 80118a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80118a2:	4b11      	ldr	r3, [pc, #68]	; (80118e8 <FATFS_LinkDriverEx+0x94>)
 80118a4:	7a5b      	ldrb	r3, [r3, #9]
 80118a6:	b2db      	uxtb	r3, r3
 80118a8:	1c5a      	adds	r2, r3, #1
 80118aa:	b2d1      	uxtb	r1, r2
 80118ac:	4a0e      	ldr	r2, [pc, #56]	; (80118e8 <FATFS_LinkDriverEx+0x94>)
 80118ae:	7251      	strb	r1, [r2, #9]
 80118b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80118b2:	7dbb      	ldrb	r3, [r7, #22]
 80118b4:	3330      	adds	r3, #48	; 0x30
 80118b6:	b2da      	uxtb	r2, r3
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	3301      	adds	r3, #1
 80118c0:	223a      	movs	r2, #58	; 0x3a
 80118c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80118c4:	68bb      	ldr	r3, [r7, #8]
 80118c6:	3302      	adds	r3, #2
 80118c8:	222f      	movs	r2, #47	; 0x2f
 80118ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80118cc:	68bb      	ldr	r3, [r7, #8]
 80118ce:	3303      	adds	r3, #3
 80118d0:	2200      	movs	r2, #0
 80118d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80118d4:	2300      	movs	r3, #0
 80118d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80118d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80118da:	4618      	mov	r0, r3
 80118dc:	371c      	adds	r7, #28
 80118de:	46bd      	mov	sp, r7
 80118e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e4:	4770      	bx	lr
 80118e6:	bf00      	nop
 80118e8:	20036c70 	.word	0x20036c70

080118ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b082      	sub	sp, #8
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
 80118f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80118f6:	2200      	movs	r2, #0
 80118f8:	6839      	ldr	r1, [r7, #0]
 80118fa:	6878      	ldr	r0, [r7, #4]
 80118fc:	f7ff ffaa 	bl	8011854 <FATFS_LinkDriverEx>
 8011900:	4603      	mov	r3, r0
}
 8011902:	4618      	mov	r0, r3
 8011904:	3708      	adds	r7, #8
 8011906:	46bd      	mov	sp, r7
 8011908:	bd80      	pop	{r7, pc}
	...

0801190c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801190c:	b480      	push	{r7}
 801190e:	b085      	sub	sp, #20
 8011910:	af00      	add	r7, sp, #0
 8011912:	4603      	mov	r3, r0
 8011914:	6039      	str	r1, [r7, #0]
 8011916:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011918:	88fb      	ldrh	r3, [r7, #6]
 801191a:	2b7f      	cmp	r3, #127	; 0x7f
 801191c:	d802      	bhi.n	8011924 <ff_convert+0x18>
		c = chr;
 801191e:	88fb      	ldrh	r3, [r7, #6]
 8011920:	81fb      	strh	r3, [r7, #14]
 8011922:	e025      	b.n	8011970 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d00b      	beq.n	8011942 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801192a:	88fb      	ldrh	r3, [r7, #6]
 801192c:	2bff      	cmp	r3, #255	; 0xff
 801192e:	d805      	bhi.n	801193c <ff_convert+0x30>
 8011930:	88fb      	ldrh	r3, [r7, #6]
 8011932:	3b80      	subs	r3, #128	; 0x80
 8011934:	4a12      	ldr	r2, [pc, #72]	; (8011980 <ff_convert+0x74>)
 8011936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801193a:	e000      	b.n	801193e <ff_convert+0x32>
 801193c:	2300      	movs	r3, #0
 801193e:	81fb      	strh	r3, [r7, #14]
 8011940:	e016      	b.n	8011970 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8011942:	2300      	movs	r3, #0
 8011944:	81fb      	strh	r3, [r7, #14]
 8011946:	e009      	b.n	801195c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011948:	89fb      	ldrh	r3, [r7, #14]
 801194a:	4a0d      	ldr	r2, [pc, #52]	; (8011980 <ff_convert+0x74>)
 801194c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011950:	88fa      	ldrh	r2, [r7, #6]
 8011952:	429a      	cmp	r2, r3
 8011954:	d006      	beq.n	8011964 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011956:	89fb      	ldrh	r3, [r7, #14]
 8011958:	3301      	adds	r3, #1
 801195a:	81fb      	strh	r3, [r7, #14]
 801195c:	89fb      	ldrh	r3, [r7, #14]
 801195e:	2b7f      	cmp	r3, #127	; 0x7f
 8011960:	d9f2      	bls.n	8011948 <ff_convert+0x3c>
 8011962:	e000      	b.n	8011966 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011964:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011966:	89fb      	ldrh	r3, [r7, #14]
 8011968:	3380      	adds	r3, #128	; 0x80
 801196a:	b29b      	uxth	r3, r3
 801196c:	b2db      	uxtb	r3, r3
 801196e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011970:	89fb      	ldrh	r3, [r7, #14]
}
 8011972:	4618      	mov	r0, r3
 8011974:	3714      	adds	r7, #20
 8011976:	46bd      	mov	sp, r7
 8011978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197c:	4770      	bx	lr
 801197e:	bf00      	nop
 8011980:	08017e54 	.word	0x08017e54

08011984 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011984:	b480      	push	{r7}
 8011986:	b087      	sub	sp, #28
 8011988:	af00      	add	r7, sp, #0
 801198a:	4603      	mov	r3, r0
 801198c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801198e:	88fb      	ldrh	r3, [r7, #6]
 8011990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011994:	d201      	bcs.n	801199a <ff_wtoupper+0x16>
 8011996:	4b3e      	ldr	r3, [pc, #248]	; (8011a90 <ff_wtoupper+0x10c>)
 8011998:	e000      	b.n	801199c <ff_wtoupper+0x18>
 801199a:	4b3e      	ldr	r3, [pc, #248]	; (8011a94 <ff_wtoupper+0x110>)
 801199c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	1c9a      	adds	r2, r3, #2
 80119a2:	617a      	str	r2, [r7, #20]
 80119a4:	881b      	ldrh	r3, [r3, #0]
 80119a6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80119a8:	8a7b      	ldrh	r3, [r7, #18]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d068      	beq.n	8011a80 <ff_wtoupper+0xfc>
 80119ae:	88fa      	ldrh	r2, [r7, #6]
 80119b0:	8a7b      	ldrh	r3, [r7, #18]
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d364      	bcc.n	8011a80 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	1c9a      	adds	r2, r3, #2
 80119ba:	617a      	str	r2, [r7, #20]
 80119bc:	881b      	ldrh	r3, [r3, #0]
 80119be:	823b      	strh	r3, [r7, #16]
 80119c0:	8a3b      	ldrh	r3, [r7, #16]
 80119c2:	0a1b      	lsrs	r3, r3, #8
 80119c4:	81fb      	strh	r3, [r7, #14]
 80119c6:	8a3b      	ldrh	r3, [r7, #16]
 80119c8:	b2db      	uxtb	r3, r3
 80119ca:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80119cc:	88fa      	ldrh	r2, [r7, #6]
 80119ce:	8a79      	ldrh	r1, [r7, #18]
 80119d0:	8a3b      	ldrh	r3, [r7, #16]
 80119d2:	440b      	add	r3, r1
 80119d4:	429a      	cmp	r2, r3
 80119d6:	da49      	bge.n	8011a6c <ff_wtoupper+0xe8>
			switch (cmd) {
 80119d8:	89fb      	ldrh	r3, [r7, #14]
 80119da:	2b08      	cmp	r3, #8
 80119dc:	d84f      	bhi.n	8011a7e <ff_wtoupper+0xfa>
 80119de:	a201      	add	r2, pc, #4	; (adr r2, 80119e4 <ff_wtoupper+0x60>)
 80119e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119e4:	08011a09 	.word	0x08011a09
 80119e8:	08011a1b 	.word	0x08011a1b
 80119ec:	08011a31 	.word	0x08011a31
 80119f0:	08011a39 	.word	0x08011a39
 80119f4:	08011a41 	.word	0x08011a41
 80119f8:	08011a49 	.word	0x08011a49
 80119fc:	08011a51 	.word	0x08011a51
 8011a00:	08011a59 	.word	0x08011a59
 8011a04:	08011a61 	.word	0x08011a61
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011a08:	88fa      	ldrh	r2, [r7, #6]
 8011a0a:	8a7b      	ldrh	r3, [r7, #18]
 8011a0c:	1ad3      	subs	r3, r2, r3
 8011a0e:	005b      	lsls	r3, r3, #1
 8011a10:	697a      	ldr	r2, [r7, #20]
 8011a12:	4413      	add	r3, r2
 8011a14:	881b      	ldrh	r3, [r3, #0]
 8011a16:	80fb      	strh	r3, [r7, #6]
 8011a18:	e027      	b.n	8011a6a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8011a1a:	88fa      	ldrh	r2, [r7, #6]
 8011a1c:	8a7b      	ldrh	r3, [r7, #18]
 8011a1e:	1ad3      	subs	r3, r2, r3
 8011a20:	b29b      	uxth	r3, r3
 8011a22:	f003 0301 	and.w	r3, r3, #1
 8011a26:	b29b      	uxth	r3, r3
 8011a28:	88fa      	ldrh	r2, [r7, #6]
 8011a2a:	1ad3      	subs	r3, r2, r3
 8011a2c:	80fb      	strh	r3, [r7, #6]
 8011a2e:	e01c      	b.n	8011a6a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011a30:	88fb      	ldrh	r3, [r7, #6]
 8011a32:	3b10      	subs	r3, #16
 8011a34:	80fb      	strh	r3, [r7, #6]
 8011a36:	e018      	b.n	8011a6a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011a38:	88fb      	ldrh	r3, [r7, #6]
 8011a3a:	3b20      	subs	r3, #32
 8011a3c:	80fb      	strh	r3, [r7, #6]
 8011a3e:	e014      	b.n	8011a6a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011a40:	88fb      	ldrh	r3, [r7, #6]
 8011a42:	3b30      	subs	r3, #48	; 0x30
 8011a44:	80fb      	strh	r3, [r7, #6]
 8011a46:	e010      	b.n	8011a6a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011a48:	88fb      	ldrh	r3, [r7, #6]
 8011a4a:	3b1a      	subs	r3, #26
 8011a4c:	80fb      	strh	r3, [r7, #6]
 8011a4e:	e00c      	b.n	8011a6a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011a50:	88fb      	ldrh	r3, [r7, #6]
 8011a52:	3308      	adds	r3, #8
 8011a54:	80fb      	strh	r3, [r7, #6]
 8011a56:	e008      	b.n	8011a6a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011a58:	88fb      	ldrh	r3, [r7, #6]
 8011a5a:	3b50      	subs	r3, #80	; 0x50
 8011a5c:	80fb      	strh	r3, [r7, #6]
 8011a5e:	e004      	b.n	8011a6a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011a60:	88fb      	ldrh	r3, [r7, #6]
 8011a62:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011a66:	80fb      	strh	r3, [r7, #6]
 8011a68:	bf00      	nop
			}
			break;
 8011a6a:	e008      	b.n	8011a7e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011a6c:	89fb      	ldrh	r3, [r7, #14]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d195      	bne.n	801199e <ff_wtoupper+0x1a>
 8011a72:	8a3b      	ldrh	r3, [r7, #16]
 8011a74:	005b      	lsls	r3, r3, #1
 8011a76:	697a      	ldr	r2, [r7, #20]
 8011a78:	4413      	add	r3, r2
 8011a7a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011a7c:	e78f      	b.n	801199e <ff_wtoupper+0x1a>
			break;
 8011a7e:	bf00      	nop
	}

	return chr;
 8011a80:	88fb      	ldrh	r3, [r7, #6]
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	371c      	adds	r7, #28
 8011a86:	46bd      	mov	sp, r7
 8011a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8c:	4770      	bx	lr
 8011a8e:	bf00      	nop
 8011a90:	08017f54 	.word	0x08017f54
 8011a94:	08018148 	.word	0x08018148

08011a98 <cos>:
 8011a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a9a:	ec51 0b10 	vmov	r0, r1, d0
 8011a9e:	4a1e      	ldr	r2, [pc, #120]	; (8011b18 <cos+0x80>)
 8011aa0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011aa4:	4293      	cmp	r3, r2
 8011aa6:	dc06      	bgt.n	8011ab6 <cos+0x1e>
 8011aa8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011b10 <cos+0x78>
 8011aac:	f000 fb80 	bl	80121b0 <__kernel_cos>
 8011ab0:	ec51 0b10 	vmov	r0, r1, d0
 8011ab4:	e007      	b.n	8011ac6 <cos+0x2e>
 8011ab6:	4a19      	ldr	r2, [pc, #100]	; (8011b1c <cos+0x84>)
 8011ab8:	4293      	cmp	r3, r2
 8011aba:	dd09      	ble.n	8011ad0 <cos+0x38>
 8011abc:	ee10 2a10 	vmov	r2, s0
 8011ac0:	460b      	mov	r3, r1
 8011ac2:	f7ee fbf9 	bl	80002b8 <__aeabi_dsub>
 8011ac6:	ec41 0b10 	vmov	d0, r0, r1
 8011aca:	b005      	add	sp, #20
 8011acc:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ad0:	4668      	mov	r0, sp
 8011ad2:	f000 f8c9 	bl	8011c68 <__ieee754_rem_pio2>
 8011ad6:	f000 0003 	and.w	r0, r0, #3
 8011ada:	2801      	cmp	r0, #1
 8011adc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011ae0:	ed9d 0b00 	vldr	d0, [sp]
 8011ae4:	d007      	beq.n	8011af6 <cos+0x5e>
 8011ae6:	2802      	cmp	r0, #2
 8011ae8:	d00e      	beq.n	8011b08 <cos+0x70>
 8011aea:	2800      	cmp	r0, #0
 8011aec:	d0de      	beq.n	8011aac <cos+0x14>
 8011aee:	2001      	movs	r0, #1
 8011af0:	f000 ff66 	bl	80129c0 <__kernel_sin>
 8011af4:	e7dc      	b.n	8011ab0 <cos+0x18>
 8011af6:	f000 ff63 	bl	80129c0 <__kernel_sin>
 8011afa:	ec53 2b10 	vmov	r2, r3, d0
 8011afe:	ee10 0a10 	vmov	r0, s0
 8011b02:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011b06:	e7de      	b.n	8011ac6 <cos+0x2e>
 8011b08:	f000 fb52 	bl	80121b0 <__kernel_cos>
 8011b0c:	e7f5      	b.n	8011afa <cos+0x62>
 8011b0e:	bf00      	nop
	...
 8011b18:	3fe921fb 	.word	0x3fe921fb
 8011b1c:	7fefffff 	.word	0x7fefffff

08011b20 <sin>:
 8011b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011b22:	ec51 0b10 	vmov	r0, r1, d0
 8011b26:	4a20      	ldr	r2, [pc, #128]	; (8011ba8 <sin+0x88>)
 8011b28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011b2c:	4293      	cmp	r3, r2
 8011b2e:	dc07      	bgt.n	8011b40 <sin+0x20>
 8011b30:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011ba0 <sin+0x80>
 8011b34:	2000      	movs	r0, #0
 8011b36:	f000 ff43 	bl	80129c0 <__kernel_sin>
 8011b3a:	ec51 0b10 	vmov	r0, r1, d0
 8011b3e:	e007      	b.n	8011b50 <sin+0x30>
 8011b40:	4a1a      	ldr	r2, [pc, #104]	; (8011bac <sin+0x8c>)
 8011b42:	4293      	cmp	r3, r2
 8011b44:	dd09      	ble.n	8011b5a <sin+0x3a>
 8011b46:	ee10 2a10 	vmov	r2, s0
 8011b4a:	460b      	mov	r3, r1
 8011b4c:	f7ee fbb4 	bl	80002b8 <__aeabi_dsub>
 8011b50:	ec41 0b10 	vmov	d0, r0, r1
 8011b54:	b005      	add	sp, #20
 8011b56:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b5a:	4668      	mov	r0, sp
 8011b5c:	f000 f884 	bl	8011c68 <__ieee754_rem_pio2>
 8011b60:	f000 0003 	and.w	r0, r0, #3
 8011b64:	2801      	cmp	r0, #1
 8011b66:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b6a:	ed9d 0b00 	vldr	d0, [sp]
 8011b6e:	d004      	beq.n	8011b7a <sin+0x5a>
 8011b70:	2802      	cmp	r0, #2
 8011b72:	d005      	beq.n	8011b80 <sin+0x60>
 8011b74:	b970      	cbnz	r0, 8011b94 <sin+0x74>
 8011b76:	2001      	movs	r0, #1
 8011b78:	e7dd      	b.n	8011b36 <sin+0x16>
 8011b7a:	f000 fb19 	bl	80121b0 <__kernel_cos>
 8011b7e:	e7dc      	b.n	8011b3a <sin+0x1a>
 8011b80:	2001      	movs	r0, #1
 8011b82:	f000 ff1d 	bl	80129c0 <__kernel_sin>
 8011b86:	ec53 2b10 	vmov	r2, r3, d0
 8011b8a:	ee10 0a10 	vmov	r0, s0
 8011b8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011b92:	e7dd      	b.n	8011b50 <sin+0x30>
 8011b94:	f000 fb0c 	bl	80121b0 <__kernel_cos>
 8011b98:	e7f5      	b.n	8011b86 <sin+0x66>
 8011b9a:	bf00      	nop
 8011b9c:	f3af 8000 	nop.w
	...
 8011ba8:	3fe921fb 	.word	0x3fe921fb
 8011bac:	7fefffff 	.word	0x7fefffff

08011bb0 <sqrt>:
 8011bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011bb4:	ed2d 8b02 	vpush	{d8}
 8011bb8:	b08b      	sub	sp, #44	; 0x2c
 8011bba:	ec55 4b10 	vmov	r4, r5, d0
 8011bbe:	f000 fa45 	bl	801204c <__ieee754_sqrt>
 8011bc2:	4b26      	ldr	r3, [pc, #152]	; (8011c5c <sqrt+0xac>)
 8011bc4:	eeb0 8a40 	vmov.f32	s16, s0
 8011bc8:	eef0 8a60 	vmov.f32	s17, s1
 8011bcc:	f993 6000 	ldrsb.w	r6, [r3]
 8011bd0:	1c73      	adds	r3, r6, #1
 8011bd2:	d02a      	beq.n	8011c2a <sqrt+0x7a>
 8011bd4:	4622      	mov	r2, r4
 8011bd6:	462b      	mov	r3, r5
 8011bd8:	4620      	mov	r0, r4
 8011bda:	4629      	mov	r1, r5
 8011bdc:	f7ee ffbe 	bl	8000b5c <__aeabi_dcmpun>
 8011be0:	4607      	mov	r7, r0
 8011be2:	bb10      	cbnz	r0, 8011c2a <sqrt+0x7a>
 8011be4:	f04f 0800 	mov.w	r8, #0
 8011be8:	f04f 0900 	mov.w	r9, #0
 8011bec:	4642      	mov	r2, r8
 8011bee:	464b      	mov	r3, r9
 8011bf0:	4620      	mov	r0, r4
 8011bf2:	4629      	mov	r1, r5
 8011bf4:	f7ee ff8a 	bl	8000b0c <__aeabi_dcmplt>
 8011bf8:	b1b8      	cbz	r0, 8011c2a <sqrt+0x7a>
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	9300      	str	r3, [sp, #0]
 8011bfe:	4b18      	ldr	r3, [pc, #96]	; (8011c60 <sqrt+0xb0>)
 8011c00:	9301      	str	r3, [sp, #4]
 8011c02:	9708      	str	r7, [sp, #32]
 8011c04:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8011c08:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011c0c:	b9b6      	cbnz	r6, 8011c3c <sqrt+0x8c>
 8011c0e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8011c12:	4668      	mov	r0, sp
 8011c14:	f001 f81c 	bl	8012c50 <matherr>
 8011c18:	b1d0      	cbz	r0, 8011c50 <sqrt+0xa0>
 8011c1a:	9b08      	ldr	r3, [sp, #32]
 8011c1c:	b11b      	cbz	r3, 8011c26 <sqrt+0x76>
 8011c1e:	f001 f8a1 	bl	8012d64 <__errno>
 8011c22:	9b08      	ldr	r3, [sp, #32]
 8011c24:	6003      	str	r3, [r0, #0]
 8011c26:	ed9d 8b06 	vldr	d8, [sp, #24]
 8011c2a:	eeb0 0a48 	vmov.f32	s0, s16
 8011c2e:	eef0 0a68 	vmov.f32	s1, s17
 8011c32:	b00b      	add	sp, #44	; 0x2c
 8011c34:	ecbd 8b02 	vpop	{d8}
 8011c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c3c:	4642      	mov	r2, r8
 8011c3e:	464b      	mov	r3, r9
 8011c40:	4640      	mov	r0, r8
 8011c42:	4649      	mov	r1, r9
 8011c44:	f7ee fe1a 	bl	800087c <__aeabi_ddiv>
 8011c48:	2e02      	cmp	r6, #2
 8011c4a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011c4e:	d1e0      	bne.n	8011c12 <sqrt+0x62>
 8011c50:	f001 f888 	bl	8012d64 <__errno>
 8011c54:	2321      	movs	r3, #33	; 0x21
 8011c56:	6003      	str	r3, [r0, #0]
 8011c58:	e7df      	b.n	8011c1a <sqrt+0x6a>
 8011c5a:	bf00      	nop
 8011c5c:	2000000a 	.word	0x2000000a
 8011c60:	08018204 	.word	0x08018204
 8011c64:	00000000 	.word	0x00000000

08011c68 <__ieee754_rem_pio2>:
 8011c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c6c:	ec57 6b10 	vmov	r6, r7, d0
 8011c70:	4bc3      	ldr	r3, [pc, #780]	; (8011f80 <__ieee754_rem_pio2+0x318>)
 8011c72:	b08d      	sub	sp, #52	; 0x34
 8011c74:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011c78:	4598      	cmp	r8, r3
 8011c7a:	4604      	mov	r4, r0
 8011c7c:	9704      	str	r7, [sp, #16]
 8011c7e:	dc07      	bgt.n	8011c90 <__ieee754_rem_pio2+0x28>
 8011c80:	2200      	movs	r2, #0
 8011c82:	2300      	movs	r3, #0
 8011c84:	ed84 0b00 	vstr	d0, [r4]
 8011c88:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011c8c:	2500      	movs	r5, #0
 8011c8e:	e027      	b.n	8011ce0 <__ieee754_rem_pio2+0x78>
 8011c90:	4bbc      	ldr	r3, [pc, #752]	; (8011f84 <__ieee754_rem_pio2+0x31c>)
 8011c92:	4598      	cmp	r8, r3
 8011c94:	dc75      	bgt.n	8011d82 <__ieee754_rem_pio2+0x11a>
 8011c96:	9b04      	ldr	r3, [sp, #16]
 8011c98:	4dbb      	ldr	r5, [pc, #748]	; (8011f88 <__ieee754_rem_pio2+0x320>)
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	ee10 0a10 	vmov	r0, s0
 8011ca0:	a3a9      	add	r3, pc, #676	; (adr r3, 8011f48 <__ieee754_rem_pio2+0x2e0>)
 8011ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca6:	4639      	mov	r1, r7
 8011ca8:	dd36      	ble.n	8011d18 <__ieee754_rem_pio2+0xb0>
 8011caa:	f7ee fb05 	bl	80002b8 <__aeabi_dsub>
 8011cae:	45a8      	cmp	r8, r5
 8011cb0:	4606      	mov	r6, r0
 8011cb2:	460f      	mov	r7, r1
 8011cb4:	d018      	beq.n	8011ce8 <__ieee754_rem_pio2+0x80>
 8011cb6:	a3a6      	add	r3, pc, #664	; (adr r3, 8011f50 <__ieee754_rem_pio2+0x2e8>)
 8011cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cbc:	f7ee fafc 	bl	80002b8 <__aeabi_dsub>
 8011cc0:	4602      	mov	r2, r0
 8011cc2:	460b      	mov	r3, r1
 8011cc4:	e9c4 2300 	strd	r2, r3, [r4]
 8011cc8:	4630      	mov	r0, r6
 8011cca:	4639      	mov	r1, r7
 8011ccc:	f7ee faf4 	bl	80002b8 <__aeabi_dsub>
 8011cd0:	a39f      	add	r3, pc, #636	; (adr r3, 8011f50 <__ieee754_rem_pio2+0x2e8>)
 8011cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd6:	f7ee faef 	bl	80002b8 <__aeabi_dsub>
 8011cda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011cde:	2501      	movs	r5, #1
 8011ce0:	4628      	mov	r0, r5
 8011ce2:	b00d      	add	sp, #52	; 0x34
 8011ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ce8:	a39b      	add	r3, pc, #620	; (adr r3, 8011f58 <__ieee754_rem_pio2+0x2f0>)
 8011cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cee:	f7ee fae3 	bl	80002b8 <__aeabi_dsub>
 8011cf2:	a39b      	add	r3, pc, #620	; (adr r3, 8011f60 <__ieee754_rem_pio2+0x2f8>)
 8011cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf8:	4606      	mov	r6, r0
 8011cfa:	460f      	mov	r7, r1
 8011cfc:	f7ee fadc 	bl	80002b8 <__aeabi_dsub>
 8011d00:	4602      	mov	r2, r0
 8011d02:	460b      	mov	r3, r1
 8011d04:	e9c4 2300 	strd	r2, r3, [r4]
 8011d08:	4630      	mov	r0, r6
 8011d0a:	4639      	mov	r1, r7
 8011d0c:	f7ee fad4 	bl	80002b8 <__aeabi_dsub>
 8011d10:	a393      	add	r3, pc, #588	; (adr r3, 8011f60 <__ieee754_rem_pio2+0x2f8>)
 8011d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d16:	e7de      	b.n	8011cd6 <__ieee754_rem_pio2+0x6e>
 8011d18:	f7ee fad0 	bl	80002bc <__adddf3>
 8011d1c:	45a8      	cmp	r8, r5
 8011d1e:	4606      	mov	r6, r0
 8011d20:	460f      	mov	r7, r1
 8011d22:	d016      	beq.n	8011d52 <__ieee754_rem_pio2+0xea>
 8011d24:	a38a      	add	r3, pc, #552	; (adr r3, 8011f50 <__ieee754_rem_pio2+0x2e8>)
 8011d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d2a:	f7ee fac7 	bl	80002bc <__adddf3>
 8011d2e:	4602      	mov	r2, r0
 8011d30:	460b      	mov	r3, r1
 8011d32:	e9c4 2300 	strd	r2, r3, [r4]
 8011d36:	4630      	mov	r0, r6
 8011d38:	4639      	mov	r1, r7
 8011d3a:	f7ee fabd 	bl	80002b8 <__aeabi_dsub>
 8011d3e:	a384      	add	r3, pc, #528	; (adr r3, 8011f50 <__ieee754_rem_pio2+0x2e8>)
 8011d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d44:	f7ee faba 	bl	80002bc <__adddf3>
 8011d48:	f04f 35ff 	mov.w	r5, #4294967295
 8011d4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011d50:	e7c6      	b.n	8011ce0 <__ieee754_rem_pio2+0x78>
 8011d52:	a381      	add	r3, pc, #516	; (adr r3, 8011f58 <__ieee754_rem_pio2+0x2f0>)
 8011d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d58:	f7ee fab0 	bl	80002bc <__adddf3>
 8011d5c:	a380      	add	r3, pc, #512	; (adr r3, 8011f60 <__ieee754_rem_pio2+0x2f8>)
 8011d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d62:	4606      	mov	r6, r0
 8011d64:	460f      	mov	r7, r1
 8011d66:	f7ee faa9 	bl	80002bc <__adddf3>
 8011d6a:	4602      	mov	r2, r0
 8011d6c:	460b      	mov	r3, r1
 8011d6e:	e9c4 2300 	strd	r2, r3, [r4]
 8011d72:	4630      	mov	r0, r6
 8011d74:	4639      	mov	r1, r7
 8011d76:	f7ee fa9f 	bl	80002b8 <__aeabi_dsub>
 8011d7a:	a379      	add	r3, pc, #484	; (adr r3, 8011f60 <__ieee754_rem_pio2+0x2f8>)
 8011d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d80:	e7e0      	b.n	8011d44 <__ieee754_rem_pio2+0xdc>
 8011d82:	4b82      	ldr	r3, [pc, #520]	; (8011f8c <__ieee754_rem_pio2+0x324>)
 8011d84:	4598      	cmp	r8, r3
 8011d86:	f300 80d0 	bgt.w	8011f2a <__ieee754_rem_pio2+0x2c2>
 8011d8a:	f000 fed3 	bl	8012b34 <fabs>
 8011d8e:	ec57 6b10 	vmov	r6, r7, d0
 8011d92:	ee10 0a10 	vmov	r0, s0
 8011d96:	a374      	add	r3, pc, #464	; (adr r3, 8011f68 <__ieee754_rem_pio2+0x300>)
 8011d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d9c:	4639      	mov	r1, r7
 8011d9e:	f7ee fc43 	bl	8000628 <__aeabi_dmul>
 8011da2:	2200      	movs	r2, #0
 8011da4:	4b7a      	ldr	r3, [pc, #488]	; (8011f90 <__ieee754_rem_pio2+0x328>)
 8011da6:	f7ee fa89 	bl	80002bc <__adddf3>
 8011daa:	f7ee feed 	bl	8000b88 <__aeabi_d2iz>
 8011dae:	4605      	mov	r5, r0
 8011db0:	f7ee fbd0 	bl	8000554 <__aeabi_i2d>
 8011db4:	a364      	add	r3, pc, #400	; (adr r3, 8011f48 <__ieee754_rem_pio2+0x2e0>)
 8011db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011dbe:	f7ee fc33 	bl	8000628 <__aeabi_dmul>
 8011dc2:	4602      	mov	r2, r0
 8011dc4:	460b      	mov	r3, r1
 8011dc6:	4630      	mov	r0, r6
 8011dc8:	4639      	mov	r1, r7
 8011dca:	f7ee fa75 	bl	80002b8 <__aeabi_dsub>
 8011dce:	a360      	add	r3, pc, #384	; (adr r3, 8011f50 <__ieee754_rem_pio2+0x2e8>)
 8011dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dd4:	4682      	mov	sl, r0
 8011dd6:	468b      	mov	fp, r1
 8011dd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ddc:	f7ee fc24 	bl	8000628 <__aeabi_dmul>
 8011de0:	2d1f      	cmp	r5, #31
 8011de2:	4606      	mov	r6, r0
 8011de4:	460f      	mov	r7, r1
 8011de6:	dc0c      	bgt.n	8011e02 <__ieee754_rem_pio2+0x19a>
 8011de8:	1e6a      	subs	r2, r5, #1
 8011dea:	4b6a      	ldr	r3, [pc, #424]	; (8011f94 <__ieee754_rem_pio2+0x32c>)
 8011dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011df0:	4543      	cmp	r3, r8
 8011df2:	d006      	beq.n	8011e02 <__ieee754_rem_pio2+0x19a>
 8011df4:	4632      	mov	r2, r6
 8011df6:	463b      	mov	r3, r7
 8011df8:	4650      	mov	r0, sl
 8011dfa:	4659      	mov	r1, fp
 8011dfc:	f7ee fa5c 	bl	80002b8 <__aeabi_dsub>
 8011e00:	e00e      	b.n	8011e20 <__ieee754_rem_pio2+0x1b8>
 8011e02:	4632      	mov	r2, r6
 8011e04:	463b      	mov	r3, r7
 8011e06:	4650      	mov	r0, sl
 8011e08:	4659      	mov	r1, fp
 8011e0a:	f7ee fa55 	bl	80002b8 <__aeabi_dsub>
 8011e0e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011e12:	9305      	str	r3, [sp, #20]
 8011e14:	9a05      	ldr	r2, [sp, #20]
 8011e16:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011e1a:	1ad3      	subs	r3, r2, r3
 8011e1c:	2b10      	cmp	r3, #16
 8011e1e:	dc02      	bgt.n	8011e26 <__ieee754_rem_pio2+0x1be>
 8011e20:	e9c4 0100 	strd	r0, r1, [r4]
 8011e24:	e039      	b.n	8011e9a <__ieee754_rem_pio2+0x232>
 8011e26:	a34c      	add	r3, pc, #304	; (adr r3, 8011f58 <__ieee754_rem_pio2+0x2f0>)
 8011e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e30:	f7ee fbfa 	bl	8000628 <__aeabi_dmul>
 8011e34:	4606      	mov	r6, r0
 8011e36:	460f      	mov	r7, r1
 8011e38:	4602      	mov	r2, r0
 8011e3a:	460b      	mov	r3, r1
 8011e3c:	4650      	mov	r0, sl
 8011e3e:	4659      	mov	r1, fp
 8011e40:	f7ee fa3a 	bl	80002b8 <__aeabi_dsub>
 8011e44:	4602      	mov	r2, r0
 8011e46:	460b      	mov	r3, r1
 8011e48:	4680      	mov	r8, r0
 8011e4a:	4689      	mov	r9, r1
 8011e4c:	4650      	mov	r0, sl
 8011e4e:	4659      	mov	r1, fp
 8011e50:	f7ee fa32 	bl	80002b8 <__aeabi_dsub>
 8011e54:	4632      	mov	r2, r6
 8011e56:	463b      	mov	r3, r7
 8011e58:	f7ee fa2e 	bl	80002b8 <__aeabi_dsub>
 8011e5c:	a340      	add	r3, pc, #256	; (adr r3, 8011f60 <__ieee754_rem_pio2+0x2f8>)
 8011e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e62:	4606      	mov	r6, r0
 8011e64:	460f      	mov	r7, r1
 8011e66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e6a:	f7ee fbdd 	bl	8000628 <__aeabi_dmul>
 8011e6e:	4632      	mov	r2, r6
 8011e70:	463b      	mov	r3, r7
 8011e72:	f7ee fa21 	bl	80002b8 <__aeabi_dsub>
 8011e76:	4602      	mov	r2, r0
 8011e78:	460b      	mov	r3, r1
 8011e7a:	4606      	mov	r6, r0
 8011e7c:	460f      	mov	r7, r1
 8011e7e:	4640      	mov	r0, r8
 8011e80:	4649      	mov	r1, r9
 8011e82:	f7ee fa19 	bl	80002b8 <__aeabi_dsub>
 8011e86:	9a05      	ldr	r2, [sp, #20]
 8011e88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011e8c:	1ad3      	subs	r3, r2, r3
 8011e8e:	2b31      	cmp	r3, #49	; 0x31
 8011e90:	dc20      	bgt.n	8011ed4 <__ieee754_rem_pio2+0x26c>
 8011e92:	e9c4 0100 	strd	r0, r1, [r4]
 8011e96:	46c2      	mov	sl, r8
 8011e98:	46cb      	mov	fp, r9
 8011e9a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011e9e:	4650      	mov	r0, sl
 8011ea0:	4642      	mov	r2, r8
 8011ea2:	464b      	mov	r3, r9
 8011ea4:	4659      	mov	r1, fp
 8011ea6:	f7ee fa07 	bl	80002b8 <__aeabi_dsub>
 8011eaa:	463b      	mov	r3, r7
 8011eac:	4632      	mov	r2, r6
 8011eae:	f7ee fa03 	bl	80002b8 <__aeabi_dsub>
 8011eb2:	9b04      	ldr	r3, [sp, #16]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011eba:	f6bf af11 	bge.w	8011ce0 <__ieee754_rem_pio2+0x78>
 8011ebe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011ec2:	6063      	str	r3, [r4, #4]
 8011ec4:	f8c4 8000 	str.w	r8, [r4]
 8011ec8:	60a0      	str	r0, [r4, #8]
 8011eca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ece:	60e3      	str	r3, [r4, #12]
 8011ed0:	426d      	negs	r5, r5
 8011ed2:	e705      	b.n	8011ce0 <__ieee754_rem_pio2+0x78>
 8011ed4:	a326      	add	r3, pc, #152	; (adr r3, 8011f70 <__ieee754_rem_pio2+0x308>)
 8011ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ede:	f7ee fba3 	bl	8000628 <__aeabi_dmul>
 8011ee2:	4606      	mov	r6, r0
 8011ee4:	460f      	mov	r7, r1
 8011ee6:	4602      	mov	r2, r0
 8011ee8:	460b      	mov	r3, r1
 8011eea:	4640      	mov	r0, r8
 8011eec:	4649      	mov	r1, r9
 8011eee:	f7ee f9e3 	bl	80002b8 <__aeabi_dsub>
 8011ef2:	4602      	mov	r2, r0
 8011ef4:	460b      	mov	r3, r1
 8011ef6:	4682      	mov	sl, r0
 8011ef8:	468b      	mov	fp, r1
 8011efa:	4640      	mov	r0, r8
 8011efc:	4649      	mov	r1, r9
 8011efe:	f7ee f9db 	bl	80002b8 <__aeabi_dsub>
 8011f02:	4632      	mov	r2, r6
 8011f04:	463b      	mov	r3, r7
 8011f06:	f7ee f9d7 	bl	80002b8 <__aeabi_dsub>
 8011f0a:	a31b      	add	r3, pc, #108	; (adr r3, 8011f78 <__ieee754_rem_pio2+0x310>)
 8011f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f10:	4606      	mov	r6, r0
 8011f12:	460f      	mov	r7, r1
 8011f14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f18:	f7ee fb86 	bl	8000628 <__aeabi_dmul>
 8011f1c:	4632      	mov	r2, r6
 8011f1e:	463b      	mov	r3, r7
 8011f20:	f7ee f9ca 	bl	80002b8 <__aeabi_dsub>
 8011f24:	4606      	mov	r6, r0
 8011f26:	460f      	mov	r7, r1
 8011f28:	e764      	b.n	8011df4 <__ieee754_rem_pio2+0x18c>
 8011f2a:	4b1b      	ldr	r3, [pc, #108]	; (8011f98 <__ieee754_rem_pio2+0x330>)
 8011f2c:	4598      	cmp	r8, r3
 8011f2e:	dd35      	ble.n	8011f9c <__ieee754_rem_pio2+0x334>
 8011f30:	ee10 2a10 	vmov	r2, s0
 8011f34:	463b      	mov	r3, r7
 8011f36:	4630      	mov	r0, r6
 8011f38:	4639      	mov	r1, r7
 8011f3a:	f7ee f9bd 	bl	80002b8 <__aeabi_dsub>
 8011f3e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011f42:	e9c4 0100 	strd	r0, r1, [r4]
 8011f46:	e6a1      	b.n	8011c8c <__ieee754_rem_pio2+0x24>
 8011f48:	54400000 	.word	0x54400000
 8011f4c:	3ff921fb 	.word	0x3ff921fb
 8011f50:	1a626331 	.word	0x1a626331
 8011f54:	3dd0b461 	.word	0x3dd0b461
 8011f58:	1a600000 	.word	0x1a600000
 8011f5c:	3dd0b461 	.word	0x3dd0b461
 8011f60:	2e037073 	.word	0x2e037073
 8011f64:	3ba3198a 	.word	0x3ba3198a
 8011f68:	6dc9c883 	.word	0x6dc9c883
 8011f6c:	3fe45f30 	.word	0x3fe45f30
 8011f70:	2e000000 	.word	0x2e000000
 8011f74:	3ba3198a 	.word	0x3ba3198a
 8011f78:	252049c1 	.word	0x252049c1
 8011f7c:	397b839a 	.word	0x397b839a
 8011f80:	3fe921fb 	.word	0x3fe921fb
 8011f84:	4002d97b 	.word	0x4002d97b
 8011f88:	3ff921fb 	.word	0x3ff921fb
 8011f8c:	413921fb 	.word	0x413921fb
 8011f90:	3fe00000 	.word	0x3fe00000
 8011f94:	0801820c 	.word	0x0801820c
 8011f98:	7fefffff 	.word	0x7fefffff
 8011f9c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011fa0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011fa4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011fa8:	4630      	mov	r0, r6
 8011faa:	460f      	mov	r7, r1
 8011fac:	f7ee fdec 	bl	8000b88 <__aeabi_d2iz>
 8011fb0:	f7ee fad0 	bl	8000554 <__aeabi_i2d>
 8011fb4:	4602      	mov	r2, r0
 8011fb6:	460b      	mov	r3, r1
 8011fb8:	4630      	mov	r0, r6
 8011fba:	4639      	mov	r1, r7
 8011fbc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011fc0:	f7ee f97a 	bl	80002b8 <__aeabi_dsub>
 8011fc4:	2200      	movs	r2, #0
 8011fc6:	4b1f      	ldr	r3, [pc, #124]	; (8012044 <__ieee754_rem_pio2+0x3dc>)
 8011fc8:	f7ee fb2e 	bl	8000628 <__aeabi_dmul>
 8011fcc:	460f      	mov	r7, r1
 8011fce:	4606      	mov	r6, r0
 8011fd0:	f7ee fdda 	bl	8000b88 <__aeabi_d2iz>
 8011fd4:	f7ee fabe 	bl	8000554 <__aeabi_i2d>
 8011fd8:	4602      	mov	r2, r0
 8011fda:	460b      	mov	r3, r1
 8011fdc:	4630      	mov	r0, r6
 8011fde:	4639      	mov	r1, r7
 8011fe0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011fe4:	f7ee f968 	bl	80002b8 <__aeabi_dsub>
 8011fe8:	2200      	movs	r2, #0
 8011fea:	4b16      	ldr	r3, [pc, #88]	; (8012044 <__ieee754_rem_pio2+0x3dc>)
 8011fec:	f7ee fb1c 	bl	8000628 <__aeabi_dmul>
 8011ff0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011ff4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011ff8:	f04f 0803 	mov.w	r8, #3
 8011ffc:	2600      	movs	r6, #0
 8011ffe:	2700      	movs	r7, #0
 8012000:	4632      	mov	r2, r6
 8012002:	463b      	mov	r3, r7
 8012004:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012008:	f108 3aff 	add.w	sl, r8, #4294967295
 801200c:	f7ee fd74 	bl	8000af8 <__aeabi_dcmpeq>
 8012010:	b9b0      	cbnz	r0, 8012040 <__ieee754_rem_pio2+0x3d8>
 8012012:	4b0d      	ldr	r3, [pc, #52]	; (8012048 <__ieee754_rem_pio2+0x3e0>)
 8012014:	9301      	str	r3, [sp, #4]
 8012016:	2302      	movs	r3, #2
 8012018:	9300      	str	r3, [sp, #0]
 801201a:	462a      	mov	r2, r5
 801201c:	4643      	mov	r3, r8
 801201e:	4621      	mov	r1, r4
 8012020:	a806      	add	r0, sp, #24
 8012022:	f000 f98d 	bl	8012340 <__kernel_rem_pio2>
 8012026:	9b04      	ldr	r3, [sp, #16]
 8012028:	2b00      	cmp	r3, #0
 801202a:	4605      	mov	r5, r0
 801202c:	f6bf ae58 	bge.w	8011ce0 <__ieee754_rem_pio2+0x78>
 8012030:	6863      	ldr	r3, [r4, #4]
 8012032:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012036:	6063      	str	r3, [r4, #4]
 8012038:	68e3      	ldr	r3, [r4, #12]
 801203a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801203e:	e746      	b.n	8011ece <__ieee754_rem_pio2+0x266>
 8012040:	46d0      	mov	r8, sl
 8012042:	e7dd      	b.n	8012000 <__ieee754_rem_pio2+0x398>
 8012044:	41700000 	.word	0x41700000
 8012048:	0801828c 	.word	0x0801828c

0801204c <__ieee754_sqrt>:
 801204c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012050:	4955      	ldr	r1, [pc, #340]	; (80121a8 <__ieee754_sqrt+0x15c>)
 8012052:	ec55 4b10 	vmov	r4, r5, d0
 8012056:	43a9      	bics	r1, r5
 8012058:	462b      	mov	r3, r5
 801205a:	462a      	mov	r2, r5
 801205c:	d112      	bne.n	8012084 <__ieee754_sqrt+0x38>
 801205e:	ee10 2a10 	vmov	r2, s0
 8012062:	ee10 0a10 	vmov	r0, s0
 8012066:	4629      	mov	r1, r5
 8012068:	f7ee fade 	bl	8000628 <__aeabi_dmul>
 801206c:	4602      	mov	r2, r0
 801206e:	460b      	mov	r3, r1
 8012070:	4620      	mov	r0, r4
 8012072:	4629      	mov	r1, r5
 8012074:	f7ee f922 	bl	80002bc <__adddf3>
 8012078:	4604      	mov	r4, r0
 801207a:	460d      	mov	r5, r1
 801207c:	ec45 4b10 	vmov	d0, r4, r5
 8012080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012084:	2d00      	cmp	r5, #0
 8012086:	ee10 0a10 	vmov	r0, s0
 801208a:	4621      	mov	r1, r4
 801208c:	dc0f      	bgt.n	80120ae <__ieee754_sqrt+0x62>
 801208e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012092:	4330      	orrs	r0, r6
 8012094:	d0f2      	beq.n	801207c <__ieee754_sqrt+0x30>
 8012096:	b155      	cbz	r5, 80120ae <__ieee754_sqrt+0x62>
 8012098:	ee10 2a10 	vmov	r2, s0
 801209c:	4620      	mov	r0, r4
 801209e:	4629      	mov	r1, r5
 80120a0:	f7ee f90a 	bl	80002b8 <__aeabi_dsub>
 80120a4:	4602      	mov	r2, r0
 80120a6:	460b      	mov	r3, r1
 80120a8:	f7ee fbe8 	bl	800087c <__aeabi_ddiv>
 80120ac:	e7e4      	b.n	8012078 <__ieee754_sqrt+0x2c>
 80120ae:	151b      	asrs	r3, r3, #20
 80120b0:	d073      	beq.n	801219a <__ieee754_sqrt+0x14e>
 80120b2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80120b6:	07dd      	lsls	r5, r3, #31
 80120b8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80120bc:	bf48      	it	mi
 80120be:	0fc8      	lsrmi	r0, r1, #31
 80120c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80120c4:	bf44      	itt	mi
 80120c6:	0049      	lslmi	r1, r1, #1
 80120c8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80120cc:	2500      	movs	r5, #0
 80120ce:	1058      	asrs	r0, r3, #1
 80120d0:	0fcb      	lsrs	r3, r1, #31
 80120d2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80120d6:	0049      	lsls	r1, r1, #1
 80120d8:	2316      	movs	r3, #22
 80120da:	462c      	mov	r4, r5
 80120dc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80120e0:	19a7      	adds	r7, r4, r6
 80120e2:	4297      	cmp	r7, r2
 80120e4:	bfde      	ittt	le
 80120e6:	19bc      	addle	r4, r7, r6
 80120e8:	1bd2      	suble	r2, r2, r7
 80120ea:	19ad      	addle	r5, r5, r6
 80120ec:	0fcf      	lsrs	r7, r1, #31
 80120ee:	3b01      	subs	r3, #1
 80120f0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80120f4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80120f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80120fc:	d1f0      	bne.n	80120e0 <__ieee754_sqrt+0x94>
 80120fe:	f04f 0c20 	mov.w	ip, #32
 8012102:	469e      	mov	lr, r3
 8012104:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012108:	42a2      	cmp	r2, r4
 801210a:	eb06 070e 	add.w	r7, r6, lr
 801210e:	dc02      	bgt.n	8012116 <__ieee754_sqrt+0xca>
 8012110:	d112      	bne.n	8012138 <__ieee754_sqrt+0xec>
 8012112:	428f      	cmp	r7, r1
 8012114:	d810      	bhi.n	8012138 <__ieee754_sqrt+0xec>
 8012116:	2f00      	cmp	r7, #0
 8012118:	eb07 0e06 	add.w	lr, r7, r6
 801211c:	da42      	bge.n	80121a4 <__ieee754_sqrt+0x158>
 801211e:	f1be 0f00 	cmp.w	lr, #0
 8012122:	db3f      	blt.n	80121a4 <__ieee754_sqrt+0x158>
 8012124:	f104 0801 	add.w	r8, r4, #1
 8012128:	1b12      	subs	r2, r2, r4
 801212a:	428f      	cmp	r7, r1
 801212c:	bf88      	it	hi
 801212e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8012132:	1bc9      	subs	r1, r1, r7
 8012134:	4433      	add	r3, r6
 8012136:	4644      	mov	r4, r8
 8012138:	0052      	lsls	r2, r2, #1
 801213a:	f1bc 0c01 	subs.w	ip, ip, #1
 801213e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8012142:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012146:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801214a:	d1dd      	bne.n	8012108 <__ieee754_sqrt+0xbc>
 801214c:	430a      	orrs	r2, r1
 801214e:	d006      	beq.n	801215e <__ieee754_sqrt+0x112>
 8012150:	1c5c      	adds	r4, r3, #1
 8012152:	bf13      	iteet	ne
 8012154:	3301      	addne	r3, #1
 8012156:	3501      	addeq	r5, #1
 8012158:	4663      	moveq	r3, ip
 801215a:	f023 0301 	bicne.w	r3, r3, #1
 801215e:	106a      	asrs	r2, r5, #1
 8012160:	085b      	lsrs	r3, r3, #1
 8012162:	07e9      	lsls	r1, r5, #31
 8012164:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012168:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801216c:	bf48      	it	mi
 801216e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8012172:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8012176:	461c      	mov	r4, r3
 8012178:	e780      	b.n	801207c <__ieee754_sqrt+0x30>
 801217a:	0aca      	lsrs	r2, r1, #11
 801217c:	3815      	subs	r0, #21
 801217e:	0549      	lsls	r1, r1, #21
 8012180:	2a00      	cmp	r2, #0
 8012182:	d0fa      	beq.n	801217a <__ieee754_sqrt+0x12e>
 8012184:	02d6      	lsls	r6, r2, #11
 8012186:	d50a      	bpl.n	801219e <__ieee754_sqrt+0x152>
 8012188:	f1c3 0420 	rsb	r4, r3, #32
 801218c:	fa21 f404 	lsr.w	r4, r1, r4
 8012190:	1e5d      	subs	r5, r3, #1
 8012192:	4099      	lsls	r1, r3
 8012194:	4322      	orrs	r2, r4
 8012196:	1b43      	subs	r3, r0, r5
 8012198:	e78b      	b.n	80120b2 <__ieee754_sqrt+0x66>
 801219a:	4618      	mov	r0, r3
 801219c:	e7f0      	b.n	8012180 <__ieee754_sqrt+0x134>
 801219e:	0052      	lsls	r2, r2, #1
 80121a0:	3301      	adds	r3, #1
 80121a2:	e7ef      	b.n	8012184 <__ieee754_sqrt+0x138>
 80121a4:	46a0      	mov	r8, r4
 80121a6:	e7bf      	b.n	8012128 <__ieee754_sqrt+0xdc>
 80121a8:	7ff00000 	.word	0x7ff00000
 80121ac:	00000000 	.word	0x00000000

080121b0 <__kernel_cos>:
 80121b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121b4:	ec59 8b10 	vmov	r8, r9, d0
 80121b8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80121bc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80121c0:	ed2d 8b02 	vpush	{d8}
 80121c4:	eeb0 8a41 	vmov.f32	s16, s2
 80121c8:	eef0 8a61 	vmov.f32	s17, s3
 80121cc:	da07      	bge.n	80121de <__kernel_cos+0x2e>
 80121ce:	ee10 0a10 	vmov	r0, s0
 80121d2:	4649      	mov	r1, r9
 80121d4:	f7ee fcd8 	bl	8000b88 <__aeabi_d2iz>
 80121d8:	2800      	cmp	r0, #0
 80121da:	f000 8089 	beq.w	80122f0 <__kernel_cos+0x140>
 80121de:	4642      	mov	r2, r8
 80121e0:	464b      	mov	r3, r9
 80121e2:	4640      	mov	r0, r8
 80121e4:	4649      	mov	r1, r9
 80121e6:	f7ee fa1f 	bl	8000628 <__aeabi_dmul>
 80121ea:	2200      	movs	r2, #0
 80121ec:	4b4e      	ldr	r3, [pc, #312]	; (8012328 <__kernel_cos+0x178>)
 80121ee:	4604      	mov	r4, r0
 80121f0:	460d      	mov	r5, r1
 80121f2:	f7ee fa19 	bl	8000628 <__aeabi_dmul>
 80121f6:	a340      	add	r3, pc, #256	; (adr r3, 80122f8 <__kernel_cos+0x148>)
 80121f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121fc:	4682      	mov	sl, r0
 80121fe:	468b      	mov	fp, r1
 8012200:	4620      	mov	r0, r4
 8012202:	4629      	mov	r1, r5
 8012204:	f7ee fa10 	bl	8000628 <__aeabi_dmul>
 8012208:	a33d      	add	r3, pc, #244	; (adr r3, 8012300 <__kernel_cos+0x150>)
 801220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220e:	f7ee f855 	bl	80002bc <__adddf3>
 8012212:	4622      	mov	r2, r4
 8012214:	462b      	mov	r3, r5
 8012216:	f7ee fa07 	bl	8000628 <__aeabi_dmul>
 801221a:	a33b      	add	r3, pc, #236	; (adr r3, 8012308 <__kernel_cos+0x158>)
 801221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012220:	f7ee f84a 	bl	80002b8 <__aeabi_dsub>
 8012224:	4622      	mov	r2, r4
 8012226:	462b      	mov	r3, r5
 8012228:	f7ee f9fe 	bl	8000628 <__aeabi_dmul>
 801222c:	a338      	add	r3, pc, #224	; (adr r3, 8012310 <__kernel_cos+0x160>)
 801222e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012232:	f7ee f843 	bl	80002bc <__adddf3>
 8012236:	4622      	mov	r2, r4
 8012238:	462b      	mov	r3, r5
 801223a:	f7ee f9f5 	bl	8000628 <__aeabi_dmul>
 801223e:	a336      	add	r3, pc, #216	; (adr r3, 8012318 <__kernel_cos+0x168>)
 8012240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012244:	f7ee f838 	bl	80002b8 <__aeabi_dsub>
 8012248:	4622      	mov	r2, r4
 801224a:	462b      	mov	r3, r5
 801224c:	f7ee f9ec 	bl	8000628 <__aeabi_dmul>
 8012250:	a333      	add	r3, pc, #204	; (adr r3, 8012320 <__kernel_cos+0x170>)
 8012252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012256:	f7ee f831 	bl	80002bc <__adddf3>
 801225a:	4622      	mov	r2, r4
 801225c:	462b      	mov	r3, r5
 801225e:	f7ee f9e3 	bl	8000628 <__aeabi_dmul>
 8012262:	4622      	mov	r2, r4
 8012264:	462b      	mov	r3, r5
 8012266:	f7ee f9df 	bl	8000628 <__aeabi_dmul>
 801226a:	ec53 2b18 	vmov	r2, r3, d8
 801226e:	4604      	mov	r4, r0
 8012270:	460d      	mov	r5, r1
 8012272:	4640      	mov	r0, r8
 8012274:	4649      	mov	r1, r9
 8012276:	f7ee f9d7 	bl	8000628 <__aeabi_dmul>
 801227a:	460b      	mov	r3, r1
 801227c:	4602      	mov	r2, r0
 801227e:	4629      	mov	r1, r5
 8012280:	4620      	mov	r0, r4
 8012282:	f7ee f819 	bl	80002b8 <__aeabi_dsub>
 8012286:	4b29      	ldr	r3, [pc, #164]	; (801232c <__kernel_cos+0x17c>)
 8012288:	429e      	cmp	r6, r3
 801228a:	4680      	mov	r8, r0
 801228c:	4689      	mov	r9, r1
 801228e:	dc11      	bgt.n	80122b4 <__kernel_cos+0x104>
 8012290:	4602      	mov	r2, r0
 8012292:	460b      	mov	r3, r1
 8012294:	4650      	mov	r0, sl
 8012296:	4659      	mov	r1, fp
 8012298:	f7ee f80e 	bl	80002b8 <__aeabi_dsub>
 801229c:	460b      	mov	r3, r1
 801229e:	4924      	ldr	r1, [pc, #144]	; (8012330 <__kernel_cos+0x180>)
 80122a0:	4602      	mov	r2, r0
 80122a2:	2000      	movs	r0, #0
 80122a4:	f7ee f808 	bl	80002b8 <__aeabi_dsub>
 80122a8:	ecbd 8b02 	vpop	{d8}
 80122ac:	ec41 0b10 	vmov	d0, r0, r1
 80122b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122b4:	4b1f      	ldr	r3, [pc, #124]	; (8012334 <__kernel_cos+0x184>)
 80122b6:	491e      	ldr	r1, [pc, #120]	; (8012330 <__kernel_cos+0x180>)
 80122b8:	429e      	cmp	r6, r3
 80122ba:	bfcc      	ite	gt
 80122bc:	4d1e      	ldrgt	r5, [pc, #120]	; (8012338 <__kernel_cos+0x188>)
 80122be:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80122c2:	2400      	movs	r4, #0
 80122c4:	4622      	mov	r2, r4
 80122c6:	462b      	mov	r3, r5
 80122c8:	2000      	movs	r0, #0
 80122ca:	f7ed fff5 	bl	80002b8 <__aeabi_dsub>
 80122ce:	4622      	mov	r2, r4
 80122d0:	4606      	mov	r6, r0
 80122d2:	460f      	mov	r7, r1
 80122d4:	462b      	mov	r3, r5
 80122d6:	4650      	mov	r0, sl
 80122d8:	4659      	mov	r1, fp
 80122da:	f7ed ffed 	bl	80002b8 <__aeabi_dsub>
 80122de:	4642      	mov	r2, r8
 80122e0:	464b      	mov	r3, r9
 80122e2:	f7ed ffe9 	bl	80002b8 <__aeabi_dsub>
 80122e6:	4602      	mov	r2, r0
 80122e8:	460b      	mov	r3, r1
 80122ea:	4630      	mov	r0, r6
 80122ec:	4639      	mov	r1, r7
 80122ee:	e7d9      	b.n	80122a4 <__kernel_cos+0xf4>
 80122f0:	2000      	movs	r0, #0
 80122f2:	490f      	ldr	r1, [pc, #60]	; (8012330 <__kernel_cos+0x180>)
 80122f4:	e7d8      	b.n	80122a8 <__kernel_cos+0xf8>
 80122f6:	bf00      	nop
 80122f8:	be8838d4 	.word	0xbe8838d4
 80122fc:	bda8fae9 	.word	0xbda8fae9
 8012300:	bdb4b1c4 	.word	0xbdb4b1c4
 8012304:	3e21ee9e 	.word	0x3e21ee9e
 8012308:	809c52ad 	.word	0x809c52ad
 801230c:	3e927e4f 	.word	0x3e927e4f
 8012310:	19cb1590 	.word	0x19cb1590
 8012314:	3efa01a0 	.word	0x3efa01a0
 8012318:	16c15177 	.word	0x16c15177
 801231c:	3f56c16c 	.word	0x3f56c16c
 8012320:	5555554c 	.word	0x5555554c
 8012324:	3fa55555 	.word	0x3fa55555
 8012328:	3fe00000 	.word	0x3fe00000
 801232c:	3fd33332 	.word	0x3fd33332
 8012330:	3ff00000 	.word	0x3ff00000
 8012334:	3fe90000 	.word	0x3fe90000
 8012338:	3fd20000 	.word	0x3fd20000
 801233c:	00000000 	.word	0x00000000

08012340 <__kernel_rem_pio2>:
 8012340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012344:	ed2d 8b02 	vpush	{d8}
 8012348:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801234c:	1ed4      	subs	r4, r2, #3
 801234e:	9308      	str	r3, [sp, #32]
 8012350:	9101      	str	r1, [sp, #4]
 8012352:	4bc5      	ldr	r3, [pc, #788]	; (8012668 <__kernel_rem_pio2+0x328>)
 8012354:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012356:	9009      	str	r0, [sp, #36]	; 0x24
 8012358:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801235c:	9304      	str	r3, [sp, #16]
 801235e:	9b08      	ldr	r3, [sp, #32]
 8012360:	3b01      	subs	r3, #1
 8012362:	9307      	str	r3, [sp, #28]
 8012364:	2318      	movs	r3, #24
 8012366:	fb94 f4f3 	sdiv	r4, r4, r3
 801236a:	f06f 0317 	mvn.w	r3, #23
 801236e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8012372:	fb04 3303 	mla	r3, r4, r3, r3
 8012376:	eb03 0a02 	add.w	sl, r3, r2
 801237a:	9b04      	ldr	r3, [sp, #16]
 801237c:	9a07      	ldr	r2, [sp, #28]
 801237e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012658 <__kernel_rem_pio2+0x318>
 8012382:	eb03 0802 	add.w	r8, r3, r2
 8012386:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012388:	1aa7      	subs	r7, r4, r2
 801238a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801238e:	ae22      	add	r6, sp, #136	; 0x88
 8012390:	2500      	movs	r5, #0
 8012392:	4545      	cmp	r5, r8
 8012394:	dd13      	ble.n	80123be <__kernel_rem_pio2+0x7e>
 8012396:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012658 <__kernel_rem_pio2+0x318>
 801239a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801239e:	2600      	movs	r6, #0
 80123a0:	9b04      	ldr	r3, [sp, #16]
 80123a2:	429e      	cmp	r6, r3
 80123a4:	dc32      	bgt.n	801240c <__kernel_rem_pio2+0xcc>
 80123a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123a8:	9302      	str	r3, [sp, #8]
 80123aa:	9b08      	ldr	r3, [sp, #32]
 80123ac:	199d      	adds	r5, r3, r6
 80123ae:	ab22      	add	r3, sp, #136	; 0x88
 80123b0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80123b4:	9306      	str	r3, [sp, #24]
 80123b6:	ec59 8b18 	vmov	r8, r9, d8
 80123ba:	2700      	movs	r7, #0
 80123bc:	e01f      	b.n	80123fe <__kernel_rem_pio2+0xbe>
 80123be:	42ef      	cmn	r7, r5
 80123c0:	d407      	bmi.n	80123d2 <__kernel_rem_pio2+0x92>
 80123c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80123c6:	f7ee f8c5 	bl	8000554 <__aeabi_i2d>
 80123ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80123ce:	3501      	adds	r5, #1
 80123d0:	e7df      	b.n	8012392 <__kernel_rem_pio2+0x52>
 80123d2:	ec51 0b18 	vmov	r0, r1, d8
 80123d6:	e7f8      	b.n	80123ca <__kernel_rem_pio2+0x8a>
 80123d8:	9906      	ldr	r1, [sp, #24]
 80123da:	9d02      	ldr	r5, [sp, #8]
 80123dc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80123e0:	9106      	str	r1, [sp, #24]
 80123e2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80123e6:	9502      	str	r5, [sp, #8]
 80123e8:	f7ee f91e 	bl	8000628 <__aeabi_dmul>
 80123ec:	4602      	mov	r2, r0
 80123ee:	460b      	mov	r3, r1
 80123f0:	4640      	mov	r0, r8
 80123f2:	4649      	mov	r1, r9
 80123f4:	f7ed ff62 	bl	80002bc <__adddf3>
 80123f8:	3701      	adds	r7, #1
 80123fa:	4680      	mov	r8, r0
 80123fc:	4689      	mov	r9, r1
 80123fe:	9b07      	ldr	r3, [sp, #28]
 8012400:	429f      	cmp	r7, r3
 8012402:	dde9      	ble.n	80123d8 <__kernel_rem_pio2+0x98>
 8012404:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012408:	3601      	adds	r6, #1
 801240a:	e7c9      	b.n	80123a0 <__kernel_rem_pio2+0x60>
 801240c:	9b04      	ldr	r3, [sp, #16]
 801240e:	aa0e      	add	r2, sp, #56	; 0x38
 8012410:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012414:	930c      	str	r3, [sp, #48]	; 0x30
 8012416:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012418:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801241c:	9c04      	ldr	r4, [sp, #16]
 801241e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012420:	ab9a      	add	r3, sp, #616	; 0x268
 8012422:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8012426:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801242a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801242e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8012432:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8012436:	ab9a      	add	r3, sp, #616	; 0x268
 8012438:	445b      	add	r3, fp
 801243a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801243e:	2500      	movs	r5, #0
 8012440:	1b63      	subs	r3, r4, r5
 8012442:	2b00      	cmp	r3, #0
 8012444:	dc78      	bgt.n	8012538 <__kernel_rem_pio2+0x1f8>
 8012446:	4650      	mov	r0, sl
 8012448:	ec49 8b10 	vmov	d0, r8, r9
 801244c:	f000 fc04 	bl	8012c58 <scalbn>
 8012450:	ec57 6b10 	vmov	r6, r7, d0
 8012454:	2200      	movs	r2, #0
 8012456:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801245a:	ee10 0a10 	vmov	r0, s0
 801245e:	4639      	mov	r1, r7
 8012460:	f7ee f8e2 	bl	8000628 <__aeabi_dmul>
 8012464:	ec41 0b10 	vmov	d0, r0, r1
 8012468:	f000 fb6e 	bl	8012b48 <floor>
 801246c:	2200      	movs	r2, #0
 801246e:	ec51 0b10 	vmov	r0, r1, d0
 8012472:	4b7e      	ldr	r3, [pc, #504]	; (801266c <__kernel_rem_pio2+0x32c>)
 8012474:	f7ee f8d8 	bl	8000628 <__aeabi_dmul>
 8012478:	4602      	mov	r2, r0
 801247a:	460b      	mov	r3, r1
 801247c:	4630      	mov	r0, r6
 801247e:	4639      	mov	r1, r7
 8012480:	f7ed ff1a 	bl	80002b8 <__aeabi_dsub>
 8012484:	460f      	mov	r7, r1
 8012486:	4606      	mov	r6, r0
 8012488:	f7ee fb7e 	bl	8000b88 <__aeabi_d2iz>
 801248c:	9006      	str	r0, [sp, #24]
 801248e:	f7ee f861 	bl	8000554 <__aeabi_i2d>
 8012492:	4602      	mov	r2, r0
 8012494:	460b      	mov	r3, r1
 8012496:	4630      	mov	r0, r6
 8012498:	4639      	mov	r1, r7
 801249a:	f7ed ff0d 	bl	80002b8 <__aeabi_dsub>
 801249e:	f1ba 0f00 	cmp.w	sl, #0
 80124a2:	4606      	mov	r6, r0
 80124a4:	460f      	mov	r7, r1
 80124a6:	dd6c      	ble.n	8012582 <__kernel_rem_pio2+0x242>
 80124a8:	1e62      	subs	r2, r4, #1
 80124aa:	ab0e      	add	r3, sp, #56	; 0x38
 80124ac:	f1ca 0118 	rsb	r1, sl, #24
 80124b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80124b4:	9d06      	ldr	r5, [sp, #24]
 80124b6:	fa40 f301 	asr.w	r3, r0, r1
 80124ba:	441d      	add	r5, r3
 80124bc:	408b      	lsls	r3, r1
 80124be:	1ac0      	subs	r0, r0, r3
 80124c0:	ab0e      	add	r3, sp, #56	; 0x38
 80124c2:	9506      	str	r5, [sp, #24]
 80124c4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80124c8:	f1ca 0317 	rsb	r3, sl, #23
 80124cc:	fa40 f303 	asr.w	r3, r0, r3
 80124d0:	9302      	str	r3, [sp, #8]
 80124d2:	9b02      	ldr	r3, [sp, #8]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	dd62      	ble.n	801259e <__kernel_rem_pio2+0x25e>
 80124d8:	9b06      	ldr	r3, [sp, #24]
 80124da:	2200      	movs	r2, #0
 80124dc:	3301      	adds	r3, #1
 80124de:	9306      	str	r3, [sp, #24]
 80124e0:	4615      	mov	r5, r2
 80124e2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80124e6:	4294      	cmp	r4, r2
 80124e8:	f300 8095 	bgt.w	8012616 <__kernel_rem_pio2+0x2d6>
 80124ec:	f1ba 0f00 	cmp.w	sl, #0
 80124f0:	dd07      	ble.n	8012502 <__kernel_rem_pio2+0x1c2>
 80124f2:	f1ba 0f01 	cmp.w	sl, #1
 80124f6:	f000 80a2 	beq.w	801263e <__kernel_rem_pio2+0x2fe>
 80124fa:	f1ba 0f02 	cmp.w	sl, #2
 80124fe:	f000 80c1 	beq.w	8012684 <__kernel_rem_pio2+0x344>
 8012502:	9b02      	ldr	r3, [sp, #8]
 8012504:	2b02      	cmp	r3, #2
 8012506:	d14a      	bne.n	801259e <__kernel_rem_pio2+0x25e>
 8012508:	4632      	mov	r2, r6
 801250a:	463b      	mov	r3, r7
 801250c:	2000      	movs	r0, #0
 801250e:	4958      	ldr	r1, [pc, #352]	; (8012670 <__kernel_rem_pio2+0x330>)
 8012510:	f7ed fed2 	bl	80002b8 <__aeabi_dsub>
 8012514:	4606      	mov	r6, r0
 8012516:	460f      	mov	r7, r1
 8012518:	2d00      	cmp	r5, #0
 801251a:	d040      	beq.n	801259e <__kernel_rem_pio2+0x25e>
 801251c:	4650      	mov	r0, sl
 801251e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012660 <__kernel_rem_pio2+0x320>
 8012522:	f000 fb99 	bl	8012c58 <scalbn>
 8012526:	4630      	mov	r0, r6
 8012528:	4639      	mov	r1, r7
 801252a:	ec53 2b10 	vmov	r2, r3, d0
 801252e:	f7ed fec3 	bl	80002b8 <__aeabi_dsub>
 8012532:	4606      	mov	r6, r0
 8012534:	460f      	mov	r7, r1
 8012536:	e032      	b.n	801259e <__kernel_rem_pio2+0x25e>
 8012538:	2200      	movs	r2, #0
 801253a:	4b4e      	ldr	r3, [pc, #312]	; (8012674 <__kernel_rem_pio2+0x334>)
 801253c:	4640      	mov	r0, r8
 801253e:	4649      	mov	r1, r9
 8012540:	f7ee f872 	bl	8000628 <__aeabi_dmul>
 8012544:	f7ee fb20 	bl	8000b88 <__aeabi_d2iz>
 8012548:	f7ee f804 	bl	8000554 <__aeabi_i2d>
 801254c:	2200      	movs	r2, #0
 801254e:	4b4a      	ldr	r3, [pc, #296]	; (8012678 <__kernel_rem_pio2+0x338>)
 8012550:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012554:	f7ee f868 	bl	8000628 <__aeabi_dmul>
 8012558:	4602      	mov	r2, r0
 801255a:	460b      	mov	r3, r1
 801255c:	4640      	mov	r0, r8
 801255e:	4649      	mov	r1, r9
 8012560:	f7ed feaa 	bl	80002b8 <__aeabi_dsub>
 8012564:	f7ee fb10 	bl	8000b88 <__aeabi_d2iz>
 8012568:	ab0e      	add	r3, sp, #56	; 0x38
 801256a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801256e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012576:	f7ed fea1 	bl	80002bc <__adddf3>
 801257a:	3501      	adds	r5, #1
 801257c:	4680      	mov	r8, r0
 801257e:	4689      	mov	r9, r1
 8012580:	e75e      	b.n	8012440 <__kernel_rem_pio2+0x100>
 8012582:	d105      	bne.n	8012590 <__kernel_rem_pio2+0x250>
 8012584:	1e63      	subs	r3, r4, #1
 8012586:	aa0e      	add	r2, sp, #56	; 0x38
 8012588:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801258c:	15c3      	asrs	r3, r0, #23
 801258e:	e79f      	b.n	80124d0 <__kernel_rem_pio2+0x190>
 8012590:	2200      	movs	r2, #0
 8012592:	4b3a      	ldr	r3, [pc, #232]	; (801267c <__kernel_rem_pio2+0x33c>)
 8012594:	f7ee face 	bl	8000b34 <__aeabi_dcmpge>
 8012598:	2800      	cmp	r0, #0
 801259a:	d139      	bne.n	8012610 <__kernel_rem_pio2+0x2d0>
 801259c:	9002      	str	r0, [sp, #8]
 801259e:	2200      	movs	r2, #0
 80125a0:	2300      	movs	r3, #0
 80125a2:	4630      	mov	r0, r6
 80125a4:	4639      	mov	r1, r7
 80125a6:	f7ee faa7 	bl	8000af8 <__aeabi_dcmpeq>
 80125aa:	2800      	cmp	r0, #0
 80125ac:	f000 80c7 	beq.w	801273e <__kernel_rem_pio2+0x3fe>
 80125b0:	1e65      	subs	r5, r4, #1
 80125b2:	462b      	mov	r3, r5
 80125b4:	2200      	movs	r2, #0
 80125b6:	9904      	ldr	r1, [sp, #16]
 80125b8:	428b      	cmp	r3, r1
 80125ba:	da6a      	bge.n	8012692 <__kernel_rem_pio2+0x352>
 80125bc:	2a00      	cmp	r2, #0
 80125be:	f000 8088 	beq.w	80126d2 <__kernel_rem_pio2+0x392>
 80125c2:	ab0e      	add	r3, sp, #56	; 0x38
 80125c4:	f1aa 0a18 	sub.w	sl, sl, #24
 80125c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	f000 80b4 	beq.w	801273a <__kernel_rem_pio2+0x3fa>
 80125d2:	4650      	mov	r0, sl
 80125d4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012660 <__kernel_rem_pio2+0x320>
 80125d8:	f000 fb3e 	bl	8012c58 <scalbn>
 80125dc:	00ec      	lsls	r4, r5, #3
 80125de:	ab72      	add	r3, sp, #456	; 0x1c8
 80125e0:	191e      	adds	r6, r3, r4
 80125e2:	ec59 8b10 	vmov	r8, r9, d0
 80125e6:	f106 0a08 	add.w	sl, r6, #8
 80125ea:	462f      	mov	r7, r5
 80125ec:	2f00      	cmp	r7, #0
 80125ee:	f280 80df 	bge.w	80127b0 <__kernel_rem_pio2+0x470>
 80125f2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012658 <__kernel_rem_pio2+0x318>
 80125f6:	f04f 0a00 	mov.w	sl, #0
 80125fa:	eba5 030a 	sub.w	r3, r5, sl
 80125fe:	2b00      	cmp	r3, #0
 8012600:	f2c0 810a 	blt.w	8012818 <__kernel_rem_pio2+0x4d8>
 8012604:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012680 <__kernel_rem_pio2+0x340>
 8012608:	ec59 8b18 	vmov	r8, r9, d8
 801260c:	2700      	movs	r7, #0
 801260e:	e0f5      	b.n	80127fc <__kernel_rem_pio2+0x4bc>
 8012610:	2302      	movs	r3, #2
 8012612:	9302      	str	r3, [sp, #8]
 8012614:	e760      	b.n	80124d8 <__kernel_rem_pio2+0x198>
 8012616:	ab0e      	add	r3, sp, #56	; 0x38
 8012618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801261c:	b94d      	cbnz	r5, 8012632 <__kernel_rem_pio2+0x2f2>
 801261e:	b12b      	cbz	r3, 801262c <__kernel_rem_pio2+0x2ec>
 8012620:	a80e      	add	r0, sp, #56	; 0x38
 8012622:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012626:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801262a:	2301      	movs	r3, #1
 801262c:	3201      	adds	r2, #1
 801262e:	461d      	mov	r5, r3
 8012630:	e759      	b.n	80124e6 <__kernel_rem_pio2+0x1a6>
 8012632:	a80e      	add	r0, sp, #56	; 0x38
 8012634:	1acb      	subs	r3, r1, r3
 8012636:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801263a:	462b      	mov	r3, r5
 801263c:	e7f6      	b.n	801262c <__kernel_rem_pio2+0x2ec>
 801263e:	1e62      	subs	r2, r4, #1
 8012640:	ab0e      	add	r3, sp, #56	; 0x38
 8012642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012646:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801264a:	a90e      	add	r1, sp, #56	; 0x38
 801264c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012650:	e757      	b.n	8012502 <__kernel_rem_pio2+0x1c2>
 8012652:	bf00      	nop
 8012654:	f3af 8000 	nop.w
	...
 8012664:	3ff00000 	.word	0x3ff00000
 8012668:	080183d8 	.word	0x080183d8
 801266c:	40200000 	.word	0x40200000
 8012670:	3ff00000 	.word	0x3ff00000
 8012674:	3e700000 	.word	0x3e700000
 8012678:	41700000 	.word	0x41700000
 801267c:	3fe00000 	.word	0x3fe00000
 8012680:	08018398 	.word	0x08018398
 8012684:	1e62      	subs	r2, r4, #1
 8012686:	ab0e      	add	r3, sp, #56	; 0x38
 8012688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801268c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012690:	e7db      	b.n	801264a <__kernel_rem_pio2+0x30a>
 8012692:	a90e      	add	r1, sp, #56	; 0x38
 8012694:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012698:	3b01      	subs	r3, #1
 801269a:	430a      	orrs	r2, r1
 801269c:	e78b      	b.n	80125b6 <__kernel_rem_pio2+0x276>
 801269e:	3301      	adds	r3, #1
 80126a0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80126a4:	2900      	cmp	r1, #0
 80126a6:	d0fa      	beq.n	801269e <__kernel_rem_pio2+0x35e>
 80126a8:	9a08      	ldr	r2, [sp, #32]
 80126aa:	4422      	add	r2, r4
 80126ac:	00d2      	lsls	r2, r2, #3
 80126ae:	a922      	add	r1, sp, #136	; 0x88
 80126b0:	18e3      	adds	r3, r4, r3
 80126b2:	9206      	str	r2, [sp, #24]
 80126b4:	440a      	add	r2, r1
 80126b6:	9302      	str	r3, [sp, #8]
 80126b8:	f10b 0108 	add.w	r1, fp, #8
 80126bc:	f102 0308 	add.w	r3, r2, #8
 80126c0:	1c66      	adds	r6, r4, #1
 80126c2:	910a      	str	r1, [sp, #40]	; 0x28
 80126c4:	2500      	movs	r5, #0
 80126c6:	930d      	str	r3, [sp, #52]	; 0x34
 80126c8:	9b02      	ldr	r3, [sp, #8]
 80126ca:	42b3      	cmp	r3, r6
 80126cc:	da04      	bge.n	80126d8 <__kernel_rem_pio2+0x398>
 80126ce:	461c      	mov	r4, r3
 80126d0:	e6a6      	b.n	8012420 <__kernel_rem_pio2+0xe0>
 80126d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80126d4:	2301      	movs	r3, #1
 80126d6:	e7e3      	b.n	80126a0 <__kernel_rem_pio2+0x360>
 80126d8:	9b06      	ldr	r3, [sp, #24]
 80126da:	18ef      	adds	r7, r5, r3
 80126dc:	ab22      	add	r3, sp, #136	; 0x88
 80126de:	441f      	add	r7, r3
 80126e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126e2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80126e6:	f7ed ff35 	bl	8000554 <__aeabi_i2d>
 80126ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126ec:	461c      	mov	r4, r3
 80126ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126f0:	e9c7 0100 	strd	r0, r1, [r7]
 80126f4:	eb03 0b05 	add.w	fp, r3, r5
 80126f8:	2700      	movs	r7, #0
 80126fa:	f04f 0800 	mov.w	r8, #0
 80126fe:	f04f 0900 	mov.w	r9, #0
 8012702:	9b07      	ldr	r3, [sp, #28]
 8012704:	429f      	cmp	r7, r3
 8012706:	dd08      	ble.n	801271a <__kernel_rem_pio2+0x3da>
 8012708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801270a:	aa72      	add	r2, sp, #456	; 0x1c8
 801270c:	18eb      	adds	r3, r5, r3
 801270e:	4413      	add	r3, r2
 8012710:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8012714:	3601      	adds	r6, #1
 8012716:	3508      	adds	r5, #8
 8012718:	e7d6      	b.n	80126c8 <__kernel_rem_pio2+0x388>
 801271a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801271e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012722:	f7ed ff81 	bl	8000628 <__aeabi_dmul>
 8012726:	4602      	mov	r2, r0
 8012728:	460b      	mov	r3, r1
 801272a:	4640      	mov	r0, r8
 801272c:	4649      	mov	r1, r9
 801272e:	f7ed fdc5 	bl	80002bc <__adddf3>
 8012732:	3701      	adds	r7, #1
 8012734:	4680      	mov	r8, r0
 8012736:	4689      	mov	r9, r1
 8012738:	e7e3      	b.n	8012702 <__kernel_rem_pio2+0x3c2>
 801273a:	3d01      	subs	r5, #1
 801273c:	e741      	b.n	80125c2 <__kernel_rem_pio2+0x282>
 801273e:	f1ca 0000 	rsb	r0, sl, #0
 8012742:	ec47 6b10 	vmov	d0, r6, r7
 8012746:	f000 fa87 	bl	8012c58 <scalbn>
 801274a:	ec57 6b10 	vmov	r6, r7, d0
 801274e:	2200      	movs	r2, #0
 8012750:	4b99      	ldr	r3, [pc, #612]	; (80129b8 <__kernel_rem_pio2+0x678>)
 8012752:	ee10 0a10 	vmov	r0, s0
 8012756:	4639      	mov	r1, r7
 8012758:	f7ee f9ec 	bl	8000b34 <__aeabi_dcmpge>
 801275c:	b1f8      	cbz	r0, 801279e <__kernel_rem_pio2+0x45e>
 801275e:	2200      	movs	r2, #0
 8012760:	4b96      	ldr	r3, [pc, #600]	; (80129bc <__kernel_rem_pio2+0x67c>)
 8012762:	4630      	mov	r0, r6
 8012764:	4639      	mov	r1, r7
 8012766:	f7ed ff5f 	bl	8000628 <__aeabi_dmul>
 801276a:	f7ee fa0d 	bl	8000b88 <__aeabi_d2iz>
 801276e:	4680      	mov	r8, r0
 8012770:	f7ed fef0 	bl	8000554 <__aeabi_i2d>
 8012774:	2200      	movs	r2, #0
 8012776:	4b90      	ldr	r3, [pc, #576]	; (80129b8 <__kernel_rem_pio2+0x678>)
 8012778:	f7ed ff56 	bl	8000628 <__aeabi_dmul>
 801277c:	460b      	mov	r3, r1
 801277e:	4602      	mov	r2, r0
 8012780:	4639      	mov	r1, r7
 8012782:	4630      	mov	r0, r6
 8012784:	f7ed fd98 	bl	80002b8 <__aeabi_dsub>
 8012788:	f7ee f9fe 	bl	8000b88 <__aeabi_d2iz>
 801278c:	1c65      	adds	r5, r4, #1
 801278e:	ab0e      	add	r3, sp, #56	; 0x38
 8012790:	f10a 0a18 	add.w	sl, sl, #24
 8012794:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012798:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801279c:	e719      	b.n	80125d2 <__kernel_rem_pio2+0x292>
 801279e:	4630      	mov	r0, r6
 80127a0:	4639      	mov	r1, r7
 80127a2:	f7ee f9f1 	bl	8000b88 <__aeabi_d2iz>
 80127a6:	ab0e      	add	r3, sp, #56	; 0x38
 80127a8:	4625      	mov	r5, r4
 80127aa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80127ae:	e710      	b.n	80125d2 <__kernel_rem_pio2+0x292>
 80127b0:	ab0e      	add	r3, sp, #56	; 0x38
 80127b2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80127b6:	f7ed fecd 	bl	8000554 <__aeabi_i2d>
 80127ba:	4642      	mov	r2, r8
 80127bc:	464b      	mov	r3, r9
 80127be:	f7ed ff33 	bl	8000628 <__aeabi_dmul>
 80127c2:	2200      	movs	r2, #0
 80127c4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80127c8:	4b7c      	ldr	r3, [pc, #496]	; (80129bc <__kernel_rem_pio2+0x67c>)
 80127ca:	4640      	mov	r0, r8
 80127cc:	4649      	mov	r1, r9
 80127ce:	f7ed ff2b 	bl	8000628 <__aeabi_dmul>
 80127d2:	3f01      	subs	r7, #1
 80127d4:	4680      	mov	r8, r0
 80127d6:	4689      	mov	r9, r1
 80127d8:	e708      	b.n	80125ec <__kernel_rem_pio2+0x2ac>
 80127da:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80127de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127e2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80127e6:	f7ed ff1f 	bl	8000628 <__aeabi_dmul>
 80127ea:	4602      	mov	r2, r0
 80127ec:	460b      	mov	r3, r1
 80127ee:	4640      	mov	r0, r8
 80127f0:	4649      	mov	r1, r9
 80127f2:	f7ed fd63 	bl	80002bc <__adddf3>
 80127f6:	3701      	adds	r7, #1
 80127f8:	4680      	mov	r8, r0
 80127fa:	4689      	mov	r9, r1
 80127fc:	9b04      	ldr	r3, [sp, #16]
 80127fe:	429f      	cmp	r7, r3
 8012800:	dc01      	bgt.n	8012806 <__kernel_rem_pio2+0x4c6>
 8012802:	45ba      	cmp	sl, r7
 8012804:	dae9      	bge.n	80127da <__kernel_rem_pio2+0x49a>
 8012806:	ab4a      	add	r3, sp, #296	; 0x128
 8012808:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801280c:	e9c3 8900 	strd	r8, r9, [r3]
 8012810:	f10a 0a01 	add.w	sl, sl, #1
 8012814:	3e08      	subs	r6, #8
 8012816:	e6f0      	b.n	80125fa <__kernel_rem_pio2+0x2ba>
 8012818:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801281a:	2b03      	cmp	r3, #3
 801281c:	d85b      	bhi.n	80128d6 <__kernel_rem_pio2+0x596>
 801281e:	e8df f003 	tbb	[pc, r3]
 8012822:	264a      	.short	0x264a
 8012824:	0226      	.short	0x0226
 8012826:	ab9a      	add	r3, sp, #616	; 0x268
 8012828:	441c      	add	r4, r3
 801282a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801282e:	46a2      	mov	sl, r4
 8012830:	46ab      	mov	fp, r5
 8012832:	f1bb 0f00 	cmp.w	fp, #0
 8012836:	dc6c      	bgt.n	8012912 <__kernel_rem_pio2+0x5d2>
 8012838:	46a2      	mov	sl, r4
 801283a:	46ab      	mov	fp, r5
 801283c:	f1bb 0f01 	cmp.w	fp, #1
 8012840:	f300 8086 	bgt.w	8012950 <__kernel_rem_pio2+0x610>
 8012844:	2000      	movs	r0, #0
 8012846:	2100      	movs	r1, #0
 8012848:	2d01      	cmp	r5, #1
 801284a:	f300 80a0 	bgt.w	801298e <__kernel_rem_pio2+0x64e>
 801284e:	9b02      	ldr	r3, [sp, #8]
 8012850:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012854:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012858:	2b00      	cmp	r3, #0
 801285a:	f040 809e 	bne.w	801299a <__kernel_rem_pio2+0x65a>
 801285e:	9b01      	ldr	r3, [sp, #4]
 8012860:	e9c3 7800 	strd	r7, r8, [r3]
 8012864:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012868:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801286c:	e033      	b.n	80128d6 <__kernel_rem_pio2+0x596>
 801286e:	3408      	adds	r4, #8
 8012870:	ab4a      	add	r3, sp, #296	; 0x128
 8012872:	441c      	add	r4, r3
 8012874:	462e      	mov	r6, r5
 8012876:	2000      	movs	r0, #0
 8012878:	2100      	movs	r1, #0
 801287a:	2e00      	cmp	r6, #0
 801287c:	da3a      	bge.n	80128f4 <__kernel_rem_pio2+0x5b4>
 801287e:	9b02      	ldr	r3, [sp, #8]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d03d      	beq.n	8012900 <__kernel_rem_pio2+0x5c0>
 8012884:	4602      	mov	r2, r0
 8012886:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801288a:	9c01      	ldr	r4, [sp, #4]
 801288c:	e9c4 2300 	strd	r2, r3, [r4]
 8012890:	4602      	mov	r2, r0
 8012892:	460b      	mov	r3, r1
 8012894:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012898:	f7ed fd0e 	bl	80002b8 <__aeabi_dsub>
 801289c:	ae4c      	add	r6, sp, #304	; 0x130
 801289e:	2401      	movs	r4, #1
 80128a0:	42a5      	cmp	r5, r4
 80128a2:	da30      	bge.n	8012906 <__kernel_rem_pio2+0x5c6>
 80128a4:	9b02      	ldr	r3, [sp, #8]
 80128a6:	b113      	cbz	r3, 80128ae <__kernel_rem_pio2+0x56e>
 80128a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80128ac:	4619      	mov	r1, r3
 80128ae:	9b01      	ldr	r3, [sp, #4]
 80128b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80128b4:	e00f      	b.n	80128d6 <__kernel_rem_pio2+0x596>
 80128b6:	ab9a      	add	r3, sp, #616	; 0x268
 80128b8:	441c      	add	r4, r3
 80128ba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80128be:	2000      	movs	r0, #0
 80128c0:	2100      	movs	r1, #0
 80128c2:	2d00      	cmp	r5, #0
 80128c4:	da10      	bge.n	80128e8 <__kernel_rem_pio2+0x5a8>
 80128c6:	9b02      	ldr	r3, [sp, #8]
 80128c8:	b113      	cbz	r3, 80128d0 <__kernel_rem_pio2+0x590>
 80128ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80128ce:	4619      	mov	r1, r3
 80128d0:	9b01      	ldr	r3, [sp, #4]
 80128d2:	e9c3 0100 	strd	r0, r1, [r3]
 80128d6:	9b06      	ldr	r3, [sp, #24]
 80128d8:	f003 0007 	and.w	r0, r3, #7
 80128dc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80128e0:	ecbd 8b02 	vpop	{d8}
 80128e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128e8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80128ec:	f7ed fce6 	bl	80002bc <__adddf3>
 80128f0:	3d01      	subs	r5, #1
 80128f2:	e7e6      	b.n	80128c2 <__kernel_rem_pio2+0x582>
 80128f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80128f8:	f7ed fce0 	bl	80002bc <__adddf3>
 80128fc:	3e01      	subs	r6, #1
 80128fe:	e7bc      	b.n	801287a <__kernel_rem_pio2+0x53a>
 8012900:	4602      	mov	r2, r0
 8012902:	460b      	mov	r3, r1
 8012904:	e7c1      	b.n	801288a <__kernel_rem_pio2+0x54a>
 8012906:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801290a:	f7ed fcd7 	bl	80002bc <__adddf3>
 801290e:	3401      	adds	r4, #1
 8012910:	e7c6      	b.n	80128a0 <__kernel_rem_pio2+0x560>
 8012912:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8012916:	ed3a 7b02 	vldmdb	sl!, {d7}
 801291a:	4640      	mov	r0, r8
 801291c:	ec53 2b17 	vmov	r2, r3, d7
 8012920:	4649      	mov	r1, r9
 8012922:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012926:	f7ed fcc9 	bl	80002bc <__adddf3>
 801292a:	4602      	mov	r2, r0
 801292c:	460b      	mov	r3, r1
 801292e:	4606      	mov	r6, r0
 8012930:	460f      	mov	r7, r1
 8012932:	4640      	mov	r0, r8
 8012934:	4649      	mov	r1, r9
 8012936:	f7ed fcbf 	bl	80002b8 <__aeabi_dsub>
 801293a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801293e:	f7ed fcbd 	bl	80002bc <__adddf3>
 8012942:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012946:	e9ca 0100 	strd	r0, r1, [sl]
 801294a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801294e:	e770      	b.n	8012832 <__kernel_rem_pio2+0x4f2>
 8012950:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012954:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012958:	4630      	mov	r0, r6
 801295a:	ec53 2b17 	vmov	r2, r3, d7
 801295e:	4639      	mov	r1, r7
 8012960:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012964:	f7ed fcaa 	bl	80002bc <__adddf3>
 8012968:	4602      	mov	r2, r0
 801296a:	460b      	mov	r3, r1
 801296c:	4680      	mov	r8, r0
 801296e:	4689      	mov	r9, r1
 8012970:	4630      	mov	r0, r6
 8012972:	4639      	mov	r1, r7
 8012974:	f7ed fca0 	bl	80002b8 <__aeabi_dsub>
 8012978:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801297c:	f7ed fc9e 	bl	80002bc <__adddf3>
 8012980:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012984:	e9ca 0100 	strd	r0, r1, [sl]
 8012988:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801298c:	e756      	b.n	801283c <__kernel_rem_pio2+0x4fc>
 801298e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012992:	f7ed fc93 	bl	80002bc <__adddf3>
 8012996:	3d01      	subs	r5, #1
 8012998:	e756      	b.n	8012848 <__kernel_rem_pio2+0x508>
 801299a:	9b01      	ldr	r3, [sp, #4]
 801299c:	9a01      	ldr	r2, [sp, #4]
 801299e:	601f      	str	r7, [r3, #0]
 80129a0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80129a4:	605c      	str	r4, [r3, #4]
 80129a6:	609d      	str	r5, [r3, #8]
 80129a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80129ac:	60d3      	str	r3, [r2, #12]
 80129ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80129b2:	6110      	str	r0, [r2, #16]
 80129b4:	6153      	str	r3, [r2, #20]
 80129b6:	e78e      	b.n	80128d6 <__kernel_rem_pio2+0x596>
 80129b8:	41700000 	.word	0x41700000
 80129bc:	3e700000 	.word	0x3e700000

080129c0 <__kernel_sin>:
 80129c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129c4:	ec55 4b10 	vmov	r4, r5, d0
 80129c8:	b085      	sub	sp, #20
 80129ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80129ce:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80129d2:	ed8d 1b00 	vstr	d1, [sp]
 80129d6:	9002      	str	r0, [sp, #8]
 80129d8:	da06      	bge.n	80129e8 <__kernel_sin+0x28>
 80129da:	ee10 0a10 	vmov	r0, s0
 80129de:	4629      	mov	r1, r5
 80129e0:	f7ee f8d2 	bl	8000b88 <__aeabi_d2iz>
 80129e4:	2800      	cmp	r0, #0
 80129e6:	d051      	beq.n	8012a8c <__kernel_sin+0xcc>
 80129e8:	4622      	mov	r2, r4
 80129ea:	462b      	mov	r3, r5
 80129ec:	4620      	mov	r0, r4
 80129ee:	4629      	mov	r1, r5
 80129f0:	f7ed fe1a 	bl	8000628 <__aeabi_dmul>
 80129f4:	4682      	mov	sl, r0
 80129f6:	468b      	mov	fp, r1
 80129f8:	4602      	mov	r2, r0
 80129fa:	460b      	mov	r3, r1
 80129fc:	4620      	mov	r0, r4
 80129fe:	4629      	mov	r1, r5
 8012a00:	f7ed fe12 	bl	8000628 <__aeabi_dmul>
 8012a04:	a341      	add	r3, pc, #260	; (adr r3, 8012b0c <__kernel_sin+0x14c>)
 8012a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a0a:	4680      	mov	r8, r0
 8012a0c:	4689      	mov	r9, r1
 8012a0e:	4650      	mov	r0, sl
 8012a10:	4659      	mov	r1, fp
 8012a12:	f7ed fe09 	bl	8000628 <__aeabi_dmul>
 8012a16:	a33f      	add	r3, pc, #252	; (adr r3, 8012b14 <__kernel_sin+0x154>)
 8012a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a1c:	f7ed fc4c 	bl	80002b8 <__aeabi_dsub>
 8012a20:	4652      	mov	r2, sl
 8012a22:	465b      	mov	r3, fp
 8012a24:	f7ed fe00 	bl	8000628 <__aeabi_dmul>
 8012a28:	a33c      	add	r3, pc, #240	; (adr r3, 8012b1c <__kernel_sin+0x15c>)
 8012a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a2e:	f7ed fc45 	bl	80002bc <__adddf3>
 8012a32:	4652      	mov	r2, sl
 8012a34:	465b      	mov	r3, fp
 8012a36:	f7ed fdf7 	bl	8000628 <__aeabi_dmul>
 8012a3a:	a33a      	add	r3, pc, #232	; (adr r3, 8012b24 <__kernel_sin+0x164>)
 8012a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a40:	f7ed fc3a 	bl	80002b8 <__aeabi_dsub>
 8012a44:	4652      	mov	r2, sl
 8012a46:	465b      	mov	r3, fp
 8012a48:	f7ed fdee 	bl	8000628 <__aeabi_dmul>
 8012a4c:	a337      	add	r3, pc, #220	; (adr r3, 8012b2c <__kernel_sin+0x16c>)
 8012a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a52:	f7ed fc33 	bl	80002bc <__adddf3>
 8012a56:	9b02      	ldr	r3, [sp, #8]
 8012a58:	4606      	mov	r6, r0
 8012a5a:	460f      	mov	r7, r1
 8012a5c:	b9db      	cbnz	r3, 8012a96 <__kernel_sin+0xd6>
 8012a5e:	4602      	mov	r2, r0
 8012a60:	460b      	mov	r3, r1
 8012a62:	4650      	mov	r0, sl
 8012a64:	4659      	mov	r1, fp
 8012a66:	f7ed fddf 	bl	8000628 <__aeabi_dmul>
 8012a6a:	a325      	add	r3, pc, #148	; (adr r3, 8012b00 <__kernel_sin+0x140>)
 8012a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a70:	f7ed fc22 	bl	80002b8 <__aeabi_dsub>
 8012a74:	4642      	mov	r2, r8
 8012a76:	464b      	mov	r3, r9
 8012a78:	f7ed fdd6 	bl	8000628 <__aeabi_dmul>
 8012a7c:	4602      	mov	r2, r0
 8012a7e:	460b      	mov	r3, r1
 8012a80:	4620      	mov	r0, r4
 8012a82:	4629      	mov	r1, r5
 8012a84:	f7ed fc1a 	bl	80002bc <__adddf3>
 8012a88:	4604      	mov	r4, r0
 8012a8a:	460d      	mov	r5, r1
 8012a8c:	ec45 4b10 	vmov	d0, r4, r5
 8012a90:	b005      	add	sp, #20
 8012a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a96:	2200      	movs	r2, #0
 8012a98:	4b1b      	ldr	r3, [pc, #108]	; (8012b08 <__kernel_sin+0x148>)
 8012a9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a9e:	f7ed fdc3 	bl	8000628 <__aeabi_dmul>
 8012aa2:	4632      	mov	r2, r6
 8012aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012aa8:	463b      	mov	r3, r7
 8012aaa:	4640      	mov	r0, r8
 8012aac:	4649      	mov	r1, r9
 8012aae:	f7ed fdbb 	bl	8000628 <__aeabi_dmul>
 8012ab2:	4602      	mov	r2, r0
 8012ab4:	460b      	mov	r3, r1
 8012ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012aba:	f7ed fbfd 	bl	80002b8 <__aeabi_dsub>
 8012abe:	4652      	mov	r2, sl
 8012ac0:	465b      	mov	r3, fp
 8012ac2:	f7ed fdb1 	bl	8000628 <__aeabi_dmul>
 8012ac6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012aca:	f7ed fbf5 	bl	80002b8 <__aeabi_dsub>
 8012ace:	a30c      	add	r3, pc, #48	; (adr r3, 8012b00 <__kernel_sin+0x140>)
 8012ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad4:	4606      	mov	r6, r0
 8012ad6:	460f      	mov	r7, r1
 8012ad8:	4640      	mov	r0, r8
 8012ada:	4649      	mov	r1, r9
 8012adc:	f7ed fda4 	bl	8000628 <__aeabi_dmul>
 8012ae0:	4602      	mov	r2, r0
 8012ae2:	460b      	mov	r3, r1
 8012ae4:	4630      	mov	r0, r6
 8012ae6:	4639      	mov	r1, r7
 8012ae8:	f7ed fbe8 	bl	80002bc <__adddf3>
 8012aec:	4602      	mov	r2, r0
 8012aee:	460b      	mov	r3, r1
 8012af0:	4620      	mov	r0, r4
 8012af2:	4629      	mov	r1, r5
 8012af4:	f7ed fbe0 	bl	80002b8 <__aeabi_dsub>
 8012af8:	e7c6      	b.n	8012a88 <__kernel_sin+0xc8>
 8012afa:	bf00      	nop
 8012afc:	f3af 8000 	nop.w
 8012b00:	55555549 	.word	0x55555549
 8012b04:	3fc55555 	.word	0x3fc55555
 8012b08:	3fe00000 	.word	0x3fe00000
 8012b0c:	5acfd57c 	.word	0x5acfd57c
 8012b10:	3de5d93a 	.word	0x3de5d93a
 8012b14:	8a2b9ceb 	.word	0x8a2b9ceb
 8012b18:	3e5ae5e6 	.word	0x3e5ae5e6
 8012b1c:	57b1fe7d 	.word	0x57b1fe7d
 8012b20:	3ec71de3 	.word	0x3ec71de3
 8012b24:	19c161d5 	.word	0x19c161d5
 8012b28:	3f2a01a0 	.word	0x3f2a01a0
 8012b2c:	1110f8a6 	.word	0x1110f8a6
 8012b30:	3f811111 	.word	0x3f811111

08012b34 <fabs>:
 8012b34:	ec51 0b10 	vmov	r0, r1, d0
 8012b38:	ee10 2a10 	vmov	r2, s0
 8012b3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012b40:	ec43 2b10 	vmov	d0, r2, r3
 8012b44:	4770      	bx	lr
	...

08012b48 <floor>:
 8012b48:	ec51 0b10 	vmov	r0, r1, d0
 8012b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b50:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012b54:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012b58:	2e13      	cmp	r6, #19
 8012b5a:	460c      	mov	r4, r1
 8012b5c:	ee10 5a10 	vmov	r5, s0
 8012b60:	4680      	mov	r8, r0
 8012b62:	dc34      	bgt.n	8012bce <floor+0x86>
 8012b64:	2e00      	cmp	r6, #0
 8012b66:	da16      	bge.n	8012b96 <floor+0x4e>
 8012b68:	a335      	add	r3, pc, #212	; (adr r3, 8012c40 <floor+0xf8>)
 8012b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b6e:	f7ed fba5 	bl	80002bc <__adddf3>
 8012b72:	2200      	movs	r2, #0
 8012b74:	2300      	movs	r3, #0
 8012b76:	f7ed ffe7 	bl	8000b48 <__aeabi_dcmpgt>
 8012b7a:	b148      	cbz	r0, 8012b90 <floor+0x48>
 8012b7c:	2c00      	cmp	r4, #0
 8012b7e:	da59      	bge.n	8012c34 <floor+0xec>
 8012b80:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012b84:	4a30      	ldr	r2, [pc, #192]	; (8012c48 <floor+0x100>)
 8012b86:	432b      	orrs	r3, r5
 8012b88:	2500      	movs	r5, #0
 8012b8a:	42ab      	cmp	r3, r5
 8012b8c:	bf18      	it	ne
 8012b8e:	4614      	movne	r4, r2
 8012b90:	4621      	mov	r1, r4
 8012b92:	4628      	mov	r0, r5
 8012b94:	e025      	b.n	8012be2 <floor+0x9a>
 8012b96:	4f2d      	ldr	r7, [pc, #180]	; (8012c4c <floor+0x104>)
 8012b98:	4137      	asrs	r7, r6
 8012b9a:	ea01 0307 	and.w	r3, r1, r7
 8012b9e:	4303      	orrs	r3, r0
 8012ba0:	d01f      	beq.n	8012be2 <floor+0x9a>
 8012ba2:	a327      	add	r3, pc, #156	; (adr r3, 8012c40 <floor+0xf8>)
 8012ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba8:	f7ed fb88 	bl	80002bc <__adddf3>
 8012bac:	2200      	movs	r2, #0
 8012bae:	2300      	movs	r3, #0
 8012bb0:	f7ed ffca 	bl	8000b48 <__aeabi_dcmpgt>
 8012bb4:	2800      	cmp	r0, #0
 8012bb6:	d0eb      	beq.n	8012b90 <floor+0x48>
 8012bb8:	2c00      	cmp	r4, #0
 8012bba:	bfbe      	ittt	lt
 8012bbc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012bc0:	fa43 f606 	asrlt.w	r6, r3, r6
 8012bc4:	19a4      	addlt	r4, r4, r6
 8012bc6:	ea24 0407 	bic.w	r4, r4, r7
 8012bca:	2500      	movs	r5, #0
 8012bcc:	e7e0      	b.n	8012b90 <floor+0x48>
 8012bce:	2e33      	cmp	r6, #51	; 0x33
 8012bd0:	dd0b      	ble.n	8012bea <floor+0xa2>
 8012bd2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012bd6:	d104      	bne.n	8012be2 <floor+0x9a>
 8012bd8:	ee10 2a10 	vmov	r2, s0
 8012bdc:	460b      	mov	r3, r1
 8012bde:	f7ed fb6d 	bl	80002bc <__adddf3>
 8012be2:	ec41 0b10 	vmov	d0, r0, r1
 8012be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bea:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012bee:	f04f 33ff 	mov.w	r3, #4294967295
 8012bf2:	fa23 f707 	lsr.w	r7, r3, r7
 8012bf6:	4207      	tst	r7, r0
 8012bf8:	d0f3      	beq.n	8012be2 <floor+0x9a>
 8012bfa:	a311      	add	r3, pc, #68	; (adr r3, 8012c40 <floor+0xf8>)
 8012bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c00:	f7ed fb5c 	bl	80002bc <__adddf3>
 8012c04:	2200      	movs	r2, #0
 8012c06:	2300      	movs	r3, #0
 8012c08:	f7ed ff9e 	bl	8000b48 <__aeabi_dcmpgt>
 8012c0c:	2800      	cmp	r0, #0
 8012c0e:	d0bf      	beq.n	8012b90 <floor+0x48>
 8012c10:	2c00      	cmp	r4, #0
 8012c12:	da02      	bge.n	8012c1a <floor+0xd2>
 8012c14:	2e14      	cmp	r6, #20
 8012c16:	d103      	bne.n	8012c20 <floor+0xd8>
 8012c18:	3401      	adds	r4, #1
 8012c1a:	ea25 0507 	bic.w	r5, r5, r7
 8012c1e:	e7b7      	b.n	8012b90 <floor+0x48>
 8012c20:	2301      	movs	r3, #1
 8012c22:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012c26:	fa03 f606 	lsl.w	r6, r3, r6
 8012c2a:	4435      	add	r5, r6
 8012c2c:	4545      	cmp	r5, r8
 8012c2e:	bf38      	it	cc
 8012c30:	18e4      	addcc	r4, r4, r3
 8012c32:	e7f2      	b.n	8012c1a <floor+0xd2>
 8012c34:	2500      	movs	r5, #0
 8012c36:	462c      	mov	r4, r5
 8012c38:	e7aa      	b.n	8012b90 <floor+0x48>
 8012c3a:	bf00      	nop
 8012c3c:	f3af 8000 	nop.w
 8012c40:	8800759c 	.word	0x8800759c
 8012c44:	7e37e43c 	.word	0x7e37e43c
 8012c48:	bff00000 	.word	0xbff00000
 8012c4c:	000fffff 	.word	0x000fffff

08012c50 <matherr>:
 8012c50:	2000      	movs	r0, #0
 8012c52:	4770      	bx	lr
 8012c54:	0000      	movs	r0, r0
	...

08012c58 <scalbn>:
 8012c58:	b570      	push	{r4, r5, r6, lr}
 8012c5a:	ec55 4b10 	vmov	r4, r5, d0
 8012c5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012c62:	4606      	mov	r6, r0
 8012c64:	462b      	mov	r3, r5
 8012c66:	b9aa      	cbnz	r2, 8012c94 <scalbn+0x3c>
 8012c68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012c6c:	4323      	orrs	r3, r4
 8012c6e:	d03b      	beq.n	8012ce8 <scalbn+0x90>
 8012c70:	4b31      	ldr	r3, [pc, #196]	; (8012d38 <scalbn+0xe0>)
 8012c72:	4629      	mov	r1, r5
 8012c74:	2200      	movs	r2, #0
 8012c76:	ee10 0a10 	vmov	r0, s0
 8012c7a:	f7ed fcd5 	bl	8000628 <__aeabi_dmul>
 8012c7e:	4b2f      	ldr	r3, [pc, #188]	; (8012d3c <scalbn+0xe4>)
 8012c80:	429e      	cmp	r6, r3
 8012c82:	4604      	mov	r4, r0
 8012c84:	460d      	mov	r5, r1
 8012c86:	da12      	bge.n	8012cae <scalbn+0x56>
 8012c88:	a327      	add	r3, pc, #156	; (adr r3, 8012d28 <scalbn+0xd0>)
 8012c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8e:	f7ed fccb 	bl	8000628 <__aeabi_dmul>
 8012c92:	e009      	b.n	8012ca8 <scalbn+0x50>
 8012c94:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012c98:	428a      	cmp	r2, r1
 8012c9a:	d10c      	bne.n	8012cb6 <scalbn+0x5e>
 8012c9c:	ee10 2a10 	vmov	r2, s0
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	4629      	mov	r1, r5
 8012ca4:	f7ed fb0a 	bl	80002bc <__adddf3>
 8012ca8:	4604      	mov	r4, r0
 8012caa:	460d      	mov	r5, r1
 8012cac:	e01c      	b.n	8012ce8 <scalbn+0x90>
 8012cae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012cb2:	460b      	mov	r3, r1
 8012cb4:	3a36      	subs	r2, #54	; 0x36
 8012cb6:	4432      	add	r2, r6
 8012cb8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012cbc:	428a      	cmp	r2, r1
 8012cbe:	dd0b      	ble.n	8012cd8 <scalbn+0x80>
 8012cc0:	ec45 4b11 	vmov	d1, r4, r5
 8012cc4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012d30 <scalbn+0xd8>
 8012cc8:	f000 f83c 	bl	8012d44 <copysign>
 8012ccc:	a318      	add	r3, pc, #96	; (adr r3, 8012d30 <scalbn+0xd8>)
 8012cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd2:	ec51 0b10 	vmov	r0, r1, d0
 8012cd6:	e7da      	b.n	8012c8e <scalbn+0x36>
 8012cd8:	2a00      	cmp	r2, #0
 8012cda:	dd08      	ble.n	8012cee <scalbn+0x96>
 8012cdc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012ce0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012ce4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012ce8:	ec45 4b10 	vmov	d0, r4, r5
 8012cec:	bd70      	pop	{r4, r5, r6, pc}
 8012cee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012cf2:	da0d      	bge.n	8012d10 <scalbn+0xb8>
 8012cf4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012cf8:	429e      	cmp	r6, r3
 8012cfa:	ec45 4b11 	vmov	d1, r4, r5
 8012cfe:	dce1      	bgt.n	8012cc4 <scalbn+0x6c>
 8012d00:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012d28 <scalbn+0xd0>
 8012d04:	f000 f81e 	bl	8012d44 <copysign>
 8012d08:	a307      	add	r3, pc, #28	; (adr r3, 8012d28 <scalbn+0xd0>)
 8012d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d0e:	e7e0      	b.n	8012cd2 <scalbn+0x7a>
 8012d10:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012d14:	3236      	adds	r2, #54	; 0x36
 8012d16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012d1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012d1e:	4620      	mov	r0, r4
 8012d20:	4629      	mov	r1, r5
 8012d22:	2200      	movs	r2, #0
 8012d24:	4b06      	ldr	r3, [pc, #24]	; (8012d40 <scalbn+0xe8>)
 8012d26:	e7b2      	b.n	8012c8e <scalbn+0x36>
 8012d28:	c2f8f359 	.word	0xc2f8f359
 8012d2c:	01a56e1f 	.word	0x01a56e1f
 8012d30:	8800759c 	.word	0x8800759c
 8012d34:	7e37e43c 	.word	0x7e37e43c
 8012d38:	43500000 	.word	0x43500000
 8012d3c:	ffff3cb0 	.word	0xffff3cb0
 8012d40:	3c900000 	.word	0x3c900000

08012d44 <copysign>:
 8012d44:	ec51 0b10 	vmov	r0, r1, d0
 8012d48:	ee11 0a90 	vmov	r0, s3
 8012d4c:	ee10 2a10 	vmov	r2, s0
 8012d50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012d54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012d58:	ea41 0300 	orr.w	r3, r1, r0
 8012d5c:	ec43 2b10 	vmov	d0, r2, r3
 8012d60:	4770      	bx	lr
	...

08012d64 <__errno>:
 8012d64:	4b01      	ldr	r3, [pc, #4]	; (8012d6c <__errno+0x8>)
 8012d66:	6818      	ldr	r0, [r3, #0]
 8012d68:	4770      	bx	lr
 8012d6a:	bf00      	nop
 8012d6c:	2000000c 	.word	0x2000000c

08012d70 <__libc_init_array>:
 8012d70:	b570      	push	{r4, r5, r6, lr}
 8012d72:	4e0d      	ldr	r6, [pc, #52]	; (8012da8 <__libc_init_array+0x38>)
 8012d74:	4c0d      	ldr	r4, [pc, #52]	; (8012dac <__libc_init_array+0x3c>)
 8012d76:	1ba4      	subs	r4, r4, r6
 8012d78:	10a4      	asrs	r4, r4, #2
 8012d7a:	2500      	movs	r5, #0
 8012d7c:	42a5      	cmp	r5, r4
 8012d7e:	d109      	bne.n	8012d94 <__libc_init_array+0x24>
 8012d80:	4e0b      	ldr	r6, [pc, #44]	; (8012db0 <__libc_init_array+0x40>)
 8012d82:	4c0c      	ldr	r4, [pc, #48]	; (8012db4 <__libc_init_array+0x44>)
 8012d84:	f004 feec 	bl	8017b60 <_init>
 8012d88:	1ba4      	subs	r4, r4, r6
 8012d8a:	10a4      	asrs	r4, r4, #2
 8012d8c:	2500      	movs	r5, #0
 8012d8e:	42a5      	cmp	r5, r4
 8012d90:	d105      	bne.n	8012d9e <__libc_init_array+0x2e>
 8012d92:	bd70      	pop	{r4, r5, r6, pc}
 8012d94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012d98:	4798      	blx	r3
 8012d9a:	3501      	adds	r5, #1
 8012d9c:	e7ee      	b.n	8012d7c <__libc_init_array+0xc>
 8012d9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012da2:	4798      	blx	r3
 8012da4:	3501      	adds	r5, #1
 8012da6:	e7f2      	b.n	8012d8e <__libc_init_array+0x1e>
 8012da8:	0801872c 	.word	0x0801872c
 8012dac:	0801872c 	.word	0x0801872c
 8012db0:	0801872c 	.word	0x0801872c
 8012db4:	08018734 	.word	0x08018734

08012db8 <memset>:
 8012db8:	4402      	add	r2, r0
 8012dba:	4603      	mov	r3, r0
 8012dbc:	4293      	cmp	r3, r2
 8012dbe:	d100      	bne.n	8012dc2 <memset+0xa>
 8012dc0:	4770      	bx	lr
 8012dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8012dc6:	e7f9      	b.n	8012dbc <memset+0x4>

08012dc8 <__cvt>:
 8012dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012dcc:	ec55 4b10 	vmov	r4, r5, d0
 8012dd0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012dd2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012dd6:	2d00      	cmp	r5, #0
 8012dd8:	460e      	mov	r6, r1
 8012dda:	4691      	mov	r9, r2
 8012ddc:	4619      	mov	r1, r3
 8012dde:	bfb8      	it	lt
 8012de0:	4622      	movlt	r2, r4
 8012de2:	462b      	mov	r3, r5
 8012de4:	f027 0720 	bic.w	r7, r7, #32
 8012de8:	bfbb      	ittet	lt
 8012dea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012dee:	461d      	movlt	r5, r3
 8012df0:	2300      	movge	r3, #0
 8012df2:	232d      	movlt	r3, #45	; 0x2d
 8012df4:	bfb8      	it	lt
 8012df6:	4614      	movlt	r4, r2
 8012df8:	2f46      	cmp	r7, #70	; 0x46
 8012dfa:	700b      	strb	r3, [r1, #0]
 8012dfc:	d004      	beq.n	8012e08 <__cvt+0x40>
 8012dfe:	2f45      	cmp	r7, #69	; 0x45
 8012e00:	d100      	bne.n	8012e04 <__cvt+0x3c>
 8012e02:	3601      	adds	r6, #1
 8012e04:	2102      	movs	r1, #2
 8012e06:	e000      	b.n	8012e0a <__cvt+0x42>
 8012e08:	2103      	movs	r1, #3
 8012e0a:	ab03      	add	r3, sp, #12
 8012e0c:	9301      	str	r3, [sp, #4]
 8012e0e:	ab02      	add	r3, sp, #8
 8012e10:	9300      	str	r3, [sp, #0]
 8012e12:	4632      	mov	r2, r6
 8012e14:	4653      	mov	r3, sl
 8012e16:	ec45 4b10 	vmov	d0, r4, r5
 8012e1a:	f001 ff9d 	bl	8014d58 <_dtoa_r>
 8012e1e:	2f47      	cmp	r7, #71	; 0x47
 8012e20:	4680      	mov	r8, r0
 8012e22:	d102      	bne.n	8012e2a <__cvt+0x62>
 8012e24:	f019 0f01 	tst.w	r9, #1
 8012e28:	d026      	beq.n	8012e78 <__cvt+0xb0>
 8012e2a:	2f46      	cmp	r7, #70	; 0x46
 8012e2c:	eb08 0906 	add.w	r9, r8, r6
 8012e30:	d111      	bne.n	8012e56 <__cvt+0x8e>
 8012e32:	f898 3000 	ldrb.w	r3, [r8]
 8012e36:	2b30      	cmp	r3, #48	; 0x30
 8012e38:	d10a      	bne.n	8012e50 <__cvt+0x88>
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	4620      	mov	r0, r4
 8012e40:	4629      	mov	r1, r5
 8012e42:	f7ed fe59 	bl	8000af8 <__aeabi_dcmpeq>
 8012e46:	b918      	cbnz	r0, 8012e50 <__cvt+0x88>
 8012e48:	f1c6 0601 	rsb	r6, r6, #1
 8012e4c:	f8ca 6000 	str.w	r6, [sl]
 8012e50:	f8da 3000 	ldr.w	r3, [sl]
 8012e54:	4499      	add	r9, r3
 8012e56:	2200      	movs	r2, #0
 8012e58:	2300      	movs	r3, #0
 8012e5a:	4620      	mov	r0, r4
 8012e5c:	4629      	mov	r1, r5
 8012e5e:	f7ed fe4b 	bl	8000af8 <__aeabi_dcmpeq>
 8012e62:	b938      	cbnz	r0, 8012e74 <__cvt+0xac>
 8012e64:	2230      	movs	r2, #48	; 0x30
 8012e66:	9b03      	ldr	r3, [sp, #12]
 8012e68:	454b      	cmp	r3, r9
 8012e6a:	d205      	bcs.n	8012e78 <__cvt+0xb0>
 8012e6c:	1c59      	adds	r1, r3, #1
 8012e6e:	9103      	str	r1, [sp, #12]
 8012e70:	701a      	strb	r2, [r3, #0]
 8012e72:	e7f8      	b.n	8012e66 <__cvt+0x9e>
 8012e74:	f8cd 900c 	str.w	r9, [sp, #12]
 8012e78:	9b03      	ldr	r3, [sp, #12]
 8012e7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012e7c:	eba3 0308 	sub.w	r3, r3, r8
 8012e80:	4640      	mov	r0, r8
 8012e82:	6013      	str	r3, [r2, #0]
 8012e84:	b004      	add	sp, #16
 8012e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012e8a <__exponent>:
 8012e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012e8c:	2900      	cmp	r1, #0
 8012e8e:	4604      	mov	r4, r0
 8012e90:	bfba      	itte	lt
 8012e92:	4249      	neglt	r1, r1
 8012e94:	232d      	movlt	r3, #45	; 0x2d
 8012e96:	232b      	movge	r3, #43	; 0x2b
 8012e98:	2909      	cmp	r1, #9
 8012e9a:	f804 2b02 	strb.w	r2, [r4], #2
 8012e9e:	7043      	strb	r3, [r0, #1]
 8012ea0:	dd20      	ble.n	8012ee4 <__exponent+0x5a>
 8012ea2:	f10d 0307 	add.w	r3, sp, #7
 8012ea6:	461f      	mov	r7, r3
 8012ea8:	260a      	movs	r6, #10
 8012eaa:	fb91 f5f6 	sdiv	r5, r1, r6
 8012eae:	fb06 1115 	mls	r1, r6, r5, r1
 8012eb2:	3130      	adds	r1, #48	; 0x30
 8012eb4:	2d09      	cmp	r5, #9
 8012eb6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012eba:	f103 32ff 	add.w	r2, r3, #4294967295
 8012ebe:	4629      	mov	r1, r5
 8012ec0:	dc09      	bgt.n	8012ed6 <__exponent+0x4c>
 8012ec2:	3130      	adds	r1, #48	; 0x30
 8012ec4:	3b02      	subs	r3, #2
 8012ec6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012eca:	42bb      	cmp	r3, r7
 8012ecc:	4622      	mov	r2, r4
 8012ece:	d304      	bcc.n	8012eda <__exponent+0x50>
 8012ed0:	1a10      	subs	r0, r2, r0
 8012ed2:	b003      	add	sp, #12
 8012ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ed6:	4613      	mov	r3, r2
 8012ed8:	e7e7      	b.n	8012eaa <__exponent+0x20>
 8012eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ede:	f804 2b01 	strb.w	r2, [r4], #1
 8012ee2:	e7f2      	b.n	8012eca <__exponent+0x40>
 8012ee4:	2330      	movs	r3, #48	; 0x30
 8012ee6:	4419      	add	r1, r3
 8012ee8:	7083      	strb	r3, [r0, #2]
 8012eea:	1d02      	adds	r2, r0, #4
 8012eec:	70c1      	strb	r1, [r0, #3]
 8012eee:	e7ef      	b.n	8012ed0 <__exponent+0x46>

08012ef0 <_printf_float>:
 8012ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ef4:	b08d      	sub	sp, #52	; 0x34
 8012ef6:	460c      	mov	r4, r1
 8012ef8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012efc:	4616      	mov	r6, r2
 8012efe:	461f      	mov	r7, r3
 8012f00:	4605      	mov	r5, r0
 8012f02:	f003 f995 	bl	8016230 <_localeconv_r>
 8012f06:	6803      	ldr	r3, [r0, #0]
 8012f08:	9304      	str	r3, [sp, #16]
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7ed f978 	bl	8000200 <strlen>
 8012f10:	2300      	movs	r3, #0
 8012f12:	930a      	str	r3, [sp, #40]	; 0x28
 8012f14:	f8d8 3000 	ldr.w	r3, [r8]
 8012f18:	9005      	str	r0, [sp, #20]
 8012f1a:	3307      	adds	r3, #7
 8012f1c:	f023 0307 	bic.w	r3, r3, #7
 8012f20:	f103 0208 	add.w	r2, r3, #8
 8012f24:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012f28:	f8d4 b000 	ldr.w	fp, [r4]
 8012f2c:	f8c8 2000 	str.w	r2, [r8]
 8012f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f34:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012f38:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012f3c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012f40:	9307      	str	r3, [sp, #28]
 8012f42:	f8cd 8018 	str.w	r8, [sp, #24]
 8012f46:	f04f 32ff 	mov.w	r2, #4294967295
 8012f4a:	4ba7      	ldr	r3, [pc, #668]	; (80131e8 <_printf_float+0x2f8>)
 8012f4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012f50:	f7ed fe04 	bl	8000b5c <__aeabi_dcmpun>
 8012f54:	bb70      	cbnz	r0, 8012fb4 <_printf_float+0xc4>
 8012f56:	f04f 32ff 	mov.w	r2, #4294967295
 8012f5a:	4ba3      	ldr	r3, [pc, #652]	; (80131e8 <_printf_float+0x2f8>)
 8012f5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012f60:	f7ed fdde 	bl	8000b20 <__aeabi_dcmple>
 8012f64:	bb30      	cbnz	r0, 8012fb4 <_printf_float+0xc4>
 8012f66:	2200      	movs	r2, #0
 8012f68:	2300      	movs	r3, #0
 8012f6a:	4640      	mov	r0, r8
 8012f6c:	4649      	mov	r1, r9
 8012f6e:	f7ed fdcd 	bl	8000b0c <__aeabi_dcmplt>
 8012f72:	b110      	cbz	r0, 8012f7a <_printf_float+0x8a>
 8012f74:	232d      	movs	r3, #45	; 0x2d
 8012f76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f7a:	4a9c      	ldr	r2, [pc, #624]	; (80131ec <_printf_float+0x2fc>)
 8012f7c:	4b9c      	ldr	r3, [pc, #624]	; (80131f0 <_printf_float+0x300>)
 8012f7e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012f82:	bf8c      	ite	hi
 8012f84:	4690      	movhi	r8, r2
 8012f86:	4698      	movls	r8, r3
 8012f88:	2303      	movs	r3, #3
 8012f8a:	f02b 0204 	bic.w	r2, fp, #4
 8012f8e:	6123      	str	r3, [r4, #16]
 8012f90:	6022      	str	r2, [r4, #0]
 8012f92:	f04f 0900 	mov.w	r9, #0
 8012f96:	9700      	str	r7, [sp, #0]
 8012f98:	4633      	mov	r3, r6
 8012f9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8012f9c:	4621      	mov	r1, r4
 8012f9e:	4628      	mov	r0, r5
 8012fa0:	f000 f9e6 	bl	8013370 <_printf_common>
 8012fa4:	3001      	adds	r0, #1
 8012fa6:	f040 808d 	bne.w	80130c4 <_printf_float+0x1d4>
 8012faa:	f04f 30ff 	mov.w	r0, #4294967295
 8012fae:	b00d      	add	sp, #52	; 0x34
 8012fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fb4:	4642      	mov	r2, r8
 8012fb6:	464b      	mov	r3, r9
 8012fb8:	4640      	mov	r0, r8
 8012fba:	4649      	mov	r1, r9
 8012fbc:	f7ed fdce 	bl	8000b5c <__aeabi_dcmpun>
 8012fc0:	b110      	cbz	r0, 8012fc8 <_printf_float+0xd8>
 8012fc2:	4a8c      	ldr	r2, [pc, #560]	; (80131f4 <_printf_float+0x304>)
 8012fc4:	4b8c      	ldr	r3, [pc, #560]	; (80131f8 <_printf_float+0x308>)
 8012fc6:	e7da      	b.n	8012f7e <_printf_float+0x8e>
 8012fc8:	6861      	ldr	r1, [r4, #4]
 8012fca:	1c4b      	adds	r3, r1, #1
 8012fcc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012fd0:	a80a      	add	r0, sp, #40	; 0x28
 8012fd2:	d13e      	bne.n	8013052 <_printf_float+0x162>
 8012fd4:	2306      	movs	r3, #6
 8012fd6:	6063      	str	r3, [r4, #4]
 8012fd8:	2300      	movs	r3, #0
 8012fda:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012fde:	ab09      	add	r3, sp, #36	; 0x24
 8012fe0:	9300      	str	r3, [sp, #0]
 8012fe2:	ec49 8b10 	vmov	d0, r8, r9
 8012fe6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012fea:	6022      	str	r2, [r4, #0]
 8012fec:	f8cd a004 	str.w	sl, [sp, #4]
 8012ff0:	6861      	ldr	r1, [r4, #4]
 8012ff2:	4628      	mov	r0, r5
 8012ff4:	f7ff fee8 	bl	8012dc8 <__cvt>
 8012ff8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012ffc:	2b47      	cmp	r3, #71	; 0x47
 8012ffe:	4680      	mov	r8, r0
 8013000:	d109      	bne.n	8013016 <_printf_float+0x126>
 8013002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013004:	1cd8      	adds	r0, r3, #3
 8013006:	db02      	blt.n	801300e <_printf_float+0x11e>
 8013008:	6862      	ldr	r2, [r4, #4]
 801300a:	4293      	cmp	r3, r2
 801300c:	dd47      	ble.n	801309e <_printf_float+0x1ae>
 801300e:	f1aa 0a02 	sub.w	sl, sl, #2
 8013012:	fa5f fa8a 	uxtb.w	sl, sl
 8013016:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801301a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801301c:	d824      	bhi.n	8013068 <_printf_float+0x178>
 801301e:	3901      	subs	r1, #1
 8013020:	4652      	mov	r2, sl
 8013022:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013026:	9109      	str	r1, [sp, #36]	; 0x24
 8013028:	f7ff ff2f 	bl	8012e8a <__exponent>
 801302c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801302e:	1813      	adds	r3, r2, r0
 8013030:	2a01      	cmp	r2, #1
 8013032:	4681      	mov	r9, r0
 8013034:	6123      	str	r3, [r4, #16]
 8013036:	dc02      	bgt.n	801303e <_printf_float+0x14e>
 8013038:	6822      	ldr	r2, [r4, #0]
 801303a:	07d1      	lsls	r1, r2, #31
 801303c:	d501      	bpl.n	8013042 <_printf_float+0x152>
 801303e:	3301      	adds	r3, #1
 8013040:	6123      	str	r3, [r4, #16]
 8013042:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013046:	2b00      	cmp	r3, #0
 8013048:	d0a5      	beq.n	8012f96 <_printf_float+0xa6>
 801304a:	232d      	movs	r3, #45	; 0x2d
 801304c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013050:	e7a1      	b.n	8012f96 <_printf_float+0xa6>
 8013052:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8013056:	f000 8177 	beq.w	8013348 <_printf_float+0x458>
 801305a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801305e:	d1bb      	bne.n	8012fd8 <_printf_float+0xe8>
 8013060:	2900      	cmp	r1, #0
 8013062:	d1b9      	bne.n	8012fd8 <_printf_float+0xe8>
 8013064:	2301      	movs	r3, #1
 8013066:	e7b6      	b.n	8012fd6 <_printf_float+0xe6>
 8013068:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801306c:	d119      	bne.n	80130a2 <_printf_float+0x1b2>
 801306e:	2900      	cmp	r1, #0
 8013070:	6863      	ldr	r3, [r4, #4]
 8013072:	dd0c      	ble.n	801308e <_printf_float+0x19e>
 8013074:	6121      	str	r1, [r4, #16]
 8013076:	b913      	cbnz	r3, 801307e <_printf_float+0x18e>
 8013078:	6822      	ldr	r2, [r4, #0]
 801307a:	07d2      	lsls	r2, r2, #31
 801307c:	d502      	bpl.n	8013084 <_printf_float+0x194>
 801307e:	3301      	adds	r3, #1
 8013080:	440b      	add	r3, r1
 8013082:	6123      	str	r3, [r4, #16]
 8013084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013086:	65a3      	str	r3, [r4, #88]	; 0x58
 8013088:	f04f 0900 	mov.w	r9, #0
 801308c:	e7d9      	b.n	8013042 <_printf_float+0x152>
 801308e:	b913      	cbnz	r3, 8013096 <_printf_float+0x1a6>
 8013090:	6822      	ldr	r2, [r4, #0]
 8013092:	07d0      	lsls	r0, r2, #31
 8013094:	d501      	bpl.n	801309a <_printf_float+0x1aa>
 8013096:	3302      	adds	r3, #2
 8013098:	e7f3      	b.n	8013082 <_printf_float+0x192>
 801309a:	2301      	movs	r3, #1
 801309c:	e7f1      	b.n	8013082 <_printf_float+0x192>
 801309e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80130a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80130a6:	4293      	cmp	r3, r2
 80130a8:	db05      	blt.n	80130b6 <_printf_float+0x1c6>
 80130aa:	6822      	ldr	r2, [r4, #0]
 80130ac:	6123      	str	r3, [r4, #16]
 80130ae:	07d1      	lsls	r1, r2, #31
 80130b0:	d5e8      	bpl.n	8013084 <_printf_float+0x194>
 80130b2:	3301      	adds	r3, #1
 80130b4:	e7e5      	b.n	8013082 <_printf_float+0x192>
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	bfd4      	ite	le
 80130ba:	f1c3 0302 	rsble	r3, r3, #2
 80130be:	2301      	movgt	r3, #1
 80130c0:	4413      	add	r3, r2
 80130c2:	e7de      	b.n	8013082 <_printf_float+0x192>
 80130c4:	6823      	ldr	r3, [r4, #0]
 80130c6:	055a      	lsls	r2, r3, #21
 80130c8:	d407      	bmi.n	80130da <_printf_float+0x1ea>
 80130ca:	6923      	ldr	r3, [r4, #16]
 80130cc:	4642      	mov	r2, r8
 80130ce:	4631      	mov	r1, r6
 80130d0:	4628      	mov	r0, r5
 80130d2:	47b8      	blx	r7
 80130d4:	3001      	adds	r0, #1
 80130d6:	d12b      	bne.n	8013130 <_printf_float+0x240>
 80130d8:	e767      	b.n	8012faa <_printf_float+0xba>
 80130da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80130de:	f240 80dc 	bls.w	801329a <_printf_float+0x3aa>
 80130e2:	2200      	movs	r2, #0
 80130e4:	2300      	movs	r3, #0
 80130e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80130ea:	f7ed fd05 	bl	8000af8 <__aeabi_dcmpeq>
 80130ee:	2800      	cmp	r0, #0
 80130f0:	d033      	beq.n	801315a <_printf_float+0x26a>
 80130f2:	2301      	movs	r3, #1
 80130f4:	4a41      	ldr	r2, [pc, #260]	; (80131fc <_printf_float+0x30c>)
 80130f6:	4631      	mov	r1, r6
 80130f8:	4628      	mov	r0, r5
 80130fa:	47b8      	blx	r7
 80130fc:	3001      	adds	r0, #1
 80130fe:	f43f af54 	beq.w	8012faa <_printf_float+0xba>
 8013102:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013106:	429a      	cmp	r2, r3
 8013108:	db02      	blt.n	8013110 <_printf_float+0x220>
 801310a:	6823      	ldr	r3, [r4, #0]
 801310c:	07d8      	lsls	r0, r3, #31
 801310e:	d50f      	bpl.n	8013130 <_printf_float+0x240>
 8013110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013114:	4631      	mov	r1, r6
 8013116:	4628      	mov	r0, r5
 8013118:	47b8      	blx	r7
 801311a:	3001      	adds	r0, #1
 801311c:	f43f af45 	beq.w	8012faa <_printf_float+0xba>
 8013120:	f04f 0800 	mov.w	r8, #0
 8013124:	f104 091a 	add.w	r9, r4, #26
 8013128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801312a:	3b01      	subs	r3, #1
 801312c:	4543      	cmp	r3, r8
 801312e:	dc09      	bgt.n	8013144 <_printf_float+0x254>
 8013130:	6823      	ldr	r3, [r4, #0]
 8013132:	079b      	lsls	r3, r3, #30
 8013134:	f100 8103 	bmi.w	801333e <_printf_float+0x44e>
 8013138:	68e0      	ldr	r0, [r4, #12]
 801313a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801313c:	4298      	cmp	r0, r3
 801313e:	bfb8      	it	lt
 8013140:	4618      	movlt	r0, r3
 8013142:	e734      	b.n	8012fae <_printf_float+0xbe>
 8013144:	2301      	movs	r3, #1
 8013146:	464a      	mov	r2, r9
 8013148:	4631      	mov	r1, r6
 801314a:	4628      	mov	r0, r5
 801314c:	47b8      	blx	r7
 801314e:	3001      	adds	r0, #1
 8013150:	f43f af2b 	beq.w	8012faa <_printf_float+0xba>
 8013154:	f108 0801 	add.w	r8, r8, #1
 8013158:	e7e6      	b.n	8013128 <_printf_float+0x238>
 801315a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801315c:	2b00      	cmp	r3, #0
 801315e:	dc2b      	bgt.n	80131b8 <_printf_float+0x2c8>
 8013160:	2301      	movs	r3, #1
 8013162:	4a26      	ldr	r2, [pc, #152]	; (80131fc <_printf_float+0x30c>)
 8013164:	4631      	mov	r1, r6
 8013166:	4628      	mov	r0, r5
 8013168:	47b8      	blx	r7
 801316a:	3001      	adds	r0, #1
 801316c:	f43f af1d 	beq.w	8012faa <_printf_float+0xba>
 8013170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013172:	b923      	cbnz	r3, 801317e <_printf_float+0x28e>
 8013174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013176:	b913      	cbnz	r3, 801317e <_printf_float+0x28e>
 8013178:	6823      	ldr	r3, [r4, #0]
 801317a:	07d9      	lsls	r1, r3, #31
 801317c:	d5d8      	bpl.n	8013130 <_printf_float+0x240>
 801317e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013182:	4631      	mov	r1, r6
 8013184:	4628      	mov	r0, r5
 8013186:	47b8      	blx	r7
 8013188:	3001      	adds	r0, #1
 801318a:	f43f af0e 	beq.w	8012faa <_printf_float+0xba>
 801318e:	f04f 0900 	mov.w	r9, #0
 8013192:	f104 0a1a 	add.w	sl, r4, #26
 8013196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013198:	425b      	negs	r3, r3
 801319a:	454b      	cmp	r3, r9
 801319c:	dc01      	bgt.n	80131a2 <_printf_float+0x2b2>
 801319e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131a0:	e794      	b.n	80130cc <_printf_float+0x1dc>
 80131a2:	2301      	movs	r3, #1
 80131a4:	4652      	mov	r2, sl
 80131a6:	4631      	mov	r1, r6
 80131a8:	4628      	mov	r0, r5
 80131aa:	47b8      	blx	r7
 80131ac:	3001      	adds	r0, #1
 80131ae:	f43f aefc 	beq.w	8012faa <_printf_float+0xba>
 80131b2:	f109 0901 	add.w	r9, r9, #1
 80131b6:	e7ee      	b.n	8013196 <_printf_float+0x2a6>
 80131b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80131ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80131bc:	429a      	cmp	r2, r3
 80131be:	bfa8      	it	ge
 80131c0:	461a      	movge	r2, r3
 80131c2:	2a00      	cmp	r2, #0
 80131c4:	4691      	mov	r9, r2
 80131c6:	dd07      	ble.n	80131d8 <_printf_float+0x2e8>
 80131c8:	4613      	mov	r3, r2
 80131ca:	4631      	mov	r1, r6
 80131cc:	4642      	mov	r2, r8
 80131ce:	4628      	mov	r0, r5
 80131d0:	47b8      	blx	r7
 80131d2:	3001      	adds	r0, #1
 80131d4:	f43f aee9 	beq.w	8012faa <_printf_float+0xba>
 80131d8:	f104 031a 	add.w	r3, r4, #26
 80131dc:	f04f 0b00 	mov.w	fp, #0
 80131e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80131e4:	9306      	str	r3, [sp, #24]
 80131e6:	e015      	b.n	8013214 <_printf_float+0x324>
 80131e8:	7fefffff 	.word	0x7fefffff
 80131ec:	080183f0 	.word	0x080183f0
 80131f0:	080183ec 	.word	0x080183ec
 80131f4:	080183f8 	.word	0x080183f8
 80131f8:	080183f4 	.word	0x080183f4
 80131fc:	0801861b 	.word	0x0801861b
 8013200:	2301      	movs	r3, #1
 8013202:	9a06      	ldr	r2, [sp, #24]
 8013204:	4631      	mov	r1, r6
 8013206:	4628      	mov	r0, r5
 8013208:	47b8      	blx	r7
 801320a:	3001      	adds	r0, #1
 801320c:	f43f aecd 	beq.w	8012faa <_printf_float+0xba>
 8013210:	f10b 0b01 	add.w	fp, fp, #1
 8013214:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013218:	ebaa 0309 	sub.w	r3, sl, r9
 801321c:	455b      	cmp	r3, fp
 801321e:	dcef      	bgt.n	8013200 <_printf_float+0x310>
 8013220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013224:	429a      	cmp	r2, r3
 8013226:	44d0      	add	r8, sl
 8013228:	db15      	blt.n	8013256 <_printf_float+0x366>
 801322a:	6823      	ldr	r3, [r4, #0]
 801322c:	07da      	lsls	r2, r3, #31
 801322e:	d412      	bmi.n	8013256 <_printf_float+0x366>
 8013230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013232:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013234:	eba3 020a 	sub.w	r2, r3, sl
 8013238:	eba3 0a01 	sub.w	sl, r3, r1
 801323c:	4592      	cmp	sl, r2
 801323e:	bfa8      	it	ge
 8013240:	4692      	movge	sl, r2
 8013242:	f1ba 0f00 	cmp.w	sl, #0
 8013246:	dc0e      	bgt.n	8013266 <_printf_float+0x376>
 8013248:	f04f 0800 	mov.w	r8, #0
 801324c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013250:	f104 091a 	add.w	r9, r4, #26
 8013254:	e019      	b.n	801328a <_printf_float+0x39a>
 8013256:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801325a:	4631      	mov	r1, r6
 801325c:	4628      	mov	r0, r5
 801325e:	47b8      	blx	r7
 8013260:	3001      	adds	r0, #1
 8013262:	d1e5      	bne.n	8013230 <_printf_float+0x340>
 8013264:	e6a1      	b.n	8012faa <_printf_float+0xba>
 8013266:	4653      	mov	r3, sl
 8013268:	4642      	mov	r2, r8
 801326a:	4631      	mov	r1, r6
 801326c:	4628      	mov	r0, r5
 801326e:	47b8      	blx	r7
 8013270:	3001      	adds	r0, #1
 8013272:	d1e9      	bne.n	8013248 <_printf_float+0x358>
 8013274:	e699      	b.n	8012faa <_printf_float+0xba>
 8013276:	2301      	movs	r3, #1
 8013278:	464a      	mov	r2, r9
 801327a:	4631      	mov	r1, r6
 801327c:	4628      	mov	r0, r5
 801327e:	47b8      	blx	r7
 8013280:	3001      	adds	r0, #1
 8013282:	f43f ae92 	beq.w	8012faa <_printf_float+0xba>
 8013286:	f108 0801 	add.w	r8, r8, #1
 801328a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801328e:	1a9b      	subs	r3, r3, r2
 8013290:	eba3 030a 	sub.w	r3, r3, sl
 8013294:	4543      	cmp	r3, r8
 8013296:	dcee      	bgt.n	8013276 <_printf_float+0x386>
 8013298:	e74a      	b.n	8013130 <_printf_float+0x240>
 801329a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801329c:	2a01      	cmp	r2, #1
 801329e:	dc01      	bgt.n	80132a4 <_printf_float+0x3b4>
 80132a0:	07db      	lsls	r3, r3, #31
 80132a2:	d53a      	bpl.n	801331a <_printf_float+0x42a>
 80132a4:	2301      	movs	r3, #1
 80132a6:	4642      	mov	r2, r8
 80132a8:	4631      	mov	r1, r6
 80132aa:	4628      	mov	r0, r5
 80132ac:	47b8      	blx	r7
 80132ae:	3001      	adds	r0, #1
 80132b0:	f43f ae7b 	beq.w	8012faa <_printf_float+0xba>
 80132b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80132b8:	4631      	mov	r1, r6
 80132ba:	4628      	mov	r0, r5
 80132bc:	47b8      	blx	r7
 80132be:	3001      	adds	r0, #1
 80132c0:	f108 0801 	add.w	r8, r8, #1
 80132c4:	f43f ae71 	beq.w	8012faa <_printf_float+0xba>
 80132c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132ca:	2200      	movs	r2, #0
 80132cc:	f103 3aff 	add.w	sl, r3, #4294967295
 80132d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80132d4:	2300      	movs	r3, #0
 80132d6:	f7ed fc0f 	bl	8000af8 <__aeabi_dcmpeq>
 80132da:	b9c8      	cbnz	r0, 8013310 <_printf_float+0x420>
 80132dc:	4653      	mov	r3, sl
 80132de:	4642      	mov	r2, r8
 80132e0:	4631      	mov	r1, r6
 80132e2:	4628      	mov	r0, r5
 80132e4:	47b8      	blx	r7
 80132e6:	3001      	adds	r0, #1
 80132e8:	d10e      	bne.n	8013308 <_printf_float+0x418>
 80132ea:	e65e      	b.n	8012faa <_printf_float+0xba>
 80132ec:	2301      	movs	r3, #1
 80132ee:	4652      	mov	r2, sl
 80132f0:	4631      	mov	r1, r6
 80132f2:	4628      	mov	r0, r5
 80132f4:	47b8      	blx	r7
 80132f6:	3001      	adds	r0, #1
 80132f8:	f43f ae57 	beq.w	8012faa <_printf_float+0xba>
 80132fc:	f108 0801 	add.w	r8, r8, #1
 8013300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013302:	3b01      	subs	r3, #1
 8013304:	4543      	cmp	r3, r8
 8013306:	dcf1      	bgt.n	80132ec <_printf_float+0x3fc>
 8013308:	464b      	mov	r3, r9
 801330a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801330e:	e6de      	b.n	80130ce <_printf_float+0x1de>
 8013310:	f04f 0800 	mov.w	r8, #0
 8013314:	f104 0a1a 	add.w	sl, r4, #26
 8013318:	e7f2      	b.n	8013300 <_printf_float+0x410>
 801331a:	2301      	movs	r3, #1
 801331c:	e7df      	b.n	80132de <_printf_float+0x3ee>
 801331e:	2301      	movs	r3, #1
 8013320:	464a      	mov	r2, r9
 8013322:	4631      	mov	r1, r6
 8013324:	4628      	mov	r0, r5
 8013326:	47b8      	blx	r7
 8013328:	3001      	adds	r0, #1
 801332a:	f43f ae3e 	beq.w	8012faa <_printf_float+0xba>
 801332e:	f108 0801 	add.w	r8, r8, #1
 8013332:	68e3      	ldr	r3, [r4, #12]
 8013334:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013336:	1a9b      	subs	r3, r3, r2
 8013338:	4543      	cmp	r3, r8
 801333a:	dcf0      	bgt.n	801331e <_printf_float+0x42e>
 801333c:	e6fc      	b.n	8013138 <_printf_float+0x248>
 801333e:	f04f 0800 	mov.w	r8, #0
 8013342:	f104 0919 	add.w	r9, r4, #25
 8013346:	e7f4      	b.n	8013332 <_printf_float+0x442>
 8013348:	2900      	cmp	r1, #0
 801334a:	f43f ae8b 	beq.w	8013064 <_printf_float+0x174>
 801334e:	2300      	movs	r3, #0
 8013350:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013354:	ab09      	add	r3, sp, #36	; 0x24
 8013356:	9300      	str	r3, [sp, #0]
 8013358:	ec49 8b10 	vmov	d0, r8, r9
 801335c:	6022      	str	r2, [r4, #0]
 801335e:	f8cd a004 	str.w	sl, [sp, #4]
 8013362:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013366:	4628      	mov	r0, r5
 8013368:	f7ff fd2e 	bl	8012dc8 <__cvt>
 801336c:	4680      	mov	r8, r0
 801336e:	e648      	b.n	8013002 <_printf_float+0x112>

08013370 <_printf_common>:
 8013370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013374:	4691      	mov	r9, r2
 8013376:	461f      	mov	r7, r3
 8013378:	688a      	ldr	r2, [r1, #8]
 801337a:	690b      	ldr	r3, [r1, #16]
 801337c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013380:	4293      	cmp	r3, r2
 8013382:	bfb8      	it	lt
 8013384:	4613      	movlt	r3, r2
 8013386:	f8c9 3000 	str.w	r3, [r9]
 801338a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801338e:	4606      	mov	r6, r0
 8013390:	460c      	mov	r4, r1
 8013392:	b112      	cbz	r2, 801339a <_printf_common+0x2a>
 8013394:	3301      	adds	r3, #1
 8013396:	f8c9 3000 	str.w	r3, [r9]
 801339a:	6823      	ldr	r3, [r4, #0]
 801339c:	0699      	lsls	r1, r3, #26
 801339e:	bf42      	ittt	mi
 80133a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80133a4:	3302      	addmi	r3, #2
 80133a6:	f8c9 3000 	strmi.w	r3, [r9]
 80133aa:	6825      	ldr	r5, [r4, #0]
 80133ac:	f015 0506 	ands.w	r5, r5, #6
 80133b0:	d107      	bne.n	80133c2 <_printf_common+0x52>
 80133b2:	f104 0a19 	add.w	sl, r4, #25
 80133b6:	68e3      	ldr	r3, [r4, #12]
 80133b8:	f8d9 2000 	ldr.w	r2, [r9]
 80133bc:	1a9b      	subs	r3, r3, r2
 80133be:	42ab      	cmp	r3, r5
 80133c0:	dc28      	bgt.n	8013414 <_printf_common+0xa4>
 80133c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80133c6:	6822      	ldr	r2, [r4, #0]
 80133c8:	3300      	adds	r3, #0
 80133ca:	bf18      	it	ne
 80133cc:	2301      	movne	r3, #1
 80133ce:	0692      	lsls	r2, r2, #26
 80133d0:	d42d      	bmi.n	801342e <_printf_common+0xbe>
 80133d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80133d6:	4639      	mov	r1, r7
 80133d8:	4630      	mov	r0, r6
 80133da:	47c0      	blx	r8
 80133dc:	3001      	adds	r0, #1
 80133de:	d020      	beq.n	8013422 <_printf_common+0xb2>
 80133e0:	6823      	ldr	r3, [r4, #0]
 80133e2:	68e5      	ldr	r5, [r4, #12]
 80133e4:	f8d9 2000 	ldr.w	r2, [r9]
 80133e8:	f003 0306 	and.w	r3, r3, #6
 80133ec:	2b04      	cmp	r3, #4
 80133ee:	bf08      	it	eq
 80133f0:	1aad      	subeq	r5, r5, r2
 80133f2:	68a3      	ldr	r3, [r4, #8]
 80133f4:	6922      	ldr	r2, [r4, #16]
 80133f6:	bf0c      	ite	eq
 80133f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80133fc:	2500      	movne	r5, #0
 80133fe:	4293      	cmp	r3, r2
 8013400:	bfc4      	itt	gt
 8013402:	1a9b      	subgt	r3, r3, r2
 8013404:	18ed      	addgt	r5, r5, r3
 8013406:	f04f 0900 	mov.w	r9, #0
 801340a:	341a      	adds	r4, #26
 801340c:	454d      	cmp	r5, r9
 801340e:	d11a      	bne.n	8013446 <_printf_common+0xd6>
 8013410:	2000      	movs	r0, #0
 8013412:	e008      	b.n	8013426 <_printf_common+0xb6>
 8013414:	2301      	movs	r3, #1
 8013416:	4652      	mov	r2, sl
 8013418:	4639      	mov	r1, r7
 801341a:	4630      	mov	r0, r6
 801341c:	47c0      	blx	r8
 801341e:	3001      	adds	r0, #1
 8013420:	d103      	bne.n	801342a <_printf_common+0xba>
 8013422:	f04f 30ff 	mov.w	r0, #4294967295
 8013426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801342a:	3501      	adds	r5, #1
 801342c:	e7c3      	b.n	80133b6 <_printf_common+0x46>
 801342e:	18e1      	adds	r1, r4, r3
 8013430:	1c5a      	adds	r2, r3, #1
 8013432:	2030      	movs	r0, #48	; 0x30
 8013434:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013438:	4422      	add	r2, r4
 801343a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801343e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013442:	3302      	adds	r3, #2
 8013444:	e7c5      	b.n	80133d2 <_printf_common+0x62>
 8013446:	2301      	movs	r3, #1
 8013448:	4622      	mov	r2, r4
 801344a:	4639      	mov	r1, r7
 801344c:	4630      	mov	r0, r6
 801344e:	47c0      	blx	r8
 8013450:	3001      	adds	r0, #1
 8013452:	d0e6      	beq.n	8013422 <_printf_common+0xb2>
 8013454:	f109 0901 	add.w	r9, r9, #1
 8013458:	e7d8      	b.n	801340c <_printf_common+0x9c>
	...

0801345c <_printf_i>:
 801345c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013460:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013464:	460c      	mov	r4, r1
 8013466:	7e09      	ldrb	r1, [r1, #24]
 8013468:	b085      	sub	sp, #20
 801346a:	296e      	cmp	r1, #110	; 0x6e
 801346c:	4617      	mov	r7, r2
 801346e:	4606      	mov	r6, r0
 8013470:	4698      	mov	r8, r3
 8013472:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013474:	f000 80b3 	beq.w	80135de <_printf_i+0x182>
 8013478:	d822      	bhi.n	80134c0 <_printf_i+0x64>
 801347a:	2963      	cmp	r1, #99	; 0x63
 801347c:	d036      	beq.n	80134ec <_printf_i+0x90>
 801347e:	d80a      	bhi.n	8013496 <_printf_i+0x3a>
 8013480:	2900      	cmp	r1, #0
 8013482:	f000 80b9 	beq.w	80135f8 <_printf_i+0x19c>
 8013486:	2958      	cmp	r1, #88	; 0x58
 8013488:	f000 8083 	beq.w	8013592 <_printf_i+0x136>
 801348c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013490:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013494:	e032      	b.n	80134fc <_printf_i+0xa0>
 8013496:	2964      	cmp	r1, #100	; 0x64
 8013498:	d001      	beq.n	801349e <_printf_i+0x42>
 801349a:	2969      	cmp	r1, #105	; 0x69
 801349c:	d1f6      	bne.n	801348c <_printf_i+0x30>
 801349e:	6820      	ldr	r0, [r4, #0]
 80134a0:	6813      	ldr	r3, [r2, #0]
 80134a2:	0605      	lsls	r5, r0, #24
 80134a4:	f103 0104 	add.w	r1, r3, #4
 80134a8:	d52a      	bpl.n	8013500 <_printf_i+0xa4>
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	6011      	str	r1, [r2, #0]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	da03      	bge.n	80134ba <_printf_i+0x5e>
 80134b2:	222d      	movs	r2, #45	; 0x2d
 80134b4:	425b      	negs	r3, r3
 80134b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80134ba:	486f      	ldr	r0, [pc, #444]	; (8013678 <_printf_i+0x21c>)
 80134bc:	220a      	movs	r2, #10
 80134be:	e039      	b.n	8013534 <_printf_i+0xd8>
 80134c0:	2973      	cmp	r1, #115	; 0x73
 80134c2:	f000 809d 	beq.w	8013600 <_printf_i+0x1a4>
 80134c6:	d808      	bhi.n	80134da <_printf_i+0x7e>
 80134c8:	296f      	cmp	r1, #111	; 0x6f
 80134ca:	d020      	beq.n	801350e <_printf_i+0xb2>
 80134cc:	2970      	cmp	r1, #112	; 0x70
 80134ce:	d1dd      	bne.n	801348c <_printf_i+0x30>
 80134d0:	6823      	ldr	r3, [r4, #0]
 80134d2:	f043 0320 	orr.w	r3, r3, #32
 80134d6:	6023      	str	r3, [r4, #0]
 80134d8:	e003      	b.n	80134e2 <_printf_i+0x86>
 80134da:	2975      	cmp	r1, #117	; 0x75
 80134dc:	d017      	beq.n	801350e <_printf_i+0xb2>
 80134de:	2978      	cmp	r1, #120	; 0x78
 80134e0:	d1d4      	bne.n	801348c <_printf_i+0x30>
 80134e2:	2378      	movs	r3, #120	; 0x78
 80134e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80134e8:	4864      	ldr	r0, [pc, #400]	; (801367c <_printf_i+0x220>)
 80134ea:	e055      	b.n	8013598 <_printf_i+0x13c>
 80134ec:	6813      	ldr	r3, [r2, #0]
 80134ee:	1d19      	adds	r1, r3, #4
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	6011      	str	r1, [r2, #0]
 80134f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80134f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80134fc:	2301      	movs	r3, #1
 80134fe:	e08c      	b.n	801361a <_printf_i+0x1be>
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	6011      	str	r1, [r2, #0]
 8013504:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013508:	bf18      	it	ne
 801350a:	b21b      	sxthne	r3, r3
 801350c:	e7cf      	b.n	80134ae <_printf_i+0x52>
 801350e:	6813      	ldr	r3, [r2, #0]
 8013510:	6825      	ldr	r5, [r4, #0]
 8013512:	1d18      	adds	r0, r3, #4
 8013514:	6010      	str	r0, [r2, #0]
 8013516:	0628      	lsls	r0, r5, #24
 8013518:	d501      	bpl.n	801351e <_printf_i+0xc2>
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	e002      	b.n	8013524 <_printf_i+0xc8>
 801351e:	0668      	lsls	r0, r5, #25
 8013520:	d5fb      	bpl.n	801351a <_printf_i+0xbe>
 8013522:	881b      	ldrh	r3, [r3, #0]
 8013524:	4854      	ldr	r0, [pc, #336]	; (8013678 <_printf_i+0x21c>)
 8013526:	296f      	cmp	r1, #111	; 0x6f
 8013528:	bf14      	ite	ne
 801352a:	220a      	movne	r2, #10
 801352c:	2208      	moveq	r2, #8
 801352e:	2100      	movs	r1, #0
 8013530:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013534:	6865      	ldr	r5, [r4, #4]
 8013536:	60a5      	str	r5, [r4, #8]
 8013538:	2d00      	cmp	r5, #0
 801353a:	f2c0 8095 	blt.w	8013668 <_printf_i+0x20c>
 801353e:	6821      	ldr	r1, [r4, #0]
 8013540:	f021 0104 	bic.w	r1, r1, #4
 8013544:	6021      	str	r1, [r4, #0]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d13d      	bne.n	80135c6 <_printf_i+0x16a>
 801354a:	2d00      	cmp	r5, #0
 801354c:	f040 808e 	bne.w	801366c <_printf_i+0x210>
 8013550:	4665      	mov	r5, ip
 8013552:	2a08      	cmp	r2, #8
 8013554:	d10b      	bne.n	801356e <_printf_i+0x112>
 8013556:	6823      	ldr	r3, [r4, #0]
 8013558:	07db      	lsls	r3, r3, #31
 801355a:	d508      	bpl.n	801356e <_printf_i+0x112>
 801355c:	6923      	ldr	r3, [r4, #16]
 801355e:	6862      	ldr	r2, [r4, #4]
 8013560:	429a      	cmp	r2, r3
 8013562:	bfde      	ittt	le
 8013564:	2330      	movle	r3, #48	; 0x30
 8013566:	f805 3c01 	strble.w	r3, [r5, #-1]
 801356a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801356e:	ebac 0305 	sub.w	r3, ip, r5
 8013572:	6123      	str	r3, [r4, #16]
 8013574:	f8cd 8000 	str.w	r8, [sp]
 8013578:	463b      	mov	r3, r7
 801357a:	aa03      	add	r2, sp, #12
 801357c:	4621      	mov	r1, r4
 801357e:	4630      	mov	r0, r6
 8013580:	f7ff fef6 	bl	8013370 <_printf_common>
 8013584:	3001      	adds	r0, #1
 8013586:	d14d      	bne.n	8013624 <_printf_i+0x1c8>
 8013588:	f04f 30ff 	mov.w	r0, #4294967295
 801358c:	b005      	add	sp, #20
 801358e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013592:	4839      	ldr	r0, [pc, #228]	; (8013678 <_printf_i+0x21c>)
 8013594:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013598:	6813      	ldr	r3, [r2, #0]
 801359a:	6821      	ldr	r1, [r4, #0]
 801359c:	1d1d      	adds	r5, r3, #4
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	6015      	str	r5, [r2, #0]
 80135a2:	060a      	lsls	r2, r1, #24
 80135a4:	d50b      	bpl.n	80135be <_printf_i+0x162>
 80135a6:	07ca      	lsls	r2, r1, #31
 80135a8:	bf44      	itt	mi
 80135aa:	f041 0120 	orrmi.w	r1, r1, #32
 80135ae:	6021      	strmi	r1, [r4, #0]
 80135b0:	b91b      	cbnz	r3, 80135ba <_printf_i+0x15e>
 80135b2:	6822      	ldr	r2, [r4, #0]
 80135b4:	f022 0220 	bic.w	r2, r2, #32
 80135b8:	6022      	str	r2, [r4, #0]
 80135ba:	2210      	movs	r2, #16
 80135bc:	e7b7      	b.n	801352e <_printf_i+0xd2>
 80135be:	064d      	lsls	r5, r1, #25
 80135c0:	bf48      	it	mi
 80135c2:	b29b      	uxthmi	r3, r3
 80135c4:	e7ef      	b.n	80135a6 <_printf_i+0x14a>
 80135c6:	4665      	mov	r5, ip
 80135c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80135cc:	fb02 3311 	mls	r3, r2, r1, r3
 80135d0:	5cc3      	ldrb	r3, [r0, r3]
 80135d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80135d6:	460b      	mov	r3, r1
 80135d8:	2900      	cmp	r1, #0
 80135da:	d1f5      	bne.n	80135c8 <_printf_i+0x16c>
 80135dc:	e7b9      	b.n	8013552 <_printf_i+0xf6>
 80135de:	6813      	ldr	r3, [r2, #0]
 80135e0:	6825      	ldr	r5, [r4, #0]
 80135e2:	6961      	ldr	r1, [r4, #20]
 80135e4:	1d18      	adds	r0, r3, #4
 80135e6:	6010      	str	r0, [r2, #0]
 80135e8:	0628      	lsls	r0, r5, #24
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	d501      	bpl.n	80135f2 <_printf_i+0x196>
 80135ee:	6019      	str	r1, [r3, #0]
 80135f0:	e002      	b.n	80135f8 <_printf_i+0x19c>
 80135f2:	066a      	lsls	r2, r5, #25
 80135f4:	d5fb      	bpl.n	80135ee <_printf_i+0x192>
 80135f6:	8019      	strh	r1, [r3, #0]
 80135f8:	2300      	movs	r3, #0
 80135fa:	6123      	str	r3, [r4, #16]
 80135fc:	4665      	mov	r5, ip
 80135fe:	e7b9      	b.n	8013574 <_printf_i+0x118>
 8013600:	6813      	ldr	r3, [r2, #0]
 8013602:	1d19      	adds	r1, r3, #4
 8013604:	6011      	str	r1, [r2, #0]
 8013606:	681d      	ldr	r5, [r3, #0]
 8013608:	6862      	ldr	r2, [r4, #4]
 801360a:	2100      	movs	r1, #0
 801360c:	4628      	mov	r0, r5
 801360e:	f7ec fdff 	bl	8000210 <memchr>
 8013612:	b108      	cbz	r0, 8013618 <_printf_i+0x1bc>
 8013614:	1b40      	subs	r0, r0, r5
 8013616:	6060      	str	r0, [r4, #4]
 8013618:	6863      	ldr	r3, [r4, #4]
 801361a:	6123      	str	r3, [r4, #16]
 801361c:	2300      	movs	r3, #0
 801361e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013622:	e7a7      	b.n	8013574 <_printf_i+0x118>
 8013624:	6923      	ldr	r3, [r4, #16]
 8013626:	462a      	mov	r2, r5
 8013628:	4639      	mov	r1, r7
 801362a:	4630      	mov	r0, r6
 801362c:	47c0      	blx	r8
 801362e:	3001      	adds	r0, #1
 8013630:	d0aa      	beq.n	8013588 <_printf_i+0x12c>
 8013632:	6823      	ldr	r3, [r4, #0]
 8013634:	079b      	lsls	r3, r3, #30
 8013636:	d413      	bmi.n	8013660 <_printf_i+0x204>
 8013638:	68e0      	ldr	r0, [r4, #12]
 801363a:	9b03      	ldr	r3, [sp, #12]
 801363c:	4298      	cmp	r0, r3
 801363e:	bfb8      	it	lt
 8013640:	4618      	movlt	r0, r3
 8013642:	e7a3      	b.n	801358c <_printf_i+0x130>
 8013644:	2301      	movs	r3, #1
 8013646:	464a      	mov	r2, r9
 8013648:	4639      	mov	r1, r7
 801364a:	4630      	mov	r0, r6
 801364c:	47c0      	blx	r8
 801364e:	3001      	adds	r0, #1
 8013650:	d09a      	beq.n	8013588 <_printf_i+0x12c>
 8013652:	3501      	adds	r5, #1
 8013654:	68e3      	ldr	r3, [r4, #12]
 8013656:	9a03      	ldr	r2, [sp, #12]
 8013658:	1a9b      	subs	r3, r3, r2
 801365a:	42ab      	cmp	r3, r5
 801365c:	dcf2      	bgt.n	8013644 <_printf_i+0x1e8>
 801365e:	e7eb      	b.n	8013638 <_printf_i+0x1dc>
 8013660:	2500      	movs	r5, #0
 8013662:	f104 0919 	add.w	r9, r4, #25
 8013666:	e7f5      	b.n	8013654 <_printf_i+0x1f8>
 8013668:	2b00      	cmp	r3, #0
 801366a:	d1ac      	bne.n	80135c6 <_printf_i+0x16a>
 801366c:	7803      	ldrb	r3, [r0, #0]
 801366e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013672:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013676:	e76c      	b.n	8013552 <_printf_i+0xf6>
 8013678:	080183fc 	.word	0x080183fc
 801367c:	0801840d 	.word	0x0801840d

08013680 <_scanf_float>:
 8013680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013684:	469a      	mov	sl, r3
 8013686:	688b      	ldr	r3, [r1, #8]
 8013688:	4616      	mov	r6, r2
 801368a:	1e5a      	subs	r2, r3, #1
 801368c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013690:	b087      	sub	sp, #28
 8013692:	bf83      	ittte	hi
 8013694:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013698:	189b      	addhi	r3, r3, r2
 801369a:	9301      	strhi	r3, [sp, #4]
 801369c:	2300      	movls	r3, #0
 801369e:	bf86      	itte	hi
 80136a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80136a4:	608b      	strhi	r3, [r1, #8]
 80136a6:	9301      	strls	r3, [sp, #4]
 80136a8:	680b      	ldr	r3, [r1, #0]
 80136aa:	4688      	mov	r8, r1
 80136ac:	f04f 0b00 	mov.w	fp, #0
 80136b0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80136b4:	f848 3b1c 	str.w	r3, [r8], #28
 80136b8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80136bc:	4607      	mov	r7, r0
 80136be:	460c      	mov	r4, r1
 80136c0:	4645      	mov	r5, r8
 80136c2:	465a      	mov	r2, fp
 80136c4:	46d9      	mov	r9, fp
 80136c6:	f8cd b008 	str.w	fp, [sp, #8]
 80136ca:	68a1      	ldr	r1, [r4, #8]
 80136cc:	b181      	cbz	r1, 80136f0 <_scanf_float+0x70>
 80136ce:	6833      	ldr	r3, [r6, #0]
 80136d0:	781b      	ldrb	r3, [r3, #0]
 80136d2:	2b49      	cmp	r3, #73	; 0x49
 80136d4:	d071      	beq.n	80137ba <_scanf_float+0x13a>
 80136d6:	d84d      	bhi.n	8013774 <_scanf_float+0xf4>
 80136d8:	2b39      	cmp	r3, #57	; 0x39
 80136da:	d840      	bhi.n	801375e <_scanf_float+0xde>
 80136dc:	2b31      	cmp	r3, #49	; 0x31
 80136de:	f080 8088 	bcs.w	80137f2 <_scanf_float+0x172>
 80136e2:	2b2d      	cmp	r3, #45	; 0x2d
 80136e4:	f000 8090 	beq.w	8013808 <_scanf_float+0x188>
 80136e8:	d815      	bhi.n	8013716 <_scanf_float+0x96>
 80136ea:	2b2b      	cmp	r3, #43	; 0x2b
 80136ec:	f000 808c 	beq.w	8013808 <_scanf_float+0x188>
 80136f0:	f1b9 0f00 	cmp.w	r9, #0
 80136f4:	d003      	beq.n	80136fe <_scanf_float+0x7e>
 80136f6:	6823      	ldr	r3, [r4, #0]
 80136f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80136fc:	6023      	str	r3, [r4, #0]
 80136fe:	3a01      	subs	r2, #1
 8013700:	2a01      	cmp	r2, #1
 8013702:	f200 80ea 	bhi.w	80138da <_scanf_float+0x25a>
 8013706:	4545      	cmp	r5, r8
 8013708:	f200 80dc 	bhi.w	80138c4 <_scanf_float+0x244>
 801370c:	2601      	movs	r6, #1
 801370e:	4630      	mov	r0, r6
 8013710:	b007      	add	sp, #28
 8013712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013716:	2b2e      	cmp	r3, #46	; 0x2e
 8013718:	f000 809f 	beq.w	801385a <_scanf_float+0x1da>
 801371c:	2b30      	cmp	r3, #48	; 0x30
 801371e:	d1e7      	bne.n	80136f0 <_scanf_float+0x70>
 8013720:	6820      	ldr	r0, [r4, #0]
 8013722:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013726:	d064      	beq.n	80137f2 <_scanf_float+0x172>
 8013728:	9b01      	ldr	r3, [sp, #4]
 801372a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801372e:	6020      	str	r0, [r4, #0]
 8013730:	f109 0901 	add.w	r9, r9, #1
 8013734:	b11b      	cbz	r3, 801373e <_scanf_float+0xbe>
 8013736:	3b01      	subs	r3, #1
 8013738:	3101      	adds	r1, #1
 801373a:	9301      	str	r3, [sp, #4]
 801373c:	60a1      	str	r1, [r4, #8]
 801373e:	68a3      	ldr	r3, [r4, #8]
 8013740:	3b01      	subs	r3, #1
 8013742:	60a3      	str	r3, [r4, #8]
 8013744:	6923      	ldr	r3, [r4, #16]
 8013746:	3301      	adds	r3, #1
 8013748:	6123      	str	r3, [r4, #16]
 801374a:	6873      	ldr	r3, [r6, #4]
 801374c:	3b01      	subs	r3, #1
 801374e:	2b00      	cmp	r3, #0
 8013750:	6073      	str	r3, [r6, #4]
 8013752:	f340 80ac 	ble.w	80138ae <_scanf_float+0x22e>
 8013756:	6833      	ldr	r3, [r6, #0]
 8013758:	3301      	adds	r3, #1
 801375a:	6033      	str	r3, [r6, #0]
 801375c:	e7b5      	b.n	80136ca <_scanf_float+0x4a>
 801375e:	2b45      	cmp	r3, #69	; 0x45
 8013760:	f000 8085 	beq.w	801386e <_scanf_float+0x1ee>
 8013764:	2b46      	cmp	r3, #70	; 0x46
 8013766:	d06a      	beq.n	801383e <_scanf_float+0x1be>
 8013768:	2b41      	cmp	r3, #65	; 0x41
 801376a:	d1c1      	bne.n	80136f0 <_scanf_float+0x70>
 801376c:	2a01      	cmp	r2, #1
 801376e:	d1bf      	bne.n	80136f0 <_scanf_float+0x70>
 8013770:	2202      	movs	r2, #2
 8013772:	e046      	b.n	8013802 <_scanf_float+0x182>
 8013774:	2b65      	cmp	r3, #101	; 0x65
 8013776:	d07a      	beq.n	801386e <_scanf_float+0x1ee>
 8013778:	d818      	bhi.n	80137ac <_scanf_float+0x12c>
 801377a:	2b54      	cmp	r3, #84	; 0x54
 801377c:	d066      	beq.n	801384c <_scanf_float+0x1cc>
 801377e:	d811      	bhi.n	80137a4 <_scanf_float+0x124>
 8013780:	2b4e      	cmp	r3, #78	; 0x4e
 8013782:	d1b5      	bne.n	80136f0 <_scanf_float+0x70>
 8013784:	2a00      	cmp	r2, #0
 8013786:	d146      	bne.n	8013816 <_scanf_float+0x196>
 8013788:	f1b9 0f00 	cmp.w	r9, #0
 801378c:	d145      	bne.n	801381a <_scanf_float+0x19a>
 801378e:	6821      	ldr	r1, [r4, #0]
 8013790:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013794:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013798:	d13f      	bne.n	801381a <_scanf_float+0x19a>
 801379a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801379e:	6021      	str	r1, [r4, #0]
 80137a0:	2201      	movs	r2, #1
 80137a2:	e02e      	b.n	8013802 <_scanf_float+0x182>
 80137a4:	2b59      	cmp	r3, #89	; 0x59
 80137a6:	d01e      	beq.n	80137e6 <_scanf_float+0x166>
 80137a8:	2b61      	cmp	r3, #97	; 0x61
 80137aa:	e7de      	b.n	801376a <_scanf_float+0xea>
 80137ac:	2b6e      	cmp	r3, #110	; 0x6e
 80137ae:	d0e9      	beq.n	8013784 <_scanf_float+0x104>
 80137b0:	d815      	bhi.n	80137de <_scanf_float+0x15e>
 80137b2:	2b66      	cmp	r3, #102	; 0x66
 80137b4:	d043      	beq.n	801383e <_scanf_float+0x1be>
 80137b6:	2b69      	cmp	r3, #105	; 0x69
 80137b8:	d19a      	bne.n	80136f0 <_scanf_float+0x70>
 80137ba:	f1bb 0f00 	cmp.w	fp, #0
 80137be:	d138      	bne.n	8013832 <_scanf_float+0x1b2>
 80137c0:	f1b9 0f00 	cmp.w	r9, #0
 80137c4:	d197      	bne.n	80136f6 <_scanf_float+0x76>
 80137c6:	6821      	ldr	r1, [r4, #0]
 80137c8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80137cc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80137d0:	d195      	bne.n	80136fe <_scanf_float+0x7e>
 80137d2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80137d6:	6021      	str	r1, [r4, #0]
 80137d8:	f04f 0b01 	mov.w	fp, #1
 80137dc:	e011      	b.n	8013802 <_scanf_float+0x182>
 80137de:	2b74      	cmp	r3, #116	; 0x74
 80137e0:	d034      	beq.n	801384c <_scanf_float+0x1cc>
 80137e2:	2b79      	cmp	r3, #121	; 0x79
 80137e4:	d184      	bne.n	80136f0 <_scanf_float+0x70>
 80137e6:	f1bb 0f07 	cmp.w	fp, #7
 80137ea:	d181      	bne.n	80136f0 <_scanf_float+0x70>
 80137ec:	f04f 0b08 	mov.w	fp, #8
 80137f0:	e007      	b.n	8013802 <_scanf_float+0x182>
 80137f2:	eb12 0f0b 	cmn.w	r2, fp
 80137f6:	f47f af7b 	bne.w	80136f0 <_scanf_float+0x70>
 80137fa:	6821      	ldr	r1, [r4, #0]
 80137fc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013800:	6021      	str	r1, [r4, #0]
 8013802:	702b      	strb	r3, [r5, #0]
 8013804:	3501      	adds	r5, #1
 8013806:	e79a      	b.n	801373e <_scanf_float+0xbe>
 8013808:	6821      	ldr	r1, [r4, #0]
 801380a:	0608      	lsls	r0, r1, #24
 801380c:	f57f af70 	bpl.w	80136f0 <_scanf_float+0x70>
 8013810:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013814:	e7f4      	b.n	8013800 <_scanf_float+0x180>
 8013816:	2a02      	cmp	r2, #2
 8013818:	d047      	beq.n	80138aa <_scanf_float+0x22a>
 801381a:	f1bb 0f01 	cmp.w	fp, #1
 801381e:	d003      	beq.n	8013828 <_scanf_float+0x1a8>
 8013820:	f1bb 0f04 	cmp.w	fp, #4
 8013824:	f47f af64 	bne.w	80136f0 <_scanf_float+0x70>
 8013828:	f10b 0b01 	add.w	fp, fp, #1
 801382c:	fa5f fb8b 	uxtb.w	fp, fp
 8013830:	e7e7      	b.n	8013802 <_scanf_float+0x182>
 8013832:	f1bb 0f03 	cmp.w	fp, #3
 8013836:	d0f7      	beq.n	8013828 <_scanf_float+0x1a8>
 8013838:	f1bb 0f05 	cmp.w	fp, #5
 801383c:	e7f2      	b.n	8013824 <_scanf_float+0x1a4>
 801383e:	f1bb 0f02 	cmp.w	fp, #2
 8013842:	f47f af55 	bne.w	80136f0 <_scanf_float+0x70>
 8013846:	f04f 0b03 	mov.w	fp, #3
 801384a:	e7da      	b.n	8013802 <_scanf_float+0x182>
 801384c:	f1bb 0f06 	cmp.w	fp, #6
 8013850:	f47f af4e 	bne.w	80136f0 <_scanf_float+0x70>
 8013854:	f04f 0b07 	mov.w	fp, #7
 8013858:	e7d3      	b.n	8013802 <_scanf_float+0x182>
 801385a:	6821      	ldr	r1, [r4, #0]
 801385c:	0588      	lsls	r0, r1, #22
 801385e:	f57f af47 	bpl.w	80136f0 <_scanf_float+0x70>
 8013862:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013866:	6021      	str	r1, [r4, #0]
 8013868:	f8cd 9008 	str.w	r9, [sp, #8]
 801386c:	e7c9      	b.n	8013802 <_scanf_float+0x182>
 801386e:	6821      	ldr	r1, [r4, #0]
 8013870:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013874:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013878:	d006      	beq.n	8013888 <_scanf_float+0x208>
 801387a:	0548      	lsls	r0, r1, #21
 801387c:	f57f af38 	bpl.w	80136f0 <_scanf_float+0x70>
 8013880:	f1b9 0f00 	cmp.w	r9, #0
 8013884:	f43f af3b 	beq.w	80136fe <_scanf_float+0x7e>
 8013888:	0588      	lsls	r0, r1, #22
 801388a:	bf58      	it	pl
 801388c:	9802      	ldrpl	r0, [sp, #8]
 801388e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013892:	bf58      	it	pl
 8013894:	eba9 0000 	subpl.w	r0, r9, r0
 8013898:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801389c:	bf58      	it	pl
 801389e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80138a2:	6021      	str	r1, [r4, #0]
 80138a4:	f04f 0900 	mov.w	r9, #0
 80138a8:	e7ab      	b.n	8013802 <_scanf_float+0x182>
 80138aa:	2203      	movs	r2, #3
 80138ac:	e7a9      	b.n	8013802 <_scanf_float+0x182>
 80138ae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80138b2:	9205      	str	r2, [sp, #20]
 80138b4:	4631      	mov	r1, r6
 80138b6:	4638      	mov	r0, r7
 80138b8:	4798      	blx	r3
 80138ba:	9a05      	ldr	r2, [sp, #20]
 80138bc:	2800      	cmp	r0, #0
 80138be:	f43f af04 	beq.w	80136ca <_scanf_float+0x4a>
 80138c2:	e715      	b.n	80136f0 <_scanf_float+0x70>
 80138c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80138c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80138cc:	4632      	mov	r2, r6
 80138ce:	4638      	mov	r0, r7
 80138d0:	4798      	blx	r3
 80138d2:	6923      	ldr	r3, [r4, #16]
 80138d4:	3b01      	subs	r3, #1
 80138d6:	6123      	str	r3, [r4, #16]
 80138d8:	e715      	b.n	8013706 <_scanf_float+0x86>
 80138da:	f10b 33ff 	add.w	r3, fp, #4294967295
 80138de:	2b06      	cmp	r3, #6
 80138e0:	d80a      	bhi.n	80138f8 <_scanf_float+0x278>
 80138e2:	f1bb 0f02 	cmp.w	fp, #2
 80138e6:	d968      	bls.n	80139ba <_scanf_float+0x33a>
 80138e8:	f1ab 0b03 	sub.w	fp, fp, #3
 80138ec:	fa5f fb8b 	uxtb.w	fp, fp
 80138f0:	eba5 0b0b 	sub.w	fp, r5, fp
 80138f4:	455d      	cmp	r5, fp
 80138f6:	d14b      	bne.n	8013990 <_scanf_float+0x310>
 80138f8:	6823      	ldr	r3, [r4, #0]
 80138fa:	05da      	lsls	r2, r3, #23
 80138fc:	d51f      	bpl.n	801393e <_scanf_float+0x2be>
 80138fe:	055b      	lsls	r3, r3, #21
 8013900:	d468      	bmi.n	80139d4 <_scanf_float+0x354>
 8013902:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013906:	6923      	ldr	r3, [r4, #16]
 8013908:	2965      	cmp	r1, #101	; 0x65
 801390a:	f103 33ff 	add.w	r3, r3, #4294967295
 801390e:	f105 3bff 	add.w	fp, r5, #4294967295
 8013912:	6123      	str	r3, [r4, #16]
 8013914:	d00d      	beq.n	8013932 <_scanf_float+0x2b2>
 8013916:	2945      	cmp	r1, #69	; 0x45
 8013918:	d00b      	beq.n	8013932 <_scanf_float+0x2b2>
 801391a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801391e:	4632      	mov	r2, r6
 8013920:	4638      	mov	r0, r7
 8013922:	4798      	blx	r3
 8013924:	6923      	ldr	r3, [r4, #16]
 8013926:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801392a:	3b01      	subs	r3, #1
 801392c:	f1a5 0b02 	sub.w	fp, r5, #2
 8013930:	6123      	str	r3, [r4, #16]
 8013932:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013936:	4632      	mov	r2, r6
 8013938:	4638      	mov	r0, r7
 801393a:	4798      	blx	r3
 801393c:	465d      	mov	r5, fp
 801393e:	6826      	ldr	r6, [r4, #0]
 8013940:	f016 0610 	ands.w	r6, r6, #16
 8013944:	d17a      	bne.n	8013a3c <_scanf_float+0x3bc>
 8013946:	702e      	strb	r6, [r5, #0]
 8013948:	6823      	ldr	r3, [r4, #0]
 801394a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801394e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013952:	d142      	bne.n	80139da <_scanf_float+0x35a>
 8013954:	9b02      	ldr	r3, [sp, #8]
 8013956:	eba9 0303 	sub.w	r3, r9, r3
 801395a:	425a      	negs	r2, r3
 801395c:	2b00      	cmp	r3, #0
 801395e:	d149      	bne.n	80139f4 <_scanf_float+0x374>
 8013960:	2200      	movs	r2, #0
 8013962:	4641      	mov	r1, r8
 8013964:	4638      	mov	r0, r7
 8013966:	f000 ffcb 	bl	8014900 <_strtod_r>
 801396a:	6825      	ldr	r5, [r4, #0]
 801396c:	f8da 3000 	ldr.w	r3, [sl]
 8013970:	f015 0f02 	tst.w	r5, #2
 8013974:	f103 0204 	add.w	r2, r3, #4
 8013978:	ec59 8b10 	vmov	r8, r9, d0
 801397c:	f8ca 2000 	str.w	r2, [sl]
 8013980:	d043      	beq.n	8013a0a <_scanf_float+0x38a>
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	e9c3 8900 	strd	r8, r9, [r3]
 8013988:	68e3      	ldr	r3, [r4, #12]
 801398a:	3301      	adds	r3, #1
 801398c:	60e3      	str	r3, [r4, #12]
 801398e:	e6be      	b.n	801370e <_scanf_float+0x8e>
 8013990:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013994:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013998:	4632      	mov	r2, r6
 801399a:	4638      	mov	r0, r7
 801399c:	4798      	blx	r3
 801399e:	6923      	ldr	r3, [r4, #16]
 80139a0:	3b01      	subs	r3, #1
 80139a2:	6123      	str	r3, [r4, #16]
 80139a4:	e7a6      	b.n	80138f4 <_scanf_float+0x274>
 80139a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80139aa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80139ae:	4632      	mov	r2, r6
 80139b0:	4638      	mov	r0, r7
 80139b2:	4798      	blx	r3
 80139b4:	6923      	ldr	r3, [r4, #16]
 80139b6:	3b01      	subs	r3, #1
 80139b8:	6123      	str	r3, [r4, #16]
 80139ba:	4545      	cmp	r5, r8
 80139bc:	d8f3      	bhi.n	80139a6 <_scanf_float+0x326>
 80139be:	e6a5      	b.n	801370c <_scanf_float+0x8c>
 80139c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80139c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80139c8:	4632      	mov	r2, r6
 80139ca:	4638      	mov	r0, r7
 80139cc:	4798      	blx	r3
 80139ce:	6923      	ldr	r3, [r4, #16]
 80139d0:	3b01      	subs	r3, #1
 80139d2:	6123      	str	r3, [r4, #16]
 80139d4:	4545      	cmp	r5, r8
 80139d6:	d8f3      	bhi.n	80139c0 <_scanf_float+0x340>
 80139d8:	e698      	b.n	801370c <_scanf_float+0x8c>
 80139da:	9b03      	ldr	r3, [sp, #12]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d0bf      	beq.n	8013960 <_scanf_float+0x2e0>
 80139e0:	9904      	ldr	r1, [sp, #16]
 80139e2:	230a      	movs	r3, #10
 80139e4:	4632      	mov	r2, r6
 80139e6:	3101      	adds	r1, #1
 80139e8:	4638      	mov	r0, r7
 80139ea:	f001 f815 	bl	8014a18 <_strtol_r>
 80139ee:	9b03      	ldr	r3, [sp, #12]
 80139f0:	9d04      	ldr	r5, [sp, #16]
 80139f2:	1ac2      	subs	r2, r0, r3
 80139f4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80139f8:	429d      	cmp	r5, r3
 80139fa:	bf28      	it	cs
 80139fc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8013a00:	490f      	ldr	r1, [pc, #60]	; (8013a40 <_scanf_float+0x3c0>)
 8013a02:	4628      	mov	r0, r5
 8013a04:	f000 f8d4 	bl	8013bb0 <siprintf>
 8013a08:	e7aa      	b.n	8013960 <_scanf_float+0x2e0>
 8013a0a:	f015 0504 	ands.w	r5, r5, #4
 8013a0e:	d1b8      	bne.n	8013982 <_scanf_float+0x302>
 8013a10:	681f      	ldr	r7, [r3, #0]
 8013a12:	ee10 2a10 	vmov	r2, s0
 8013a16:	464b      	mov	r3, r9
 8013a18:	ee10 0a10 	vmov	r0, s0
 8013a1c:	4649      	mov	r1, r9
 8013a1e:	f7ed f89d 	bl	8000b5c <__aeabi_dcmpun>
 8013a22:	b128      	cbz	r0, 8013a30 <_scanf_float+0x3b0>
 8013a24:	4628      	mov	r0, r5
 8013a26:	f000 f889 	bl	8013b3c <nanf>
 8013a2a:	ed87 0a00 	vstr	s0, [r7]
 8013a2e:	e7ab      	b.n	8013988 <_scanf_float+0x308>
 8013a30:	4640      	mov	r0, r8
 8013a32:	4649      	mov	r1, r9
 8013a34:	f7ed f8f0 	bl	8000c18 <__aeabi_d2f>
 8013a38:	6038      	str	r0, [r7, #0]
 8013a3a:	e7a5      	b.n	8013988 <_scanf_float+0x308>
 8013a3c:	2600      	movs	r6, #0
 8013a3e:	e666      	b.n	801370e <_scanf_float+0x8e>
 8013a40:	0801841e 	.word	0x0801841e

08013a44 <iprintf>:
 8013a44:	b40f      	push	{r0, r1, r2, r3}
 8013a46:	4b0a      	ldr	r3, [pc, #40]	; (8013a70 <iprintf+0x2c>)
 8013a48:	b513      	push	{r0, r1, r4, lr}
 8013a4a:	681c      	ldr	r4, [r3, #0]
 8013a4c:	b124      	cbz	r4, 8013a58 <iprintf+0x14>
 8013a4e:	69a3      	ldr	r3, [r4, #24]
 8013a50:	b913      	cbnz	r3, 8013a58 <iprintf+0x14>
 8013a52:	4620      	mov	r0, r4
 8013a54:	f002 f828 	bl	8015aa8 <__sinit>
 8013a58:	ab05      	add	r3, sp, #20
 8013a5a:	9a04      	ldr	r2, [sp, #16]
 8013a5c:	68a1      	ldr	r1, [r4, #8]
 8013a5e:	9301      	str	r3, [sp, #4]
 8013a60:	4620      	mov	r0, r4
 8013a62:	f003 fc69 	bl	8017338 <_vfiprintf_r>
 8013a66:	b002      	add	sp, #8
 8013a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a6c:	b004      	add	sp, #16
 8013a6e:	4770      	bx	lr
 8013a70:	2000000c 	.word	0x2000000c

08013a74 <_puts_r>:
 8013a74:	b570      	push	{r4, r5, r6, lr}
 8013a76:	460e      	mov	r6, r1
 8013a78:	4605      	mov	r5, r0
 8013a7a:	b118      	cbz	r0, 8013a84 <_puts_r+0x10>
 8013a7c:	6983      	ldr	r3, [r0, #24]
 8013a7e:	b90b      	cbnz	r3, 8013a84 <_puts_r+0x10>
 8013a80:	f002 f812 	bl	8015aa8 <__sinit>
 8013a84:	69ab      	ldr	r3, [r5, #24]
 8013a86:	68ac      	ldr	r4, [r5, #8]
 8013a88:	b913      	cbnz	r3, 8013a90 <_puts_r+0x1c>
 8013a8a:	4628      	mov	r0, r5
 8013a8c:	f002 f80c 	bl	8015aa8 <__sinit>
 8013a90:	4b23      	ldr	r3, [pc, #140]	; (8013b20 <_puts_r+0xac>)
 8013a92:	429c      	cmp	r4, r3
 8013a94:	d117      	bne.n	8013ac6 <_puts_r+0x52>
 8013a96:	686c      	ldr	r4, [r5, #4]
 8013a98:	89a3      	ldrh	r3, [r4, #12]
 8013a9a:	071b      	lsls	r3, r3, #28
 8013a9c:	d51d      	bpl.n	8013ada <_puts_r+0x66>
 8013a9e:	6923      	ldr	r3, [r4, #16]
 8013aa0:	b1db      	cbz	r3, 8013ada <_puts_r+0x66>
 8013aa2:	3e01      	subs	r6, #1
 8013aa4:	68a3      	ldr	r3, [r4, #8]
 8013aa6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013aaa:	3b01      	subs	r3, #1
 8013aac:	60a3      	str	r3, [r4, #8]
 8013aae:	b9e9      	cbnz	r1, 8013aec <_puts_r+0x78>
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	da2e      	bge.n	8013b12 <_puts_r+0x9e>
 8013ab4:	4622      	mov	r2, r4
 8013ab6:	210a      	movs	r1, #10
 8013ab8:	4628      	mov	r0, r5
 8013aba:	f000 ffdf 	bl	8014a7c <__swbuf_r>
 8013abe:	3001      	adds	r0, #1
 8013ac0:	d011      	beq.n	8013ae6 <_puts_r+0x72>
 8013ac2:	200a      	movs	r0, #10
 8013ac4:	e011      	b.n	8013aea <_puts_r+0x76>
 8013ac6:	4b17      	ldr	r3, [pc, #92]	; (8013b24 <_puts_r+0xb0>)
 8013ac8:	429c      	cmp	r4, r3
 8013aca:	d101      	bne.n	8013ad0 <_puts_r+0x5c>
 8013acc:	68ac      	ldr	r4, [r5, #8]
 8013ace:	e7e3      	b.n	8013a98 <_puts_r+0x24>
 8013ad0:	4b15      	ldr	r3, [pc, #84]	; (8013b28 <_puts_r+0xb4>)
 8013ad2:	429c      	cmp	r4, r3
 8013ad4:	bf08      	it	eq
 8013ad6:	68ec      	ldreq	r4, [r5, #12]
 8013ad8:	e7de      	b.n	8013a98 <_puts_r+0x24>
 8013ada:	4621      	mov	r1, r4
 8013adc:	4628      	mov	r0, r5
 8013ade:	f001 f831 	bl	8014b44 <__swsetup_r>
 8013ae2:	2800      	cmp	r0, #0
 8013ae4:	d0dd      	beq.n	8013aa2 <_puts_r+0x2e>
 8013ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8013aea:	bd70      	pop	{r4, r5, r6, pc}
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	da04      	bge.n	8013afa <_puts_r+0x86>
 8013af0:	69a2      	ldr	r2, [r4, #24]
 8013af2:	429a      	cmp	r2, r3
 8013af4:	dc06      	bgt.n	8013b04 <_puts_r+0x90>
 8013af6:	290a      	cmp	r1, #10
 8013af8:	d004      	beq.n	8013b04 <_puts_r+0x90>
 8013afa:	6823      	ldr	r3, [r4, #0]
 8013afc:	1c5a      	adds	r2, r3, #1
 8013afe:	6022      	str	r2, [r4, #0]
 8013b00:	7019      	strb	r1, [r3, #0]
 8013b02:	e7cf      	b.n	8013aa4 <_puts_r+0x30>
 8013b04:	4622      	mov	r2, r4
 8013b06:	4628      	mov	r0, r5
 8013b08:	f000 ffb8 	bl	8014a7c <__swbuf_r>
 8013b0c:	3001      	adds	r0, #1
 8013b0e:	d1c9      	bne.n	8013aa4 <_puts_r+0x30>
 8013b10:	e7e9      	b.n	8013ae6 <_puts_r+0x72>
 8013b12:	6823      	ldr	r3, [r4, #0]
 8013b14:	200a      	movs	r0, #10
 8013b16:	1c5a      	adds	r2, r3, #1
 8013b18:	6022      	str	r2, [r4, #0]
 8013b1a:	7018      	strb	r0, [r3, #0]
 8013b1c:	e7e5      	b.n	8013aea <_puts_r+0x76>
 8013b1e:	bf00      	nop
 8013b20:	080184a8 	.word	0x080184a8
 8013b24:	080184c8 	.word	0x080184c8
 8013b28:	08018488 	.word	0x08018488

08013b2c <puts>:
 8013b2c:	4b02      	ldr	r3, [pc, #8]	; (8013b38 <puts+0xc>)
 8013b2e:	4601      	mov	r1, r0
 8013b30:	6818      	ldr	r0, [r3, #0]
 8013b32:	f7ff bf9f 	b.w	8013a74 <_puts_r>
 8013b36:	bf00      	nop
 8013b38:	2000000c 	.word	0x2000000c

08013b3c <nanf>:
 8013b3c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013b44 <nanf+0x8>
 8013b40:	4770      	bx	lr
 8013b42:	bf00      	nop
 8013b44:	7fc00000 	.word	0x7fc00000

08013b48 <sniprintf>:
 8013b48:	b40c      	push	{r2, r3}
 8013b4a:	b530      	push	{r4, r5, lr}
 8013b4c:	4b17      	ldr	r3, [pc, #92]	; (8013bac <sniprintf+0x64>)
 8013b4e:	1e0c      	subs	r4, r1, #0
 8013b50:	b09d      	sub	sp, #116	; 0x74
 8013b52:	681d      	ldr	r5, [r3, #0]
 8013b54:	da08      	bge.n	8013b68 <sniprintf+0x20>
 8013b56:	238b      	movs	r3, #139	; 0x8b
 8013b58:	602b      	str	r3, [r5, #0]
 8013b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8013b5e:	b01d      	add	sp, #116	; 0x74
 8013b60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b64:	b002      	add	sp, #8
 8013b66:	4770      	bx	lr
 8013b68:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013b6c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013b70:	bf14      	ite	ne
 8013b72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013b76:	4623      	moveq	r3, r4
 8013b78:	9304      	str	r3, [sp, #16]
 8013b7a:	9307      	str	r3, [sp, #28]
 8013b7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013b80:	9002      	str	r0, [sp, #8]
 8013b82:	9006      	str	r0, [sp, #24]
 8013b84:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013b88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013b8a:	ab21      	add	r3, sp, #132	; 0x84
 8013b8c:	a902      	add	r1, sp, #8
 8013b8e:	4628      	mov	r0, r5
 8013b90:	9301      	str	r3, [sp, #4]
 8013b92:	f003 f905 	bl	8016da0 <_svfiprintf_r>
 8013b96:	1c43      	adds	r3, r0, #1
 8013b98:	bfbc      	itt	lt
 8013b9a:	238b      	movlt	r3, #139	; 0x8b
 8013b9c:	602b      	strlt	r3, [r5, #0]
 8013b9e:	2c00      	cmp	r4, #0
 8013ba0:	d0dd      	beq.n	8013b5e <sniprintf+0x16>
 8013ba2:	9b02      	ldr	r3, [sp, #8]
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	701a      	strb	r2, [r3, #0]
 8013ba8:	e7d9      	b.n	8013b5e <sniprintf+0x16>
 8013baa:	bf00      	nop
 8013bac:	2000000c 	.word	0x2000000c

08013bb0 <siprintf>:
 8013bb0:	b40e      	push	{r1, r2, r3}
 8013bb2:	b500      	push	{lr}
 8013bb4:	b09c      	sub	sp, #112	; 0x70
 8013bb6:	ab1d      	add	r3, sp, #116	; 0x74
 8013bb8:	9002      	str	r0, [sp, #8]
 8013bba:	9006      	str	r0, [sp, #24]
 8013bbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013bc0:	4809      	ldr	r0, [pc, #36]	; (8013be8 <siprintf+0x38>)
 8013bc2:	9107      	str	r1, [sp, #28]
 8013bc4:	9104      	str	r1, [sp, #16]
 8013bc6:	4909      	ldr	r1, [pc, #36]	; (8013bec <siprintf+0x3c>)
 8013bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8013bcc:	9105      	str	r1, [sp, #20]
 8013bce:	6800      	ldr	r0, [r0, #0]
 8013bd0:	9301      	str	r3, [sp, #4]
 8013bd2:	a902      	add	r1, sp, #8
 8013bd4:	f003 f8e4 	bl	8016da0 <_svfiprintf_r>
 8013bd8:	9b02      	ldr	r3, [sp, #8]
 8013bda:	2200      	movs	r2, #0
 8013bdc:	701a      	strb	r2, [r3, #0]
 8013bde:	b01c      	add	sp, #112	; 0x70
 8013be0:	f85d eb04 	ldr.w	lr, [sp], #4
 8013be4:	b003      	add	sp, #12
 8013be6:	4770      	bx	lr
 8013be8:	2000000c 	.word	0x2000000c
 8013bec:	ffff0208 	.word	0xffff0208

08013bf0 <siscanf>:
 8013bf0:	b40e      	push	{r1, r2, r3}
 8013bf2:	b530      	push	{r4, r5, lr}
 8013bf4:	b09c      	sub	sp, #112	; 0x70
 8013bf6:	ac1f      	add	r4, sp, #124	; 0x7c
 8013bf8:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013bfc:	f854 5b04 	ldr.w	r5, [r4], #4
 8013c00:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013c04:	9002      	str	r0, [sp, #8]
 8013c06:	9006      	str	r0, [sp, #24]
 8013c08:	f7ec fafa 	bl	8000200 <strlen>
 8013c0c:	4b0b      	ldr	r3, [pc, #44]	; (8013c3c <siscanf+0x4c>)
 8013c0e:	9003      	str	r0, [sp, #12]
 8013c10:	9007      	str	r0, [sp, #28]
 8013c12:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c14:	480a      	ldr	r0, [pc, #40]	; (8013c40 <siscanf+0x50>)
 8013c16:	9401      	str	r4, [sp, #4]
 8013c18:	2300      	movs	r3, #0
 8013c1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8013c1c:	9314      	str	r3, [sp, #80]	; 0x50
 8013c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013c22:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013c26:	462a      	mov	r2, r5
 8013c28:	4623      	mov	r3, r4
 8013c2a:	a902      	add	r1, sp, #8
 8013c2c:	6800      	ldr	r0, [r0, #0]
 8013c2e:	f003 fa09 	bl	8017044 <__ssvfiscanf_r>
 8013c32:	b01c      	add	sp, #112	; 0x70
 8013c34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c38:	b003      	add	sp, #12
 8013c3a:	4770      	bx	lr
 8013c3c:	08013c67 	.word	0x08013c67
 8013c40:	2000000c 	.word	0x2000000c

08013c44 <__sread>:
 8013c44:	b510      	push	{r4, lr}
 8013c46:	460c      	mov	r4, r1
 8013c48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c4c:	f003 fde2 	bl	8017814 <_read_r>
 8013c50:	2800      	cmp	r0, #0
 8013c52:	bfab      	itete	ge
 8013c54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013c56:	89a3      	ldrhlt	r3, [r4, #12]
 8013c58:	181b      	addge	r3, r3, r0
 8013c5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013c5e:	bfac      	ite	ge
 8013c60:	6563      	strge	r3, [r4, #84]	; 0x54
 8013c62:	81a3      	strhlt	r3, [r4, #12]
 8013c64:	bd10      	pop	{r4, pc}

08013c66 <__seofread>:
 8013c66:	2000      	movs	r0, #0
 8013c68:	4770      	bx	lr

08013c6a <__swrite>:
 8013c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c6e:	461f      	mov	r7, r3
 8013c70:	898b      	ldrh	r3, [r1, #12]
 8013c72:	05db      	lsls	r3, r3, #23
 8013c74:	4605      	mov	r5, r0
 8013c76:	460c      	mov	r4, r1
 8013c78:	4616      	mov	r6, r2
 8013c7a:	d505      	bpl.n	8013c88 <__swrite+0x1e>
 8013c7c:	2302      	movs	r3, #2
 8013c7e:	2200      	movs	r2, #0
 8013c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c84:	f002 fae2 	bl	801624c <_lseek_r>
 8013c88:	89a3      	ldrh	r3, [r4, #12]
 8013c8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013c92:	81a3      	strh	r3, [r4, #12]
 8013c94:	4632      	mov	r2, r6
 8013c96:	463b      	mov	r3, r7
 8013c98:	4628      	mov	r0, r5
 8013c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c9e:	f000 bf3f 	b.w	8014b20 <_write_r>

08013ca2 <__sseek>:
 8013ca2:	b510      	push	{r4, lr}
 8013ca4:	460c      	mov	r4, r1
 8013ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013caa:	f002 facf 	bl	801624c <_lseek_r>
 8013cae:	1c43      	adds	r3, r0, #1
 8013cb0:	89a3      	ldrh	r3, [r4, #12]
 8013cb2:	bf15      	itete	ne
 8013cb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8013cb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013cba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013cbe:	81a3      	strheq	r3, [r4, #12]
 8013cc0:	bf18      	it	ne
 8013cc2:	81a3      	strhne	r3, [r4, #12]
 8013cc4:	bd10      	pop	{r4, pc}

08013cc6 <__sclose>:
 8013cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013cca:	f000 bfa9 	b.w	8014c20 <_close_r>

08013cce <strcpy>:
 8013cce:	4603      	mov	r3, r0
 8013cd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013cd4:	f803 2b01 	strb.w	r2, [r3], #1
 8013cd8:	2a00      	cmp	r2, #0
 8013cda:	d1f9      	bne.n	8013cd0 <strcpy+0x2>
 8013cdc:	4770      	bx	lr

08013cde <sulp>:
 8013cde:	b570      	push	{r4, r5, r6, lr}
 8013ce0:	4604      	mov	r4, r0
 8013ce2:	460d      	mov	r5, r1
 8013ce4:	ec45 4b10 	vmov	d0, r4, r5
 8013ce8:	4616      	mov	r6, r2
 8013cea:	f002 fe15 	bl	8016918 <__ulp>
 8013cee:	ec51 0b10 	vmov	r0, r1, d0
 8013cf2:	b17e      	cbz	r6, 8013d14 <sulp+0x36>
 8013cf4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013cf8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	dd09      	ble.n	8013d14 <sulp+0x36>
 8013d00:	051b      	lsls	r3, r3, #20
 8013d02:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013d06:	2400      	movs	r4, #0
 8013d08:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013d0c:	4622      	mov	r2, r4
 8013d0e:	462b      	mov	r3, r5
 8013d10:	f7ec fc8a 	bl	8000628 <__aeabi_dmul>
 8013d14:	bd70      	pop	{r4, r5, r6, pc}
	...

08013d18 <_strtod_l>:
 8013d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d1c:	461f      	mov	r7, r3
 8013d1e:	b0a1      	sub	sp, #132	; 0x84
 8013d20:	2300      	movs	r3, #0
 8013d22:	4681      	mov	r9, r0
 8013d24:	4638      	mov	r0, r7
 8013d26:	460e      	mov	r6, r1
 8013d28:	9217      	str	r2, [sp, #92]	; 0x5c
 8013d2a:	931c      	str	r3, [sp, #112]	; 0x70
 8013d2c:	f002 fa7e 	bl	801622c <__localeconv_l>
 8013d30:	4680      	mov	r8, r0
 8013d32:	6800      	ldr	r0, [r0, #0]
 8013d34:	f7ec fa64 	bl	8000200 <strlen>
 8013d38:	f04f 0a00 	mov.w	sl, #0
 8013d3c:	4604      	mov	r4, r0
 8013d3e:	f04f 0b00 	mov.w	fp, #0
 8013d42:	961b      	str	r6, [sp, #108]	; 0x6c
 8013d44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d46:	781a      	ldrb	r2, [r3, #0]
 8013d48:	2a0d      	cmp	r2, #13
 8013d4a:	d832      	bhi.n	8013db2 <_strtod_l+0x9a>
 8013d4c:	2a09      	cmp	r2, #9
 8013d4e:	d236      	bcs.n	8013dbe <_strtod_l+0xa6>
 8013d50:	2a00      	cmp	r2, #0
 8013d52:	d03e      	beq.n	8013dd2 <_strtod_l+0xba>
 8013d54:	2300      	movs	r3, #0
 8013d56:	930d      	str	r3, [sp, #52]	; 0x34
 8013d58:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013d5a:	782b      	ldrb	r3, [r5, #0]
 8013d5c:	2b30      	cmp	r3, #48	; 0x30
 8013d5e:	f040 80ac 	bne.w	8013eba <_strtod_l+0x1a2>
 8013d62:	786b      	ldrb	r3, [r5, #1]
 8013d64:	2b58      	cmp	r3, #88	; 0x58
 8013d66:	d001      	beq.n	8013d6c <_strtod_l+0x54>
 8013d68:	2b78      	cmp	r3, #120	; 0x78
 8013d6a:	d167      	bne.n	8013e3c <_strtod_l+0x124>
 8013d6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d6e:	9301      	str	r3, [sp, #4]
 8013d70:	ab1c      	add	r3, sp, #112	; 0x70
 8013d72:	9300      	str	r3, [sp, #0]
 8013d74:	9702      	str	r7, [sp, #8]
 8013d76:	ab1d      	add	r3, sp, #116	; 0x74
 8013d78:	4a88      	ldr	r2, [pc, #544]	; (8013f9c <_strtod_l+0x284>)
 8013d7a:	a91b      	add	r1, sp, #108	; 0x6c
 8013d7c:	4648      	mov	r0, r9
 8013d7e:	f001 ff6c 	bl	8015c5a <__gethex>
 8013d82:	f010 0407 	ands.w	r4, r0, #7
 8013d86:	4606      	mov	r6, r0
 8013d88:	d005      	beq.n	8013d96 <_strtod_l+0x7e>
 8013d8a:	2c06      	cmp	r4, #6
 8013d8c:	d12b      	bne.n	8013de6 <_strtod_l+0xce>
 8013d8e:	3501      	adds	r5, #1
 8013d90:	2300      	movs	r3, #0
 8013d92:	951b      	str	r5, [sp, #108]	; 0x6c
 8013d94:	930d      	str	r3, [sp, #52]	; 0x34
 8013d96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	f040 859a 	bne.w	80148d2 <_strtod_l+0xbba>
 8013d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013da0:	b1e3      	cbz	r3, 8013ddc <_strtod_l+0xc4>
 8013da2:	4652      	mov	r2, sl
 8013da4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013da8:	ec43 2b10 	vmov	d0, r2, r3
 8013dac:	b021      	add	sp, #132	; 0x84
 8013dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013db2:	2a2b      	cmp	r2, #43	; 0x2b
 8013db4:	d015      	beq.n	8013de2 <_strtod_l+0xca>
 8013db6:	2a2d      	cmp	r2, #45	; 0x2d
 8013db8:	d004      	beq.n	8013dc4 <_strtod_l+0xac>
 8013dba:	2a20      	cmp	r2, #32
 8013dbc:	d1ca      	bne.n	8013d54 <_strtod_l+0x3c>
 8013dbe:	3301      	adds	r3, #1
 8013dc0:	931b      	str	r3, [sp, #108]	; 0x6c
 8013dc2:	e7bf      	b.n	8013d44 <_strtod_l+0x2c>
 8013dc4:	2201      	movs	r2, #1
 8013dc6:	920d      	str	r2, [sp, #52]	; 0x34
 8013dc8:	1c5a      	adds	r2, r3, #1
 8013dca:	921b      	str	r2, [sp, #108]	; 0x6c
 8013dcc:	785b      	ldrb	r3, [r3, #1]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d1c2      	bne.n	8013d58 <_strtod_l+0x40>
 8013dd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013dd4:	961b      	str	r6, [sp, #108]	; 0x6c
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	f040 8579 	bne.w	80148ce <_strtod_l+0xbb6>
 8013ddc:	4652      	mov	r2, sl
 8013dde:	465b      	mov	r3, fp
 8013de0:	e7e2      	b.n	8013da8 <_strtod_l+0x90>
 8013de2:	2200      	movs	r2, #0
 8013de4:	e7ef      	b.n	8013dc6 <_strtod_l+0xae>
 8013de6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013de8:	b13a      	cbz	r2, 8013dfa <_strtod_l+0xe2>
 8013dea:	2135      	movs	r1, #53	; 0x35
 8013dec:	a81e      	add	r0, sp, #120	; 0x78
 8013dee:	f002 fe8b 	bl	8016b08 <__copybits>
 8013df2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013df4:	4648      	mov	r0, r9
 8013df6:	f002 faf8 	bl	80163ea <_Bfree>
 8013dfa:	3c01      	subs	r4, #1
 8013dfc:	2c04      	cmp	r4, #4
 8013dfe:	d806      	bhi.n	8013e0e <_strtod_l+0xf6>
 8013e00:	e8df f004 	tbb	[pc, r4]
 8013e04:	1714030a 	.word	0x1714030a
 8013e08:	0a          	.byte	0x0a
 8013e09:	00          	.byte	0x00
 8013e0a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8013e0e:	0730      	lsls	r0, r6, #28
 8013e10:	d5c1      	bpl.n	8013d96 <_strtod_l+0x7e>
 8013e12:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013e16:	e7be      	b.n	8013d96 <_strtod_l+0x7e>
 8013e18:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8013e1c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013e1e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013e22:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013e26:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013e2a:	e7f0      	b.n	8013e0e <_strtod_l+0xf6>
 8013e2c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013fa0 <_strtod_l+0x288>
 8013e30:	e7ed      	b.n	8013e0e <_strtod_l+0xf6>
 8013e32:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013e36:	f04f 3aff 	mov.w	sl, #4294967295
 8013e3a:	e7e8      	b.n	8013e0e <_strtod_l+0xf6>
 8013e3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e3e:	1c5a      	adds	r2, r3, #1
 8013e40:	921b      	str	r2, [sp, #108]	; 0x6c
 8013e42:	785b      	ldrb	r3, [r3, #1]
 8013e44:	2b30      	cmp	r3, #48	; 0x30
 8013e46:	d0f9      	beq.n	8013e3c <_strtod_l+0x124>
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d0a4      	beq.n	8013d96 <_strtod_l+0x7e>
 8013e4c:	2301      	movs	r3, #1
 8013e4e:	2500      	movs	r5, #0
 8013e50:	9306      	str	r3, [sp, #24]
 8013e52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e54:	9308      	str	r3, [sp, #32]
 8013e56:	9507      	str	r5, [sp, #28]
 8013e58:	9505      	str	r5, [sp, #20]
 8013e5a:	220a      	movs	r2, #10
 8013e5c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013e5e:	7807      	ldrb	r7, [r0, #0]
 8013e60:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013e64:	b2d9      	uxtb	r1, r3
 8013e66:	2909      	cmp	r1, #9
 8013e68:	d929      	bls.n	8013ebe <_strtod_l+0x1a6>
 8013e6a:	4622      	mov	r2, r4
 8013e6c:	f8d8 1000 	ldr.w	r1, [r8]
 8013e70:	f003 fd24 	bl	80178bc <strncmp>
 8013e74:	2800      	cmp	r0, #0
 8013e76:	d031      	beq.n	8013edc <_strtod_l+0x1c4>
 8013e78:	2000      	movs	r0, #0
 8013e7a:	9c05      	ldr	r4, [sp, #20]
 8013e7c:	9004      	str	r0, [sp, #16]
 8013e7e:	463b      	mov	r3, r7
 8013e80:	4602      	mov	r2, r0
 8013e82:	2b65      	cmp	r3, #101	; 0x65
 8013e84:	d001      	beq.n	8013e8a <_strtod_l+0x172>
 8013e86:	2b45      	cmp	r3, #69	; 0x45
 8013e88:	d114      	bne.n	8013eb4 <_strtod_l+0x19c>
 8013e8a:	b924      	cbnz	r4, 8013e96 <_strtod_l+0x17e>
 8013e8c:	b910      	cbnz	r0, 8013e94 <_strtod_l+0x17c>
 8013e8e:	9b06      	ldr	r3, [sp, #24]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d09e      	beq.n	8013dd2 <_strtod_l+0xba>
 8013e94:	2400      	movs	r4, #0
 8013e96:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013e98:	1c73      	adds	r3, r6, #1
 8013e9a:	931b      	str	r3, [sp, #108]	; 0x6c
 8013e9c:	7873      	ldrb	r3, [r6, #1]
 8013e9e:	2b2b      	cmp	r3, #43	; 0x2b
 8013ea0:	d078      	beq.n	8013f94 <_strtod_l+0x27c>
 8013ea2:	2b2d      	cmp	r3, #45	; 0x2d
 8013ea4:	d070      	beq.n	8013f88 <_strtod_l+0x270>
 8013ea6:	f04f 0c00 	mov.w	ip, #0
 8013eaa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8013eae:	2f09      	cmp	r7, #9
 8013eb0:	d97c      	bls.n	8013fac <_strtod_l+0x294>
 8013eb2:	961b      	str	r6, [sp, #108]	; 0x6c
 8013eb4:	f04f 0e00 	mov.w	lr, #0
 8013eb8:	e09a      	b.n	8013ff0 <_strtod_l+0x2d8>
 8013eba:	2300      	movs	r3, #0
 8013ebc:	e7c7      	b.n	8013e4e <_strtod_l+0x136>
 8013ebe:	9905      	ldr	r1, [sp, #20]
 8013ec0:	2908      	cmp	r1, #8
 8013ec2:	bfdd      	ittte	le
 8013ec4:	9907      	ldrle	r1, [sp, #28]
 8013ec6:	fb02 3301 	mlale	r3, r2, r1, r3
 8013eca:	9307      	strle	r3, [sp, #28]
 8013ecc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013ed0:	9b05      	ldr	r3, [sp, #20]
 8013ed2:	3001      	adds	r0, #1
 8013ed4:	3301      	adds	r3, #1
 8013ed6:	9305      	str	r3, [sp, #20]
 8013ed8:	901b      	str	r0, [sp, #108]	; 0x6c
 8013eda:	e7bf      	b.n	8013e5c <_strtod_l+0x144>
 8013edc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ede:	191a      	adds	r2, r3, r4
 8013ee0:	921b      	str	r2, [sp, #108]	; 0x6c
 8013ee2:	9a05      	ldr	r2, [sp, #20]
 8013ee4:	5d1b      	ldrb	r3, [r3, r4]
 8013ee6:	2a00      	cmp	r2, #0
 8013ee8:	d037      	beq.n	8013f5a <_strtod_l+0x242>
 8013eea:	9c05      	ldr	r4, [sp, #20]
 8013eec:	4602      	mov	r2, r0
 8013eee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013ef2:	2909      	cmp	r1, #9
 8013ef4:	d913      	bls.n	8013f1e <_strtod_l+0x206>
 8013ef6:	2101      	movs	r1, #1
 8013ef8:	9104      	str	r1, [sp, #16]
 8013efa:	e7c2      	b.n	8013e82 <_strtod_l+0x16a>
 8013efc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013efe:	1c5a      	adds	r2, r3, #1
 8013f00:	921b      	str	r2, [sp, #108]	; 0x6c
 8013f02:	785b      	ldrb	r3, [r3, #1]
 8013f04:	3001      	adds	r0, #1
 8013f06:	2b30      	cmp	r3, #48	; 0x30
 8013f08:	d0f8      	beq.n	8013efc <_strtod_l+0x1e4>
 8013f0a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013f0e:	2a08      	cmp	r2, #8
 8013f10:	f200 84e4 	bhi.w	80148dc <_strtod_l+0xbc4>
 8013f14:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013f16:	9208      	str	r2, [sp, #32]
 8013f18:	4602      	mov	r2, r0
 8013f1a:	2000      	movs	r0, #0
 8013f1c:	4604      	mov	r4, r0
 8013f1e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013f22:	f100 0101 	add.w	r1, r0, #1
 8013f26:	d012      	beq.n	8013f4e <_strtod_l+0x236>
 8013f28:	440a      	add	r2, r1
 8013f2a:	eb00 0c04 	add.w	ip, r0, r4
 8013f2e:	4621      	mov	r1, r4
 8013f30:	270a      	movs	r7, #10
 8013f32:	458c      	cmp	ip, r1
 8013f34:	d113      	bne.n	8013f5e <_strtod_l+0x246>
 8013f36:	1821      	adds	r1, r4, r0
 8013f38:	2908      	cmp	r1, #8
 8013f3a:	f104 0401 	add.w	r4, r4, #1
 8013f3e:	4404      	add	r4, r0
 8013f40:	dc19      	bgt.n	8013f76 <_strtod_l+0x25e>
 8013f42:	9b07      	ldr	r3, [sp, #28]
 8013f44:	210a      	movs	r1, #10
 8013f46:	fb01 e303 	mla	r3, r1, r3, lr
 8013f4a:	9307      	str	r3, [sp, #28]
 8013f4c:	2100      	movs	r1, #0
 8013f4e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013f50:	1c58      	adds	r0, r3, #1
 8013f52:	901b      	str	r0, [sp, #108]	; 0x6c
 8013f54:	785b      	ldrb	r3, [r3, #1]
 8013f56:	4608      	mov	r0, r1
 8013f58:	e7c9      	b.n	8013eee <_strtod_l+0x1d6>
 8013f5a:	9805      	ldr	r0, [sp, #20]
 8013f5c:	e7d3      	b.n	8013f06 <_strtod_l+0x1ee>
 8013f5e:	2908      	cmp	r1, #8
 8013f60:	f101 0101 	add.w	r1, r1, #1
 8013f64:	dc03      	bgt.n	8013f6e <_strtod_l+0x256>
 8013f66:	9b07      	ldr	r3, [sp, #28]
 8013f68:	437b      	muls	r3, r7
 8013f6a:	9307      	str	r3, [sp, #28]
 8013f6c:	e7e1      	b.n	8013f32 <_strtod_l+0x21a>
 8013f6e:	2910      	cmp	r1, #16
 8013f70:	bfd8      	it	le
 8013f72:	437d      	mulle	r5, r7
 8013f74:	e7dd      	b.n	8013f32 <_strtod_l+0x21a>
 8013f76:	2c10      	cmp	r4, #16
 8013f78:	bfdc      	itt	le
 8013f7a:	210a      	movle	r1, #10
 8013f7c:	fb01 e505 	mlale	r5, r1, r5, lr
 8013f80:	e7e4      	b.n	8013f4c <_strtod_l+0x234>
 8013f82:	2301      	movs	r3, #1
 8013f84:	9304      	str	r3, [sp, #16]
 8013f86:	e781      	b.n	8013e8c <_strtod_l+0x174>
 8013f88:	f04f 0c01 	mov.w	ip, #1
 8013f8c:	1cb3      	adds	r3, r6, #2
 8013f8e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013f90:	78b3      	ldrb	r3, [r6, #2]
 8013f92:	e78a      	b.n	8013eaa <_strtod_l+0x192>
 8013f94:	f04f 0c00 	mov.w	ip, #0
 8013f98:	e7f8      	b.n	8013f8c <_strtod_l+0x274>
 8013f9a:	bf00      	nop
 8013f9c:	08018424 	.word	0x08018424
 8013fa0:	7ff00000 	.word	0x7ff00000
 8013fa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013fa6:	1c5f      	adds	r7, r3, #1
 8013fa8:	971b      	str	r7, [sp, #108]	; 0x6c
 8013faa:	785b      	ldrb	r3, [r3, #1]
 8013fac:	2b30      	cmp	r3, #48	; 0x30
 8013fae:	d0f9      	beq.n	8013fa4 <_strtod_l+0x28c>
 8013fb0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013fb4:	2f08      	cmp	r7, #8
 8013fb6:	f63f af7d 	bhi.w	8013eb4 <_strtod_l+0x19c>
 8013fba:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013fbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013fc0:	930a      	str	r3, [sp, #40]	; 0x28
 8013fc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013fc4:	1c5f      	adds	r7, r3, #1
 8013fc6:	971b      	str	r7, [sp, #108]	; 0x6c
 8013fc8:	785b      	ldrb	r3, [r3, #1]
 8013fca:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8013fce:	f1b8 0f09 	cmp.w	r8, #9
 8013fd2:	d937      	bls.n	8014044 <_strtod_l+0x32c>
 8013fd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013fd6:	1a7f      	subs	r7, r7, r1
 8013fd8:	2f08      	cmp	r7, #8
 8013fda:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013fde:	dc37      	bgt.n	8014050 <_strtod_l+0x338>
 8013fe0:	45be      	cmp	lr, r7
 8013fe2:	bfa8      	it	ge
 8013fe4:	46be      	movge	lr, r7
 8013fe6:	f1bc 0f00 	cmp.w	ip, #0
 8013fea:	d001      	beq.n	8013ff0 <_strtod_l+0x2d8>
 8013fec:	f1ce 0e00 	rsb	lr, lr, #0
 8013ff0:	2c00      	cmp	r4, #0
 8013ff2:	d151      	bne.n	8014098 <_strtod_l+0x380>
 8013ff4:	2800      	cmp	r0, #0
 8013ff6:	f47f aece 	bne.w	8013d96 <_strtod_l+0x7e>
 8013ffa:	9a06      	ldr	r2, [sp, #24]
 8013ffc:	2a00      	cmp	r2, #0
 8013ffe:	f47f aeca 	bne.w	8013d96 <_strtod_l+0x7e>
 8014002:	9a04      	ldr	r2, [sp, #16]
 8014004:	2a00      	cmp	r2, #0
 8014006:	f47f aee4 	bne.w	8013dd2 <_strtod_l+0xba>
 801400a:	2b4e      	cmp	r3, #78	; 0x4e
 801400c:	d027      	beq.n	801405e <_strtod_l+0x346>
 801400e:	dc21      	bgt.n	8014054 <_strtod_l+0x33c>
 8014010:	2b49      	cmp	r3, #73	; 0x49
 8014012:	f47f aede 	bne.w	8013dd2 <_strtod_l+0xba>
 8014016:	49a0      	ldr	r1, [pc, #640]	; (8014298 <_strtod_l+0x580>)
 8014018:	a81b      	add	r0, sp, #108	; 0x6c
 801401a:	f002 f851 	bl	80160c0 <__match>
 801401e:	2800      	cmp	r0, #0
 8014020:	f43f aed7 	beq.w	8013dd2 <_strtod_l+0xba>
 8014024:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014026:	499d      	ldr	r1, [pc, #628]	; (801429c <_strtod_l+0x584>)
 8014028:	3b01      	subs	r3, #1
 801402a:	a81b      	add	r0, sp, #108	; 0x6c
 801402c:	931b      	str	r3, [sp, #108]	; 0x6c
 801402e:	f002 f847 	bl	80160c0 <__match>
 8014032:	b910      	cbnz	r0, 801403a <_strtod_l+0x322>
 8014034:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014036:	3301      	adds	r3, #1
 8014038:	931b      	str	r3, [sp, #108]	; 0x6c
 801403a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80142b0 <_strtod_l+0x598>
 801403e:	f04f 0a00 	mov.w	sl, #0
 8014042:	e6a8      	b.n	8013d96 <_strtod_l+0x7e>
 8014044:	210a      	movs	r1, #10
 8014046:	fb01 3e0e 	mla	lr, r1, lr, r3
 801404a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801404e:	e7b8      	b.n	8013fc2 <_strtod_l+0x2aa>
 8014050:	46be      	mov	lr, r7
 8014052:	e7c8      	b.n	8013fe6 <_strtod_l+0x2ce>
 8014054:	2b69      	cmp	r3, #105	; 0x69
 8014056:	d0de      	beq.n	8014016 <_strtod_l+0x2fe>
 8014058:	2b6e      	cmp	r3, #110	; 0x6e
 801405a:	f47f aeba 	bne.w	8013dd2 <_strtod_l+0xba>
 801405e:	4990      	ldr	r1, [pc, #576]	; (80142a0 <_strtod_l+0x588>)
 8014060:	a81b      	add	r0, sp, #108	; 0x6c
 8014062:	f002 f82d 	bl	80160c0 <__match>
 8014066:	2800      	cmp	r0, #0
 8014068:	f43f aeb3 	beq.w	8013dd2 <_strtod_l+0xba>
 801406c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801406e:	781b      	ldrb	r3, [r3, #0]
 8014070:	2b28      	cmp	r3, #40	; 0x28
 8014072:	d10e      	bne.n	8014092 <_strtod_l+0x37a>
 8014074:	aa1e      	add	r2, sp, #120	; 0x78
 8014076:	498b      	ldr	r1, [pc, #556]	; (80142a4 <_strtod_l+0x58c>)
 8014078:	a81b      	add	r0, sp, #108	; 0x6c
 801407a:	f002 f835 	bl	80160e8 <__hexnan>
 801407e:	2805      	cmp	r0, #5
 8014080:	d107      	bne.n	8014092 <_strtod_l+0x37a>
 8014082:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014084:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8014088:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801408c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014090:	e681      	b.n	8013d96 <_strtod_l+0x7e>
 8014092:	f8df b224 	ldr.w	fp, [pc, #548]	; 80142b8 <_strtod_l+0x5a0>
 8014096:	e7d2      	b.n	801403e <_strtod_l+0x326>
 8014098:	ebae 0302 	sub.w	r3, lr, r2
 801409c:	9306      	str	r3, [sp, #24]
 801409e:	9b05      	ldr	r3, [sp, #20]
 80140a0:	9807      	ldr	r0, [sp, #28]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	bf08      	it	eq
 80140a6:	4623      	moveq	r3, r4
 80140a8:	2c10      	cmp	r4, #16
 80140aa:	9305      	str	r3, [sp, #20]
 80140ac:	46a0      	mov	r8, r4
 80140ae:	bfa8      	it	ge
 80140b0:	f04f 0810 	movge.w	r8, #16
 80140b4:	f7ec fa3e 	bl	8000534 <__aeabi_ui2d>
 80140b8:	2c09      	cmp	r4, #9
 80140ba:	4682      	mov	sl, r0
 80140bc:	468b      	mov	fp, r1
 80140be:	dc13      	bgt.n	80140e8 <_strtod_l+0x3d0>
 80140c0:	9b06      	ldr	r3, [sp, #24]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	f43f ae67 	beq.w	8013d96 <_strtod_l+0x7e>
 80140c8:	9b06      	ldr	r3, [sp, #24]
 80140ca:	dd7a      	ble.n	80141c2 <_strtod_l+0x4aa>
 80140cc:	2b16      	cmp	r3, #22
 80140ce:	dc61      	bgt.n	8014194 <_strtod_l+0x47c>
 80140d0:	4a75      	ldr	r2, [pc, #468]	; (80142a8 <_strtod_l+0x590>)
 80140d2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80140d6:	e9de 0100 	ldrd	r0, r1, [lr]
 80140da:	4652      	mov	r2, sl
 80140dc:	465b      	mov	r3, fp
 80140de:	f7ec faa3 	bl	8000628 <__aeabi_dmul>
 80140e2:	4682      	mov	sl, r0
 80140e4:	468b      	mov	fp, r1
 80140e6:	e656      	b.n	8013d96 <_strtod_l+0x7e>
 80140e8:	4b6f      	ldr	r3, [pc, #444]	; (80142a8 <_strtod_l+0x590>)
 80140ea:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80140ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80140f2:	f7ec fa99 	bl	8000628 <__aeabi_dmul>
 80140f6:	4606      	mov	r6, r0
 80140f8:	4628      	mov	r0, r5
 80140fa:	460f      	mov	r7, r1
 80140fc:	f7ec fa1a 	bl	8000534 <__aeabi_ui2d>
 8014100:	4602      	mov	r2, r0
 8014102:	460b      	mov	r3, r1
 8014104:	4630      	mov	r0, r6
 8014106:	4639      	mov	r1, r7
 8014108:	f7ec f8d8 	bl	80002bc <__adddf3>
 801410c:	2c0f      	cmp	r4, #15
 801410e:	4682      	mov	sl, r0
 8014110:	468b      	mov	fp, r1
 8014112:	ddd5      	ble.n	80140c0 <_strtod_l+0x3a8>
 8014114:	9b06      	ldr	r3, [sp, #24]
 8014116:	eba4 0808 	sub.w	r8, r4, r8
 801411a:	4498      	add	r8, r3
 801411c:	f1b8 0f00 	cmp.w	r8, #0
 8014120:	f340 8096 	ble.w	8014250 <_strtod_l+0x538>
 8014124:	f018 030f 	ands.w	r3, r8, #15
 8014128:	d00a      	beq.n	8014140 <_strtod_l+0x428>
 801412a:	495f      	ldr	r1, [pc, #380]	; (80142a8 <_strtod_l+0x590>)
 801412c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014130:	4652      	mov	r2, sl
 8014132:	465b      	mov	r3, fp
 8014134:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014138:	f7ec fa76 	bl	8000628 <__aeabi_dmul>
 801413c:	4682      	mov	sl, r0
 801413e:	468b      	mov	fp, r1
 8014140:	f038 080f 	bics.w	r8, r8, #15
 8014144:	d073      	beq.n	801422e <_strtod_l+0x516>
 8014146:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801414a:	dd47      	ble.n	80141dc <_strtod_l+0x4c4>
 801414c:	2400      	movs	r4, #0
 801414e:	46a0      	mov	r8, r4
 8014150:	9407      	str	r4, [sp, #28]
 8014152:	9405      	str	r4, [sp, #20]
 8014154:	2322      	movs	r3, #34	; 0x22
 8014156:	f8df b158 	ldr.w	fp, [pc, #344]	; 80142b0 <_strtod_l+0x598>
 801415a:	f8c9 3000 	str.w	r3, [r9]
 801415e:	f04f 0a00 	mov.w	sl, #0
 8014162:	9b07      	ldr	r3, [sp, #28]
 8014164:	2b00      	cmp	r3, #0
 8014166:	f43f ae16 	beq.w	8013d96 <_strtod_l+0x7e>
 801416a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801416c:	4648      	mov	r0, r9
 801416e:	f002 f93c 	bl	80163ea <_Bfree>
 8014172:	9905      	ldr	r1, [sp, #20]
 8014174:	4648      	mov	r0, r9
 8014176:	f002 f938 	bl	80163ea <_Bfree>
 801417a:	4641      	mov	r1, r8
 801417c:	4648      	mov	r0, r9
 801417e:	f002 f934 	bl	80163ea <_Bfree>
 8014182:	9907      	ldr	r1, [sp, #28]
 8014184:	4648      	mov	r0, r9
 8014186:	f002 f930 	bl	80163ea <_Bfree>
 801418a:	4621      	mov	r1, r4
 801418c:	4648      	mov	r0, r9
 801418e:	f002 f92c 	bl	80163ea <_Bfree>
 8014192:	e600      	b.n	8013d96 <_strtod_l+0x7e>
 8014194:	9a06      	ldr	r2, [sp, #24]
 8014196:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801419a:	4293      	cmp	r3, r2
 801419c:	dbba      	blt.n	8014114 <_strtod_l+0x3fc>
 801419e:	4d42      	ldr	r5, [pc, #264]	; (80142a8 <_strtod_l+0x590>)
 80141a0:	f1c4 040f 	rsb	r4, r4, #15
 80141a4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80141a8:	4652      	mov	r2, sl
 80141aa:	465b      	mov	r3, fp
 80141ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80141b0:	f7ec fa3a 	bl	8000628 <__aeabi_dmul>
 80141b4:	9b06      	ldr	r3, [sp, #24]
 80141b6:	1b1c      	subs	r4, r3, r4
 80141b8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80141bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80141c0:	e78d      	b.n	80140de <_strtod_l+0x3c6>
 80141c2:	f113 0f16 	cmn.w	r3, #22
 80141c6:	dba5      	blt.n	8014114 <_strtod_l+0x3fc>
 80141c8:	4a37      	ldr	r2, [pc, #220]	; (80142a8 <_strtod_l+0x590>)
 80141ca:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80141ce:	e9d2 2300 	ldrd	r2, r3, [r2]
 80141d2:	4650      	mov	r0, sl
 80141d4:	4659      	mov	r1, fp
 80141d6:	f7ec fb51 	bl	800087c <__aeabi_ddiv>
 80141da:	e782      	b.n	80140e2 <_strtod_l+0x3ca>
 80141dc:	2300      	movs	r3, #0
 80141de:	4e33      	ldr	r6, [pc, #204]	; (80142ac <_strtod_l+0x594>)
 80141e0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80141e4:	4650      	mov	r0, sl
 80141e6:	4659      	mov	r1, fp
 80141e8:	461d      	mov	r5, r3
 80141ea:	f1b8 0f01 	cmp.w	r8, #1
 80141ee:	dc21      	bgt.n	8014234 <_strtod_l+0x51c>
 80141f0:	b10b      	cbz	r3, 80141f6 <_strtod_l+0x4de>
 80141f2:	4682      	mov	sl, r0
 80141f4:	468b      	mov	fp, r1
 80141f6:	4b2d      	ldr	r3, [pc, #180]	; (80142ac <_strtod_l+0x594>)
 80141f8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80141fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014200:	4652      	mov	r2, sl
 8014202:	465b      	mov	r3, fp
 8014204:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014208:	f7ec fa0e 	bl	8000628 <__aeabi_dmul>
 801420c:	4b28      	ldr	r3, [pc, #160]	; (80142b0 <_strtod_l+0x598>)
 801420e:	460a      	mov	r2, r1
 8014210:	400b      	ands	r3, r1
 8014212:	4928      	ldr	r1, [pc, #160]	; (80142b4 <_strtod_l+0x59c>)
 8014214:	428b      	cmp	r3, r1
 8014216:	4682      	mov	sl, r0
 8014218:	d898      	bhi.n	801414c <_strtod_l+0x434>
 801421a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801421e:	428b      	cmp	r3, r1
 8014220:	bf86      	itte	hi
 8014222:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80142bc <_strtod_l+0x5a4>
 8014226:	f04f 3aff 	movhi.w	sl, #4294967295
 801422a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801422e:	2300      	movs	r3, #0
 8014230:	9304      	str	r3, [sp, #16]
 8014232:	e077      	b.n	8014324 <_strtod_l+0x60c>
 8014234:	f018 0f01 	tst.w	r8, #1
 8014238:	d006      	beq.n	8014248 <_strtod_l+0x530>
 801423a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801423e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014242:	f7ec f9f1 	bl	8000628 <__aeabi_dmul>
 8014246:	2301      	movs	r3, #1
 8014248:	3501      	adds	r5, #1
 801424a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801424e:	e7cc      	b.n	80141ea <_strtod_l+0x4d2>
 8014250:	d0ed      	beq.n	801422e <_strtod_l+0x516>
 8014252:	f1c8 0800 	rsb	r8, r8, #0
 8014256:	f018 020f 	ands.w	r2, r8, #15
 801425a:	d00a      	beq.n	8014272 <_strtod_l+0x55a>
 801425c:	4b12      	ldr	r3, [pc, #72]	; (80142a8 <_strtod_l+0x590>)
 801425e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014262:	4650      	mov	r0, sl
 8014264:	4659      	mov	r1, fp
 8014266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801426a:	f7ec fb07 	bl	800087c <__aeabi_ddiv>
 801426e:	4682      	mov	sl, r0
 8014270:	468b      	mov	fp, r1
 8014272:	ea5f 1828 	movs.w	r8, r8, asr #4
 8014276:	d0da      	beq.n	801422e <_strtod_l+0x516>
 8014278:	f1b8 0f1f 	cmp.w	r8, #31
 801427c:	dd20      	ble.n	80142c0 <_strtod_l+0x5a8>
 801427e:	2400      	movs	r4, #0
 8014280:	46a0      	mov	r8, r4
 8014282:	9407      	str	r4, [sp, #28]
 8014284:	9405      	str	r4, [sp, #20]
 8014286:	2322      	movs	r3, #34	; 0x22
 8014288:	f04f 0a00 	mov.w	sl, #0
 801428c:	f04f 0b00 	mov.w	fp, #0
 8014290:	f8c9 3000 	str.w	r3, [r9]
 8014294:	e765      	b.n	8014162 <_strtod_l+0x44a>
 8014296:	bf00      	nop
 8014298:	080183f1 	.word	0x080183f1
 801429c:	0801847b 	.word	0x0801847b
 80142a0:	080183f9 	.word	0x080183f9
 80142a4:	08018438 	.word	0x08018438
 80142a8:	08018520 	.word	0x08018520
 80142ac:	080184f8 	.word	0x080184f8
 80142b0:	7ff00000 	.word	0x7ff00000
 80142b4:	7ca00000 	.word	0x7ca00000
 80142b8:	fff80000 	.word	0xfff80000
 80142bc:	7fefffff 	.word	0x7fefffff
 80142c0:	f018 0310 	ands.w	r3, r8, #16
 80142c4:	bf18      	it	ne
 80142c6:	236a      	movne	r3, #106	; 0x6a
 80142c8:	4da0      	ldr	r5, [pc, #640]	; (801454c <_strtod_l+0x834>)
 80142ca:	9304      	str	r3, [sp, #16]
 80142cc:	4650      	mov	r0, sl
 80142ce:	4659      	mov	r1, fp
 80142d0:	2300      	movs	r3, #0
 80142d2:	f1b8 0f00 	cmp.w	r8, #0
 80142d6:	f300 810a 	bgt.w	80144ee <_strtod_l+0x7d6>
 80142da:	b10b      	cbz	r3, 80142e0 <_strtod_l+0x5c8>
 80142dc:	4682      	mov	sl, r0
 80142de:	468b      	mov	fp, r1
 80142e0:	9b04      	ldr	r3, [sp, #16]
 80142e2:	b1bb      	cbz	r3, 8014314 <_strtod_l+0x5fc>
 80142e4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80142e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	4659      	mov	r1, fp
 80142f0:	dd10      	ble.n	8014314 <_strtod_l+0x5fc>
 80142f2:	2b1f      	cmp	r3, #31
 80142f4:	f340 8107 	ble.w	8014506 <_strtod_l+0x7ee>
 80142f8:	2b34      	cmp	r3, #52	; 0x34
 80142fa:	bfde      	ittt	le
 80142fc:	3b20      	suble	r3, #32
 80142fe:	f04f 32ff 	movle.w	r2, #4294967295
 8014302:	fa02 f303 	lslle.w	r3, r2, r3
 8014306:	f04f 0a00 	mov.w	sl, #0
 801430a:	bfcc      	ite	gt
 801430c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014310:	ea03 0b01 	andle.w	fp, r3, r1
 8014314:	2200      	movs	r2, #0
 8014316:	2300      	movs	r3, #0
 8014318:	4650      	mov	r0, sl
 801431a:	4659      	mov	r1, fp
 801431c:	f7ec fbec 	bl	8000af8 <__aeabi_dcmpeq>
 8014320:	2800      	cmp	r0, #0
 8014322:	d1ac      	bne.n	801427e <_strtod_l+0x566>
 8014324:	9b07      	ldr	r3, [sp, #28]
 8014326:	9300      	str	r3, [sp, #0]
 8014328:	9a05      	ldr	r2, [sp, #20]
 801432a:	9908      	ldr	r1, [sp, #32]
 801432c:	4623      	mov	r3, r4
 801432e:	4648      	mov	r0, r9
 8014330:	f002 f8ad 	bl	801648e <__s2b>
 8014334:	9007      	str	r0, [sp, #28]
 8014336:	2800      	cmp	r0, #0
 8014338:	f43f af08 	beq.w	801414c <_strtod_l+0x434>
 801433c:	9a06      	ldr	r2, [sp, #24]
 801433e:	9b06      	ldr	r3, [sp, #24]
 8014340:	2a00      	cmp	r2, #0
 8014342:	f1c3 0300 	rsb	r3, r3, #0
 8014346:	bfa8      	it	ge
 8014348:	2300      	movge	r3, #0
 801434a:	930e      	str	r3, [sp, #56]	; 0x38
 801434c:	2400      	movs	r4, #0
 801434e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014352:	9316      	str	r3, [sp, #88]	; 0x58
 8014354:	46a0      	mov	r8, r4
 8014356:	9b07      	ldr	r3, [sp, #28]
 8014358:	4648      	mov	r0, r9
 801435a:	6859      	ldr	r1, [r3, #4]
 801435c:	f002 f811 	bl	8016382 <_Balloc>
 8014360:	9005      	str	r0, [sp, #20]
 8014362:	2800      	cmp	r0, #0
 8014364:	f43f aef6 	beq.w	8014154 <_strtod_l+0x43c>
 8014368:	9b07      	ldr	r3, [sp, #28]
 801436a:	691a      	ldr	r2, [r3, #16]
 801436c:	3202      	adds	r2, #2
 801436e:	f103 010c 	add.w	r1, r3, #12
 8014372:	0092      	lsls	r2, r2, #2
 8014374:	300c      	adds	r0, #12
 8014376:	f001 fff9 	bl	801636c <memcpy>
 801437a:	aa1e      	add	r2, sp, #120	; 0x78
 801437c:	a91d      	add	r1, sp, #116	; 0x74
 801437e:	ec4b ab10 	vmov	d0, sl, fp
 8014382:	4648      	mov	r0, r9
 8014384:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014388:	f002 fb3c 	bl	8016a04 <__d2b>
 801438c:	901c      	str	r0, [sp, #112]	; 0x70
 801438e:	2800      	cmp	r0, #0
 8014390:	f43f aee0 	beq.w	8014154 <_strtod_l+0x43c>
 8014394:	2101      	movs	r1, #1
 8014396:	4648      	mov	r0, r9
 8014398:	f002 f905 	bl	80165a6 <__i2b>
 801439c:	4680      	mov	r8, r0
 801439e:	2800      	cmp	r0, #0
 80143a0:	f43f aed8 	beq.w	8014154 <_strtod_l+0x43c>
 80143a4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80143a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80143a8:	2e00      	cmp	r6, #0
 80143aa:	bfab      	itete	ge
 80143ac:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80143ae:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80143b0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80143b2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80143b4:	bfac      	ite	ge
 80143b6:	18f7      	addge	r7, r6, r3
 80143b8:	1b9d      	sublt	r5, r3, r6
 80143ba:	9b04      	ldr	r3, [sp, #16]
 80143bc:	1af6      	subs	r6, r6, r3
 80143be:	4416      	add	r6, r2
 80143c0:	4b63      	ldr	r3, [pc, #396]	; (8014550 <_strtod_l+0x838>)
 80143c2:	3e01      	subs	r6, #1
 80143c4:	429e      	cmp	r6, r3
 80143c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80143ca:	f280 80af 	bge.w	801452c <_strtod_l+0x814>
 80143ce:	1b9b      	subs	r3, r3, r6
 80143d0:	2b1f      	cmp	r3, #31
 80143d2:	eba2 0203 	sub.w	r2, r2, r3
 80143d6:	f04f 0101 	mov.w	r1, #1
 80143da:	f300 809b 	bgt.w	8014514 <_strtod_l+0x7fc>
 80143de:	fa01 f303 	lsl.w	r3, r1, r3
 80143e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80143e4:	2300      	movs	r3, #0
 80143e6:	930a      	str	r3, [sp, #40]	; 0x28
 80143e8:	18be      	adds	r6, r7, r2
 80143ea:	9b04      	ldr	r3, [sp, #16]
 80143ec:	42b7      	cmp	r7, r6
 80143ee:	4415      	add	r5, r2
 80143f0:	441d      	add	r5, r3
 80143f2:	463b      	mov	r3, r7
 80143f4:	bfa8      	it	ge
 80143f6:	4633      	movge	r3, r6
 80143f8:	42ab      	cmp	r3, r5
 80143fa:	bfa8      	it	ge
 80143fc:	462b      	movge	r3, r5
 80143fe:	2b00      	cmp	r3, #0
 8014400:	bfc2      	ittt	gt
 8014402:	1af6      	subgt	r6, r6, r3
 8014404:	1aed      	subgt	r5, r5, r3
 8014406:	1aff      	subgt	r7, r7, r3
 8014408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801440a:	b1bb      	cbz	r3, 801443c <_strtod_l+0x724>
 801440c:	4641      	mov	r1, r8
 801440e:	461a      	mov	r2, r3
 8014410:	4648      	mov	r0, r9
 8014412:	f002 f967 	bl	80166e4 <__pow5mult>
 8014416:	4680      	mov	r8, r0
 8014418:	2800      	cmp	r0, #0
 801441a:	f43f ae9b 	beq.w	8014154 <_strtod_l+0x43c>
 801441e:	4601      	mov	r1, r0
 8014420:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014422:	4648      	mov	r0, r9
 8014424:	f002 f8c8 	bl	80165b8 <__multiply>
 8014428:	900c      	str	r0, [sp, #48]	; 0x30
 801442a:	2800      	cmp	r0, #0
 801442c:	f43f ae92 	beq.w	8014154 <_strtod_l+0x43c>
 8014430:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014432:	4648      	mov	r0, r9
 8014434:	f001 ffd9 	bl	80163ea <_Bfree>
 8014438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801443a:	931c      	str	r3, [sp, #112]	; 0x70
 801443c:	2e00      	cmp	r6, #0
 801443e:	dc7a      	bgt.n	8014536 <_strtod_l+0x81e>
 8014440:	9b06      	ldr	r3, [sp, #24]
 8014442:	2b00      	cmp	r3, #0
 8014444:	dd08      	ble.n	8014458 <_strtod_l+0x740>
 8014446:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014448:	9905      	ldr	r1, [sp, #20]
 801444a:	4648      	mov	r0, r9
 801444c:	f002 f94a 	bl	80166e4 <__pow5mult>
 8014450:	9005      	str	r0, [sp, #20]
 8014452:	2800      	cmp	r0, #0
 8014454:	f43f ae7e 	beq.w	8014154 <_strtod_l+0x43c>
 8014458:	2d00      	cmp	r5, #0
 801445a:	dd08      	ble.n	801446e <_strtod_l+0x756>
 801445c:	462a      	mov	r2, r5
 801445e:	9905      	ldr	r1, [sp, #20]
 8014460:	4648      	mov	r0, r9
 8014462:	f002 f98d 	bl	8016780 <__lshift>
 8014466:	9005      	str	r0, [sp, #20]
 8014468:	2800      	cmp	r0, #0
 801446a:	f43f ae73 	beq.w	8014154 <_strtod_l+0x43c>
 801446e:	2f00      	cmp	r7, #0
 8014470:	dd08      	ble.n	8014484 <_strtod_l+0x76c>
 8014472:	4641      	mov	r1, r8
 8014474:	463a      	mov	r2, r7
 8014476:	4648      	mov	r0, r9
 8014478:	f002 f982 	bl	8016780 <__lshift>
 801447c:	4680      	mov	r8, r0
 801447e:	2800      	cmp	r0, #0
 8014480:	f43f ae68 	beq.w	8014154 <_strtod_l+0x43c>
 8014484:	9a05      	ldr	r2, [sp, #20]
 8014486:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014488:	4648      	mov	r0, r9
 801448a:	f002 f9e7 	bl	801685c <__mdiff>
 801448e:	4604      	mov	r4, r0
 8014490:	2800      	cmp	r0, #0
 8014492:	f43f ae5f 	beq.w	8014154 <_strtod_l+0x43c>
 8014496:	68c3      	ldr	r3, [r0, #12]
 8014498:	930c      	str	r3, [sp, #48]	; 0x30
 801449a:	2300      	movs	r3, #0
 801449c:	60c3      	str	r3, [r0, #12]
 801449e:	4641      	mov	r1, r8
 80144a0:	f002 f9c2 	bl	8016828 <__mcmp>
 80144a4:	2800      	cmp	r0, #0
 80144a6:	da55      	bge.n	8014554 <_strtod_l+0x83c>
 80144a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80144aa:	b9e3      	cbnz	r3, 80144e6 <_strtod_l+0x7ce>
 80144ac:	f1ba 0f00 	cmp.w	sl, #0
 80144b0:	d119      	bne.n	80144e6 <_strtod_l+0x7ce>
 80144b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80144b6:	b9b3      	cbnz	r3, 80144e6 <_strtod_l+0x7ce>
 80144b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80144bc:	0d1b      	lsrs	r3, r3, #20
 80144be:	051b      	lsls	r3, r3, #20
 80144c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80144c4:	d90f      	bls.n	80144e6 <_strtod_l+0x7ce>
 80144c6:	6963      	ldr	r3, [r4, #20]
 80144c8:	b913      	cbnz	r3, 80144d0 <_strtod_l+0x7b8>
 80144ca:	6923      	ldr	r3, [r4, #16]
 80144cc:	2b01      	cmp	r3, #1
 80144ce:	dd0a      	ble.n	80144e6 <_strtod_l+0x7ce>
 80144d0:	4621      	mov	r1, r4
 80144d2:	2201      	movs	r2, #1
 80144d4:	4648      	mov	r0, r9
 80144d6:	f002 f953 	bl	8016780 <__lshift>
 80144da:	4641      	mov	r1, r8
 80144dc:	4604      	mov	r4, r0
 80144de:	f002 f9a3 	bl	8016828 <__mcmp>
 80144e2:	2800      	cmp	r0, #0
 80144e4:	dc67      	bgt.n	80145b6 <_strtod_l+0x89e>
 80144e6:	9b04      	ldr	r3, [sp, #16]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d171      	bne.n	80145d0 <_strtod_l+0x8b8>
 80144ec:	e63d      	b.n	801416a <_strtod_l+0x452>
 80144ee:	f018 0f01 	tst.w	r8, #1
 80144f2:	d004      	beq.n	80144fe <_strtod_l+0x7e6>
 80144f4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80144f8:	f7ec f896 	bl	8000628 <__aeabi_dmul>
 80144fc:	2301      	movs	r3, #1
 80144fe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014502:	3508      	adds	r5, #8
 8014504:	e6e5      	b.n	80142d2 <_strtod_l+0x5ba>
 8014506:	f04f 32ff 	mov.w	r2, #4294967295
 801450a:	fa02 f303 	lsl.w	r3, r2, r3
 801450e:	ea03 0a0a 	and.w	sl, r3, sl
 8014512:	e6ff      	b.n	8014314 <_strtod_l+0x5fc>
 8014514:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014518:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801451c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014520:	36e2      	adds	r6, #226	; 0xe2
 8014522:	fa01 f306 	lsl.w	r3, r1, r6
 8014526:	930a      	str	r3, [sp, #40]	; 0x28
 8014528:	910f      	str	r1, [sp, #60]	; 0x3c
 801452a:	e75d      	b.n	80143e8 <_strtod_l+0x6d0>
 801452c:	2300      	movs	r3, #0
 801452e:	930a      	str	r3, [sp, #40]	; 0x28
 8014530:	2301      	movs	r3, #1
 8014532:	930f      	str	r3, [sp, #60]	; 0x3c
 8014534:	e758      	b.n	80143e8 <_strtod_l+0x6d0>
 8014536:	4632      	mov	r2, r6
 8014538:	991c      	ldr	r1, [sp, #112]	; 0x70
 801453a:	4648      	mov	r0, r9
 801453c:	f002 f920 	bl	8016780 <__lshift>
 8014540:	901c      	str	r0, [sp, #112]	; 0x70
 8014542:	2800      	cmp	r0, #0
 8014544:	f47f af7c 	bne.w	8014440 <_strtod_l+0x728>
 8014548:	e604      	b.n	8014154 <_strtod_l+0x43c>
 801454a:	bf00      	nop
 801454c:	08018450 	.word	0x08018450
 8014550:	fffffc02 	.word	0xfffffc02
 8014554:	465d      	mov	r5, fp
 8014556:	f040 8086 	bne.w	8014666 <_strtod_l+0x94e>
 801455a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801455c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014560:	b32a      	cbz	r2, 80145ae <_strtod_l+0x896>
 8014562:	4aaf      	ldr	r2, [pc, #700]	; (8014820 <_strtod_l+0xb08>)
 8014564:	4293      	cmp	r3, r2
 8014566:	d153      	bne.n	8014610 <_strtod_l+0x8f8>
 8014568:	9b04      	ldr	r3, [sp, #16]
 801456a:	4650      	mov	r0, sl
 801456c:	b1d3      	cbz	r3, 80145a4 <_strtod_l+0x88c>
 801456e:	4aad      	ldr	r2, [pc, #692]	; (8014824 <_strtod_l+0xb0c>)
 8014570:	402a      	ands	r2, r5
 8014572:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8014576:	f04f 31ff 	mov.w	r1, #4294967295
 801457a:	d816      	bhi.n	80145aa <_strtod_l+0x892>
 801457c:	0d12      	lsrs	r2, r2, #20
 801457e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8014582:	fa01 f303 	lsl.w	r3, r1, r3
 8014586:	4298      	cmp	r0, r3
 8014588:	d142      	bne.n	8014610 <_strtod_l+0x8f8>
 801458a:	4ba7      	ldr	r3, [pc, #668]	; (8014828 <_strtod_l+0xb10>)
 801458c:	429d      	cmp	r5, r3
 801458e:	d102      	bne.n	8014596 <_strtod_l+0x87e>
 8014590:	3001      	adds	r0, #1
 8014592:	f43f addf 	beq.w	8014154 <_strtod_l+0x43c>
 8014596:	4ba3      	ldr	r3, [pc, #652]	; (8014824 <_strtod_l+0xb0c>)
 8014598:	402b      	ands	r3, r5
 801459a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801459e:	f04f 0a00 	mov.w	sl, #0
 80145a2:	e7a0      	b.n	80144e6 <_strtod_l+0x7ce>
 80145a4:	f04f 33ff 	mov.w	r3, #4294967295
 80145a8:	e7ed      	b.n	8014586 <_strtod_l+0x86e>
 80145aa:	460b      	mov	r3, r1
 80145ac:	e7eb      	b.n	8014586 <_strtod_l+0x86e>
 80145ae:	bb7b      	cbnz	r3, 8014610 <_strtod_l+0x8f8>
 80145b0:	f1ba 0f00 	cmp.w	sl, #0
 80145b4:	d12c      	bne.n	8014610 <_strtod_l+0x8f8>
 80145b6:	9904      	ldr	r1, [sp, #16]
 80145b8:	4a9a      	ldr	r2, [pc, #616]	; (8014824 <_strtod_l+0xb0c>)
 80145ba:	465b      	mov	r3, fp
 80145bc:	b1f1      	cbz	r1, 80145fc <_strtod_l+0x8e4>
 80145be:	ea02 010b 	and.w	r1, r2, fp
 80145c2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80145c6:	dc19      	bgt.n	80145fc <_strtod_l+0x8e4>
 80145c8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80145cc:	f77f ae5b 	ble.w	8014286 <_strtod_l+0x56e>
 80145d0:	4a96      	ldr	r2, [pc, #600]	; (801482c <_strtod_l+0xb14>)
 80145d2:	2300      	movs	r3, #0
 80145d4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80145d8:	4650      	mov	r0, sl
 80145da:	4659      	mov	r1, fp
 80145dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80145e0:	f7ec f822 	bl	8000628 <__aeabi_dmul>
 80145e4:	4682      	mov	sl, r0
 80145e6:	468b      	mov	fp, r1
 80145e8:	2900      	cmp	r1, #0
 80145ea:	f47f adbe 	bne.w	801416a <_strtod_l+0x452>
 80145ee:	2800      	cmp	r0, #0
 80145f0:	f47f adbb 	bne.w	801416a <_strtod_l+0x452>
 80145f4:	2322      	movs	r3, #34	; 0x22
 80145f6:	f8c9 3000 	str.w	r3, [r9]
 80145fa:	e5b6      	b.n	801416a <_strtod_l+0x452>
 80145fc:	4013      	ands	r3, r2
 80145fe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014602:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014606:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801460a:	f04f 3aff 	mov.w	sl, #4294967295
 801460e:	e76a      	b.n	80144e6 <_strtod_l+0x7ce>
 8014610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014612:	b193      	cbz	r3, 801463a <_strtod_l+0x922>
 8014614:	422b      	tst	r3, r5
 8014616:	f43f af66 	beq.w	80144e6 <_strtod_l+0x7ce>
 801461a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801461c:	9a04      	ldr	r2, [sp, #16]
 801461e:	4650      	mov	r0, sl
 8014620:	4659      	mov	r1, fp
 8014622:	b173      	cbz	r3, 8014642 <_strtod_l+0x92a>
 8014624:	f7ff fb5b 	bl	8013cde <sulp>
 8014628:	4602      	mov	r2, r0
 801462a:	460b      	mov	r3, r1
 801462c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014630:	f7eb fe44 	bl	80002bc <__adddf3>
 8014634:	4682      	mov	sl, r0
 8014636:	468b      	mov	fp, r1
 8014638:	e755      	b.n	80144e6 <_strtod_l+0x7ce>
 801463a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801463c:	ea13 0f0a 	tst.w	r3, sl
 8014640:	e7e9      	b.n	8014616 <_strtod_l+0x8fe>
 8014642:	f7ff fb4c 	bl	8013cde <sulp>
 8014646:	4602      	mov	r2, r0
 8014648:	460b      	mov	r3, r1
 801464a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801464e:	f7eb fe33 	bl	80002b8 <__aeabi_dsub>
 8014652:	2200      	movs	r2, #0
 8014654:	2300      	movs	r3, #0
 8014656:	4682      	mov	sl, r0
 8014658:	468b      	mov	fp, r1
 801465a:	f7ec fa4d 	bl	8000af8 <__aeabi_dcmpeq>
 801465e:	2800      	cmp	r0, #0
 8014660:	f47f ae11 	bne.w	8014286 <_strtod_l+0x56e>
 8014664:	e73f      	b.n	80144e6 <_strtod_l+0x7ce>
 8014666:	4641      	mov	r1, r8
 8014668:	4620      	mov	r0, r4
 801466a:	f002 fa1a 	bl	8016aa2 <__ratio>
 801466e:	ec57 6b10 	vmov	r6, r7, d0
 8014672:	2200      	movs	r2, #0
 8014674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014678:	ee10 0a10 	vmov	r0, s0
 801467c:	4639      	mov	r1, r7
 801467e:	f7ec fa4f 	bl	8000b20 <__aeabi_dcmple>
 8014682:	2800      	cmp	r0, #0
 8014684:	d077      	beq.n	8014776 <_strtod_l+0xa5e>
 8014686:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014688:	2b00      	cmp	r3, #0
 801468a:	d04a      	beq.n	8014722 <_strtod_l+0xa0a>
 801468c:	4b68      	ldr	r3, [pc, #416]	; (8014830 <_strtod_l+0xb18>)
 801468e:	2200      	movs	r2, #0
 8014690:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014694:	4f66      	ldr	r7, [pc, #408]	; (8014830 <_strtod_l+0xb18>)
 8014696:	2600      	movs	r6, #0
 8014698:	4b62      	ldr	r3, [pc, #392]	; (8014824 <_strtod_l+0xb0c>)
 801469a:	402b      	ands	r3, r5
 801469c:	930f      	str	r3, [sp, #60]	; 0x3c
 801469e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80146a0:	4b64      	ldr	r3, [pc, #400]	; (8014834 <_strtod_l+0xb1c>)
 80146a2:	429a      	cmp	r2, r3
 80146a4:	f040 80ce 	bne.w	8014844 <_strtod_l+0xb2c>
 80146a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80146ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80146b0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80146b4:	ec4b ab10 	vmov	d0, sl, fp
 80146b8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80146bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80146c0:	f002 f92a 	bl	8016918 <__ulp>
 80146c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80146c8:	ec53 2b10 	vmov	r2, r3, d0
 80146cc:	f7eb ffac 	bl	8000628 <__aeabi_dmul>
 80146d0:	4652      	mov	r2, sl
 80146d2:	465b      	mov	r3, fp
 80146d4:	f7eb fdf2 	bl	80002bc <__adddf3>
 80146d8:	460b      	mov	r3, r1
 80146da:	4952      	ldr	r1, [pc, #328]	; (8014824 <_strtod_l+0xb0c>)
 80146dc:	4a56      	ldr	r2, [pc, #344]	; (8014838 <_strtod_l+0xb20>)
 80146de:	4019      	ands	r1, r3
 80146e0:	4291      	cmp	r1, r2
 80146e2:	4682      	mov	sl, r0
 80146e4:	d95b      	bls.n	801479e <_strtod_l+0xa86>
 80146e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146e8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80146ec:	4293      	cmp	r3, r2
 80146ee:	d103      	bne.n	80146f8 <_strtod_l+0x9e0>
 80146f0:	9b08      	ldr	r3, [sp, #32]
 80146f2:	3301      	adds	r3, #1
 80146f4:	f43f ad2e 	beq.w	8014154 <_strtod_l+0x43c>
 80146f8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014828 <_strtod_l+0xb10>
 80146fc:	f04f 3aff 	mov.w	sl, #4294967295
 8014700:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014702:	4648      	mov	r0, r9
 8014704:	f001 fe71 	bl	80163ea <_Bfree>
 8014708:	9905      	ldr	r1, [sp, #20]
 801470a:	4648      	mov	r0, r9
 801470c:	f001 fe6d 	bl	80163ea <_Bfree>
 8014710:	4641      	mov	r1, r8
 8014712:	4648      	mov	r0, r9
 8014714:	f001 fe69 	bl	80163ea <_Bfree>
 8014718:	4621      	mov	r1, r4
 801471a:	4648      	mov	r0, r9
 801471c:	f001 fe65 	bl	80163ea <_Bfree>
 8014720:	e619      	b.n	8014356 <_strtod_l+0x63e>
 8014722:	f1ba 0f00 	cmp.w	sl, #0
 8014726:	d11a      	bne.n	801475e <_strtod_l+0xa46>
 8014728:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801472c:	b9eb      	cbnz	r3, 801476a <_strtod_l+0xa52>
 801472e:	2200      	movs	r2, #0
 8014730:	4b3f      	ldr	r3, [pc, #252]	; (8014830 <_strtod_l+0xb18>)
 8014732:	4630      	mov	r0, r6
 8014734:	4639      	mov	r1, r7
 8014736:	f7ec f9e9 	bl	8000b0c <__aeabi_dcmplt>
 801473a:	b9c8      	cbnz	r0, 8014770 <_strtod_l+0xa58>
 801473c:	4630      	mov	r0, r6
 801473e:	4639      	mov	r1, r7
 8014740:	2200      	movs	r2, #0
 8014742:	4b3e      	ldr	r3, [pc, #248]	; (801483c <_strtod_l+0xb24>)
 8014744:	f7eb ff70 	bl	8000628 <__aeabi_dmul>
 8014748:	4606      	mov	r6, r0
 801474a:	460f      	mov	r7, r1
 801474c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014750:	9618      	str	r6, [sp, #96]	; 0x60
 8014752:	9319      	str	r3, [sp, #100]	; 0x64
 8014754:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014758:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801475c:	e79c      	b.n	8014698 <_strtod_l+0x980>
 801475e:	f1ba 0f01 	cmp.w	sl, #1
 8014762:	d102      	bne.n	801476a <_strtod_l+0xa52>
 8014764:	2d00      	cmp	r5, #0
 8014766:	f43f ad8e 	beq.w	8014286 <_strtod_l+0x56e>
 801476a:	2200      	movs	r2, #0
 801476c:	4b34      	ldr	r3, [pc, #208]	; (8014840 <_strtod_l+0xb28>)
 801476e:	e78f      	b.n	8014690 <_strtod_l+0x978>
 8014770:	2600      	movs	r6, #0
 8014772:	4f32      	ldr	r7, [pc, #200]	; (801483c <_strtod_l+0xb24>)
 8014774:	e7ea      	b.n	801474c <_strtod_l+0xa34>
 8014776:	4b31      	ldr	r3, [pc, #196]	; (801483c <_strtod_l+0xb24>)
 8014778:	4630      	mov	r0, r6
 801477a:	4639      	mov	r1, r7
 801477c:	2200      	movs	r2, #0
 801477e:	f7eb ff53 	bl	8000628 <__aeabi_dmul>
 8014782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014784:	4606      	mov	r6, r0
 8014786:	460f      	mov	r7, r1
 8014788:	b933      	cbnz	r3, 8014798 <_strtod_l+0xa80>
 801478a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801478e:	9010      	str	r0, [sp, #64]	; 0x40
 8014790:	9311      	str	r3, [sp, #68]	; 0x44
 8014792:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014796:	e7df      	b.n	8014758 <_strtod_l+0xa40>
 8014798:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801479c:	e7f9      	b.n	8014792 <_strtod_l+0xa7a>
 801479e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80147a2:	9b04      	ldr	r3, [sp, #16]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d1ab      	bne.n	8014700 <_strtod_l+0x9e8>
 80147a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80147ac:	0d1b      	lsrs	r3, r3, #20
 80147ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80147b0:	051b      	lsls	r3, r3, #20
 80147b2:	429a      	cmp	r2, r3
 80147b4:	465d      	mov	r5, fp
 80147b6:	d1a3      	bne.n	8014700 <_strtod_l+0x9e8>
 80147b8:	4639      	mov	r1, r7
 80147ba:	4630      	mov	r0, r6
 80147bc:	f7ec f9e4 	bl	8000b88 <__aeabi_d2iz>
 80147c0:	f7eb fec8 	bl	8000554 <__aeabi_i2d>
 80147c4:	460b      	mov	r3, r1
 80147c6:	4602      	mov	r2, r0
 80147c8:	4639      	mov	r1, r7
 80147ca:	4630      	mov	r0, r6
 80147cc:	f7eb fd74 	bl	80002b8 <__aeabi_dsub>
 80147d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147d2:	4606      	mov	r6, r0
 80147d4:	460f      	mov	r7, r1
 80147d6:	b933      	cbnz	r3, 80147e6 <_strtod_l+0xace>
 80147d8:	f1ba 0f00 	cmp.w	sl, #0
 80147dc:	d103      	bne.n	80147e6 <_strtod_l+0xace>
 80147de:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80147e2:	2d00      	cmp	r5, #0
 80147e4:	d06d      	beq.n	80148c2 <_strtod_l+0xbaa>
 80147e6:	a30a      	add	r3, pc, #40	; (adr r3, 8014810 <_strtod_l+0xaf8>)
 80147e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ec:	4630      	mov	r0, r6
 80147ee:	4639      	mov	r1, r7
 80147f0:	f7ec f98c 	bl	8000b0c <__aeabi_dcmplt>
 80147f4:	2800      	cmp	r0, #0
 80147f6:	f47f acb8 	bne.w	801416a <_strtod_l+0x452>
 80147fa:	a307      	add	r3, pc, #28	; (adr r3, 8014818 <_strtod_l+0xb00>)
 80147fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014800:	4630      	mov	r0, r6
 8014802:	4639      	mov	r1, r7
 8014804:	f7ec f9a0 	bl	8000b48 <__aeabi_dcmpgt>
 8014808:	2800      	cmp	r0, #0
 801480a:	f43f af79 	beq.w	8014700 <_strtod_l+0x9e8>
 801480e:	e4ac      	b.n	801416a <_strtod_l+0x452>
 8014810:	94a03595 	.word	0x94a03595
 8014814:	3fdfffff 	.word	0x3fdfffff
 8014818:	35afe535 	.word	0x35afe535
 801481c:	3fe00000 	.word	0x3fe00000
 8014820:	000fffff 	.word	0x000fffff
 8014824:	7ff00000 	.word	0x7ff00000
 8014828:	7fefffff 	.word	0x7fefffff
 801482c:	39500000 	.word	0x39500000
 8014830:	3ff00000 	.word	0x3ff00000
 8014834:	7fe00000 	.word	0x7fe00000
 8014838:	7c9fffff 	.word	0x7c9fffff
 801483c:	3fe00000 	.word	0x3fe00000
 8014840:	bff00000 	.word	0xbff00000
 8014844:	9b04      	ldr	r3, [sp, #16]
 8014846:	b333      	cbz	r3, 8014896 <_strtod_l+0xb7e>
 8014848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801484a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801484e:	d822      	bhi.n	8014896 <_strtod_l+0xb7e>
 8014850:	a327      	add	r3, pc, #156	; (adr r3, 80148f0 <_strtod_l+0xbd8>)
 8014852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014856:	4630      	mov	r0, r6
 8014858:	4639      	mov	r1, r7
 801485a:	f7ec f961 	bl	8000b20 <__aeabi_dcmple>
 801485e:	b1a0      	cbz	r0, 801488a <_strtod_l+0xb72>
 8014860:	4639      	mov	r1, r7
 8014862:	4630      	mov	r0, r6
 8014864:	f7ec f9b8 	bl	8000bd8 <__aeabi_d2uiz>
 8014868:	2800      	cmp	r0, #0
 801486a:	bf08      	it	eq
 801486c:	2001      	moveq	r0, #1
 801486e:	f7eb fe61 	bl	8000534 <__aeabi_ui2d>
 8014872:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014874:	4606      	mov	r6, r0
 8014876:	460f      	mov	r7, r1
 8014878:	bb03      	cbnz	r3, 80148bc <_strtod_l+0xba4>
 801487a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801487e:	9012      	str	r0, [sp, #72]	; 0x48
 8014880:	9313      	str	r3, [sp, #76]	; 0x4c
 8014882:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014886:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801488a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801488c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801488e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014892:	1a9b      	subs	r3, r3, r2
 8014894:	930b      	str	r3, [sp, #44]	; 0x2c
 8014896:	ed9d 0b08 	vldr	d0, [sp, #32]
 801489a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801489e:	f002 f83b 	bl	8016918 <__ulp>
 80148a2:	4650      	mov	r0, sl
 80148a4:	ec53 2b10 	vmov	r2, r3, d0
 80148a8:	4659      	mov	r1, fp
 80148aa:	f7eb febd 	bl	8000628 <__aeabi_dmul>
 80148ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80148b2:	f7eb fd03 	bl	80002bc <__adddf3>
 80148b6:	4682      	mov	sl, r0
 80148b8:	468b      	mov	fp, r1
 80148ba:	e772      	b.n	80147a2 <_strtod_l+0xa8a>
 80148bc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80148c0:	e7df      	b.n	8014882 <_strtod_l+0xb6a>
 80148c2:	a30d      	add	r3, pc, #52	; (adr r3, 80148f8 <_strtod_l+0xbe0>)
 80148c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148c8:	f7ec f920 	bl	8000b0c <__aeabi_dcmplt>
 80148cc:	e79c      	b.n	8014808 <_strtod_l+0xaf0>
 80148ce:	2300      	movs	r3, #0
 80148d0:	930d      	str	r3, [sp, #52]	; 0x34
 80148d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80148d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80148d6:	6013      	str	r3, [r2, #0]
 80148d8:	f7ff ba61 	b.w	8013d9e <_strtod_l+0x86>
 80148dc:	2b65      	cmp	r3, #101	; 0x65
 80148de:	f04f 0200 	mov.w	r2, #0
 80148e2:	f43f ab4e 	beq.w	8013f82 <_strtod_l+0x26a>
 80148e6:	2101      	movs	r1, #1
 80148e8:	4614      	mov	r4, r2
 80148ea:	9104      	str	r1, [sp, #16]
 80148ec:	f7ff bacb 	b.w	8013e86 <_strtod_l+0x16e>
 80148f0:	ffc00000 	.word	0xffc00000
 80148f4:	41dfffff 	.word	0x41dfffff
 80148f8:	94a03595 	.word	0x94a03595
 80148fc:	3fcfffff 	.word	0x3fcfffff

08014900 <_strtod_r>:
 8014900:	4b05      	ldr	r3, [pc, #20]	; (8014918 <_strtod_r+0x18>)
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	b410      	push	{r4}
 8014906:	6a1b      	ldr	r3, [r3, #32]
 8014908:	4c04      	ldr	r4, [pc, #16]	; (801491c <_strtod_r+0x1c>)
 801490a:	2b00      	cmp	r3, #0
 801490c:	bf08      	it	eq
 801490e:	4623      	moveq	r3, r4
 8014910:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014914:	f7ff ba00 	b.w	8013d18 <_strtod_l>
 8014918:	2000000c 	.word	0x2000000c
 801491c:	20000070 	.word	0x20000070

08014920 <_strtol_l.isra.0>:
 8014920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014924:	4680      	mov	r8, r0
 8014926:	4689      	mov	r9, r1
 8014928:	4692      	mov	sl, r2
 801492a:	461e      	mov	r6, r3
 801492c:	460f      	mov	r7, r1
 801492e:	463d      	mov	r5, r7
 8014930:	9808      	ldr	r0, [sp, #32]
 8014932:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014936:	f001 fc67 	bl	8016208 <__locale_ctype_ptr_l>
 801493a:	4420      	add	r0, r4
 801493c:	7843      	ldrb	r3, [r0, #1]
 801493e:	f013 0308 	ands.w	r3, r3, #8
 8014942:	d132      	bne.n	80149aa <_strtol_l.isra.0+0x8a>
 8014944:	2c2d      	cmp	r4, #45	; 0x2d
 8014946:	d132      	bne.n	80149ae <_strtol_l.isra.0+0x8e>
 8014948:	787c      	ldrb	r4, [r7, #1]
 801494a:	1cbd      	adds	r5, r7, #2
 801494c:	2201      	movs	r2, #1
 801494e:	2e00      	cmp	r6, #0
 8014950:	d05d      	beq.n	8014a0e <_strtol_l.isra.0+0xee>
 8014952:	2e10      	cmp	r6, #16
 8014954:	d109      	bne.n	801496a <_strtol_l.isra.0+0x4a>
 8014956:	2c30      	cmp	r4, #48	; 0x30
 8014958:	d107      	bne.n	801496a <_strtol_l.isra.0+0x4a>
 801495a:	782b      	ldrb	r3, [r5, #0]
 801495c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014960:	2b58      	cmp	r3, #88	; 0x58
 8014962:	d14f      	bne.n	8014a04 <_strtol_l.isra.0+0xe4>
 8014964:	786c      	ldrb	r4, [r5, #1]
 8014966:	2610      	movs	r6, #16
 8014968:	3502      	adds	r5, #2
 801496a:	2a00      	cmp	r2, #0
 801496c:	bf14      	ite	ne
 801496e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014972:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014976:	2700      	movs	r7, #0
 8014978:	fbb1 fcf6 	udiv	ip, r1, r6
 801497c:	4638      	mov	r0, r7
 801497e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014982:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014986:	2b09      	cmp	r3, #9
 8014988:	d817      	bhi.n	80149ba <_strtol_l.isra.0+0x9a>
 801498a:	461c      	mov	r4, r3
 801498c:	42a6      	cmp	r6, r4
 801498e:	dd23      	ble.n	80149d8 <_strtol_l.isra.0+0xb8>
 8014990:	1c7b      	adds	r3, r7, #1
 8014992:	d007      	beq.n	80149a4 <_strtol_l.isra.0+0x84>
 8014994:	4584      	cmp	ip, r0
 8014996:	d31c      	bcc.n	80149d2 <_strtol_l.isra.0+0xb2>
 8014998:	d101      	bne.n	801499e <_strtol_l.isra.0+0x7e>
 801499a:	45a6      	cmp	lr, r4
 801499c:	db19      	blt.n	80149d2 <_strtol_l.isra.0+0xb2>
 801499e:	fb00 4006 	mla	r0, r0, r6, r4
 80149a2:	2701      	movs	r7, #1
 80149a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80149a8:	e7eb      	b.n	8014982 <_strtol_l.isra.0+0x62>
 80149aa:	462f      	mov	r7, r5
 80149ac:	e7bf      	b.n	801492e <_strtol_l.isra.0+0xe>
 80149ae:	2c2b      	cmp	r4, #43	; 0x2b
 80149b0:	bf04      	itt	eq
 80149b2:	1cbd      	addeq	r5, r7, #2
 80149b4:	787c      	ldrbeq	r4, [r7, #1]
 80149b6:	461a      	mov	r2, r3
 80149b8:	e7c9      	b.n	801494e <_strtol_l.isra.0+0x2e>
 80149ba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80149be:	2b19      	cmp	r3, #25
 80149c0:	d801      	bhi.n	80149c6 <_strtol_l.isra.0+0xa6>
 80149c2:	3c37      	subs	r4, #55	; 0x37
 80149c4:	e7e2      	b.n	801498c <_strtol_l.isra.0+0x6c>
 80149c6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80149ca:	2b19      	cmp	r3, #25
 80149cc:	d804      	bhi.n	80149d8 <_strtol_l.isra.0+0xb8>
 80149ce:	3c57      	subs	r4, #87	; 0x57
 80149d0:	e7dc      	b.n	801498c <_strtol_l.isra.0+0x6c>
 80149d2:	f04f 37ff 	mov.w	r7, #4294967295
 80149d6:	e7e5      	b.n	80149a4 <_strtol_l.isra.0+0x84>
 80149d8:	1c7b      	adds	r3, r7, #1
 80149da:	d108      	bne.n	80149ee <_strtol_l.isra.0+0xce>
 80149dc:	2322      	movs	r3, #34	; 0x22
 80149de:	f8c8 3000 	str.w	r3, [r8]
 80149e2:	4608      	mov	r0, r1
 80149e4:	f1ba 0f00 	cmp.w	sl, #0
 80149e8:	d107      	bne.n	80149fa <_strtol_l.isra.0+0xda>
 80149ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149ee:	b102      	cbz	r2, 80149f2 <_strtol_l.isra.0+0xd2>
 80149f0:	4240      	negs	r0, r0
 80149f2:	f1ba 0f00 	cmp.w	sl, #0
 80149f6:	d0f8      	beq.n	80149ea <_strtol_l.isra.0+0xca>
 80149f8:	b10f      	cbz	r7, 80149fe <_strtol_l.isra.0+0xde>
 80149fa:	f105 39ff 	add.w	r9, r5, #4294967295
 80149fe:	f8ca 9000 	str.w	r9, [sl]
 8014a02:	e7f2      	b.n	80149ea <_strtol_l.isra.0+0xca>
 8014a04:	2430      	movs	r4, #48	; 0x30
 8014a06:	2e00      	cmp	r6, #0
 8014a08:	d1af      	bne.n	801496a <_strtol_l.isra.0+0x4a>
 8014a0a:	2608      	movs	r6, #8
 8014a0c:	e7ad      	b.n	801496a <_strtol_l.isra.0+0x4a>
 8014a0e:	2c30      	cmp	r4, #48	; 0x30
 8014a10:	d0a3      	beq.n	801495a <_strtol_l.isra.0+0x3a>
 8014a12:	260a      	movs	r6, #10
 8014a14:	e7a9      	b.n	801496a <_strtol_l.isra.0+0x4a>
	...

08014a18 <_strtol_r>:
 8014a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014a1a:	4c06      	ldr	r4, [pc, #24]	; (8014a34 <_strtol_r+0x1c>)
 8014a1c:	4d06      	ldr	r5, [pc, #24]	; (8014a38 <_strtol_r+0x20>)
 8014a1e:	6824      	ldr	r4, [r4, #0]
 8014a20:	6a24      	ldr	r4, [r4, #32]
 8014a22:	2c00      	cmp	r4, #0
 8014a24:	bf08      	it	eq
 8014a26:	462c      	moveq	r4, r5
 8014a28:	9400      	str	r4, [sp, #0]
 8014a2a:	f7ff ff79 	bl	8014920 <_strtol_l.isra.0>
 8014a2e:	b003      	add	sp, #12
 8014a30:	bd30      	pop	{r4, r5, pc}
 8014a32:	bf00      	nop
 8014a34:	2000000c 	.word	0x2000000c
 8014a38:	20000070 	.word	0x20000070

08014a3c <_vsiprintf_r>:
 8014a3c:	b500      	push	{lr}
 8014a3e:	b09b      	sub	sp, #108	; 0x6c
 8014a40:	9100      	str	r1, [sp, #0]
 8014a42:	9104      	str	r1, [sp, #16]
 8014a44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014a48:	9105      	str	r1, [sp, #20]
 8014a4a:	9102      	str	r1, [sp, #8]
 8014a4c:	4905      	ldr	r1, [pc, #20]	; (8014a64 <_vsiprintf_r+0x28>)
 8014a4e:	9103      	str	r1, [sp, #12]
 8014a50:	4669      	mov	r1, sp
 8014a52:	f002 f9a5 	bl	8016da0 <_svfiprintf_r>
 8014a56:	9b00      	ldr	r3, [sp, #0]
 8014a58:	2200      	movs	r2, #0
 8014a5a:	701a      	strb	r2, [r3, #0]
 8014a5c:	b01b      	add	sp, #108	; 0x6c
 8014a5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014a62:	bf00      	nop
 8014a64:	ffff0208 	.word	0xffff0208

08014a68 <vsiprintf>:
 8014a68:	4613      	mov	r3, r2
 8014a6a:	460a      	mov	r2, r1
 8014a6c:	4601      	mov	r1, r0
 8014a6e:	4802      	ldr	r0, [pc, #8]	; (8014a78 <vsiprintf+0x10>)
 8014a70:	6800      	ldr	r0, [r0, #0]
 8014a72:	f7ff bfe3 	b.w	8014a3c <_vsiprintf_r>
 8014a76:	bf00      	nop
 8014a78:	2000000c 	.word	0x2000000c

08014a7c <__swbuf_r>:
 8014a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a7e:	460e      	mov	r6, r1
 8014a80:	4614      	mov	r4, r2
 8014a82:	4605      	mov	r5, r0
 8014a84:	b118      	cbz	r0, 8014a8e <__swbuf_r+0x12>
 8014a86:	6983      	ldr	r3, [r0, #24]
 8014a88:	b90b      	cbnz	r3, 8014a8e <__swbuf_r+0x12>
 8014a8a:	f001 f80d 	bl	8015aa8 <__sinit>
 8014a8e:	4b21      	ldr	r3, [pc, #132]	; (8014b14 <__swbuf_r+0x98>)
 8014a90:	429c      	cmp	r4, r3
 8014a92:	d12a      	bne.n	8014aea <__swbuf_r+0x6e>
 8014a94:	686c      	ldr	r4, [r5, #4]
 8014a96:	69a3      	ldr	r3, [r4, #24]
 8014a98:	60a3      	str	r3, [r4, #8]
 8014a9a:	89a3      	ldrh	r3, [r4, #12]
 8014a9c:	071a      	lsls	r2, r3, #28
 8014a9e:	d52e      	bpl.n	8014afe <__swbuf_r+0x82>
 8014aa0:	6923      	ldr	r3, [r4, #16]
 8014aa2:	b363      	cbz	r3, 8014afe <__swbuf_r+0x82>
 8014aa4:	6923      	ldr	r3, [r4, #16]
 8014aa6:	6820      	ldr	r0, [r4, #0]
 8014aa8:	1ac0      	subs	r0, r0, r3
 8014aaa:	6963      	ldr	r3, [r4, #20]
 8014aac:	b2f6      	uxtb	r6, r6
 8014aae:	4283      	cmp	r3, r0
 8014ab0:	4637      	mov	r7, r6
 8014ab2:	dc04      	bgt.n	8014abe <__swbuf_r+0x42>
 8014ab4:	4621      	mov	r1, r4
 8014ab6:	4628      	mov	r0, r5
 8014ab8:	f000 ff8c 	bl	80159d4 <_fflush_r>
 8014abc:	bb28      	cbnz	r0, 8014b0a <__swbuf_r+0x8e>
 8014abe:	68a3      	ldr	r3, [r4, #8]
 8014ac0:	3b01      	subs	r3, #1
 8014ac2:	60a3      	str	r3, [r4, #8]
 8014ac4:	6823      	ldr	r3, [r4, #0]
 8014ac6:	1c5a      	adds	r2, r3, #1
 8014ac8:	6022      	str	r2, [r4, #0]
 8014aca:	701e      	strb	r6, [r3, #0]
 8014acc:	6963      	ldr	r3, [r4, #20]
 8014ace:	3001      	adds	r0, #1
 8014ad0:	4283      	cmp	r3, r0
 8014ad2:	d004      	beq.n	8014ade <__swbuf_r+0x62>
 8014ad4:	89a3      	ldrh	r3, [r4, #12]
 8014ad6:	07db      	lsls	r3, r3, #31
 8014ad8:	d519      	bpl.n	8014b0e <__swbuf_r+0x92>
 8014ada:	2e0a      	cmp	r6, #10
 8014adc:	d117      	bne.n	8014b0e <__swbuf_r+0x92>
 8014ade:	4621      	mov	r1, r4
 8014ae0:	4628      	mov	r0, r5
 8014ae2:	f000 ff77 	bl	80159d4 <_fflush_r>
 8014ae6:	b190      	cbz	r0, 8014b0e <__swbuf_r+0x92>
 8014ae8:	e00f      	b.n	8014b0a <__swbuf_r+0x8e>
 8014aea:	4b0b      	ldr	r3, [pc, #44]	; (8014b18 <__swbuf_r+0x9c>)
 8014aec:	429c      	cmp	r4, r3
 8014aee:	d101      	bne.n	8014af4 <__swbuf_r+0x78>
 8014af0:	68ac      	ldr	r4, [r5, #8]
 8014af2:	e7d0      	b.n	8014a96 <__swbuf_r+0x1a>
 8014af4:	4b09      	ldr	r3, [pc, #36]	; (8014b1c <__swbuf_r+0xa0>)
 8014af6:	429c      	cmp	r4, r3
 8014af8:	bf08      	it	eq
 8014afa:	68ec      	ldreq	r4, [r5, #12]
 8014afc:	e7cb      	b.n	8014a96 <__swbuf_r+0x1a>
 8014afe:	4621      	mov	r1, r4
 8014b00:	4628      	mov	r0, r5
 8014b02:	f000 f81f 	bl	8014b44 <__swsetup_r>
 8014b06:	2800      	cmp	r0, #0
 8014b08:	d0cc      	beq.n	8014aa4 <__swbuf_r+0x28>
 8014b0a:	f04f 37ff 	mov.w	r7, #4294967295
 8014b0e:	4638      	mov	r0, r7
 8014b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b12:	bf00      	nop
 8014b14:	080184a8 	.word	0x080184a8
 8014b18:	080184c8 	.word	0x080184c8
 8014b1c:	08018488 	.word	0x08018488

08014b20 <_write_r>:
 8014b20:	b538      	push	{r3, r4, r5, lr}
 8014b22:	4c07      	ldr	r4, [pc, #28]	; (8014b40 <_write_r+0x20>)
 8014b24:	4605      	mov	r5, r0
 8014b26:	4608      	mov	r0, r1
 8014b28:	4611      	mov	r1, r2
 8014b2a:	2200      	movs	r2, #0
 8014b2c:	6022      	str	r2, [r4, #0]
 8014b2e:	461a      	mov	r2, r3
 8014b30:	f7ee ffdd 	bl	8003aee <_write>
 8014b34:	1c43      	adds	r3, r0, #1
 8014b36:	d102      	bne.n	8014b3e <_write_r+0x1e>
 8014b38:	6823      	ldr	r3, [r4, #0]
 8014b3a:	b103      	cbz	r3, 8014b3e <_write_r+0x1e>
 8014b3c:	602b      	str	r3, [r5, #0]
 8014b3e:	bd38      	pop	{r3, r4, r5, pc}
 8014b40:	2003b620 	.word	0x2003b620

08014b44 <__swsetup_r>:
 8014b44:	4b32      	ldr	r3, [pc, #200]	; (8014c10 <__swsetup_r+0xcc>)
 8014b46:	b570      	push	{r4, r5, r6, lr}
 8014b48:	681d      	ldr	r5, [r3, #0]
 8014b4a:	4606      	mov	r6, r0
 8014b4c:	460c      	mov	r4, r1
 8014b4e:	b125      	cbz	r5, 8014b5a <__swsetup_r+0x16>
 8014b50:	69ab      	ldr	r3, [r5, #24]
 8014b52:	b913      	cbnz	r3, 8014b5a <__swsetup_r+0x16>
 8014b54:	4628      	mov	r0, r5
 8014b56:	f000 ffa7 	bl	8015aa8 <__sinit>
 8014b5a:	4b2e      	ldr	r3, [pc, #184]	; (8014c14 <__swsetup_r+0xd0>)
 8014b5c:	429c      	cmp	r4, r3
 8014b5e:	d10f      	bne.n	8014b80 <__swsetup_r+0x3c>
 8014b60:	686c      	ldr	r4, [r5, #4]
 8014b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b66:	b29a      	uxth	r2, r3
 8014b68:	0715      	lsls	r5, r2, #28
 8014b6a:	d42c      	bmi.n	8014bc6 <__swsetup_r+0x82>
 8014b6c:	06d0      	lsls	r0, r2, #27
 8014b6e:	d411      	bmi.n	8014b94 <__swsetup_r+0x50>
 8014b70:	2209      	movs	r2, #9
 8014b72:	6032      	str	r2, [r6, #0]
 8014b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b78:	81a3      	strh	r3, [r4, #12]
 8014b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b7e:	e03e      	b.n	8014bfe <__swsetup_r+0xba>
 8014b80:	4b25      	ldr	r3, [pc, #148]	; (8014c18 <__swsetup_r+0xd4>)
 8014b82:	429c      	cmp	r4, r3
 8014b84:	d101      	bne.n	8014b8a <__swsetup_r+0x46>
 8014b86:	68ac      	ldr	r4, [r5, #8]
 8014b88:	e7eb      	b.n	8014b62 <__swsetup_r+0x1e>
 8014b8a:	4b24      	ldr	r3, [pc, #144]	; (8014c1c <__swsetup_r+0xd8>)
 8014b8c:	429c      	cmp	r4, r3
 8014b8e:	bf08      	it	eq
 8014b90:	68ec      	ldreq	r4, [r5, #12]
 8014b92:	e7e6      	b.n	8014b62 <__swsetup_r+0x1e>
 8014b94:	0751      	lsls	r1, r2, #29
 8014b96:	d512      	bpl.n	8014bbe <__swsetup_r+0x7a>
 8014b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b9a:	b141      	cbz	r1, 8014bae <__swsetup_r+0x6a>
 8014b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ba0:	4299      	cmp	r1, r3
 8014ba2:	d002      	beq.n	8014baa <__swsetup_r+0x66>
 8014ba4:	4630      	mov	r0, r6
 8014ba6:	f001 fff9 	bl	8016b9c <_free_r>
 8014baa:	2300      	movs	r3, #0
 8014bac:	6363      	str	r3, [r4, #52]	; 0x34
 8014bae:	89a3      	ldrh	r3, [r4, #12]
 8014bb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014bb4:	81a3      	strh	r3, [r4, #12]
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	6063      	str	r3, [r4, #4]
 8014bba:	6923      	ldr	r3, [r4, #16]
 8014bbc:	6023      	str	r3, [r4, #0]
 8014bbe:	89a3      	ldrh	r3, [r4, #12]
 8014bc0:	f043 0308 	orr.w	r3, r3, #8
 8014bc4:	81a3      	strh	r3, [r4, #12]
 8014bc6:	6923      	ldr	r3, [r4, #16]
 8014bc8:	b94b      	cbnz	r3, 8014bde <__swsetup_r+0x9a>
 8014bca:	89a3      	ldrh	r3, [r4, #12]
 8014bcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014bd4:	d003      	beq.n	8014bde <__swsetup_r+0x9a>
 8014bd6:	4621      	mov	r1, r4
 8014bd8:	4630      	mov	r0, r6
 8014bda:	f001 fb6d 	bl	80162b8 <__smakebuf_r>
 8014bde:	89a2      	ldrh	r2, [r4, #12]
 8014be0:	f012 0301 	ands.w	r3, r2, #1
 8014be4:	d00c      	beq.n	8014c00 <__swsetup_r+0xbc>
 8014be6:	2300      	movs	r3, #0
 8014be8:	60a3      	str	r3, [r4, #8]
 8014bea:	6963      	ldr	r3, [r4, #20]
 8014bec:	425b      	negs	r3, r3
 8014bee:	61a3      	str	r3, [r4, #24]
 8014bf0:	6923      	ldr	r3, [r4, #16]
 8014bf2:	b953      	cbnz	r3, 8014c0a <__swsetup_r+0xc6>
 8014bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bf8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014bfc:	d1ba      	bne.n	8014b74 <__swsetup_r+0x30>
 8014bfe:	bd70      	pop	{r4, r5, r6, pc}
 8014c00:	0792      	lsls	r2, r2, #30
 8014c02:	bf58      	it	pl
 8014c04:	6963      	ldrpl	r3, [r4, #20]
 8014c06:	60a3      	str	r3, [r4, #8]
 8014c08:	e7f2      	b.n	8014bf0 <__swsetup_r+0xac>
 8014c0a:	2000      	movs	r0, #0
 8014c0c:	e7f7      	b.n	8014bfe <__swsetup_r+0xba>
 8014c0e:	bf00      	nop
 8014c10:	2000000c 	.word	0x2000000c
 8014c14:	080184a8 	.word	0x080184a8
 8014c18:	080184c8 	.word	0x080184c8
 8014c1c:	08018488 	.word	0x08018488

08014c20 <_close_r>:
 8014c20:	b538      	push	{r3, r4, r5, lr}
 8014c22:	4c06      	ldr	r4, [pc, #24]	; (8014c3c <_close_r+0x1c>)
 8014c24:	2300      	movs	r3, #0
 8014c26:	4605      	mov	r5, r0
 8014c28:	4608      	mov	r0, r1
 8014c2a:	6023      	str	r3, [r4, #0]
 8014c2c:	f7f0 fe51 	bl	80058d2 <_close>
 8014c30:	1c43      	adds	r3, r0, #1
 8014c32:	d102      	bne.n	8014c3a <_close_r+0x1a>
 8014c34:	6823      	ldr	r3, [r4, #0]
 8014c36:	b103      	cbz	r3, 8014c3a <_close_r+0x1a>
 8014c38:	602b      	str	r3, [r5, #0]
 8014c3a:	bd38      	pop	{r3, r4, r5, pc}
 8014c3c:	2003b620 	.word	0x2003b620

08014c40 <quorem>:
 8014c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c44:	6903      	ldr	r3, [r0, #16]
 8014c46:	690c      	ldr	r4, [r1, #16]
 8014c48:	42a3      	cmp	r3, r4
 8014c4a:	4680      	mov	r8, r0
 8014c4c:	f2c0 8082 	blt.w	8014d54 <quorem+0x114>
 8014c50:	3c01      	subs	r4, #1
 8014c52:	f101 0714 	add.w	r7, r1, #20
 8014c56:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014c5a:	f100 0614 	add.w	r6, r0, #20
 8014c5e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014c62:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014c66:	eb06 030c 	add.w	r3, r6, ip
 8014c6a:	3501      	adds	r5, #1
 8014c6c:	eb07 090c 	add.w	r9, r7, ip
 8014c70:	9301      	str	r3, [sp, #4]
 8014c72:	fbb0 f5f5 	udiv	r5, r0, r5
 8014c76:	b395      	cbz	r5, 8014cde <quorem+0x9e>
 8014c78:	f04f 0a00 	mov.w	sl, #0
 8014c7c:	4638      	mov	r0, r7
 8014c7e:	46b6      	mov	lr, r6
 8014c80:	46d3      	mov	fp, sl
 8014c82:	f850 2b04 	ldr.w	r2, [r0], #4
 8014c86:	b293      	uxth	r3, r2
 8014c88:	fb05 a303 	mla	r3, r5, r3, sl
 8014c8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014c90:	b29b      	uxth	r3, r3
 8014c92:	ebab 0303 	sub.w	r3, fp, r3
 8014c96:	0c12      	lsrs	r2, r2, #16
 8014c98:	f8de b000 	ldr.w	fp, [lr]
 8014c9c:	fb05 a202 	mla	r2, r5, r2, sl
 8014ca0:	fa13 f38b 	uxtah	r3, r3, fp
 8014ca4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014ca8:	fa1f fb82 	uxth.w	fp, r2
 8014cac:	f8de 2000 	ldr.w	r2, [lr]
 8014cb0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014cb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014cb8:	b29b      	uxth	r3, r3
 8014cba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014cbe:	4581      	cmp	r9, r0
 8014cc0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014cc4:	f84e 3b04 	str.w	r3, [lr], #4
 8014cc8:	d2db      	bcs.n	8014c82 <quorem+0x42>
 8014cca:	f856 300c 	ldr.w	r3, [r6, ip]
 8014cce:	b933      	cbnz	r3, 8014cde <quorem+0x9e>
 8014cd0:	9b01      	ldr	r3, [sp, #4]
 8014cd2:	3b04      	subs	r3, #4
 8014cd4:	429e      	cmp	r6, r3
 8014cd6:	461a      	mov	r2, r3
 8014cd8:	d330      	bcc.n	8014d3c <quorem+0xfc>
 8014cda:	f8c8 4010 	str.w	r4, [r8, #16]
 8014cde:	4640      	mov	r0, r8
 8014ce0:	f001 fda2 	bl	8016828 <__mcmp>
 8014ce4:	2800      	cmp	r0, #0
 8014ce6:	db25      	blt.n	8014d34 <quorem+0xf4>
 8014ce8:	3501      	adds	r5, #1
 8014cea:	4630      	mov	r0, r6
 8014cec:	f04f 0c00 	mov.w	ip, #0
 8014cf0:	f857 2b04 	ldr.w	r2, [r7], #4
 8014cf4:	f8d0 e000 	ldr.w	lr, [r0]
 8014cf8:	b293      	uxth	r3, r2
 8014cfa:	ebac 0303 	sub.w	r3, ip, r3
 8014cfe:	0c12      	lsrs	r2, r2, #16
 8014d00:	fa13 f38e 	uxtah	r3, r3, lr
 8014d04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014d08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014d0c:	b29b      	uxth	r3, r3
 8014d0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014d12:	45b9      	cmp	r9, r7
 8014d14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014d18:	f840 3b04 	str.w	r3, [r0], #4
 8014d1c:	d2e8      	bcs.n	8014cf0 <quorem+0xb0>
 8014d1e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014d22:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014d26:	b92a      	cbnz	r2, 8014d34 <quorem+0xf4>
 8014d28:	3b04      	subs	r3, #4
 8014d2a:	429e      	cmp	r6, r3
 8014d2c:	461a      	mov	r2, r3
 8014d2e:	d30b      	bcc.n	8014d48 <quorem+0x108>
 8014d30:	f8c8 4010 	str.w	r4, [r8, #16]
 8014d34:	4628      	mov	r0, r5
 8014d36:	b003      	add	sp, #12
 8014d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d3c:	6812      	ldr	r2, [r2, #0]
 8014d3e:	3b04      	subs	r3, #4
 8014d40:	2a00      	cmp	r2, #0
 8014d42:	d1ca      	bne.n	8014cda <quorem+0x9a>
 8014d44:	3c01      	subs	r4, #1
 8014d46:	e7c5      	b.n	8014cd4 <quorem+0x94>
 8014d48:	6812      	ldr	r2, [r2, #0]
 8014d4a:	3b04      	subs	r3, #4
 8014d4c:	2a00      	cmp	r2, #0
 8014d4e:	d1ef      	bne.n	8014d30 <quorem+0xf0>
 8014d50:	3c01      	subs	r4, #1
 8014d52:	e7ea      	b.n	8014d2a <quorem+0xea>
 8014d54:	2000      	movs	r0, #0
 8014d56:	e7ee      	b.n	8014d36 <quorem+0xf6>

08014d58 <_dtoa_r>:
 8014d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d5c:	ec57 6b10 	vmov	r6, r7, d0
 8014d60:	b097      	sub	sp, #92	; 0x5c
 8014d62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014d64:	9106      	str	r1, [sp, #24]
 8014d66:	4604      	mov	r4, r0
 8014d68:	920b      	str	r2, [sp, #44]	; 0x2c
 8014d6a:	9312      	str	r3, [sp, #72]	; 0x48
 8014d6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014d70:	e9cd 6700 	strd	r6, r7, [sp]
 8014d74:	b93d      	cbnz	r5, 8014d86 <_dtoa_r+0x2e>
 8014d76:	2010      	movs	r0, #16
 8014d78:	f001 fade 	bl	8016338 <malloc>
 8014d7c:	6260      	str	r0, [r4, #36]	; 0x24
 8014d7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014d82:	6005      	str	r5, [r0, #0]
 8014d84:	60c5      	str	r5, [r0, #12]
 8014d86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d88:	6819      	ldr	r1, [r3, #0]
 8014d8a:	b151      	cbz	r1, 8014da2 <_dtoa_r+0x4a>
 8014d8c:	685a      	ldr	r2, [r3, #4]
 8014d8e:	604a      	str	r2, [r1, #4]
 8014d90:	2301      	movs	r3, #1
 8014d92:	4093      	lsls	r3, r2
 8014d94:	608b      	str	r3, [r1, #8]
 8014d96:	4620      	mov	r0, r4
 8014d98:	f001 fb27 	bl	80163ea <_Bfree>
 8014d9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d9e:	2200      	movs	r2, #0
 8014da0:	601a      	str	r2, [r3, #0]
 8014da2:	1e3b      	subs	r3, r7, #0
 8014da4:	bfbb      	ittet	lt
 8014da6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014daa:	9301      	strlt	r3, [sp, #4]
 8014dac:	2300      	movge	r3, #0
 8014dae:	2201      	movlt	r2, #1
 8014db0:	bfac      	ite	ge
 8014db2:	f8c8 3000 	strge.w	r3, [r8]
 8014db6:	f8c8 2000 	strlt.w	r2, [r8]
 8014dba:	4baf      	ldr	r3, [pc, #700]	; (8015078 <_dtoa_r+0x320>)
 8014dbc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014dc0:	ea33 0308 	bics.w	r3, r3, r8
 8014dc4:	d114      	bne.n	8014df0 <_dtoa_r+0x98>
 8014dc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014dc8:	f242 730f 	movw	r3, #9999	; 0x270f
 8014dcc:	6013      	str	r3, [r2, #0]
 8014dce:	9b00      	ldr	r3, [sp, #0]
 8014dd0:	b923      	cbnz	r3, 8014ddc <_dtoa_r+0x84>
 8014dd2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014dd6:	2800      	cmp	r0, #0
 8014dd8:	f000 8542 	beq.w	8015860 <_dtoa_r+0xb08>
 8014ddc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014dde:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801508c <_dtoa_r+0x334>
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	f000 8544 	beq.w	8015870 <_dtoa_r+0xb18>
 8014de8:	f10b 0303 	add.w	r3, fp, #3
 8014dec:	f000 bd3e 	b.w	801586c <_dtoa_r+0xb14>
 8014df0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014df4:	2200      	movs	r2, #0
 8014df6:	2300      	movs	r3, #0
 8014df8:	4630      	mov	r0, r6
 8014dfa:	4639      	mov	r1, r7
 8014dfc:	f7eb fe7c 	bl	8000af8 <__aeabi_dcmpeq>
 8014e00:	4681      	mov	r9, r0
 8014e02:	b168      	cbz	r0, 8014e20 <_dtoa_r+0xc8>
 8014e04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014e06:	2301      	movs	r3, #1
 8014e08:	6013      	str	r3, [r2, #0]
 8014e0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	f000 8524 	beq.w	801585a <_dtoa_r+0xb02>
 8014e12:	4b9a      	ldr	r3, [pc, #616]	; (801507c <_dtoa_r+0x324>)
 8014e14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014e16:	f103 3bff 	add.w	fp, r3, #4294967295
 8014e1a:	6013      	str	r3, [r2, #0]
 8014e1c:	f000 bd28 	b.w	8015870 <_dtoa_r+0xb18>
 8014e20:	aa14      	add	r2, sp, #80	; 0x50
 8014e22:	a915      	add	r1, sp, #84	; 0x54
 8014e24:	ec47 6b10 	vmov	d0, r6, r7
 8014e28:	4620      	mov	r0, r4
 8014e2a:	f001 fdeb 	bl	8016a04 <__d2b>
 8014e2e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014e32:	9004      	str	r0, [sp, #16]
 8014e34:	2d00      	cmp	r5, #0
 8014e36:	d07c      	beq.n	8014f32 <_dtoa_r+0x1da>
 8014e38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014e3c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014e40:	46b2      	mov	sl, r6
 8014e42:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014e46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014e4a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014e4e:	2200      	movs	r2, #0
 8014e50:	4b8b      	ldr	r3, [pc, #556]	; (8015080 <_dtoa_r+0x328>)
 8014e52:	4650      	mov	r0, sl
 8014e54:	4659      	mov	r1, fp
 8014e56:	f7eb fa2f 	bl	80002b8 <__aeabi_dsub>
 8014e5a:	a381      	add	r3, pc, #516	; (adr r3, 8015060 <_dtoa_r+0x308>)
 8014e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e60:	f7eb fbe2 	bl	8000628 <__aeabi_dmul>
 8014e64:	a380      	add	r3, pc, #512	; (adr r3, 8015068 <_dtoa_r+0x310>)
 8014e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e6a:	f7eb fa27 	bl	80002bc <__adddf3>
 8014e6e:	4606      	mov	r6, r0
 8014e70:	4628      	mov	r0, r5
 8014e72:	460f      	mov	r7, r1
 8014e74:	f7eb fb6e 	bl	8000554 <__aeabi_i2d>
 8014e78:	a37d      	add	r3, pc, #500	; (adr r3, 8015070 <_dtoa_r+0x318>)
 8014e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e7e:	f7eb fbd3 	bl	8000628 <__aeabi_dmul>
 8014e82:	4602      	mov	r2, r0
 8014e84:	460b      	mov	r3, r1
 8014e86:	4630      	mov	r0, r6
 8014e88:	4639      	mov	r1, r7
 8014e8a:	f7eb fa17 	bl	80002bc <__adddf3>
 8014e8e:	4606      	mov	r6, r0
 8014e90:	460f      	mov	r7, r1
 8014e92:	f7eb fe79 	bl	8000b88 <__aeabi_d2iz>
 8014e96:	2200      	movs	r2, #0
 8014e98:	4682      	mov	sl, r0
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	4630      	mov	r0, r6
 8014e9e:	4639      	mov	r1, r7
 8014ea0:	f7eb fe34 	bl	8000b0c <__aeabi_dcmplt>
 8014ea4:	b148      	cbz	r0, 8014eba <_dtoa_r+0x162>
 8014ea6:	4650      	mov	r0, sl
 8014ea8:	f7eb fb54 	bl	8000554 <__aeabi_i2d>
 8014eac:	4632      	mov	r2, r6
 8014eae:	463b      	mov	r3, r7
 8014eb0:	f7eb fe22 	bl	8000af8 <__aeabi_dcmpeq>
 8014eb4:	b908      	cbnz	r0, 8014eba <_dtoa_r+0x162>
 8014eb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014eba:	f1ba 0f16 	cmp.w	sl, #22
 8014ebe:	d859      	bhi.n	8014f74 <_dtoa_r+0x21c>
 8014ec0:	4970      	ldr	r1, [pc, #448]	; (8015084 <_dtoa_r+0x32c>)
 8014ec2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014ec6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014eca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ece:	f7eb fe3b 	bl	8000b48 <__aeabi_dcmpgt>
 8014ed2:	2800      	cmp	r0, #0
 8014ed4:	d050      	beq.n	8014f78 <_dtoa_r+0x220>
 8014ed6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014eda:	2300      	movs	r3, #0
 8014edc:	930f      	str	r3, [sp, #60]	; 0x3c
 8014ede:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014ee0:	1b5d      	subs	r5, r3, r5
 8014ee2:	f1b5 0801 	subs.w	r8, r5, #1
 8014ee6:	bf49      	itett	mi
 8014ee8:	f1c5 0301 	rsbmi	r3, r5, #1
 8014eec:	2300      	movpl	r3, #0
 8014eee:	9305      	strmi	r3, [sp, #20]
 8014ef0:	f04f 0800 	movmi.w	r8, #0
 8014ef4:	bf58      	it	pl
 8014ef6:	9305      	strpl	r3, [sp, #20]
 8014ef8:	f1ba 0f00 	cmp.w	sl, #0
 8014efc:	db3e      	blt.n	8014f7c <_dtoa_r+0x224>
 8014efe:	2300      	movs	r3, #0
 8014f00:	44d0      	add	r8, sl
 8014f02:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014f06:	9307      	str	r3, [sp, #28]
 8014f08:	9b06      	ldr	r3, [sp, #24]
 8014f0a:	2b09      	cmp	r3, #9
 8014f0c:	f200 8090 	bhi.w	8015030 <_dtoa_r+0x2d8>
 8014f10:	2b05      	cmp	r3, #5
 8014f12:	bfc4      	itt	gt
 8014f14:	3b04      	subgt	r3, #4
 8014f16:	9306      	strgt	r3, [sp, #24]
 8014f18:	9b06      	ldr	r3, [sp, #24]
 8014f1a:	f1a3 0302 	sub.w	r3, r3, #2
 8014f1e:	bfcc      	ite	gt
 8014f20:	2500      	movgt	r5, #0
 8014f22:	2501      	movle	r5, #1
 8014f24:	2b03      	cmp	r3, #3
 8014f26:	f200 808f 	bhi.w	8015048 <_dtoa_r+0x2f0>
 8014f2a:	e8df f003 	tbb	[pc, r3]
 8014f2e:	7f7d      	.short	0x7f7d
 8014f30:	7131      	.short	0x7131
 8014f32:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014f36:	441d      	add	r5, r3
 8014f38:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014f3c:	2820      	cmp	r0, #32
 8014f3e:	dd13      	ble.n	8014f68 <_dtoa_r+0x210>
 8014f40:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014f44:	9b00      	ldr	r3, [sp, #0]
 8014f46:	fa08 f800 	lsl.w	r8, r8, r0
 8014f4a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014f4e:	fa23 f000 	lsr.w	r0, r3, r0
 8014f52:	ea48 0000 	orr.w	r0, r8, r0
 8014f56:	f7eb faed 	bl	8000534 <__aeabi_ui2d>
 8014f5a:	2301      	movs	r3, #1
 8014f5c:	4682      	mov	sl, r0
 8014f5e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014f62:	3d01      	subs	r5, #1
 8014f64:	9313      	str	r3, [sp, #76]	; 0x4c
 8014f66:	e772      	b.n	8014e4e <_dtoa_r+0xf6>
 8014f68:	9b00      	ldr	r3, [sp, #0]
 8014f6a:	f1c0 0020 	rsb	r0, r0, #32
 8014f6e:	fa03 f000 	lsl.w	r0, r3, r0
 8014f72:	e7f0      	b.n	8014f56 <_dtoa_r+0x1fe>
 8014f74:	2301      	movs	r3, #1
 8014f76:	e7b1      	b.n	8014edc <_dtoa_r+0x184>
 8014f78:	900f      	str	r0, [sp, #60]	; 0x3c
 8014f7a:	e7b0      	b.n	8014ede <_dtoa_r+0x186>
 8014f7c:	9b05      	ldr	r3, [sp, #20]
 8014f7e:	eba3 030a 	sub.w	r3, r3, sl
 8014f82:	9305      	str	r3, [sp, #20]
 8014f84:	f1ca 0300 	rsb	r3, sl, #0
 8014f88:	9307      	str	r3, [sp, #28]
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	930e      	str	r3, [sp, #56]	; 0x38
 8014f8e:	e7bb      	b.n	8014f08 <_dtoa_r+0x1b0>
 8014f90:	2301      	movs	r3, #1
 8014f92:	930a      	str	r3, [sp, #40]	; 0x28
 8014f94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	dd59      	ble.n	801504e <_dtoa_r+0x2f6>
 8014f9a:	9302      	str	r3, [sp, #8]
 8014f9c:	4699      	mov	r9, r3
 8014f9e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	6072      	str	r2, [r6, #4]
 8014fa4:	2204      	movs	r2, #4
 8014fa6:	f102 0014 	add.w	r0, r2, #20
 8014faa:	4298      	cmp	r0, r3
 8014fac:	6871      	ldr	r1, [r6, #4]
 8014fae:	d953      	bls.n	8015058 <_dtoa_r+0x300>
 8014fb0:	4620      	mov	r0, r4
 8014fb2:	f001 f9e6 	bl	8016382 <_Balloc>
 8014fb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014fb8:	6030      	str	r0, [r6, #0]
 8014fba:	f1b9 0f0e 	cmp.w	r9, #14
 8014fbe:	f8d3 b000 	ldr.w	fp, [r3]
 8014fc2:	f200 80e6 	bhi.w	8015192 <_dtoa_r+0x43a>
 8014fc6:	2d00      	cmp	r5, #0
 8014fc8:	f000 80e3 	beq.w	8015192 <_dtoa_r+0x43a>
 8014fcc:	ed9d 7b00 	vldr	d7, [sp]
 8014fd0:	f1ba 0f00 	cmp.w	sl, #0
 8014fd4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014fd8:	dd74      	ble.n	80150c4 <_dtoa_r+0x36c>
 8014fda:	4a2a      	ldr	r2, [pc, #168]	; (8015084 <_dtoa_r+0x32c>)
 8014fdc:	f00a 030f 	and.w	r3, sl, #15
 8014fe0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014fe4:	ed93 7b00 	vldr	d7, [r3]
 8014fe8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8014fec:	06f0      	lsls	r0, r6, #27
 8014fee:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014ff2:	d565      	bpl.n	80150c0 <_dtoa_r+0x368>
 8014ff4:	4b24      	ldr	r3, [pc, #144]	; (8015088 <_dtoa_r+0x330>)
 8014ff6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014ffa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014ffe:	f7eb fc3d 	bl	800087c <__aeabi_ddiv>
 8015002:	e9cd 0100 	strd	r0, r1, [sp]
 8015006:	f006 060f 	and.w	r6, r6, #15
 801500a:	2503      	movs	r5, #3
 801500c:	4f1e      	ldr	r7, [pc, #120]	; (8015088 <_dtoa_r+0x330>)
 801500e:	e04c      	b.n	80150aa <_dtoa_r+0x352>
 8015010:	2301      	movs	r3, #1
 8015012:	930a      	str	r3, [sp, #40]	; 0x28
 8015014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015016:	4453      	add	r3, sl
 8015018:	f103 0901 	add.w	r9, r3, #1
 801501c:	9302      	str	r3, [sp, #8]
 801501e:	464b      	mov	r3, r9
 8015020:	2b01      	cmp	r3, #1
 8015022:	bfb8      	it	lt
 8015024:	2301      	movlt	r3, #1
 8015026:	e7ba      	b.n	8014f9e <_dtoa_r+0x246>
 8015028:	2300      	movs	r3, #0
 801502a:	e7b2      	b.n	8014f92 <_dtoa_r+0x23a>
 801502c:	2300      	movs	r3, #0
 801502e:	e7f0      	b.n	8015012 <_dtoa_r+0x2ba>
 8015030:	2501      	movs	r5, #1
 8015032:	2300      	movs	r3, #0
 8015034:	9306      	str	r3, [sp, #24]
 8015036:	950a      	str	r5, [sp, #40]	; 0x28
 8015038:	f04f 33ff 	mov.w	r3, #4294967295
 801503c:	9302      	str	r3, [sp, #8]
 801503e:	4699      	mov	r9, r3
 8015040:	2200      	movs	r2, #0
 8015042:	2312      	movs	r3, #18
 8015044:	920b      	str	r2, [sp, #44]	; 0x2c
 8015046:	e7aa      	b.n	8014f9e <_dtoa_r+0x246>
 8015048:	2301      	movs	r3, #1
 801504a:	930a      	str	r3, [sp, #40]	; 0x28
 801504c:	e7f4      	b.n	8015038 <_dtoa_r+0x2e0>
 801504e:	2301      	movs	r3, #1
 8015050:	9302      	str	r3, [sp, #8]
 8015052:	4699      	mov	r9, r3
 8015054:	461a      	mov	r2, r3
 8015056:	e7f5      	b.n	8015044 <_dtoa_r+0x2ec>
 8015058:	3101      	adds	r1, #1
 801505a:	6071      	str	r1, [r6, #4]
 801505c:	0052      	lsls	r2, r2, #1
 801505e:	e7a2      	b.n	8014fa6 <_dtoa_r+0x24e>
 8015060:	636f4361 	.word	0x636f4361
 8015064:	3fd287a7 	.word	0x3fd287a7
 8015068:	8b60c8b3 	.word	0x8b60c8b3
 801506c:	3fc68a28 	.word	0x3fc68a28
 8015070:	509f79fb 	.word	0x509f79fb
 8015074:	3fd34413 	.word	0x3fd34413
 8015078:	7ff00000 	.word	0x7ff00000
 801507c:	0801861c 	.word	0x0801861c
 8015080:	3ff80000 	.word	0x3ff80000
 8015084:	08018520 	.word	0x08018520
 8015088:	080184f8 	.word	0x080184f8
 801508c:	08018481 	.word	0x08018481
 8015090:	07f1      	lsls	r1, r6, #31
 8015092:	d508      	bpl.n	80150a6 <_dtoa_r+0x34e>
 8015094:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015098:	e9d7 2300 	ldrd	r2, r3, [r7]
 801509c:	f7eb fac4 	bl	8000628 <__aeabi_dmul>
 80150a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80150a4:	3501      	adds	r5, #1
 80150a6:	1076      	asrs	r6, r6, #1
 80150a8:	3708      	adds	r7, #8
 80150aa:	2e00      	cmp	r6, #0
 80150ac:	d1f0      	bne.n	8015090 <_dtoa_r+0x338>
 80150ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80150b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150b6:	f7eb fbe1 	bl	800087c <__aeabi_ddiv>
 80150ba:	e9cd 0100 	strd	r0, r1, [sp]
 80150be:	e01a      	b.n	80150f6 <_dtoa_r+0x39e>
 80150c0:	2502      	movs	r5, #2
 80150c2:	e7a3      	b.n	801500c <_dtoa_r+0x2b4>
 80150c4:	f000 80a0 	beq.w	8015208 <_dtoa_r+0x4b0>
 80150c8:	f1ca 0600 	rsb	r6, sl, #0
 80150cc:	4b9f      	ldr	r3, [pc, #636]	; (801534c <_dtoa_r+0x5f4>)
 80150ce:	4fa0      	ldr	r7, [pc, #640]	; (8015350 <_dtoa_r+0x5f8>)
 80150d0:	f006 020f 	and.w	r2, r6, #15
 80150d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80150d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80150e0:	f7eb faa2 	bl	8000628 <__aeabi_dmul>
 80150e4:	e9cd 0100 	strd	r0, r1, [sp]
 80150e8:	1136      	asrs	r6, r6, #4
 80150ea:	2300      	movs	r3, #0
 80150ec:	2502      	movs	r5, #2
 80150ee:	2e00      	cmp	r6, #0
 80150f0:	d17f      	bne.n	80151f2 <_dtoa_r+0x49a>
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d1e1      	bne.n	80150ba <_dtoa_r+0x362>
 80150f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	f000 8087 	beq.w	801520c <_dtoa_r+0x4b4>
 80150fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015102:	2200      	movs	r2, #0
 8015104:	4b93      	ldr	r3, [pc, #588]	; (8015354 <_dtoa_r+0x5fc>)
 8015106:	4630      	mov	r0, r6
 8015108:	4639      	mov	r1, r7
 801510a:	f7eb fcff 	bl	8000b0c <__aeabi_dcmplt>
 801510e:	2800      	cmp	r0, #0
 8015110:	d07c      	beq.n	801520c <_dtoa_r+0x4b4>
 8015112:	f1b9 0f00 	cmp.w	r9, #0
 8015116:	d079      	beq.n	801520c <_dtoa_r+0x4b4>
 8015118:	9b02      	ldr	r3, [sp, #8]
 801511a:	2b00      	cmp	r3, #0
 801511c:	dd35      	ble.n	801518a <_dtoa_r+0x432>
 801511e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015122:	9308      	str	r3, [sp, #32]
 8015124:	4639      	mov	r1, r7
 8015126:	2200      	movs	r2, #0
 8015128:	4b8b      	ldr	r3, [pc, #556]	; (8015358 <_dtoa_r+0x600>)
 801512a:	4630      	mov	r0, r6
 801512c:	f7eb fa7c 	bl	8000628 <__aeabi_dmul>
 8015130:	e9cd 0100 	strd	r0, r1, [sp]
 8015134:	9f02      	ldr	r7, [sp, #8]
 8015136:	3501      	adds	r5, #1
 8015138:	4628      	mov	r0, r5
 801513a:	f7eb fa0b 	bl	8000554 <__aeabi_i2d>
 801513e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015142:	f7eb fa71 	bl	8000628 <__aeabi_dmul>
 8015146:	2200      	movs	r2, #0
 8015148:	4b84      	ldr	r3, [pc, #528]	; (801535c <_dtoa_r+0x604>)
 801514a:	f7eb f8b7 	bl	80002bc <__adddf3>
 801514e:	4605      	mov	r5, r0
 8015150:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015154:	2f00      	cmp	r7, #0
 8015156:	d15d      	bne.n	8015214 <_dtoa_r+0x4bc>
 8015158:	2200      	movs	r2, #0
 801515a:	4b81      	ldr	r3, [pc, #516]	; (8015360 <_dtoa_r+0x608>)
 801515c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015160:	f7eb f8aa 	bl	80002b8 <__aeabi_dsub>
 8015164:	462a      	mov	r2, r5
 8015166:	4633      	mov	r3, r6
 8015168:	e9cd 0100 	strd	r0, r1, [sp]
 801516c:	f7eb fcec 	bl	8000b48 <__aeabi_dcmpgt>
 8015170:	2800      	cmp	r0, #0
 8015172:	f040 8288 	bne.w	8015686 <_dtoa_r+0x92e>
 8015176:	462a      	mov	r2, r5
 8015178:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801517c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015180:	f7eb fcc4 	bl	8000b0c <__aeabi_dcmplt>
 8015184:	2800      	cmp	r0, #0
 8015186:	f040 827c 	bne.w	8015682 <_dtoa_r+0x92a>
 801518a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801518e:	e9cd 2300 	strd	r2, r3, [sp]
 8015192:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015194:	2b00      	cmp	r3, #0
 8015196:	f2c0 8150 	blt.w	801543a <_dtoa_r+0x6e2>
 801519a:	f1ba 0f0e 	cmp.w	sl, #14
 801519e:	f300 814c 	bgt.w	801543a <_dtoa_r+0x6e2>
 80151a2:	4b6a      	ldr	r3, [pc, #424]	; (801534c <_dtoa_r+0x5f4>)
 80151a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80151a8:	ed93 7b00 	vldr	d7, [r3]
 80151ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80151b4:	f280 80d8 	bge.w	8015368 <_dtoa_r+0x610>
 80151b8:	f1b9 0f00 	cmp.w	r9, #0
 80151bc:	f300 80d4 	bgt.w	8015368 <_dtoa_r+0x610>
 80151c0:	f040 825e 	bne.w	8015680 <_dtoa_r+0x928>
 80151c4:	2200      	movs	r2, #0
 80151c6:	4b66      	ldr	r3, [pc, #408]	; (8015360 <_dtoa_r+0x608>)
 80151c8:	ec51 0b17 	vmov	r0, r1, d7
 80151cc:	f7eb fa2c 	bl	8000628 <__aeabi_dmul>
 80151d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151d4:	f7eb fcae 	bl	8000b34 <__aeabi_dcmpge>
 80151d8:	464f      	mov	r7, r9
 80151da:	464e      	mov	r6, r9
 80151dc:	2800      	cmp	r0, #0
 80151de:	f040 8234 	bne.w	801564a <_dtoa_r+0x8f2>
 80151e2:	2331      	movs	r3, #49	; 0x31
 80151e4:	f10b 0501 	add.w	r5, fp, #1
 80151e8:	f88b 3000 	strb.w	r3, [fp]
 80151ec:	f10a 0a01 	add.w	sl, sl, #1
 80151f0:	e22f      	b.n	8015652 <_dtoa_r+0x8fa>
 80151f2:	07f2      	lsls	r2, r6, #31
 80151f4:	d505      	bpl.n	8015202 <_dtoa_r+0x4aa>
 80151f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80151fa:	f7eb fa15 	bl	8000628 <__aeabi_dmul>
 80151fe:	3501      	adds	r5, #1
 8015200:	2301      	movs	r3, #1
 8015202:	1076      	asrs	r6, r6, #1
 8015204:	3708      	adds	r7, #8
 8015206:	e772      	b.n	80150ee <_dtoa_r+0x396>
 8015208:	2502      	movs	r5, #2
 801520a:	e774      	b.n	80150f6 <_dtoa_r+0x39e>
 801520c:	f8cd a020 	str.w	sl, [sp, #32]
 8015210:	464f      	mov	r7, r9
 8015212:	e791      	b.n	8015138 <_dtoa_r+0x3e0>
 8015214:	4b4d      	ldr	r3, [pc, #308]	; (801534c <_dtoa_r+0x5f4>)
 8015216:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801521a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801521e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015220:	2b00      	cmp	r3, #0
 8015222:	d047      	beq.n	80152b4 <_dtoa_r+0x55c>
 8015224:	4602      	mov	r2, r0
 8015226:	460b      	mov	r3, r1
 8015228:	2000      	movs	r0, #0
 801522a:	494e      	ldr	r1, [pc, #312]	; (8015364 <_dtoa_r+0x60c>)
 801522c:	f7eb fb26 	bl	800087c <__aeabi_ddiv>
 8015230:	462a      	mov	r2, r5
 8015232:	4633      	mov	r3, r6
 8015234:	f7eb f840 	bl	80002b8 <__aeabi_dsub>
 8015238:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801523c:	465d      	mov	r5, fp
 801523e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015242:	f7eb fca1 	bl	8000b88 <__aeabi_d2iz>
 8015246:	4606      	mov	r6, r0
 8015248:	f7eb f984 	bl	8000554 <__aeabi_i2d>
 801524c:	4602      	mov	r2, r0
 801524e:	460b      	mov	r3, r1
 8015250:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015254:	f7eb f830 	bl	80002b8 <__aeabi_dsub>
 8015258:	3630      	adds	r6, #48	; 0x30
 801525a:	f805 6b01 	strb.w	r6, [r5], #1
 801525e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015262:	e9cd 0100 	strd	r0, r1, [sp]
 8015266:	f7eb fc51 	bl	8000b0c <__aeabi_dcmplt>
 801526a:	2800      	cmp	r0, #0
 801526c:	d163      	bne.n	8015336 <_dtoa_r+0x5de>
 801526e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015272:	2000      	movs	r0, #0
 8015274:	4937      	ldr	r1, [pc, #220]	; (8015354 <_dtoa_r+0x5fc>)
 8015276:	f7eb f81f 	bl	80002b8 <__aeabi_dsub>
 801527a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801527e:	f7eb fc45 	bl	8000b0c <__aeabi_dcmplt>
 8015282:	2800      	cmp	r0, #0
 8015284:	f040 80b7 	bne.w	80153f6 <_dtoa_r+0x69e>
 8015288:	eba5 030b 	sub.w	r3, r5, fp
 801528c:	429f      	cmp	r7, r3
 801528e:	f77f af7c 	ble.w	801518a <_dtoa_r+0x432>
 8015292:	2200      	movs	r2, #0
 8015294:	4b30      	ldr	r3, [pc, #192]	; (8015358 <_dtoa_r+0x600>)
 8015296:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801529a:	f7eb f9c5 	bl	8000628 <__aeabi_dmul>
 801529e:	2200      	movs	r2, #0
 80152a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80152a4:	4b2c      	ldr	r3, [pc, #176]	; (8015358 <_dtoa_r+0x600>)
 80152a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80152aa:	f7eb f9bd 	bl	8000628 <__aeabi_dmul>
 80152ae:	e9cd 0100 	strd	r0, r1, [sp]
 80152b2:	e7c4      	b.n	801523e <_dtoa_r+0x4e6>
 80152b4:	462a      	mov	r2, r5
 80152b6:	4633      	mov	r3, r6
 80152b8:	f7eb f9b6 	bl	8000628 <__aeabi_dmul>
 80152bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80152c0:	eb0b 0507 	add.w	r5, fp, r7
 80152c4:	465e      	mov	r6, fp
 80152c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80152ca:	f7eb fc5d 	bl	8000b88 <__aeabi_d2iz>
 80152ce:	4607      	mov	r7, r0
 80152d0:	f7eb f940 	bl	8000554 <__aeabi_i2d>
 80152d4:	3730      	adds	r7, #48	; 0x30
 80152d6:	4602      	mov	r2, r0
 80152d8:	460b      	mov	r3, r1
 80152da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80152de:	f7ea ffeb 	bl	80002b8 <__aeabi_dsub>
 80152e2:	f806 7b01 	strb.w	r7, [r6], #1
 80152e6:	42ae      	cmp	r6, r5
 80152e8:	e9cd 0100 	strd	r0, r1, [sp]
 80152ec:	f04f 0200 	mov.w	r2, #0
 80152f0:	d126      	bne.n	8015340 <_dtoa_r+0x5e8>
 80152f2:	4b1c      	ldr	r3, [pc, #112]	; (8015364 <_dtoa_r+0x60c>)
 80152f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80152f8:	f7ea ffe0 	bl	80002bc <__adddf3>
 80152fc:	4602      	mov	r2, r0
 80152fe:	460b      	mov	r3, r1
 8015300:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015304:	f7eb fc20 	bl	8000b48 <__aeabi_dcmpgt>
 8015308:	2800      	cmp	r0, #0
 801530a:	d174      	bne.n	80153f6 <_dtoa_r+0x69e>
 801530c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015310:	2000      	movs	r0, #0
 8015312:	4914      	ldr	r1, [pc, #80]	; (8015364 <_dtoa_r+0x60c>)
 8015314:	f7ea ffd0 	bl	80002b8 <__aeabi_dsub>
 8015318:	4602      	mov	r2, r0
 801531a:	460b      	mov	r3, r1
 801531c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015320:	f7eb fbf4 	bl	8000b0c <__aeabi_dcmplt>
 8015324:	2800      	cmp	r0, #0
 8015326:	f43f af30 	beq.w	801518a <_dtoa_r+0x432>
 801532a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801532e:	2b30      	cmp	r3, #48	; 0x30
 8015330:	f105 32ff 	add.w	r2, r5, #4294967295
 8015334:	d002      	beq.n	801533c <_dtoa_r+0x5e4>
 8015336:	f8dd a020 	ldr.w	sl, [sp, #32]
 801533a:	e04a      	b.n	80153d2 <_dtoa_r+0x67a>
 801533c:	4615      	mov	r5, r2
 801533e:	e7f4      	b.n	801532a <_dtoa_r+0x5d2>
 8015340:	4b05      	ldr	r3, [pc, #20]	; (8015358 <_dtoa_r+0x600>)
 8015342:	f7eb f971 	bl	8000628 <__aeabi_dmul>
 8015346:	e9cd 0100 	strd	r0, r1, [sp]
 801534a:	e7bc      	b.n	80152c6 <_dtoa_r+0x56e>
 801534c:	08018520 	.word	0x08018520
 8015350:	080184f8 	.word	0x080184f8
 8015354:	3ff00000 	.word	0x3ff00000
 8015358:	40240000 	.word	0x40240000
 801535c:	401c0000 	.word	0x401c0000
 8015360:	40140000 	.word	0x40140000
 8015364:	3fe00000 	.word	0x3fe00000
 8015368:	e9dd 6700 	ldrd	r6, r7, [sp]
 801536c:	465d      	mov	r5, fp
 801536e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015372:	4630      	mov	r0, r6
 8015374:	4639      	mov	r1, r7
 8015376:	f7eb fa81 	bl	800087c <__aeabi_ddiv>
 801537a:	f7eb fc05 	bl	8000b88 <__aeabi_d2iz>
 801537e:	4680      	mov	r8, r0
 8015380:	f7eb f8e8 	bl	8000554 <__aeabi_i2d>
 8015384:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015388:	f7eb f94e 	bl	8000628 <__aeabi_dmul>
 801538c:	4602      	mov	r2, r0
 801538e:	460b      	mov	r3, r1
 8015390:	4630      	mov	r0, r6
 8015392:	4639      	mov	r1, r7
 8015394:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015398:	f7ea ff8e 	bl	80002b8 <__aeabi_dsub>
 801539c:	f805 6b01 	strb.w	r6, [r5], #1
 80153a0:	eba5 060b 	sub.w	r6, r5, fp
 80153a4:	45b1      	cmp	r9, r6
 80153a6:	4602      	mov	r2, r0
 80153a8:	460b      	mov	r3, r1
 80153aa:	d139      	bne.n	8015420 <_dtoa_r+0x6c8>
 80153ac:	f7ea ff86 	bl	80002bc <__adddf3>
 80153b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80153b4:	4606      	mov	r6, r0
 80153b6:	460f      	mov	r7, r1
 80153b8:	f7eb fbc6 	bl	8000b48 <__aeabi_dcmpgt>
 80153bc:	b9c8      	cbnz	r0, 80153f2 <_dtoa_r+0x69a>
 80153be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80153c2:	4630      	mov	r0, r6
 80153c4:	4639      	mov	r1, r7
 80153c6:	f7eb fb97 	bl	8000af8 <__aeabi_dcmpeq>
 80153ca:	b110      	cbz	r0, 80153d2 <_dtoa_r+0x67a>
 80153cc:	f018 0f01 	tst.w	r8, #1
 80153d0:	d10f      	bne.n	80153f2 <_dtoa_r+0x69a>
 80153d2:	9904      	ldr	r1, [sp, #16]
 80153d4:	4620      	mov	r0, r4
 80153d6:	f001 f808 	bl	80163ea <_Bfree>
 80153da:	2300      	movs	r3, #0
 80153dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80153de:	702b      	strb	r3, [r5, #0]
 80153e0:	f10a 0301 	add.w	r3, sl, #1
 80153e4:	6013      	str	r3, [r2, #0]
 80153e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	f000 8241 	beq.w	8015870 <_dtoa_r+0xb18>
 80153ee:	601d      	str	r5, [r3, #0]
 80153f0:	e23e      	b.n	8015870 <_dtoa_r+0xb18>
 80153f2:	f8cd a020 	str.w	sl, [sp, #32]
 80153f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80153fa:	2a39      	cmp	r2, #57	; 0x39
 80153fc:	f105 33ff 	add.w	r3, r5, #4294967295
 8015400:	d108      	bne.n	8015414 <_dtoa_r+0x6bc>
 8015402:	459b      	cmp	fp, r3
 8015404:	d10a      	bne.n	801541c <_dtoa_r+0x6c4>
 8015406:	9b08      	ldr	r3, [sp, #32]
 8015408:	3301      	adds	r3, #1
 801540a:	9308      	str	r3, [sp, #32]
 801540c:	2330      	movs	r3, #48	; 0x30
 801540e:	f88b 3000 	strb.w	r3, [fp]
 8015412:	465b      	mov	r3, fp
 8015414:	781a      	ldrb	r2, [r3, #0]
 8015416:	3201      	adds	r2, #1
 8015418:	701a      	strb	r2, [r3, #0]
 801541a:	e78c      	b.n	8015336 <_dtoa_r+0x5de>
 801541c:	461d      	mov	r5, r3
 801541e:	e7ea      	b.n	80153f6 <_dtoa_r+0x69e>
 8015420:	2200      	movs	r2, #0
 8015422:	4b9b      	ldr	r3, [pc, #620]	; (8015690 <_dtoa_r+0x938>)
 8015424:	f7eb f900 	bl	8000628 <__aeabi_dmul>
 8015428:	2200      	movs	r2, #0
 801542a:	2300      	movs	r3, #0
 801542c:	4606      	mov	r6, r0
 801542e:	460f      	mov	r7, r1
 8015430:	f7eb fb62 	bl	8000af8 <__aeabi_dcmpeq>
 8015434:	2800      	cmp	r0, #0
 8015436:	d09a      	beq.n	801536e <_dtoa_r+0x616>
 8015438:	e7cb      	b.n	80153d2 <_dtoa_r+0x67a>
 801543a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801543c:	2a00      	cmp	r2, #0
 801543e:	f000 808b 	beq.w	8015558 <_dtoa_r+0x800>
 8015442:	9a06      	ldr	r2, [sp, #24]
 8015444:	2a01      	cmp	r2, #1
 8015446:	dc6e      	bgt.n	8015526 <_dtoa_r+0x7ce>
 8015448:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801544a:	2a00      	cmp	r2, #0
 801544c:	d067      	beq.n	801551e <_dtoa_r+0x7c6>
 801544e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015452:	9f07      	ldr	r7, [sp, #28]
 8015454:	9d05      	ldr	r5, [sp, #20]
 8015456:	9a05      	ldr	r2, [sp, #20]
 8015458:	2101      	movs	r1, #1
 801545a:	441a      	add	r2, r3
 801545c:	4620      	mov	r0, r4
 801545e:	9205      	str	r2, [sp, #20]
 8015460:	4498      	add	r8, r3
 8015462:	f001 f8a0 	bl	80165a6 <__i2b>
 8015466:	4606      	mov	r6, r0
 8015468:	2d00      	cmp	r5, #0
 801546a:	dd0c      	ble.n	8015486 <_dtoa_r+0x72e>
 801546c:	f1b8 0f00 	cmp.w	r8, #0
 8015470:	dd09      	ble.n	8015486 <_dtoa_r+0x72e>
 8015472:	4545      	cmp	r5, r8
 8015474:	9a05      	ldr	r2, [sp, #20]
 8015476:	462b      	mov	r3, r5
 8015478:	bfa8      	it	ge
 801547a:	4643      	movge	r3, r8
 801547c:	1ad2      	subs	r2, r2, r3
 801547e:	9205      	str	r2, [sp, #20]
 8015480:	1aed      	subs	r5, r5, r3
 8015482:	eba8 0803 	sub.w	r8, r8, r3
 8015486:	9b07      	ldr	r3, [sp, #28]
 8015488:	b1eb      	cbz	r3, 80154c6 <_dtoa_r+0x76e>
 801548a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801548c:	2b00      	cmp	r3, #0
 801548e:	d067      	beq.n	8015560 <_dtoa_r+0x808>
 8015490:	b18f      	cbz	r7, 80154b6 <_dtoa_r+0x75e>
 8015492:	4631      	mov	r1, r6
 8015494:	463a      	mov	r2, r7
 8015496:	4620      	mov	r0, r4
 8015498:	f001 f924 	bl	80166e4 <__pow5mult>
 801549c:	9a04      	ldr	r2, [sp, #16]
 801549e:	4601      	mov	r1, r0
 80154a0:	4606      	mov	r6, r0
 80154a2:	4620      	mov	r0, r4
 80154a4:	f001 f888 	bl	80165b8 <__multiply>
 80154a8:	9904      	ldr	r1, [sp, #16]
 80154aa:	9008      	str	r0, [sp, #32]
 80154ac:	4620      	mov	r0, r4
 80154ae:	f000 ff9c 	bl	80163ea <_Bfree>
 80154b2:	9b08      	ldr	r3, [sp, #32]
 80154b4:	9304      	str	r3, [sp, #16]
 80154b6:	9b07      	ldr	r3, [sp, #28]
 80154b8:	1bda      	subs	r2, r3, r7
 80154ba:	d004      	beq.n	80154c6 <_dtoa_r+0x76e>
 80154bc:	9904      	ldr	r1, [sp, #16]
 80154be:	4620      	mov	r0, r4
 80154c0:	f001 f910 	bl	80166e4 <__pow5mult>
 80154c4:	9004      	str	r0, [sp, #16]
 80154c6:	2101      	movs	r1, #1
 80154c8:	4620      	mov	r0, r4
 80154ca:	f001 f86c 	bl	80165a6 <__i2b>
 80154ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154d0:	4607      	mov	r7, r0
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	f000 81d0 	beq.w	8015878 <_dtoa_r+0xb20>
 80154d8:	461a      	mov	r2, r3
 80154da:	4601      	mov	r1, r0
 80154dc:	4620      	mov	r0, r4
 80154de:	f001 f901 	bl	80166e4 <__pow5mult>
 80154e2:	9b06      	ldr	r3, [sp, #24]
 80154e4:	2b01      	cmp	r3, #1
 80154e6:	4607      	mov	r7, r0
 80154e8:	dc40      	bgt.n	801556c <_dtoa_r+0x814>
 80154ea:	9b00      	ldr	r3, [sp, #0]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d139      	bne.n	8015564 <_dtoa_r+0x80c>
 80154f0:	9b01      	ldr	r3, [sp, #4]
 80154f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d136      	bne.n	8015568 <_dtoa_r+0x810>
 80154fa:	9b01      	ldr	r3, [sp, #4]
 80154fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015500:	0d1b      	lsrs	r3, r3, #20
 8015502:	051b      	lsls	r3, r3, #20
 8015504:	b12b      	cbz	r3, 8015512 <_dtoa_r+0x7ba>
 8015506:	9b05      	ldr	r3, [sp, #20]
 8015508:	3301      	adds	r3, #1
 801550a:	9305      	str	r3, [sp, #20]
 801550c:	f108 0801 	add.w	r8, r8, #1
 8015510:	2301      	movs	r3, #1
 8015512:	9307      	str	r3, [sp, #28]
 8015514:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015516:	2b00      	cmp	r3, #0
 8015518:	d12a      	bne.n	8015570 <_dtoa_r+0x818>
 801551a:	2001      	movs	r0, #1
 801551c:	e030      	b.n	8015580 <_dtoa_r+0x828>
 801551e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015520:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015524:	e795      	b.n	8015452 <_dtoa_r+0x6fa>
 8015526:	9b07      	ldr	r3, [sp, #28]
 8015528:	f109 37ff 	add.w	r7, r9, #4294967295
 801552c:	42bb      	cmp	r3, r7
 801552e:	bfbf      	itttt	lt
 8015530:	9b07      	ldrlt	r3, [sp, #28]
 8015532:	9707      	strlt	r7, [sp, #28]
 8015534:	1afa      	sublt	r2, r7, r3
 8015536:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015538:	bfbb      	ittet	lt
 801553a:	189b      	addlt	r3, r3, r2
 801553c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801553e:	1bdf      	subge	r7, r3, r7
 8015540:	2700      	movlt	r7, #0
 8015542:	f1b9 0f00 	cmp.w	r9, #0
 8015546:	bfb5      	itete	lt
 8015548:	9b05      	ldrlt	r3, [sp, #20]
 801554a:	9d05      	ldrge	r5, [sp, #20]
 801554c:	eba3 0509 	sublt.w	r5, r3, r9
 8015550:	464b      	movge	r3, r9
 8015552:	bfb8      	it	lt
 8015554:	2300      	movlt	r3, #0
 8015556:	e77e      	b.n	8015456 <_dtoa_r+0x6fe>
 8015558:	9f07      	ldr	r7, [sp, #28]
 801555a:	9d05      	ldr	r5, [sp, #20]
 801555c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801555e:	e783      	b.n	8015468 <_dtoa_r+0x710>
 8015560:	9a07      	ldr	r2, [sp, #28]
 8015562:	e7ab      	b.n	80154bc <_dtoa_r+0x764>
 8015564:	2300      	movs	r3, #0
 8015566:	e7d4      	b.n	8015512 <_dtoa_r+0x7ba>
 8015568:	9b00      	ldr	r3, [sp, #0]
 801556a:	e7d2      	b.n	8015512 <_dtoa_r+0x7ba>
 801556c:	2300      	movs	r3, #0
 801556e:	9307      	str	r3, [sp, #28]
 8015570:	693b      	ldr	r3, [r7, #16]
 8015572:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015576:	6918      	ldr	r0, [r3, #16]
 8015578:	f000 ffc7 	bl	801650a <__hi0bits>
 801557c:	f1c0 0020 	rsb	r0, r0, #32
 8015580:	4440      	add	r0, r8
 8015582:	f010 001f 	ands.w	r0, r0, #31
 8015586:	d047      	beq.n	8015618 <_dtoa_r+0x8c0>
 8015588:	f1c0 0320 	rsb	r3, r0, #32
 801558c:	2b04      	cmp	r3, #4
 801558e:	dd3b      	ble.n	8015608 <_dtoa_r+0x8b0>
 8015590:	9b05      	ldr	r3, [sp, #20]
 8015592:	f1c0 001c 	rsb	r0, r0, #28
 8015596:	4403      	add	r3, r0
 8015598:	9305      	str	r3, [sp, #20]
 801559a:	4405      	add	r5, r0
 801559c:	4480      	add	r8, r0
 801559e:	9b05      	ldr	r3, [sp, #20]
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	dd05      	ble.n	80155b0 <_dtoa_r+0x858>
 80155a4:	461a      	mov	r2, r3
 80155a6:	9904      	ldr	r1, [sp, #16]
 80155a8:	4620      	mov	r0, r4
 80155aa:	f001 f8e9 	bl	8016780 <__lshift>
 80155ae:	9004      	str	r0, [sp, #16]
 80155b0:	f1b8 0f00 	cmp.w	r8, #0
 80155b4:	dd05      	ble.n	80155c2 <_dtoa_r+0x86a>
 80155b6:	4639      	mov	r1, r7
 80155b8:	4642      	mov	r2, r8
 80155ba:	4620      	mov	r0, r4
 80155bc:	f001 f8e0 	bl	8016780 <__lshift>
 80155c0:	4607      	mov	r7, r0
 80155c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80155c4:	b353      	cbz	r3, 801561c <_dtoa_r+0x8c4>
 80155c6:	4639      	mov	r1, r7
 80155c8:	9804      	ldr	r0, [sp, #16]
 80155ca:	f001 f92d 	bl	8016828 <__mcmp>
 80155ce:	2800      	cmp	r0, #0
 80155d0:	da24      	bge.n	801561c <_dtoa_r+0x8c4>
 80155d2:	2300      	movs	r3, #0
 80155d4:	220a      	movs	r2, #10
 80155d6:	9904      	ldr	r1, [sp, #16]
 80155d8:	4620      	mov	r0, r4
 80155da:	f000 ff1d 	bl	8016418 <__multadd>
 80155de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155e0:	9004      	str	r0, [sp, #16]
 80155e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	f000 814d 	beq.w	8015886 <_dtoa_r+0xb2e>
 80155ec:	2300      	movs	r3, #0
 80155ee:	4631      	mov	r1, r6
 80155f0:	220a      	movs	r2, #10
 80155f2:	4620      	mov	r0, r4
 80155f4:	f000 ff10 	bl	8016418 <__multadd>
 80155f8:	9b02      	ldr	r3, [sp, #8]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	4606      	mov	r6, r0
 80155fe:	dc4f      	bgt.n	80156a0 <_dtoa_r+0x948>
 8015600:	9b06      	ldr	r3, [sp, #24]
 8015602:	2b02      	cmp	r3, #2
 8015604:	dd4c      	ble.n	80156a0 <_dtoa_r+0x948>
 8015606:	e011      	b.n	801562c <_dtoa_r+0x8d4>
 8015608:	d0c9      	beq.n	801559e <_dtoa_r+0x846>
 801560a:	9a05      	ldr	r2, [sp, #20]
 801560c:	331c      	adds	r3, #28
 801560e:	441a      	add	r2, r3
 8015610:	9205      	str	r2, [sp, #20]
 8015612:	441d      	add	r5, r3
 8015614:	4498      	add	r8, r3
 8015616:	e7c2      	b.n	801559e <_dtoa_r+0x846>
 8015618:	4603      	mov	r3, r0
 801561a:	e7f6      	b.n	801560a <_dtoa_r+0x8b2>
 801561c:	f1b9 0f00 	cmp.w	r9, #0
 8015620:	dc38      	bgt.n	8015694 <_dtoa_r+0x93c>
 8015622:	9b06      	ldr	r3, [sp, #24]
 8015624:	2b02      	cmp	r3, #2
 8015626:	dd35      	ble.n	8015694 <_dtoa_r+0x93c>
 8015628:	f8cd 9008 	str.w	r9, [sp, #8]
 801562c:	9b02      	ldr	r3, [sp, #8]
 801562e:	b963      	cbnz	r3, 801564a <_dtoa_r+0x8f2>
 8015630:	4639      	mov	r1, r7
 8015632:	2205      	movs	r2, #5
 8015634:	4620      	mov	r0, r4
 8015636:	f000 feef 	bl	8016418 <__multadd>
 801563a:	4601      	mov	r1, r0
 801563c:	4607      	mov	r7, r0
 801563e:	9804      	ldr	r0, [sp, #16]
 8015640:	f001 f8f2 	bl	8016828 <__mcmp>
 8015644:	2800      	cmp	r0, #0
 8015646:	f73f adcc 	bgt.w	80151e2 <_dtoa_r+0x48a>
 801564a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801564c:	465d      	mov	r5, fp
 801564e:	ea6f 0a03 	mvn.w	sl, r3
 8015652:	f04f 0900 	mov.w	r9, #0
 8015656:	4639      	mov	r1, r7
 8015658:	4620      	mov	r0, r4
 801565a:	f000 fec6 	bl	80163ea <_Bfree>
 801565e:	2e00      	cmp	r6, #0
 8015660:	f43f aeb7 	beq.w	80153d2 <_dtoa_r+0x67a>
 8015664:	f1b9 0f00 	cmp.w	r9, #0
 8015668:	d005      	beq.n	8015676 <_dtoa_r+0x91e>
 801566a:	45b1      	cmp	r9, r6
 801566c:	d003      	beq.n	8015676 <_dtoa_r+0x91e>
 801566e:	4649      	mov	r1, r9
 8015670:	4620      	mov	r0, r4
 8015672:	f000 feba 	bl	80163ea <_Bfree>
 8015676:	4631      	mov	r1, r6
 8015678:	4620      	mov	r0, r4
 801567a:	f000 feb6 	bl	80163ea <_Bfree>
 801567e:	e6a8      	b.n	80153d2 <_dtoa_r+0x67a>
 8015680:	2700      	movs	r7, #0
 8015682:	463e      	mov	r6, r7
 8015684:	e7e1      	b.n	801564a <_dtoa_r+0x8f2>
 8015686:	f8dd a020 	ldr.w	sl, [sp, #32]
 801568a:	463e      	mov	r6, r7
 801568c:	e5a9      	b.n	80151e2 <_dtoa_r+0x48a>
 801568e:	bf00      	nop
 8015690:	40240000 	.word	0x40240000
 8015694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015696:	f8cd 9008 	str.w	r9, [sp, #8]
 801569a:	2b00      	cmp	r3, #0
 801569c:	f000 80fa 	beq.w	8015894 <_dtoa_r+0xb3c>
 80156a0:	2d00      	cmp	r5, #0
 80156a2:	dd05      	ble.n	80156b0 <_dtoa_r+0x958>
 80156a4:	4631      	mov	r1, r6
 80156a6:	462a      	mov	r2, r5
 80156a8:	4620      	mov	r0, r4
 80156aa:	f001 f869 	bl	8016780 <__lshift>
 80156ae:	4606      	mov	r6, r0
 80156b0:	9b07      	ldr	r3, [sp, #28]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d04c      	beq.n	8015750 <_dtoa_r+0x9f8>
 80156b6:	6871      	ldr	r1, [r6, #4]
 80156b8:	4620      	mov	r0, r4
 80156ba:	f000 fe62 	bl	8016382 <_Balloc>
 80156be:	6932      	ldr	r2, [r6, #16]
 80156c0:	3202      	adds	r2, #2
 80156c2:	4605      	mov	r5, r0
 80156c4:	0092      	lsls	r2, r2, #2
 80156c6:	f106 010c 	add.w	r1, r6, #12
 80156ca:	300c      	adds	r0, #12
 80156cc:	f000 fe4e 	bl	801636c <memcpy>
 80156d0:	2201      	movs	r2, #1
 80156d2:	4629      	mov	r1, r5
 80156d4:	4620      	mov	r0, r4
 80156d6:	f001 f853 	bl	8016780 <__lshift>
 80156da:	9b00      	ldr	r3, [sp, #0]
 80156dc:	f8cd b014 	str.w	fp, [sp, #20]
 80156e0:	f003 0301 	and.w	r3, r3, #1
 80156e4:	46b1      	mov	r9, r6
 80156e6:	9307      	str	r3, [sp, #28]
 80156e8:	4606      	mov	r6, r0
 80156ea:	4639      	mov	r1, r7
 80156ec:	9804      	ldr	r0, [sp, #16]
 80156ee:	f7ff faa7 	bl	8014c40 <quorem>
 80156f2:	4649      	mov	r1, r9
 80156f4:	4605      	mov	r5, r0
 80156f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80156fa:	9804      	ldr	r0, [sp, #16]
 80156fc:	f001 f894 	bl	8016828 <__mcmp>
 8015700:	4632      	mov	r2, r6
 8015702:	9000      	str	r0, [sp, #0]
 8015704:	4639      	mov	r1, r7
 8015706:	4620      	mov	r0, r4
 8015708:	f001 f8a8 	bl	801685c <__mdiff>
 801570c:	68c3      	ldr	r3, [r0, #12]
 801570e:	4602      	mov	r2, r0
 8015710:	bb03      	cbnz	r3, 8015754 <_dtoa_r+0x9fc>
 8015712:	4601      	mov	r1, r0
 8015714:	9008      	str	r0, [sp, #32]
 8015716:	9804      	ldr	r0, [sp, #16]
 8015718:	f001 f886 	bl	8016828 <__mcmp>
 801571c:	9a08      	ldr	r2, [sp, #32]
 801571e:	4603      	mov	r3, r0
 8015720:	4611      	mov	r1, r2
 8015722:	4620      	mov	r0, r4
 8015724:	9308      	str	r3, [sp, #32]
 8015726:	f000 fe60 	bl	80163ea <_Bfree>
 801572a:	9b08      	ldr	r3, [sp, #32]
 801572c:	b9a3      	cbnz	r3, 8015758 <_dtoa_r+0xa00>
 801572e:	9a06      	ldr	r2, [sp, #24]
 8015730:	b992      	cbnz	r2, 8015758 <_dtoa_r+0xa00>
 8015732:	9a07      	ldr	r2, [sp, #28]
 8015734:	b982      	cbnz	r2, 8015758 <_dtoa_r+0xa00>
 8015736:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801573a:	d029      	beq.n	8015790 <_dtoa_r+0xa38>
 801573c:	9b00      	ldr	r3, [sp, #0]
 801573e:	2b00      	cmp	r3, #0
 8015740:	dd01      	ble.n	8015746 <_dtoa_r+0x9ee>
 8015742:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015746:	9b05      	ldr	r3, [sp, #20]
 8015748:	1c5d      	adds	r5, r3, #1
 801574a:	f883 8000 	strb.w	r8, [r3]
 801574e:	e782      	b.n	8015656 <_dtoa_r+0x8fe>
 8015750:	4630      	mov	r0, r6
 8015752:	e7c2      	b.n	80156da <_dtoa_r+0x982>
 8015754:	2301      	movs	r3, #1
 8015756:	e7e3      	b.n	8015720 <_dtoa_r+0x9c8>
 8015758:	9a00      	ldr	r2, [sp, #0]
 801575a:	2a00      	cmp	r2, #0
 801575c:	db04      	blt.n	8015768 <_dtoa_r+0xa10>
 801575e:	d125      	bne.n	80157ac <_dtoa_r+0xa54>
 8015760:	9a06      	ldr	r2, [sp, #24]
 8015762:	bb1a      	cbnz	r2, 80157ac <_dtoa_r+0xa54>
 8015764:	9a07      	ldr	r2, [sp, #28]
 8015766:	bb0a      	cbnz	r2, 80157ac <_dtoa_r+0xa54>
 8015768:	2b00      	cmp	r3, #0
 801576a:	ddec      	ble.n	8015746 <_dtoa_r+0x9ee>
 801576c:	2201      	movs	r2, #1
 801576e:	9904      	ldr	r1, [sp, #16]
 8015770:	4620      	mov	r0, r4
 8015772:	f001 f805 	bl	8016780 <__lshift>
 8015776:	4639      	mov	r1, r7
 8015778:	9004      	str	r0, [sp, #16]
 801577a:	f001 f855 	bl	8016828 <__mcmp>
 801577e:	2800      	cmp	r0, #0
 8015780:	dc03      	bgt.n	801578a <_dtoa_r+0xa32>
 8015782:	d1e0      	bne.n	8015746 <_dtoa_r+0x9ee>
 8015784:	f018 0f01 	tst.w	r8, #1
 8015788:	d0dd      	beq.n	8015746 <_dtoa_r+0x9ee>
 801578a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801578e:	d1d8      	bne.n	8015742 <_dtoa_r+0x9ea>
 8015790:	9b05      	ldr	r3, [sp, #20]
 8015792:	9a05      	ldr	r2, [sp, #20]
 8015794:	1c5d      	adds	r5, r3, #1
 8015796:	2339      	movs	r3, #57	; 0x39
 8015798:	7013      	strb	r3, [r2, #0]
 801579a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801579e:	2b39      	cmp	r3, #57	; 0x39
 80157a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80157a4:	d04f      	beq.n	8015846 <_dtoa_r+0xaee>
 80157a6:	3301      	adds	r3, #1
 80157a8:	7013      	strb	r3, [r2, #0]
 80157aa:	e754      	b.n	8015656 <_dtoa_r+0x8fe>
 80157ac:	9a05      	ldr	r2, [sp, #20]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	f102 0501 	add.w	r5, r2, #1
 80157b4:	dd06      	ble.n	80157c4 <_dtoa_r+0xa6c>
 80157b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80157ba:	d0e9      	beq.n	8015790 <_dtoa_r+0xa38>
 80157bc:	f108 0801 	add.w	r8, r8, #1
 80157c0:	9b05      	ldr	r3, [sp, #20]
 80157c2:	e7c2      	b.n	801574a <_dtoa_r+0x9f2>
 80157c4:	9a02      	ldr	r2, [sp, #8]
 80157c6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80157ca:	eba5 030b 	sub.w	r3, r5, fp
 80157ce:	4293      	cmp	r3, r2
 80157d0:	d021      	beq.n	8015816 <_dtoa_r+0xabe>
 80157d2:	2300      	movs	r3, #0
 80157d4:	220a      	movs	r2, #10
 80157d6:	9904      	ldr	r1, [sp, #16]
 80157d8:	4620      	mov	r0, r4
 80157da:	f000 fe1d 	bl	8016418 <__multadd>
 80157de:	45b1      	cmp	r9, r6
 80157e0:	9004      	str	r0, [sp, #16]
 80157e2:	f04f 0300 	mov.w	r3, #0
 80157e6:	f04f 020a 	mov.w	r2, #10
 80157ea:	4649      	mov	r1, r9
 80157ec:	4620      	mov	r0, r4
 80157ee:	d105      	bne.n	80157fc <_dtoa_r+0xaa4>
 80157f0:	f000 fe12 	bl	8016418 <__multadd>
 80157f4:	4681      	mov	r9, r0
 80157f6:	4606      	mov	r6, r0
 80157f8:	9505      	str	r5, [sp, #20]
 80157fa:	e776      	b.n	80156ea <_dtoa_r+0x992>
 80157fc:	f000 fe0c 	bl	8016418 <__multadd>
 8015800:	4631      	mov	r1, r6
 8015802:	4681      	mov	r9, r0
 8015804:	2300      	movs	r3, #0
 8015806:	220a      	movs	r2, #10
 8015808:	4620      	mov	r0, r4
 801580a:	f000 fe05 	bl	8016418 <__multadd>
 801580e:	4606      	mov	r6, r0
 8015810:	e7f2      	b.n	80157f8 <_dtoa_r+0xaa0>
 8015812:	f04f 0900 	mov.w	r9, #0
 8015816:	2201      	movs	r2, #1
 8015818:	9904      	ldr	r1, [sp, #16]
 801581a:	4620      	mov	r0, r4
 801581c:	f000 ffb0 	bl	8016780 <__lshift>
 8015820:	4639      	mov	r1, r7
 8015822:	9004      	str	r0, [sp, #16]
 8015824:	f001 f800 	bl	8016828 <__mcmp>
 8015828:	2800      	cmp	r0, #0
 801582a:	dcb6      	bgt.n	801579a <_dtoa_r+0xa42>
 801582c:	d102      	bne.n	8015834 <_dtoa_r+0xadc>
 801582e:	f018 0f01 	tst.w	r8, #1
 8015832:	d1b2      	bne.n	801579a <_dtoa_r+0xa42>
 8015834:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015838:	2b30      	cmp	r3, #48	; 0x30
 801583a:	f105 32ff 	add.w	r2, r5, #4294967295
 801583e:	f47f af0a 	bne.w	8015656 <_dtoa_r+0x8fe>
 8015842:	4615      	mov	r5, r2
 8015844:	e7f6      	b.n	8015834 <_dtoa_r+0xadc>
 8015846:	4593      	cmp	fp, r2
 8015848:	d105      	bne.n	8015856 <_dtoa_r+0xafe>
 801584a:	2331      	movs	r3, #49	; 0x31
 801584c:	f10a 0a01 	add.w	sl, sl, #1
 8015850:	f88b 3000 	strb.w	r3, [fp]
 8015854:	e6ff      	b.n	8015656 <_dtoa_r+0x8fe>
 8015856:	4615      	mov	r5, r2
 8015858:	e79f      	b.n	801579a <_dtoa_r+0xa42>
 801585a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80158c0 <_dtoa_r+0xb68>
 801585e:	e007      	b.n	8015870 <_dtoa_r+0xb18>
 8015860:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015862:	f8df b060 	ldr.w	fp, [pc, #96]	; 80158c4 <_dtoa_r+0xb6c>
 8015866:	b11b      	cbz	r3, 8015870 <_dtoa_r+0xb18>
 8015868:	f10b 0308 	add.w	r3, fp, #8
 801586c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801586e:	6013      	str	r3, [r2, #0]
 8015870:	4658      	mov	r0, fp
 8015872:	b017      	add	sp, #92	; 0x5c
 8015874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015878:	9b06      	ldr	r3, [sp, #24]
 801587a:	2b01      	cmp	r3, #1
 801587c:	f77f ae35 	ble.w	80154ea <_dtoa_r+0x792>
 8015880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015882:	9307      	str	r3, [sp, #28]
 8015884:	e649      	b.n	801551a <_dtoa_r+0x7c2>
 8015886:	9b02      	ldr	r3, [sp, #8]
 8015888:	2b00      	cmp	r3, #0
 801588a:	dc03      	bgt.n	8015894 <_dtoa_r+0xb3c>
 801588c:	9b06      	ldr	r3, [sp, #24]
 801588e:	2b02      	cmp	r3, #2
 8015890:	f73f aecc 	bgt.w	801562c <_dtoa_r+0x8d4>
 8015894:	465d      	mov	r5, fp
 8015896:	4639      	mov	r1, r7
 8015898:	9804      	ldr	r0, [sp, #16]
 801589a:	f7ff f9d1 	bl	8014c40 <quorem>
 801589e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80158a2:	f805 8b01 	strb.w	r8, [r5], #1
 80158a6:	9a02      	ldr	r2, [sp, #8]
 80158a8:	eba5 030b 	sub.w	r3, r5, fp
 80158ac:	429a      	cmp	r2, r3
 80158ae:	ddb0      	ble.n	8015812 <_dtoa_r+0xaba>
 80158b0:	2300      	movs	r3, #0
 80158b2:	220a      	movs	r2, #10
 80158b4:	9904      	ldr	r1, [sp, #16]
 80158b6:	4620      	mov	r0, r4
 80158b8:	f000 fdae 	bl	8016418 <__multadd>
 80158bc:	9004      	str	r0, [sp, #16]
 80158be:	e7ea      	b.n	8015896 <_dtoa_r+0xb3e>
 80158c0:	0801861b 	.word	0x0801861b
 80158c4:	08018478 	.word	0x08018478

080158c8 <__sflush_r>:
 80158c8:	898a      	ldrh	r2, [r1, #12]
 80158ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80158ce:	4605      	mov	r5, r0
 80158d0:	0710      	lsls	r0, r2, #28
 80158d2:	460c      	mov	r4, r1
 80158d4:	d458      	bmi.n	8015988 <__sflush_r+0xc0>
 80158d6:	684b      	ldr	r3, [r1, #4]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	dc05      	bgt.n	80158e8 <__sflush_r+0x20>
 80158dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80158de:	2b00      	cmp	r3, #0
 80158e0:	dc02      	bgt.n	80158e8 <__sflush_r+0x20>
 80158e2:	2000      	movs	r0, #0
 80158e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80158ea:	2e00      	cmp	r6, #0
 80158ec:	d0f9      	beq.n	80158e2 <__sflush_r+0x1a>
 80158ee:	2300      	movs	r3, #0
 80158f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80158f4:	682f      	ldr	r7, [r5, #0]
 80158f6:	6a21      	ldr	r1, [r4, #32]
 80158f8:	602b      	str	r3, [r5, #0]
 80158fa:	d032      	beq.n	8015962 <__sflush_r+0x9a>
 80158fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80158fe:	89a3      	ldrh	r3, [r4, #12]
 8015900:	075a      	lsls	r2, r3, #29
 8015902:	d505      	bpl.n	8015910 <__sflush_r+0x48>
 8015904:	6863      	ldr	r3, [r4, #4]
 8015906:	1ac0      	subs	r0, r0, r3
 8015908:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801590a:	b10b      	cbz	r3, 8015910 <__sflush_r+0x48>
 801590c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801590e:	1ac0      	subs	r0, r0, r3
 8015910:	2300      	movs	r3, #0
 8015912:	4602      	mov	r2, r0
 8015914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015916:	6a21      	ldr	r1, [r4, #32]
 8015918:	4628      	mov	r0, r5
 801591a:	47b0      	blx	r6
 801591c:	1c43      	adds	r3, r0, #1
 801591e:	89a3      	ldrh	r3, [r4, #12]
 8015920:	d106      	bne.n	8015930 <__sflush_r+0x68>
 8015922:	6829      	ldr	r1, [r5, #0]
 8015924:	291d      	cmp	r1, #29
 8015926:	d848      	bhi.n	80159ba <__sflush_r+0xf2>
 8015928:	4a29      	ldr	r2, [pc, #164]	; (80159d0 <__sflush_r+0x108>)
 801592a:	40ca      	lsrs	r2, r1
 801592c:	07d6      	lsls	r6, r2, #31
 801592e:	d544      	bpl.n	80159ba <__sflush_r+0xf2>
 8015930:	2200      	movs	r2, #0
 8015932:	6062      	str	r2, [r4, #4]
 8015934:	04d9      	lsls	r1, r3, #19
 8015936:	6922      	ldr	r2, [r4, #16]
 8015938:	6022      	str	r2, [r4, #0]
 801593a:	d504      	bpl.n	8015946 <__sflush_r+0x7e>
 801593c:	1c42      	adds	r2, r0, #1
 801593e:	d101      	bne.n	8015944 <__sflush_r+0x7c>
 8015940:	682b      	ldr	r3, [r5, #0]
 8015942:	b903      	cbnz	r3, 8015946 <__sflush_r+0x7e>
 8015944:	6560      	str	r0, [r4, #84]	; 0x54
 8015946:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015948:	602f      	str	r7, [r5, #0]
 801594a:	2900      	cmp	r1, #0
 801594c:	d0c9      	beq.n	80158e2 <__sflush_r+0x1a>
 801594e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015952:	4299      	cmp	r1, r3
 8015954:	d002      	beq.n	801595c <__sflush_r+0x94>
 8015956:	4628      	mov	r0, r5
 8015958:	f001 f920 	bl	8016b9c <_free_r>
 801595c:	2000      	movs	r0, #0
 801595e:	6360      	str	r0, [r4, #52]	; 0x34
 8015960:	e7c0      	b.n	80158e4 <__sflush_r+0x1c>
 8015962:	2301      	movs	r3, #1
 8015964:	4628      	mov	r0, r5
 8015966:	47b0      	blx	r6
 8015968:	1c41      	adds	r1, r0, #1
 801596a:	d1c8      	bne.n	80158fe <__sflush_r+0x36>
 801596c:	682b      	ldr	r3, [r5, #0]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d0c5      	beq.n	80158fe <__sflush_r+0x36>
 8015972:	2b1d      	cmp	r3, #29
 8015974:	d001      	beq.n	801597a <__sflush_r+0xb2>
 8015976:	2b16      	cmp	r3, #22
 8015978:	d101      	bne.n	801597e <__sflush_r+0xb6>
 801597a:	602f      	str	r7, [r5, #0]
 801597c:	e7b1      	b.n	80158e2 <__sflush_r+0x1a>
 801597e:	89a3      	ldrh	r3, [r4, #12]
 8015980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015984:	81a3      	strh	r3, [r4, #12]
 8015986:	e7ad      	b.n	80158e4 <__sflush_r+0x1c>
 8015988:	690f      	ldr	r7, [r1, #16]
 801598a:	2f00      	cmp	r7, #0
 801598c:	d0a9      	beq.n	80158e2 <__sflush_r+0x1a>
 801598e:	0793      	lsls	r3, r2, #30
 8015990:	680e      	ldr	r6, [r1, #0]
 8015992:	bf08      	it	eq
 8015994:	694b      	ldreq	r3, [r1, #20]
 8015996:	600f      	str	r7, [r1, #0]
 8015998:	bf18      	it	ne
 801599a:	2300      	movne	r3, #0
 801599c:	eba6 0807 	sub.w	r8, r6, r7
 80159a0:	608b      	str	r3, [r1, #8]
 80159a2:	f1b8 0f00 	cmp.w	r8, #0
 80159a6:	dd9c      	ble.n	80158e2 <__sflush_r+0x1a>
 80159a8:	4643      	mov	r3, r8
 80159aa:	463a      	mov	r2, r7
 80159ac:	6a21      	ldr	r1, [r4, #32]
 80159ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80159b0:	4628      	mov	r0, r5
 80159b2:	47b0      	blx	r6
 80159b4:	2800      	cmp	r0, #0
 80159b6:	dc06      	bgt.n	80159c6 <__sflush_r+0xfe>
 80159b8:	89a3      	ldrh	r3, [r4, #12]
 80159ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159be:	81a3      	strh	r3, [r4, #12]
 80159c0:	f04f 30ff 	mov.w	r0, #4294967295
 80159c4:	e78e      	b.n	80158e4 <__sflush_r+0x1c>
 80159c6:	4407      	add	r7, r0
 80159c8:	eba8 0800 	sub.w	r8, r8, r0
 80159cc:	e7e9      	b.n	80159a2 <__sflush_r+0xda>
 80159ce:	bf00      	nop
 80159d0:	20400001 	.word	0x20400001

080159d4 <_fflush_r>:
 80159d4:	b538      	push	{r3, r4, r5, lr}
 80159d6:	690b      	ldr	r3, [r1, #16]
 80159d8:	4605      	mov	r5, r0
 80159da:	460c      	mov	r4, r1
 80159dc:	b1db      	cbz	r3, 8015a16 <_fflush_r+0x42>
 80159de:	b118      	cbz	r0, 80159e8 <_fflush_r+0x14>
 80159e0:	6983      	ldr	r3, [r0, #24]
 80159e2:	b90b      	cbnz	r3, 80159e8 <_fflush_r+0x14>
 80159e4:	f000 f860 	bl	8015aa8 <__sinit>
 80159e8:	4b0c      	ldr	r3, [pc, #48]	; (8015a1c <_fflush_r+0x48>)
 80159ea:	429c      	cmp	r4, r3
 80159ec:	d109      	bne.n	8015a02 <_fflush_r+0x2e>
 80159ee:	686c      	ldr	r4, [r5, #4]
 80159f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80159f4:	b17b      	cbz	r3, 8015a16 <_fflush_r+0x42>
 80159f6:	4621      	mov	r1, r4
 80159f8:	4628      	mov	r0, r5
 80159fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80159fe:	f7ff bf63 	b.w	80158c8 <__sflush_r>
 8015a02:	4b07      	ldr	r3, [pc, #28]	; (8015a20 <_fflush_r+0x4c>)
 8015a04:	429c      	cmp	r4, r3
 8015a06:	d101      	bne.n	8015a0c <_fflush_r+0x38>
 8015a08:	68ac      	ldr	r4, [r5, #8]
 8015a0a:	e7f1      	b.n	80159f0 <_fflush_r+0x1c>
 8015a0c:	4b05      	ldr	r3, [pc, #20]	; (8015a24 <_fflush_r+0x50>)
 8015a0e:	429c      	cmp	r4, r3
 8015a10:	bf08      	it	eq
 8015a12:	68ec      	ldreq	r4, [r5, #12]
 8015a14:	e7ec      	b.n	80159f0 <_fflush_r+0x1c>
 8015a16:	2000      	movs	r0, #0
 8015a18:	bd38      	pop	{r3, r4, r5, pc}
 8015a1a:	bf00      	nop
 8015a1c:	080184a8 	.word	0x080184a8
 8015a20:	080184c8 	.word	0x080184c8
 8015a24:	08018488 	.word	0x08018488

08015a28 <std>:
 8015a28:	2300      	movs	r3, #0
 8015a2a:	b510      	push	{r4, lr}
 8015a2c:	4604      	mov	r4, r0
 8015a2e:	e9c0 3300 	strd	r3, r3, [r0]
 8015a32:	6083      	str	r3, [r0, #8]
 8015a34:	8181      	strh	r1, [r0, #12]
 8015a36:	6643      	str	r3, [r0, #100]	; 0x64
 8015a38:	81c2      	strh	r2, [r0, #14]
 8015a3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015a3e:	6183      	str	r3, [r0, #24]
 8015a40:	4619      	mov	r1, r3
 8015a42:	2208      	movs	r2, #8
 8015a44:	305c      	adds	r0, #92	; 0x5c
 8015a46:	f7fd f9b7 	bl	8012db8 <memset>
 8015a4a:	4b05      	ldr	r3, [pc, #20]	; (8015a60 <std+0x38>)
 8015a4c:	6263      	str	r3, [r4, #36]	; 0x24
 8015a4e:	4b05      	ldr	r3, [pc, #20]	; (8015a64 <std+0x3c>)
 8015a50:	62a3      	str	r3, [r4, #40]	; 0x28
 8015a52:	4b05      	ldr	r3, [pc, #20]	; (8015a68 <std+0x40>)
 8015a54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015a56:	4b05      	ldr	r3, [pc, #20]	; (8015a6c <std+0x44>)
 8015a58:	6224      	str	r4, [r4, #32]
 8015a5a:	6323      	str	r3, [r4, #48]	; 0x30
 8015a5c:	bd10      	pop	{r4, pc}
 8015a5e:	bf00      	nop
 8015a60:	08013c45 	.word	0x08013c45
 8015a64:	08013c6b 	.word	0x08013c6b
 8015a68:	08013ca3 	.word	0x08013ca3
 8015a6c:	08013cc7 	.word	0x08013cc7

08015a70 <_cleanup_r>:
 8015a70:	4901      	ldr	r1, [pc, #4]	; (8015a78 <_cleanup_r+0x8>)
 8015a72:	f000 b885 	b.w	8015b80 <_fwalk_reent>
 8015a76:	bf00      	nop
 8015a78:	080159d5 	.word	0x080159d5

08015a7c <__sfmoreglue>:
 8015a7c:	b570      	push	{r4, r5, r6, lr}
 8015a7e:	1e4a      	subs	r2, r1, #1
 8015a80:	2568      	movs	r5, #104	; 0x68
 8015a82:	4355      	muls	r5, r2
 8015a84:	460e      	mov	r6, r1
 8015a86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015a8a:	f001 f8d5 	bl	8016c38 <_malloc_r>
 8015a8e:	4604      	mov	r4, r0
 8015a90:	b140      	cbz	r0, 8015aa4 <__sfmoreglue+0x28>
 8015a92:	2100      	movs	r1, #0
 8015a94:	e9c0 1600 	strd	r1, r6, [r0]
 8015a98:	300c      	adds	r0, #12
 8015a9a:	60a0      	str	r0, [r4, #8]
 8015a9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015aa0:	f7fd f98a 	bl	8012db8 <memset>
 8015aa4:	4620      	mov	r0, r4
 8015aa6:	bd70      	pop	{r4, r5, r6, pc}

08015aa8 <__sinit>:
 8015aa8:	6983      	ldr	r3, [r0, #24]
 8015aaa:	b510      	push	{r4, lr}
 8015aac:	4604      	mov	r4, r0
 8015aae:	bb33      	cbnz	r3, 8015afe <__sinit+0x56>
 8015ab0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015ab4:	6503      	str	r3, [r0, #80]	; 0x50
 8015ab6:	4b12      	ldr	r3, [pc, #72]	; (8015b00 <__sinit+0x58>)
 8015ab8:	4a12      	ldr	r2, [pc, #72]	; (8015b04 <__sinit+0x5c>)
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	6282      	str	r2, [r0, #40]	; 0x28
 8015abe:	4298      	cmp	r0, r3
 8015ac0:	bf04      	itt	eq
 8015ac2:	2301      	moveq	r3, #1
 8015ac4:	6183      	streq	r3, [r0, #24]
 8015ac6:	f000 f81f 	bl	8015b08 <__sfp>
 8015aca:	6060      	str	r0, [r4, #4]
 8015acc:	4620      	mov	r0, r4
 8015ace:	f000 f81b 	bl	8015b08 <__sfp>
 8015ad2:	60a0      	str	r0, [r4, #8]
 8015ad4:	4620      	mov	r0, r4
 8015ad6:	f000 f817 	bl	8015b08 <__sfp>
 8015ada:	2200      	movs	r2, #0
 8015adc:	60e0      	str	r0, [r4, #12]
 8015ade:	2104      	movs	r1, #4
 8015ae0:	6860      	ldr	r0, [r4, #4]
 8015ae2:	f7ff ffa1 	bl	8015a28 <std>
 8015ae6:	2201      	movs	r2, #1
 8015ae8:	2109      	movs	r1, #9
 8015aea:	68a0      	ldr	r0, [r4, #8]
 8015aec:	f7ff ff9c 	bl	8015a28 <std>
 8015af0:	2202      	movs	r2, #2
 8015af2:	2112      	movs	r1, #18
 8015af4:	68e0      	ldr	r0, [r4, #12]
 8015af6:	f7ff ff97 	bl	8015a28 <std>
 8015afa:	2301      	movs	r3, #1
 8015afc:	61a3      	str	r3, [r4, #24]
 8015afe:	bd10      	pop	{r4, pc}
 8015b00:	080183e8 	.word	0x080183e8
 8015b04:	08015a71 	.word	0x08015a71

08015b08 <__sfp>:
 8015b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b0a:	4b1b      	ldr	r3, [pc, #108]	; (8015b78 <__sfp+0x70>)
 8015b0c:	681e      	ldr	r6, [r3, #0]
 8015b0e:	69b3      	ldr	r3, [r6, #24]
 8015b10:	4607      	mov	r7, r0
 8015b12:	b913      	cbnz	r3, 8015b1a <__sfp+0x12>
 8015b14:	4630      	mov	r0, r6
 8015b16:	f7ff ffc7 	bl	8015aa8 <__sinit>
 8015b1a:	3648      	adds	r6, #72	; 0x48
 8015b1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015b20:	3b01      	subs	r3, #1
 8015b22:	d503      	bpl.n	8015b2c <__sfp+0x24>
 8015b24:	6833      	ldr	r3, [r6, #0]
 8015b26:	b133      	cbz	r3, 8015b36 <__sfp+0x2e>
 8015b28:	6836      	ldr	r6, [r6, #0]
 8015b2a:	e7f7      	b.n	8015b1c <__sfp+0x14>
 8015b2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015b30:	b16d      	cbz	r5, 8015b4e <__sfp+0x46>
 8015b32:	3468      	adds	r4, #104	; 0x68
 8015b34:	e7f4      	b.n	8015b20 <__sfp+0x18>
 8015b36:	2104      	movs	r1, #4
 8015b38:	4638      	mov	r0, r7
 8015b3a:	f7ff ff9f 	bl	8015a7c <__sfmoreglue>
 8015b3e:	6030      	str	r0, [r6, #0]
 8015b40:	2800      	cmp	r0, #0
 8015b42:	d1f1      	bne.n	8015b28 <__sfp+0x20>
 8015b44:	230c      	movs	r3, #12
 8015b46:	603b      	str	r3, [r7, #0]
 8015b48:	4604      	mov	r4, r0
 8015b4a:	4620      	mov	r0, r4
 8015b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b4e:	4b0b      	ldr	r3, [pc, #44]	; (8015b7c <__sfp+0x74>)
 8015b50:	6665      	str	r5, [r4, #100]	; 0x64
 8015b52:	e9c4 5500 	strd	r5, r5, [r4]
 8015b56:	60a5      	str	r5, [r4, #8]
 8015b58:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015b5c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015b60:	2208      	movs	r2, #8
 8015b62:	4629      	mov	r1, r5
 8015b64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015b68:	f7fd f926 	bl	8012db8 <memset>
 8015b6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015b70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015b74:	e7e9      	b.n	8015b4a <__sfp+0x42>
 8015b76:	bf00      	nop
 8015b78:	080183e8 	.word	0x080183e8
 8015b7c:	ffff0001 	.word	0xffff0001

08015b80 <_fwalk_reent>:
 8015b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b84:	4680      	mov	r8, r0
 8015b86:	4689      	mov	r9, r1
 8015b88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015b8c:	2600      	movs	r6, #0
 8015b8e:	b914      	cbnz	r4, 8015b96 <_fwalk_reent+0x16>
 8015b90:	4630      	mov	r0, r6
 8015b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b96:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015b9a:	3f01      	subs	r7, #1
 8015b9c:	d501      	bpl.n	8015ba2 <_fwalk_reent+0x22>
 8015b9e:	6824      	ldr	r4, [r4, #0]
 8015ba0:	e7f5      	b.n	8015b8e <_fwalk_reent+0xe>
 8015ba2:	89ab      	ldrh	r3, [r5, #12]
 8015ba4:	2b01      	cmp	r3, #1
 8015ba6:	d907      	bls.n	8015bb8 <_fwalk_reent+0x38>
 8015ba8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015bac:	3301      	adds	r3, #1
 8015bae:	d003      	beq.n	8015bb8 <_fwalk_reent+0x38>
 8015bb0:	4629      	mov	r1, r5
 8015bb2:	4640      	mov	r0, r8
 8015bb4:	47c8      	blx	r9
 8015bb6:	4306      	orrs	r6, r0
 8015bb8:	3568      	adds	r5, #104	; 0x68
 8015bba:	e7ee      	b.n	8015b9a <_fwalk_reent+0x1a>

08015bbc <rshift>:
 8015bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bbe:	6906      	ldr	r6, [r0, #16]
 8015bc0:	114b      	asrs	r3, r1, #5
 8015bc2:	429e      	cmp	r6, r3
 8015bc4:	f100 0414 	add.w	r4, r0, #20
 8015bc8:	dd30      	ble.n	8015c2c <rshift+0x70>
 8015bca:	f011 011f 	ands.w	r1, r1, #31
 8015bce:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015bd2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015bd6:	d108      	bne.n	8015bea <rshift+0x2e>
 8015bd8:	4621      	mov	r1, r4
 8015bda:	42b2      	cmp	r2, r6
 8015bdc:	460b      	mov	r3, r1
 8015bde:	d211      	bcs.n	8015c04 <rshift+0x48>
 8015be0:	f852 3b04 	ldr.w	r3, [r2], #4
 8015be4:	f841 3b04 	str.w	r3, [r1], #4
 8015be8:	e7f7      	b.n	8015bda <rshift+0x1e>
 8015bea:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015bee:	f1c1 0c20 	rsb	ip, r1, #32
 8015bf2:	40cd      	lsrs	r5, r1
 8015bf4:	3204      	adds	r2, #4
 8015bf6:	4623      	mov	r3, r4
 8015bf8:	42b2      	cmp	r2, r6
 8015bfa:	4617      	mov	r7, r2
 8015bfc:	d30c      	bcc.n	8015c18 <rshift+0x5c>
 8015bfe:	601d      	str	r5, [r3, #0]
 8015c00:	b105      	cbz	r5, 8015c04 <rshift+0x48>
 8015c02:	3304      	adds	r3, #4
 8015c04:	1b1a      	subs	r2, r3, r4
 8015c06:	42a3      	cmp	r3, r4
 8015c08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015c0c:	bf08      	it	eq
 8015c0e:	2300      	moveq	r3, #0
 8015c10:	6102      	str	r2, [r0, #16]
 8015c12:	bf08      	it	eq
 8015c14:	6143      	streq	r3, [r0, #20]
 8015c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c18:	683f      	ldr	r7, [r7, #0]
 8015c1a:	fa07 f70c 	lsl.w	r7, r7, ip
 8015c1e:	433d      	orrs	r5, r7
 8015c20:	f843 5b04 	str.w	r5, [r3], #4
 8015c24:	f852 5b04 	ldr.w	r5, [r2], #4
 8015c28:	40cd      	lsrs	r5, r1
 8015c2a:	e7e5      	b.n	8015bf8 <rshift+0x3c>
 8015c2c:	4623      	mov	r3, r4
 8015c2e:	e7e9      	b.n	8015c04 <rshift+0x48>

08015c30 <__hexdig_fun>:
 8015c30:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015c34:	2b09      	cmp	r3, #9
 8015c36:	d802      	bhi.n	8015c3e <__hexdig_fun+0xe>
 8015c38:	3820      	subs	r0, #32
 8015c3a:	b2c0      	uxtb	r0, r0
 8015c3c:	4770      	bx	lr
 8015c3e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015c42:	2b05      	cmp	r3, #5
 8015c44:	d801      	bhi.n	8015c4a <__hexdig_fun+0x1a>
 8015c46:	3847      	subs	r0, #71	; 0x47
 8015c48:	e7f7      	b.n	8015c3a <__hexdig_fun+0xa>
 8015c4a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015c4e:	2b05      	cmp	r3, #5
 8015c50:	d801      	bhi.n	8015c56 <__hexdig_fun+0x26>
 8015c52:	3827      	subs	r0, #39	; 0x27
 8015c54:	e7f1      	b.n	8015c3a <__hexdig_fun+0xa>
 8015c56:	2000      	movs	r0, #0
 8015c58:	4770      	bx	lr

08015c5a <__gethex>:
 8015c5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c5e:	b08b      	sub	sp, #44	; 0x2c
 8015c60:	468a      	mov	sl, r1
 8015c62:	9002      	str	r0, [sp, #8]
 8015c64:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015c66:	9306      	str	r3, [sp, #24]
 8015c68:	4690      	mov	r8, r2
 8015c6a:	f000 fadf 	bl	801622c <__localeconv_l>
 8015c6e:	6803      	ldr	r3, [r0, #0]
 8015c70:	9303      	str	r3, [sp, #12]
 8015c72:	4618      	mov	r0, r3
 8015c74:	f7ea fac4 	bl	8000200 <strlen>
 8015c78:	9b03      	ldr	r3, [sp, #12]
 8015c7a:	9001      	str	r0, [sp, #4]
 8015c7c:	4403      	add	r3, r0
 8015c7e:	f04f 0b00 	mov.w	fp, #0
 8015c82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015c86:	9307      	str	r3, [sp, #28]
 8015c88:	f8da 3000 	ldr.w	r3, [sl]
 8015c8c:	3302      	adds	r3, #2
 8015c8e:	461f      	mov	r7, r3
 8015c90:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015c94:	2830      	cmp	r0, #48	; 0x30
 8015c96:	d06c      	beq.n	8015d72 <__gethex+0x118>
 8015c98:	f7ff ffca 	bl	8015c30 <__hexdig_fun>
 8015c9c:	4604      	mov	r4, r0
 8015c9e:	2800      	cmp	r0, #0
 8015ca0:	d16a      	bne.n	8015d78 <__gethex+0x11e>
 8015ca2:	9a01      	ldr	r2, [sp, #4]
 8015ca4:	9903      	ldr	r1, [sp, #12]
 8015ca6:	4638      	mov	r0, r7
 8015ca8:	f001 fe08 	bl	80178bc <strncmp>
 8015cac:	2800      	cmp	r0, #0
 8015cae:	d166      	bne.n	8015d7e <__gethex+0x124>
 8015cb0:	9b01      	ldr	r3, [sp, #4]
 8015cb2:	5cf8      	ldrb	r0, [r7, r3]
 8015cb4:	18fe      	adds	r6, r7, r3
 8015cb6:	f7ff ffbb 	bl	8015c30 <__hexdig_fun>
 8015cba:	2800      	cmp	r0, #0
 8015cbc:	d062      	beq.n	8015d84 <__gethex+0x12a>
 8015cbe:	4633      	mov	r3, r6
 8015cc0:	7818      	ldrb	r0, [r3, #0]
 8015cc2:	2830      	cmp	r0, #48	; 0x30
 8015cc4:	461f      	mov	r7, r3
 8015cc6:	f103 0301 	add.w	r3, r3, #1
 8015cca:	d0f9      	beq.n	8015cc0 <__gethex+0x66>
 8015ccc:	f7ff ffb0 	bl	8015c30 <__hexdig_fun>
 8015cd0:	fab0 f580 	clz	r5, r0
 8015cd4:	096d      	lsrs	r5, r5, #5
 8015cd6:	4634      	mov	r4, r6
 8015cd8:	f04f 0b01 	mov.w	fp, #1
 8015cdc:	463a      	mov	r2, r7
 8015cde:	4616      	mov	r6, r2
 8015ce0:	3201      	adds	r2, #1
 8015ce2:	7830      	ldrb	r0, [r6, #0]
 8015ce4:	f7ff ffa4 	bl	8015c30 <__hexdig_fun>
 8015ce8:	2800      	cmp	r0, #0
 8015cea:	d1f8      	bne.n	8015cde <__gethex+0x84>
 8015cec:	9a01      	ldr	r2, [sp, #4]
 8015cee:	9903      	ldr	r1, [sp, #12]
 8015cf0:	4630      	mov	r0, r6
 8015cf2:	f001 fde3 	bl	80178bc <strncmp>
 8015cf6:	b950      	cbnz	r0, 8015d0e <__gethex+0xb4>
 8015cf8:	b954      	cbnz	r4, 8015d10 <__gethex+0xb6>
 8015cfa:	9b01      	ldr	r3, [sp, #4]
 8015cfc:	18f4      	adds	r4, r6, r3
 8015cfe:	4622      	mov	r2, r4
 8015d00:	4616      	mov	r6, r2
 8015d02:	3201      	adds	r2, #1
 8015d04:	7830      	ldrb	r0, [r6, #0]
 8015d06:	f7ff ff93 	bl	8015c30 <__hexdig_fun>
 8015d0a:	2800      	cmp	r0, #0
 8015d0c:	d1f8      	bne.n	8015d00 <__gethex+0xa6>
 8015d0e:	b10c      	cbz	r4, 8015d14 <__gethex+0xba>
 8015d10:	1ba4      	subs	r4, r4, r6
 8015d12:	00a4      	lsls	r4, r4, #2
 8015d14:	7833      	ldrb	r3, [r6, #0]
 8015d16:	2b50      	cmp	r3, #80	; 0x50
 8015d18:	d001      	beq.n	8015d1e <__gethex+0xc4>
 8015d1a:	2b70      	cmp	r3, #112	; 0x70
 8015d1c:	d140      	bne.n	8015da0 <__gethex+0x146>
 8015d1e:	7873      	ldrb	r3, [r6, #1]
 8015d20:	2b2b      	cmp	r3, #43	; 0x2b
 8015d22:	d031      	beq.n	8015d88 <__gethex+0x12e>
 8015d24:	2b2d      	cmp	r3, #45	; 0x2d
 8015d26:	d033      	beq.n	8015d90 <__gethex+0x136>
 8015d28:	1c71      	adds	r1, r6, #1
 8015d2a:	f04f 0900 	mov.w	r9, #0
 8015d2e:	7808      	ldrb	r0, [r1, #0]
 8015d30:	f7ff ff7e 	bl	8015c30 <__hexdig_fun>
 8015d34:	1e43      	subs	r3, r0, #1
 8015d36:	b2db      	uxtb	r3, r3
 8015d38:	2b18      	cmp	r3, #24
 8015d3a:	d831      	bhi.n	8015da0 <__gethex+0x146>
 8015d3c:	f1a0 0210 	sub.w	r2, r0, #16
 8015d40:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015d44:	f7ff ff74 	bl	8015c30 <__hexdig_fun>
 8015d48:	1e43      	subs	r3, r0, #1
 8015d4a:	b2db      	uxtb	r3, r3
 8015d4c:	2b18      	cmp	r3, #24
 8015d4e:	d922      	bls.n	8015d96 <__gethex+0x13c>
 8015d50:	f1b9 0f00 	cmp.w	r9, #0
 8015d54:	d000      	beq.n	8015d58 <__gethex+0xfe>
 8015d56:	4252      	negs	r2, r2
 8015d58:	4414      	add	r4, r2
 8015d5a:	f8ca 1000 	str.w	r1, [sl]
 8015d5e:	b30d      	cbz	r5, 8015da4 <__gethex+0x14a>
 8015d60:	f1bb 0f00 	cmp.w	fp, #0
 8015d64:	bf0c      	ite	eq
 8015d66:	2706      	moveq	r7, #6
 8015d68:	2700      	movne	r7, #0
 8015d6a:	4638      	mov	r0, r7
 8015d6c:	b00b      	add	sp, #44	; 0x2c
 8015d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d72:	f10b 0b01 	add.w	fp, fp, #1
 8015d76:	e78a      	b.n	8015c8e <__gethex+0x34>
 8015d78:	2500      	movs	r5, #0
 8015d7a:	462c      	mov	r4, r5
 8015d7c:	e7ae      	b.n	8015cdc <__gethex+0x82>
 8015d7e:	463e      	mov	r6, r7
 8015d80:	2501      	movs	r5, #1
 8015d82:	e7c7      	b.n	8015d14 <__gethex+0xba>
 8015d84:	4604      	mov	r4, r0
 8015d86:	e7fb      	b.n	8015d80 <__gethex+0x126>
 8015d88:	f04f 0900 	mov.w	r9, #0
 8015d8c:	1cb1      	adds	r1, r6, #2
 8015d8e:	e7ce      	b.n	8015d2e <__gethex+0xd4>
 8015d90:	f04f 0901 	mov.w	r9, #1
 8015d94:	e7fa      	b.n	8015d8c <__gethex+0x132>
 8015d96:	230a      	movs	r3, #10
 8015d98:	fb03 0202 	mla	r2, r3, r2, r0
 8015d9c:	3a10      	subs	r2, #16
 8015d9e:	e7cf      	b.n	8015d40 <__gethex+0xe6>
 8015da0:	4631      	mov	r1, r6
 8015da2:	e7da      	b.n	8015d5a <__gethex+0x100>
 8015da4:	1bf3      	subs	r3, r6, r7
 8015da6:	3b01      	subs	r3, #1
 8015da8:	4629      	mov	r1, r5
 8015daa:	2b07      	cmp	r3, #7
 8015dac:	dc49      	bgt.n	8015e42 <__gethex+0x1e8>
 8015dae:	9802      	ldr	r0, [sp, #8]
 8015db0:	f000 fae7 	bl	8016382 <_Balloc>
 8015db4:	9b01      	ldr	r3, [sp, #4]
 8015db6:	f100 0914 	add.w	r9, r0, #20
 8015dba:	f04f 0b00 	mov.w	fp, #0
 8015dbe:	f1c3 0301 	rsb	r3, r3, #1
 8015dc2:	4605      	mov	r5, r0
 8015dc4:	f8cd 9010 	str.w	r9, [sp, #16]
 8015dc8:	46da      	mov	sl, fp
 8015dca:	9308      	str	r3, [sp, #32]
 8015dcc:	42b7      	cmp	r7, r6
 8015dce:	d33b      	bcc.n	8015e48 <__gethex+0x1ee>
 8015dd0:	9804      	ldr	r0, [sp, #16]
 8015dd2:	f840 ab04 	str.w	sl, [r0], #4
 8015dd6:	eba0 0009 	sub.w	r0, r0, r9
 8015dda:	1080      	asrs	r0, r0, #2
 8015ddc:	6128      	str	r0, [r5, #16]
 8015dde:	0147      	lsls	r7, r0, #5
 8015de0:	4650      	mov	r0, sl
 8015de2:	f000 fb92 	bl	801650a <__hi0bits>
 8015de6:	f8d8 6000 	ldr.w	r6, [r8]
 8015dea:	1a3f      	subs	r7, r7, r0
 8015dec:	42b7      	cmp	r7, r6
 8015dee:	dd64      	ble.n	8015eba <__gethex+0x260>
 8015df0:	1bbf      	subs	r7, r7, r6
 8015df2:	4639      	mov	r1, r7
 8015df4:	4628      	mov	r0, r5
 8015df6:	f000 fea1 	bl	8016b3c <__any_on>
 8015dfa:	4682      	mov	sl, r0
 8015dfc:	b178      	cbz	r0, 8015e1e <__gethex+0x1c4>
 8015dfe:	1e7b      	subs	r3, r7, #1
 8015e00:	1159      	asrs	r1, r3, #5
 8015e02:	f003 021f 	and.w	r2, r3, #31
 8015e06:	f04f 0a01 	mov.w	sl, #1
 8015e0a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015e0e:	fa0a f202 	lsl.w	r2, sl, r2
 8015e12:	420a      	tst	r2, r1
 8015e14:	d003      	beq.n	8015e1e <__gethex+0x1c4>
 8015e16:	4553      	cmp	r3, sl
 8015e18:	dc46      	bgt.n	8015ea8 <__gethex+0x24e>
 8015e1a:	f04f 0a02 	mov.w	sl, #2
 8015e1e:	4639      	mov	r1, r7
 8015e20:	4628      	mov	r0, r5
 8015e22:	f7ff fecb 	bl	8015bbc <rshift>
 8015e26:	443c      	add	r4, r7
 8015e28:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015e2c:	42a3      	cmp	r3, r4
 8015e2e:	da52      	bge.n	8015ed6 <__gethex+0x27c>
 8015e30:	4629      	mov	r1, r5
 8015e32:	9802      	ldr	r0, [sp, #8]
 8015e34:	f000 fad9 	bl	80163ea <_Bfree>
 8015e38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	6013      	str	r3, [r2, #0]
 8015e3e:	27a3      	movs	r7, #163	; 0xa3
 8015e40:	e793      	b.n	8015d6a <__gethex+0x110>
 8015e42:	3101      	adds	r1, #1
 8015e44:	105b      	asrs	r3, r3, #1
 8015e46:	e7b0      	b.n	8015daa <__gethex+0x150>
 8015e48:	1e73      	subs	r3, r6, #1
 8015e4a:	9305      	str	r3, [sp, #20]
 8015e4c:	9a07      	ldr	r2, [sp, #28]
 8015e4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015e52:	4293      	cmp	r3, r2
 8015e54:	d018      	beq.n	8015e88 <__gethex+0x22e>
 8015e56:	f1bb 0f20 	cmp.w	fp, #32
 8015e5a:	d107      	bne.n	8015e6c <__gethex+0x212>
 8015e5c:	9b04      	ldr	r3, [sp, #16]
 8015e5e:	f8c3 a000 	str.w	sl, [r3]
 8015e62:	3304      	adds	r3, #4
 8015e64:	f04f 0a00 	mov.w	sl, #0
 8015e68:	9304      	str	r3, [sp, #16]
 8015e6a:	46d3      	mov	fp, sl
 8015e6c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015e70:	f7ff fede 	bl	8015c30 <__hexdig_fun>
 8015e74:	f000 000f 	and.w	r0, r0, #15
 8015e78:	fa00 f00b 	lsl.w	r0, r0, fp
 8015e7c:	ea4a 0a00 	orr.w	sl, sl, r0
 8015e80:	f10b 0b04 	add.w	fp, fp, #4
 8015e84:	9b05      	ldr	r3, [sp, #20]
 8015e86:	e00d      	b.n	8015ea4 <__gethex+0x24a>
 8015e88:	9b05      	ldr	r3, [sp, #20]
 8015e8a:	9a08      	ldr	r2, [sp, #32]
 8015e8c:	4413      	add	r3, r2
 8015e8e:	42bb      	cmp	r3, r7
 8015e90:	d3e1      	bcc.n	8015e56 <__gethex+0x1fc>
 8015e92:	4618      	mov	r0, r3
 8015e94:	9a01      	ldr	r2, [sp, #4]
 8015e96:	9903      	ldr	r1, [sp, #12]
 8015e98:	9309      	str	r3, [sp, #36]	; 0x24
 8015e9a:	f001 fd0f 	bl	80178bc <strncmp>
 8015e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ea0:	2800      	cmp	r0, #0
 8015ea2:	d1d8      	bne.n	8015e56 <__gethex+0x1fc>
 8015ea4:	461e      	mov	r6, r3
 8015ea6:	e791      	b.n	8015dcc <__gethex+0x172>
 8015ea8:	1eb9      	subs	r1, r7, #2
 8015eaa:	4628      	mov	r0, r5
 8015eac:	f000 fe46 	bl	8016b3c <__any_on>
 8015eb0:	2800      	cmp	r0, #0
 8015eb2:	d0b2      	beq.n	8015e1a <__gethex+0x1c0>
 8015eb4:	f04f 0a03 	mov.w	sl, #3
 8015eb8:	e7b1      	b.n	8015e1e <__gethex+0x1c4>
 8015eba:	da09      	bge.n	8015ed0 <__gethex+0x276>
 8015ebc:	1bf7      	subs	r7, r6, r7
 8015ebe:	4629      	mov	r1, r5
 8015ec0:	463a      	mov	r2, r7
 8015ec2:	9802      	ldr	r0, [sp, #8]
 8015ec4:	f000 fc5c 	bl	8016780 <__lshift>
 8015ec8:	1be4      	subs	r4, r4, r7
 8015eca:	4605      	mov	r5, r0
 8015ecc:	f100 0914 	add.w	r9, r0, #20
 8015ed0:	f04f 0a00 	mov.w	sl, #0
 8015ed4:	e7a8      	b.n	8015e28 <__gethex+0x1ce>
 8015ed6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015eda:	42a0      	cmp	r0, r4
 8015edc:	dd6a      	ble.n	8015fb4 <__gethex+0x35a>
 8015ede:	1b04      	subs	r4, r0, r4
 8015ee0:	42a6      	cmp	r6, r4
 8015ee2:	dc2e      	bgt.n	8015f42 <__gethex+0x2e8>
 8015ee4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015ee8:	2b02      	cmp	r3, #2
 8015eea:	d022      	beq.n	8015f32 <__gethex+0x2d8>
 8015eec:	2b03      	cmp	r3, #3
 8015eee:	d024      	beq.n	8015f3a <__gethex+0x2e0>
 8015ef0:	2b01      	cmp	r3, #1
 8015ef2:	d115      	bne.n	8015f20 <__gethex+0x2c6>
 8015ef4:	42a6      	cmp	r6, r4
 8015ef6:	d113      	bne.n	8015f20 <__gethex+0x2c6>
 8015ef8:	2e01      	cmp	r6, #1
 8015efa:	dc0b      	bgt.n	8015f14 <__gethex+0x2ba>
 8015efc:	9a06      	ldr	r2, [sp, #24]
 8015efe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015f02:	6013      	str	r3, [r2, #0]
 8015f04:	2301      	movs	r3, #1
 8015f06:	612b      	str	r3, [r5, #16]
 8015f08:	f8c9 3000 	str.w	r3, [r9]
 8015f0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015f0e:	2762      	movs	r7, #98	; 0x62
 8015f10:	601d      	str	r5, [r3, #0]
 8015f12:	e72a      	b.n	8015d6a <__gethex+0x110>
 8015f14:	1e71      	subs	r1, r6, #1
 8015f16:	4628      	mov	r0, r5
 8015f18:	f000 fe10 	bl	8016b3c <__any_on>
 8015f1c:	2800      	cmp	r0, #0
 8015f1e:	d1ed      	bne.n	8015efc <__gethex+0x2a2>
 8015f20:	4629      	mov	r1, r5
 8015f22:	9802      	ldr	r0, [sp, #8]
 8015f24:	f000 fa61 	bl	80163ea <_Bfree>
 8015f28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	6013      	str	r3, [r2, #0]
 8015f2e:	2750      	movs	r7, #80	; 0x50
 8015f30:	e71b      	b.n	8015d6a <__gethex+0x110>
 8015f32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d0e1      	beq.n	8015efc <__gethex+0x2a2>
 8015f38:	e7f2      	b.n	8015f20 <__gethex+0x2c6>
 8015f3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d1dd      	bne.n	8015efc <__gethex+0x2a2>
 8015f40:	e7ee      	b.n	8015f20 <__gethex+0x2c6>
 8015f42:	1e67      	subs	r7, r4, #1
 8015f44:	f1ba 0f00 	cmp.w	sl, #0
 8015f48:	d131      	bne.n	8015fae <__gethex+0x354>
 8015f4a:	b127      	cbz	r7, 8015f56 <__gethex+0x2fc>
 8015f4c:	4639      	mov	r1, r7
 8015f4e:	4628      	mov	r0, r5
 8015f50:	f000 fdf4 	bl	8016b3c <__any_on>
 8015f54:	4682      	mov	sl, r0
 8015f56:	117a      	asrs	r2, r7, #5
 8015f58:	2301      	movs	r3, #1
 8015f5a:	f007 071f 	and.w	r7, r7, #31
 8015f5e:	fa03 f707 	lsl.w	r7, r3, r7
 8015f62:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015f66:	4621      	mov	r1, r4
 8015f68:	421f      	tst	r7, r3
 8015f6a:	4628      	mov	r0, r5
 8015f6c:	bf18      	it	ne
 8015f6e:	f04a 0a02 	orrne.w	sl, sl, #2
 8015f72:	1b36      	subs	r6, r6, r4
 8015f74:	f7ff fe22 	bl	8015bbc <rshift>
 8015f78:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015f7c:	2702      	movs	r7, #2
 8015f7e:	f1ba 0f00 	cmp.w	sl, #0
 8015f82:	d048      	beq.n	8016016 <__gethex+0x3bc>
 8015f84:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015f88:	2b02      	cmp	r3, #2
 8015f8a:	d015      	beq.n	8015fb8 <__gethex+0x35e>
 8015f8c:	2b03      	cmp	r3, #3
 8015f8e:	d017      	beq.n	8015fc0 <__gethex+0x366>
 8015f90:	2b01      	cmp	r3, #1
 8015f92:	d109      	bne.n	8015fa8 <__gethex+0x34e>
 8015f94:	f01a 0f02 	tst.w	sl, #2
 8015f98:	d006      	beq.n	8015fa8 <__gethex+0x34e>
 8015f9a:	f8d9 3000 	ldr.w	r3, [r9]
 8015f9e:	ea4a 0a03 	orr.w	sl, sl, r3
 8015fa2:	f01a 0f01 	tst.w	sl, #1
 8015fa6:	d10e      	bne.n	8015fc6 <__gethex+0x36c>
 8015fa8:	f047 0710 	orr.w	r7, r7, #16
 8015fac:	e033      	b.n	8016016 <__gethex+0x3bc>
 8015fae:	f04f 0a01 	mov.w	sl, #1
 8015fb2:	e7d0      	b.n	8015f56 <__gethex+0x2fc>
 8015fb4:	2701      	movs	r7, #1
 8015fb6:	e7e2      	b.n	8015f7e <__gethex+0x324>
 8015fb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015fba:	f1c3 0301 	rsb	r3, r3, #1
 8015fbe:	9315      	str	r3, [sp, #84]	; 0x54
 8015fc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d0f0      	beq.n	8015fa8 <__gethex+0x34e>
 8015fc6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015fca:	f105 0314 	add.w	r3, r5, #20
 8015fce:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015fd2:	eb03 010a 	add.w	r1, r3, sl
 8015fd6:	f04f 0c00 	mov.w	ip, #0
 8015fda:	4618      	mov	r0, r3
 8015fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fe0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015fe4:	d01c      	beq.n	8016020 <__gethex+0x3c6>
 8015fe6:	3201      	adds	r2, #1
 8015fe8:	6002      	str	r2, [r0, #0]
 8015fea:	2f02      	cmp	r7, #2
 8015fec:	f105 0314 	add.w	r3, r5, #20
 8015ff0:	d138      	bne.n	8016064 <__gethex+0x40a>
 8015ff2:	f8d8 2000 	ldr.w	r2, [r8]
 8015ff6:	3a01      	subs	r2, #1
 8015ff8:	42b2      	cmp	r2, r6
 8015ffa:	d10a      	bne.n	8016012 <__gethex+0x3b8>
 8015ffc:	1171      	asrs	r1, r6, #5
 8015ffe:	2201      	movs	r2, #1
 8016000:	f006 061f 	and.w	r6, r6, #31
 8016004:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016008:	fa02 f606 	lsl.w	r6, r2, r6
 801600c:	421e      	tst	r6, r3
 801600e:	bf18      	it	ne
 8016010:	4617      	movne	r7, r2
 8016012:	f047 0720 	orr.w	r7, r7, #32
 8016016:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016018:	601d      	str	r5, [r3, #0]
 801601a:	9b06      	ldr	r3, [sp, #24]
 801601c:	601c      	str	r4, [r3, #0]
 801601e:	e6a4      	b.n	8015d6a <__gethex+0x110>
 8016020:	4299      	cmp	r1, r3
 8016022:	f843 cc04 	str.w	ip, [r3, #-4]
 8016026:	d8d8      	bhi.n	8015fda <__gethex+0x380>
 8016028:	68ab      	ldr	r3, [r5, #8]
 801602a:	4599      	cmp	r9, r3
 801602c:	db12      	blt.n	8016054 <__gethex+0x3fa>
 801602e:	6869      	ldr	r1, [r5, #4]
 8016030:	9802      	ldr	r0, [sp, #8]
 8016032:	3101      	adds	r1, #1
 8016034:	f000 f9a5 	bl	8016382 <_Balloc>
 8016038:	692a      	ldr	r2, [r5, #16]
 801603a:	3202      	adds	r2, #2
 801603c:	f105 010c 	add.w	r1, r5, #12
 8016040:	4683      	mov	fp, r0
 8016042:	0092      	lsls	r2, r2, #2
 8016044:	300c      	adds	r0, #12
 8016046:	f000 f991 	bl	801636c <memcpy>
 801604a:	4629      	mov	r1, r5
 801604c:	9802      	ldr	r0, [sp, #8]
 801604e:	f000 f9cc 	bl	80163ea <_Bfree>
 8016052:	465d      	mov	r5, fp
 8016054:	692b      	ldr	r3, [r5, #16]
 8016056:	1c5a      	adds	r2, r3, #1
 8016058:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801605c:	612a      	str	r2, [r5, #16]
 801605e:	2201      	movs	r2, #1
 8016060:	615a      	str	r2, [r3, #20]
 8016062:	e7c2      	b.n	8015fea <__gethex+0x390>
 8016064:	692a      	ldr	r2, [r5, #16]
 8016066:	454a      	cmp	r2, r9
 8016068:	dd0b      	ble.n	8016082 <__gethex+0x428>
 801606a:	2101      	movs	r1, #1
 801606c:	4628      	mov	r0, r5
 801606e:	f7ff fda5 	bl	8015bbc <rshift>
 8016072:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016076:	3401      	adds	r4, #1
 8016078:	42a3      	cmp	r3, r4
 801607a:	f6ff aed9 	blt.w	8015e30 <__gethex+0x1d6>
 801607e:	2701      	movs	r7, #1
 8016080:	e7c7      	b.n	8016012 <__gethex+0x3b8>
 8016082:	f016 061f 	ands.w	r6, r6, #31
 8016086:	d0fa      	beq.n	801607e <__gethex+0x424>
 8016088:	449a      	add	sl, r3
 801608a:	f1c6 0620 	rsb	r6, r6, #32
 801608e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8016092:	f000 fa3a 	bl	801650a <__hi0bits>
 8016096:	42b0      	cmp	r0, r6
 8016098:	dbe7      	blt.n	801606a <__gethex+0x410>
 801609a:	e7f0      	b.n	801607e <__gethex+0x424>

0801609c <L_shift>:
 801609c:	f1c2 0208 	rsb	r2, r2, #8
 80160a0:	0092      	lsls	r2, r2, #2
 80160a2:	b570      	push	{r4, r5, r6, lr}
 80160a4:	f1c2 0620 	rsb	r6, r2, #32
 80160a8:	6843      	ldr	r3, [r0, #4]
 80160aa:	6804      	ldr	r4, [r0, #0]
 80160ac:	fa03 f506 	lsl.w	r5, r3, r6
 80160b0:	432c      	orrs	r4, r5
 80160b2:	40d3      	lsrs	r3, r2
 80160b4:	6004      	str	r4, [r0, #0]
 80160b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80160ba:	4288      	cmp	r0, r1
 80160bc:	d3f4      	bcc.n	80160a8 <L_shift+0xc>
 80160be:	bd70      	pop	{r4, r5, r6, pc}

080160c0 <__match>:
 80160c0:	b530      	push	{r4, r5, lr}
 80160c2:	6803      	ldr	r3, [r0, #0]
 80160c4:	3301      	adds	r3, #1
 80160c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80160ca:	b914      	cbnz	r4, 80160d2 <__match+0x12>
 80160cc:	6003      	str	r3, [r0, #0]
 80160ce:	2001      	movs	r0, #1
 80160d0:	bd30      	pop	{r4, r5, pc}
 80160d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160d6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80160da:	2d19      	cmp	r5, #25
 80160dc:	bf98      	it	ls
 80160de:	3220      	addls	r2, #32
 80160e0:	42a2      	cmp	r2, r4
 80160e2:	d0f0      	beq.n	80160c6 <__match+0x6>
 80160e4:	2000      	movs	r0, #0
 80160e6:	e7f3      	b.n	80160d0 <__match+0x10>

080160e8 <__hexnan>:
 80160e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160ec:	680b      	ldr	r3, [r1, #0]
 80160ee:	6801      	ldr	r1, [r0, #0]
 80160f0:	115f      	asrs	r7, r3, #5
 80160f2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80160f6:	f013 031f 	ands.w	r3, r3, #31
 80160fa:	b087      	sub	sp, #28
 80160fc:	bf18      	it	ne
 80160fe:	3704      	addne	r7, #4
 8016100:	2500      	movs	r5, #0
 8016102:	1f3e      	subs	r6, r7, #4
 8016104:	4682      	mov	sl, r0
 8016106:	4690      	mov	r8, r2
 8016108:	9301      	str	r3, [sp, #4]
 801610a:	f847 5c04 	str.w	r5, [r7, #-4]
 801610e:	46b1      	mov	r9, r6
 8016110:	4634      	mov	r4, r6
 8016112:	9502      	str	r5, [sp, #8]
 8016114:	46ab      	mov	fp, r5
 8016116:	784a      	ldrb	r2, [r1, #1]
 8016118:	1c4b      	adds	r3, r1, #1
 801611a:	9303      	str	r3, [sp, #12]
 801611c:	b342      	cbz	r2, 8016170 <__hexnan+0x88>
 801611e:	4610      	mov	r0, r2
 8016120:	9105      	str	r1, [sp, #20]
 8016122:	9204      	str	r2, [sp, #16]
 8016124:	f7ff fd84 	bl	8015c30 <__hexdig_fun>
 8016128:	2800      	cmp	r0, #0
 801612a:	d143      	bne.n	80161b4 <__hexnan+0xcc>
 801612c:	9a04      	ldr	r2, [sp, #16]
 801612e:	9905      	ldr	r1, [sp, #20]
 8016130:	2a20      	cmp	r2, #32
 8016132:	d818      	bhi.n	8016166 <__hexnan+0x7e>
 8016134:	9b02      	ldr	r3, [sp, #8]
 8016136:	459b      	cmp	fp, r3
 8016138:	dd13      	ble.n	8016162 <__hexnan+0x7a>
 801613a:	454c      	cmp	r4, r9
 801613c:	d206      	bcs.n	801614c <__hexnan+0x64>
 801613e:	2d07      	cmp	r5, #7
 8016140:	dc04      	bgt.n	801614c <__hexnan+0x64>
 8016142:	462a      	mov	r2, r5
 8016144:	4649      	mov	r1, r9
 8016146:	4620      	mov	r0, r4
 8016148:	f7ff ffa8 	bl	801609c <L_shift>
 801614c:	4544      	cmp	r4, r8
 801614e:	d944      	bls.n	80161da <__hexnan+0xf2>
 8016150:	2300      	movs	r3, #0
 8016152:	f1a4 0904 	sub.w	r9, r4, #4
 8016156:	f844 3c04 	str.w	r3, [r4, #-4]
 801615a:	f8cd b008 	str.w	fp, [sp, #8]
 801615e:	464c      	mov	r4, r9
 8016160:	461d      	mov	r5, r3
 8016162:	9903      	ldr	r1, [sp, #12]
 8016164:	e7d7      	b.n	8016116 <__hexnan+0x2e>
 8016166:	2a29      	cmp	r2, #41	; 0x29
 8016168:	d14a      	bne.n	8016200 <__hexnan+0x118>
 801616a:	3102      	adds	r1, #2
 801616c:	f8ca 1000 	str.w	r1, [sl]
 8016170:	f1bb 0f00 	cmp.w	fp, #0
 8016174:	d044      	beq.n	8016200 <__hexnan+0x118>
 8016176:	454c      	cmp	r4, r9
 8016178:	d206      	bcs.n	8016188 <__hexnan+0xa0>
 801617a:	2d07      	cmp	r5, #7
 801617c:	dc04      	bgt.n	8016188 <__hexnan+0xa0>
 801617e:	462a      	mov	r2, r5
 8016180:	4649      	mov	r1, r9
 8016182:	4620      	mov	r0, r4
 8016184:	f7ff ff8a 	bl	801609c <L_shift>
 8016188:	4544      	cmp	r4, r8
 801618a:	d928      	bls.n	80161de <__hexnan+0xf6>
 801618c:	4643      	mov	r3, r8
 801618e:	f854 2b04 	ldr.w	r2, [r4], #4
 8016192:	f843 2b04 	str.w	r2, [r3], #4
 8016196:	42a6      	cmp	r6, r4
 8016198:	d2f9      	bcs.n	801618e <__hexnan+0xa6>
 801619a:	2200      	movs	r2, #0
 801619c:	f843 2b04 	str.w	r2, [r3], #4
 80161a0:	429e      	cmp	r6, r3
 80161a2:	d2fb      	bcs.n	801619c <__hexnan+0xb4>
 80161a4:	6833      	ldr	r3, [r6, #0]
 80161a6:	b91b      	cbnz	r3, 80161b0 <__hexnan+0xc8>
 80161a8:	4546      	cmp	r6, r8
 80161aa:	d127      	bne.n	80161fc <__hexnan+0x114>
 80161ac:	2301      	movs	r3, #1
 80161ae:	6033      	str	r3, [r6, #0]
 80161b0:	2005      	movs	r0, #5
 80161b2:	e026      	b.n	8016202 <__hexnan+0x11a>
 80161b4:	3501      	adds	r5, #1
 80161b6:	2d08      	cmp	r5, #8
 80161b8:	f10b 0b01 	add.w	fp, fp, #1
 80161bc:	dd06      	ble.n	80161cc <__hexnan+0xe4>
 80161be:	4544      	cmp	r4, r8
 80161c0:	d9cf      	bls.n	8016162 <__hexnan+0x7a>
 80161c2:	2300      	movs	r3, #0
 80161c4:	f844 3c04 	str.w	r3, [r4, #-4]
 80161c8:	2501      	movs	r5, #1
 80161ca:	3c04      	subs	r4, #4
 80161cc:	6822      	ldr	r2, [r4, #0]
 80161ce:	f000 000f 	and.w	r0, r0, #15
 80161d2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80161d6:	6020      	str	r0, [r4, #0]
 80161d8:	e7c3      	b.n	8016162 <__hexnan+0x7a>
 80161da:	2508      	movs	r5, #8
 80161dc:	e7c1      	b.n	8016162 <__hexnan+0x7a>
 80161de:	9b01      	ldr	r3, [sp, #4]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d0df      	beq.n	80161a4 <__hexnan+0xbc>
 80161e4:	f04f 32ff 	mov.w	r2, #4294967295
 80161e8:	f1c3 0320 	rsb	r3, r3, #32
 80161ec:	fa22 f303 	lsr.w	r3, r2, r3
 80161f0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80161f4:	401a      	ands	r2, r3
 80161f6:	f847 2c04 	str.w	r2, [r7, #-4]
 80161fa:	e7d3      	b.n	80161a4 <__hexnan+0xbc>
 80161fc:	3e04      	subs	r6, #4
 80161fe:	e7d1      	b.n	80161a4 <__hexnan+0xbc>
 8016200:	2004      	movs	r0, #4
 8016202:	b007      	add	sp, #28
 8016204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016208 <__locale_ctype_ptr_l>:
 8016208:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801620c:	4770      	bx	lr
	...

08016210 <__locale_ctype_ptr>:
 8016210:	4b04      	ldr	r3, [pc, #16]	; (8016224 <__locale_ctype_ptr+0x14>)
 8016212:	4a05      	ldr	r2, [pc, #20]	; (8016228 <__locale_ctype_ptr+0x18>)
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	6a1b      	ldr	r3, [r3, #32]
 8016218:	2b00      	cmp	r3, #0
 801621a:	bf08      	it	eq
 801621c:	4613      	moveq	r3, r2
 801621e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8016222:	4770      	bx	lr
 8016224:	2000000c 	.word	0x2000000c
 8016228:	20000070 	.word	0x20000070

0801622c <__localeconv_l>:
 801622c:	30f0      	adds	r0, #240	; 0xf0
 801622e:	4770      	bx	lr

08016230 <_localeconv_r>:
 8016230:	4b04      	ldr	r3, [pc, #16]	; (8016244 <_localeconv_r+0x14>)
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	6a18      	ldr	r0, [r3, #32]
 8016236:	4b04      	ldr	r3, [pc, #16]	; (8016248 <_localeconv_r+0x18>)
 8016238:	2800      	cmp	r0, #0
 801623a:	bf08      	it	eq
 801623c:	4618      	moveq	r0, r3
 801623e:	30f0      	adds	r0, #240	; 0xf0
 8016240:	4770      	bx	lr
 8016242:	bf00      	nop
 8016244:	2000000c 	.word	0x2000000c
 8016248:	20000070 	.word	0x20000070

0801624c <_lseek_r>:
 801624c:	b538      	push	{r3, r4, r5, lr}
 801624e:	4c07      	ldr	r4, [pc, #28]	; (801626c <_lseek_r+0x20>)
 8016250:	4605      	mov	r5, r0
 8016252:	4608      	mov	r0, r1
 8016254:	4611      	mov	r1, r2
 8016256:	2200      	movs	r2, #0
 8016258:	6022      	str	r2, [r4, #0]
 801625a:	461a      	mov	r2, r3
 801625c:	f7ef fb60 	bl	8005920 <_lseek>
 8016260:	1c43      	adds	r3, r0, #1
 8016262:	d102      	bne.n	801626a <_lseek_r+0x1e>
 8016264:	6823      	ldr	r3, [r4, #0]
 8016266:	b103      	cbz	r3, 801626a <_lseek_r+0x1e>
 8016268:	602b      	str	r3, [r5, #0]
 801626a:	bd38      	pop	{r3, r4, r5, pc}
 801626c:	2003b620 	.word	0x2003b620

08016270 <__swhatbuf_r>:
 8016270:	b570      	push	{r4, r5, r6, lr}
 8016272:	460e      	mov	r6, r1
 8016274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016278:	2900      	cmp	r1, #0
 801627a:	b096      	sub	sp, #88	; 0x58
 801627c:	4614      	mov	r4, r2
 801627e:	461d      	mov	r5, r3
 8016280:	da07      	bge.n	8016292 <__swhatbuf_r+0x22>
 8016282:	2300      	movs	r3, #0
 8016284:	602b      	str	r3, [r5, #0]
 8016286:	89b3      	ldrh	r3, [r6, #12]
 8016288:	061a      	lsls	r2, r3, #24
 801628a:	d410      	bmi.n	80162ae <__swhatbuf_r+0x3e>
 801628c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016290:	e00e      	b.n	80162b0 <__swhatbuf_r+0x40>
 8016292:	466a      	mov	r2, sp
 8016294:	f001 fbf8 	bl	8017a88 <_fstat_r>
 8016298:	2800      	cmp	r0, #0
 801629a:	dbf2      	blt.n	8016282 <__swhatbuf_r+0x12>
 801629c:	9a01      	ldr	r2, [sp, #4]
 801629e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80162a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80162a6:	425a      	negs	r2, r3
 80162a8:	415a      	adcs	r2, r3
 80162aa:	602a      	str	r2, [r5, #0]
 80162ac:	e7ee      	b.n	801628c <__swhatbuf_r+0x1c>
 80162ae:	2340      	movs	r3, #64	; 0x40
 80162b0:	2000      	movs	r0, #0
 80162b2:	6023      	str	r3, [r4, #0]
 80162b4:	b016      	add	sp, #88	; 0x58
 80162b6:	bd70      	pop	{r4, r5, r6, pc}

080162b8 <__smakebuf_r>:
 80162b8:	898b      	ldrh	r3, [r1, #12]
 80162ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80162bc:	079d      	lsls	r5, r3, #30
 80162be:	4606      	mov	r6, r0
 80162c0:	460c      	mov	r4, r1
 80162c2:	d507      	bpl.n	80162d4 <__smakebuf_r+0x1c>
 80162c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80162c8:	6023      	str	r3, [r4, #0]
 80162ca:	6123      	str	r3, [r4, #16]
 80162cc:	2301      	movs	r3, #1
 80162ce:	6163      	str	r3, [r4, #20]
 80162d0:	b002      	add	sp, #8
 80162d2:	bd70      	pop	{r4, r5, r6, pc}
 80162d4:	ab01      	add	r3, sp, #4
 80162d6:	466a      	mov	r2, sp
 80162d8:	f7ff ffca 	bl	8016270 <__swhatbuf_r>
 80162dc:	9900      	ldr	r1, [sp, #0]
 80162de:	4605      	mov	r5, r0
 80162e0:	4630      	mov	r0, r6
 80162e2:	f000 fca9 	bl	8016c38 <_malloc_r>
 80162e6:	b948      	cbnz	r0, 80162fc <__smakebuf_r+0x44>
 80162e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80162ec:	059a      	lsls	r2, r3, #22
 80162ee:	d4ef      	bmi.n	80162d0 <__smakebuf_r+0x18>
 80162f0:	f023 0303 	bic.w	r3, r3, #3
 80162f4:	f043 0302 	orr.w	r3, r3, #2
 80162f8:	81a3      	strh	r3, [r4, #12]
 80162fa:	e7e3      	b.n	80162c4 <__smakebuf_r+0xc>
 80162fc:	4b0d      	ldr	r3, [pc, #52]	; (8016334 <__smakebuf_r+0x7c>)
 80162fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8016300:	89a3      	ldrh	r3, [r4, #12]
 8016302:	6020      	str	r0, [r4, #0]
 8016304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016308:	81a3      	strh	r3, [r4, #12]
 801630a:	9b00      	ldr	r3, [sp, #0]
 801630c:	6163      	str	r3, [r4, #20]
 801630e:	9b01      	ldr	r3, [sp, #4]
 8016310:	6120      	str	r0, [r4, #16]
 8016312:	b15b      	cbz	r3, 801632c <__smakebuf_r+0x74>
 8016314:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016318:	4630      	mov	r0, r6
 801631a:	f001 fbc7 	bl	8017aac <_isatty_r>
 801631e:	b128      	cbz	r0, 801632c <__smakebuf_r+0x74>
 8016320:	89a3      	ldrh	r3, [r4, #12]
 8016322:	f023 0303 	bic.w	r3, r3, #3
 8016326:	f043 0301 	orr.w	r3, r3, #1
 801632a:	81a3      	strh	r3, [r4, #12]
 801632c:	89a3      	ldrh	r3, [r4, #12]
 801632e:	431d      	orrs	r5, r3
 8016330:	81a5      	strh	r5, [r4, #12]
 8016332:	e7cd      	b.n	80162d0 <__smakebuf_r+0x18>
 8016334:	08015a71 	.word	0x08015a71

08016338 <malloc>:
 8016338:	4b02      	ldr	r3, [pc, #8]	; (8016344 <malloc+0xc>)
 801633a:	4601      	mov	r1, r0
 801633c:	6818      	ldr	r0, [r3, #0]
 801633e:	f000 bc7b 	b.w	8016c38 <_malloc_r>
 8016342:	bf00      	nop
 8016344:	2000000c 	.word	0x2000000c

08016348 <__ascii_mbtowc>:
 8016348:	b082      	sub	sp, #8
 801634a:	b901      	cbnz	r1, 801634e <__ascii_mbtowc+0x6>
 801634c:	a901      	add	r1, sp, #4
 801634e:	b142      	cbz	r2, 8016362 <__ascii_mbtowc+0x1a>
 8016350:	b14b      	cbz	r3, 8016366 <__ascii_mbtowc+0x1e>
 8016352:	7813      	ldrb	r3, [r2, #0]
 8016354:	600b      	str	r3, [r1, #0]
 8016356:	7812      	ldrb	r2, [r2, #0]
 8016358:	1c10      	adds	r0, r2, #0
 801635a:	bf18      	it	ne
 801635c:	2001      	movne	r0, #1
 801635e:	b002      	add	sp, #8
 8016360:	4770      	bx	lr
 8016362:	4610      	mov	r0, r2
 8016364:	e7fb      	b.n	801635e <__ascii_mbtowc+0x16>
 8016366:	f06f 0001 	mvn.w	r0, #1
 801636a:	e7f8      	b.n	801635e <__ascii_mbtowc+0x16>

0801636c <memcpy>:
 801636c:	b510      	push	{r4, lr}
 801636e:	1e43      	subs	r3, r0, #1
 8016370:	440a      	add	r2, r1
 8016372:	4291      	cmp	r1, r2
 8016374:	d100      	bne.n	8016378 <memcpy+0xc>
 8016376:	bd10      	pop	{r4, pc}
 8016378:	f811 4b01 	ldrb.w	r4, [r1], #1
 801637c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016380:	e7f7      	b.n	8016372 <memcpy+0x6>

08016382 <_Balloc>:
 8016382:	b570      	push	{r4, r5, r6, lr}
 8016384:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016386:	4604      	mov	r4, r0
 8016388:	460e      	mov	r6, r1
 801638a:	b93d      	cbnz	r5, 801639c <_Balloc+0x1a>
 801638c:	2010      	movs	r0, #16
 801638e:	f7ff ffd3 	bl	8016338 <malloc>
 8016392:	6260      	str	r0, [r4, #36]	; 0x24
 8016394:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016398:	6005      	str	r5, [r0, #0]
 801639a:	60c5      	str	r5, [r0, #12]
 801639c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801639e:	68eb      	ldr	r3, [r5, #12]
 80163a0:	b183      	cbz	r3, 80163c4 <_Balloc+0x42>
 80163a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80163a4:	68db      	ldr	r3, [r3, #12]
 80163a6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80163aa:	b9b8      	cbnz	r0, 80163dc <_Balloc+0x5a>
 80163ac:	2101      	movs	r1, #1
 80163ae:	fa01 f506 	lsl.w	r5, r1, r6
 80163b2:	1d6a      	adds	r2, r5, #5
 80163b4:	0092      	lsls	r2, r2, #2
 80163b6:	4620      	mov	r0, r4
 80163b8:	f000 fbe1 	bl	8016b7e <_calloc_r>
 80163bc:	b160      	cbz	r0, 80163d8 <_Balloc+0x56>
 80163be:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80163c2:	e00e      	b.n	80163e2 <_Balloc+0x60>
 80163c4:	2221      	movs	r2, #33	; 0x21
 80163c6:	2104      	movs	r1, #4
 80163c8:	4620      	mov	r0, r4
 80163ca:	f000 fbd8 	bl	8016b7e <_calloc_r>
 80163ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80163d0:	60e8      	str	r0, [r5, #12]
 80163d2:	68db      	ldr	r3, [r3, #12]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d1e4      	bne.n	80163a2 <_Balloc+0x20>
 80163d8:	2000      	movs	r0, #0
 80163da:	bd70      	pop	{r4, r5, r6, pc}
 80163dc:	6802      	ldr	r2, [r0, #0]
 80163de:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80163e2:	2300      	movs	r3, #0
 80163e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80163e8:	e7f7      	b.n	80163da <_Balloc+0x58>

080163ea <_Bfree>:
 80163ea:	b570      	push	{r4, r5, r6, lr}
 80163ec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80163ee:	4606      	mov	r6, r0
 80163f0:	460d      	mov	r5, r1
 80163f2:	b93c      	cbnz	r4, 8016404 <_Bfree+0x1a>
 80163f4:	2010      	movs	r0, #16
 80163f6:	f7ff ff9f 	bl	8016338 <malloc>
 80163fa:	6270      	str	r0, [r6, #36]	; 0x24
 80163fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016400:	6004      	str	r4, [r0, #0]
 8016402:	60c4      	str	r4, [r0, #12]
 8016404:	b13d      	cbz	r5, 8016416 <_Bfree+0x2c>
 8016406:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016408:	686a      	ldr	r2, [r5, #4]
 801640a:	68db      	ldr	r3, [r3, #12]
 801640c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016410:	6029      	str	r1, [r5, #0]
 8016412:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016416:	bd70      	pop	{r4, r5, r6, pc}

08016418 <__multadd>:
 8016418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801641c:	690d      	ldr	r5, [r1, #16]
 801641e:	461f      	mov	r7, r3
 8016420:	4606      	mov	r6, r0
 8016422:	460c      	mov	r4, r1
 8016424:	f101 0c14 	add.w	ip, r1, #20
 8016428:	2300      	movs	r3, #0
 801642a:	f8dc 0000 	ldr.w	r0, [ip]
 801642e:	b281      	uxth	r1, r0
 8016430:	fb02 7101 	mla	r1, r2, r1, r7
 8016434:	0c0f      	lsrs	r7, r1, #16
 8016436:	0c00      	lsrs	r0, r0, #16
 8016438:	fb02 7000 	mla	r0, r2, r0, r7
 801643c:	b289      	uxth	r1, r1
 801643e:	3301      	adds	r3, #1
 8016440:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8016444:	429d      	cmp	r5, r3
 8016446:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801644a:	f84c 1b04 	str.w	r1, [ip], #4
 801644e:	dcec      	bgt.n	801642a <__multadd+0x12>
 8016450:	b1d7      	cbz	r7, 8016488 <__multadd+0x70>
 8016452:	68a3      	ldr	r3, [r4, #8]
 8016454:	42ab      	cmp	r3, r5
 8016456:	dc12      	bgt.n	801647e <__multadd+0x66>
 8016458:	6861      	ldr	r1, [r4, #4]
 801645a:	4630      	mov	r0, r6
 801645c:	3101      	adds	r1, #1
 801645e:	f7ff ff90 	bl	8016382 <_Balloc>
 8016462:	6922      	ldr	r2, [r4, #16]
 8016464:	3202      	adds	r2, #2
 8016466:	f104 010c 	add.w	r1, r4, #12
 801646a:	4680      	mov	r8, r0
 801646c:	0092      	lsls	r2, r2, #2
 801646e:	300c      	adds	r0, #12
 8016470:	f7ff ff7c 	bl	801636c <memcpy>
 8016474:	4621      	mov	r1, r4
 8016476:	4630      	mov	r0, r6
 8016478:	f7ff ffb7 	bl	80163ea <_Bfree>
 801647c:	4644      	mov	r4, r8
 801647e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016482:	3501      	adds	r5, #1
 8016484:	615f      	str	r7, [r3, #20]
 8016486:	6125      	str	r5, [r4, #16]
 8016488:	4620      	mov	r0, r4
 801648a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801648e <__s2b>:
 801648e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016492:	460c      	mov	r4, r1
 8016494:	4615      	mov	r5, r2
 8016496:	461f      	mov	r7, r3
 8016498:	2209      	movs	r2, #9
 801649a:	3308      	adds	r3, #8
 801649c:	4606      	mov	r6, r0
 801649e:	fb93 f3f2 	sdiv	r3, r3, r2
 80164a2:	2100      	movs	r1, #0
 80164a4:	2201      	movs	r2, #1
 80164a6:	429a      	cmp	r2, r3
 80164a8:	db20      	blt.n	80164ec <__s2b+0x5e>
 80164aa:	4630      	mov	r0, r6
 80164ac:	f7ff ff69 	bl	8016382 <_Balloc>
 80164b0:	9b08      	ldr	r3, [sp, #32]
 80164b2:	6143      	str	r3, [r0, #20]
 80164b4:	2d09      	cmp	r5, #9
 80164b6:	f04f 0301 	mov.w	r3, #1
 80164ba:	6103      	str	r3, [r0, #16]
 80164bc:	dd19      	ble.n	80164f2 <__s2b+0x64>
 80164be:	f104 0809 	add.w	r8, r4, #9
 80164c2:	46c1      	mov	r9, r8
 80164c4:	442c      	add	r4, r5
 80164c6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80164ca:	4601      	mov	r1, r0
 80164cc:	3b30      	subs	r3, #48	; 0x30
 80164ce:	220a      	movs	r2, #10
 80164d0:	4630      	mov	r0, r6
 80164d2:	f7ff ffa1 	bl	8016418 <__multadd>
 80164d6:	45a1      	cmp	r9, r4
 80164d8:	d1f5      	bne.n	80164c6 <__s2b+0x38>
 80164da:	eb08 0405 	add.w	r4, r8, r5
 80164de:	3c08      	subs	r4, #8
 80164e0:	1b2d      	subs	r5, r5, r4
 80164e2:	1963      	adds	r3, r4, r5
 80164e4:	42bb      	cmp	r3, r7
 80164e6:	db07      	blt.n	80164f8 <__s2b+0x6a>
 80164e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164ec:	0052      	lsls	r2, r2, #1
 80164ee:	3101      	adds	r1, #1
 80164f0:	e7d9      	b.n	80164a6 <__s2b+0x18>
 80164f2:	340a      	adds	r4, #10
 80164f4:	2509      	movs	r5, #9
 80164f6:	e7f3      	b.n	80164e0 <__s2b+0x52>
 80164f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80164fc:	4601      	mov	r1, r0
 80164fe:	3b30      	subs	r3, #48	; 0x30
 8016500:	220a      	movs	r2, #10
 8016502:	4630      	mov	r0, r6
 8016504:	f7ff ff88 	bl	8016418 <__multadd>
 8016508:	e7eb      	b.n	80164e2 <__s2b+0x54>

0801650a <__hi0bits>:
 801650a:	0c02      	lsrs	r2, r0, #16
 801650c:	0412      	lsls	r2, r2, #16
 801650e:	4603      	mov	r3, r0
 8016510:	b9b2      	cbnz	r2, 8016540 <__hi0bits+0x36>
 8016512:	0403      	lsls	r3, r0, #16
 8016514:	2010      	movs	r0, #16
 8016516:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801651a:	bf04      	itt	eq
 801651c:	021b      	lsleq	r3, r3, #8
 801651e:	3008      	addeq	r0, #8
 8016520:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016524:	bf04      	itt	eq
 8016526:	011b      	lsleq	r3, r3, #4
 8016528:	3004      	addeq	r0, #4
 801652a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801652e:	bf04      	itt	eq
 8016530:	009b      	lsleq	r3, r3, #2
 8016532:	3002      	addeq	r0, #2
 8016534:	2b00      	cmp	r3, #0
 8016536:	db06      	blt.n	8016546 <__hi0bits+0x3c>
 8016538:	005b      	lsls	r3, r3, #1
 801653a:	d503      	bpl.n	8016544 <__hi0bits+0x3a>
 801653c:	3001      	adds	r0, #1
 801653e:	4770      	bx	lr
 8016540:	2000      	movs	r0, #0
 8016542:	e7e8      	b.n	8016516 <__hi0bits+0xc>
 8016544:	2020      	movs	r0, #32
 8016546:	4770      	bx	lr

08016548 <__lo0bits>:
 8016548:	6803      	ldr	r3, [r0, #0]
 801654a:	f013 0207 	ands.w	r2, r3, #7
 801654e:	4601      	mov	r1, r0
 8016550:	d00b      	beq.n	801656a <__lo0bits+0x22>
 8016552:	07da      	lsls	r2, r3, #31
 8016554:	d423      	bmi.n	801659e <__lo0bits+0x56>
 8016556:	0798      	lsls	r0, r3, #30
 8016558:	bf49      	itett	mi
 801655a:	085b      	lsrmi	r3, r3, #1
 801655c:	089b      	lsrpl	r3, r3, #2
 801655e:	2001      	movmi	r0, #1
 8016560:	600b      	strmi	r3, [r1, #0]
 8016562:	bf5c      	itt	pl
 8016564:	600b      	strpl	r3, [r1, #0]
 8016566:	2002      	movpl	r0, #2
 8016568:	4770      	bx	lr
 801656a:	b298      	uxth	r0, r3
 801656c:	b9a8      	cbnz	r0, 801659a <__lo0bits+0x52>
 801656e:	0c1b      	lsrs	r3, r3, #16
 8016570:	2010      	movs	r0, #16
 8016572:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016576:	bf04      	itt	eq
 8016578:	0a1b      	lsreq	r3, r3, #8
 801657a:	3008      	addeq	r0, #8
 801657c:	071a      	lsls	r2, r3, #28
 801657e:	bf04      	itt	eq
 8016580:	091b      	lsreq	r3, r3, #4
 8016582:	3004      	addeq	r0, #4
 8016584:	079a      	lsls	r2, r3, #30
 8016586:	bf04      	itt	eq
 8016588:	089b      	lsreq	r3, r3, #2
 801658a:	3002      	addeq	r0, #2
 801658c:	07da      	lsls	r2, r3, #31
 801658e:	d402      	bmi.n	8016596 <__lo0bits+0x4e>
 8016590:	085b      	lsrs	r3, r3, #1
 8016592:	d006      	beq.n	80165a2 <__lo0bits+0x5a>
 8016594:	3001      	adds	r0, #1
 8016596:	600b      	str	r3, [r1, #0]
 8016598:	4770      	bx	lr
 801659a:	4610      	mov	r0, r2
 801659c:	e7e9      	b.n	8016572 <__lo0bits+0x2a>
 801659e:	2000      	movs	r0, #0
 80165a0:	4770      	bx	lr
 80165a2:	2020      	movs	r0, #32
 80165a4:	4770      	bx	lr

080165a6 <__i2b>:
 80165a6:	b510      	push	{r4, lr}
 80165a8:	460c      	mov	r4, r1
 80165aa:	2101      	movs	r1, #1
 80165ac:	f7ff fee9 	bl	8016382 <_Balloc>
 80165b0:	2201      	movs	r2, #1
 80165b2:	6144      	str	r4, [r0, #20]
 80165b4:	6102      	str	r2, [r0, #16]
 80165b6:	bd10      	pop	{r4, pc}

080165b8 <__multiply>:
 80165b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165bc:	4614      	mov	r4, r2
 80165be:	690a      	ldr	r2, [r1, #16]
 80165c0:	6923      	ldr	r3, [r4, #16]
 80165c2:	429a      	cmp	r2, r3
 80165c4:	bfb8      	it	lt
 80165c6:	460b      	movlt	r3, r1
 80165c8:	4688      	mov	r8, r1
 80165ca:	bfbc      	itt	lt
 80165cc:	46a0      	movlt	r8, r4
 80165ce:	461c      	movlt	r4, r3
 80165d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80165d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80165d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80165dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80165e0:	eb07 0609 	add.w	r6, r7, r9
 80165e4:	42b3      	cmp	r3, r6
 80165e6:	bfb8      	it	lt
 80165e8:	3101      	addlt	r1, #1
 80165ea:	f7ff feca 	bl	8016382 <_Balloc>
 80165ee:	f100 0514 	add.w	r5, r0, #20
 80165f2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80165f6:	462b      	mov	r3, r5
 80165f8:	2200      	movs	r2, #0
 80165fa:	4573      	cmp	r3, lr
 80165fc:	d316      	bcc.n	801662c <__multiply+0x74>
 80165fe:	f104 0214 	add.w	r2, r4, #20
 8016602:	f108 0114 	add.w	r1, r8, #20
 8016606:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801660a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801660e:	9300      	str	r3, [sp, #0]
 8016610:	9b00      	ldr	r3, [sp, #0]
 8016612:	9201      	str	r2, [sp, #4]
 8016614:	4293      	cmp	r3, r2
 8016616:	d80c      	bhi.n	8016632 <__multiply+0x7a>
 8016618:	2e00      	cmp	r6, #0
 801661a:	dd03      	ble.n	8016624 <__multiply+0x6c>
 801661c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016620:	2b00      	cmp	r3, #0
 8016622:	d05d      	beq.n	80166e0 <__multiply+0x128>
 8016624:	6106      	str	r6, [r0, #16]
 8016626:	b003      	add	sp, #12
 8016628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801662c:	f843 2b04 	str.w	r2, [r3], #4
 8016630:	e7e3      	b.n	80165fa <__multiply+0x42>
 8016632:	f8b2 b000 	ldrh.w	fp, [r2]
 8016636:	f1bb 0f00 	cmp.w	fp, #0
 801663a:	d023      	beq.n	8016684 <__multiply+0xcc>
 801663c:	4689      	mov	r9, r1
 801663e:	46ac      	mov	ip, r5
 8016640:	f04f 0800 	mov.w	r8, #0
 8016644:	f859 4b04 	ldr.w	r4, [r9], #4
 8016648:	f8dc a000 	ldr.w	sl, [ip]
 801664c:	b2a3      	uxth	r3, r4
 801664e:	fa1f fa8a 	uxth.w	sl, sl
 8016652:	fb0b a303 	mla	r3, fp, r3, sl
 8016656:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801665a:	f8dc 4000 	ldr.w	r4, [ip]
 801665e:	4443      	add	r3, r8
 8016660:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016664:	fb0b 840a 	mla	r4, fp, sl, r8
 8016668:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801666c:	46e2      	mov	sl, ip
 801666e:	b29b      	uxth	r3, r3
 8016670:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016674:	454f      	cmp	r7, r9
 8016676:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801667a:	f84a 3b04 	str.w	r3, [sl], #4
 801667e:	d82b      	bhi.n	80166d8 <__multiply+0x120>
 8016680:	f8cc 8004 	str.w	r8, [ip, #4]
 8016684:	9b01      	ldr	r3, [sp, #4]
 8016686:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801668a:	3204      	adds	r2, #4
 801668c:	f1ba 0f00 	cmp.w	sl, #0
 8016690:	d020      	beq.n	80166d4 <__multiply+0x11c>
 8016692:	682b      	ldr	r3, [r5, #0]
 8016694:	4689      	mov	r9, r1
 8016696:	46a8      	mov	r8, r5
 8016698:	f04f 0b00 	mov.w	fp, #0
 801669c:	f8b9 c000 	ldrh.w	ip, [r9]
 80166a0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80166a4:	fb0a 440c 	mla	r4, sl, ip, r4
 80166a8:	445c      	add	r4, fp
 80166aa:	46c4      	mov	ip, r8
 80166ac:	b29b      	uxth	r3, r3
 80166ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80166b2:	f84c 3b04 	str.w	r3, [ip], #4
 80166b6:	f859 3b04 	ldr.w	r3, [r9], #4
 80166ba:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80166be:	0c1b      	lsrs	r3, r3, #16
 80166c0:	fb0a b303 	mla	r3, sl, r3, fp
 80166c4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80166c8:	454f      	cmp	r7, r9
 80166ca:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80166ce:	d805      	bhi.n	80166dc <__multiply+0x124>
 80166d0:	f8c8 3004 	str.w	r3, [r8, #4]
 80166d4:	3504      	adds	r5, #4
 80166d6:	e79b      	b.n	8016610 <__multiply+0x58>
 80166d8:	46d4      	mov	ip, sl
 80166da:	e7b3      	b.n	8016644 <__multiply+0x8c>
 80166dc:	46e0      	mov	r8, ip
 80166de:	e7dd      	b.n	801669c <__multiply+0xe4>
 80166e0:	3e01      	subs	r6, #1
 80166e2:	e799      	b.n	8016618 <__multiply+0x60>

080166e4 <__pow5mult>:
 80166e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166e8:	4615      	mov	r5, r2
 80166ea:	f012 0203 	ands.w	r2, r2, #3
 80166ee:	4606      	mov	r6, r0
 80166f0:	460f      	mov	r7, r1
 80166f2:	d007      	beq.n	8016704 <__pow5mult+0x20>
 80166f4:	3a01      	subs	r2, #1
 80166f6:	4c21      	ldr	r4, [pc, #132]	; (801677c <__pow5mult+0x98>)
 80166f8:	2300      	movs	r3, #0
 80166fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80166fe:	f7ff fe8b 	bl	8016418 <__multadd>
 8016702:	4607      	mov	r7, r0
 8016704:	10ad      	asrs	r5, r5, #2
 8016706:	d035      	beq.n	8016774 <__pow5mult+0x90>
 8016708:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801670a:	b93c      	cbnz	r4, 801671c <__pow5mult+0x38>
 801670c:	2010      	movs	r0, #16
 801670e:	f7ff fe13 	bl	8016338 <malloc>
 8016712:	6270      	str	r0, [r6, #36]	; 0x24
 8016714:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016718:	6004      	str	r4, [r0, #0]
 801671a:	60c4      	str	r4, [r0, #12]
 801671c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016720:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016724:	b94c      	cbnz	r4, 801673a <__pow5mult+0x56>
 8016726:	f240 2171 	movw	r1, #625	; 0x271
 801672a:	4630      	mov	r0, r6
 801672c:	f7ff ff3b 	bl	80165a6 <__i2b>
 8016730:	2300      	movs	r3, #0
 8016732:	f8c8 0008 	str.w	r0, [r8, #8]
 8016736:	4604      	mov	r4, r0
 8016738:	6003      	str	r3, [r0, #0]
 801673a:	f04f 0800 	mov.w	r8, #0
 801673e:	07eb      	lsls	r3, r5, #31
 8016740:	d50a      	bpl.n	8016758 <__pow5mult+0x74>
 8016742:	4639      	mov	r1, r7
 8016744:	4622      	mov	r2, r4
 8016746:	4630      	mov	r0, r6
 8016748:	f7ff ff36 	bl	80165b8 <__multiply>
 801674c:	4639      	mov	r1, r7
 801674e:	4681      	mov	r9, r0
 8016750:	4630      	mov	r0, r6
 8016752:	f7ff fe4a 	bl	80163ea <_Bfree>
 8016756:	464f      	mov	r7, r9
 8016758:	106d      	asrs	r5, r5, #1
 801675a:	d00b      	beq.n	8016774 <__pow5mult+0x90>
 801675c:	6820      	ldr	r0, [r4, #0]
 801675e:	b938      	cbnz	r0, 8016770 <__pow5mult+0x8c>
 8016760:	4622      	mov	r2, r4
 8016762:	4621      	mov	r1, r4
 8016764:	4630      	mov	r0, r6
 8016766:	f7ff ff27 	bl	80165b8 <__multiply>
 801676a:	6020      	str	r0, [r4, #0]
 801676c:	f8c0 8000 	str.w	r8, [r0]
 8016770:	4604      	mov	r4, r0
 8016772:	e7e4      	b.n	801673e <__pow5mult+0x5a>
 8016774:	4638      	mov	r0, r7
 8016776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801677a:	bf00      	nop
 801677c:	080185e8 	.word	0x080185e8

08016780 <__lshift>:
 8016780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016784:	460c      	mov	r4, r1
 8016786:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801678a:	6923      	ldr	r3, [r4, #16]
 801678c:	6849      	ldr	r1, [r1, #4]
 801678e:	eb0a 0903 	add.w	r9, sl, r3
 8016792:	68a3      	ldr	r3, [r4, #8]
 8016794:	4607      	mov	r7, r0
 8016796:	4616      	mov	r6, r2
 8016798:	f109 0501 	add.w	r5, r9, #1
 801679c:	42ab      	cmp	r3, r5
 801679e:	db32      	blt.n	8016806 <__lshift+0x86>
 80167a0:	4638      	mov	r0, r7
 80167a2:	f7ff fdee 	bl	8016382 <_Balloc>
 80167a6:	2300      	movs	r3, #0
 80167a8:	4680      	mov	r8, r0
 80167aa:	f100 0114 	add.w	r1, r0, #20
 80167ae:	461a      	mov	r2, r3
 80167b0:	4553      	cmp	r3, sl
 80167b2:	db2b      	blt.n	801680c <__lshift+0x8c>
 80167b4:	6920      	ldr	r0, [r4, #16]
 80167b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80167ba:	f104 0314 	add.w	r3, r4, #20
 80167be:	f016 021f 	ands.w	r2, r6, #31
 80167c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80167c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80167ca:	d025      	beq.n	8016818 <__lshift+0x98>
 80167cc:	f1c2 0e20 	rsb	lr, r2, #32
 80167d0:	2000      	movs	r0, #0
 80167d2:	681e      	ldr	r6, [r3, #0]
 80167d4:	468a      	mov	sl, r1
 80167d6:	4096      	lsls	r6, r2
 80167d8:	4330      	orrs	r0, r6
 80167da:	f84a 0b04 	str.w	r0, [sl], #4
 80167de:	f853 0b04 	ldr.w	r0, [r3], #4
 80167e2:	459c      	cmp	ip, r3
 80167e4:	fa20 f00e 	lsr.w	r0, r0, lr
 80167e8:	d814      	bhi.n	8016814 <__lshift+0x94>
 80167ea:	6048      	str	r0, [r1, #4]
 80167ec:	b108      	cbz	r0, 80167f2 <__lshift+0x72>
 80167ee:	f109 0502 	add.w	r5, r9, #2
 80167f2:	3d01      	subs	r5, #1
 80167f4:	4638      	mov	r0, r7
 80167f6:	f8c8 5010 	str.w	r5, [r8, #16]
 80167fa:	4621      	mov	r1, r4
 80167fc:	f7ff fdf5 	bl	80163ea <_Bfree>
 8016800:	4640      	mov	r0, r8
 8016802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016806:	3101      	adds	r1, #1
 8016808:	005b      	lsls	r3, r3, #1
 801680a:	e7c7      	b.n	801679c <__lshift+0x1c>
 801680c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016810:	3301      	adds	r3, #1
 8016812:	e7cd      	b.n	80167b0 <__lshift+0x30>
 8016814:	4651      	mov	r1, sl
 8016816:	e7dc      	b.n	80167d2 <__lshift+0x52>
 8016818:	3904      	subs	r1, #4
 801681a:	f853 2b04 	ldr.w	r2, [r3], #4
 801681e:	f841 2f04 	str.w	r2, [r1, #4]!
 8016822:	459c      	cmp	ip, r3
 8016824:	d8f9      	bhi.n	801681a <__lshift+0x9a>
 8016826:	e7e4      	b.n	80167f2 <__lshift+0x72>

08016828 <__mcmp>:
 8016828:	6903      	ldr	r3, [r0, #16]
 801682a:	690a      	ldr	r2, [r1, #16]
 801682c:	1a9b      	subs	r3, r3, r2
 801682e:	b530      	push	{r4, r5, lr}
 8016830:	d10c      	bne.n	801684c <__mcmp+0x24>
 8016832:	0092      	lsls	r2, r2, #2
 8016834:	3014      	adds	r0, #20
 8016836:	3114      	adds	r1, #20
 8016838:	1884      	adds	r4, r0, r2
 801683a:	4411      	add	r1, r2
 801683c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016840:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016844:	4295      	cmp	r5, r2
 8016846:	d003      	beq.n	8016850 <__mcmp+0x28>
 8016848:	d305      	bcc.n	8016856 <__mcmp+0x2e>
 801684a:	2301      	movs	r3, #1
 801684c:	4618      	mov	r0, r3
 801684e:	bd30      	pop	{r4, r5, pc}
 8016850:	42a0      	cmp	r0, r4
 8016852:	d3f3      	bcc.n	801683c <__mcmp+0x14>
 8016854:	e7fa      	b.n	801684c <__mcmp+0x24>
 8016856:	f04f 33ff 	mov.w	r3, #4294967295
 801685a:	e7f7      	b.n	801684c <__mcmp+0x24>

0801685c <__mdiff>:
 801685c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016860:	460d      	mov	r5, r1
 8016862:	4607      	mov	r7, r0
 8016864:	4611      	mov	r1, r2
 8016866:	4628      	mov	r0, r5
 8016868:	4614      	mov	r4, r2
 801686a:	f7ff ffdd 	bl	8016828 <__mcmp>
 801686e:	1e06      	subs	r6, r0, #0
 8016870:	d108      	bne.n	8016884 <__mdiff+0x28>
 8016872:	4631      	mov	r1, r6
 8016874:	4638      	mov	r0, r7
 8016876:	f7ff fd84 	bl	8016382 <_Balloc>
 801687a:	2301      	movs	r3, #1
 801687c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016884:	bfa4      	itt	ge
 8016886:	4623      	movge	r3, r4
 8016888:	462c      	movge	r4, r5
 801688a:	4638      	mov	r0, r7
 801688c:	6861      	ldr	r1, [r4, #4]
 801688e:	bfa6      	itte	ge
 8016890:	461d      	movge	r5, r3
 8016892:	2600      	movge	r6, #0
 8016894:	2601      	movlt	r6, #1
 8016896:	f7ff fd74 	bl	8016382 <_Balloc>
 801689a:	692b      	ldr	r3, [r5, #16]
 801689c:	60c6      	str	r6, [r0, #12]
 801689e:	6926      	ldr	r6, [r4, #16]
 80168a0:	f105 0914 	add.w	r9, r5, #20
 80168a4:	f104 0214 	add.w	r2, r4, #20
 80168a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80168ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80168b0:	f100 0514 	add.w	r5, r0, #20
 80168b4:	f04f 0e00 	mov.w	lr, #0
 80168b8:	f852 ab04 	ldr.w	sl, [r2], #4
 80168bc:	f859 4b04 	ldr.w	r4, [r9], #4
 80168c0:	fa1e f18a 	uxtah	r1, lr, sl
 80168c4:	b2a3      	uxth	r3, r4
 80168c6:	1ac9      	subs	r1, r1, r3
 80168c8:	0c23      	lsrs	r3, r4, #16
 80168ca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80168ce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80168d2:	b289      	uxth	r1, r1
 80168d4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80168d8:	45c8      	cmp	r8, r9
 80168da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80168de:	4694      	mov	ip, r2
 80168e0:	f845 3b04 	str.w	r3, [r5], #4
 80168e4:	d8e8      	bhi.n	80168b8 <__mdiff+0x5c>
 80168e6:	45bc      	cmp	ip, r7
 80168e8:	d304      	bcc.n	80168f4 <__mdiff+0x98>
 80168ea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80168ee:	b183      	cbz	r3, 8016912 <__mdiff+0xb6>
 80168f0:	6106      	str	r6, [r0, #16]
 80168f2:	e7c5      	b.n	8016880 <__mdiff+0x24>
 80168f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80168f8:	fa1e f381 	uxtah	r3, lr, r1
 80168fc:	141a      	asrs	r2, r3, #16
 80168fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016902:	b29b      	uxth	r3, r3
 8016904:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016908:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801690c:	f845 3b04 	str.w	r3, [r5], #4
 8016910:	e7e9      	b.n	80168e6 <__mdiff+0x8a>
 8016912:	3e01      	subs	r6, #1
 8016914:	e7e9      	b.n	80168ea <__mdiff+0x8e>
	...

08016918 <__ulp>:
 8016918:	4b12      	ldr	r3, [pc, #72]	; (8016964 <__ulp+0x4c>)
 801691a:	ee10 2a90 	vmov	r2, s1
 801691e:	401a      	ands	r2, r3
 8016920:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016924:	2b00      	cmp	r3, #0
 8016926:	dd04      	ble.n	8016932 <__ulp+0x1a>
 8016928:	2000      	movs	r0, #0
 801692a:	4619      	mov	r1, r3
 801692c:	ec41 0b10 	vmov	d0, r0, r1
 8016930:	4770      	bx	lr
 8016932:	425b      	negs	r3, r3
 8016934:	151b      	asrs	r3, r3, #20
 8016936:	2b13      	cmp	r3, #19
 8016938:	f04f 0000 	mov.w	r0, #0
 801693c:	f04f 0100 	mov.w	r1, #0
 8016940:	dc04      	bgt.n	801694c <__ulp+0x34>
 8016942:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016946:	fa42 f103 	asr.w	r1, r2, r3
 801694a:	e7ef      	b.n	801692c <__ulp+0x14>
 801694c:	3b14      	subs	r3, #20
 801694e:	2b1e      	cmp	r3, #30
 8016950:	f04f 0201 	mov.w	r2, #1
 8016954:	bfda      	itte	le
 8016956:	f1c3 031f 	rsble	r3, r3, #31
 801695a:	fa02 f303 	lslle.w	r3, r2, r3
 801695e:	4613      	movgt	r3, r2
 8016960:	4618      	mov	r0, r3
 8016962:	e7e3      	b.n	801692c <__ulp+0x14>
 8016964:	7ff00000 	.word	0x7ff00000

08016968 <__b2d>:
 8016968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801696a:	6905      	ldr	r5, [r0, #16]
 801696c:	f100 0714 	add.w	r7, r0, #20
 8016970:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016974:	1f2e      	subs	r6, r5, #4
 8016976:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801697a:	4620      	mov	r0, r4
 801697c:	f7ff fdc5 	bl	801650a <__hi0bits>
 8016980:	f1c0 0320 	rsb	r3, r0, #32
 8016984:	280a      	cmp	r0, #10
 8016986:	600b      	str	r3, [r1, #0]
 8016988:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016a00 <__b2d+0x98>
 801698c:	dc14      	bgt.n	80169b8 <__b2d+0x50>
 801698e:	f1c0 0e0b 	rsb	lr, r0, #11
 8016992:	fa24 f10e 	lsr.w	r1, r4, lr
 8016996:	42b7      	cmp	r7, r6
 8016998:	ea41 030c 	orr.w	r3, r1, ip
 801699c:	bf34      	ite	cc
 801699e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80169a2:	2100      	movcs	r1, #0
 80169a4:	3015      	adds	r0, #21
 80169a6:	fa04 f000 	lsl.w	r0, r4, r0
 80169aa:	fa21 f10e 	lsr.w	r1, r1, lr
 80169ae:	ea40 0201 	orr.w	r2, r0, r1
 80169b2:	ec43 2b10 	vmov	d0, r2, r3
 80169b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169b8:	42b7      	cmp	r7, r6
 80169ba:	bf3a      	itte	cc
 80169bc:	f1a5 0608 	subcc.w	r6, r5, #8
 80169c0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80169c4:	2100      	movcs	r1, #0
 80169c6:	380b      	subs	r0, #11
 80169c8:	d015      	beq.n	80169f6 <__b2d+0x8e>
 80169ca:	4084      	lsls	r4, r0
 80169cc:	f1c0 0520 	rsb	r5, r0, #32
 80169d0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80169d4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80169d8:	42be      	cmp	r6, r7
 80169da:	fa21 fc05 	lsr.w	ip, r1, r5
 80169de:	ea44 030c 	orr.w	r3, r4, ip
 80169e2:	bf8c      	ite	hi
 80169e4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80169e8:	2400      	movls	r4, #0
 80169ea:	fa01 f000 	lsl.w	r0, r1, r0
 80169ee:	40ec      	lsrs	r4, r5
 80169f0:	ea40 0204 	orr.w	r2, r0, r4
 80169f4:	e7dd      	b.n	80169b2 <__b2d+0x4a>
 80169f6:	ea44 030c 	orr.w	r3, r4, ip
 80169fa:	460a      	mov	r2, r1
 80169fc:	e7d9      	b.n	80169b2 <__b2d+0x4a>
 80169fe:	bf00      	nop
 8016a00:	3ff00000 	.word	0x3ff00000

08016a04 <__d2b>:
 8016a04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016a08:	460e      	mov	r6, r1
 8016a0a:	2101      	movs	r1, #1
 8016a0c:	ec59 8b10 	vmov	r8, r9, d0
 8016a10:	4615      	mov	r5, r2
 8016a12:	f7ff fcb6 	bl	8016382 <_Balloc>
 8016a16:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016a1a:	4607      	mov	r7, r0
 8016a1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016a20:	bb34      	cbnz	r4, 8016a70 <__d2b+0x6c>
 8016a22:	9301      	str	r3, [sp, #4]
 8016a24:	f1b8 0300 	subs.w	r3, r8, #0
 8016a28:	d027      	beq.n	8016a7a <__d2b+0x76>
 8016a2a:	a802      	add	r0, sp, #8
 8016a2c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016a30:	f7ff fd8a 	bl	8016548 <__lo0bits>
 8016a34:	9900      	ldr	r1, [sp, #0]
 8016a36:	b1f0      	cbz	r0, 8016a76 <__d2b+0x72>
 8016a38:	9a01      	ldr	r2, [sp, #4]
 8016a3a:	f1c0 0320 	rsb	r3, r0, #32
 8016a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8016a42:	430b      	orrs	r3, r1
 8016a44:	40c2      	lsrs	r2, r0
 8016a46:	617b      	str	r3, [r7, #20]
 8016a48:	9201      	str	r2, [sp, #4]
 8016a4a:	9b01      	ldr	r3, [sp, #4]
 8016a4c:	61bb      	str	r3, [r7, #24]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	bf14      	ite	ne
 8016a52:	2102      	movne	r1, #2
 8016a54:	2101      	moveq	r1, #1
 8016a56:	6139      	str	r1, [r7, #16]
 8016a58:	b1c4      	cbz	r4, 8016a8c <__d2b+0x88>
 8016a5a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016a5e:	4404      	add	r4, r0
 8016a60:	6034      	str	r4, [r6, #0]
 8016a62:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016a66:	6028      	str	r0, [r5, #0]
 8016a68:	4638      	mov	r0, r7
 8016a6a:	b003      	add	sp, #12
 8016a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016a70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016a74:	e7d5      	b.n	8016a22 <__d2b+0x1e>
 8016a76:	6179      	str	r1, [r7, #20]
 8016a78:	e7e7      	b.n	8016a4a <__d2b+0x46>
 8016a7a:	a801      	add	r0, sp, #4
 8016a7c:	f7ff fd64 	bl	8016548 <__lo0bits>
 8016a80:	9b01      	ldr	r3, [sp, #4]
 8016a82:	617b      	str	r3, [r7, #20]
 8016a84:	2101      	movs	r1, #1
 8016a86:	6139      	str	r1, [r7, #16]
 8016a88:	3020      	adds	r0, #32
 8016a8a:	e7e5      	b.n	8016a58 <__d2b+0x54>
 8016a8c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016a90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016a94:	6030      	str	r0, [r6, #0]
 8016a96:	6918      	ldr	r0, [r3, #16]
 8016a98:	f7ff fd37 	bl	801650a <__hi0bits>
 8016a9c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016aa0:	e7e1      	b.n	8016a66 <__d2b+0x62>

08016aa2 <__ratio>:
 8016aa2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016aa6:	4688      	mov	r8, r1
 8016aa8:	4669      	mov	r1, sp
 8016aaa:	4681      	mov	r9, r0
 8016aac:	f7ff ff5c 	bl	8016968 <__b2d>
 8016ab0:	a901      	add	r1, sp, #4
 8016ab2:	4640      	mov	r0, r8
 8016ab4:	ec57 6b10 	vmov	r6, r7, d0
 8016ab8:	f7ff ff56 	bl	8016968 <__b2d>
 8016abc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016ac0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016ac4:	eba3 0c02 	sub.w	ip, r3, r2
 8016ac8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016acc:	1a9b      	subs	r3, r3, r2
 8016ace:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016ad2:	ec5b ab10 	vmov	sl, fp, d0
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	bfce      	itee	gt
 8016ada:	463a      	movgt	r2, r7
 8016adc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016ae0:	465a      	movle	r2, fp
 8016ae2:	4659      	mov	r1, fp
 8016ae4:	463d      	mov	r5, r7
 8016ae6:	bfd4      	ite	le
 8016ae8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016aec:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016af0:	4630      	mov	r0, r6
 8016af2:	ee10 2a10 	vmov	r2, s0
 8016af6:	460b      	mov	r3, r1
 8016af8:	4629      	mov	r1, r5
 8016afa:	f7e9 febf 	bl	800087c <__aeabi_ddiv>
 8016afe:	ec41 0b10 	vmov	d0, r0, r1
 8016b02:	b003      	add	sp, #12
 8016b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016b08 <__copybits>:
 8016b08:	3901      	subs	r1, #1
 8016b0a:	b510      	push	{r4, lr}
 8016b0c:	1149      	asrs	r1, r1, #5
 8016b0e:	6914      	ldr	r4, [r2, #16]
 8016b10:	3101      	adds	r1, #1
 8016b12:	f102 0314 	add.w	r3, r2, #20
 8016b16:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016b1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016b1e:	42a3      	cmp	r3, r4
 8016b20:	4602      	mov	r2, r0
 8016b22:	d303      	bcc.n	8016b2c <__copybits+0x24>
 8016b24:	2300      	movs	r3, #0
 8016b26:	428a      	cmp	r2, r1
 8016b28:	d305      	bcc.n	8016b36 <__copybits+0x2e>
 8016b2a:	bd10      	pop	{r4, pc}
 8016b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b30:	f840 2b04 	str.w	r2, [r0], #4
 8016b34:	e7f3      	b.n	8016b1e <__copybits+0x16>
 8016b36:	f842 3b04 	str.w	r3, [r2], #4
 8016b3a:	e7f4      	b.n	8016b26 <__copybits+0x1e>

08016b3c <__any_on>:
 8016b3c:	f100 0214 	add.w	r2, r0, #20
 8016b40:	6900      	ldr	r0, [r0, #16]
 8016b42:	114b      	asrs	r3, r1, #5
 8016b44:	4298      	cmp	r0, r3
 8016b46:	b510      	push	{r4, lr}
 8016b48:	db11      	blt.n	8016b6e <__any_on+0x32>
 8016b4a:	dd0a      	ble.n	8016b62 <__any_on+0x26>
 8016b4c:	f011 011f 	ands.w	r1, r1, #31
 8016b50:	d007      	beq.n	8016b62 <__any_on+0x26>
 8016b52:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016b56:	fa24 f001 	lsr.w	r0, r4, r1
 8016b5a:	fa00 f101 	lsl.w	r1, r0, r1
 8016b5e:	428c      	cmp	r4, r1
 8016b60:	d10b      	bne.n	8016b7a <__any_on+0x3e>
 8016b62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016b66:	4293      	cmp	r3, r2
 8016b68:	d803      	bhi.n	8016b72 <__any_on+0x36>
 8016b6a:	2000      	movs	r0, #0
 8016b6c:	bd10      	pop	{r4, pc}
 8016b6e:	4603      	mov	r3, r0
 8016b70:	e7f7      	b.n	8016b62 <__any_on+0x26>
 8016b72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016b76:	2900      	cmp	r1, #0
 8016b78:	d0f5      	beq.n	8016b66 <__any_on+0x2a>
 8016b7a:	2001      	movs	r0, #1
 8016b7c:	e7f6      	b.n	8016b6c <__any_on+0x30>

08016b7e <_calloc_r>:
 8016b7e:	b538      	push	{r3, r4, r5, lr}
 8016b80:	fb02 f401 	mul.w	r4, r2, r1
 8016b84:	4621      	mov	r1, r4
 8016b86:	f000 f857 	bl	8016c38 <_malloc_r>
 8016b8a:	4605      	mov	r5, r0
 8016b8c:	b118      	cbz	r0, 8016b96 <_calloc_r+0x18>
 8016b8e:	4622      	mov	r2, r4
 8016b90:	2100      	movs	r1, #0
 8016b92:	f7fc f911 	bl	8012db8 <memset>
 8016b96:	4628      	mov	r0, r5
 8016b98:	bd38      	pop	{r3, r4, r5, pc}
	...

08016b9c <_free_r>:
 8016b9c:	b538      	push	{r3, r4, r5, lr}
 8016b9e:	4605      	mov	r5, r0
 8016ba0:	2900      	cmp	r1, #0
 8016ba2:	d045      	beq.n	8016c30 <_free_r+0x94>
 8016ba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ba8:	1f0c      	subs	r4, r1, #4
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	bfb8      	it	lt
 8016bae:	18e4      	addlt	r4, r4, r3
 8016bb0:	f000 ffa5 	bl	8017afe <__malloc_lock>
 8016bb4:	4a1f      	ldr	r2, [pc, #124]	; (8016c34 <_free_r+0x98>)
 8016bb6:	6813      	ldr	r3, [r2, #0]
 8016bb8:	4610      	mov	r0, r2
 8016bba:	b933      	cbnz	r3, 8016bca <_free_r+0x2e>
 8016bbc:	6063      	str	r3, [r4, #4]
 8016bbe:	6014      	str	r4, [r2, #0]
 8016bc0:	4628      	mov	r0, r5
 8016bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016bc6:	f000 bf9b 	b.w	8017b00 <__malloc_unlock>
 8016bca:	42a3      	cmp	r3, r4
 8016bcc:	d90c      	bls.n	8016be8 <_free_r+0x4c>
 8016bce:	6821      	ldr	r1, [r4, #0]
 8016bd0:	1862      	adds	r2, r4, r1
 8016bd2:	4293      	cmp	r3, r2
 8016bd4:	bf04      	itt	eq
 8016bd6:	681a      	ldreq	r2, [r3, #0]
 8016bd8:	685b      	ldreq	r3, [r3, #4]
 8016bda:	6063      	str	r3, [r4, #4]
 8016bdc:	bf04      	itt	eq
 8016bde:	1852      	addeq	r2, r2, r1
 8016be0:	6022      	streq	r2, [r4, #0]
 8016be2:	6004      	str	r4, [r0, #0]
 8016be4:	e7ec      	b.n	8016bc0 <_free_r+0x24>
 8016be6:	4613      	mov	r3, r2
 8016be8:	685a      	ldr	r2, [r3, #4]
 8016bea:	b10a      	cbz	r2, 8016bf0 <_free_r+0x54>
 8016bec:	42a2      	cmp	r2, r4
 8016bee:	d9fa      	bls.n	8016be6 <_free_r+0x4a>
 8016bf0:	6819      	ldr	r1, [r3, #0]
 8016bf2:	1858      	adds	r0, r3, r1
 8016bf4:	42a0      	cmp	r0, r4
 8016bf6:	d10b      	bne.n	8016c10 <_free_r+0x74>
 8016bf8:	6820      	ldr	r0, [r4, #0]
 8016bfa:	4401      	add	r1, r0
 8016bfc:	1858      	adds	r0, r3, r1
 8016bfe:	4282      	cmp	r2, r0
 8016c00:	6019      	str	r1, [r3, #0]
 8016c02:	d1dd      	bne.n	8016bc0 <_free_r+0x24>
 8016c04:	6810      	ldr	r0, [r2, #0]
 8016c06:	6852      	ldr	r2, [r2, #4]
 8016c08:	605a      	str	r2, [r3, #4]
 8016c0a:	4401      	add	r1, r0
 8016c0c:	6019      	str	r1, [r3, #0]
 8016c0e:	e7d7      	b.n	8016bc0 <_free_r+0x24>
 8016c10:	d902      	bls.n	8016c18 <_free_r+0x7c>
 8016c12:	230c      	movs	r3, #12
 8016c14:	602b      	str	r3, [r5, #0]
 8016c16:	e7d3      	b.n	8016bc0 <_free_r+0x24>
 8016c18:	6820      	ldr	r0, [r4, #0]
 8016c1a:	1821      	adds	r1, r4, r0
 8016c1c:	428a      	cmp	r2, r1
 8016c1e:	bf04      	itt	eq
 8016c20:	6811      	ldreq	r1, [r2, #0]
 8016c22:	6852      	ldreq	r2, [r2, #4]
 8016c24:	6062      	str	r2, [r4, #4]
 8016c26:	bf04      	itt	eq
 8016c28:	1809      	addeq	r1, r1, r0
 8016c2a:	6021      	streq	r1, [r4, #0]
 8016c2c:	605c      	str	r4, [r3, #4]
 8016c2e:	e7c7      	b.n	8016bc0 <_free_r+0x24>
 8016c30:	bd38      	pop	{r3, r4, r5, pc}
 8016c32:	bf00      	nop
 8016c34:	20036c7c 	.word	0x20036c7c

08016c38 <_malloc_r>:
 8016c38:	b570      	push	{r4, r5, r6, lr}
 8016c3a:	1ccd      	adds	r5, r1, #3
 8016c3c:	f025 0503 	bic.w	r5, r5, #3
 8016c40:	3508      	adds	r5, #8
 8016c42:	2d0c      	cmp	r5, #12
 8016c44:	bf38      	it	cc
 8016c46:	250c      	movcc	r5, #12
 8016c48:	2d00      	cmp	r5, #0
 8016c4a:	4606      	mov	r6, r0
 8016c4c:	db01      	blt.n	8016c52 <_malloc_r+0x1a>
 8016c4e:	42a9      	cmp	r1, r5
 8016c50:	d903      	bls.n	8016c5a <_malloc_r+0x22>
 8016c52:	230c      	movs	r3, #12
 8016c54:	6033      	str	r3, [r6, #0]
 8016c56:	2000      	movs	r0, #0
 8016c58:	bd70      	pop	{r4, r5, r6, pc}
 8016c5a:	f000 ff50 	bl	8017afe <__malloc_lock>
 8016c5e:	4a21      	ldr	r2, [pc, #132]	; (8016ce4 <_malloc_r+0xac>)
 8016c60:	6814      	ldr	r4, [r2, #0]
 8016c62:	4621      	mov	r1, r4
 8016c64:	b991      	cbnz	r1, 8016c8c <_malloc_r+0x54>
 8016c66:	4c20      	ldr	r4, [pc, #128]	; (8016ce8 <_malloc_r+0xb0>)
 8016c68:	6823      	ldr	r3, [r4, #0]
 8016c6a:	b91b      	cbnz	r3, 8016c74 <_malloc_r+0x3c>
 8016c6c:	4630      	mov	r0, r6
 8016c6e:	f000 fde3 	bl	8017838 <_sbrk_r>
 8016c72:	6020      	str	r0, [r4, #0]
 8016c74:	4629      	mov	r1, r5
 8016c76:	4630      	mov	r0, r6
 8016c78:	f000 fdde 	bl	8017838 <_sbrk_r>
 8016c7c:	1c43      	adds	r3, r0, #1
 8016c7e:	d124      	bne.n	8016cca <_malloc_r+0x92>
 8016c80:	230c      	movs	r3, #12
 8016c82:	6033      	str	r3, [r6, #0]
 8016c84:	4630      	mov	r0, r6
 8016c86:	f000 ff3b 	bl	8017b00 <__malloc_unlock>
 8016c8a:	e7e4      	b.n	8016c56 <_malloc_r+0x1e>
 8016c8c:	680b      	ldr	r3, [r1, #0]
 8016c8e:	1b5b      	subs	r3, r3, r5
 8016c90:	d418      	bmi.n	8016cc4 <_malloc_r+0x8c>
 8016c92:	2b0b      	cmp	r3, #11
 8016c94:	d90f      	bls.n	8016cb6 <_malloc_r+0x7e>
 8016c96:	600b      	str	r3, [r1, #0]
 8016c98:	50cd      	str	r5, [r1, r3]
 8016c9a:	18cc      	adds	r4, r1, r3
 8016c9c:	4630      	mov	r0, r6
 8016c9e:	f000 ff2f 	bl	8017b00 <__malloc_unlock>
 8016ca2:	f104 000b 	add.w	r0, r4, #11
 8016ca6:	1d23      	adds	r3, r4, #4
 8016ca8:	f020 0007 	bic.w	r0, r0, #7
 8016cac:	1ac3      	subs	r3, r0, r3
 8016cae:	d0d3      	beq.n	8016c58 <_malloc_r+0x20>
 8016cb0:	425a      	negs	r2, r3
 8016cb2:	50e2      	str	r2, [r4, r3]
 8016cb4:	e7d0      	b.n	8016c58 <_malloc_r+0x20>
 8016cb6:	428c      	cmp	r4, r1
 8016cb8:	684b      	ldr	r3, [r1, #4]
 8016cba:	bf16      	itet	ne
 8016cbc:	6063      	strne	r3, [r4, #4]
 8016cbe:	6013      	streq	r3, [r2, #0]
 8016cc0:	460c      	movne	r4, r1
 8016cc2:	e7eb      	b.n	8016c9c <_malloc_r+0x64>
 8016cc4:	460c      	mov	r4, r1
 8016cc6:	6849      	ldr	r1, [r1, #4]
 8016cc8:	e7cc      	b.n	8016c64 <_malloc_r+0x2c>
 8016cca:	1cc4      	adds	r4, r0, #3
 8016ccc:	f024 0403 	bic.w	r4, r4, #3
 8016cd0:	42a0      	cmp	r0, r4
 8016cd2:	d005      	beq.n	8016ce0 <_malloc_r+0xa8>
 8016cd4:	1a21      	subs	r1, r4, r0
 8016cd6:	4630      	mov	r0, r6
 8016cd8:	f000 fdae 	bl	8017838 <_sbrk_r>
 8016cdc:	3001      	adds	r0, #1
 8016cde:	d0cf      	beq.n	8016c80 <_malloc_r+0x48>
 8016ce0:	6025      	str	r5, [r4, #0]
 8016ce2:	e7db      	b.n	8016c9c <_malloc_r+0x64>
 8016ce4:	20036c7c 	.word	0x20036c7c
 8016ce8:	20036c80 	.word	0x20036c80

08016cec <__ssputs_r>:
 8016cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cf0:	688e      	ldr	r6, [r1, #8]
 8016cf2:	429e      	cmp	r6, r3
 8016cf4:	4682      	mov	sl, r0
 8016cf6:	460c      	mov	r4, r1
 8016cf8:	4690      	mov	r8, r2
 8016cfa:	4699      	mov	r9, r3
 8016cfc:	d837      	bhi.n	8016d6e <__ssputs_r+0x82>
 8016cfe:	898a      	ldrh	r2, [r1, #12]
 8016d00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016d04:	d031      	beq.n	8016d6a <__ssputs_r+0x7e>
 8016d06:	6825      	ldr	r5, [r4, #0]
 8016d08:	6909      	ldr	r1, [r1, #16]
 8016d0a:	1a6f      	subs	r7, r5, r1
 8016d0c:	6965      	ldr	r5, [r4, #20]
 8016d0e:	2302      	movs	r3, #2
 8016d10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016d14:	fb95 f5f3 	sdiv	r5, r5, r3
 8016d18:	f109 0301 	add.w	r3, r9, #1
 8016d1c:	443b      	add	r3, r7
 8016d1e:	429d      	cmp	r5, r3
 8016d20:	bf38      	it	cc
 8016d22:	461d      	movcc	r5, r3
 8016d24:	0553      	lsls	r3, r2, #21
 8016d26:	d530      	bpl.n	8016d8a <__ssputs_r+0x9e>
 8016d28:	4629      	mov	r1, r5
 8016d2a:	f7ff ff85 	bl	8016c38 <_malloc_r>
 8016d2e:	4606      	mov	r6, r0
 8016d30:	b950      	cbnz	r0, 8016d48 <__ssputs_r+0x5c>
 8016d32:	230c      	movs	r3, #12
 8016d34:	f8ca 3000 	str.w	r3, [sl]
 8016d38:	89a3      	ldrh	r3, [r4, #12]
 8016d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d3e:	81a3      	strh	r3, [r4, #12]
 8016d40:	f04f 30ff 	mov.w	r0, #4294967295
 8016d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d48:	463a      	mov	r2, r7
 8016d4a:	6921      	ldr	r1, [r4, #16]
 8016d4c:	f7ff fb0e 	bl	801636c <memcpy>
 8016d50:	89a3      	ldrh	r3, [r4, #12]
 8016d52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d5a:	81a3      	strh	r3, [r4, #12]
 8016d5c:	6126      	str	r6, [r4, #16]
 8016d5e:	6165      	str	r5, [r4, #20]
 8016d60:	443e      	add	r6, r7
 8016d62:	1bed      	subs	r5, r5, r7
 8016d64:	6026      	str	r6, [r4, #0]
 8016d66:	60a5      	str	r5, [r4, #8]
 8016d68:	464e      	mov	r6, r9
 8016d6a:	454e      	cmp	r6, r9
 8016d6c:	d900      	bls.n	8016d70 <__ssputs_r+0x84>
 8016d6e:	464e      	mov	r6, r9
 8016d70:	4632      	mov	r2, r6
 8016d72:	4641      	mov	r1, r8
 8016d74:	6820      	ldr	r0, [r4, #0]
 8016d76:	f000 fea9 	bl	8017acc <memmove>
 8016d7a:	68a3      	ldr	r3, [r4, #8]
 8016d7c:	1b9b      	subs	r3, r3, r6
 8016d7e:	60a3      	str	r3, [r4, #8]
 8016d80:	6823      	ldr	r3, [r4, #0]
 8016d82:	441e      	add	r6, r3
 8016d84:	6026      	str	r6, [r4, #0]
 8016d86:	2000      	movs	r0, #0
 8016d88:	e7dc      	b.n	8016d44 <__ssputs_r+0x58>
 8016d8a:	462a      	mov	r2, r5
 8016d8c:	f000 feb9 	bl	8017b02 <_realloc_r>
 8016d90:	4606      	mov	r6, r0
 8016d92:	2800      	cmp	r0, #0
 8016d94:	d1e2      	bne.n	8016d5c <__ssputs_r+0x70>
 8016d96:	6921      	ldr	r1, [r4, #16]
 8016d98:	4650      	mov	r0, sl
 8016d9a:	f7ff feff 	bl	8016b9c <_free_r>
 8016d9e:	e7c8      	b.n	8016d32 <__ssputs_r+0x46>

08016da0 <_svfiprintf_r>:
 8016da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016da4:	461d      	mov	r5, r3
 8016da6:	898b      	ldrh	r3, [r1, #12]
 8016da8:	061f      	lsls	r7, r3, #24
 8016daa:	b09d      	sub	sp, #116	; 0x74
 8016dac:	4680      	mov	r8, r0
 8016dae:	460c      	mov	r4, r1
 8016db0:	4616      	mov	r6, r2
 8016db2:	d50f      	bpl.n	8016dd4 <_svfiprintf_r+0x34>
 8016db4:	690b      	ldr	r3, [r1, #16]
 8016db6:	b96b      	cbnz	r3, 8016dd4 <_svfiprintf_r+0x34>
 8016db8:	2140      	movs	r1, #64	; 0x40
 8016dba:	f7ff ff3d 	bl	8016c38 <_malloc_r>
 8016dbe:	6020      	str	r0, [r4, #0]
 8016dc0:	6120      	str	r0, [r4, #16]
 8016dc2:	b928      	cbnz	r0, 8016dd0 <_svfiprintf_r+0x30>
 8016dc4:	230c      	movs	r3, #12
 8016dc6:	f8c8 3000 	str.w	r3, [r8]
 8016dca:	f04f 30ff 	mov.w	r0, #4294967295
 8016dce:	e0c8      	b.n	8016f62 <_svfiprintf_r+0x1c2>
 8016dd0:	2340      	movs	r3, #64	; 0x40
 8016dd2:	6163      	str	r3, [r4, #20]
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8016dd8:	2320      	movs	r3, #32
 8016dda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016dde:	2330      	movs	r3, #48	; 0x30
 8016de0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016de4:	9503      	str	r5, [sp, #12]
 8016de6:	f04f 0b01 	mov.w	fp, #1
 8016dea:	4637      	mov	r7, r6
 8016dec:	463d      	mov	r5, r7
 8016dee:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016df2:	b10b      	cbz	r3, 8016df8 <_svfiprintf_r+0x58>
 8016df4:	2b25      	cmp	r3, #37	; 0x25
 8016df6:	d13e      	bne.n	8016e76 <_svfiprintf_r+0xd6>
 8016df8:	ebb7 0a06 	subs.w	sl, r7, r6
 8016dfc:	d00b      	beq.n	8016e16 <_svfiprintf_r+0x76>
 8016dfe:	4653      	mov	r3, sl
 8016e00:	4632      	mov	r2, r6
 8016e02:	4621      	mov	r1, r4
 8016e04:	4640      	mov	r0, r8
 8016e06:	f7ff ff71 	bl	8016cec <__ssputs_r>
 8016e0a:	3001      	adds	r0, #1
 8016e0c:	f000 80a4 	beq.w	8016f58 <_svfiprintf_r+0x1b8>
 8016e10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e12:	4453      	add	r3, sl
 8016e14:	9309      	str	r3, [sp, #36]	; 0x24
 8016e16:	783b      	ldrb	r3, [r7, #0]
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	f000 809d 	beq.w	8016f58 <_svfiprintf_r+0x1b8>
 8016e1e:	2300      	movs	r3, #0
 8016e20:	f04f 32ff 	mov.w	r2, #4294967295
 8016e24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e28:	9304      	str	r3, [sp, #16]
 8016e2a:	9307      	str	r3, [sp, #28]
 8016e2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016e30:	931a      	str	r3, [sp, #104]	; 0x68
 8016e32:	462f      	mov	r7, r5
 8016e34:	2205      	movs	r2, #5
 8016e36:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016e3a:	4850      	ldr	r0, [pc, #320]	; (8016f7c <_svfiprintf_r+0x1dc>)
 8016e3c:	f7e9 f9e8 	bl	8000210 <memchr>
 8016e40:	9b04      	ldr	r3, [sp, #16]
 8016e42:	b9d0      	cbnz	r0, 8016e7a <_svfiprintf_r+0xda>
 8016e44:	06d9      	lsls	r1, r3, #27
 8016e46:	bf44      	itt	mi
 8016e48:	2220      	movmi	r2, #32
 8016e4a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e4e:	071a      	lsls	r2, r3, #28
 8016e50:	bf44      	itt	mi
 8016e52:	222b      	movmi	r2, #43	; 0x2b
 8016e54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e58:	782a      	ldrb	r2, [r5, #0]
 8016e5a:	2a2a      	cmp	r2, #42	; 0x2a
 8016e5c:	d015      	beq.n	8016e8a <_svfiprintf_r+0xea>
 8016e5e:	9a07      	ldr	r2, [sp, #28]
 8016e60:	462f      	mov	r7, r5
 8016e62:	2000      	movs	r0, #0
 8016e64:	250a      	movs	r5, #10
 8016e66:	4639      	mov	r1, r7
 8016e68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e6c:	3b30      	subs	r3, #48	; 0x30
 8016e6e:	2b09      	cmp	r3, #9
 8016e70:	d94d      	bls.n	8016f0e <_svfiprintf_r+0x16e>
 8016e72:	b1b8      	cbz	r0, 8016ea4 <_svfiprintf_r+0x104>
 8016e74:	e00f      	b.n	8016e96 <_svfiprintf_r+0xf6>
 8016e76:	462f      	mov	r7, r5
 8016e78:	e7b8      	b.n	8016dec <_svfiprintf_r+0x4c>
 8016e7a:	4a40      	ldr	r2, [pc, #256]	; (8016f7c <_svfiprintf_r+0x1dc>)
 8016e7c:	1a80      	subs	r0, r0, r2
 8016e7e:	fa0b f000 	lsl.w	r0, fp, r0
 8016e82:	4318      	orrs	r0, r3
 8016e84:	9004      	str	r0, [sp, #16]
 8016e86:	463d      	mov	r5, r7
 8016e88:	e7d3      	b.n	8016e32 <_svfiprintf_r+0x92>
 8016e8a:	9a03      	ldr	r2, [sp, #12]
 8016e8c:	1d11      	adds	r1, r2, #4
 8016e8e:	6812      	ldr	r2, [r2, #0]
 8016e90:	9103      	str	r1, [sp, #12]
 8016e92:	2a00      	cmp	r2, #0
 8016e94:	db01      	blt.n	8016e9a <_svfiprintf_r+0xfa>
 8016e96:	9207      	str	r2, [sp, #28]
 8016e98:	e004      	b.n	8016ea4 <_svfiprintf_r+0x104>
 8016e9a:	4252      	negs	r2, r2
 8016e9c:	f043 0302 	orr.w	r3, r3, #2
 8016ea0:	9207      	str	r2, [sp, #28]
 8016ea2:	9304      	str	r3, [sp, #16]
 8016ea4:	783b      	ldrb	r3, [r7, #0]
 8016ea6:	2b2e      	cmp	r3, #46	; 0x2e
 8016ea8:	d10c      	bne.n	8016ec4 <_svfiprintf_r+0x124>
 8016eaa:	787b      	ldrb	r3, [r7, #1]
 8016eac:	2b2a      	cmp	r3, #42	; 0x2a
 8016eae:	d133      	bne.n	8016f18 <_svfiprintf_r+0x178>
 8016eb0:	9b03      	ldr	r3, [sp, #12]
 8016eb2:	1d1a      	adds	r2, r3, #4
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	9203      	str	r2, [sp, #12]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	bfb8      	it	lt
 8016ebc:	f04f 33ff 	movlt.w	r3, #4294967295
 8016ec0:	3702      	adds	r7, #2
 8016ec2:	9305      	str	r3, [sp, #20]
 8016ec4:	4d2e      	ldr	r5, [pc, #184]	; (8016f80 <_svfiprintf_r+0x1e0>)
 8016ec6:	7839      	ldrb	r1, [r7, #0]
 8016ec8:	2203      	movs	r2, #3
 8016eca:	4628      	mov	r0, r5
 8016ecc:	f7e9 f9a0 	bl	8000210 <memchr>
 8016ed0:	b138      	cbz	r0, 8016ee2 <_svfiprintf_r+0x142>
 8016ed2:	2340      	movs	r3, #64	; 0x40
 8016ed4:	1b40      	subs	r0, r0, r5
 8016ed6:	fa03 f000 	lsl.w	r0, r3, r0
 8016eda:	9b04      	ldr	r3, [sp, #16]
 8016edc:	4303      	orrs	r3, r0
 8016ede:	3701      	adds	r7, #1
 8016ee0:	9304      	str	r3, [sp, #16]
 8016ee2:	7839      	ldrb	r1, [r7, #0]
 8016ee4:	4827      	ldr	r0, [pc, #156]	; (8016f84 <_svfiprintf_r+0x1e4>)
 8016ee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016eea:	2206      	movs	r2, #6
 8016eec:	1c7e      	adds	r6, r7, #1
 8016eee:	f7e9 f98f 	bl	8000210 <memchr>
 8016ef2:	2800      	cmp	r0, #0
 8016ef4:	d038      	beq.n	8016f68 <_svfiprintf_r+0x1c8>
 8016ef6:	4b24      	ldr	r3, [pc, #144]	; (8016f88 <_svfiprintf_r+0x1e8>)
 8016ef8:	bb13      	cbnz	r3, 8016f40 <_svfiprintf_r+0x1a0>
 8016efa:	9b03      	ldr	r3, [sp, #12]
 8016efc:	3307      	adds	r3, #7
 8016efe:	f023 0307 	bic.w	r3, r3, #7
 8016f02:	3308      	adds	r3, #8
 8016f04:	9303      	str	r3, [sp, #12]
 8016f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f08:	444b      	add	r3, r9
 8016f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8016f0c:	e76d      	b.n	8016dea <_svfiprintf_r+0x4a>
 8016f0e:	fb05 3202 	mla	r2, r5, r2, r3
 8016f12:	2001      	movs	r0, #1
 8016f14:	460f      	mov	r7, r1
 8016f16:	e7a6      	b.n	8016e66 <_svfiprintf_r+0xc6>
 8016f18:	2300      	movs	r3, #0
 8016f1a:	3701      	adds	r7, #1
 8016f1c:	9305      	str	r3, [sp, #20]
 8016f1e:	4619      	mov	r1, r3
 8016f20:	250a      	movs	r5, #10
 8016f22:	4638      	mov	r0, r7
 8016f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f28:	3a30      	subs	r2, #48	; 0x30
 8016f2a:	2a09      	cmp	r2, #9
 8016f2c:	d903      	bls.n	8016f36 <_svfiprintf_r+0x196>
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d0c8      	beq.n	8016ec4 <_svfiprintf_r+0x124>
 8016f32:	9105      	str	r1, [sp, #20]
 8016f34:	e7c6      	b.n	8016ec4 <_svfiprintf_r+0x124>
 8016f36:	fb05 2101 	mla	r1, r5, r1, r2
 8016f3a:	2301      	movs	r3, #1
 8016f3c:	4607      	mov	r7, r0
 8016f3e:	e7f0      	b.n	8016f22 <_svfiprintf_r+0x182>
 8016f40:	ab03      	add	r3, sp, #12
 8016f42:	9300      	str	r3, [sp, #0]
 8016f44:	4622      	mov	r2, r4
 8016f46:	4b11      	ldr	r3, [pc, #68]	; (8016f8c <_svfiprintf_r+0x1ec>)
 8016f48:	a904      	add	r1, sp, #16
 8016f4a:	4640      	mov	r0, r8
 8016f4c:	f7fb ffd0 	bl	8012ef0 <_printf_float>
 8016f50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016f54:	4681      	mov	r9, r0
 8016f56:	d1d6      	bne.n	8016f06 <_svfiprintf_r+0x166>
 8016f58:	89a3      	ldrh	r3, [r4, #12]
 8016f5a:	065b      	lsls	r3, r3, #25
 8016f5c:	f53f af35 	bmi.w	8016dca <_svfiprintf_r+0x2a>
 8016f60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f62:	b01d      	add	sp, #116	; 0x74
 8016f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f68:	ab03      	add	r3, sp, #12
 8016f6a:	9300      	str	r3, [sp, #0]
 8016f6c:	4622      	mov	r2, r4
 8016f6e:	4b07      	ldr	r3, [pc, #28]	; (8016f8c <_svfiprintf_r+0x1ec>)
 8016f70:	a904      	add	r1, sp, #16
 8016f72:	4640      	mov	r0, r8
 8016f74:	f7fc fa72 	bl	801345c <_printf_i>
 8016f78:	e7ea      	b.n	8016f50 <_svfiprintf_r+0x1b0>
 8016f7a:	bf00      	nop
 8016f7c:	080185f4 	.word	0x080185f4
 8016f80:	080185fa 	.word	0x080185fa
 8016f84:	080185fe 	.word	0x080185fe
 8016f88:	08012ef1 	.word	0x08012ef1
 8016f8c:	08016ced 	.word	0x08016ced

08016f90 <_sungetc_r>:
 8016f90:	b538      	push	{r3, r4, r5, lr}
 8016f92:	1c4b      	adds	r3, r1, #1
 8016f94:	4614      	mov	r4, r2
 8016f96:	d103      	bne.n	8016fa0 <_sungetc_r+0x10>
 8016f98:	f04f 35ff 	mov.w	r5, #4294967295
 8016f9c:	4628      	mov	r0, r5
 8016f9e:	bd38      	pop	{r3, r4, r5, pc}
 8016fa0:	8993      	ldrh	r3, [r2, #12]
 8016fa2:	f023 0320 	bic.w	r3, r3, #32
 8016fa6:	8193      	strh	r3, [r2, #12]
 8016fa8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016faa:	6852      	ldr	r2, [r2, #4]
 8016fac:	b2cd      	uxtb	r5, r1
 8016fae:	b18b      	cbz	r3, 8016fd4 <_sungetc_r+0x44>
 8016fb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016fb2:	4293      	cmp	r3, r2
 8016fb4:	dd08      	ble.n	8016fc8 <_sungetc_r+0x38>
 8016fb6:	6823      	ldr	r3, [r4, #0]
 8016fb8:	1e5a      	subs	r2, r3, #1
 8016fba:	6022      	str	r2, [r4, #0]
 8016fbc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016fc0:	6863      	ldr	r3, [r4, #4]
 8016fc2:	3301      	adds	r3, #1
 8016fc4:	6063      	str	r3, [r4, #4]
 8016fc6:	e7e9      	b.n	8016f9c <_sungetc_r+0xc>
 8016fc8:	4621      	mov	r1, r4
 8016fca:	f000 fd15 	bl	80179f8 <__submore>
 8016fce:	2800      	cmp	r0, #0
 8016fd0:	d0f1      	beq.n	8016fb6 <_sungetc_r+0x26>
 8016fd2:	e7e1      	b.n	8016f98 <_sungetc_r+0x8>
 8016fd4:	6921      	ldr	r1, [r4, #16]
 8016fd6:	6823      	ldr	r3, [r4, #0]
 8016fd8:	b151      	cbz	r1, 8016ff0 <_sungetc_r+0x60>
 8016fda:	4299      	cmp	r1, r3
 8016fdc:	d208      	bcs.n	8016ff0 <_sungetc_r+0x60>
 8016fde:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016fe2:	42a9      	cmp	r1, r5
 8016fe4:	d104      	bne.n	8016ff0 <_sungetc_r+0x60>
 8016fe6:	3b01      	subs	r3, #1
 8016fe8:	3201      	adds	r2, #1
 8016fea:	6023      	str	r3, [r4, #0]
 8016fec:	6062      	str	r2, [r4, #4]
 8016fee:	e7d5      	b.n	8016f9c <_sungetc_r+0xc>
 8016ff0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016ff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ff8:	6363      	str	r3, [r4, #52]	; 0x34
 8016ffa:	2303      	movs	r3, #3
 8016ffc:	63a3      	str	r3, [r4, #56]	; 0x38
 8016ffe:	4623      	mov	r3, r4
 8017000:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017004:	6023      	str	r3, [r4, #0]
 8017006:	2301      	movs	r3, #1
 8017008:	e7dc      	b.n	8016fc4 <_sungetc_r+0x34>

0801700a <__ssrefill_r>:
 801700a:	b510      	push	{r4, lr}
 801700c:	460c      	mov	r4, r1
 801700e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017010:	b169      	cbz	r1, 801702e <__ssrefill_r+0x24>
 8017012:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017016:	4299      	cmp	r1, r3
 8017018:	d001      	beq.n	801701e <__ssrefill_r+0x14>
 801701a:	f7ff fdbf 	bl	8016b9c <_free_r>
 801701e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017020:	6063      	str	r3, [r4, #4]
 8017022:	2000      	movs	r0, #0
 8017024:	6360      	str	r0, [r4, #52]	; 0x34
 8017026:	b113      	cbz	r3, 801702e <__ssrefill_r+0x24>
 8017028:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801702a:	6023      	str	r3, [r4, #0]
 801702c:	bd10      	pop	{r4, pc}
 801702e:	6923      	ldr	r3, [r4, #16]
 8017030:	6023      	str	r3, [r4, #0]
 8017032:	2300      	movs	r3, #0
 8017034:	6063      	str	r3, [r4, #4]
 8017036:	89a3      	ldrh	r3, [r4, #12]
 8017038:	f043 0320 	orr.w	r3, r3, #32
 801703c:	81a3      	strh	r3, [r4, #12]
 801703e:	f04f 30ff 	mov.w	r0, #4294967295
 8017042:	e7f3      	b.n	801702c <__ssrefill_r+0x22>

08017044 <__ssvfiscanf_r>:
 8017044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017048:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801704c:	460c      	mov	r4, r1
 801704e:	2100      	movs	r1, #0
 8017050:	9144      	str	r1, [sp, #272]	; 0x110
 8017052:	9145      	str	r1, [sp, #276]	; 0x114
 8017054:	499f      	ldr	r1, [pc, #636]	; (80172d4 <__ssvfiscanf_r+0x290>)
 8017056:	91a0      	str	r1, [sp, #640]	; 0x280
 8017058:	f10d 0804 	add.w	r8, sp, #4
 801705c:	499e      	ldr	r1, [pc, #632]	; (80172d8 <__ssvfiscanf_r+0x294>)
 801705e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80172dc <__ssvfiscanf_r+0x298>
 8017062:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017066:	4606      	mov	r6, r0
 8017068:	4692      	mov	sl, r2
 801706a:	91a1      	str	r1, [sp, #644]	; 0x284
 801706c:	9300      	str	r3, [sp, #0]
 801706e:	270a      	movs	r7, #10
 8017070:	f89a 3000 	ldrb.w	r3, [sl]
 8017074:	2b00      	cmp	r3, #0
 8017076:	f000 812a 	beq.w	80172ce <__ssvfiscanf_r+0x28a>
 801707a:	4655      	mov	r5, sl
 801707c:	f7ff f8c8 	bl	8016210 <__locale_ctype_ptr>
 8017080:	f815 bb01 	ldrb.w	fp, [r5], #1
 8017084:	4458      	add	r0, fp
 8017086:	7843      	ldrb	r3, [r0, #1]
 8017088:	f013 0308 	ands.w	r3, r3, #8
 801708c:	d01c      	beq.n	80170c8 <__ssvfiscanf_r+0x84>
 801708e:	6863      	ldr	r3, [r4, #4]
 8017090:	2b00      	cmp	r3, #0
 8017092:	dd12      	ble.n	80170ba <__ssvfiscanf_r+0x76>
 8017094:	f7ff f8bc 	bl	8016210 <__locale_ctype_ptr>
 8017098:	6823      	ldr	r3, [r4, #0]
 801709a:	781a      	ldrb	r2, [r3, #0]
 801709c:	4410      	add	r0, r2
 801709e:	7842      	ldrb	r2, [r0, #1]
 80170a0:	0712      	lsls	r2, r2, #28
 80170a2:	d401      	bmi.n	80170a8 <__ssvfiscanf_r+0x64>
 80170a4:	46aa      	mov	sl, r5
 80170a6:	e7e3      	b.n	8017070 <__ssvfiscanf_r+0x2c>
 80170a8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80170aa:	3201      	adds	r2, #1
 80170ac:	9245      	str	r2, [sp, #276]	; 0x114
 80170ae:	6862      	ldr	r2, [r4, #4]
 80170b0:	3301      	adds	r3, #1
 80170b2:	3a01      	subs	r2, #1
 80170b4:	6062      	str	r2, [r4, #4]
 80170b6:	6023      	str	r3, [r4, #0]
 80170b8:	e7e9      	b.n	801708e <__ssvfiscanf_r+0x4a>
 80170ba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80170bc:	4621      	mov	r1, r4
 80170be:	4630      	mov	r0, r6
 80170c0:	4798      	blx	r3
 80170c2:	2800      	cmp	r0, #0
 80170c4:	d0e6      	beq.n	8017094 <__ssvfiscanf_r+0x50>
 80170c6:	e7ed      	b.n	80170a4 <__ssvfiscanf_r+0x60>
 80170c8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80170cc:	f040 8082 	bne.w	80171d4 <__ssvfiscanf_r+0x190>
 80170d0:	9343      	str	r3, [sp, #268]	; 0x10c
 80170d2:	9341      	str	r3, [sp, #260]	; 0x104
 80170d4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80170d8:	2b2a      	cmp	r3, #42	; 0x2a
 80170da:	d103      	bne.n	80170e4 <__ssvfiscanf_r+0xa0>
 80170dc:	2310      	movs	r3, #16
 80170de:	9341      	str	r3, [sp, #260]	; 0x104
 80170e0:	f10a 0502 	add.w	r5, sl, #2
 80170e4:	46aa      	mov	sl, r5
 80170e6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80170ea:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80170ee:	2a09      	cmp	r2, #9
 80170f0:	d922      	bls.n	8017138 <__ssvfiscanf_r+0xf4>
 80170f2:	2203      	movs	r2, #3
 80170f4:	4879      	ldr	r0, [pc, #484]	; (80172dc <__ssvfiscanf_r+0x298>)
 80170f6:	f7e9 f88b 	bl	8000210 <memchr>
 80170fa:	b138      	cbz	r0, 801710c <__ssvfiscanf_r+0xc8>
 80170fc:	eba0 0309 	sub.w	r3, r0, r9
 8017100:	2001      	movs	r0, #1
 8017102:	4098      	lsls	r0, r3
 8017104:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017106:	4318      	orrs	r0, r3
 8017108:	9041      	str	r0, [sp, #260]	; 0x104
 801710a:	46aa      	mov	sl, r5
 801710c:	f89a 3000 	ldrb.w	r3, [sl]
 8017110:	2b67      	cmp	r3, #103	; 0x67
 8017112:	f10a 0501 	add.w	r5, sl, #1
 8017116:	d82b      	bhi.n	8017170 <__ssvfiscanf_r+0x12c>
 8017118:	2b65      	cmp	r3, #101	; 0x65
 801711a:	f080 809f 	bcs.w	801725c <__ssvfiscanf_r+0x218>
 801711e:	2b47      	cmp	r3, #71	; 0x47
 8017120:	d810      	bhi.n	8017144 <__ssvfiscanf_r+0x100>
 8017122:	2b45      	cmp	r3, #69	; 0x45
 8017124:	f080 809a 	bcs.w	801725c <__ssvfiscanf_r+0x218>
 8017128:	2b00      	cmp	r3, #0
 801712a:	d06c      	beq.n	8017206 <__ssvfiscanf_r+0x1c2>
 801712c:	2b25      	cmp	r3, #37	; 0x25
 801712e:	d051      	beq.n	80171d4 <__ssvfiscanf_r+0x190>
 8017130:	2303      	movs	r3, #3
 8017132:	9347      	str	r3, [sp, #284]	; 0x11c
 8017134:	9742      	str	r7, [sp, #264]	; 0x108
 8017136:	e027      	b.n	8017188 <__ssvfiscanf_r+0x144>
 8017138:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801713a:	fb07 1303 	mla	r3, r7, r3, r1
 801713e:	3b30      	subs	r3, #48	; 0x30
 8017140:	9343      	str	r3, [sp, #268]	; 0x10c
 8017142:	e7cf      	b.n	80170e4 <__ssvfiscanf_r+0xa0>
 8017144:	2b5b      	cmp	r3, #91	; 0x5b
 8017146:	d06a      	beq.n	801721e <__ssvfiscanf_r+0x1da>
 8017148:	d80c      	bhi.n	8017164 <__ssvfiscanf_r+0x120>
 801714a:	2b58      	cmp	r3, #88	; 0x58
 801714c:	d1f0      	bne.n	8017130 <__ssvfiscanf_r+0xec>
 801714e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017154:	9241      	str	r2, [sp, #260]	; 0x104
 8017156:	2210      	movs	r2, #16
 8017158:	9242      	str	r2, [sp, #264]	; 0x108
 801715a:	2b6e      	cmp	r3, #110	; 0x6e
 801715c:	bf8c      	ite	hi
 801715e:	2304      	movhi	r3, #4
 8017160:	2303      	movls	r3, #3
 8017162:	e010      	b.n	8017186 <__ssvfiscanf_r+0x142>
 8017164:	2b63      	cmp	r3, #99	; 0x63
 8017166:	d065      	beq.n	8017234 <__ssvfiscanf_r+0x1f0>
 8017168:	2b64      	cmp	r3, #100	; 0x64
 801716a:	d1e1      	bne.n	8017130 <__ssvfiscanf_r+0xec>
 801716c:	9742      	str	r7, [sp, #264]	; 0x108
 801716e:	e7f4      	b.n	801715a <__ssvfiscanf_r+0x116>
 8017170:	2b70      	cmp	r3, #112	; 0x70
 8017172:	d04b      	beq.n	801720c <__ssvfiscanf_r+0x1c8>
 8017174:	d826      	bhi.n	80171c4 <__ssvfiscanf_r+0x180>
 8017176:	2b6e      	cmp	r3, #110	; 0x6e
 8017178:	d062      	beq.n	8017240 <__ssvfiscanf_r+0x1fc>
 801717a:	d84c      	bhi.n	8017216 <__ssvfiscanf_r+0x1d2>
 801717c:	2b69      	cmp	r3, #105	; 0x69
 801717e:	d1d7      	bne.n	8017130 <__ssvfiscanf_r+0xec>
 8017180:	2300      	movs	r3, #0
 8017182:	9342      	str	r3, [sp, #264]	; 0x108
 8017184:	2303      	movs	r3, #3
 8017186:	9347      	str	r3, [sp, #284]	; 0x11c
 8017188:	6863      	ldr	r3, [r4, #4]
 801718a:	2b00      	cmp	r3, #0
 801718c:	dd68      	ble.n	8017260 <__ssvfiscanf_r+0x21c>
 801718e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017190:	0659      	lsls	r1, r3, #25
 8017192:	d407      	bmi.n	80171a4 <__ssvfiscanf_r+0x160>
 8017194:	f7ff f83c 	bl	8016210 <__locale_ctype_ptr>
 8017198:	6823      	ldr	r3, [r4, #0]
 801719a:	781a      	ldrb	r2, [r3, #0]
 801719c:	4410      	add	r0, r2
 801719e:	7842      	ldrb	r2, [r0, #1]
 80171a0:	0712      	lsls	r2, r2, #28
 80171a2:	d464      	bmi.n	801726e <__ssvfiscanf_r+0x22a>
 80171a4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80171a6:	2b02      	cmp	r3, #2
 80171a8:	dc73      	bgt.n	8017292 <__ssvfiscanf_r+0x24e>
 80171aa:	466b      	mov	r3, sp
 80171ac:	4622      	mov	r2, r4
 80171ae:	a941      	add	r1, sp, #260	; 0x104
 80171b0:	4630      	mov	r0, r6
 80171b2:	f000 f9d7 	bl	8017564 <_scanf_chars>
 80171b6:	2801      	cmp	r0, #1
 80171b8:	f000 8089 	beq.w	80172ce <__ssvfiscanf_r+0x28a>
 80171bc:	2802      	cmp	r0, #2
 80171be:	f47f af71 	bne.w	80170a4 <__ssvfiscanf_r+0x60>
 80171c2:	e01d      	b.n	8017200 <__ssvfiscanf_r+0x1bc>
 80171c4:	2b75      	cmp	r3, #117	; 0x75
 80171c6:	d0d1      	beq.n	801716c <__ssvfiscanf_r+0x128>
 80171c8:	2b78      	cmp	r3, #120	; 0x78
 80171ca:	d0c0      	beq.n	801714e <__ssvfiscanf_r+0x10a>
 80171cc:	2b73      	cmp	r3, #115	; 0x73
 80171ce:	d1af      	bne.n	8017130 <__ssvfiscanf_r+0xec>
 80171d0:	2302      	movs	r3, #2
 80171d2:	e7d8      	b.n	8017186 <__ssvfiscanf_r+0x142>
 80171d4:	6863      	ldr	r3, [r4, #4]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	dd0c      	ble.n	80171f4 <__ssvfiscanf_r+0x1b0>
 80171da:	6823      	ldr	r3, [r4, #0]
 80171dc:	781a      	ldrb	r2, [r3, #0]
 80171de:	455a      	cmp	r2, fp
 80171e0:	d175      	bne.n	80172ce <__ssvfiscanf_r+0x28a>
 80171e2:	3301      	adds	r3, #1
 80171e4:	6862      	ldr	r2, [r4, #4]
 80171e6:	6023      	str	r3, [r4, #0]
 80171e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80171ea:	3a01      	subs	r2, #1
 80171ec:	3301      	adds	r3, #1
 80171ee:	6062      	str	r2, [r4, #4]
 80171f0:	9345      	str	r3, [sp, #276]	; 0x114
 80171f2:	e757      	b.n	80170a4 <__ssvfiscanf_r+0x60>
 80171f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80171f6:	4621      	mov	r1, r4
 80171f8:	4630      	mov	r0, r6
 80171fa:	4798      	blx	r3
 80171fc:	2800      	cmp	r0, #0
 80171fe:	d0ec      	beq.n	80171da <__ssvfiscanf_r+0x196>
 8017200:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017202:	2800      	cmp	r0, #0
 8017204:	d159      	bne.n	80172ba <__ssvfiscanf_r+0x276>
 8017206:	f04f 30ff 	mov.w	r0, #4294967295
 801720a:	e05c      	b.n	80172c6 <__ssvfiscanf_r+0x282>
 801720c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801720e:	f042 0220 	orr.w	r2, r2, #32
 8017212:	9241      	str	r2, [sp, #260]	; 0x104
 8017214:	e79b      	b.n	801714e <__ssvfiscanf_r+0x10a>
 8017216:	2308      	movs	r3, #8
 8017218:	9342      	str	r3, [sp, #264]	; 0x108
 801721a:	2304      	movs	r3, #4
 801721c:	e7b3      	b.n	8017186 <__ssvfiscanf_r+0x142>
 801721e:	4629      	mov	r1, r5
 8017220:	4640      	mov	r0, r8
 8017222:	f000 fb19 	bl	8017858 <__sccl>
 8017226:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801722c:	9341      	str	r3, [sp, #260]	; 0x104
 801722e:	4605      	mov	r5, r0
 8017230:	2301      	movs	r3, #1
 8017232:	e7a8      	b.n	8017186 <__ssvfiscanf_r+0x142>
 8017234:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801723a:	9341      	str	r3, [sp, #260]	; 0x104
 801723c:	2300      	movs	r3, #0
 801723e:	e7a2      	b.n	8017186 <__ssvfiscanf_r+0x142>
 8017240:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017242:	06c3      	lsls	r3, r0, #27
 8017244:	f53f af2e 	bmi.w	80170a4 <__ssvfiscanf_r+0x60>
 8017248:	9b00      	ldr	r3, [sp, #0]
 801724a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801724c:	1d19      	adds	r1, r3, #4
 801724e:	9100      	str	r1, [sp, #0]
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	07c0      	lsls	r0, r0, #31
 8017254:	bf4c      	ite	mi
 8017256:	801a      	strhmi	r2, [r3, #0]
 8017258:	601a      	strpl	r2, [r3, #0]
 801725a:	e723      	b.n	80170a4 <__ssvfiscanf_r+0x60>
 801725c:	2305      	movs	r3, #5
 801725e:	e792      	b.n	8017186 <__ssvfiscanf_r+0x142>
 8017260:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017262:	4621      	mov	r1, r4
 8017264:	4630      	mov	r0, r6
 8017266:	4798      	blx	r3
 8017268:	2800      	cmp	r0, #0
 801726a:	d090      	beq.n	801718e <__ssvfiscanf_r+0x14a>
 801726c:	e7c8      	b.n	8017200 <__ssvfiscanf_r+0x1bc>
 801726e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017270:	3201      	adds	r2, #1
 8017272:	9245      	str	r2, [sp, #276]	; 0x114
 8017274:	6862      	ldr	r2, [r4, #4]
 8017276:	3a01      	subs	r2, #1
 8017278:	2a00      	cmp	r2, #0
 801727a:	6062      	str	r2, [r4, #4]
 801727c:	dd02      	ble.n	8017284 <__ssvfiscanf_r+0x240>
 801727e:	3301      	adds	r3, #1
 8017280:	6023      	str	r3, [r4, #0]
 8017282:	e787      	b.n	8017194 <__ssvfiscanf_r+0x150>
 8017284:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017286:	4621      	mov	r1, r4
 8017288:	4630      	mov	r0, r6
 801728a:	4798      	blx	r3
 801728c:	2800      	cmp	r0, #0
 801728e:	d081      	beq.n	8017194 <__ssvfiscanf_r+0x150>
 8017290:	e7b6      	b.n	8017200 <__ssvfiscanf_r+0x1bc>
 8017292:	2b04      	cmp	r3, #4
 8017294:	dc06      	bgt.n	80172a4 <__ssvfiscanf_r+0x260>
 8017296:	466b      	mov	r3, sp
 8017298:	4622      	mov	r2, r4
 801729a:	a941      	add	r1, sp, #260	; 0x104
 801729c:	4630      	mov	r0, r6
 801729e:	f000 f9c5 	bl	801762c <_scanf_i>
 80172a2:	e788      	b.n	80171b6 <__ssvfiscanf_r+0x172>
 80172a4:	4b0e      	ldr	r3, [pc, #56]	; (80172e0 <__ssvfiscanf_r+0x29c>)
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	f43f aefc 	beq.w	80170a4 <__ssvfiscanf_r+0x60>
 80172ac:	466b      	mov	r3, sp
 80172ae:	4622      	mov	r2, r4
 80172b0:	a941      	add	r1, sp, #260	; 0x104
 80172b2:	4630      	mov	r0, r6
 80172b4:	f7fc f9e4 	bl	8013680 <_scanf_float>
 80172b8:	e77d      	b.n	80171b6 <__ssvfiscanf_r+0x172>
 80172ba:	89a3      	ldrh	r3, [r4, #12]
 80172bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80172c0:	bf18      	it	ne
 80172c2:	f04f 30ff 	movne.w	r0, #4294967295
 80172c6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80172ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172ce:	9844      	ldr	r0, [sp, #272]	; 0x110
 80172d0:	e7f9      	b.n	80172c6 <__ssvfiscanf_r+0x282>
 80172d2:	bf00      	nop
 80172d4:	08016f91 	.word	0x08016f91
 80172d8:	0801700b 	.word	0x0801700b
 80172dc:	080185fa 	.word	0x080185fa
 80172e0:	08013681 	.word	0x08013681

080172e4 <__sfputc_r>:
 80172e4:	6893      	ldr	r3, [r2, #8]
 80172e6:	3b01      	subs	r3, #1
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	b410      	push	{r4}
 80172ec:	6093      	str	r3, [r2, #8]
 80172ee:	da08      	bge.n	8017302 <__sfputc_r+0x1e>
 80172f0:	6994      	ldr	r4, [r2, #24]
 80172f2:	42a3      	cmp	r3, r4
 80172f4:	db01      	blt.n	80172fa <__sfputc_r+0x16>
 80172f6:	290a      	cmp	r1, #10
 80172f8:	d103      	bne.n	8017302 <__sfputc_r+0x1e>
 80172fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172fe:	f7fd bbbd 	b.w	8014a7c <__swbuf_r>
 8017302:	6813      	ldr	r3, [r2, #0]
 8017304:	1c58      	adds	r0, r3, #1
 8017306:	6010      	str	r0, [r2, #0]
 8017308:	7019      	strb	r1, [r3, #0]
 801730a:	4608      	mov	r0, r1
 801730c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017310:	4770      	bx	lr

08017312 <__sfputs_r>:
 8017312:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017314:	4606      	mov	r6, r0
 8017316:	460f      	mov	r7, r1
 8017318:	4614      	mov	r4, r2
 801731a:	18d5      	adds	r5, r2, r3
 801731c:	42ac      	cmp	r4, r5
 801731e:	d101      	bne.n	8017324 <__sfputs_r+0x12>
 8017320:	2000      	movs	r0, #0
 8017322:	e007      	b.n	8017334 <__sfputs_r+0x22>
 8017324:	463a      	mov	r2, r7
 8017326:	f814 1b01 	ldrb.w	r1, [r4], #1
 801732a:	4630      	mov	r0, r6
 801732c:	f7ff ffda 	bl	80172e4 <__sfputc_r>
 8017330:	1c43      	adds	r3, r0, #1
 8017332:	d1f3      	bne.n	801731c <__sfputs_r+0xa>
 8017334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017338 <_vfiprintf_r>:
 8017338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801733c:	460c      	mov	r4, r1
 801733e:	b09d      	sub	sp, #116	; 0x74
 8017340:	4617      	mov	r7, r2
 8017342:	461d      	mov	r5, r3
 8017344:	4606      	mov	r6, r0
 8017346:	b118      	cbz	r0, 8017350 <_vfiprintf_r+0x18>
 8017348:	6983      	ldr	r3, [r0, #24]
 801734a:	b90b      	cbnz	r3, 8017350 <_vfiprintf_r+0x18>
 801734c:	f7fe fbac 	bl	8015aa8 <__sinit>
 8017350:	4b7c      	ldr	r3, [pc, #496]	; (8017544 <_vfiprintf_r+0x20c>)
 8017352:	429c      	cmp	r4, r3
 8017354:	d158      	bne.n	8017408 <_vfiprintf_r+0xd0>
 8017356:	6874      	ldr	r4, [r6, #4]
 8017358:	89a3      	ldrh	r3, [r4, #12]
 801735a:	0718      	lsls	r0, r3, #28
 801735c:	d55e      	bpl.n	801741c <_vfiprintf_r+0xe4>
 801735e:	6923      	ldr	r3, [r4, #16]
 8017360:	2b00      	cmp	r3, #0
 8017362:	d05b      	beq.n	801741c <_vfiprintf_r+0xe4>
 8017364:	2300      	movs	r3, #0
 8017366:	9309      	str	r3, [sp, #36]	; 0x24
 8017368:	2320      	movs	r3, #32
 801736a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801736e:	2330      	movs	r3, #48	; 0x30
 8017370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017374:	9503      	str	r5, [sp, #12]
 8017376:	f04f 0b01 	mov.w	fp, #1
 801737a:	46b8      	mov	r8, r7
 801737c:	4645      	mov	r5, r8
 801737e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017382:	b10b      	cbz	r3, 8017388 <_vfiprintf_r+0x50>
 8017384:	2b25      	cmp	r3, #37	; 0x25
 8017386:	d154      	bne.n	8017432 <_vfiprintf_r+0xfa>
 8017388:	ebb8 0a07 	subs.w	sl, r8, r7
 801738c:	d00b      	beq.n	80173a6 <_vfiprintf_r+0x6e>
 801738e:	4653      	mov	r3, sl
 8017390:	463a      	mov	r2, r7
 8017392:	4621      	mov	r1, r4
 8017394:	4630      	mov	r0, r6
 8017396:	f7ff ffbc 	bl	8017312 <__sfputs_r>
 801739a:	3001      	adds	r0, #1
 801739c:	f000 80c2 	beq.w	8017524 <_vfiprintf_r+0x1ec>
 80173a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173a2:	4453      	add	r3, sl
 80173a4:	9309      	str	r3, [sp, #36]	; 0x24
 80173a6:	f898 3000 	ldrb.w	r3, [r8]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	f000 80ba 	beq.w	8017524 <_vfiprintf_r+0x1ec>
 80173b0:	2300      	movs	r3, #0
 80173b2:	f04f 32ff 	mov.w	r2, #4294967295
 80173b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80173ba:	9304      	str	r3, [sp, #16]
 80173bc:	9307      	str	r3, [sp, #28]
 80173be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80173c2:	931a      	str	r3, [sp, #104]	; 0x68
 80173c4:	46a8      	mov	r8, r5
 80173c6:	2205      	movs	r2, #5
 80173c8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80173cc:	485e      	ldr	r0, [pc, #376]	; (8017548 <_vfiprintf_r+0x210>)
 80173ce:	f7e8 ff1f 	bl	8000210 <memchr>
 80173d2:	9b04      	ldr	r3, [sp, #16]
 80173d4:	bb78      	cbnz	r0, 8017436 <_vfiprintf_r+0xfe>
 80173d6:	06d9      	lsls	r1, r3, #27
 80173d8:	bf44      	itt	mi
 80173da:	2220      	movmi	r2, #32
 80173dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80173e0:	071a      	lsls	r2, r3, #28
 80173e2:	bf44      	itt	mi
 80173e4:	222b      	movmi	r2, #43	; 0x2b
 80173e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80173ea:	782a      	ldrb	r2, [r5, #0]
 80173ec:	2a2a      	cmp	r2, #42	; 0x2a
 80173ee:	d02a      	beq.n	8017446 <_vfiprintf_r+0x10e>
 80173f0:	9a07      	ldr	r2, [sp, #28]
 80173f2:	46a8      	mov	r8, r5
 80173f4:	2000      	movs	r0, #0
 80173f6:	250a      	movs	r5, #10
 80173f8:	4641      	mov	r1, r8
 80173fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80173fe:	3b30      	subs	r3, #48	; 0x30
 8017400:	2b09      	cmp	r3, #9
 8017402:	d969      	bls.n	80174d8 <_vfiprintf_r+0x1a0>
 8017404:	b360      	cbz	r0, 8017460 <_vfiprintf_r+0x128>
 8017406:	e024      	b.n	8017452 <_vfiprintf_r+0x11a>
 8017408:	4b50      	ldr	r3, [pc, #320]	; (801754c <_vfiprintf_r+0x214>)
 801740a:	429c      	cmp	r4, r3
 801740c:	d101      	bne.n	8017412 <_vfiprintf_r+0xda>
 801740e:	68b4      	ldr	r4, [r6, #8]
 8017410:	e7a2      	b.n	8017358 <_vfiprintf_r+0x20>
 8017412:	4b4f      	ldr	r3, [pc, #316]	; (8017550 <_vfiprintf_r+0x218>)
 8017414:	429c      	cmp	r4, r3
 8017416:	bf08      	it	eq
 8017418:	68f4      	ldreq	r4, [r6, #12]
 801741a:	e79d      	b.n	8017358 <_vfiprintf_r+0x20>
 801741c:	4621      	mov	r1, r4
 801741e:	4630      	mov	r0, r6
 8017420:	f7fd fb90 	bl	8014b44 <__swsetup_r>
 8017424:	2800      	cmp	r0, #0
 8017426:	d09d      	beq.n	8017364 <_vfiprintf_r+0x2c>
 8017428:	f04f 30ff 	mov.w	r0, #4294967295
 801742c:	b01d      	add	sp, #116	; 0x74
 801742e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017432:	46a8      	mov	r8, r5
 8017434:	e7a2      	b.n	801737c <_vfiprintf_r+0x44>
 8017436:	4a44      	ldr	r2, [pc, #272]	; (8017548 <_vfiprintf_r+0x210>)
 8017438:	1a80      	subs	r0, r0, r2
 801743a:	fa0b f000 	lsl.w	r0, fp, r0
 801743e:	4318      	orrs	r0, r3
 8017440:	9004      	str	r0, [sp, #16]
 8017442:	4645      	mov	r5, r8
 8017444:	e7be      	b.n	80173c4 <_vfiprintf_r+0x8c>
 8017446:	9a03      	ldr	r2, [sp, #12]
 8017448:	1d11      	adds	r1, r2, #4
 801744a:	6812      	ldr	r2, [r2, #0]
 801744c:	9103      	str	r1, [sp, #12]
 801744e:	2a00      	cmp	r2, #0
 8017450:	db01      	blt.n	8017456 <_vfiprintf_r+0x11e>
 8017452:	9207      	str	r2, [sp, #28]
 8017454:	e004      	b.n	8017460 <_vfiprintf_r+0x128>
 8017456:	4252      	negs	r2, r2
 8017458:	f043 0302 	orr.w	r3, r3, #2
 801745c:	9207      	str	r2, [sp, #28]
 801745e:	9304      	str	r3, [sp, #16]
 8017460:	f898 3000 	ldrb.w	r3, [r8]
 8017464:	2b2e      	cmp	r3, #46	; 0x2e
 8017466:	d10e      	bne.n	8017486 <_vfiprintf_r+0x14e>
 8017468:	f898 3001 	ldrb.w	r3, [r8, #1]
 801746c:	2b2a      	cmp	r3, #42	; 0x2a
 801746e:	d138      	bne.n	80174e2 <_vfiprintf_r+0x1aa>
 8017470:	9b03      	ldr	r3, [sp, #12]
 8017472:	1d1a      	adds	r2, r3, #4
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	9203      	str	r2, [sp, #12]
 8017478:	2b00      	cmp	r3, #0
 801747a:	bfb8      	it	lt
 801747c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017480:	f108 0802 	add.w	r8, r8, #2
 8017484:	9305      	str	r3, [sp, #20]
 8017486:	4d33      	ldr	r5, [pc, #204]	; (8017554 <_vfiprintf_r+0x21c>)
 8017488:	f898 1000 	ldrb.w	r1, [r8]
 801748c:	2203      	movs	r2, #3
 801748e:	4628      	mov	r0, r5
 8017490:	f7e8 febe 	bl	8000210 <memchr>
 8017494:	b140      	cbz	r0, 80174a8 <_vfiprintf_r+0x170>
 8017496:	2340      	movs	r3, #64	; 0x40
 8017498:	1b40      	subs	r0, r0, r5
 801749a:	fa03 f000 	lsl.w	r0, r3, r0
 801749e:	9b04      	ldr	r3, [sp, #16]
 80174a0:	4303      	orrs	r3, r0
 80174a2:	f108 0801 	add.w	r8, r8, #1
 80174a6:	9304      	str	r3, [sp, #16]
 80174a8:	f898 1000 	ldrb.w	r1, [r8]
 80174ac:	482a      	ldr	r0, [pc, #168]	; (8017558 <_vfiprintf_r+0x220>)
 80174ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80174b2:	2206      	movs	r2, #6
 80174b4:	f108 0701 	add.w	r7, r8, #1
 80174b8:	f7e8 feaa 	bl	8000210 <memchr>
 80174bc:	2800      	cmp	r0, #0
 80174be:	d037      	beq.n	8017530 <_vfiprintf_r+0x1f8>
 80174c0:	4b26      	ldr	r3, [pc, #152]	; (801755c <_vfiprintf_r+0x224>)
 80174c2:	bb1b      	cbnz	r3, 801750c <_vfiprintf_r+0x1d4>
 80174c4:	9b03      	ldr	r3, [sp, #12]
 80174c6:	3307      	adds	r3, #7
 80174c8:	f023 0307 	bic.w	r3, r3, #7
 80174cc:	3308      	adds	r3, #8
 80174ce:	9303      	str	r3, [sp, #12]
 80174d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174d2:	444b      	add	r3, r9
 80174d4:	9309      	str	r3, [sp, #36]	; 0x24
 80174d6:	e750      	b.n	801737a <_vfiprintf_r+0x42>
 80174d8:	fb05 3202 	mla	r2, r5, r2, r3
 80174dc:	2001      	movs	r0, #1
 80174de:	4688      	mov	r8, r1
 80174e0:	e78a      	b.n	80173f8 <_vfiprintf_r+0xc0>
 80174e2:	2300      	movs	r3, #0
 80174e4:	f108 0801 	add.w	r8, r8, #1
 80174e8:	9305      	str	r3, [sp, #20]
 80174ea:	4619      	mov	r1, r3
 80174ec:	250a      	movs	r5, #10
 80174ee:	4640      	mov	r0, r8
 80174f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80174f4:	3a30      	subs	r2, #48	; 0x30
 80174f6:	2a09      	cmp	r2, #9
 80174f8:	d903      	bls.n	8017502 <_vfiprintf_r+0x1ca>
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d0c3      	beq.n	8017486 <_vfiprintf_r+0x14e>
 80174fe:	9105      	str	r1, [sp, #20]
 8017500:	e7c1      	b.n	8017486 <_vfiprintf_r+0x14e>
 8017502:	fb05 2101 	mla	r1, r5, r1, r2
 8017506:	2301      	movs	r3, #1
 8017508:	4680      	mov	r8, r0
 801750a:	e7f0      	b.n	80174ee <_vfiprintf_r+0x1b6>
 801750c:	ab03      	add	r3, sp, #12
 801750e:	9300      	str	r3, [sp, #0]
 8017510:	4622      	mov	r2, r4
 8017512:	4b13      	ldr	r3, [pc, #76]	; (8017560 <_vfiprintf_r+0x228>)
 8017514:	a904      	add	r1, sp, #16
 8017516:	4630      	mov	r0, r6
 8017518:	f7fb fcea 	bl	8012ef0 <_printf_float>
 801751c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017520:	4681      	mov	r9, r0
 8017522:	d1d5      	bne.n	80174d0 <_vfiprintf_r+0x198>
 8017524:	89a3      	ldrh	r3, [r4, #12]
 8017526:	065b      	lsls	r3, r3, #25
 8017528:	f53f af7e 	bmi.w	8017428 <_vfiprintf_r+0xf0>
 801752c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801752e:	e77d      	b.n	801742c <_vfiprintf_r+0xf4>
 8017530:	ab03      	add	r3, sp, #12
 8017532:	9300      	str	r3, [sp, #0]
 8017534:	4622      	mov	r2, r4
 8017536:	4b0a      	ldr	r3, [pc, #40]	; (8017560 <_vfiprintf_r+0x228>)
 8017538:	a904      	add	r1, sp, #16
 801753a:	4630      	mov	r0, r6
 801753c:	f7fb ff8e 	bl	801345c <_printf_i>
 8017540:	e7ec      	b.n	801751c <_vfiprintf_r+0x1e4>
 8017542:	bf00      	nop
 8017544:	080184a8 	.word	0x080184a8
 8017548:	080185f4 	.word	0x080185f4
 801754c:	080184c8 	.word	0x080184c8
 8017550:	08018488 	.word	0x08018488
 8017554:	080185fa 	.word	0x080185fa
 8017558:	080185fe 	.word	0x080185fe
 801755c:	08012ef1 	.word	0x08012ef1
 8017560:	08017313 	.word	0x08017313

08017564 <_scanf_chars>:
 8017564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017568:	4615      	mov	r5, r2
 801756a:	688a      	ldr	r2, [r1, #8]
 801756c:	4680      	mov	r8, r0
 801756e:	460c      	mov	r4, r1
 8017570:	b932      	cbnz	r2, 8017580 <_scanf_chars+0x1c>
 8017572:	698a      	ldr	r2, [r1, #24]
 8017574:	2a00      	cmp	r2, #0
 8017576:	bf14      	ite	ne
 8017578:	f04f 32ff 	movne.w	r2, #4294967295
 801757c:	2201      	moveq	r2, #1
 801757e:	608a      	str	r2, [r1, #8]
 8017580:	6822      	ldr	r2, [r4, #0]
 8017582:	06d1      	lsls	r1, r2, #27
 8017584:	bf5f      	itttt	pl
 8017586:	681a      	ldrpl	r2, [r3, #0]
 8017588:	1d11      	addpl	r1, r2, #4
 801758a:	6019      	strpl	r1, [r3, #0]
 801758c:	6817      	ldrpl	r7, [r2, #0]
 801758e:	2600      	movs	r6, #0
 8017590:	69a3      	ldr	r3, [r4, #24]
 8017592:	b1db      	cbz	r3, 80175cc <_scanf_chars+0x68>
 8017594:	2b01      	cmp	r3, #1
 8017596:	d107      	bne.n	80175a8 <_scanf_chars+0x44>
 8017598:	682b      	ldr	r3, [r5, #0]
 801759a:	6962      	ldr	r2, [r4, #20]
 801759c:	781b      	ldrb	r3, [r3, #0]
 801759e:	5cd3      	ldrb	r3, [r2, r3]
 80175a0:	b9a3      	cbnz	r3, 80175cc <_scanf_chars+0x68>
 80175a2:	2e00      	cmp	r6, #0
 80175a4:	d132      	bne.n	801760c <_scanf_chars+0xa8>
 80175a6:	e006      	b.n	80175b6 <_scanf_chars+0x52>
 80175a8:	2b02      	cmp	r3, #2
 80175aa:	d007      	beq.n	80175bc <_scanf_chars+0x58>
 80175ac:	2e00      	cmp	r6, #0
 80175ae:	d12d      	bne.n	801760c <_scanf_chars+0xa8>
 80175b0:	69a3      	ldr	r3, [r4, #24]
 80175b2:	2b01      	cmp	r3, #1
 80175b4:	d12a      	bne.n	801760c <_scanf_chars+0xa8>
 80175b6:	2001      	movs	r0, #1
 80175b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175bc:	f7fe fe28 	bl	8016210 <__locale_ctype_ptr>
 80175c0:	682b      	ldr	r3, [r5, #0]
 80175c2:	781b      	ldrb	r3, [r3, #0]
 80175c4:	4418      	add	r0, r3
 80175c6:	7843      	ldrb	r3, [r0, #1]
 80175c8:	071b      	lsls	r3, r3, #28
 80175ca:	d4ef      	bmi.n	80175ac <_scanf_chars+0x48>
 80175cc:	6823      	ldr	r3, [r4, #0]
 80175ce:	06da      	lsls	r2, r3, #27
 80175d0:	bf5e      	ittt	pl
 80175d2:	682b      	ldrpl	r3, [r5, #0]
 80175d4:	781b      	ldrbpl	r3, [r3, #0]
 80175d6:	703b      	strbpl	r3, [r7, #0]
 80175d8:	682a      	ldr	r2, [r5, #0]
 80175da:	686b      	ldr	r3, [r5, #4]
 80175dc:	f102 0201 	add.w	r2, r2, #1
 80175e0:	602a      	str	r2, [r5, #0]
 80175e2:	68a2      	ldr	r2, [r4, #8]
 80175e4:	f103 33ff 	add.w	r3, r3, #4294967295
 80175e8:	f102 32ff 	add.w	r2, r2, #4294967295
 80175ec:	606b      	str	r3, [r5, #4]
 80175ee:	f106 0601 	add.w	r6, r6, #1
 80175f2:	bf58      	it	pl
 80175f4:	3701      	addpl	r7, #1
 80175f6:	60a2      	str	r2, [r4, #8]
 80175f8:	b142      	cbz	r2, 801760c <_scanf_chars+0xa8>
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	dcc8      	bgt.n	8017590 <_scanf_chars+0x2c>
 80175fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017602:	4629      	mov	r1, r5
 8017604:	4640      	mov	r0, r8
 8017606:	4798      	blx	r3
 8017608:	2800      	cmp	r0, #0
 801760a:	d0c1      	beq.n	8017590 <_scanf_chars+0x2c>
 801760c:	6823      	ldr	r3, [r4, #0]
 801760e:	f013 0310 	ands.w	r3, r3, #16
 8017612:	d105      	bne.n	8017620 <_scanf_chars+0xbc>
 8017614:	68e2      	ldr	r2, [r4, #12]
 8017616:	3201      	adds	r2, #1
 8017618:	60e2      	str	r2, [r4, #12]
 801761a:	69a2      	ldr	r2, [r4, #24]
 801761c:	b102      	cbz	r2, 8017620 <_scanf_chars+0xbc>
 801761e:	703b      	strb	r3, [r7, #0]
 8017620:	6923      	ldr	r3, [r4, #16]
 8017622:	441e      	add	r6, r3
 8017624:	6126      	str	r6, [r4, #16]
 8017626:	2000      	movs	r0, #0
 8017628:	e7c6      	b.n	80175b8 <_scanf_chars+0x54>
	...

0801762c <_scanf_i>:
 801762c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017630:	469a      	mov	sl, r3
 8017632:	4b74      	ldr	r3, [pc, #464]	; (8017804 <_scanf_i+0x1d8>)
 8017634:	460c      	mov	r4, r1
 8017636:	4683      	mov	fp, r0
 8017638:	4616      	mov	r6, r2
 801763a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801763e:	b087      	sub	sp, #28
 8017640:	ab03      	add	r3, sp, #12
 8017642:	68a7      	ldr	r7, [r4, #8]
 8017644:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017648:	4b6f      	ldr	r3, [pc, #444]	; (8017808 <_scanf_i+0x1dc>)
 801764a:	69a1      	ldr	r1, [r4, #24]
 801764c:	4a6f      	ldr	r2, [pc, #444]	; (801780c <_scanf_i+0x1e0>)
 801764e:	2903      	cmp	r1, #3
 8017650:	bf08      	it	eq
 8017652:	461a      	moveq	r2, r3
 8017654:	1e7b      	subs	r3, r7, #1
 8017656:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801765a:	bf84      	itt	hi
 801765c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017660:	60a3      	strhi	r3, [r4, #8]
 8017662:	6823      	ldr	r3, [r4, #0]
 8017664:	9200      	str	r2, [sp, #0]
 8017666:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801766a:	bf88      	it	hi
 801766c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017670:	f104 091c 	add.w	r9, r4, #28
 8017674:	6023      	str	r3, [r4, #0]
 8017676:	bf8c      	ite	hi
 8017678:	197f      	addhi	r7, r7, r5
 801767a:	2700      	movls	r7, #0
 801767c:	464b      	mov	r3, r9
 801767e:	f04f 0800 	mov.w	r8, #0
 8017682:	9301      	str	r3, [sp, #4]
 8017684:	6831      	ldr	r1, [r6, #0]
 8017686:	ab03      	add	r3, sp, #12
 8017688:	2202      	movs	r2, #2
 801768a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801768e:	7809      	ldrb	r1, [r1, #0]
 8017690:	f7e8 fdbe 	bl	8000210 <memchr>
 8017694:	9b01      	ldr	r3, [sp, #4]
 8017696:	b330      	cbz	r0, 80176e6 <_scanf_i+0xba>
 8017698:	f1b8 0f01 	cmp.w	r8, #1
 801769c:	d15a      	bne.n	8017754 <_scanf_i+0x128>
 801769e:	6862      	ldr	r2, [r4, #4]
 80176a0:	b92a      	cbnz	r2, 80176ae <_scanf_i+0x82>
 80176a2:	6822      	ldr	r2, [r4, #0]
 80176a4:	2108      	movs	r1, #8
 80176a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80176aa:	6061      	str	r1, [r4, #4]
 80176ac:	6022      	str	r2, [r4, #0]
 80176ae:	6822      	ldr	r2, [r4, #0]
 80176b0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80176b4:	6022      	str	r2, [r4, #0]
 80176b6:	68a2      	ldr	r2, [r4, #8]
 80176b8:	1e51      	subs	r1, r2, #1
 80176ba:	60a1      	str	r1, [r4, #8]
 80176bc:	b19a      	cbz	r2, 80176e6 <_scanf_i+0xba>
 80176be:	6832      	ldr	r2, [r6, #0]
 80176c0:	1c51      	adds	r1, r2, #1
 80176c2:	6031      	str	r1, [r6, #0]
 80176c4:	7812      	ldrb	r2, [r2, #0]
 80176c6:	701a      	strb	r2, [r3, #0]
 80176c8:	1c5d      	adds	r5, r3, #1
 80176ca:	6873      	ldr	r3, [r6, #4]
 80176cc:	3b01      	subs	r3, #1
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	6073      	str	r3, [r6, #4]
 80176d2:	dc07      	bgt.n	80176e4 <_scanf_i+0xb8>
 80176d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80176d8:	4631      	mov	r1, r6
 80176da:	4658      	mov	r0, fp
 80176dc:	4798      	blx	r3
 80176de:	2800      	cmp	r0, #0
 80176e0:	f040 8086 	bne.w	80177f0 <_scanf_i+0x1c4>
 80176e4:	462b      	mov	r3, r5
 80176e6:	f108 0801 	add.w	r8, r8, #1
 80176ea:	f1b8 0f03 	cmp.w	r8, #3
 80176ee:	d1c8      	bne.n	8017682 <_scanf_i+0x56>
 80176f0:	6862      	ldr	r2, [r4, #4]
 80176f2:	b90a      	cbnz	r2, 80176f8 <_scanf_i+0xcc>
 80176f4:	220a      	movs	r2, #10
 80176f6:	6062      	str	r2, [r4, #4]
 80176f8:	6862      	ldr	r2, [r4, #4]
 80176fa:	4945      	ldr	r1, [pc, #276]	; (8017810 <_scanf_i+0x1e4>)
 80176fc:	6960      	ldr	r0, [r4, #20]
 80176fe:	9301      	str	r3, [sp, #4]
 8017700:	1a89      	subs	r1, r1, r2
 8017702:	f000 f8a9 	bl	8017858 <__sccl>
 8017706:	9b01      	ldr	r3, [sp, #4]
 8017708:	f04f 0800 	mov.w	r8, #0
 801770c:	461d      	mov	r5, r3
 801770e:	68a3      	ldr	r3, [r4, #8]
 8017710:	6822      	ldr	r2, [r4, #0]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d03a      	beq.n	801778c <_scanf_i+0x160>
 8017716:	6831      	ldr	r1, [r6, #0]
 8017718:	6960      	ldr	r0, [r4, #20]
 801771a:	f891 c000 	ldrb.w	ip, [r1]
 801771e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017722:	2800      	cmp	r0, #0
 8017724:	d032      	beq.n	801778c <_scanf_i+0x160>
 8017726:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801772a:	d121      	bne.n	8017770 <_scanf_i+0x144>
 801772c:	0510      	lsls	r0, r2, #20
 801772e:	d51f      	bpl.n	8017770 <_scanf_i+0x144>
 8017730:	f108 0801 	add.w	r8, r8, #1
 8017734:	b117      	cbz	r7, 801773c <_scanf_i+0x110>
 8017736:	3301      	adds	r3, #1
 8017738:	3f01      	subs	r7, #1
 801773a:	60a3      	str	r3, [r4, #8]
 801773c:	6873      	ldr	r3, [r6, #4]
 801773e:	3b01      	subs	r3, #1
 8017740:	2b00      	cmp	r3, #0
 8017742:	6073      	str	r3, [r6, #4]
 8017744:	dd1b      	ble.n	801777e <_scanf_i+0x152>
 8017746:	6833      	ldr	r3, [r6, #0]
 8017748:	3301      	adds	r3, #1
 801774a:	6033      	str	r3, [r6, #0]
 801774c:	68a3      	ldr	r3, [r4, #8]
 801774e:	3b01      	subs	r3, #1
 8017750:	60a3      	str	r3, [r4, #8]
 8017752:	e7dc      	b.n	801770e <_scanf_i+0xe2>
 8017754:	f1b8 0f02 	cmp.w	r8, #2
 8017758:	d1ad      	bne.n	80176b6 <_scanf_i+0x8a>
 801775a:	6822      	ldr	r2, [r4, #0]
 801775c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017760:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017764:	d1bf      	bne.n	80176e6 <_scanf_i+0xba>
 8017766:	2110      	movs	r1, #16
 8017768:	6061      	str	r1, [r4, #4]
 801776a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801776e:	e7a1      	b.n	80176b4 <_scanf_i+0x88>
 8017770:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017774:	6022      	str	r2, [r4, #0]
 8017776:	780b      	ldrb	r3, [r1, #0]
 8017778:	702b      	strb	r3, [r5, #0]
 801777a:	3501      	adds	r5, #1
 801777c:	e7de      	b.n	801773c <_scanf_i+0x110>
 801777e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017782:	4631      	mov	r1, r6
 8017784:	4658      	mov	r0, fp
 8017786:	4798      	blx	r3
 8017788:	2800      	cmp	r0, #0
 801778a:	d0df      	beq.n	801774c <_scanf_i+0x120>
 801778c:	6823      	ldr	r3, [r4, #0]
 801778e:	05d9      	lsls	r1, r3, #23
 8017790:	d50c      	bpl.n	80177ac <_scanf_i+0x180>
 8017792:	454d      	cmp	r5, r9
 8017794:	d908      	bls.n	80177a8 <_scanf_i+0x17c>
 8017796:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801779a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801779e:	4632      	mov	r2, r6
 80177a0:	4658      	mov	r0, fp
 80177a2:	4798      	blx	r3
 80177a4:	1e6f      	subs	r7, r5, #1
 80177a6:	463d      	mov	r5, r7
 80177a8:	454d      	cmp	r5, r9
 80177aa:	d029      	beq.n	8017800 <_scanf_i+0x1d4>
 80177ac:	6822      	ldr	r2, [r4, #0]
 80177ae:	f012 0210 	ands.w	r2, r2, #16
 80177b2:	d113      	bne.n	80177dc <_scanf_i+0x1b0>
 80177b4:	702a      	strb	r2, [r5, #0]
 80177b6:	6863      	ldr	r3, [r4, #4]
 80177b8:	9e00      	ldr	r6, [sp, #0]
 80177ba:	4649      	mov	r1, r9
 80177bc:	4658      	mov	r0, fp
 80177be:	47b0      	blx	r6
 80177c0:	f8da 3000 	ldr.w	r3, [sl]
 80177c4:	6821      	ldr	r1, [r4, #0]
 80177c6:	1d1a      	adds	r2, r3, #4
 80177c8:	f8ca 2000 	str.w	r2, [sl]
 80177cc:	f011 0f20 	tst.w	r1, #32
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	d010      	beq.n	80177f6 <_scanf_i+0x1ca>
 80177d4:	6018      	str	r0, [r3, #0]
 80177d6:	68e3      	ldr	r3, [r4, #12]
 80177d8:	3301      	adds	r3, #1
 80177da:	60e3      	str	r3, [r4, #12]
 80177dc:	eba5 0509 	sub.w	r5, r5, r9
 80177e0:	44a8      	add	r8, r5
 80177e2:	6925      	ldr	r5, [r4, #16]
 80177e4:	4445      	add	r5, r8
 80177e6:	6125      	str	r5, [r4, #16]
 80177e8:	2000      	movs	r0, #0
 80177ea:	b007      	add	sp, #28
 80177ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177f0:	f04f 0800 	mov.w	r8, #0
 80177f4:	e7ca      	b.n	801778c <_scanf_i+0x160>
 80177f6:	07ca      	lsls	r2, r1, #31
 80177f8:	bf4c      	ite	mi
 80177fa:	8018      	strhmi	r0, [r3, #0]
 80177fc:	6018      	strpl	r0, [r3, #0]
 80177fe:	e7ea      	b.n	80177d6 <_scanf_i+0x1aa>
 8017800:	2001      	movs	r0, #1
 8017802:	e7f2      	b.n	80177ea <_scanf_i+0x1be>
 8017804:	08017d84 	.word	0x08017d84
 8017808:	08014a19 	.word	0x08014a19
 801780c:	080179d5 	.word	0x080179d5
 8017810:	08018615 	.word	0x08018615

08017814 <_read_r>:
 8017814:	b538      	push	{r3, r4, r5, lr}
 8017816:	4c07      	ldr	r4, [pc, #28]	; (8017834 <_read_r+0x20>)
 8017818:	4605      	mov	r5, r0
 801781a:	4608      	mov	r0, r1
 801781c:	4611      	mov	r1, r2
 801781e:	2200      	movs	r2, #0
 8017820:	6022      	str	r2, [r4, #0]
 8017822:	461a      	mov	r2, r3
 8017824:	f7ee f838 	bl	8005898 <_read>
 8017828:	1c43      	adds	r3, r0, #1
 801782a:	d102      	bne.n	8017832 <_read_r+0x1e>
 801782c:	6823      	ldr	r3, [r4, #0]
 801782e:	b103      	cbz	r3, 8017832 <_read_r+0x1e>
 8017830:	602b      	str	r3, [r5, #0]
 8017832:	bd38      	pop	{r3, r4, r5, pc}
 8017834:	2003b620 	.word	0x2003b620

08017838 <_sbrk_r>:
 8017838:	b538      	push	{r3, r4, r5, lr}
 801783a:	4c06      	ldr	r4, [pc, #24]	; (8017854 <_sbrk_r+0x1c>)
 801783c:	2300      	movs	r3, #0
 801783e:	4605      	mov	r5, r0
 8017840:	4608      	mov	r0, r1
 8017842:	6023      	str	r3, [r4, #0]
 8017844:	f7ee f87a 	bl	800593c <_sbrk>
 8017848:	1c43      	adds	r3, r0, #1
 801784a:	d102      	bne.n	8017852 <_sbrk_r+0x1a>
 801784c:	6823      	ldr	r3, [r4, #0]
 801784e:	b103      	cbz	r3, 8017852 <_sbrk_r+0x1a>
 8017850:	602b      	str	r3, [r5, #0]
 8017852:	bd38      	pop	{r3, r4, r5, pc}
 8017854:	2003b620 	.word	0x2003b620

08017858 <__sccl>:
 8017858:	b570      	push	{r4, r5, r6, lr}
 801785a:	780b      	ldrb	r3, [r1, #0]
 801785c:	2b5e      	cmp	r3, #94	; 0x5e
 801785e:	bf13      	iteet	ne
 8017860:	1c4a      	addne	r2, r1, #1
 8017862:	1c8a      	addeq	r2, r1, #2
 8017864:	784b      	ldrbeq	r3, [r1, #1]
 8017866:	2100      	movne	r1, #0
 8017868:	bf08      	it	eq
 801786a:	2101      	moveq	r1, #1
 801786c:	1e44      	subs	r4, r0, #1
 801786e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8017872:	f804 1f01 	strb.w	r1, [r4, #1]!
 8017876:	42ac      	cmp	r4, r5
 8017878:	d1fb      	bne.n	8017872 <__sccl+0x1a>
 801787a:	b913      	cbnz	r3, 8017882 <__sccl+0x2a>
 801787c:	3a01      	subs	r2, #1
 801787e:	4610      	mov	r0, r2
 8017880:	bd70      	pop	{r4, r5, r6, pc}
 8017882:	f081 0401 	eor.w	r4, r1, #1
 8017886:	54c4      	strb	r4, [r0, r3]
 8017888:	1c51      	adds	r1, r2, #1
 801788a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801788e:	2d2d      	cmp	r5, #45	; 0x2d
 8017890:	f101 36ff 	add.w	r6, r1, #4294967295
 8017894:	460a      	mov	r2, r1
 8017896:	d006      	beq.n	80178a6 <__sccl+0x4e>
 8017898:	2d5d      	cmp	r5, #93	; 0x5d
 801789a:	d0f0      	beq.n	801787e <__sccl+0x26>
 801789c:	b90d      	cbnz	r5, 80178a2 <__sccl+0x4a>
 801789e:	4632      	mov	r2, r6
 80178a0:	e7ed      	b.n	801787e <__sccl+0x26>
 80178a2:	462b      	mov	r3, r5
 80178a4:	e7ef      	b.n	8017886 <__sccl+0x2e>
 80178a6:	780e      	ldrb	r6, [r1, #0]
 80178a8:	2e5d      	cmp	r6, #93	; 0x5d
 80178aa:	d0fa      	beq.n	80178a2 <__sccl+0x4a>
 80178ac:	42b3      	cmp	r3, r6
 80178ae:	dcf8      	bgt.n	80178a2 <__sccl+0x4a>
 80178b0:	3301      	adds	r3, #1
 80178b2:	429e      	cmp	r6, r3
 80178b4:	54c4      	strb	r4, [r0, r3]
 80178b6:	dcfb      	bgt.n	80178b0 <__sccl+0x58>
 80178b8:	3102      	adds	r1, #2
 80178ba:	e7e6      	b.n	801788a <__sccl+0x32>

080178bc <strncmp>:
 80178bc:	b510      	push	{r4, lr}
 80178be:	b16a      	cbz	r2, 80178dc <strncmp+0x20>
 80178c0:	3901      	subs	r1, #1
 80178c2:	1884      	adds	r4, r0, r2
 80178c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80178c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80178cc:	4293      	cmp	r3, r2
 80178ce:	d103      	bne.n	80178d8 <strncmp+0x1c>
 80178d0:	42a0      	cmp	r0, r4
 80178d2:	d001      	beq.n	80178d8 <strncmp+0x1c>
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d1f5      	bne.n	80178c4 <strncmp+0x8>
 80178d8:	1a98      	subs	r0, r3, r2
 80178da:	bd10      	pop	{r4, pc}
 80178dc:	4610      	mov	r0, r2
 80178de:	e7fc      	b.n	80178da <strncmp+0x1e>

080178e0 <_strtoul_l.isra.0>:
 80178e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178e4:	4680      	mov	r8, r0
 80178e6:	4689      	mov	r9, r1
 80178e8:	4692      	mov	sl, r2
 80178ea:	461e      	mov	r6, r3
 80178ec:	460f      	mov	r7, r1
 80178ee:	463d      	mov	r5, r7
 80178f0:	9808      	ldr	r0, [sp, #32]
 80178f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80178f6:	f7fe fc87 	bl	8016208 <__locale_ctype_ptr_l>
 80178fa:	4420      	add	r0, r4
 80178fc:	7843      	ldrb	r3, [r0, #1]
 80178fe:	f013 0308 	ands.w	r3, r3, #8
 8017902:	d130      	bne.n	8017966 <_strtoul_l.isra.0+0x86>
 8017904:	2c2d      	cmp	r4, #45	; 0x2d
 8017906:	d130      	bne.n	801796a <_strtoul_l.isra.0+0x8a>
 8017908:	787c      	ldrb	r4, [r7, #1]
 801790a:	1cbd      	adds	r5, r7, #2
 801790c:	2101      	movs	r1, #1
 801790e:	2e00      	cmp	r6, #0
 8017910:	d05c      	beq.n	80179cc <_strtoul_l.isra.0+0xec>
 8017912:	2e10      	cmp	r6, #16
 8017914:	d109      	bne.n	801792a <_strtoul_l.isra.0+0x4a>
 8017916:	2c30      	cmp	r4, #48	; 0x30
 8017918:	d107      	bne.n	801792a <_strtoul_l.isra.0+0x4a>
 801791a:	782b      	ldrb	r3, [r5, #0]
 801791c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017920:	2b58      	cmp	r3, #88	; 0x58
 8017922:	d14e      	bne.n	80179c2 <_strtoul_l.isra.0+0xe2>
 8017924:	786c      	ldrb	r4, [r5, #1]
 8017926:	2610      	movs	r6, #16
 8017928:	3502      	adds	r5, #2
 801792a:	f04f 32ff 	mov.w	r2, #4294967295
 801792e:	2300      	movs	r3, #0
 8017930:	fbb2 f2f6 	udiv	r2, r2, r6
 8017934:	fb06 fc02 	mul.w	ip, r6, r2
 8017938:	ea6f 0c0c 	mvn.w	ip, ip
 801793c:	4618      	mov	r0, r3
 801793e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017942:	2f09      	cmp	r7, #9
 8017944:	d817      	bhi.n	8017976 <_strtoul_l.isra.0+0x96>
 8017946:	463c      	mov	r4, r7
 8017948:	42a6      	cmp	r6, r4
 801794a:	dd23      	ble.n	8017994 <_strtoul_l.isra.0+0xb4>
 801794c:	2b00      	cmp	r3, #0
 801794e:	db1e      	blt.n	801798e <_strtoul_l.isra.0+0xae>
 8017950:	4282      	cmp	r2, r0
 8017952:	d31c      	bcc.n	801798e <_strtoul_l.isra.0+0xae>
 8017954:	d101      	bne.n	801795a <_strtoul_l.isra.0+0x7a>
 8017956:	45a4      	cmp	ip, r4
 8017958:	db19      	blt.n	801798e <_strtoul_l.isra.0+0xae>
 801795a:	fb00 4006 	mla	r0, r0, r6, r4
 801795e:	2301      	movs	r3, #1
 8017960:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017964:	e7eb      	b.n	801793e <_strtoul_l.isra.0+0x5e>
 8017966:	462f      	mov	r7, r5
 8017968:	e7c1      	b.n	80178ee <_strtoul_l.isra.0+0xe>
 801796a:	2c2b      	cmp	r4, #43	; 0x2b
 801796c:	bf04      	itt	eq
 801796e:	1cbd      	addeq	r5, r7, #2
 8017970:	787c      	ldrbeq	r4, [r7, #1]
 8017972:	4619      	mov	r1, r3
 8017974:	e7cb      	b.n	801790e <_strtoul_l.isra.0+0x2e>
 8017976:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801797a:	2f19      	cmp	r7, #25
 801797c:	d801      	bhi.n	8017982 <_strtoul_l.isra.0+0xa2>
 801797e:	3c37      	subs	r4, #55	; 0x37
 8017980:	e7e2      	b.n	8017948 <_strtoul_l.isra.0+0x68>
 8017982:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017986:	2f19      	cmp	r7, #25
 8017988:	d804      	bhi.n	8017994 <_strtoul_l.isra.0+0xb4>
 801798a:	3c57      	subs	r4, #87	; 0x57
 801798c:	e7dc      	b.n	8017948 <_strtoul_l.isra.0+0x68>
 801798e:	f04f 33ff 	mov.w	r3, #4294967295
 8017992:	e7e5      	b.n	8017960 <_strtoul_l.isra.0+0x80>
 8017994:	2b00      	cmp	r3, #0
 8017996:	da09      	bge.n	80179ac <_strtoul_l.isra.0+0xcc>
 8017998:	2322      	movs	r3, #34	; 0x22
 801799a:	f8c8 3000 	str.w	r3, [r8]
 801799e:	f04f 30ff 	mov.w	r0, #4294967295
 80179a2:	f1ba 0f00 	cmp.w	sl, #0
 80179a6:	d107      	bne.n	80179b8 <_strtoul_l.isra.0+0xd8>
 80179a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179ac:	b101      	cbz	r1, 80179b0 <_strtoul_l.isra.0+0xd0>
 80179ae:	4240      	negs	r0, r0
 80179b0:	f1ba 0f00 	cmp.w	sl, #0
 80179b4:	d0f8      	beq.n	80179a8 <_strtoul_l.isra.0+0xc8>
 80179b6:	b10b      	cbz	r3, 80179bc <_strtoul_l.isra.0+0xdc>
 80179b8:	f105 39ff 	add.w	r9, r5, #4294967295
 80179bc:	f8ca 9000 	str.w	r9, [sl]
 80179c0:	e7f2      	b.n	80179a8 <_strtoul_l.isra.0+0xc8>
 80179c2:	2430      	movs	r4, #48	; 0x30
 80179c4:	2e00      	cmp	r6, #0
 80179c6:	d1b0      	bne.n	801792a <_strtoul_l.isra.0+0x4a>
 80179c8:	2608      	movs	r6, #8
 80179ca:	e7ae      	b.n	801792a <_strtoul_l.isra.0+0x4a>
 80179cc:	2c30      	cmp	r4, #48	; 0x30
 80179ce:	d0a4      	beq.n	801791a <_strtoul_l.isra.0+0x3a>
 80179d0:	260a      	movs	r6, #10
 80179d2:	e7aa      	b.n	801792a <_strtoul_l.isra.0+0x4a>

080179d4 <_strtoul_r>:
 80179d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80179d6:	4c06      	ldr	r4, [pc, #24]	; (80179f0 <_strtoul_r+0x1c>)
 80179d8:	4d06      	ldr	r5, [pc, #24]	; (80179f4 <_strtoul_r+0x20>)
 80179da:	6824      	ldr	r4, [r4, #0]
 80179dc:	6a24      	ldr	r4, [r4, #32]
 80179de:	2c00      	cmp	r4, #0
 80179e0:	bf08      	it	eq
 80179e2:	462c      	moveq	r4, r5
 80179e4:	9400      	str	r4, [sp, #0]
 80179e6:	f7ff ff7b 	bl	80178e0 <_strtoul_l.isra.0>
 80179ea:	b003      	add	sp, #12
 80179ec:	bd30      	pop	{r4, r5, pc}
 80179ee:	bf00      	nop
 80179f0:	2000000c 	.word	0x2000000c
 80179f4:	20000070 	.word	0x20000070

080179f8 <__submore>:
 80179f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179fc:	460c      	mov	r4, r1
 80179fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017a00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a04:	4299      	cmp	r1, r3
 8017a06:	d11d      	bne.n	8017a44 <__submore+0x4c>
 8017a08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017a0c:	f7ff f914 	bl	8016c38 <_malloc_r>
 8017a10:	b918      	cbnz	r0, 8017a1a <__submore+0x22>
 8017a12:	f04f 30ff 	mov.w	r0, #4294967295
 8017a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017a1e:	63a3      	str	r3, [r4, #56]	; 0x38
 8017a20:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017a24:	6360      	str	r0, [r4, #52]	; 0x34
 8017a26:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017a2a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017a2e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017a32:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017a36:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017a3a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017a3e:	6020      	str	r0, [r4, #0]
 8017a40:	2000      	movs	r0, #0
 8017a42:	e7e8      	b.n	8017a16 <__submore+0x1e>
 8017a44:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017a46:	0077      	lsls	r7, r6, #1
 8017a48:	463a      	mov	r2, r7
 8017a4a:	f000 f85a 	bl	8017b02 <_realloc_r>
 8017a4e:	4605      	mov	r5, r0
 8017a50:	2800      	cmp	r0, #0
 8017a52:	d0de      	beq.n	8017a12 <__submore+0x1a>
 8017a54:	eb00 0806 	add.w	r8, r0, r6
 8017a58:	4601      	mov	r1, r0
 8017a5a:	4632      	mov	r2, r6
 8017a5c:	4640      	mov	r0, r8
 8017a5e:	f7fe fc85 	bl	801636c <memcpy>
 8017a62:	f8c4 8000 	str.w	r8, [r4]
 8017a66:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017a6a:	e7e9      	b.n	8017a40 <__submore+0x48>

08017a6c <__ascii_wctomb>:
 8017a6c:	b149      	cbz	r1, 8017a82 <__ascii_wctomb+0x16>
 8017a6e:	2aff      	cmp	r2, #255	; 0xff
 8017a70:	bf85      	ittet	hi
 8017a72:	238a      	movhi	r3, #138	; 0x8a
 8017a74:	6003      	strhi	r3, [r0, #0]
 8017a76:	700a      	strbls	r2, [r1, #0]
 8017a78:	f04f 30ff 	movhi.w	r0, #4294967295
 8017a7c:	bf98      	it	ls
 8017a7e:	2001      	movls	r0, #1
 8017a80:	4770      	bx	lr
 8017a82:	4608      	mov	r0, r1
 8017a84:	4770      	bx	lr
	...

08017a88 <_fstat_r>:
 8017a88:	b538      	push	{r3, r4, r5, lr}
 8017a8a:	4c07      	ldr	r4, [pc, #28]	; (8017aa8 <_fstat_r+0x20>)
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	4605      	mov	r5, r0
 8017a90:	4608      	mov	r0, r1
 8017a92:	4611      	mov	r1, r2
 8017a94:	6023      	str	r3, [r4, #0]
 8017a96:	f7ed ff28 	bl	80058ea <_fstat>
 8017a9a:	1c43      	adds	r3, r0, #1
 8017a9c:	d102      	bne.n	8017aa4 <_fstat_r+0x1c>
 8017a9e:	6823      	ldr	r3, [r4, #0]
 8017aa0:	b103      	cbz	r3, 8017aa4 <_fstat_r+0x1c>
 8017aa2:	602b      	str	r3, [r5, #0]
 8017aa4:	bd38      	pop	{r3, r4, r5, pc}
 8017aa6:	bf00      	nop
 8017aa8:	2003b620 	.word	0x2003b620

08017aac <_isatty_r>:
 8017aac:	b538      	push	{r3, r4, r5, lr}
 8017aae:	4c06      	ldr	r4, [pc, #24]	; (8017ac8 <_isatty_r+0x1c>)
 8017ab0:	2300      	movs	r3, #0
 8017ab2:	4605      	mov	r5, r0
 8017ab4:	4608      	mov	r0, r1
 8017ab6:	6023      	str	r3, [r4, #0]
 8017ab8:	f7ed ff27 	bl	800590a <_isatty>
 8017abc:	1c43      	adds	r3, r0, #1
 8017abe:	d102      	bne.n	8017ac6 <_isatty_r+0x1a>
 8017ac0:	6823      	ldr	r3, [r4, #0]
 8017ac2:	b103      	cbz	r3, 8017ac6 <_isatty_r+0x1a>
 8017ac4:	602b      	str	r3, [r5, #0]
 8017ac6:	bd38      	pop	{r3, r4, r5, pc}
 8017ac8:	2003b620 	.word	0x2003b620

08017acc <memmove>:
 8017acc:	4288      	cmp	r0, r1
 8017ace:	b510      	push	{r4, lr}
 8017ad0:	eb01 0302 	add.w	r3, r1, r2
 8017ad4:	d807      	bhi.n	8017ae6 <memmove+0x1a>
 8017ad6:	1e42      	subs	r2, r0, #1
 8017ad8:	4299      	cmp	r1, r3
 8017ada:	d00a      	beq.n	8017af2 <memmove+0x26>
 8017adc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ae0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017ae4:	e7f8      	b.n	8017ad8 <memmove+0xc>
 8017ae6:	4283      	cmp	r3, r0
 8017ae8:	d9f5      	bls.n	8017ad6 <memmove+0xa>
 8017aea:	1881      	adds	r1, r0, r2
 8017aec:	1ad2      	subs	r2, r2, r3
 8017aee:	42d3      	cmn	r3, r2
 8017af0:	d100      	bne.n	8017af4 <memmove+0x28>
 8017af2:	bd10      	pop	{r4, pc}
 8017af4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017af8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017afc:	e7f7      	b.n	8017aee <memmove+0x22>

08017afe <__malloc_lock>:
 8017afe:	4770      	bx	lr

08017b00 <__malloc_unlock>:
 8017b00:	4770      	bx	lr

08017b02 <_realloc_r>:
 8017b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b04:	4607      	mov	r7, r0
 8017b06:	4614      	mov	r4, r2
 8017b08:	460e      	mov	r6, r1
 8017b0a:	b921      	cbnz	r1, 8017b16 <_realloc_r+0x14>
 8017b0c:	4611      	mov	r1, r2
 8017b0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017b12:	f7ff b891 	b.w	8016c38 <_malloc_r>
 8017b16:	b922      	cbnz	r2, 8017b22 <_realloc_r+0x20>
 8017b18:	f7ff f840 	bl	8016b9c <_free_r>
 8017b1c:	4625      	mov	r5, r4
 8017b1e:	4628      	mov	r0, r5
 8017b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b22:	f000 f814 	bl	8017b4e <_malloc_usable_size_r>
 8017b26:	42a0      	cmp	r0, r4
 8017b28:	d20f      	bcs.n	8017b4a <_realloc_r+0x48>
 8017b2a:	4621      	mov	r1, r4
 8017b2c:	4638      	mov	r0, r7
 8017b2e:	f7ff f883 	bl	8016c38 <_malloc_r>
 8017b32:	4605      	mov	r5, r0
 8017b34:	2800      	cmp	r0, #0
 8017b36:	d0f2      	beq.n	8017b1e <_realloc_r+0x1c>
 8017b38:	4631      	mov	r1, r6
 8017b3a:	4622      	mov	r2, r4
 8017b3c:	f7fe fc16 	bl	801636c <memcpy>
 8017b40:	4631      	mov	r1, r6
 8017b42:	4638      	mov	r0, r7
 8017b44:	f7ff f82a 	bl	8016b9c <_free_r>
 8017b48:	e7e9      	b.n	8017b1e <_realloc_r+0x1c>
 8017b4a:	4635      	mov	r5, r6
 8017b4c:	e7e7      	b.n	8017b1e <_realloc_r+0x1c>

08017b4e <_malloc_usable_size_r>:
 8017b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017b52:	1f18      	subs	r0, r3, #4
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	bfbc      	itt	lt
 8017b58:	580b      	ldrlt	r3, [r1, r0]
 8017b5a:	18c0      	addlt	r0, r0, r3
 8017b5c:	4770      	bx	lr
	...

08017b60 <_init>:
 8017b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b62:	bf00      	nop
 8017b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b66:	bc08      	pop	{r3}
 8017b68:	469e      	mov	lr, r3
 8017b6a:	4770      	bx	lr

08017b6c <_fini>:
 8017b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b6e:	bf00      	nop
 8017b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b72:	bc08      	pop	{r3}
 8017b74:	469e      	mov	lr, r3
 8017b76:	4770      	bx	lr
